"r04945025","3","0.0966666666666667","99728","@93171bccf368154292675f3b5d7d4cf5@
public class Hand implements Comparable<Hand> {

    private Card[] cards;
    private int    hand;
    private Card   bestCard;

    public Hand(Card[] cards){
        int[] faceCount  = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        int[] suitNumber = {0, 0, 0, 0, 0, 0};
        int[] faceNumber = {0, 0, 0, 0, 0};
        int[] suitCount  = {0, 0, 0, 0};
        InsertionSort(cards);
        this.cards = cards;

        for(int i = 0; i < 5; i++){
            int suit = suit2Int(cards[i].getSuit());
            int face = face2Int(cards[i].getFace()) - 2;
            suitCount[suit] += 1;
            faceCount[face] += 1;
        }
        for(int i = 0; i < 4; i++){
            suitNumber[suitCount[i]] += 1;
        }
        for(int i = 0; i < 13; i++){
            faceNumber[faceCount[i]] += 1;
        }

        // Full House
        if(faceNumber[3] == 1 && faceNumber[2] == 1){
            int bestCardFace = -1;
            this.hand = 5;
            for(int i = 0; i < 13; i++){
                if(faceCount[i] == 3){
                    bestCardFace = i + 2;
                    break;
                }
            }
            for(int i = 4; i >= 0; i--){
                if(face2Int(cards[i].getFace()) == bestCardFace){
                    this.bestCard = cards[i];
                    return;
                }
            }
        }

        // Flush
        else if(suitNumber[5] == 1){
            this.hand = 4;
            this.bestCard = cards[4];
            return;
        }

        // Straight and High Card
        else if(faceNumber[1] == 5){
            int count = 5;
            int index = 0;
            int[] straight = new int[5];
            for(int i = 0; i < 13; i++){
                if(faceCount[i] == 1){
                    straight[index++] = i;
                }
            }
            if(straight[4] == 12 && straight[0] == 0){
                count = 4;
            }
            int tmp = 1;
            for(int i = 0; i < 4; i++){
                if(straight[i + 1] - straight[i] == 1){
                    tmp++;
                }
                else{
                    break;
                }
            }
            if(tmp == count){
                this.hand = 3;
                if(count == 5){
                    this.bestCard = cards[4];
                    return;
                }
                else{
                    this.bestCard = cards[3];
                    return;
                }
            }
            else{
                this.hand = 0;
                this.bestCard = cards[4];
                return;
            }
        }

        // Two Pairs
        else if(faceNumber[2] == 2){
            int bestCardFaceA = -1;
            int bestCardFaceB = -1;
            int i;
            this.hand = 2;
            for(i = 0; i < 13; i++){
                if(faceCount[i] == 2){
                    bestCardFaceA = i + 2;
                    break;
                }
            }
            for(i = i + 1; i < 13; i++){
                if(faceCount[i] == 2){
                    bestCardFaceB = i + 2;
                    break;
                }
            }
            for(i = 4; i >= 0; i--){
                int face = face2Int(cards[i].getFace());
                if(face == bestCardFaceA || face == bestCardFaceB){
                    this.bestCard = cards[i];
                    return;
                }
            }
        }

        // One Pair
        else if(faceNumber[2] == 1){
            int bestCardFace = -1;
            this.hand = 1;
            for(int i = 0; i < 13; i++){
                if(faceCount[i] == 2){
                    bestCardFace = i + 2;
                    break;
                }
            }
            for(int i = 4; i >= 0; i--){
                if(face2Int(cards[i].getFace()) == bestCardFace){
                    this.bestCard = cards[i];
                    return;
                }
            }
        }

        // High Card
        else{
            // System.out.printf(""Some Error Occurs\n"");
        }
        // System.out.printf(""%s: %s, %s-%s\n"", this.name, this.hand, this.bestCard.getSuit(), this.bestCard.getFace());
        return;
    }

    private void InsertionSort(Card[] cards){
        for(int i = 0; i < cards.length; i++){
            for(int j = i; j > 0; j--){
                if(cards[j].compareTo(cards[j-1]) < 0){
                    Card tmp   = cards[j];
                    cards[j]   = cards[j-1];
                    cards[j-1] = tmp;
                }
                else{
                    break;
                }
            }
        }
    }

    public Card[] getCards() { return this.cards; }

    public int getHand(){
        return this.hand;
    }

    public Card getBestCard(){
        return this.bestCard;
    }

    public int compareTo(Hand that) {
        int handA = this.getHand();
        int handB = that.getHand();
        if(handA > handB){
            return +1;
        }
        else if(handA == handB){
            return this.getBestCard().compareTo(that.getBestCard());
        }
        else{
            return -1;
        }
    }

    private int suit2Int(String suit){
        switch(suit){
            case ""Clubs"":
                return 0;
            case ""Diamonds"":
                return 1;
            case ""Hearts"":
                return 2;
            case ""Spades"":
                return 3;
            default:
                throw new IllegalArgumentException();
        }
    }

    private int face2Int(String face){
        switch(face){
            case ""J"":
                return 11;
            case ""Q"":
                return 12;
            case ""K"":
                return 13;
            case ""A"":
                return 14;
            default:
                return Integer.parseInt(face);
        }
    }
}

@93171bccf368154292675f3b5d7d4cf5@"
"r04447001","3","0.123333333333333","105232","@0445aec797bdc2f037cb4365c9e044fa@import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards = new Card[5];

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
    }

    // TODO
    public int compareTo(Hand that) {
        
        int[] counttable1 = new int[15];
        int[] counttable2 = new int[15];
        int[] suittable1 = new int[4];
        int[] suittable2 = new int[4];
        Arrays.sort(this.cards);
        Arrays.sort(that.cards);

        for (int i = 0; i < this.cards.length; i++) {
            if (this.cards[i].getFace().equalsIgnoreCase(""A"")) {
                counttable1[14]++;
            } else if (this.cards[i].getFace().equalsIgnoreCase(""K"")) {
                counttable1[13]++;
            } else if (this.cards[i].getFace().equalsIgnoreCase(""Q"")) {
                counttable1[12]++;
            } else if (this.cards[i].getFace().equalsIgnoreCase(""J"")) {
                counttable1[11]++;
            } else {
                counttable1[Integer.parseInt(this.cards[i].getFace())]++;
            }

            if (this.cards[i].getSuit().equalsIgnoreCase(""Spades"")) {
                suittable1[3]++;
            } else if (this.cards[i].getSuit().equalsIgnoreCase(""Hearts"")) {
                suittable1[2]++;
            } else if (this.cards[i].getSuit().equalsIgnoreCase(""Diamonds"")) {
                suittable1[1]++;
            } else {
                suittable1[0]++;
            }
        }//making table for p1

        for (int i = 0; i < that.cards.length; i++) {
            if (that.cards[i].getFace().equals(""A"")) {
                counttable2[14]++;
            } else if (that.cards[i].getFace().equalsIgnoreCase(""K"")) {
                counttable2[13]++;
            } else if (that.cards[i].getFace().equalsIgnoreCase(""Q"")) {
                counttable2[12]++;
            } else if (that.cards[i].getFace().equalsIgnoreCase(""J"")) {
                counttable2[11]++;
            } else {
                counttable2[Integer.parseInt(that.cards[i].getFace())]++;
            }

            if (that.cards[i].getSuit().equalsIgnoreCase(""Spades"")) {
                suittable2[3]++;
            } else if (that.cards[i].getSuit().equalsIgnoreCase(""Hearts"")) {
                suittable2[2]++;
            } else if (that.cards[i].getSuit().equalsIgnoreCase(""Diamonds"")) {
                suittable2[1]++;
            } else {
                suittable2[0]++;
            }
        }//making table for p2

        int isfull_house1 = 0;
        int isfull_house2 = 0;
        int maxfull1 = 0;
        int maxfull2 = 0;
        for (int i = 0; i < counttable1.length; i++) {
            if (counttable1[i] == 3) {
                maxfull1 = i;
                for (int j = 0; j < counttable1.length; j++) {
                    if (counttable1[j] == 2) {
                        isfull_house1 = 1;
                    }
                }
            }
        }
        for (int i = 0; i < counttable2.length; i++) {
            if (counttable2[i] == 3) {
                maxfull2 = i;
                for (int j = 0; j < counttable2.length; j++) {
                    if (counttable2[j] == 2) {
                        isfull_house2 = 1;
                    }
                }
            }
        }
        if (isfull_house1 > isfull_house2) {
            return 1;
        }
        if (isfull_house1 < isfull_house2) {
            return -1;
        }
        if (isfull_house1 == 1 && isfull_house2 == 1) {
            if(maxfull1 > maxfull2) return 1;
            if(maxfull1 < maxfull2) return -1;
        }// for full house

        int isflush1 = 0;
        int isflush2 = 0;
        for (int i = 0; i < suittable1.length; i++) {
            if (suittable1[i] == 5) {
                isflush1 = 1;
            }
        }
        for (int i = 0; i < suittable2.length; i++) {
            if (suittable2[i] == 5) {
                isflush2 = 1;
            }
        }

        if (isflush1 > isflush2) {
            return 1;
        }
        if (isflush1 < isflush2) {
            return -1;
        }
        if (isflush1 == 1 && isflush2 == 1) {
            return this.cards[4].compareTo(that.cards[4]);
        }// for flush     

        int isstraight1 = 0;
        int islittle1 = 0;
        int isstraight2 = 0;
        int islittle2 = 0;
        for (int i = 0; i < (counttable1.length - 4); i++) {
            if (counttable1[i] == 1) {
                if (counttable1[(i + 1)] == 1 && counttable1[(i + 2)] == 1 && counttable1[(i + 3)] == 1 && counttable1[(i + 4)] == 1) {
                    isstraight1 = 1;
                    break;
                }
            }
        }
        if(counttable1[2] == 1 && counttable1[3] == 1 && counttable1[4] == 1 && counttable1[5] == 1 && counttable1[14] == 1){
            isstraight1 = 1;
            islittle1 = 1;
        }//account for A 2 3 4 5
        
        for (int i = 0; i < (counttable2.length - 4); i++) {
            if (counttable2[i] == 1) {
                if (counttable2[(i + 1)] == 1 && counttable2[(i + 2)] == 1 && counttable2[(i + 3)] == 1 && counttable2[(i + 4)] == 1) {
                    isstraight2 = 1;
                    break;
                }    
            }
        }
        if(counttable2[2] == 1 && counttable2[3] == 1 && counttable2[4] == 1 && counttable2[5] == 1 && counttable2[14] == 1){
            isstraight2 = 1;
            islittle2 = 1;
        }//account for A 2 3 4 5

        if (isstraight1 > isstraight2) {
            return 1;
        }
        if (isstraight1 < isstraight2) {
            return -1;
        }
        if (isstraight1 == 1 && isstraight2 == 1) {
            if(islittle1 > islittle2) return -1;
            if(islittle1 < islittle2) return 1;
            if(islittle1 == 1 && islittle2 == 1){
                return this.cards[3].compareTo(that.cards[3]);
            }
            return this.cards[4].compareTo(that.cards[4]);
        }// for flush        

        int count = 0;
        int istwopairs1 = 0;
        int istwopairs2 = 0;
        int maxpair1 = 0;
        int maxpair2 = 0;
        int pairs1 = 0;
        int pairs2 = 0;
        
        Card[] maxcard1 = new Card[2];
        for (int i = 0; i < counttable1.length; i++) {
            if (counttable1[i] == 2) {
            pairs1++;
            maxpair1 = i;               
            }
        }

        if (pairs1 == 2) {
            istwopairs1 = 1;
            String number = String.valueOf(maxpair1);
            if(number.equals(""11"")) number = ""J"";
            if(number.equals(""12"")) number = ""Q"";
            if(number.equals(""13"")) number = ""K"";
            if(number.equals(""14"")) number = ""A"";
            for(int j = 0; j < this.cards.length; j++){
                if(this.cards[j].getFace().equalsIgnoreCase(number))
                maxcard1[count++] = this.cards[j]; 
            }
            Arrays.sort(maxcard1);
        }
        
        count = 0;
        Card[] maxcard2 = new Card[2];
        
        for (int i = 0; i < counttable2.length; i++) {
            if (counttable2[i] == 2) {
                pairs2++;
                maxpair2 = i;
            }
        }
        
        if (pairs2 == 2) {
            istwopairs2 = 1;
            String number = String.valueOf(maxpair2);
            if(number.equals(""11"")) number = ""J"";
            if(number.equals(""12"")) number = ""Q"";
            if(number.equals(""13"")) number = ""K"";
            if(number.equals(""14"")) number = ""A"";
            for(int j = 0; j < that.cards.length; j++){
                if(that.cards[j].getFace().equalsIgnoreCase(number))
                maxcard2[count++] = that.cards[j]; 
            }
            Arrays.sort(maxcard2);
        }

        if (istwopairs1 > istwopairs2) {
            return 1;
        }
        if (istwopairs1 < istwopairs2) {
            return -1;
        }
        if (istwopairs1 == 1 && istwopairs2 == 1) {
            return maxcard1[1].compareTo(maxcard2[1]);
        }// for flush        
        
        
        int ispairs1 = 0;
        int ispairs2 = 0;

        count = 0;
        if (pairs1 == 1) {
            ispairs1 = 1;
            String number = String.valueOf(maxpair1);
            if(number.equals(""11"")) number = ""J"";
            if(number.equals(""12"")) number = ""Q"";
            if(number.equals(""13"")) number = ""K"";
            if(number.equals(""14"")) number = ""A"";
            for(int j = 0; j < this.cards.length; j++){
                if(this.cards[j].getFace().equalsIgnoreCase(number))
                maxcard1[count++] = this.cards[j]; 
            }
            Arrays.sort(maxcard1);
        }

        count = 0;       
        if (pairs2 == 1) {
            ispairs2 = 1;
            String number = String.valueOf(maxpair2);
            if(number.equals(""11"")) number = ""J"";
            if(number.equals(""12"")) number = ""Q"";
            if(number.equals(""13"")) number = ""K"";
            if(number.equals(""14"")) number = ""A"";
            for(int j = 0; j < that.cards.length; j++){
                if(that.cards[j].getFace().equalsIgnoreCase(number))
                maxcard2[count++] = that.cards[j]; 
            }
            Arrays.sort(maxcard2);
        }
        
        if (ispairs1 > ispairs2) {
            return 1;
        }
        if (ispairs1 < ispairs2) {
            return -1;
        }
        if (ispairs1 == 1 && ispairs2 == 1) {
            return maxcard1[1].compareTo(maxcard2[1]);
        }// for flush         
        // complete this function so the Player can be sorted according to the cards he/she has.
        return this.cards[4].compareTo(that.cards[4]);
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@0445aec797bdc2f037cb4365c9e044fa@"
"r04546032","0","0.31","105088","@897f11981b8d7db016c3b19f2ed521a9@
import java.util.Arrays;



/**
 *
 * @author CHIN LUNG
 */
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards = new Card[5];
    public int[] Points = new int[5];
    public int[] Points1 = new int[5];
    public int[] Points2 = new int[5];
    MaxPQ PQ = new MaxPQ();
    
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        
        this.cards = cards;
        
    }

    // TODO
  public int compareTo(Hand that) {
  int outcome =0;
         //得到牌的所有數字
        for (int i = 0; i < 5; i++) {
            Points1[i] = GetPoint(this.cards[i]);
	    Points2[i] = GetPoint(that.cards[i]);	
        }
        Arrays.sort(Points1);
	Arrays.sort(Points2);
        if (compare(this) > compare(that)) {
            outcome = 1;
        } else if (compare(this) < compare(that)) {
            outcome = -1;
        } else if(compare(this) == compare(that)){
            if(compare(this) == 3 ) //straight 
		{ 
                    if(straight(Points1)  > straight(Points2))
                    {
                        outcome = 1;
                    }
                    else if(straight(Points1)== straight(Points2))
                    {
                        outcome = 0;
                    }
                    else outcome = -1;
                }

           
             if(compare(this) == 5)  //full house
                {
                     if( fullhouse(Points1) > fullhouse(Points2) )
                    {
                        outcome = 1;
                    }
                    else if(fullhouse(Points1) == fullhouse(Points2))
                    {
                        outcome = 0;
                    }
                    else outcome = -1;
                }
             if(compare(this) == 2 && compare(that)==2)  //two pair
                {
                     if( twopair(Points1) > twopair(Points2) )
                    {
                        outcome = 1;
                    }
                    else if(twopair(Points1) == twopair(Points2))
                    {
                        outcome = 0;
                    }
                    else outcome = -1;
                }
//              //  if(compare(this) == 1)  //one pair
                 if(compare(this) == 1 && compare(that) == 1)
                {
                     if( onepair(Points1) > onepair(Points2) )
                    {
                        outcome = 1;
                    }
                    else if(onepair(Points1) == onepair(Points2))
                    {
                        outcome = 0;
                    }
                    else outcome = -1;
                }
                 if(compare(this) == 4 || compare(this) == 0)  //high card and flush
                 {
                      if( highfulshcard(Points1) > highfulshcard(Points2) )
                    {
                        outcome = 1;
                    }
                    else if(highfulshcard(Points1) == highfulshcard(Points2))
                    {
                        outcome = 0;
                    }
                    else outcome = -1;
                 }
            
        }
        return outcome ;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
     public int GetPoint(Card c) {
        int face = 0;
        switch (c.getFace()) {
            case ""A"":
                face = 1;
                break;
            case ""2"":
                face = 2;
                break;
            case ""3"":
                face = 3;
                break;
            case ""4"":
                face = 4;
                break;
            case ""5"":
                face = 5;
                break;
            case ""6"":
                face = 6;
                break;
            case ""7"":
                face = 7;
                break;
            case ""8"":
                face = 8;
                break;
            case ""9"":
                face = 9;
                break;
            case ""10"":
                face = 10;
                break;
            case ""J"":
                face = 11;
                break;
            case ""Q"":
                face = 12;
                break;
            case ""K"":
                face = 13;
                break;
        }
        return face;
    }

    public int compare(Hand that) {
        int outcome =0;
         //得到牌的所有數字
        for (int i = 0; i < 5; i++) {
            Points1[i] = GetPoint(this.cards[i]);
	    Points2[i] = GetPoint(that.cards[i]);	
        }
        Arrays.sort(Points1);
	Arrays.sort(Points2);
        if (Compare(this) > Compare(that)) {
            outcome = 1;
        } else if (Compare(this) < Compare(that)) {
            outcome = -1;
        } else if(Compare(this) == Compare(that)){
            if(Compare(this) == 3 ) //straight 
		{ 
//                    if(Points1[4] > Points2[4])
//                    {
//                        outcome = 1;
//                    }
//                    else if(Points1[4] == Points2[4])
//                    {
//                        outcome = 0;
//                    }
//                    else outcome = -1;
                    outcome = 0;
                }

           
             if(Compare(this) == 5)  //full house
                {
                     if( fullhouse(Points1) > fullhouse(Points2) )
                    {
                        outcome = 1;
                    }
                    else if(fullhouse(Points1) == fullhouse(Points2))
                    {
                        outcome = 0;
                    }
                    else outcome = -1;
                }
             if(Compare(this) == 2 && Compare(that)==2)  //two pair
                {
                     if( twopair(Points1) > twopair(Points2) )
                    {
                        outcome = 1;
                    }
                    else if(twopair(Points1) == twopair(Points2))
                    {
                        outcome = 0;
                    }
                    else outcome = -1;
                }
//              //  if(compare(this) == 1)  //one pair
                 if(Compare(this) == 1 && Compare(that) == 1)
                {
                     if( onepair(Points1) > onepair(Points2) )
                    {
                        outcome = 1;
                    }
                    else if(onepair(Points1) == onepair(Points2))
                    {
                        outcome = 0;
                    }
                    else outcome = -1;
                }
                 if(Compare(this) == 4 || Compare(this) == 0)  //high card and flush
                 {
                      if( highfulshcard(Points1) > highfulshcard(Points2) )
                    {
                        outcome = 1;
                    }
                    else if(highfulshcard(Points1) == highfulshcard(Points2))
                    {
                        outcome = 0;
                    }
                    else outcome = -1;
                 }
            
        }
        return outcome ;
    }
      public int Compare(Hand that) {
        int count = 0; 
        int Pair = 0;
        //sort the suit first  check if it is flush first
        Arrays.sort(that.cards, Card.SUIT_ORDER);
        for (int i = 0; i < 4; i++) {
            if (Card.SUIT_ORDER.compare(that.cards[i], that.cards[i + 1]) == 0) //flush
            {
                count++;
                if (count == 4) {
                    return 4;
                }
            }
        }
        count = 0;
        //得到牌的所有數字
        for (int i = 0; i < 5; i++) {
            Points[i] = GetPoint(that.cards[i]);
        }
        Arrays.sort(Points);
        for (int i = 0; i < 4; i++) //straight
        {
            if (Points[i] == Points[i + 1] - 1) {
                count++;
            }
        }
        if (count == 4) {
            return 3;
        }
        if(Points[0]==1 && Points[1] == 10 && Points[2] == 11 &&Points[3] == 12 &&Points[4] == 13)
        {
            return 3;
        }
        if(Points[0]==1 && Points[1] == 2 && Points[2] == 11 &&Points[3] == 12 &&Points[4] == 13)
        {
            return 3;
        }
        if(Points[0]==1 && Points[1] == 2 && Points[2] == 3 &&Points[3] == 12 &&Points[4] == 13)
        {
            return 3;
        }
        if(Points[0]==1 && Points[1] == 2 && Points[2] == 3 &&Points[3] == 4 &&Points[4] == 13)
        {
            return 3;
        }
        count = 0;
        // one pair two pair full house
        for (int i = 0; i < 4; i++) {
            if (Points[i] == Points[i + 1]) //one pair
            {
                Pair++;
            } else {
                Pair--;
            }

        }
        if (Pair == 2) {  //fullhouse
            return 5;
        } else if (Pair == 0) { //two pair
            return 2;
        } else if (Pair == -2) { //one pair
            return 1;
        } else {
            return 0;
        }
    }
    
    
    public int fullhouse(int [] c)
    { int count = 0; int flag = 0;

        for(int i = 0; i < 4; i++)
        {
            if(c[i] == c[i+1])
            {
                count++;
                if(count == 2)
                {
                    if(c[i] == 1)
                    {
                        flag = 100;
                    }
                    else flag = c[i];
                   break;
                }
            }
            else
            {
                count--;
            }
        
        }
        return flag;
    }

    
    
     public int onepair(int [] c)
    { int count = 0; int flag = 0;
        for(int i = 0; i < 4; i++)
        {
            if(c[i] == c[i+1])
            {
                count++;
                
                if(count == 1)
                {
                     if(c[i] == 1)
                    {
                        flag = 100;
                    }
                     else flag = c[i];
                   break;
                }
            }
        }
        return flag;
    }
     
      public int twopair(int [] c)
    { int count = 0; int flag = 0;
        for(int i = 0; i < 4; i++)
        {
            if(c[i] == c[i+1] )
            {
                count++;
                if(count == 2)
                {
                   flag = c[i];
                   break;
                }
            }
             if(c[i] == c[i+1] && c[i] == 1)
            {
                flag = 100;break;
            }
        }
        return flag;
    }
      public int highfulshcard(int [] c)
      {         
              if(c[0] == 1)
              {
                  return 100;
              } 
              else{
                  return c[4];
              }
      }
      public int straight(int []c )
      {
        if(Points[0]==1 && Points[1] == 10 && Points[2] == 11 &&Points[3] == 12 &&Points[4] == 13)
        {
            return 100;
        }
        if(Points[0]==1 && Points[1] == 2 && Points[2] == 11 &&Points[3] == 12 &&Points[4] == 13)
        {
            return 100;
        }
        if(Points[0]==1 && Points[1] == 2 && Points[2] == 3 &&Points[3] == 12 &&Points[4] == 13)
        {
            return 100;
        }
        if(Points[0]==1 && Points[1] == 2 && Points[2] == 3 &&Points[3] == 4 &&Points[4] == 13)
        {
            return 100;
        }
          else{
              return c[4];
          }
      }
}


@897f11981b8d7db016c3b19f2ed521a9@"
"b03611011","0","0.123333333333333","105232","@21c92f3626a2c47760da5b848cc90b3f@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }
        public Comparator<Card> suitOrder() {
        return new SuitOrder();
    }

    // TODO
    @Override
    public int compareTo(Card that) {
        int i, j;
        switch (this.face) {
            case ""A"":
                i = 1;
                break;
            case ""J"":
                i = 11;
                break;
            case ""Q"":
                i = 12;
                break;
            case ""K"":
                i = 13;
                break;
            default:
                i = Integer.parseInt(this.face);
        }
        switch (that.face) {
            case ""A"":
                j = 1;
                break;
            case ""J"":
                j = 11;
                break;
            case ""Q"":
                j = 12;
                break;
            case ""K"":
                j = 13;
                break;
            default:
                j = Integer.parseInt(that.face);
        }
        if (i < j) {
            return -1;
        }
        if (i > j) {
            return 1;
        }
        switch (this.suit) {
            case ""Spades"":
                i = 4;
                break;
            case ""Hearts"":
                i = 3;
                break;
            case ""Diamonds"":
                i = 2;
                break;
            case ""Clubs"":
                i = 1;
                break;
            default:
                return 0;
        }
        switch (that.suit) {
            case ""Spades"":
                j = 4;
                break;
            case ""Hearts"":
                j = 3;
                break;
            case ""Diamonds"":
                j = 2;
                break;
            case ""Clubs"":
                j = 1;
                break;
            default:
                return 0;
        }
        if (i < j) {
            return -1;
        }
        if (i > j) {
            return 1;
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        @Override
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int i, j;
            switch (c1.suit) {
                case ""Spades"":
                    i = 1;
                    break;
                case ""Hearts"":
                    i = 2;
                    break;
                case ""Diamonds"":
                    i = 3;
                    break;
                case ""Clubs"":
                    i = 4;
                    break;
                default:
                    return 0;
            }
            switch (c2.suit) {
                case ""Spades"":
                    j = 1;
                    break;
                case ""Hearts"":
                    j = 2;
                    break;
                case ""Diamonds"":
                    j = 3;
                    break;
                case ""Clubs"":
                    j = 4;
                    break;
                default:
                    return 0;
            }
            if (i < j) {
                return -1;
            }
            if (i > j) {
                return 1;
            }
            return 0;
        }
    }
}


@21c92f3626a2c47760da5b848cc90b3f@"
"r04546032","3","0.0966666666666667","105568","@ce20d0d5ff11ddaa340c48523bf52471@
import java.util.Arrays;



/**
 *
 * @author CHIN LUNG
 */
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards = new Card[5];
    public int[] Points = new int[5];
    public int[] Points1 = new int[5];
    public int[] Points2 = new int[5];
//    MaxPQ PQ = new MaxPQ();
    
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        
        this.cards = cards;
        
    }

    // TODO
  public int compareTo(Hand that) {
  int outcome =0;
         //得到牌的所有數字
        for (int i = 0; i < 5; i++) {
            Points1[i] = GetPoint(this.cards[i]);
	    Points2[i] = GetPoint(that.cards[i]);	
        }
        Arrays.sort(Points1);
	Arrays.sort(Points2);
        if (Compare(this) > Compare(that)) {
            outcome = 1;
        } else if (Compare(this) < Compare(that)) {
            outcome = -1;
        } else if(Compare(this) == Compare(that)){
            if(Compare(this) == 3 ) //straight 
		{ 
                    if(straight(Points1)  > straight(Points2))
                    {
                        outcome = 1;
                    }
                    else if(straight(Points1)== straight(Points2))
                    {
                        outcome = 0;
                    }
                    else outcome = -1;
                }

           
             if(Compare(this) == 5)  //full house
                {
                     if( fullhouse(Points1) > fullhouse(Points2) )
                    {
                        outcome = 1;
                    }
                    else if(fullhouse(Points1) == fullhouse(Points2))
                    {
                        outcome = 0;
                    }
                    else outcome = -1;
                }
             if(Compare(this) == 2 && Compare(that)==2)  //two pair
                {
                     if( twopair(Points1) > twopair(Points2) )
                    {
                        outcome = 1;
                    }
                    else if(twopair(Points1) == twopair(Points2))
                    {
                        outcome = 0;
                    }
                    else outcome = -1;
                }
//              //  if(compare(this) == 1)  //one pair
                 if(Compare(this) == 1 && Compare(that) == 1)
                {
                     if( onepair(Points1) > onepair(Points2) )
                    {
                        outcome = 1;
                    }
                    else if(onepair(Points1) == onepair(Points2))
                    {
                        outcome = 0;
                    }
                    else outcome = -1;
                }
                 if(Compare(this) == 4 || Compare(this) == 0)  //high card and flush
                 {
                      if( highfulshcard(Points1) > highfulshcard(Points2) )
                    {
                        outcome = 1;
                    }
                    else if(highfulshcard(Points1) == highfulshcard(Points2))
                    {
                        outcome = 0;
                    }
                    else outcome = -1;
                 }
            
        }
        return outcome ;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
     public int GetPoint(Card c) {
        int face = 0;
        switch (c.getFace()) {
            case ""A"":
                face = 1;
                break;
            case ""2"":
                face = 2;
                break;
            case ""3"":
                face = 3;
                break;
            case ""4"":
                face = 4;
                break;
            case ""5"":
                face = 5;
                break;
            case ""6"":
                face = 6;
                break;
            case ""7"":
                face = 7;
                break;
            case ""8"":
                face = 8;
                break;
            case ""9"":
                face = 9;
                break;
            case ""10"":
                face = 10;
                break;
            case ""J"":
                face = 11;
                break;
            case ""Q"":
                face = 12;
                break;
            case ""K"":
                face = 13;
                break;
        }
        return face;
    }

   
      public int Compare(Hand that) {
        int count = 0; 
        int Pair = 0;
        //sort the suit first  check if it is flush first
        Arrays.sort(that.cards, Card.SUIT_ORDER);
        for (int i = 0; i < 4; i++) {
            if (Card.SUIT_ORDER.compare(that.cards[i], that.cards[i + 1]) == 0) //flush
            {
                count++;
                if (count == 4) {
                    return 4;
                }
            }
        }
        count = 0;
        //得到牌的所有數字
        for (int i = 0; i < 5; i++) {
            Points[i] = GetPoint(that.cards[i]);
        }
        Arrays.sort(Points);
        for (int i = 0; i < 4; i++) //straight
        {
            if (Points[i] == Points[i + 1] - 1) {
                count++;
            }
        }
        if (count == 4) {
            return 3;
        }
        if(Points[0]==1 && Points[1] == 10 && Points[2] == 11 &&Points[3] == 12 &&Points[4] == 13)
        {
            return 3;
        }
        if(Points[0]==1 && Points[1] == 2 && Points[2] == 11 &&Points[3] == 12 &&Points[4] == 13)
        {
            return 3;
        }
        if(Points[0]==1 && Points[1] == 2 && Points[2] == 3 &&Points[3] == 12 &&Points[4] == 13)
        {
            return 3;
        }
        if(Points[0]==1 && Points[1] == 2 && Points[2] == 3 &&Points[3] == 4 &&Points[4] == 13)
        {
            return 3;
        }
        count = 0;
        // one pair two pair full house
        for (int i = 0; i < 4; i++) {
            if (Points[i] == Points[i + 1]) //one pair
            {
                Pair++;
            } else {
                Pair--;
            }

        }
        if (Pair == 2) {  //fullhouse
            return 5;
        } else if (Pair == 0) { //two pair
            return 2;
        } else if (Pair == -2) { //one pair
            return 1;
        } else {
            return 0;
        }
    }
    
    
    public int fullhouse(int [] c)
    { int count = 0; int flag = 0;

        for(int i = 0; i < 4; i++)
        {
            if(c[i] == c[i+1])
            {
                count++;
                if(count == 2)
                {
                    if(c[i] == 1)
                    {
                        flag = 100;
                    }
                    else flag = c[i];
                   break;
                }
            }
            else
            {
                count--;
            }
        
        }
        return flag;
    }

    
    
     public int onepair(int [] c)
    { int count = 0; int flag = 0;
        for(int i = 0; i < 4; i++)
        {
            if(c[i] == c[i+1])
            {
                count++;
                
                if(count == 1)
                {
                     if(c[i] == 1)
                    {
                        flag = 100;
                    }
                     else flag = c[i];
                   break;
                }
            }
        }
        return flag;
    }
     
      public int twopair(int [] c)
    { int count = 0; int flag = 0;
        for(int i = 0; i < 4; i++)
        {
            if(c[i] == c[i+1] )
            {
                count++;
                if(count == 2)
                {
                   flag = c[i];
                   break;
                }
            }
             if(c[i] == c[i+1] && c[i] == 1)
            {
                flag = 100;break;
            }
        }
        return flag;
    }
      public int highfulshcard(int [] c)
      {         
              if(c[0] == 1)
              {
                  return 100;
              } 
              else{
                  return c[4];
              }
      }
      public int straight(int []c )
      {
        if(Points[0]==1 && Points[1] == 10 && Points[2] == 11 &&Points[3] == 12 &&Points[4] == 13)
        {
            return 100;
        }
        if(Points[0]==1 && Points[1] == 2 && Points[2] == 11 &&Points[3] == 12 &&Points[4] == 13)
        {
            return 100;
        }
        if(Points[0]==1 && Points[1] == 2 && Points[2] == 3 &&Points[3] == 12 &&Points[4] == 13)
        {
            return 100;
        }
        if(Points[0]==1 && Points[1] == 2 && Points[2] == 3 &&Points[3] == 4 &&Points[4] == 13)
        {
            return 100;
        }
          else{
              return c[4];
          }
      }
}

@ce20d0d5ff11ddaa340c48523bf52471@"
"r04942099","3","0.0966666666666667","105872","@8cedcddcce80c9620864795c1af5ffa3@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    private int side = 0;

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
        Insertion.sort( this.cards);
    }

    // TODO
    private int facetointeger(String face) {
        int num1 = 0;

        switch (face) {
            case ""A"":
                num1 = 13;
                break;
            case ""K"":
                num1 = 12;
                break;
            case ""Q"":
                num1 = 11;
                break;
            case ""J"":
                num1 = 10;
                break;
            case ""10"":
                num1 = 9;
                break;
            case ""9"":
                num1 = 8;
                break;
            case ""8"":
                num1 = 7;
                break;
            case ""7"":
                num1 = 6;
                break;
            case ""6"":
                num1 = 5;
                break;
            case ""5"":
                num1 = 4;
                break;
            case ""4"":
                num1 = 3;
                break;
            case ""3"":
                num1 = 2;
                break;
            case ""2"":
                num1 = 1;
                break;

        }

        return num1;
    }

    private int isfullhouse(Card[] cards) {
        int a = 0;
        if (cards[0].getFace().equals(cards[1].getFace())) {
            if (cards[1].getFace().equals(cards[2].getFace())) {
                if (cards[3].getFace().equals(cards[4].getFace())) {
                    a = 1;
                    side = 2;
                }
            }
            if (cards[2].getFace().equals(cards[3].getFace())) {
                if (cards[3].getFace().equals(cards[4].getFace())) {
                    a = 1;
                    side = 4;
                }
            }
        }
        return a;
    }

    private int isflush(Card[] cards) {
        int a = 0;
        if (cards[0].getSuit().equals(cards[1].getSuit())) {
            if (cards[1].getSuit().equals(cards[2].getSuit())) {
                if (cards[2].getSuit().equals(cards[3].getSuit())) {
                    if (cards[3].getSuit().equals(cards[4].getSuit())) {
                        a = 1;
                        side = 4;
                    }
                }
            }
        }
        return a;
    }

    private int isstraight(Card[] cards) {
        int a = 0;
        if (facetointeger(cards[0].getFace()) - facetointeger(cards[1].getFace()) == -1) {
            if (facetointeger(cards[1].getFace()) - facetointeger(cards[2].getFace()) == -1) {
                if (facetointeger(cards[2].getFace()) - facetointeger(cards[3].getFace()) == -1) {
                    if (facetointeger(cards[3].getFace()) - facetointeger(cards[4].getFace()) == -1) {
                        a = 1;
                    }
                }
            }
        }
        return a;
    }
     private int pairsnumber2(Card[] cards){
        int a=0;
        if(facetointeger(cards[0].getFace())==facetointeger(cards[1].getFace())  ){
            if(facetointeger(cards[2].getFace())==facetointeger(cards[3].getFace()) ){
                a=1;
                side = 3;
            }
            if(facetointeger(cards[3].getFace())==facetointeger(cards[4].getFace()) ){
                a=1;
                side = 4;
            }
        }
        if(facetointeger(cards[2].getFace())==facetointeger(cards[1].getFace()) && facetointeger(cards[4].getFace())==facetointeger(cards[3].getFace()) ){
                a=1;
                side = 4;
            
        }
                  
        return a;
    }
        
        private int pairsnumber1(Card[] cards){
        int a=0;
        if(facetointeger(cards[0].getFace())==facetointeger(cards[1].getFace())  ){
            a=1;
            side = 1;
            if(facetointeger(cards[0].getFace())==facetointeger(cards[2].getFace()) ) side = 2;
        }else if(facetointeger(cards[1].getFace())==facetointeger(cards[2].getFace())  ){
            a=1;
            side = 2;
            if(facetointeger(cards[1].getFace())==facetointeger(cards[3].getFace()) ) side = 3;
        }else if(facetointeger(cards[2].getFace())==facetointeger(cards[3].getFace())  ){
            a=1;
            side = 3;
            if(facetointeger(cards[2].getFace())==facetointeger(cards[4].getFace()) ) side = 4;
        }else if(facetointeger(cards[3].getFace())==facetointeger(cards[4].getFace())  ){
            a=1;
            side = 4;
        }
                  
        return a;
    }
    // TODO 
    public int compareTo(Hand that) {
        int rank1 = 0;  //    full house(6) > flush(5) > straight(4) > two pair(3) > one pair(2) > high card(1)
        int rank2 = 0;
        int side1 = 0;
        int side2 = 0;
        Insertion.sort( that.cards);
        Insertion.sort( this.cards);

        if (isfullhouse(this.cards) == 1) {
            rank1 = 6;
            side1 = side;
        }else if(isflush(this.cards)==1){
            rank1 = 5;
        }else if(isstraight(this.cards)==1){
            rank1 = 4;
        }else if(pairsnumber2(this.cards)==1){
            rank1=3;
            side1=side;
        }else if(pairsnumber1(this.cards)==1){
            rank1=2;
            side1=side;
        }else{
            rank1=1;
        }
        
        if (isfullhouse(that.cards) == 1) {
            rank2 = 6;
            side2 = side;
        }else if(isflush(that.cards)==1){
            rank2 = 5;
        }else if(isstraight(that.cards)==1){
            rank2 = 4;
        }else if(pairsnumber2(that.cards)==1){
            rank2=3;
            side2=side;
        }else if(pairsnumber1(that.cards)==1){
            rank2=2;
            side2=side;
        }else{
            rank2=1;
        }
        if(rank1>rank2) return 1;
        if(rank1<rank2) return -1;
        if(rank1==rank2){
            if(rank1==6) {
                if(this.cards[side1].compareTo(that.cards[side2])==1) return 1;
                else return -1;
            }
            if(rank1==5){
                if(this.cards[4].compareTo(that.cards[4])==1) return 1;
                else return -1;
            }
            if(rank1==4){
                if(this.cards[4].compareTo(that.cards[4])==1) return 1;
                else return -1;
            }
            if(rank1==3 ){
                 if(this.cards[side1].compareTo(that.cards[side2])==1) return 1;
                else return -1;
            }
            if(rank1==2){
                 if(this.cards[side1].compareTo(that.cards[side2])==1) return 1;
                else return -1;
            }
            if(rank1==1){
                if(this.cards[4].compareTo(that.cards[4])==1) return 1;
                else return -1;
            }
            
        }
        // complete this function so the Player can be sorted according to the cards he/she has.
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@8cedcddcce80c9620864795c1af5ffa3@"
"r04921094","0","0","0","@29bc42d72a0ad4d62ea843cfac6a81ef@
public class Hand implements Comparable<Hand> {
    private static final int HIGH_CARDS = 0;
    private static final int ONE_PAIR = 1;
    private static final int TWO_PAIRS = 2;
    private static final int STRIGHT = 3;
    private static final int FLUSH = 4;
    private static final int FULL_HOUSE = 5;

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    private String name;
    public int[] faceCounting = new int[15];           // pity for define A as 14, 2 extra Integers
    public int[] suitCounting = new int[4];
    public int cardsPriority;
    public Card maxCard;

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
    }

    // TODO
    public int compareTo(Hand that) {

        if (this.cardsPriority < that.cardsPriority) {
            return -1;
        }
        else if (this.cardsPriority > that.cardsPriority){
            return 1;
        }
        else{
            // TODO 2pairs
            return this.maxCard.compareTo(that.maxCard);
        }
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

    private int cardsToInt(Card[] cards){
        int[] cardsCount = new int[6];
        int strightFlag = 0;
        int pairFace = 0;
        int fullHouseFace = 0;

        for (int i = 0; i < cards.length; i++){
            ++faceCounting[faceToInt(cards[i].getFace())];
            ++suitCounting[suitToInt(cards[i].getSuit())];
        }

        for (int i = 0; i < suitCounting.length; i++){
            if (suitCounting[i] == 5){
                maxCard = getMaxCard(cards);
                return FLUSH;                                
            }
        }

        for (int i = 0; i < faceCounting.length; i++){
            switch(faceCounting[i]){
                case 1:
                    ++cardsCount[1];
                    break; 
                case 2:
                    ++cardsCount[2];
                    pairFace = i;
                    break;       // pair
                case 3:
                    ++cardsCount[3];
                    fullHouseFace = i;
                    break;       // full house
                case 4:
                    ++cardsCount[4];
                    break;
            }

            if (faceCounting[i] == 1){
                ++strightFlag;
                if (strightFlag == 5) {
                    maxCard = getMaxCard(cards);
                    return STRIGHT;                         
                }
            }
            else{
                strightFlag = 0;
            }
        }

        if (faceCounting[2] == 1 && faceCounting[3] == 1 && faceCounting[4] == 1 && faceCounting[5] == 1 && faceCounting[14] == 1){
            for(int i = 0; i<cards.length; i++){
                if (faceToInt(cards[i].getFace()) == 5){
                    maxCard = cards[i];
                }
            }
            return STRIGHT;
        }


        if (cardsCount[3] == 1 && cardsCount[2] == 1){
            Card[] fullHouseCards = new Card[3];
            int index = 0;

            for (int i = 0; i < cards.length; i++){
                if (faceToInt(cards[i].getFace()) == fullHouseFace){
                    fullHouseCards[index++] = cards[i];
                }
            }
            maxCard = getMaxCard(fullHouseCards);
            return FULL_HOUSE;
        }
        else if(cardsCount[2] == 2){
            Card[] pairCards = new Card[2];
            int index = 0;

            for (int i = 0; i < cards.length; i++) {
                if (faceToInt(cards[i].getFace()) == pairFace){
                    pairCards[index++] = cards[i];
                }
            }
            maxCard = getMaxCard(pairCards);
            return TWO_PAIRS;
        }
        else if(cardsCount[2] == 1){
            Card[] pairCards = new Card[2];
            int index = 0;

            for (int i = 0; i < cards.length; i++) {
                if (faceToInt(cards[i].getFace()) == pairFace){
                    pairCards[index++] = cards[i];
                }
            }
            maxCard = getMaxCard(pairCards);
            return ONE_PAIR;
        }
        else{
            maxCard = getMaxCard(cards);
            return HIGH_CARDS; 
        }
    }
    private Card getMaxCard(Card[] cards){
        Card regCard = cards[0];

        for (int i = 1; i < cards.length; i++){
            if (regCard.compareTo(cards[i]) == -1){
                regCard = cards[i];
            }
        }

        return regCard;
    }

    public static int faceToInt(String face){
        try{
            return Integer.parseInt(face);
        }
        catch(Exception e){
            switch(face){
                case ""A"": return 14;
                case ""K"": return 13;
                case ""Q"": return 12;
                case ""J"": return 11;
            }
        }

        return 0;
    }

    public static int suitToInt(String suit){
        switch(suit){
            case ""Spades"": return 3;
            case ""Hearts"": return 2;
            case ""Diamonds"": return 1;
            case ""Clubs"": return 0;
        }
        return 4;
    }   
}

@29bc42d72a0ad4d62ea843cfac6a81ef@"
"b02611019","0","0.128","111024","@1dbc376f4d27a5181ee81fb66dd450b1@
import java.util.Arrays;
import java.util.Collections;

public class Player implements Comparable<Player> {

    class intCard {

        int intface;
        int intsuit;

        intCard(int intface, int intsuit) {
            this.intface = intface;
            this.intsuit = intsuit;
        }
    }
    private Card[] cards = new Card[5];
    private String name;

    // DO NOT MODIFY THIS
    public Player(String name) {
        this.name = name;
    }

    // DO NOT MODIFY THIS
    public String getName() {
        return this.name;
    }

    // DO NOT MODIFY THIS
    public void setCards(Card[] cards) {
        this.cards = cards;
        Arrays.sort(this.cards);
//        for(int i=0;i<5;i++){
//        StdOut.print(this.cards[i].getFace()+this.cards[i].getSuit()+""  "");
//        }
//        StdOut.print(""\n"");
    }

    public int suit2int(Card card) {
        switch (card.getSuit()) {
            case ""Spades"":
                return 3;
            case ""Hearts"":
                return 2;
            case ""Diamonds"":
                return 1;
            case ""Clubs"":
                return 0;
        }
        return 0;
    }

    public int face2int(Card card) {
        switch (card.getFace()) {
            case ""A"":
                return 14;
            case ""K"":
                return 13;
            case ""Q"":
                return 12;
            case ""J"":
                return 11;
            case ""10"":
                return 10;
            case ""9"":
                return 9;
            case ""8"":
                return 8;
            case ""7"":
                return 7;
            case ""6"":
                return 6;
            case ""5"":
                return 5;
            case ""4"":
                return 4;
            case ""3"":
                return 3;
            case ""2"":
                return 2;
        }
        return 0;
    }

    public boolean fullhouse(int[] intface) {
        if (intface[0] == intface[1] && intface[3] == intface[4] && (intface[1] == intface[2] || intface[2] == intface[3])) {
            return true;
        }
        return false;
    }

    public boolean flush(int[] intsuit) {
        if (intsuit[0] == intsuit[1] && intsuit[1] == intsuit[2] && intsuit[2] == intsuit[3] && intsuit[3] == intsuit[4]) {
            return true;
        }
        return false;
    }

    public boolean straight(int[] intface) {
        for (int i = 0; i <= 3; i++) {
            if (intface[i] + 1 != intface[i + 1]) {
                return false;
            }
        }
        return true;
    }

    public boolean twopair(int[] intface, Card[] cards) {
        if (intface[0] == intface[1]) {
            if (intface[3] == intface[4]) {
                thissize = new Card(cards[4].getFace(), cards[4].getSuit());
                return true;
            }
            if (intface[2] == intface[3]) {
                thissize = new Card(cards[3].getFace(), cards[3].getSuit());
                return true;
            }
        }
        if (intface[1] == intface[2]) {
            if (intface[3] == intface[4]) {
                thissize = new Card(cards[4].getFace(), cards[4].getSuit());
                return true;
            }
        }
        return false;
    }

    public boolean thattwopair(int[] intface, Card[] cards) {
        if (intface[0] == intface[1]) {
            if (intface[3] == intface[4]) {
                thatsize = new Card(cards[4].getFace(), cards[4].getSuit());
                return true;
            }
            if (intface[2] == intface[3]) {
                thatsize = new Card(cards[3].getFace(), cards[3].getSuit());
                return true;
            }
        }
        if (intface[1] == intface[2]) {
            if (intface[3] == intface[4]) {
                thatsize = new Card(cards[4].getFace(), cards[4].getSuit());
                return true;
            }
        }
        return false;
    }

    public boolean pair(int[] intface, Card[] cards) {
        for (int i = 0; i <= 3; i++) {
            if (intface[i] == intface[i + 1]) {
                thissize = new Card(cards[i + 1].getFace(), cards[i + 1].getSuit());
                return true;
            }
        }
        return false;
    }

    public boolean thatpair(int[] intface, Card[] cards) {
        for (int i = 0; i <= 3; i++) {
            if (intface[i] == intface[i + 1]) {
                thatsize = new Card(cards[i + 1].getFace(), cards[i + 1].getSuit());
                return true;
            }
        }
        return false;
    }

    static Card thissize;
    static Card thatsize;

    // TODO 
    public int compareTo(Player that) {

        // complete this function so the Player can be sorted according to the cards he/she has.
        int thisord = 1;
        int thatord = 1;
        int[] thisintface = new int[5];
        int[] thisintsuit = new int[5];
        int[] thatintface = new int[5];
        int[] thatintsuit = new int[5];

        for (int i = 0; i < 5; i++) {
            thisintface[i] = face2int(this.cards[i]);
            thatintface[i] = face2int(that.cards[i]);
            thisintsuit[i] = suit2int(this.cards[i]);
            thatintsuit[i] = suit2int(that.cards[i]);
        }
        //Check this size
        thissize = new Card(this.cards[4].getFace(), this.cards[4].getSuit());
        if (pair(thisintface, this.cards)) {
            thisord = 2;
        }
        if (twopair(thisintface, this.cards)) {
            thisord = 3;
        }
        if (straight(thisintface)) {
            thisord = 4;
            thissize = new Card(this.cards[4].getFace(), this.cards[4].getSuit());
        }
        if (flush(thisintsuit)) {
            thisord = 5;
            thissize = new Card(this.cards[4].getFace(), this.cards[4].getSuit());
        }
        if (fullhouse(thisintface)) {
            thisord = 6;
            thissize = new Card(this.cards[2].getFace(), this.cards[2].getSuit());
        }
        //check that size
        thatsize = new Card(that.cards[4].getFace(), that.cards[4].getSuit());
        if (thatpair(thatintface, that.cards)) {
            thatord = 2;
        }
        if (thattwopair(thatintface, that.cards)) {
            thatord = 3;
        }
        if (straight(thatintface)) {
            thatord = 4;
            thatsize = new Card(that.cards[4].getFace(), that.cards[4].getSuit());
        }
        if (flush(thatintsuit)) {
            thatord = 5;
            thatsize = new Card(that.cards[4].getFace(), that.cards[4].getSuit());
        }
        if (fullhouse(thatintface)) {
            thatord = 6;
            thatsize = new Card(that.cards[2].getFace(), that.cards[2].getSuit());
        }

        if (thisord > thatord) {
            return +1;
        }
        if (thisord < thatord) {
            return -1;
        }
        return (thissize.compareTo(thatsize));
    }
}

@1dbc376f4d27a5181ee81fb66dd450b1@"
"r04921094","3","0.0933333333333333","105520","@551cc00671c50581a99636a7518ac1c2@
public class Hand implements Comparable<Hand> {
    private static final int HIGH_CARDS = 0;
    private static final int ONE_PAIR = 1;
    private static final int TWO_PAIRS = 2;
    private static final int STRIGHT = 3;
    private static final int FLUSH = 4;
    private static final int FULL_HOUSE = 5;

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    private String name;
    public int[] faceCounting = new int[15];           // pity for define A as 14, 2 extra Integers
    public int[] suitCounting = new int[4];
    public int cardsPriority;
    public Card maxCard;

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
        cardsPriority = cardsToInt(this.cards);
    }

    // TODO
    public int compareTo(Hand that) {

        if (this.cardsPriority < that.cardsPriority) {
            return -1;
        }
        else if (this.cardsPriority > that.cardsPriority){
            return 1;
        }
        else{
            // TODO 2pairs
            return this.maxCard.compareTo(that.maxCard);
        }
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

    private int cardsToInt(Card[] cards){
        int[] cardsCount = new int[6];
        int strightFlag = 0;
        int pairFace = 0;
        int fullHouseFace = 0;

        for (int i = 0; i < cards.length; i++){
            ++faceCounting[faceToInt(cards[i].getFace())];
            ++suitCounting[suitToInt(cards[i].getSuit())];
        }

        for (int i = 0; i < suitCounting.length; i++){
            if (suitCounting[i] == 5){
                maxCard = getMaxCard(cards);
                return FLUSH;                                
            }
        }

        for (int i = 0; i < faceCounting.length; i++){
            switch(faceCounting[i]){
                case 1:
                    ++cardsCount[1];
                    break; 
                case 2:
                    ++cardsCount[2];
                    pairFace = i;
                    break;       // pair
                case 3:
                    ++cardsCount[3];
                    fullHouseFace = i;
                    break;       // full house
                case 4:
                    ++cardsCount[4];
                    break;
            }

            if (faceCounting[i] == 1){
                ++strightFlag;
                if (strightFlag == 5) {
                    maxCard = getMaxCard(cards);
                    return STRIGHT;                         
                }
            }
            else{
                strightFlag = 0;
            }
        }

        if (faceCounting[2] == 1 && faceCounting[3] == 1 && faceCounting[4] == 1 && faceCounting[5] == 1 && faceCounting[14] == 1){
            for(int i = 0; i<cards.length; i++){
                if (faceToInt(cards[i].getFace()) == 5){
                    maxCard = cards[i];
                }
            }
            return STRIGHT;
        }


        if (cardsCount[3] == 1 && cardsCount[2] == 1){
            Card[] fullHouseCards = new Card[3];
            int index = 0;

            for (int i = 0; i < cards.length; i++){
                if (faceToInt(cards[i].getFace()) == fullHouseFace){
                    fullHouseCards[index++] = cards[i];
                }
            }
            maxCard = getMaxCard(fullHouseCards);
            return FULL_HOUSE;
        }
        else if(cardsCount[2] == 2){
            Card[] pairCards = new Card[2];
            int index = 0;

            for (int i = 0; i < cards.length; i++) {
                if (faceToInt(cards[i].getFace()) == pairFace){
                    pairCards[index++] = cards[i];
                }
            }
            maxCard = getMaxCard(pairCards);
            return TWO_PAIRS;
        }
        else if(cardsCount[2] == 1){
            Card[] pairCards = new Card[2];
            int index = 0;

            for (int i = 0; i < cards.length; i++) {
                if (faceToInt(cards[i].getFace()) == pairFace){
                    pairCards[index++] = cards[i];
                }
            }
            maxCard = getMaxCard(pairCards);
            return ONE_PAIR;
        }
        else{
            maxCard = getMaxCard(cards);
            return HIGH_CARDS; 
        }
    }
    private Card getMaxCard(Card[] cards){
        Card regCard = cards[0];

        for (int i = 1; i < cards.length; i++){
            if (regCard.compareTo(cards[i]) == -1){
                regCard = cards[i];
            }
        }

        return regCard;
    }

    public static int faceToInt(String face){
        try{
            return Integer.parseInt(face);
        }
        catch(Exception e){
            switch(face){
                case ""A"": return 14;
                case ""K"": return 13;
                case ""Q"": return 12;
                case ""J"": return 11;
            }
        }

        return 0;
    }

    public static int suitToInt(String suit){
        switch(suit){
            case ""Spades"": return 3;
            case ""Hearts"": return 2;
            case ""Diamonds"": return 1;
            case ""Clubs"": return 0;
        }
        return 4;
    }   
}

@551cc00671c50581a99636a7518ac1c2@"
"b02611019","2","0.28","104784","@9c4fdba395ce5acd364cc5ec919ec6e9@
public class Hand implements Comparable<Hand> {

    class intCard {
        int intface;
        int intsuit;
        intCard(int intface, int intsuit) {
            this.intface = intface;
            this.intsuit = intsuit;
        }
    }
    
    // sorted by Card value are recommended but not necessary
    private Card[] cards;

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards) {
        this.cards = cards;
        return;
    }

    // TODO
    public int compareTo(Hand that) {
        return 0;
    }

    // Do not modified this function
    public Card[] getCards() {
        return this.cards;
    }
}

@9c4fdba395ce5acd364cc5ec919ec6e9@"
"b02611019","3","0.0933333333333333","105488","@13b47a60f4a3313c58e29a3e5d57ed23@
public class Hand implements Comparable<Hand> {

    class intCard {
        int intface;
        int intsuit;
        intCard(int intface, int intsuit) {
            this.intface = intface;
            this.intsuit = intsuit;
        }
    }
    
    // sorted by Card value are recommended but not necessary
    private Card[] cards;

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards) {
        this.cards = cards;
        return;
    }
public int suit2int(Card card) {
        switch (card.getSuit()) {
            case ""Spades"":
                return 3;
            case ""Hearts"":
                return 2;
            case ""Diamonds"":
                return 1;
            case ""Clubs"":
                return 0;
        }
        return 0;
    }

    public int face2int(Card card) {
        switch (card.getFace()) {
            case ""A"":
                return 14;
            case ""K"":
                return 13;
            case ""Q"":
                return 12;
            case ""J"":
                return 11;
            case ""10"":
                return 10;
            case ""9"":
                return 9;
            case ""8"":
                return 8;
            case ""7"":
                return 7;
            case ""6"":
                return 6;
            case ""5"":
                return 5;
            case ""4"":
                return 4;
            case ""3"":
                return 3;
            case ""2"":
                return 2;
        }
        return 0;
    }

    public boolean fullhouse(int[] intface) {
        if (intface[0] == intface[1] && intface[3] == intface[4] && (intface[1] == intface[2] || intface[2] == intface[3])) {
            return true;
        }
        return false;
    }

    public boolean flush(int[] intsuit) {
        if (intsuit[0] == intsuit[1] && intsuit[1] == intsuit[2] && intsuit[2] == intsuit[3] && intsuit[3] == intsuit[4]) {
            return true;
        }
        return false;
    }

    public boolean straight(int[] intface) {
        for (int i = 0; i <= 3; i++) {
            if (intface[i] + 1 != intface[i + 1]) {
                return false;
            }
        }
        return true;
    }

    public boolean twopair(int[] intface, Card[] cards) {
        if (intface[0] == intface[1]) {
            if (intface[3] == intface[4]) {
                thissize = new Card(cards[4].getFace(), cards[4].getSuit());
                return true;
            }
            if (intface[2] == intface[3]) {
                thissize = new Card(cards[3].getFace(), cards[3].getSuit());
                return true;
            }
        }
        if (intface[1] == intface[2]) {
            if (intface[3] == intface[4]) {
                thissize = new Card(cards[4].getFace(), cards[4].getSuit());
                return true;
            }
        }
        return false;
    }

    public boolean thattwopair(int[] intface, Card[] cards) {
        if (intface[0] == intface[1]) {
            if (intface[3] == intface[4]) {
                thatsize = new Card(cards[4].getFace(), cards[4].getSuit());
                return true;
            }
            if (intface[2] == intface[3]) {
                thatsize = new Card(cards[3].getFace(), cards[3].getSuit());
                return true;
            }
        }
        if (intface[1] == intface[2]) {
            if (intface[3] == intface[4]) {
                thatsize = new Card(cards[4].getFace(), cards[4].getSuit());
                return true;
            }
        }
        return false;
    }

    public boolean pair(int[] intface, Card[] cards) {
        for (int i = 0; i <= 3; i++) {
            if (intface[i] == intface[i + 1]) {
                thissize = new Card(cards[i + 1].getFace(), cards[i + 1].getSuit());
                return true;
            }
        }
        return false;
    }

    public boolean thatpair(int[] intface, Card[] cards) {
        for (int i = 0; i <= 3; i++) {
            if (intface[i] == intface[i + 1]) {
                thatsize = new Card(cards[i + 1].getFace(), cards[i + 1].getSuit());
                return true;
            }
        }
        return false;
    }

    static Card thissize;
    static Card thatsize;

    // TODO 
    public int compareTo(Hand that) {

        // complete this function so the Player can be sorted according to the cards he/she has.
        int thisord = 1;
        int thatord = 1;
        int[] thisintface = new int[5];
        int[] thisintsuit = new int[5];
        int[] thatintface = new int[5];
        int[] thatintsuit = new int[5];

        for (int i = 0; i < 5; i++) {
            thisintface[i] = face2int(this.cards[i]);
            thatintface[i] = face2int(that.cards[i]);
            thisintsuit[i] = suit2int(this.cards[i]);
            thatintsuit[i] = suit2int(that.cards[i]);
        }
        //Check this size
        thissize = new Card(this.cards[4].getFace(), this.cards[4].getSuit());
        if (pair(thisintface, this.cards)) {
            thisord = 2;
        }
        if (twopair(thisintface, this.cards)) {
            thisord = 3;
        }
        if (straight(thisintface)) {
            thisord = 4;
            thissize = new Card(this.cards[4].getFace(), this.cards[4].getSuit());
        }
        if (flush(thisintsuit)) {
            thisord = 5;
            thissize = new Card(this.cards[4].getFace(), this.cards[4].getSuit());
        }
        if (fullhouse(thisintface)) {
            thisord = 6;
            thissize = new Card(this.cards[2].getFace(), this.cards[2].getSuit());
        }
        //check that size
        thatsize = new Card(that.cards[4].getFace(), that.cards[4].getSuit());
        if (thatpair(thatintface, that.cards)) {
            thatord = 2;
        }
        if (thattwopair(thatintface, that.cards)) {
            thatord = 3;
        }
        if (straight(thatintface)) {
            thatord = 4;
            thatsize = new Card(that.cards[4].getFace(), that.cards[4].getSuit());
        }
        if (flush(thatintsuit)) {
            thatord = 5;
            thatsize = new Card(that.cards[4].getFace(), that.cards[4].getSuit());
        }
        if (fullhouse(thatintface)) {
            thatord = 6;
            thatsize = new Card(that.cards[2].getFace(), that.cards[2].getSuit());
        }

        if (thisord > thatord) {
            return +1;
        }
        if (thisord < thatord) {
            return -1;
        }
        return (thissize.compareTo(thatsize));
    }
    // Do not modified this function
    public Card[] getCards() {
        return this.cards;
    }
}

@13b47a60f4a3313c58e29a3e5d57ed23@"
"r04921051","3","0.09","105488","@90da6ded75610fb94f1172f225177ec1@import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] card){
        cards = card;
    }

    // TODO
    public int compareTo(Hand that) {
        // complete this function so the Player can be sorted according to the cards he/she has.
        Arrays.sort(this.cards);
        Arrays.sort(that.cards);
        if(play2rank(this) > play2rank(that)) return 1;
        else if(play2rank(this) < play2rank(that)) return -1;
        else return 0;
               
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
    
public static int play2rank(Hand c){
    int result = 0;
//================ Check Pairs =====================    

    int pi = 5;
    for(int i=4;i > 1;i--){
        int a = face2num(c.cards[i]);
        int b = face2num(c.cards[i-1]);        
        if(a == b){
            result = 1;
            pi = i;
        }    
    }

    if(result == 1){
        for(int i=0;i < 4;i++){
        int a = face2num(c.cards[i]);
        int b = face2num(c.cards[i+1]);        
        if(a == b && !(i==pi) && !(i+1 == pi)){
            result = 2;
        }    
        }        
    }    
 


//================ Check Strait ==================== 
    int strait = 1;
    for(int i=0;i < 4;i++){
        int a = face2num(c.cards[i]);
        int b = face2num(c.cards[i+1]);
        if(a + 1 == b);
        else{
            strait = 0;
        }
    }
    if(strait == 1) result = 4;
//================ Check Flush =====================    
    int flush = 1;
    for(int i=1;i < 5;i++){
        if(c.cards[0].getSuit().equals(c.cards[i].getSuit())==false){
            flush = 0;
        }
    }
    
    if(flush == 1) result = 5;

//================ Check Full House =================      
    
    if(c.cards[0].getFace().equals(c.cards[1].getFace()) && c.cards[1].getFace().equals(c.cards[2].getFace()) && c.cards[3].getFace().equals(c.cards[4].getFace())) result = 6;
    
    if(c.cards[4].getFace().equals(c.cards[3].getFace()) && c.cards[3].getFace().equals(c.cards[2].getFace()) && c.cards[1].getFace().equals(c.cards[0].getFace())) result = 6;   
  
      
    

    
    
    return result;
    }

    public static int face2num(Card c){
        switch(c.getFace()){
            case(""A""):
                return 13;
            case(""J""):
                return 10;
            case(""Q""):
                return 11;
            case(""K""):
                return 12;
            default:
                return (Integer.parseInt(c.getFace())-1);
        }
    }
        
    public static int suit2num(Card c){
        switch(c.getSuit()){
            case(""Spades""):
                return 4;
            case(""Hearts""):
                return 3;
            case(""Diamonds""):
                return 2;
            case(""Clubs""):
                return 1;
            default:
                return 0;
        }   
    } 
    
}

@90da6ded75610fb94f1172f225177ec1@"
"r04921104","2","0.27","105472","@0a6703729520ea39613c0c3a69d49315@import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards;
    private int cardstype;

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards) {
        this.cards = cards;
        Arrays.sort(this.cards);
        return;
    }

    // TODO
    public int compareTo(Hand that) {

        if (this.cardstype < that.cardstype) {
            return -1;
        }
        if (this.cardstype > that.cardstype) {
            return +1;
        }

        //  
        switch (this.cardstype) {
            case 0: // high card
                return this.cards[4].compareTo(that.cards[4]);
            case 1: // 1 pair
                return this.find_onepair_max().compareTo(that.find_onepair_max());
            case 2: // 2 pairs
                return this.find_twopairs_max().compareTo(that.find_twopairs_max());
            case 3: // straight
                if (getsuitcode(this.cards[0]) == 2 && getsuitcode(that.cards[0]) == 10) {
                    return -1; //2345A & 10JQKA
                } else if (getsuitcode(this.cards[0]) == 10 &&getsuitcode(that.cards[0]) == 2) {
                    return +1; //10JQKA & 2345A
                } else if (getsuitcode(this.cards[0]) == 2 && getsuitcode(that.cards[0]) == 2) {
                    return this.cards[3].compareTo(that.cards[3]); // 2345A & 2345A, compare 4th card
                } else {
                    return this.cards[4].compareTo(that.cards[4]);
                }
            case 4: // flush
                return this.cards[4].compareTo(that.cards[4]);
            case 5: // full house
                return this.find_fullhouse_max().compareTo(that.find_fullhouse_max());
        }
        return 0;
    }

    // Do not modified this function
    public Card[] getCards() {
        return this.cards;
    }

    private static int getfacecode(Card c) {
        switch (c.getFace()) {
            case ""A"":
                return 14;
            case ""K"":
                return 13;
            case ""Q"":
                return 12;
            case ""J"":
                return 11;
            default:
                return Integer.parseInt(c.getFace());
        }
    }

    private static int getsuitcode(Card c) {
        switch (c.getSuit()) {
            case ""Spades"":
                return 4;
            case ""Hearts"":
                return 3;
            case ""Diamonds"":
                return 2;
            case ""Clubs"":
                return 1;
            default:
                return 0;
        }
    }

    //full house = 5... high card = 0
    public int findcardstype() {

        int difffacecount = 1;
        for (int i = 0; i < 4; i++) {
            if (getfacecode(this.cards[i]) != getfacecode(this.cards[i + 1])) {
                difffacecount++;
            }
        }
        if (difffacecount == 2) {
            return 5; // full house
        }
        if (difffacecount == 3) {
            for (int i = 0; i < 3; i++) {
                if (getfacecode(this.cards[i]) == getfacecode(this.cards[i + 1]) && getfacecode(this.cards[i + 1]) == getfacecode(this.cards[i + 2])) {
                    return 1; // 3 of a kind, equal to 1 pair
                }
            }
            return 2; // 2 pairs
        }
        if (difffacecount == 4) {
            return 1; // 1 pair
        }

        for (int i = 0; i < 4; i++) {
            if (getsuitcode(this.cards[i]) != getsuitcode(this.cards[i + 1])) {
                break;
            }
            if (i == 3) {
                return 4; // flush
            }
        }
        for (int i = 0; i < 4; i++) {
            if (getfacecode(this.cards[i]) + 1 != getfacecode(this.cards[i + 1])) {
                if (i == 3 && getfacecode(this.cards[i + 1]) == 14) {
                    return 3; // 2345A
                }
                break;
            }
            if (i == 3) {
                return 3; // straight         
            }
        }

        return 0;// high card
    }

    private Card find_onepair_max() {
        for (int i = 0; i < 4; i++) {
            if (getfacecode(this.cards[i]) == getfacecode(this.cards[i + 1])) {
                return this.cards[i + 1];
            }
        }
        return null;
    }

    private Card find_twopairs_max() {
        for (int i = 2; i < 4; i++) {
            if (getfacecode(this.cards[i]) == getfacecode(this.cards[i + 1])) {
                return this.cards[i + 1];
            }
        }
        return null;
    }

    private Card find_fullhouse_max() {
        for (int i = 0; i < 3; i++) {
            if (getfacecode(this.cards[i]) == getfacecode(this.cards[i + 1]) && getfacecode(this.cards[i + 1]) == getfacecode(this.cards[i + 2])) {
                return this.cards[i + 2];
            }
        }
        return null;
    }
}

@0a6703729520ea39613c0c3a69d49315@"
"r04921104","2","0.27","104320","@d06b82f067eac39f0a76d1bba82d526b@import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards;
    private int cardstype;

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards) {
        this.cards = cards;
        Arrays.sort(this.cards);
    }

    // TODO
    public int compareTo(Hand that) {

        if (this.cardstype < that.cardstype) {
            return -1;
        }
        if (this.cardstype > that.cardstype) {
            return +1;
        }

        //  
        switch (this.cardstype) {
            case 0: // high card
                return this.cards[4].compareTo(that.cards[4]);
            case 1: // 1 pair
                return this.find_onepair_max().compareTo(that.find_onepair_max());
            case 2: // 2 pairs
                return this.find_twopairs_max().compareTo(that.find_twopairs_max());
            case 3: // straight
                if (getsuitcode(this.cards[0]) == 2 && getsuitcode(that.cards[0]) == 10) {
                    return -1; //2345A & 10JQKA
                } else if (getsuitcode(this.cards[0]) == 10 &&getsuitcode(that.cards[0]) == 2) {
                    return +1; //10JQKA & 2345A
                } else if (getsuitcode(this.cards[0]) == 2 && getsuitcode(that.cards[0]) == 2) {
                    return this.cards[3].compareTo(that.cards[3]); // 2345A & 2345A, compare 4th card
                } else {
                    return this.cards[4].compareTo(that.cards[4]);
                }
            case 4: // flush
                return this.cards[4].compareTo(that.cards[4]);
            case 5: // full house
                return this.find_fullhouse_max().compareTo(that.find_fullhouse_max());
        }
        return 0;
    }

    // Do not modified this function
    public Card[] getCards() {
        return this.cards;
    }

    private static int getfacecode(Card c) {
        switch (c.getFace()) {
            case ""A"":
                return 14;
            case ""K"":
                return 13;
            case ""Q"":
                return 12;
            case ""J"":
                return 11;
            default:
                return Integer.parseInt(c.getFace());
        }
    }

    private static int getsuitcode(Card c) {
        switch (c.getSuit()) {
            case ""Spades"":
                return 4;
            case ""Hearts"":
                return 3;
            case ""Diamonds"":
                return 2;
            case ""Clubs"":
                return 1;
            default:
                return 0;
        }
    }

    //full house = 5... high card = 0
    public int findcardstype() {

        int difffacecount = 1;
        for (int i = 0; i < 4; i++) {
            if (getfacecode(this.cards[i]) != getfacecode(this.cards[i + 1])) {
                difffacecount++;
            }
        }
        if (difffacecount == 2) {
            return 5; // full house
        }
        if (difffacecount == 3) {
            for (int i = 0; i < 3; i++) {
                if (getfacecode(this.cards[i]) == getfacecode(this.cards[i + 1]) && getfacecode(this.cards[i + 1]) == getfacecode(this.cards[i + 2])) {
                    return 1; // 3 of a kind, equal to 1 pair
                }
            }
            return 2; // 2 pairs
        }
        if (difffacecount == 4) {
            return 1; // 1 pair
        }

        for (int i = 0; i < 4; i++) {
            if (getsuitcode(this.cards[i]) != getsuitcode(this.cards[i + 1])) {
                break;
            }
            if (i == 3) {
                return 4; // flush
            }
        }
        for (int i = 0; i < 4; i++) {
            if (getfacecode(this.cards[i]) + 1 != getfacecode(this.cards[i + 1])) {
                if (i == 3 && getfacecode(this.cards[i + 1]) == 14) {
                    return 3; // 2345A
                }
                break;
            }
            if (i == 3) {
                return 3; // straight         
            }
        }

        return 0;// high card
    }

    private Card find_onepair_max() {
        for (int i = 0; i < 4; i++) {
            if (getfacecode(this.cards[i]) == getfacecode(this.cards[i + 1])) {
                return this.cards[i + 1];
            }
        }
        return null;
    }

    private Card find_twopairs_max() {
        for (int i = 2; i < 4; i++) {
            if (getfacecode(this.cards[i]) == getfacecode(this.cards[i + 1])) {
                return this.cards[i + 1];
            }
        }
        return null;
    }

    private Card find_fullhouse_max() {
        for (int i = 0; i < 3; i++) {
            if (getfacecode(this.cards[i]) == getfacecode(this.cards[i + 1]) && getfacecode(this.cards[i + 1]) == getfacecode(this.cards[i + 2])) {
                return this.cards[i + 2];
            }
        }
        return null;
    }
}

@d06b82f067eac39f0a76d1bba82d526b@"
"r04921104","3","0.0933333333333333","105200","@6c70a7e98aa4c1f1f988f068ceec6943@import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards;
    private int cardstype;

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards) {
        this.cards = cards;
        Arrays.sort(this.cards);
        this.cardstype = this.findcardstype();
    }

    // TODO
    public int compareTo(Hand that) {

        if (this.cardstype < that.cardstype) {
            return -1;
        }
        if (this.cardstype > that.cardstype) {
            return +1;
        }

        //  
        switch (this.cardstype) {
            case 0: // high card
                return this.cards[4].compareTo(that.cards[4]);
            case 1: // 1 pair
                return this.find_onepair_max().compareTo(that.find_onepair_max());
            case 2: // 2 pairs
                return this.find_twopairs_max().compareTo(that.find_twopairs_max());
            case 3: // straight
                if (getsuitcode(this.cards[0]) == 2 && getsuitcode(that.cards[0]) == 10) {
                    return -1; //2345A & 10JQKA
                } else if (getsuitcode(this.cards[0]) == 10 &&getsuitcode(that.cards[0]) == 2) {
                    return +1; //10JQKA & 2345A
                } else if (getsuitcode(this.cards[0]) == 2 && getsuitcode(that.cards[0]) == 2) {
                    return this.cards[3].compareTo(that.cards[3]); // 2345A & 2345A, compare 4th card
                } else {
                    return this.cards[4].compareTo(that.cards[4]);
                }
            case 4: // flush
                return this.cards[4].compareTo(that.cards[4]);
            case 5: // full house
                return this.find_fullhouse_max().compareTo(that.find_fullhouse_max());
        }
        return 0;
    }

    // Do not modified this function
    public Card[] getCards() {
        return this.cards;
    }

    private static int getfacecode(Card c) {
        switch (c.getFace()) {
            case ""A"":
                return 14;
            case ""K"":
                return 13;
            case ""Q"":
                return 12;
            case ""J"":
                return 11;
            default:
                return Integer.parseInt(c.getFace());
        }
    }

    private static int getsuitcode(Card c) {
        switch (c.getSuit()) {
            case ""Spades"":
                return 4;
            case ""Hearts"":
                return 3;
            case ""Diamonds"":
                return 2;
            case ""Clubs"":
                return 1;
            default:
                return 0;
        }
    }

    //full house = 5... high card = 0
    public int findcardstype() {

        int difffacecount = 1;
        for (int i = 0; i < 4; i++) {
            if (getfacecode(this.cards[i]) != getfacecode(this.cards[i + 1])) {
                difffacecount++;
            }
        }
        if (difffacecount == 2) {
            return 5; // full house
        }
        if (difffacecount == 3) {
            for (int i = 0; i < 3; i++) {
                if (getfacecode(this.cards[i]) == getfacecode(this.cards[i + 1]) && getfacecode(this.cards[i + 1]) == getfacecode(this.cards[i + 2])) {
                    return 1; // 3 of a kind, equal to 1 pair
                }
            }
            return 2; // 2 pairs
        }
        if (difffacecount == 4) {
            return 1; // 1 pair
        }

        for (int i = 0; i < 4; i++) {
            if (getsuitcode(this.cards[i]) != getsuitcode(this.cards[i + 1])) {
                break;
            }
            if (i == 3) {
                return 4; // flush
            }
        }
        for (int i = 0; i < 4; i++) {
            if (getfacecode(this.cards[i]) + 1 != getfacecode(this.cards[i + 1])) {
                if (i == 3 && getfacecode(this.cards[i + 1]) == 14) {
                    return 3; // 2345A
                }
                break;
            }
            if (i == 3) {
                return 3; // straight         
            }
        }

        return 0;// high card
    }

    private Card find_onepair_max() {
        for (int i = 0; i < 4; i++) {
            if (getfacecode(this.cards[i]) == getfacecode(this.cards[i + 1])) {
                return this.cards[i + 1];
            }
        }
        return null;
    }

    private Card find_twopairs_max() {
        for (int i = 2; i < 4; i++) {
            if (getfacecode(this.cards[i]) == getfacecode(this.cards[i + 1])) {
                return this.cards[i + 1];
            }
        }
        return null;
    }

    private Card find_fullhouse_max() {
        for (int i = 0; i < 3; i++) {
            if (getfacecode(this.cards[i]) == getfacecode(this.cards[i + 1]) && getfacecode(this.cards[i + 1]) == getfacecode(this.cards[i + 2])) {
                return this.cards[i + 2];
            }
        }
        return null;
    }
}

@6c70a7e98aa4c1f1f988f068ceec6943@"
"b99611017","0","0.46","105296","@82c9c2f0d99b15a5a7aaae3f475de519@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    public int evalueIt(Card c){
    
        int value=0;
       
        if(c.face==""A"")
        {
            value+=12;
        }
        else if(c.face==""K"")
        {
            value+=11;
        }
        else if(c.face==""Q"")
        {
            value+=10;
        }
        else if(c.face==""J"")
        {
            value+=9;
        }
        else if(c.face==""10"")
        {
            value+=8;
        }
        else if(c.face==""9"")
        {
            value+=7;
        }
        else if(c.face==""8"")
        {
            value+=6;
        }
        else if(c.face==""7"")
        {
            value+=5;
        }
        else if(c.face==""6"")
        {
            value+=4;
        }
        else if(c.face==""5"")
        {
            value+=3;
        }
        else if(c.face==""4"")
        {
            value+=2;
        }
        else if(c.face==""3"")
        {
            value+=1;
        }
        else if(c.face==""2"")
        {
            value+=0;
        }
        if(c.suit==""Spades"")
        {
            value=value*4+3;
        }
        else if(c.suit==""Hearts"")
        {
            value=value*4+2;
        }
        else if(c.suit==""Diamonds"")
        {
            value=value*4+1;
        }
        else if(c.suit==""Clubs"")
        {
            value=value*4;
        }
        return value;
    }
 
    // TODO
    public int compareTo(Card that) {

    
        int v1=evalueIt(this);
        int v2=evalueIt(that);
 
        int ans=0;
        if(v1>v2)
            ans= 1;
        if(v1<v2)
            ans= -1;
        
        if(v1==v2)
            ans=0;
        return ans;
        
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int score1 = 0;
            int score2 = 0;
            if (c1.suit == ""Spades"") {
                score1 = 4;
            } else if (c1.suit == ""Hearts"") {
                score1 = 3;
            } else if (c1.suit == ""Diamonds"") {
                score1 = 2;
            } else if (c1.suit == ""Clubs"") {
                score1 = 1;
            }
            if (c2.suit == ""Spades"") {
                score2 = 4;
            } else if (c2.suit == ""Hearts"") {
                score2 = 3;
            } else if (c2.suit == ""Diamonds"") {
                score2 = 2;
            } else if (c2.suit == ""Clubs"") {
                score2 = 1;
            }
            if (score1 > score2) {
                return 1;
            } else if (score1 < score2) {
                return -1;
            } else {
                return 0;
            }
        }
    }
}

@82c9c2f0d99b15a5a7aaae3f475de519@"
"r04945009","3","0.0933333333333333","105616","@63df9382e21f7df3dba08fc5417e1bc3@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards = new Card[5]; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
    }
    public void sort() {
        int N = 5;
        for (int i=0; i<N; i++)
            for (int j=i; j>0; j--)
                if (this.cards[j].compareTo(this.cards[j-1]) == -1) {
                    exch(j, j-1);
                }
    }
    
    public void exch(int i , int j) {
        Card swap = this.cards[i];
        this.cards[i] = this.cards[j];
        this.cards[j] = swap;
    }
    
    // Full House
    public boolean fullHouse() {
        if (!this.cards[0].getFace().equals(this.cards[1].getFace())) return false;
        if (!this.cards[3].getFace().equals(this.cards[4].getFace())) return false;
        return !(!this.cards[2].getFace().equals(this.cards[1].getFace()) && this.cards[2].getFace() != this.cards[3].getFace());
    }
    
    public int compare_fullHouse(Hand that) {
        return this.cards[2].compareTo(that.cards[2]);
    }
    
    // Flush
    public boolean flush() {
        String first = this.cards[0].getSuit();
        for (int i=1; i<5; i++) {
            if (!first.equals(this.cards[i].getSuit())) return false;
        }
        return true;
    }
    
    public int compare_flush(Hand that) {
        return this.cards[4].compareTo(that.cards[4]);
    }
    
    
    // Straight
    private final String[] faceOrder = {""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"", ""A""};
    public boolean straight() {
        int faceNum = 0;
        String first = this.cards[0].getFace();
        for (int i=0; i<13; i++) {
            if (first.equals(faceOrder[i])) {
                faceNum = i;
                break;
            }
        }
        if (faceNum <= 5) return false;
        if (faceNum == 12) {
            int count = 0;
            for (int i=1; i<5; i++) {
                if (!this.cards[i].getFace().equals(faceOrder[faceNum-i])) break; count++;
            }
            if (count==4) return true;
        }
        for (int i=1; i<5; i++) {
            if (!this.cards[i].getFace().equals(faceOrder[faceNum+i])) return false;
        }
        return true;
    }
    
    public int compare_straight(Hand that) {
        return this.cards[4].compareTo(that.cards[4]);
    }
    
    // 2-Pair
    public boolean twoPair() {
        int count = 0;
        for (int i=0; i<4; i++) {
            if (this.cards[i].getFace().equals(this.cards[i+1].getFace())) count++;
        }
        if (count != 2) return false;
        for (int i=0; i<2; i++) {
            if (this.cards[i].getFace().equals(this.cards[i+1]) && this.cards[i+1].getFace().equals(this.cards[i+2])) return false;
        }
        return true;
    }
    
    public int compare_twoPair(Hand that) {
        int thismax=0, thatmax=0;
        if (this.cards[4].getFace().equals(this.cards[3].getFace())) thismax = 4;
        if (this.cards[3].getFace().equals(this.cards[2].getFace())) thismax = 3;
        if (that.cards[4].getFace().equals(that.cards[3].getFace())) thatmax = 4;
        if (that.cards[3].getFace().equals(that.cards[2].getFace())) thatmax = 3;
        return this.cards[thismax].compareTo(that.cards[thatmax]);
    }
    
    // 1-Pair
    public boolean onePair(){
        int count = 0;
        for (int i=0; i<4; i++) {
            if (this.cards[i].getFace().equals(this.cards[i+1].getFace())) count++;
        }
        return count == 1;
    }
    
    public int compare_onePair(Hand that) {
        int thismax=0, thatmax=0;
        for (int i=0; i<4; i++) {
            if (this.cards[4-i].getFace().equals(this.cards[3-i].getFace())) {
                thismax = 4-i; break;
            }
        }
        for (int i=0; i<4; i++) {
            if (that.cards[4-i].getFace().equals(that.cards[3-i].getFace())) {
                thatmax = 4-i; break;
            }
        }
        return this.cards[thismax].compareTo(that.cards[thatmax]);
    }
    
    // High Card
    public boolean highCard() {
        for (int i=0; i<4; i++) {
            if (this.cards[i].getFace().equals(this.cards[i+1].getFace())) return false;
        }
        return true;
    }
    
    public int compare_highCard(Hand that) {
        return this.cards[4].compareTo(that.cards[4]);
    }
    
    public int checkTypes() {
        if (this.fullHouse()) return 6;
        if (this.flush()) return 5;
        if (this.straight()) return 4;
        if (this.twoPair()) return 3;
        if (this.onePair()) return 2;
        if (this.highCard()) return 1;
        return 0;
    }
    // TODO
    public int compareTo(Hand that) {
        this.sort();
        that.sort();
        int a = this.checkTypes();
        int b = that.checkTypes();
        if (this.checkTypes() < that.checkTypes()) return -1;
        if (this.checkTypes() > that.checkTypes()) return +1;
        if (this.checkTypes() == 6) return this.compare_fullHouse(that);
        if (this.checkTypes() == 5) return this.compare_flush(that);
        if (this.checkTypes() == 4) return this.compare_straight(that);
        if (this.checkTypes() == 3) return this.compare_twoPair(that);
        if (this.checkTypes() == 2) return this.compare_onePair(that);
        if (this.checkTypes() == 1) return this.compare_highCard(that);
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
    
}

@63df9382e21f7df3dba08fc5417e1bc3@"
"r04631021","0","0","0","@1cedc254ae77da02aeb7cb25650fc017@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    public Card[] HighCard = new Card[1] ;
    
    public void HighCard (Card cards) {
        this.HighCard[0] = cards;
    }
    
    
    public boolean isFullHouse(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards);
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace()))
                    this.HighCard(Cards[0]) ;
                return true ;
            }
            else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                    this.HighCard(Cards[4]) ;
                    return true ;
                }
            }
        }
        return false ;
    }
    public boolean isFlush(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getSuit().equalsIgnoreCase(Cards[1].getSuit())){
            if(Cards[1].getSuit().equalsIgnoreCase(Cards[2].getSuit())){
                if(Cards[2].getSuit().equalsIgnoreCase(Cards[3].getSuit())){
                 if(Cards[3].getSuit().equalsIgnoreCase(Cards[4].getSuit())){
                        this.HighCard(Cards[4]) ;
            return true ;
                    }
                }
            }
        }
            return false ;
        }
    public boolean isStraight(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
      
        MergeX.sort(Cards);
        Integer[] a1 = new Integer[Cards.length] ;
        for(int i = 0 ; i < 5 ; i++){
            if(Cards[i].getFace().equalsIgnoreCase(""J""))
                a1[i] = 11 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""Q""))
                a1[i] = 12 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""K""))
                a1[i] = 13 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""A""))
                a1[i] = 14 ;
            else
            a1[i] = Integer.parseInt(Cards[i].getFace());            
        }
        if(a1[1]==a1[0]+1){
            if(a1[2] == a1[1]+1){
                if(a1[3]== a1[2]+1){
                    if(a1[4] == a1[3]+1){
                        this.HighCard(Cards[4]) ;
                        return true ;
                    }
                }
            }
        }
        else if(a1[0]==2){
            if(a1[1]==3){
                if(a1[2]==4){
                    if(a1[3]==5){
                        if(a1[4]==14){
                            this.HighCard(Cards[3]) ;
                            return true ;
                        }
                    }
                }
            }
        }
        return false ;
    }
    public boolean isTwoPair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                this.HighCard(Cards[3]) ;
                return true ;
            }
            else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
       }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
        }
        return false;
    }
    public boolean isOnePair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            this.HighCard(Cards[1]) ;
            return true ;
        }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            this.HighCard(Cards[2]) ;
            return true ;
        }
        else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
            this.HighCard(Cards[3]) ;
            return true ;
        }
        else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
            this.HighCard(Cards[4]) ;
            return true ;
        }
        
        return false ;
    }

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        MergeX.sort(cards) ;
                
        return;
    }

    // TODO
    public int compareTo(Hand that) {
        int[] Points = new int [2] ;
            if(this.isFullHouse())
                Points[0] = 60 ;
            
            else if(this.isFlush())
                Points[0] = 50 ;
            
            else if(this.isStraight())
                Points[0] = 40 ;
            
            else if(this.isTwoPair()){
                Points[0] = 30 ;
            }
            else if(this.isOnePair()){
                Points[0] = 20 ;
            
            }
            else
                Points[0] = 10 ;
            
            
            if(that.isFullHouse())
                Points[1] = 60 ;
            
            else if(that.isFlush())
                Points[1] = 50 ;
            
            else if(that.isStraight())
                Points[1] = 40 ;
            
            else if(that.isTwoPair()){
                Points[1] = 30 ;
            }
            else if(that.isOnePair()){
                Points[1] = 20 ;

    }
            else 
                Points[1] = 10 ;
            
//            System.out.println(Points[0]+"" ""+Points[1] ) ;
            
            if(Points[0]>Points[1])
                return 1 ;
            else if(Points[0]<Points[1])
                return -1 ;
            
            else if(Points[0]==Points[1])
            if(Points[0] == 10){
                MergeX.sort(this.cards);
                MergeX.sort(that.cards);
                this.HighCard(this.cards[4]) ;
                that.HighCard(that.cards[4]) ;
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
                }
            else 
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
            return 0 ;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@1cedc254ae77da02aeb7cb25650fc017@"
"r04631021","3","0.0933333333333333","105968","@76c1c019d8695142bd7fd8a7536c9aed@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    public Card[] HighCard = new Card[1] ;
    
    public void HighCard (Card cards) {
        this.HighCard[0] = cards;
    }
    
    
    public boolean isFullHouse(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards);
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace()))
                    this.HighCard(Cards[0]) ;
                return true ;
            }
            else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                    this.HighCard(Cards[4]) ;
                    return true ;
                }
            }
        }
        return false ;
    }
    public boolean isFlush(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getSuit().equalsIgnoreCase(Cards[1].getSuit())){
            if(Cards[1].getSuit().equalsIgnoreCase(Cards[2].getSuit())){
                if(Cards[2].getSuit().equalsIgnoreCase(Cards[3].getSuit())){
                 if(Cards[3].getSuit().equalsIgnoreCase(Cards[4].getSuit())){
                        this.HighCard(Cards[4]) ;
            return true ;
                    }
                }
            }
        }
            return false ;
        }
    public boolean isStraight(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
      
        MergeX.sort(Cards);
        Integer[] a1 = new Integer[Cards.length] ;
        for(int i = 0 ; i < 5 ; i++){
            if(Cards[i].getFace().equalsIgnoreCase(""J""))
                a1[i] = 11 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""Q""))
                a1[i] = 12 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""K""))
                a1[i] = 13 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""A""))
                a1[i] = 14 ;
            else
            a1[i] = Integer.parseInt(Cards[i].getFace());            
        }
        if(a1[1]==a1[0]+1){
            if(a1[2] == a1[1]+1){
                if(a1[3]== a1[2]+1){
                    if(a1[4] == a1[3]+1){
                        this.HighCard(Cards[4]) ;
                        return true ;
                    }
                }
            }
        }
        else if(a1[0]==2){
            if(a1[1]==3){
                if(a1[2]==4){
                    if(a1[3]==5){
                        if(a1[4]==14){
                            this.HighCard(Cards[3]) ;
                            return true ;
                        }
                    }
                }
            }
        }
        return false ;
    }
    public boolean isTwoPair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                this.HighCard(Cards[3]) ;
                return true ;
            }
            else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
       }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
        }
        return false;
    }
    public boolean isOnePair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            this.HighCard(Cards[1]) ;
            return true ;
        }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            this.HighCard(Cards[2]) ;
            return true ;
        }
        else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
            this.HighCard(Cards[3]) ;
            return true ;
        }
        else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
            this.HighCard(Cards[4]) ;
            return true ;
        }
        
        return false ;
    }

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards ;
        }

    // TODO
    public int compareTo(Hand that) {
        int[] Points = new int [2] ;
            if(this.isFullHouse())
                Points[0] = 60 ;
            
            else if(this.isFlush())
                Points[0] = 50 ;
            
            else if(this.isStraight())
                Points[0] = 40 ;
            
            else if(this.isTwoPair()){
                Points[0] = 30 ;
            }
            else if(this.isOnePair()){
                Points[0] = 20 ;
            
            }
            else
                Points[0] = 10 ;
            
            
            if(that.isFullHouse())
                Points[1] = 60 ;
            
            else if(that.isFlush())
                Points[1] = 50 ;
            
            else if(that.isStraight())
                Points[1] = 40 ;
            
            else if(that.isTwoPair()){
                Points[1] = 30 ;
            }
            else if(that.isOnePair()){
                Points[1] = 20 ;

    }
            else 
                Points[1] = 10 ;
            
//            System.out.println(Points[0]+"" ""+Points[1] ) ;
            
            if(Points[0]>Points[1])
                return 1 ;
            else if(Points[0]<Points[1])
                return -1 ;
            
            else if(Points[0]==Points[1])
            if(Points[0] == 10){
                MergeX.sort(this.cards);
                MergeX.sort(that.cards);
                this.HighCard(this.cards[4]) ;
                that.HighCard(that.cards[4]) ;
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
                }
            else 
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
            return 0 ;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@76c1c019d8695142bd7fd8a7536c9aed@"
"r03525008","3","0.0966666666666667","105600","@90e3fe0f257b47352a39ca808302b9d5@import java.util.Arrays;
import java.util.Collections;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards=cards;
    }

    // TODO
    public int compareTo(Hand that) {
        int x=get_cardsvalue(this.cards);
        int y=get_cardsvalue(that.cards);
        if(x>y) return 1;
        else if(x<y)return -1;
        else return this.cards[0].compareTo(that.cards[0]);

    }
    private int get_cardsvalue(Card[] cards){
        Arrays.sort(cards, Collections.reverseOrder());
/*        for(int i=0;i<5;i++)
            System.out.println(cards[i].toString());*/
        if(check_fullhouse(cards)) return 6;
        else if(check_flush(cards)) return 5;
        else if(check_straight(cards)) return 4;
        else if(check_2pair(cards)) return 3;
        else if(check_1pair(cards)) return 2;
        else return 1;
    }
    private boolean check_fullhouse(Card[] cards){
        if(cards[0].getFace().equals(cards[1].getFace())&cards[1].getFace().equals(cards[2].getFace())&cards[3].getFace().equals(cards[4].getFace())){
            return true;
        }else if(cards[2].getFace().equals(cards[3].getFace())&cards[3].getFace().equals(cards[4].getFace())&cards[0].getFace().equals(cards[1].getFace())){
            Card temp=cards[0];
            cards[0]=cards[2];
            cards[2]=temp;
            return true;
        }
        else return false;
    }
    private boolean check_flush(Card[] cards){
        if(cards[0].getSuit().equals(cards[1].getSuit())&cards[1].getSuit().equals(cards[2].getSuit())&cards[2].getSuit().equals(cards[3].getSuit())&
                cards[3].getSuit().equals(cards[4].getSuit())){
            return true;
        }
        else
            return false;
    }
    private boolean check_straight(Card[] cards){
        int[] c=new int[5];
        for(int i=0;i<5;i++){
            if(cards[i].getFace().equals(""A"")){c[i] =14;}
            else if(cards[i].getFace().equals(""K"")){c[i] = 13;}
            else if(cards[i].getFace().equals(""Q"")){c[i] = 12;}
            else if(cards[i].getFace().equals(""J"")){c[i] = 11;}
            else {c[i] = Integer.parseInt(cards[i].getFace());}
        }
        if(c[0]-c[1]==1&c[1]-c[2]==1&c[2]-c[3]==1&c[3]-c[4]==1){
            return true;
        }else if(c[0]==14&c[1]==5&c[2]==4&c[3]==3&c[4]==2){
            Card temp=cards[0];
            cards[0]=cards[1];
            cards[1]=temp;
            return true;
        }else return false;
    }
    private boolean check_2pair(Card[] cards){
        if(cards[0].getFace().equals(cards[1].getFace())&cards[2].getFace().equals(cards[3].getFace())){
            return true;
        }else if(cards[0].getFace().equals(cards[1].getFace())&cards[3].getFace().equals(cards[4].getFace())){
            return true;
        }else if(cards[1].getFace().equals(cards[2].getFace())&cards[3].getFace().equals(cards[4].getFace())){
            Card temp=cards[0];
            cards[0]=cards[1];
            cards[1]=temp;
            return true;
        }else return false;
    }
    private boolean check_1pair(Card[] cards){
        if(cards[0].getFace().equals(cards[1].getFace())){
            return true;
        }else if(cards[1].getFace().equals(cards[2].getFace())){
            Card temp=cards[0];
            cards[0]=cards[1];
            cards[1]=temp;
            return true;
        }else if(cards[2].getFace().equals(cards[3].getFace())){
            Card temp=cards[0];
            cards[0]=cards[2];
            cards[2]=temp;
            return true;
        }else if(cards[3].getFace().equals(cards[4].getFace())){
            Card temp=cards[0];
            cards[0]=cards[3];
            cards[3]=temp;
            return true;
        }else return false;
    }
      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@90e3fe0f257b47352a39ca808302b9d5@"
"r04945021","0","0","0","@3d556bbf18f31473d71dba92b44acca0@import java.util.Arrays;
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        return;
    }

    // TODO
    public int compareTo(Hand that) {
        //對兩個傳進來做sorted
        Arrays.sort(this.cards);
        Arrays.sort(that.cards);
//        System.out.println(this.name);
//
//       for (int i =0;i<5;i++){
//           System.out.println(that.cards[i].getFace());
//        System.out.println(that.cards[i].getSuit());
//       }
        int SameThisCard = 0;
        int SameThatCard = 0;
        int SameThisID=-1;
        int SameThatID=-1;
        //Arrays.sort(this.cards);
        //只要用前3個卡，掃後三個，即可知有無full house
        for (int i = 0; i < 3; i++) {
                        SameThisCard = 0;
            SameThatCard = 0;
            for (int j = i + 1; j < 5; j++) {
                
                if (this.cards[i].getFace().equals(this.cards[j].getFace())) {
                    SameThisCard++;
                    //System.out.println(this.name);
                }
                if (that.cards[i].getFace().equals(that.cards[j].getFace())) {
                    SameThatCard++;
                }
            }
            if (SameThisCard == 2) {
                SameThisID = i;
            } else if (SameThatCard == 2) {
                SameThatID = i;
            }

        }
        if (SameThisID!=-1&&SameThatID!=-1) {
                return this.cards[SameThisID].compareTo(that.cards[SameThatID]);
        }else if(SameThisID!=-1){
            return 1;}
        else if(SameThatID!=-1){

            return -1;          
        }

        //flush   
        SameThisCard = 0;
        SameThatCard = 0;
        for (int i = 0; i < 4; i++) {
            if (this.cards[i].getSuit().equals(this.cards[i + 1].getSuit())) {
                SameThisCard++;
            }
            if (that.cards[i].getSuit().equals(that.cards[i + 1].getSuit())) {
                SameThatCard++;
            }
        }
//                    System.out.println(this.name);
        //System.out.println(SameThatCard);

        if (SameThisCard == 4 && SameThatCard == 4) {
            return this.cards[4].compareTo(that.cards[4]);
        } else if (SameThisCard == 4) {
            return 1;
        } else if (SameThatCard == 4) {
            return -1;
        }
        
    //Straight
        SameThisCard = 0;
        SameThatCard = 0;

        for (int i = 0; i < 4; i++) {
            if(i==3 && this.cards[i].getFace().equals(""5"") && this.cards[i+1].getFace().equals(""A""))
             {
                SameThisCard++;
            } else if (this.cards[i].getFace().equals(""10"") && this.cards[i + 1].getFace().equals(""J"")) {
                SameThisCard++;
            } else if (this.cards[i].getFace().equals(""J"") && this.cards[i + 1].getFace().equals(""Q"")) {
                SameThisCard++;
            } else if (this.cards[i].getFace().equals(""Q"") && this.cards[i + 1].getFace().equals(""K"")) {
                SameThisCard++;}
            else if(this.cards[i].getFace().equals(""K"") && this.cards[i + 1].getFace().equals(""A"")){
                SameThisCard++;
            } else if (!this.cards[i].getFace().matches(""A|J|Q|K"") && !this.cards[i + 1].getFace().matches(""A|J|Q|K"")) {
                if (Integer.parseInt(this.cards[i].getFace()) + 1 == Integer.parseInt(this.cards[i + 1].getFace())) {
                    SameThisCard++;
                }
            }
            if (i==3 && that.cards[i].getFace().equals(""5"") && that.cards[i+1].getFace().equals(""A"")) {
                SameThatCard++;
               
            } else if (that.cards[i].getFace().equals(""10"") && that.cards[i + 1].getFace().equals(""J"")) {
                SameThatCard++;
              
   
            } else if (that.cards[i].getFace().equals(""J"") && that.cards[i + 1].getFace().equals(""Q"")) {
                SameThatCard++;
              
            } else if (that.cards[i].getFace().equals(""Q"") && that.cards[i + 1].getFace().equals(""K"")) {
                SameThatCard++;
                
            } else if (that.cards[i].getFace().equals(""K"") && that.cards[i + 1].getFace().equals(""A"")) {
                SameThatCard++;
                
            } else if (!that.cards[i].getFace().matches(""A|J|Q|K"") && !that.cards[i + 1].getFace().matches(""A|J|Q|K"")) {
                if (Integer.parseInt(that.cards[i].getFace()) + 1 == Integer.parseInt(that.cards[i + 1].getFace())) {
                    SameThatCard++;
                    
                }
            }
        }
        if (SameThisCard == 4 || SameThatCard ==4) {
            
            if (SameThisCard == 4 && SameThatCard == 4) {
                if (this.cards[4].getFace().equals(""A"") && that.cards[4].getFace().equals(""A"") && that.cards[0].getFace().equals(""2"") && this.cards[0].getFace().equals(""2"")) {

                    return this.cards[4].compareTo(that.cards[4]);
                } else if (this.cards[4].getFace().equals(""A"") && this.cards[0].getFace().equals(""2"")) {
                    return -1;
                } else if (that.cards[4].getFace().equals(""A"") && that.cards[0].getFace().equals(""2"")) {
                          
                    return 1;
                } else if (this.cards[4].getFace().equals(""A"") && that.cards[4].getFace().equals(""A"") && that.cards[0].getFace().equals(""10"") && this.cards[0].getFace().equals(""10"")){
                    return this.cards[4].compareTo(that.cards[4]);
                }else if (this.cards[4].getFace().equals(""A"") && this.cards[0].getFace().equals(""10"")){
                          
                    return 1;
                }else if (that.cards[4].getFace().equals(""A"") && that.cards[0].getFace().equals(""10"")) {
                    return -1;               
                }else {
                    return this.cards[4].compareTo(that.cards[4]);
                }
                }
                else if (SameThisCard==4){
                      
                 return 1;}
             else if(SameThatCard==4){
                
                 return -1;} 
                }
            
        //2-pair
        SameThisCard = 0;
        SameThatCard = 0;
        SameThisID=-1;
        SameThatID=-1;
        int PairThis=0;
        int PairThat=0;
        for (int i = 0; i < 4; i++) {
                        SameThisCard = 0;
            SameThatCard = 0;
            for (int j = i + 1; j < 5; j++) {
                
                if (this.cards[i].getFace().equals(this.cards[j].getFace())) {
                    SameThisCard++;
                    //System.out.println(this.name);
                }
                if (that.cards[i].getFace().equals(that.cards[j].getFace())) {
                    SameThatCard++;
                }
            }
            if (SameThisCard == 1) {
                PairThis++;
                SameThisID = i;
            }
            if (SameThatCard == 1) {
                PairThat++;
                SameThatID = i;
            }

        }
        if (PairThis==2 && PairThat==2) {
                return this.cards[SameThisID].compareTo(that.cards[SameThatID]);
        }else if(PairThis==2){
            return 1;
        }
        else if(PairThat==2)
            return -1;
               
        //1-Pair
        SameThisCard = 0;
        SameThatCard = 0;
        SameThisID=-1;
        SameThatID=-1;
        for (int i = 0; i < 4; i++) {
                        SameThisCard = 0;
            SameThatCard = 0;
            for (int j = i + 1; j < 5; j++) {
                
                if (this.cards[i].getFace().equals(this.cards[j].getFace())) {
                    SameThisCard++;
                    //System.out.println(this.name);
                }
                if (that.cards[i].getFace().equals(that.cards[j].getFace())) {
                    SameThatCard++;
                }
            }
            if (SameThisCard == 1) {
                SameThisID = i;
            }
            if (SameThatCard == 1) {
                SameThatID = i;
            }
        }
      
        if (SameThisID != -1 && SameThatID != -1) {
            //System.out.println(""Y"");
            return this.cards[SameThisID].compareTo(that.cards[SameThatID]);
        } else if (SameThisID != -1) {
            return 1;
        } else if (SameThatID != -1) {
            return -1;
        }

        
        
        //High Card
        return this.cards[4].compareTo(that.cards[4]);
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@3d556bbf18f31473d71dba92b44acca0@"
"r03525008","3","0.0966666666666667","105616","@d60b59d1051181598c0652d73dbec5b0@import java.util.*;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards;

    private CardType cardType;
    public CardQuery cardQuery = new CardQuery();
    private static final CardTypeOrder CARD_TYPE_ORDER = new CardTypeOrder();

    enum CardType {
        full_house , flush , straight , two_pair , one_pair , high_card
    }


    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
        this.setCardType();
    }

    public CardType getCardType(){
        return cardType;
    }

    private void setCardType(){
        Map<String,Integer> faces = cardQuery.getFaceCount();
        if (faces.size() == 2) {
            // (4,1) or (3,2)
            if (cardQuery.getThrees().size() != 0) {
                cardType = CardType.full_house;
                return;
            }
            cardType = CardType.high_card;
        } else if (faces.size() == 3){
            // (3,1,1) or (2,2,1)
            if (cardQuery.getPairs().size() != 0) {
                cardType = CardType.two_pair;
                return;
            }
            cardType = CardType.high_card;
        } else if (faces.size() == 4){
            // (2,1,1,1)
            cardType = CardType.one_pair;
        } else if (faces.size() == 5){
            // check for flush
            if (cardQuery.getSuitSet().size() == 1) {
                cardType = CardType.flush;
                return;
            }
            // check for straight
            String[] straights = {""A"",""K"",""Q"",""J"",""10"",""9"",""8"",""7"",""6"",""5"",""4"",""3"",""2"",""A""};
            Set<String> faceSet = faces.keySet();
            for(int i = 0; i < straights.length - 5 ; i++){
                Set<String> straightOne = new HashSet<String>();
                for(int j = i ; j < i + 5 ; j++){
                    straightOne.add(straights[j]);
                }
                if (faceSet.containsAll(straightOne)) {
                    cardType = CardType.straight;
                    return;
                }
            }
            // high card otherwise
            cardType = CardType.high_card;
        }
    }

    // TODO
    public int compareTo(Hand that) {
        int result = CARD_TYPE_ORDER.compare(this.getCardType(), that.getCardType());
        if (result != 0){
            return result;
        } else {
            // broke ties
            switch (this.getCardType()) {
                case full_house:
                    Card c1 = Collections.max(this.cardQuery.getThrees());
                    Card c2 = Collections.max(that.cardQuery.getThrees());
                    return c1.compareTo(c2);

                case two_pair:
                case one_pair:
                    c1 = Collections.max(this.cardQuery.getPairs());
                    c2 = Collections.max(that.cardQuery.getPairs());
                    return c1.compareTo(c2);

                case high_card:
                case straight:
                case flush:
                    c1 = Collections.max(this.cardQuery.getOnes());
                    c2 = Collections.max(that.cardQuery.getOnes());
                    return c1.compareTo(c2);
            }
        }
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }


    private static class CardTypeOrder implements Comparator<CardType> {
        private static List<CardType> order;
        CardTypeOrder() {
            CardType[] cardTypes = {
                    CardType.full_house,
                    CardType.flush,
                    CardType.straight,
                    CardType.two_pair,
                    CardType.one_pair,
                    CardType.high_card
            };
            order = new ArrayList<CardType>();
            for (CardType cardType : cardTypes) {
                order.add(cardType);
            }
        }

        @Override
        public int compare(CardType cardType1, CardType cardType2) {
            int cardType_1 = order.indexOf(cardType1);
            int cardType_2 = order.indexOf(cardType2);
            if (cardType_1 < cardType_2) return 1;
            else if (cardType_1 > cardType_2) return -1;
            else return 0;
        }
    }


    private class CardQuery {

        public Map<String , Integer> getFaceCount(){
            Map<String,Integer> faces = new HashMap<String,Integer>();
            for(Card c:cards){
                if (faces.containsKey(c.getFace()))
                    faces.put(c.getFace() , faces.get(c.getFace())+1);
                else
                    faces.put(c.getFace() , 1);
            }
            return faces;
        }

        public Set<String> getSuitSet(){
            Set<String> suitSet = new HashSet<String>();
            for (Card c:cards){
                suitSet.add(c.getSuit());
            }
            return suitSet;
        }

        public Set<String> getSuitSet(String face){
            Set<String> suitSet = new HashSet<String>();
            for (Card c:cards){
                if (face.equals(c.getFace()))
                    suitSet.add(c.getSuit());
            }
            return suitSet;
        }

        public Set<Card> getOnes(){
            Set<Card> ones = new HashSet<Card>();
            Map<String,Integer> faces = getFaceCount();
            for (Card c:cards){
                if (faces.get(c.getFace()) == 1)
                    ones.add(c);
            }
            return ones;
        }

        public Set<Card> getPairs(){
            Set<Card> pairs = new HashSet<Card>();
            Map<String,Integer> faces = getFaceCount();
            for (Card c:cards){
                if (faces.get(c.getFace()) == 2)
                    pairs.add(c);
            }
            return pairs;
        }

        public Set<Card> getThrees(){
            Set<Card> threes = new HashSet<Card>();
            Map<String,Integer> faces = getFaceCount();
            for (Card c:cards){
                if (faces.get(c.getFace()) == 3)
                    threes.add(c);
            }
            return threes;
        }
    }

}

@d60b59d1051181598c0652d73dbec5b0@"
"r04921094","0","0.39","105840","@72dc1257e881a1c47d9fb86c43c32fd7@//import edu.princeton.cs.algs4.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
    	Hand hand;
    	MinPQ<Hand> minPQ;

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            minPQ = new MinPQ<Hand> (target + 1);

            for (int i = 0; i<count; i++){
            	Card[] cards = new Card[5]; 
        		String[] handReg = br.readLine().split("","");

        		for (int j = 0; j<5; j++){
        			String[] cardReg = handReg[j].split(""_"");
        			cards[j] = new Card(cardReg[1], cardReg[0]);
        		}
        		hand = new Hand(cards);
        		if(i < target){
        			minPQ.insert(hand);
        		}
        		else{
        			Hand minHand = minPQ.delMin();
        			if (minHand.compareTo(hand) == 1){
        				minPQ.insert(minHand);
        			}
        			else{
        				minPQ.insert(hand);
        			}
        		}
        		// maxPQ.insert(new Hand(cards));
        	}


        	Card[] card = minPQ.delMin().getCards();
        	Arrays.sort(card);
        	for(int i = 0; i < 5; i++){
        		if (i != 4){
        			System.out.print(card[i].getSuit() + ""_"" + card[i].getFace() + "","");
        		}
        		else{
        			System.out.print(card[i].getSuit() + ""_"" + card[i].getFace());
        		}
        	}
        }


    }

}

@72dc1257e881a1c47d9fb86c43c32fd7@"
"r03945012","3","0.0966666666666667","105968","@eca5e406ee44b1a30690ae1452862490@import java.util.HashSet;
import java.util.Set;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards;

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards) {
        MinPQ<Card> pq = new MinPQ<Card>();
        for (int i = 0; i < 5; i++) {
            pq.insert(cards[i]);
        }
        for (int j = 0; j < 5; j++) {
            cards[j] = pq.delMin();
        }
        this.cards = cards;
    }

    // TODO

    @Override
    public int compareTo(Hand that) {
        Card[] PlayerOneCards = this.cards;
        Card[] PlayerTwoCards = that.cards;
        String[] Cardone = FiveCard(PlayerOneCards);
        String[] Cardtwo = FiveCard(PlayerTwoCards);
        String CardType = ""full_house, flush, straight, two_pair, one_pair, highcard"";
        int card_compare;
        card_compare = CardType.indexOf(Cardone[0]) - CardType.indexOf(Cardtwo[0]);
        if (card_compare > 0) {
            return -1;
        } else if (card_compare < 0) {
            return 1;
        } else {
            String Number = ""2,3,4,5,6,7,8,9,10,J,Q,K,A"";
            int bigcard_compare;
            bigcard_compare = Number.indexOf(Cardone[1]) - Number.indexOf(Cardtwo[1]);
            if (bigcard_compare > 0) {
                return 1;
            } else if (bigcard_compare < 0) {
                return -1;
            } else {
                String Color = ""Clubs, Diamonds, Hearts, Spades"";
                int bigcolor_compare;
                bigcolor_compare = Color.indexOf(Cardone[2]) - Color.indexOf(Cardtwo[2]);
                if (bigcolor_compare > 0) {
                    return 1;
                } else if (bigcolor_compare < 0) {
                    return -1;
                } else {
                    return 0;
                }
            }
        }
    }

    // full_house > flush > straight > two_pair > one_pair > highcard    
    private String[] FiveCard(Card[] fivecards) {
        String[] result = new String[3];
        String[] cards_number = new String[5];
        for (int i = 0; i < 5; i++) {
            cards_number[i] = fivecards[i].getFace();
        }
        Set<String> temp = new HashSet<String>();
        for (String element : cards_number) {
            temp.add(element);
        }
        int non_duplicate = temp.size();
        switch (non_duplicate) {
            case 5:  // flush or straight or highcard
                // flush or not
                if (fivecards[0].getSuit().equals(fivecards[1].getSuit())
                        && fivecards[0].getSuit().equals(fivecards[2].getSuit())
                        && fivecards[0].getSuit().equals(fivecards[3].getSuit())
                        && fivecards[0].getSuit().equals(fivecards[4].getSuit())) {
                    result[0] = ""flush"";
                    result[1] = fivecards[4].getFace();
                    result[2] = fivecards[4].getSuit();
                    return result;
                }
                // straight or not
                if (""2"".equals(cards_number[0]) && ""3"".equals(cards_number[1])
                        && ""4"".equals(cards_number[2]) && ""5"".equals(cards_number[3])
                        && ""A"".equals(cards_number[4])) {
                    result[0] = ""straight"";
                    result[1] = fivecards[3].getFace();
                    result[2] = fivecards[3].getSuit();
                    return result;
                }
                String Number = ""2,3,4,5,6,7,8,9,10,J,Q,K,A"";
                int face_compare;
                for (int i = 0; i < 4; i++) {
                    face_compare = Number.indexOf(cards_number[i + 1]) - Number.indexOf(cards_number[i]);
                    if (face_compare > 4 || face_compare < 2) {
                        // highcard here   
                        result[0] = ""highcard"";
                        result[1] = fivecards[4].getFace();
                        result[2] = fivecards[4].getSuit();
                        return result;
                    } else if (i == 3) {
                        result[0] = ""straight"";
                        result[1] = fivecards[4].getFace();
                        result[2] = fivecards[4].getSuit();
                        return result;
                    }
                }
            case 4: // one pair here
                temp.clear();
                int index_1 = 0;
                for (int i = 0; i < 5; i++) {
                    if (temp.add(cards_number[i]) == false) {
                        index_1 = i;
                    }
                    temp.add(cards_number[i]);
                }
                result[0] = ""one_pair"";
                result[1] = fivecards[index_1].getFace();
                result[2] = fivecards[index_1].getSuit();
                break;
            case 3: // two pair(11223) here and one pair(11134)
                temp.clear();
                int index_2 = 0;
                int k = 0;
                String[] temp_dup = new String[2];
                for (int i = 0; i < 5; i++) {
                    if (temp.add(cards_number[i]) == false) {
                        index_2 = i;
                        // Triplets
                        temp_dup[k++] = cards_number[i];
                    }
                    temp.add(cards_number[i]);
                }
                if (temp_dup[0].equals(temp_dup[1])) {
                    result[0] = ""one_pair"";
                    result[1] = fivecards[index_2].getFace();
                    result[2] = fivecards[index_2].getSuit();
                    return result;
                } else {
                    result[0] = ""two_pair"";
                    result[1] = fivecards[index_2].getFace();
                    result[2] = fivecards[index_2].getSuit();
                    return result;
                }
            case 2: // full_house here and (11112)
                if (cards_number[1].equals(cards_number[2])
                        && cards_number[2].equals(cards_number[3])) {
                    result[0] = ""one_pair"";
                    result[1] = fivecards[3].getFace();
                    result[2] = fivecards[3].getSuit();
                    return result;
                }
                temp.clear();
                int m = 0;
                String[] dup_two = new String[3];
                for (int i = 0; i < 5; i++) {
                    if (temp.add(cards_number[i]) == false) {
                        dup_two[m++] = cards_number[i];
                    }
                    temp.add(cards_number[i]);
                }
                if (dup_two[1].equals(dup_two[2])) {
                    result[0] = ""full_house"";
                    result[1] = fivecards[4].getFace();
                    result[2] = fivecards[4].getSuit();
                    break;
                } else {
                    result[0] = ""full_house"";
                    result[1] = fivecards[2].getFace();
                    result[2] = fivecards[2].getSuit();
                    break;
                }
            case 1:
                result[0] = ""one_pair"";
                result[1] = fivecards[4].getFace();
                result[2] = fivecards[4].getSuit();
                break;
        }
        return result;
    }

    // Do not modified this function
    public Card[] getCards() {
        return this.cards;
    }
}

@eca5e406ee44b1a30690ae1452862490@"
"r04631036","0","0.13","110944","@63b8e4082ccc00f77c4fefa5065c811a@public class Player implements Comparable<Player>{ 

    private Card[] cards = new Card[5];
    private String name;
    public Card[] HighCard = new Card[1] ;
    
    public void HighCard (Card cards) {
        this.HighCard[0] = cards;
    }
     
    // DO NOT MODIFY THIS    
    public Player(String name) {
        this.name = name;
    }
     
    // DO NOT MODIFY THIS
    public String getName() {
        return this.name;
     }
     
    // DO NOT MODIFY THIS
    public void setCards(Card[] cards) {
        this.cards = cards;
    }
    public boolean isFullHouse(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards);
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace()))
                    this.HighCard(Cards[0]) ;
                return true ;
            }
            else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                    this.HighCard(Cards[4]) ;
                    return true ;
                }
            }
        }
        return false ;
    }
    public boolean isFlush(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getSuit().equalsIgnoreCase(Cards[1].getSuit())){
            if(Cards[1].getSuit().equalsIgnoreCase(Cards[2].getSuit())){
                if(Cards[2].getSuit().equalsIgnoreCase(Cards[3].getSuit())){
                 if(Cards[3].getSuit().equalsIgnoreCase(Cards[4].getSuit())){
                        this.HighCard(Cards[4]) ;
            return true ;
                    }
                }
            }
        }
            return false ;
        }
    public boolean isStraight(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
      
        MergeX.sort(Cards);
        Integer[] a1 = new Integer[Cards.length] ;
        for(int i = 0 ; i < 5 ; i++){
            if(Cards[i].getFace().equalsIgnoreCase(""J""))
                a1[i] = 11 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""Q""))
                a1[i] = 12 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""K""))
                a1[i] = 13 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""A""))
                a1[i] = 14 ;
            else
            a1[i] = Integer.parseInt(Cards[i].getFace());            
        }
        if(a1[1]==a1[0]+1){
            if(a1[2] == a1[1]+1){
                if(a1[3]== a1[2]+1){
                    if(a1[4] == a1[3]+1){
                        this.HighCard(Cards[4]) ;
                        return true ;
                    }
                }
            }
        }
        else if(a1[0]==2){
            if(a1[1]==3){
                if(a1[2]==4){
                    if(a1[3]==5){
                        if(a1[4]==14){
                            this.HighCard(Cards[3]) ;
                            return true ;
                        }
                    }
                }
            }
        }
        return false ;
    }
    public boolean isTwoPair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                this.HighCard(Cards[3]) ;
                return true ;
            }
            else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
       }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
        }
        return false;
    }
    public boolean isOnePair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            this.HighCard(Cards[1]) ;
            return true ;
        }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            this.HighCard(Cards[2]) ;
            return true ;
        }
        else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
            this.HighCard(Cards[3]) ;
            return true ;
        }
        else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
            this.HighCard(Cards[4]) ;
            return true ;
        }
        
        return false ;
    }
    // TODO 
    public int compareTo(Player that) {
        
//         complete this function so the Player can be sorted according to the cards he/she has.
        
            int[] Points = new int [2] ;
            if(this.isFullHouse())
                Points[0] = 60 ;
            
            else if(this.isFlush())
                Points[0] = 50 ;
            
            else if(this.isStraight())
                Points[0] = 40 ;
            
            else if(this.isTwoPair()){
                Points[0] = 30 ;
            }
            else if(this.isOnePair()){
                Points[0] = 20 ;
            
            }
            else
                Points[0] = 10 ;
            
            
            if(that.isFullHouse())
                Points[1] = 60 ;
            
            else if(that.isFlush())
                Points[1] = 50 ;
            
            else if(that.isStraight())
                Points[1] = 40 ;
            
            else if(that.isTwoPair()){
                Points[1] = 30 ;
            }
            else if(that.isOnePair()){
                Points[1] = 20 ;

    }
            else 
                Points[1] = 10 ;
            
//            System.out.println(Points[0]+"" ""+Points[1] ) ;
            
            if(Points[0]>Points[1])
                return 1 ;
            else if(Points[0]<Points[1])
                return -1 ;
            
            else if(Points[0]==Points[1])
            if(Points[0] == 10){
                MergeX.sort(this.cards);
                MergeX.sort(that.cards);
                this.HighCard(this.cards[4]) ;
                that.HighCard(that.cards[4]) ;
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
                }
            else 
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
            return 0 ;
    }
   
     public static void main(String[] args) {
     Player[] a = new Player[2] ;
     a[0] = new Player(""John Cena"") ;
     a[1] = new Player(""undertaker"") ;
     Card[] fuck = new Card[5];
     Card[] fuck1 = new Card[5] ;
     fuck[0] = new Card(""10"",""Spades"") ;
     fuck[1] = new Card(""A"",""Hearts"") ;
     fuck[2] = new Card(""9"",""Diamonds"") ;
     fuck[3] = new Card(""7"",""Spades"") ;
     fuck[4] = new Card(""5"",""Clubs"") ;
     a[0].setCards(fuck);
     fuck1[0] = new Card(""4"",""Spades"") ;
     fuck1[1] = new Card(""K"",""Hearts"") ;
     fuck1[2] = new Card(""J"",""Clubs"") ;
     fuck1[3] = new Card(""3"",""Spades"") ;
     fuck1[4] = new Card(""Q"",""Hearts"") ;
     a[1].setCards(fuck1);
//     for (int i = 0 ; i < 5 ; i++){
//     System.out.println(a[0].cards[i].getFace());
//     System.out.println(a[1].cards[i].getFace());
//     }
//     System.out.println(a[0].compareTo(a[1]));
//     System.out.println(a[1].HighCard[0].compareTo(a[0].HighCard[0]));
}
}


@63b8e4082ccc00f77c4fefa5065c811a@"
"r04631034","3","0.0966666666666667","105984","@de38ff139abb0ac46e4dfd35fc3fb147@
import java.util.*;



public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
              this.cards=cards;
        return;
    }

    // TODO
    public int compareTo(Hand that) {


              HashMap<String,Integer> map =new HashMap<String,Integer>();
              for(int i =2;i<11;i++){
                        map.put(String.valueOf(i),i);
              }
              map.put(""J"",11);
              map.put(""Q"",12);
              map.put(""K"",13);
              map.put(""A"",14);
              map.put(""Spades"",18);
              map.put(""Hearts"",17);
              map.put(""Diamonds"",16);
              map.put(""Clubs"",15);
              
              MergeX.sort(this.cards,Card.SUIT_ORDER);    
              for(int i = 0 ; i < this.cards.length-1; i++){
                   for(int j = i+1 ; j < this.cards.length;j++){
                        if(map.get(this.cards[i].getFace()) > map.get(this.cards[j].getFace()) ) continue;
                        else{
                             String temp_Face=this.cards[j].getFace();
                             String temp_Suit=this.cards[j].getSuit();
                             this.cards[j] = new Card(this.cards[i].getFace(),this.cards[i].getSuit());
                             this.cards[i]= new Card(temp_Face , temp_Suit); 
                        }
                   }
              }
              
              MergeX.sort(that.cards,Card.SUIT_ORDER);    
              for(int i = 0 ; i < that.cards.length-1; i++){
                   for(int j = i+1 ; j < that.cards.length;j++){
                        if(map.get(that.cards[i].getFace()) > map.get(that.cards[j].getFace()) ) continue;
                        else{
                             String temp_Face=that.cards[j].getFace();
                             String temp_Suit=that.cards[j].getSuit();
                             that.cards[j] = new Card(that.cards[i].getFace(),that.cards[i].getSuit());
                             that.cards[i]= new Card(temp_Face , temp_Suit); 
                        }
                   }
              }
              
              
              /// this card
              
              
              int[][] output=new int[2][3];
              
               Set<String> Set_this = new HashSet<String>();
               for(int i = 0 ; i < this.cards.length; i ++){
                    Set_this.add(this.cards[i].getFace());
               }
               if(Set_this.size() == 2){           //  fullhouse:5
                    output[0][0]=5;
                    int count=0;
                    for(int i = 0 ; i < this.cards.length-1; i++){
                         if(map.get(this.cards[i].getFace()) ==map.get(this.cards[i+1].getFace())){
                              count++;
                              if(count==2){
                                   output[0][1]=map.get(this.cards[i-1].getFace());
                                   output[0][2]=map.get(this.cards[i-1].getSuit());
                              }
                              else count=0;
                         }
                    }
               }
               else if(Set_this.size()==3){       /// two pair :2
                    output[0][0]=2;
                    for(int i = 0 ; i < this.cards.length-1; i++){
                        if(map.get(this.cards[i].getFace()) == map.get(this.cards[i+1].getFace())){
                                   output[0][1]=map.get(this.cards[i].getFace());
                                   output[0][2]=map.get(this.cards[i].getSuit());
                                   break;
                        }
                    }
               }
               else if(Set_this.size()==4){       /// one pair :1
                    output[0][0]=1;
                    for(int i = 0 ; i < this.cards.length-1; i++){
                        if(map.get(this.cards[i].getFace()) == map.get(this.cards[i+1].getFace())){
                                   output[0][1]=map.get(this.cards[i].getFace());
                                   output[0][2]=map.get(this.cards[i].getSuit());
                                   break;
                        }
                    }
               }
               else if(Set_this.size() == 5){
                    int count_flush=0;
                    int count_straight=0;
                    int count_last4 = 0;
                    for(int i = 0 ; i < this.cards.length-1; i++){
                         if(map.get(this.cards[i].getFace()) - 1 ==map.get(this.cards[i+1].getFace())){
                              count_straight++;
                              if(count_straight==4){                            // straight
                                   output[0][1]=map.get(this.cards[0].getFace());
                                   output[0][2]=map.get(this.cards[0].getSuit());
                                   output[0][0]=3;
                              }
                         }
                         if(map.get(this.cards[i].getSuit()) ==map.get(this.cards[i+1].getSuit())){
                              count_last4++;
                              if(count_last4==3 & map.get(this.cards[0].getFace())==14 ){                            // fullhouse
                                   output[0][1]=map.get(this.cards[0].getFace());
                                   output[0][2]=map.get(this.cards[0].getSuit());
                                   output[0][0]=3;
                              }
                         }
                         if(map.get(this.cards[i].getSuit()) ==map.get(this.cards[i+1].getSuit())){
                              count_flush++;
                              if(count_flush==4){                            // fullhouse
                                   output[0][1]=map.get(this.cards[0].getFace());
                                   output[0][2]=map.get(this.cards[i].getSuit());
                                   output[0][0]=4;
                              }
                         }
                    }
                    if(output[0][0]==0){           //  one card :0
                         output[0][1]=map.get(this.cards[0].getFace());
                         output[0][2]=map.get(this.cards[0].getSuit());
                    }
               }
               
               
               ///// that card
               
               Set<String> Set_that = new HashSet<String>();
               for(int i = 0 ; i < that.cards.length; i ++){
                    Set_that.add(that.cards[i].getFace());
               }
               if(Set_that.size() == 2){           //  fullhouse:5
                    output[1][0]=5;
                    int count=0;
                    for(int i = 0 ; i < that.cards.length-1; i++){
                         if(map.get(that.cards[i].getFace()) ==map.get(that.cards[i+1].getFace())){
                              count++;
                              if(count==2){
                                   output[1][1]=map.get(that.cards[i-1].getFace());
                                   output[1][2]=map.get(that.cards[i-1].getSuit());
                              }
                              else count=0;
                         }
                    }
               }
               else if(Set_that.size()==3){       /// two pair :2
                    output[1][0]=2;
                    for(int i = 0 ; i < that.cards.length-1; i++){
                        if(map.get(that.cards[i].getFace()) ==map.get(that.cards[i+1].getFace())){
                                   output[1][1]=map.get(that.cards[i].getFace());
                                   output[1][2]=map.get(that.cards[i].getSuit());
                                   break;
                        }
                    }
               }
               else if(Set_that.size()==4){       /// one pair :1
                    output[0][0]=1;
                    for(int i = 0 ; i < that.cards.length-1; i++){
                        if(map.get(this.cards[i].getFace()) ==map.get(that.cards[i+1].getFace())){
                                   output[0][1]=map.get(that.cards[i].getFace());
                                   output[0][2]=map.get(that.cards[i].getSuit());
                                   break;
                        }
                    }
               }
               else if(Set_that.size() == 5){
                    int count_flush=0;
                    int count_straight=0;
                    int count_last4 = 0;
                    for(int i = 0 ; i < that.cards.length-1; i++){
                         if(map.get(that.cards[i].getFace()) - 1 ==map.get(that.cards[i+1].getFace())){
                              count_straight++;
                              if(count_straight==4){                            // straight
                                   output[1][1]=map.get(that.cards[0].getFace());
                                   output[1][2]=map.get(that.cards[0].getSuit());
                                   output[1][0]=3;
                              }
                         }
                         if(map.get(this.cards[i].getSuit()) ==map.get(this.cards[i+1].getSuit())){
                              count_last4++;
                              if(count_last4==3 & map.get(this.cards[0].getFace())==14 ){                            // fullhouse
                                   output[1][1]=map.get(this.cards[0].getFace());
                                   output[1][2]=map.get(this.cards[0].getSuit());
                                   output[1][0]=3;
                              }
                         }
                         if(map.get(that.cards[i].getSuit()) ==map.get(that.cards[i+1].getSuit())){
                              count_flush++;
                              if(count_flush==4){                            // fullhouse
                                   output[1][1]=map.get(that.cards[0].getFace());
                                   output[1][2]=map.get(that.cards[i].getSuit());
                                   output[1][0]=4;
                              }
                         }
                    }
                    if(output[1][0]==1){           //  one card :0
                         output[1][1]=map.get(that.cards[0].getFace());
                         output[1][2]=map.get(that.cards[0].getSuit());
                    }
               }
               if(output[0][0] > output[1][0]) return +1;
               if(output[0][0] < output[1][0]) return -1;
               if(output[0][1] == 4 & output[1][1] == 4){
                    if(output[0][2] > output[1][2]) return +1;
                    if(output[0][2] < output[1][2]) return -1;
               }
               if(output[0][1] > output[1][1]) return +1;
               if(output[0][1] < output[1][1]) return -1;
               if(output[0][2] > output[1][2]) return +1;
               if(output[0][2] < output[1][2]) return -1;
               return 0;              
              
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@de38ff139abb0ac46e4dfd35fc3fb147@"
"r04945021","3","0.1","104512","@cc05e970a840325d51d73bd6e0ac7d96@import java.util.Arrays;
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards=cards;
        //return;
    }

    // TODO
    public int compareTo(Hand that) {
        
           Arrays.sort(this.cards);
        Arrays.sort(that.cards);
//        System.out.println(this.name);
//
//       for (int i =0;i<5;i++){
//           System.out.println(that.cards[i].getFace());
//        System.out.println(that.cards[i].getSuit());
//       }
        int SameThisCard = 0;
        int SameThatCard = 0;
        int SameThisID=-1;
        int SameThatID=-1;
        //Arrays.sort(this.cards);
        //只要用前3個卡，掃後三個，即可知有無full house
        for (int i = 0; i < 3; i++) {
                        SameThisCard = 0;
            SameThatCard = 0;
            for (int j = i + 1; j < 5; j++) {
                
                if (this.cards[i].getFace().equals(this.cards[j].getFace())) {
                    SameThisCard++;
                    //System.out.println(this.name);
                }
                if (that.cards[i].getFace().equals(that.cards[j].getFace())) {
                    SameThatCard++;
                }
            }
            if (SameThisCard == 2) {
                SameThisID = i;
            } else if (SameThatCard == 2) {
                SameThatID = i;
            }

        }
        if (SameThisID!=-1&&SameThatID!=-1) {
                return this.cards[SameThisID].compareTo(that.cards[SameThatID]);
        }else if(SameThisID!=-1){
            return 1;}
        else if(SameThatID!=-1){

            return -1;          
        }

        //flush   
        SameThisCard = 0;
        SameThatCard = 0;
        for (int i = 0; i < 4; i++) {
            if (this.cards[i].getSuit().equals(this.cards[i + 1].getSuit())) {
                SameThisCard++;
            }
            if (that.cards[i].getSuit().equals(that.cards[i + 1].getSuit())) {
                SameThatCard++;
            }
        }
//                    System.out.println(this.name);
        //System.out.println(SameThatCard);

        if (SameThisCard == 4 && SameThatCard == 4) {
            return this.cards[4].compareTo(that.cards[4]);
        } else if (SameThisCard == 4) {
            return 1;
        } else if (SameThatCard == 4) {
            return -1;
        }
        
    //Straight
        SameThisCard = 0;
        SameThatCard = 0;

        for (int i = 0; i < 4; i++) {
            if(i==3 && this.cards[i].getFace().equals(""5"") && this.cards[i+1].getFace().equals(""A""))
             {
                SameThisCard++;
            } else if (this.cards[i].getFace().equals(""10"") && this.cards[i + 1].getFace().equals(""J"")) {
                SameThisCard++;
            } else if (this.cards[i].getFace().equals(""J"") && this.cards[i + 1].getFace().equals(""Q"")) {
                SameThisCard++;
            } else if (this.cards[i].getFace().equals(""Q"") && this.cards[i + 1].getFace().equals(""K"")) {
                SameThisCard++;}
            else if(this.cards[i].getFace().equals(""K"") && this.cards[i + 1].getFace().equals(""A"")){
                SameThisCard++;
            } else if (!this.cards[i].getFace().matches(""A|J|Q|K"") && !this.cards[i + 1].getFace().matches(""A|J|Q|K"")) {
                if (Integer.parseInt(this.cards[i].getFace()) + 1 == Integer.parseInt(this.cards[i + 1].getFace())) {
                    SameThisCard++;
                }
            }
            if (i==3 && that.cards[i].getFace().equals(""5"") && that.cards[i+1].getFace().equals(""A"")) {
                SameThatCard++;
               
            } else if (that.cards[i].getFace().equals(""10"") && that.cards[i + 1].getFace().equals(""J"")) {
                SameThatCard++;
              
   
            } else if (that.cards[i].getFace().equals(""J"") && that.cards[i + 1].getFace().equals(""Q"")) {
                SameThatCard++;
              
            } else if (that.cards[i].getFace().equals(""Q"") && that.cards[i + 1].getFace().equals(""K"")) {
                SameThatCard++;
                
            } else if (that.cards[i].getFace().equals(""K"") && that.cards[i + 1].getFace().equals(""A"")) {
                SameThatCard++;
                
            } else if (!that.cards[i].getFace().matches(""A|J|Q|K"") && !that.cards[i + 1].getFace().matches(""A|J|Q|K"")) {
                if (Integer.parseInt(that.cards[i].getFace()) + 1 == Integer.parseInt(that.cards[i + 1].getFace())) {
                    SameThatCard++;
                    
                }
            }
        }
        if (SameThisCard == 4 || SameThatCard ==4) {
            
            if (SameThisCard == 4 && SameThatCard == 4) {
                if (this.cards[4].getFace().equals(""A"") && that.cards[4].getFace().equals(""A"") && that.cards[0].getFace().equals(""2"") && this.cards[0].getFace().equals(""2"")) {

                    return this.cards[4].compareTo(that.cards[4]);
                } else if (this.cards[4].getFace().equals(""A"") && this.cards[0].getFace().equals(""2"")) {
                    return -1;
                } else if (that.cards[4].getFace().equals(""A"") && that.cards[0].getFace().equals(""2"")) {
                          
                    return 1;
                } else if (this.cards[4].getFace().equals(""A"") && that.cards[4].getFace().equals(""A"") && that.cards[0].getFace().equals(""10"") && this.cards[0].getFace().equals(""10"")){
                    return this.cards[4].compareTo(that.cards[4]);
                }else if (this.cards[4].getFace().equals(""A"") && this.cards[0].getFace().equals(""10"")){
                          
                    return 1;
                }else if (that.cards[4].getFace().equals(""A"") && that.cards[0].getFace().equals(""10"")) {
                    return -1;               
                }else {
                    return this.cards[4].compareTo(that.cards[4]);
                }
                }
                else if (SameThisCard==4){
                      
                 return 1;}
             else if(SameThatCard==4){
                
                 return -1;} 
                }
            
             
                      
            
        
        //System.out.println(SameThisCard);
        // complete this function so the Player can be sorted according to the cards he/she has.
        //2-pair
        SameThisCard = 0;
        SameThatCard = 0;
        SameThisID=-1;
        SameThatID=-1;
        int PairThis=0;
        int PairThat=0;
        for (int i = 0; i < 4; i++) {
                        SameThisCard = 0;
            SameThatCard = 0;
            for (int j = i + 1; j < 5; j++) {
                
                if (this.cards[i].getFace().equals(this.cards[j].getFace())) {
                    SameThisCard++;
                    //System.out.println(this.name);
                }
                if (that.cards[i].getFace().equals(that.cards[j].getFace())) {
                    SameThatCard++;
                }
            }
            if (SameThisCard == 1) {
                PairThis++;
                SameThisID = i;
            }
            if (SameThatCard == 1) {
                PairThat++;
                SameThatID = i;
            }

        }
        if (PairThis==2 && PairThat==2) {
                return this.cards[SameThisID].compareTo(that.cards[SameThatID]);
        }else if(PairThis==2){
            return 1;
        }
        else if(PairThat==2)
            return -1;
               
        //1-Pair
        SameThisCard = 0;
        SameThatCard = 0;
        SameThisID=-1;
        SameThatID=-1;
        for (int i = 0; i < 4; i++) {
                        SameThisCard = 0;
            SameThatCard = 0;
            for (int j = i + 1; j < 5; j++) {
                
                if (this.cards[i].getFace().equals(this.cards[j].getFace())) {
                    SameThisCard++;
                    //System.out.println(this.name);
                }
                if (that.cards[i].getFace().equals(that.cards[j].getFace())) {
                    SameThatCard++;
                }
            }
            if (SameThisCard == 1) {
                SameThisID = i;
            }
            if (SameThatCard == 1) {
                SameThatID = i;
            }
        }
      
        if (SameThisID != -1 && SameThatID != -1) {
            //System.out.println(""Y"");
            return this.cards[SameThisID].compareTo(that.cards[SameThatID]);
        } else if (SameThisID != -1) {
            return 1;
        } else if (SameThatID != -1) {
            return -1;
        }

        
        
        //High Card
        return this.cards[4].compareTo(that.cards[4]);
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@cc05e970a840325d51d73bd6e0ac7d96@"
"r03525008","3","0.0966666666666667","105568","@a345bed16912988eb06edb4dfdad8bd4@import java.util.Arrays;
import java.util.Collections;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards=cards;
    }

    // TODO
    public int compareTo(Hand that) {
        int x=get_cardsvalue(this.cards);
        int y=get_cardsvalue(that.cards);
        if(x>y) return 1;
        else if(x<y)return -1;
        else return this.cards[0].compareTo(that.cards[0]);

    }
    private int get_cardsvalue(Card[] cards){
        Arrays.sort(cards, Collections.reverseOrder());
/*        for(int i=0;i<5;i++)
            System.out.println(cards[i].toString());*/
        if(check_fullhouse(cards)) return 6;
        else if(check_flush(cards)) return 5;
        else if(check_straight(cards)) return 4;
        else if(check_2pair(cards)) return 3;
        else if(check_1pair(cards)) return 2;
        else return 1;
    }
    private boolean check_fullhouse(Card[] cards){
        if(cards[0].getFace().equals(cards[1].getFace())&cards[1].getFace().equals(cards[2].getFace())&cards[3].getFace().equals(cards[4].getFace())){
            return true;
        }else if(cards[2].getFace().equals(cards[3].getFace())&cards[3].getFace().equals(cards[4].getFace())&cards[0].getFace().equals(cards[1].getFace())){
            Card temp=cards[0];
            cards[0]=cards[2];
            cards[2]=temp;
            return true;
        }
        else return false;
    }
    private boolean check_flush(Card[] cards){
        if(cards[0].getSuit().equals(cards[1].getSuit())&cards[1].getSuit().equals(cards[2].getSuit())&cards[2].getSuit().equals(cards[3].getSuit())&
                cards[3].getSuit().equals(cards[4].getSuit())){
            return true;
        }
        else
            return false;
    }
    private boolean check_straight(Card[] cards){
        int[] c=new int[5];
        for(int i=0;i<5;i++){
            if(cards[i].getFace().equals(""A"")){c[i] =14;}
            else if(cards[i].getFace().equals(""K"")){c[i] = 13;}
            else if(cards[i].getFace().equals(""Q"")){c[i] = 12;}
            else if(cards[i].getFace().equals(""J"")){c[i] = 11;}
            else {c[i] = Integer.parseInt(cards[i].getFace());}
        }
        if(c[0]-c[1]==1&c[1]-c[2]==1&c[2]-c[3]==1&c[3]-c[4]==1){
            return true;
        }else if(c[0]==14&c[1]==5&c[2]==4&c[3]==3&c[4]==2){
            Card temp=cards[0];
            cards[0]=cards[1];
            cards[1]=temp;
            return true;
        }else return false;
    }
    private boolean check_2pair(Card[] cards){
        if(cards[0].getFace().equals(cards[1].getFace())&cards[2].getFace().equals(cards[3].getFace())){
            return true;
        }else if(cards[0].getFace().equals(cards[1].getFace())&cards[3].getFace().equals(cards[4].getFace())){
            return true;
        }else if(cards[1].getFace().equals(cards[2].getFace())&cards[3].getFace().equals(cards[4].getFace())){
            Card temp=cards[0];
            cards[0]=cards[1];
            cards[1]=temp;
            return true;
        }else return false;
    }
    private boolean check_1pair(Card[] cards){
        if(cards[0].getFace().equals(cards[1].getFace())){
            return true;
        }else if(cards[1].getFace().equals(cards[2].getFace())){
            Card temp=cards[0];
            cards[0]=cards[1];
            cards[1]=temp;
            return true;
        }else if(cards[2].getFace().equals(cards[3].getFace())){
            Card temp=cards[0];
            cards[0]=cards[2];
            cards[2]=temp;
            return true;
        }else if(cards[3].getFace().equals(cards[4].getFace())){
            Card temp=cards[0];
            cards[0]=cards[3];
            cards[3]=temp;
            return true;
        }else return false;
    }
      // Do not modified this function
    public Card[] getCards() { return this.cards; }
    public String toString(){
        return cards[0].getSuit()+""_""+cards[0].getFace()+"",""+cards[1].getSuit()+""_""+cards[1].getFace()+"",""+
                cards[2].getSuit()+""_""+cards[2].getFace()+"",""+cards[3].getSuit()+""_""+cards[3].getFace()+"",""+
                cards[4].getSuit()+""_""+cards[4].getFace();
    }
}

@a345bed16912988eb06edb4dfdad8bd4@"
"b03611033","3","0.09","102128","@7bd6d76d855391acb372337ecbddfc66@
import java.util.Arrays;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards=cards;
   
    }

    // TODO
    public int compareTo(Hand that) {
        if (this.fullhouse(this.cards) > that.fullhouse(that.cards)) {
            return 1;
        } else if (this.fullhouse(this.cards) < that.fullhouse(that.cards)) {
            return -1;
        } else {
        }
        if (this.flush(this.cards) > that.flush(that.cards)) {
            return 1;
        } else if (this.flush(this.cards) < that.flush(that.cards)) {
            return -1;
        } else {
        }

        if (this.straight(this.cards) > that.straight(that.cards)) {
            return 1;
        } else if (this.straight(this.cards) < that.straight(that.cards)) {
            return -1;
        } else {
        }
        if (this.pair(this.cards) > that.pair(that.cards)) {
            return 1;
        } else if (this.pair(this.cards) < that.pair(that.cards)) {
            return -1;
        }

        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
    
    private static int cardface(String face) {
        int facenum;

        if (face.equals(""A"")) {
            facenum = 14;
        } else if (face.equals(""J"")) {
            facenum = 11;
        } else if (face.equals(""Q"")) {
            facenum = 12;
        } else if (face.equals(""K"")) {
            facenum = 13;
        } else {
            facenum = Integer.parseInt(face);
        }

        return facenum;
    }

    private static int cardsuit(String suit) {
        int suitnum;

        if (suit.equals(""Spades"")) {
            suitnum = 4;
        } else if (suit.equals(""Hearts"")) {
            suitnum = 3;
        } else if (suit.equals(""Diamonds"")) {
            suitnum = 2;
        } else {
            suitnum = 1;
        }

        return suitnum;
    }

    private int fullhouse(Card[] card) {
        int cardnum[] = new int[5];

        for (int i = 0; i < 5; i++) {
            cardnum[i] = cardface(card[i].getFace());
        }
        Arrays.sort(cardnum);

        if ((cardnum[0] == cardnum[1]) && (cardnum[3] == cardnum[4])) {
            if ((cardnum[2] == cardnum[1]) || (cardnum[2] == cardnum[3])) {
                return cardnum[2];
            }
        }
        return 0;
    }

    private int flush(Card[] card) {
        int suitnum = cardsuit(card[0].getSuit());
        int cardnum = cardface(card[0].getFace());
        int i = 1;

        while (cardsuit(card[i].getSuit()) == suitnum) {
            if (cardnum < cardface(card[i].getFace())) {
                cardnum = cardface(card[i].getFace());
            }
            i++;
            if (i == 5) {
                return (cardnum * 10 + suitnum);
            }
        }

        return 0;
    }

    private int straight(Card[] card) {
        int cardnum[] = new int[5];

        for (int i = 0; i < 5; i++) {
            cardnum[i] = cardface(card[i].getFace());
        }
        Arrays.sort(cardnum);

        int i = 1;
        while (cardnum[i] == cardnum[i - 1] + 1) {
            //StdOut.println(cardnum[i]);
            if (i == 4) {
                return (cardsuit(card[4].getSuit()) + cardnum[4] * 10);
            }
            i++;
        }

        return 0;
    }

    private int pair(Card[] card) {
        int cardnum[] = new int[5];

        for (int i = 0; i < 5; i++) {
            cardnum[i] = cardface(card[i].getFace());
        }
        Arrays.sort(cardnum);

        if (cardnum[0] == cardnum[1]) {
            if (cardnum[2] == cardnum[3]) {
                return (cardsuit(card[3].getFace()) + cardnum[3] * 10 + 1000);
            } else if (cardnum[3] == cardnum[4]) {
                return (cardsuit(card[4].getFace()) + cardnum[4] * 10 + 1000);
            } else {
                return (cardsuit(card[1].getFace()) + cardnum[1] * 10);
            }
        } else if (cardnum[1] == cardnum[2]) {
            if (cardnum[3] == cardnum[4]) {
                return (cardsuit(card[4].getSuit()) + cardnum[4] * 10 + 1000);
            } else {
                return (cardsuit(card[1].getFace()) + cardnum[1] * 10);
            }
        }
        if (cardnum[2] == cardnum[3]) {
            return (cardsuit(card[3].getSuit()) + cardnum[3] * 10);
        }
        if (cardnum[3] == cardnum[4]) {
            return (cardsuit(card[4].getSuit()) + cardnum[4] * 10);
        }

        return 0;
    }

}

@7bd6d76d855391acb372337ecbddfc66@"
"b03611011","0","0.46","105248","@41d138a65e183bfd49392645af1fdee1@
import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    private Card[] cards = new Card[5];
    private String name;

    // DO NOT MODIFY THIS
    public Hand(String name) {
        this.name = name;
    }

    // DO NOT MODIFY THIS
    public String getName() {
        return this.name;
    }

    // DO NOT MODIFY THIS
    public void setCards(Card[] cards) {
        this.cards = cards;
    }

    // TODO 
    public int compareTo(Hand that) {
        // complete this function so the Player can be sorted according to the cards he/she has.
        //for full house
        int s1 = 0, h1 = 0, d1 = 0, c1 = 0;
        int[] o = new int[15];
        int mount = 0;
        int count = 0;
        int count1 = 0;
        int[] A = new int[5];
        for (int j = 0; j < 5; j++) {
            switch (that.cards[j].getFace()) {//葫蘆算
                case ""A"":
                    A[j] = 14;
                    break;
                case ""J"":
                    A[j] = 11;
                    break;
                case ""Q"":
                    A[j] = 12;
                    break;
                case ""K"":
                    A[j] = 13;
                    break;
                default:
                    A[j] = Integer.parseInt(that.cards[j].getFace());
            }
        }
        for (int i = 0; i < 5; i++) {
            int min = i;
            for (int j = i + 1; j < 5; j++) {
                if (A[j] < A[i]) {
                    min = j;
                    int mem = A[i];
                    A[i] = A[min];
                    A[min] = mem;
                }
            }
        }
        int[] B = new int[5];
        for (int j = 0; j < 5; j++) {
            switch (this.cards[j].getFace()) {//葫蘆算
                case ""A"":
                    B[j] = 14;
                    break;
                case ""J"":
                    B[j] = 11;
                    break;
                case ""Q"":
                    B[j] = 12;
                    break;
                case ""K"":
                    B[j] = 13;
                    break;
                default:
                    B[j] = Integer.parseInt(this.cards[j].getFace());
            }
        }
        for (int i = 0; i < 5; i++) {
            int min = i;
            for (int j = i + 1; j < 5; j++) {
                if (B[j] < B[i]) {
                    min = j;
                    int mem = B[i];
                    B[i] = B[min];
                    B[min] = mem;
                }
            }
        }
        for (int j = 0; j <= 14; j++) {//歸零
            o[j] = 0;
        }
        for (int j = 0; j < 5; j++) {
            switch (that.cards[j].getFace()) {//葫蘆算
                case ""A"":
                    o[14]++;
                    break;
                case ""J"":
                    o[11]++;
                    break;
                case ""Q"":
                    o[12]++;
                    break;
                case ""K"":
                    o[13]++;
                    break;
                default:
                    o[Integer.parseInt(that.cards[j].getFace())]++;
            }
        }
        for (int j = 0; j <= 14; j++) {
            if (o[j] == 3) {
                count = count + 10000;
                mount = j;
            }
            if (o[j] == 2) {
                count = count + 100;
            }
            if (o[j] == 4) {
                count = count + 200+j;
            }
            if (count == 10100) {
                count = count + mount;
            }
        }

        mount = 0;
        for (int j = 0; j <= 14; j++) {//歸零
            o[j] = 0;
        }
        for (int j = 0; j < 5; j++) {
            switch (this.cards[j].getFace()) {//葫蘆算
                case ""A"":
                    o[14]++;
                    break;
                case ""J"":
                    o[11]++;
                    break;
                case ""Q"":
                    o[12]++;
                    break;
                case ""K"":
                    o[13]++;
                    break;
                default:
                    o[Integer.parseInt(this.cards[j].getFace())]++;
            }
        }
        for (int j = 0; j <= 14; j++) {
            if (o[j] == 3) {
                count1 = count1 + 10000;
                mount = j;
            }
            if (o[j] == 2) {
                count1 = count1 + 100;
            }
            if (o[j] == 4) {
                count1 = count1 + 200+j;
            }
            if (count1 == 10100) {
                count1 = count1 + mount;
            }
        }

        for (int i = 0; i < 5; i++) { //桐花
            switch (that.cards[i].getSuit()) {
                case ""Spades"":
                    s1++;
                    if (s1 == 5) {
                        count = count + 1000;
                    }
                    break;
                case ""Hearts"":
                    h1++;
                    if (h1 == 5) {
                        count = count + 1000;
                    }
                    break;
                case ""Diamonds"":
                    d1++;
                    if (d1 == 5) {
                        count = count + 1000;
                    }
                    break;
                case ""Clubs"":
                    c1++;
                    if (c1 == 5) {
                        count = count + 1000;
                    }
                    break;
            }
                        if(i==4){count=count+A[4];}
        }
        s1 = 0;
        h1 = 0;
        d1 = 0;
        c1 = 0;
        for (int i = 0; i < 5; i++) {
            switch (this.cards[i].getSuit()) {
                case ""Spades"":
                    s1++;
                    if (s1 >= 5) {
                        count1 = count1 + 1000;
                    }
                    break;
                case ""Hearts"":
                    h1++;
                    if (h1 >= 5) {
                        count1 = count1 + 1000;
                    }
                    break;
                case ""Diamonds"":
                    d1++;
                    if (d1 >= 5) {
                        count1 = count1 + 1000;
                    }
                    break;
                case ""Clubs"":
                    c1++;
                    if (c1 >= 5) {
                        count1 = count1 + 1000;
                    }
                    break;
            }
                        if(i==4){count1=count1+B[4];}
        }
        //順子
//                mount=0;
        for (int k = 0; k < 4; k++) {
            if (A[k + 1] == A[k] + 1) {
                mount++;
            }
        }
        if (mount == 4) {
            count = count + 500 + A[4];
        }
        mount = 0;
        for (int k = 0; k < 4; k++) {
            if (B[k + 1] == B[k] + 1) {
                mount++;
            }

        }
        if (mount == 4) {
            count1 = count1 + 500 + B[4];
        }
        if(count<100&&count1<100){
        count=A[4]*10;
        count1=B[4]*10;
        }
//            System.out.println(A[0]+"" ""+A[1]+"" ""+A[2]+"" ""+A[3]+"" ""+A[4]);
//System.out.println(B[0]+"" ""+B[1]+"" ""+B[2]+"" ""+B[3]+"" ""+B[4]);
//            System.out.println(count+"" ""+count1);
//        System.out.println(that.name + that.cards[0].getFace());
//        System.out.println(this.name + this.cards[0].getFace());//回傳出來 且下一個的輸入
        if (count > count1) {
            this.cards = that.cards;
            this.name = that.name;
//            System.out.println(this.name + this.cards[0].getFace()+""  ""+count+"" ""+count1);//回傳出來 且下一個的輸入
            return 1;
        }
                if (count < count1) {
//            System.out.println(this.name + this.cards[0].getFace()+""  ""+count+"" ""+count1);//回傳出來 且下一個的輸入
            return -1;
        }

        return 0;
    }
}

@41d138a65e183bfd49392645af1fdee1@"
"b03611011","0","0.48","107504","@41d138a65e183bfd49392645af1fdee1@
import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    private Card[] cards = new Card[5];
    private String name;

    // DO NOT MODIFY THIS
    public Hand(String name) {
        this.name = name;
    }

    // DO NOT MODIFY THIS
    public String getName() {
        return this.name;
    }

    // DO NOT MODIFY THIS
    public void setCards(Card[] cards) {
        this.cards = cards;
    }

    // TODO 
    public int compareTo(Hand that) {
        // complete this function so the Player can be sorted according to the cards he/she has.
        //for full house
        int s1 = 0, h1 = 0, d1 = 0, c1 = 0;
        int[] o = new int[15];
        int mount = 0;
        int count = 0;
        int count1 = 0;
        int[] A = new int[5];
        for (int j = 0; j < 5; j++) {
            switch (that.cards[j].getFace()) {//葫蘆算
                case ""A"":
                    A[j] = 14;
                    break;
                case ""J"":
                    A[j] = 11;
                    break;
                case ""Q"":
                    A[j] = 12;
                    break;
                case ""K"":
                    A[j] = 13;
                    break;
                default:
                    A[j] = Integer.parseInt(that.cards[j].getFace());
            }
        }
        for (int i = 0; i < 5; i++) {
            int min = i;
            for (int j = i + 1; j < 5; j++) {
                if (A[j] < A[i]) {
                    min = j;
                    int mem = A[i];
                    A[i] = A[min];
                    A[min] = mem;
                }
            }
        }
        int[] B = new int[5];
        for (int j = 0; j < 5; j++) {
            switch (this.cards[j].getFace()) {//葫蘆算
                case ""A"":
                    B[j] = 14;
                    break;
                case ""J"":
                    B[j] = 11;
                    break;
                case ""Q"":
                    B[j] = 12;
                    break;
                case ""K"":
                    B[j] = 13;
                    break;
                default:
                    B[j] = Integer.parseInt(this.cards[j].getFace());
            }
        }
        for (int i = 0; i < 5; i++) {
            int min = i;
            for (int j = i + 1; j < 5; j++) {
                if (B[j] < B[i]) {
                    min = j;
                    int mem = B[i];
                    B[i] = B[min];
                    B[min] = mem;
                }
            }
        }
        for (int j = 0; j <= 14; j++) {//歸零
            o[j] = 0;
        }
        for (int j = 0; j < 5; j++) {
            switch (that.cards[j].getFace()) {//葫蘆算
                case ""A"":
                    o[14]++;
                    break;
                case ""J"":
                    o[11]++;
                    break;
                case ""Q"":
                    o[12]++;
                    break;
                case ""K"":
                    o[13]++;
                    break;
                default:
                    o[Integer.parseInt(that.cards[j].getFace())]++;
            }
        }
        for (int j = 0; j <= 14; j++) {
            if (o[j] == 3) {
                count = count + 10000;
                mount = j;
            }
            if (o[j] == 2) {
                count = count + 100;
            }
            if (o[j] == 4) {
                count = count + 200+j;
            }
            if (count == 10100) {
                count = count + mount;
            }
        }

        mount = 0;
        for (int j = 0; j <= 14; j++) {//歸零
            o[j] = 0;
        }
        for (int j = 0; j < 5; j++) {
            switch (this.cards[j].getFace()) {//葫蘆算
                case ""A"":
                    o[14]++;
                    break;
                case ""J"":
                    o[11]++;
                    break;
                case ""Q"":
                    o[12]++;
                    break;
                case ""K"":
                    o[13]++;
                    break;
                default:
                    o[Integer.parseInt(this.cards[j].getFace())]++;
            }
        }
        for (int j = 0; j <= 14; j++) {
            if (o[j] == 3) {
                count1 = count1 + 10000;
                mount = j;
            }
            if (o[j] == 2) {
                count1 = count1 + 100;
            }
            if (o[j] == 4) {
                count1 = count1 + 200+j;
            }
            if (count1 == 10100) {
                count1 = count1 + mount;
            }
        }

        for (int i = 0; i < 5; i++) { //桐花
            switch (that.cards[i].getSuit()) {
                case ""Spades"":
                    s1++;
                    if (s1 == 5) {
                        count = count + 1000;
                    }
                    break;
                case ""Hearts"":
                    h1++;
                    if (h1 == 5) {
                        count = count + 1000;
                    }
                    break;
                case ""Diamonds"":
                    d1++;
                    if (d1 == 5) {
                        count = count + 1000;
                    }
                    break;
                case ""Clubs"":
                    c1++;
                    if (c1 == 5) {
                        count = count + 1000;
                    }
                    break;
            }
                        if(i==4){count=count+A[4];}
        }
        s1 = 0;
        h1 = 0;
        d1 = 0;
        c1 = 0;
        for (int i = 0; i < 5; i++) {
            switch (this.cards[i].getSuit()) {
                case ""Spades"":
                    s1++;
                    if (s1 >= 5) {
                        count1 = count1 + 1000;
                    }
                    break;
                case ""Hearts"":
                    h1++;
                    if (h1 >= 5) {
                        count1 = count1 + 1000;
                    }
                    break;
                case ""Diamonds"":
                    d1++;
                    if (d1 >= 5) {
                        count1 = count1 + 1000;
                    }
                    break;
                case ""Clubs"":
                    c1++;
                    if (c1 >= 5) {
                        count1 = count1 + 1000;
                    }
                    break;
            }
                        if(i==4){count1=count1+B[4];}
        }
        //順子
//                mount=0;
        for (int k = 0; k < 4; k++) {
            if (A[k + 1] == A[k] + 1) {
                mount++;
            }
        }
        if (mount == 4) {
            count = count + 500 + A[4];
        }
        mount = 0;
        for (int k = 0; k < 4; k++) {
            if (B[k + 1] == B[k] + 1) {
                mount++;
            }

        }
        if (mount == 4) {
            count1 = count1 + 500 + B[4];
        }
        if(count<100&&count1<100){
        count=A[4]*10;
        count1=B[4]*10;
        }
//            System.out.println(A[0]+"" ""+A[1]+"" ""+A[2]+"" ""+A[3]+"" ""+A[4]);
//System.out.println(B[0]+"" ""+B[1]+"" ""+B[2]+"" ""+B[3]+"" ""+B[4]);
//            System.out.println(count+"" ""+count1);
//        System.out.println(that.name + that.cards[0].getFace());
//        System.out.println(this.name + this.cards[0].getFace());//回傳出來 且下一個的輸入
        if (count > count1) {
            this.cards = that.cards;
            this.name = that.name;
//            System.out.println(this.name + this.cards[0].getFace()+""  ""+count+"" ""+count1);//回傳出來 且下一個的輸入
            return 1;
        }
                if (count < count1) {
//            System.out.println(this.name + this.cards[0].getFace()+""  ""+count+"" ""+count1);//回傳出來 且下一個的輸入
            return -1;
        }

        return 0;
    }
}

@41d138a65e183bfd49392645af1fdee1@"
"b03611011","0","0.48","107504","@0269a91713a898a1323aca36264c0434@
import java.util.Comparator;



public class Hand implements Comparable<Hand> {

    private Hand[] cards = new Hand[5];
    private String name;

    // DO NOT MODIFY THIS
    public Hand(String name) {
        this.name = name;
    }

    // DO NOT MODIFY THIS
    public String getName() {
        return this.name;
    }

    // DO NOT MODIFY THIS
    public void setCards(Hand[] cards) {
        this.cards = cards;
    }

    // TODO 
    @Override
    public int compareTo(Hand that) {
        // complete this function so the Player can be sorted according to the cards he/she has.
        //for full house
        int s1 = 0, h1 = 0, d1 = 0, c1 = 0;
        int[] o = new int[15];
        int mount = 0;
        int count = 0;
        int count1 = 0;
        int[] A = new int[5];
        for (int j = 0; j < 5; j++) {
            switch (that.cards[j].getFace()) {//葫蘆算
                case ""A"":
                    A[j] = 14;
                    break;
                case ""J"":
                    A[j] = 11;
                    break;
                case ""Q"":
                    A[j] = 12;
                    break;
                case ""K"":
                    A[j] = 13;
                    break;
                default:
                    A[j] = Integer.parseInt(that.cards[j].getFace());
            }
        }
        for (int i = 0; i < 5; i++) {
            int min = i;
            for (int j = i + 1; j < 5; j++) {
                if (A[j] < A[i]) {
                    min = j;
                    int mem = A[i];
                    A[i] = A[min];
                    A[min] = mem;
                }
            }
        }
        int[] B = new int[5];
        for (int j = 0; j < 5; j++) {
            switch (this.cards[j].getFace()) {//葫蘆算
                case ""A"":
                    B[j] = 14;
                    break;
                case ""J"":
                    B[j] = 11;
                    break;
                case ""Q"":
                    B[j] = 12;
                    break;
                case ""K"":
                    B[j] = 13;
                    break;
                default:
                    B[j] = Integer.parseInt(this.cards[j].getFace());
            }
        }
        for (int i = 0; i < 5; i++) {
            int min = i;
            for (int j = i + 1; j < 5; j++) {
                if (B[j] < B[i]) {
                    min = j;
                    int mem = B[i];
                    B[i] = B[min];
                    B[min] = mem;
                }
            }
        }
        for (int j = 0; j <= 14; j++) {//歸零
            o[j] = 0;
        }
        for (int j = 0; j < 5; j++) {
            switch (that.cards[j].getFace()) {//葫蘆算
                case ""A"":
                    o[14]++;
                    break;
                case ""J"":
                    o[11]++;
                    break;
                case ""Q"":
                    o[12]++;
                    break;
                case ""K"":
                    o[13]++;
                    break;
                default:
                    o[Integer.parseInt(that.cards[j].getFace())]++;
            }
        }
        for (int j = 0; j <= 14; j++) {
            if (o[j] == 3) {
                count = count + 10000;
                mount = j;
            }
            if (o[j] == 2) {
                count = count + 100;
            }
            if (o[j] == 4) {
                count = count + 200+j;
            }
            if (count == 10100) {
                count = count + mount;
            }
        }

        mount = 0;
        for (int j = 0; j <= 14; j++) {//歸零
            o[j] = 0;
        }
        for (int j = 0; j < 5; j++) {
            switch (this.cards[j].getFace()) {//葫蘆算
                case ""A"":
                    o[14]++;
                    break;
                case ""J"":
                    o[11]++;
                    break;
                case ""Q"":
                    o[12]++;
                    break;
                case ""K"":
                    o[13]++;
                    break;
                default:
                    o[Integer.parseInt(this.cards[j].getFace())]++;
            }
        }
        for (int j = 0; j <= 14; j++) {
            if (o[j] == 3) {
                count1 = count1 + 10000;
                mount = j;
            }
            if (o[j] == 2) {
                count1 = count1 + 100;
            }
            if (o[j] == 4) {
                count1 = count1 + 200+j;
            }
            if (count1 == 10100) {
                count1 = count1 + mount;
            }
        }

        for (int i = 0; i < 5; i++) { //桐花
            switch (that.cards[i].getSuit()) {
                case ""Spades"":
                    s1++;
                    if (s1 == 5) {
                        count = count + 1000;
                    }
                    break;
                case ""Hearts"":
                    h1++;
                    if (h1 == 5) {
                        count = count + 1000;
                    }
                    break;
                case ""Diamonds"":
                    d1++;
                    if (d1 == 5) {
                        count = count + 1000;
                    }
                    break;
                case ""Clubs"":
                    c1++;
                    if (c1 == 5) {
                        count = count + 1000;
                    }
                    break;
            }
                        if(i==4){count=count+A[4];}
        }
        s1 = 0;
        h1 = 0;
        d1 = 0;
        c1 = 0;
        for (int i = 0; i < 5; i++) {
            switch (this.cards[i].getSuit()) {
                case ""Spades"":
                    s1++;
                    if (s1 >= 5) {
                        count1 = count1 + 1000;
                    }
                    break;
                case ""Hearts"":
                    h1++;
                    if (h1 >= 5) {
                        count1 = count1 + 1000;
                    }
                    break;
                case ""Diamonds"":
                    d1++;
                    if (d1 >= 5) {
                        count1 = count1 + 1000;
                    }
                    break;
                case ""Clubs"":
                    c1++;
                    if (c1 >= 5) {
                        count1 = count1 + 1000;
                    }
                    break;
            }
                        if(i==4){count1=count1+B[4];}
        }
        //順子
//                mount=0;
        for (int k = 0; k < 4; k++) {
            if (A[k + 1] == A[k] + 1) {
                mount++;
            }
        }
        if (mount == 4) {
            count = count + 500 + A[4];
        }
        mount = 0;
        for (int k = 0; k < 4; k++) {
            if (B[k + 1] == B[k] + 1) {
                mount++;
            }

        }
        if (mount == 4) {
            count1 = count1 + 500 + B[4];
        }
        if(count<100&&count1<100){
        count=A[4]*10;
        count1=B[4]*10;
        }
//            System.out.println(A[0]+"" ""+A[1]+"" ""+A[2]+"" ""+A[3]+"" ""+A[4]);
//System.out.println(B[0]+"" ""+B[1]+"" ""+B[2]+"" ""+B[3]+"" ""+B[4]);
//            System.out.println(count+"" ""+count1);
//        System.out.println(that.name + that.cards[0].getFace());
//        System.out.println(this.name + this.cards[0].getFace());//回傳出來 且下一個的輸入
        if (count > count1) {
            this.cards = that.cards;
            this.name = that.name;
//            System.out.println(this.name + this.cards[0].getFace()+""  ""+count+"" ""+count1);//回傳出來 且下一個的輸入
            return 1;
        }
                if (count < count1) {
//            System.out.println(this.name + this.cards[0].getFace()+""  ""+count+"" ""+count1);//回傳出來 且下一個的輸入
            return -1;
        }
        return 0;
    }
    
    


    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
    public static final Comparator<Hand> SUIT_ORDER = new SuitOrder();
    public static final Comparator<Hand> face_ORDER = new facesuitOrder();

    // DO NOT MODIFY THIS
    public Hand(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareToo(Hand that) {
        int i, o;
        switch (this.face) {
            case ""A"":
                i = 14;
                break;
            case ""J"":
                i = 11;
                break;
            case ""Q"":
                i = 12;
                break;
            case ""K"":
                i = 13;
                break;
            default:
                i = Integer.parseInt(this.face);
        }
        switch (that.face) {
            case ""A"":
                o = 14;
                break;
            case ""J"":
                o = 11;
                break;
            case ""Q"":
                o = 12;
                break;
            case ""K"":
                o = 13;
                break;
            default:
                o = Integer.parseInt(that.face);
        }
        if (i < o) {
            return -1;
        }
        if (i > o) {
            return 1;
        }
        switch (this.suit) {
            case ""Spades"":
                i = 4;
                break;
            case ""Hearts"":
                i = 3;
                break;
            case ""Diamonds"":
                i = 2;
                break;
            case ""Clubs"":
                i = 1;
                break;
            default:
                return 0;
        }
        switch (that.suit) {
            case ""Spades"":
                o = 4;
                break;
            case ""Hearts"":
                o = 3;
                break;
            case ""Diamonds"":
                o = 2;
                break;
            case ""Clubs"":
                o = 1;
                break;
            default:
                return 0;
        }
        if (i < o) {
            return -1;
        }
        if (i > o) {
            return 1;
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Hand> {

        @Override
        public int compare(Hand c1, Hand c2) {
            // complete this function so the Card can be sorted according to the suit
            int i, j;
            switch (c1.suit) {
                case ""Spades"":
                    i = 4;
                    break;
                case ""Hearts"":
                    i = 3;
                    break;
                case ""Diamonds"":
                    i = 2;
                    break;
                case ""Clubs"":
                    i = 1;
                    break;
                default:
                    return 0;
            }
            switch (c2.suit) {
                case ""Spades"":
                    j = 4;
                    break;
                case ""Hearts"":
                    j = 3;
                    break;
                case ""Diamonds"":
                    j = 2;
                    break;
                case ""Clubs"":
                    j = 1;
                    break;
                default:
                    return 0;
            }
            if (i < j) {
                return -1;
            }
            if (i > j) {
                return 1;
            }
            return 0;
        }
    }

    private static class facesuitOrder implements Comparator<Hand> {

        @Override
        public int compare(Hand c1, Hand c2) {
            // complete this function so the Card can be sorted according to the suit
            return c1.compareToo(c2);
        }

    }

    
    
    
}

@0269a91713a898a1323aca36264c0434@"
"r04631009","0","0.48","105808","@b8cf8389a3c7e459601cb758ea6eb832@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private final String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private final String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;

    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        int num1 = 0;
        int num2 = 0;


        switch (this.face) {
            case ""A"":
                num1 = 14;
                break;
            case ""K"":
                num1 = 13;
                break;
            case ""Q"":
                num1 = 12;
                break;
            case ""J"":
                num1 = 11;
                break;
            default:
                num1 = Integer.parseInt(this.face);
                break;
        }
        switch (that.face) {
            case ""A"":
                num2 = 14;
                break;
            case ""K"":
                num2 = 13;
                break;
            case ""Q"":
                num2 = 12;
                break;
            case ""J"":
                num2 = 11;
                break;
            default:
                num2 = Integer.parseInt(that.face);
                break;
        }

        if (num1 > num2) {
            return 1;
        }
        if (num1 < num2) {
            return -1;
        }
       
        return 0;

    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int temp1 = 0;
            int temp2 = 0;
            switch (c1.suit) {
                case ""Spades"":
                    temp1 = 4;
                    break;
                case ""Hearts"":
                    temp1 = 3;
                    break;
                case ""Diamonds"":
                    temp1 = 2;
                    break;
                case ""Clubs"":
                    temp1 = 1;
                    break;
            }
            switch (c2.suit) {
                case ""Spades"":
                    temp2 = 4;
                    break;
                case ""Hearts"":
                    temp2 = 3;
                    break;
                case ""Diamonds"":
                    temp2 = 2;
                    break;
                case ""Clubs"":
                    temp2 = 1;
                    break;
            }

            // complete this function so the Card can be sorted according to the suit
            if (temp1 > temp2) {
                return 1;
            }
            if (temp1 < temp2) {
                return -1;
            }
            return 0;
        }

    }

}

@b8cf8389a3c7e459601cb758ea6eb832@"
"b03611011","0","0.28","105536","@7063fe6cfd7ea8332733545fb3cbcede@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards=cards;
        return;
    }

    // TODO
    public int compareTo(Hand that) {
         int s1 = 0, h1 = 0, d1 = 0, c1 = 0;
        int[] o = new int[15];
        int mount = 0;
        int count = 0;
        int count1 = 0;
        int[] A = new int[5];
        for (int j = 0; j < 5; j++) {
            switch (that.cards[j].getFace()) {//葫蘆算
                case ""A"":
                    A[j] = 14;
                    break;
                case ""J"":
                    A[j] = 11;
                    break;
                case ""Q"":
                    A[j] = 12;
                    break;
                case ""K"":
                    A[j] = 13;
                    break;
                default:
                    A[j] = Integer.parseInt(that.cards[j].getFace());
            }
        }
        for (int i = 0; i < 5; i++) {
            int min = i;
            for (int j = i + 1; j < 5; j++) {
                if (A[j] < A[i]) {
                    min = j;
                    int mem = A[i];
                    A[i] = A[min];
                    A[min] = mem;
                }
            }
        }
        int[] B = new int[5];
        for (int j = 0; j < 5; j++) {
            switch (this.cards[j].getFace()) {//葫蘆算
                case ""A"":
                    B[j] = 14;
                    break;
                case ""J"":
                    B[j] = 11;
                    break;
                case ""Q"":
                    B[j] = 12;
                    break;
                case ""K"":
                    B[j] = 13;
                    break;
                default:
                    B[j] = Integer.parseInt(this.cards[j].getFace());
            }
        }
        for (int i = 0; i < 5; i++) {
            int min = i;
            for (int j = i + 1; j < 5; j++) {
                if (B[j] < B[i]) {
                    min = j;
                    int mem = B[i];
                    B[i] = B[min];
                    B[min] = mem;
                }
            }
        }
        for (int j = 0; j <= 14; j++) {//歸零
            o[j] = 0;
        }
        for (int j = 0; j < 5; j++) {
            switch (that.cards[j].getFace()) {//葫蘆算
                case ""A"":
                    o[14]++;
                    break;
                case ""J"":
                    o[11]++;
                    break;
                case ""Q"":
                    o[12]++;
                    break;
                case ""K"":
                    o[13]++;
                    break;
                default:
                    o[Integer.parseInt(that.cards[j].getFace())]++;
            }
        }
        for (int j = 0; j <= 14; j++) {
            if (o[j] == 3) {
                count = count + 10000;
                mount = j;
            }
            if (o[j] == 2) {
                count = count + 100;
            }
            if (o[j] == 4) {
                count = count + 200+j;
            }
            if (count == 10100) {
                count = count + mount;
            }
        }

        mount = 0;
        for (int j = 0; j <= 14; j++) {//歸零
            o[j] = 0;
        }
        for (int j = 0; j < 5; j++) {
            switch (this.cards[j].getFace()) {//葫蘆算
                case ""A"":
                    o[14]++;
                    break;
                case ""J"":
                    o[11]++;
                    break;
                case ""Q"":
                    o[12]++;
                    break;
                case ""K"":
                    o[13]++;
                    break;
                default:
                    o[Integer.parseInt(this.cards[j].getFace())]++;
            }
        }
        for (int j = 0; j <= 14; j++) {
            if (o[j] == 3) {
                count1 = count1 + 10000;
                mount = j;
            }
            if (o[j] == 2) {
                count1 = count1 + 100;
            }
            if (o[j] == 4) {
                count1 = count1 + 200+j;
            }
            if (count1 == 10100) {
                count1 = count1 + mount;
            }
        }

        for (int i = 0; i < 5; i++) { //桐花
            switch (that.cards[i].getSuit()) {
                case ""Spades"":
                    s1++;
                    if (s1 == 5) {
                        count = count + 1000;
                    }
                    break;
                case ""Hearts"":
                    h1++;
                    if (h1 == 5) {
                        count = count + 1000;
                    }
                    break;
                case ""Diamonds"":
                    d1++;
                    if (d1 == 5) {
                        count = count + 1000;
                    }
                    break;
                case ""Clubs"":
                    c1++;
                    if (c1 == 5) {
                        count = count + 1000;
                    }
                    break;
            }
                        if(i==4){count=count+A[4];}
        }
        s1 = 0;
        h1 = 0;
        d1 = 0;
        c1 = 0;
        for (int i = 0; i < 5; i++) {
            switch (this.cards[i].getSuit()) {
                case ""Spades"":
                    s1++;
                    if (s1 >= 5) {
                        count1 = count1 + 1000;
                    }
                    break;
                case ""Hearts"":
                    h1++;
                    if (h1 >= 5) {
                        count1 = count1 + 1000;
                    }
                    break;
                case ""Diamonds"":
                    d1++;
                    if (d1 >= 5) {
                        count1 = count1 + 1000;
                    }
                    break;
                case ""Clubs"":
                    c1++;
                    if (c1 >= 5) {
                        count1 = count1 + 1000;
                    }
                    break;
            }
                        if(i==4){count1=count1+B[4];}
        }
        //順子
//                mount=0;
        for (int k = 0; k < 4; k++) {
            if (A[k + 1] == A[k] + 1) {
                mount++;
            }
        }
        if (mount == 4) {
            count = count + 500 + A[4];
        }
        mount = 0;
        for (int k = 0; k < 4; k++) {
            if (B[k + 1] == B[k] + 1) {
                mount++;
            }

        }
        if (mount == 4) {
            count1 = count1 + 500 + B[4];
        }
        if(count<100&&count1<100){
        count=A[4]*10;
        count1=B[4]*10;
        }
//            System.out.println(A[0]+"" ""+A[1]+"" ""+A[2]+"" ""+A[3]+"" ""+A[4]);
//System.out.println(B[0]+"" ""+B[1]+"" ""+B[2]+"" ""+B[3]+"" ""+B[4]);
//            System.out.println(count+"" ""+count1);
//        System.out.println(that.name + that.cards[0].getFace());
//        System.out.println(this.name + this.cards[0].getFace());//回傳出來 且下一個的輸入
        if (count > count1) {
            return 1;
        }
        if (count < count1) {
            return -1;
        }
//            System.out.println(this.name + this.cards[0].getFace()+""  ""+count+"" ""+count1);//回傳出來 且下一個的輸入
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@7063fe6cfd7ea8332733545fb3cbcede@"
"b03611011","3","0.0933333333333333","105536","@240c646dc90f39cbb98345701aed041d@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards=cards;
        return;
    }

    // TODO
    public int compareTo(Hand that) {
         int s1 = 0, h1 = 0, d1 = 0, c1 = 0;
        int[] o = new int[15];
        int mount = 0;
        int count = 0;
        int count1 = 0;
        int[] A = new int[5];
        for (int j = 0; j < 5; j++) {
            switch (that.cards[j].getFace()) {//葫蘆算
                case ""A"":
                    A[j] = 14;
                    break;
                case ""J"":
                    A[j] = 11;
                    break;
                case ""Q"":
                    A[j] = 12;
                    break;
                case ""K"":
                    A[j] = 13;
                    break;
                default:
                    A[j] = Integer.parseInt(that.cards[j].getFace());
            }
        }
        for (int i = 0; i < 5; i++) {
            int min = i;
            for (int j = i + 1; j < 5; j++) {
                if (A[j] < A[i]) {
                    min = j;
                    int mem = A[i];
                    A[i] = A[min];
                    A[min] = mem;
                }
            }
        }
        int[] B = new int[5];
        for (int j = 0; j < 5; j++) {
            switch (this.cards[j].getFace()) {//葫蘆算
                case ""A"":
                    B[j] = 14;
                    break;
                case ""J"":
                    B[j] = 11;
                    break;
                case ""Q"":
                    B[j] = 12;
                    break;
                case ""K"":
                    B[j] = 13;
                    break;
                default:
                    B[j] = Integer.parseInt(this.cards[j].getFace());
            }
        }
        for (int i = 0; i < 5; i++) {
            int min = i;
            for (int j = i + 1; j < 5; j++) {
                if (B[j] < B[i]) {
                    min = j;
                    int mem = B[i];
                    B[i] = B[min];
                    B[min] = mem;
                }
            }
        }
        for (int j = 0; j <= 14; j++) {//歸零
            o[j] = 0;
        }
        for (int j = 0; j < 5; j++) {
            switch (that.cards[j].getFace()) {//葫蘆算
                case ""A"":
                    o[14]++;
                    break;
                case ""J"":
                    o[11]++;
                    break;
                case ""Q"":
                    o[12]++;
                    break;
                case ""K"":
                    o[13]++;
                    break;
                default:
                    o[Integer.parseInt(that.cards[j].getFace())]++;
            }
        }
        for (int j = 0; j <= 14; j++) {
            if (o[j] == 3) {
                count = count + 10000;
                mount = j;
            }
            if (o[j] == 2) {
                count = count + 100;
            }
            if (o[j] == 4) {
                count = count + 200+j;
            }
            if (count == 10100) {
                count = count + mount;
            }
        }

        mount = 0;
        for (int j = 0; j <= 14; j++) {//歸零
            o[j] = 0;
        }
        for (int j = 0; j < 5; j++) {
            switch (this.cards[j].getFace()) {//葫蘆算
                case ""A"":
                    o[14]++;
                    break;
                case ""J"":
                    o[11]++;
                    break;
                case ""Q"":
                    o[12]++;
                    break;
                case ""K"":
                    o[13]++;
                    break;
                default:
                    o[Integer.parseInt(this.cards[j].getFace())]++;
            }
        }
        for (int j = 0; j <= 14; j++) {
            if (o[j] == 3) {
                count1 = count1 + 10000;
                mount = j;
            }
            if (o[j] == 2) {
                count1 = count1 + 100;
            }
            if (o[j] == 4) {
                count1 = count1 + 200+j;
            }
            if (count1 == 10100) {
                count1 = count1 + mount;
            }
        }

        for (int i = 0; i < 5; i++) { //桐花
            switch (that.cards[i].getSuit()) {
                case ""Spades"":
                    s1++;
                    if (s1 == 5) {
                        count = count + 1000;
                    }
                    break;
                case ""Hearts"":
                    h1++;
                    if (h1 == 5) {
                        count = count + 1000;
                    }
                    break;
                case ""Diamonds"":
                    d1++;
                    if (d1 == 5) {
                        count = count + 1000;
                    }
                    break;
                case ""Clubs"":
                    c1++;
                    if (c1 == 5) {
                        count = count + 1000;
                    }
                    break;
            }
                        if(i==4){count=count+A[4];}
        }
        s1 = 0;
        h1 = 0;
        d1 = 0;
        c1 = 0;
        for (int i = 0; i < 5; i++) {
            switch (this.cards[i].getSuit()) {
                case ""Spades"":
                    s1++;
                    if (s1 >= 5) {
                        count1 = count1 + 1000;
                    }
                    break;
                case ""Hearts"":
                    h1++;
                    if (h1 >= 5) {
                        count1 = count1 + 1000;
                    }
                    break;
                case ""Diamonds"":
                    d1++;
                    if (d1 >= 5) {
                        count1 = count1 + 1000;
                    }
                    break;
                case ""Clubs"":
                    c1++;
                    if (c1 >= 5) {
                        count1 = count1 + 1000;
                    }
                    break;
            }
                        if(i==4){count1=count1+B[4];}
        }
        //順子
//                mount=0;
        for (int k = 0; k < 4; k++) {
            if (A[k + 1] == A[k] + 1) {
                mount++;
            }
        }
        if (mount == 4) {
            count = count + 500 + A[4];
        }
        mount = 0;
        for (int k = 0; k < 4; k++) {
            if (B[k + 1] == B[k] + 1) {
                mount++;
            }

        }
        if (mount == 4) {
            count1 = count1 + 500 + B[4];
        }
        if(count<100&&count1<100){
        count=A[4]*10;
        count1=B[4]*10;
        }
//            System.out.println(A[0]+"" ""+A[1]+"" ""+A[2]+"" ""+A[3]+"" ""+A[4]);
//System.out.println(B[0]+"" ""+B[1]+"" ""+B[2]+"" ""+B[3]+"" ""+B[4]);
//            System.out.println(count+"" ""+count1);
//        System.out.println(that.name + that.cards[0].getFace());
//        System.out.println(this.name + this.cards[0].getFace());//回傳出來 且下一個的輸入
        if (count > count1) {
            return -1;
        }
        if (count < count1) {
            return 1;
        }
//            System.out.println(this.name + this.cards[0].getFace()+""  ""+count+"" ""+count1);//回傳出來 且下一個的輸入
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@240c646dc90f39cbb98345701aed041d@"
"b02611016","0","0.094","107504","@a3eead928e035a0ceb52684bacf6c056@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Comparator;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
      this.cards = cards;
        return;
    }

    // TODO
    public int compareTo(Hand that) {
        int [] this_face=new int[15];
        int [] that_face=new int[15];
        int this_round1=1;
        int that_round1=1;
        int this_round2=0;
        int that_round2=0;
        int this_round3=0;
        int that_round3=0;
        for(int i=0;i<5;i++)
        {
            if(this.cards[i].getFace().equals(""A"")) { this_face[14]=this_face[14]+1;} 
            else if(this.cards[i].getFace().equals(""K"")){this_face[13]=this_face[13]+1;}
            else if(this.cards[i].getFace().equals(""Q"")){this_face[12]=this_face[12]+1;}
            else if(this.cards[i].getFace().equals(""J"")){this_face[11]=this_face[11]+1;}
            else{this_face[Integer.parseInt(this.cards[i].getFace())]=this_face[Integer.parseInt(this.cards[i].getFace())]+1;}
            
        }
     //   for(int i=2;i<15;i++)
      //  {System.out.println(this_face[i]);}
        for(int i=0;i<5;i++)
        {
            if(that.cards[i].getFace().equals(""A"")) { that_face[14]=that_face[14]+1;} 
            else if(that.cards[i].getFace().equals(""K"")){that_face[13]=that_face[13]+1;}
            else if(that.cards[i].getFace().equals(""Q"")){that_face[12]=that_face[12]+1;}
            else if(that.cards[i].getFace().equals(""J"")){that_face[11]=that_face[11]+1;}
            else{that_face[Integer.parseInt(that.cards[i].getFace())]=that_face[Integer.parseInt(that.cards[i].getFace())]+1;}
        }
   //      for(int i=2;i<15;i++)
    //    {System.out.println(that_face[i]);}
  search: for(int j=2;j<15;j++)
        { if(this_face[j]>=2){
            if(this_face[j]==3){for(int k=j+1;k<15;k++)
              {if(this_face[k]==2){this_round1=6;this_round2=j; break search;}
            
              }
             this_round1=2;this_round2=j;
            }
            else{for(int k=j+1;k<15;k++)
              {if(this_face[k]==3){this_round1=6;this_round2=k; break search;}
               else if(this_face[k]==2){this_round1=3;this_round2=k; break search;}
               
              }
             this_round1=2;this_round2=j;
            }
          }
        }
  
 search1: for(int j=2;j<15;j++)
        { if(that_face[j]>=2){
            if(that_face[j]==3){for(int k=j+1;k<15;k++)
              {if(that_face[k]==2){that_round1=6;that_round2=j; break search1;}
              
              }
            that_round1=2;that_round2=j;
            }
            else{for(int k=j+1;k<15;k++)
              {if(that_face[k]==3){that_round1=6;that_round2=k; break search1;}
               else if(that_face[k]==2){that_round1=3;that_round2=k; break search1;}
               
              }
            that_round1=2;that_round2=j;
            }
          }
        }
 search2:for(int j=2;j<11;j++)
        { if(j==2&&this_face[j]==1)
          {if(this_face[14]==1){if(this_face[3]==1&&this_face[4]==1&&this_face[5]==1){this_round1=4;this_round2=5;break search2;}}
           if(this_face[3]==1&&this_face[4]==1&&this_face[5]==1&&this_face[6]==1){this_round1=4;this_round2=6;break search2;}
          }
         else if(j!=2&&this_face[j]==1){if(this_face[j+1]==1&&this_face[j+2]==1&&this_face[j+3]==1&&this_face[j+4]==1){this_round1=4;this_round2=j+4;break search2;}}
        }
 search3:for(int j=2;j<11;j++)
        { if(j==2&&that_face[j]==1)
          {if(that_face[14]==1){if(that_face[3]==1&&that_face[4]==1&&that_face[5]==1){that_round1=4;that_round2=5;break search3;}}
           if(that_face[3]==1&&that_face[4]==1&&that_face[5]==1&&that_face[6]==1){that_round1=4;this_round2=6;break search3;}
          }
         else if(j!=2&&that_face[j]==1){if(that_face[j+1]==1&&that_face[j+2]==1&&that_face[j+3]==1&&that_face[j+4]==1){that_round1=4;that_round2=j+4;break search3;}}
        }
 search4:
         if(this.cards[0].getSuit().equals(this.cards[1].getSuit())&&this.cards[0].getSuit().equals(this.cards[2].getSuit())&&this.cards[0].getSuit().equals(this.cards[3].getSuit())&&this.cards[0].getSuit().equals(this.cards[4].getSuit()))
         {this_round1=5;}
         if(that.cards[0].getSuit().equals(that.cards[1].getSuit())&&that.cards[0].getSuit().equals(that.cards[2].getSuit())&&that.cards[0].getSuit().equals(that.cards[3].getSuit())&&that.cards[0].getSuit().equals(that.cards[4].getSuit()))
         {that_round1=5;}
        // complete this function so the Player can be sorted according to the cards he/she has.
     //if(this.cards[1].getFace().equals(""9"")) {return 1;} 
     //    System.out.println(this_round1);
    //     System.out.println(that_round1);
         
        if(this_round1>that_round1){return 1;}
        if(this_round1<that_round1){return -1;}
        if(this_round1==that_round1&&this_round1==6)
          {if(this_round2>that_round2){return 1;}
           if(this_round2<that_round2){return -1;}
          }
        if(this_round1==that_round1&&this_round1==4)
          {if(this_round2>that_round2){return 1;}
           if(this_round2<that_round2){return -1;}
           if(this_round2==that_round2)
             {if(this_round2==14)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""A""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""A""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                       }
                    }
                }
              else if(this_round2==13)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""K""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""K""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                       }
                    }
                }
              else if(this_round2==12)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""Q""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""Q""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                       }
                    }
                }
              else if(this_round2==11)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""J""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""J""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                       }
                    }
                }
              else
                {for(int i=0;i<5;i++)
                    {if(Integer.parseInt(this.cards[i].getFace())==this_round2)
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                       }
                     if(Integer.parseInt(that.cards[i].getFace())==this_round2)
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                       }
                    }
                }
             if(this_round3>that_round3){return 1;}
             if(this_round3<that_round3){return -1;}
             }
          } 
        if(this_round1==that_round1&&this_round1==5)
          {if(this.cards[0].getFace().equals(""Spades"")) { this_round2=4;} 
           else if(this.cards[0].getSuit().equals(""Hearts"")){this_round2=3;}
           else if(this.cards[0].getSuit().equals(""Diamonds"")){this_round2=2;}
           else if(this.cards[0].getSuit().equals(""Clubs"")){this_round2=1;}
           if(that.cards[0].getFace().equals(""Spades"")) { that_round2=4;} 
           if(that.cards[0].getSuit().equals(""Hearts"")){that_round2=3;}
           if(that.cards[0].getSuit().equals(""Diamonds"")){that_round2=2;}
           if(that.cards[0].getSuit().equals(""Clubs"")){that_round2=1;}
           if(this_round2>that_round2){return 1;}
           if(this_round2<that_round2){return -1;}
           if(this_round2==that_round2)
             {for(int k=14;k>1;k--)
                 {if(this_face[k]==1){this_round3=k;break;}
                 }
              for(int k=14;k>1;k--)
                 {if(that_face[k]==1){that_round3=k;break;}
                 }
              if(this_round3>that_round3){return 1;}
              if(this_round3<that_round3){return -1;}
             } 
          }
        if(this_round1==that_round1&&this_round1==3)
          {if(this_round2>that_round2){return 1;}
           if(this_round2<that_round2){return -1;}
           if(this_round2==that_round2)
             {if(this_round2==14)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""A""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""A""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
            else if(this_round2==13)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""K""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""K""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
              else if(this_round2==12)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""Q""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""Q""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
              else if(this_round2==11)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""J""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""J""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
              else
                {for(int i=0;i<5;i++)
                    {if(Integer.parseInt(this.cards[i].getFace())==this_round2)
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(Integer.parseInt(that.cards[i].getFace())==this_round2)
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
             if(this_round3>that_round3){return 1;}
             if(this_round3<that_round3){return -1;}
             }
          }
        if(this_round1==that_round1&&this_round1==2)    
          {if(this_round2>that_round2){return 1;}
           if(this_round2<that_round2){return -1;}
           if(this_round2==that_round2)
             {if(this_round2==14)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""A""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""A""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
            else if(this_round2==13)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""K""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""K""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
              else if(this_round2==12)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""Q""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""Q""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
              else if(this_round2==11)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""J""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""J""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
              else
                {for(int i=0;i<5;i++)
                    {if(Integer.parseInt(this.cards[i].getFace())==this_round2)
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(Integer.parseInt(that.cards[i].getFace())==this_round2)
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
             if(this_round3>that_round3){return 1;}
             if(this_round3<that_round3){return -1;}
             }
          }
        if(this_round1==that_round1&&this_round1==1)    
          {for(int k=14;k>1;k--)
                 {if(this_face[k]==1){this_round2=k;break;}
                 }
              for(int k=14;k>1;k--)
                 {if(that_face[k]==1){that_round2=k;break;}
                 }
               if(this_round2>that_round2){return 1;}
               if(this_round2<that_round2){return -1;}
               if(this_round2==that_round2)
                 {if(this_round2==14)
                    {for(int i=0;i<5;i++)
                        {if(this.cards[i].getFace().equals(""A""))
                           {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                            else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                            else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                            else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                           }
                         if(that.cards[i].getFace().equals(""A""))
                            {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                             else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                             else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                             else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                            }
                        }
                    }
                 else if(this_round2==13)
                     {for(int i=0;i<5;i++)
                         {if(this.cards[i].getFace().equals(""K""))
                            {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                             else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                             else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                             else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                            }
                          if(that.cards[i].getFace().equals(""K""))
                            {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                             else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                             else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                             else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                            }
                        }
                     }
              else if(this_round2==12)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""Q""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""Q""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                       }
                    }
                }
              else if(this_round2==11)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""J""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""J""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                       }
                    }
                }
              else
                {for(int i=0;i<5;i++)
                    {if(Integer.parseInt(this.cards[i].getFace())==this_round2)
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                       }
                     if(Integer.parseInt(that.cards[i].getFace())==this_round2)
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                       }
                    }
                }
             if(this_round3>that_round3){return 1;}
             if(this_round3<that_round3){return -1;}
                 }
           
           }
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
    
    public static void main(String[] args) throws Exception{

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
        
            int idx = 0;
            int playerCount = Integer.parseInt(br.readLine());
            Player[] playerArray = new Player[playerCount];

            for(String in = br.readLine(); in != null; in = br.readLine()) {
                String name = in;
                Player player = new Player(name);
                playerArray[idx++] = player;

                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                player.setCards(cardsArray);
            }

            Arrays.sort(playerArray);
            System.out.println(playerArray[playerCount - 1].getName());
        }
    }
}

@a3eead928e035a0ceb52684bacf6c056@"
"b02611016","3","0.0966666666666667","105536","@a3bfd4a274b2db347e833ae01939ade7@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Comparator;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
      this.cards = cards;
        return;
    }

    // TODO
    public int compareTo(Hand that) {
        int [] this_face=new int[15];
        int [] that_face=new int[15];
        int this_round1=1;
        int that_round1=1;
        int this_round2=0;
        int that_round2=0;
        int this_round3=0;
        int that_round3=0;
        for(int i=0;i<5;i++)
        {
            if(this.cards[i].getFace().equals(""A"")) { this_face[14]=this_face[14]+1;} 
            else if(this.cards[i].getFace().equals(""K"")){this_face[13]=this_face[13]+1;}
            else if(this.cards[i].getFace().equals(""Q"")){this_face[12]=this_face[12]+1;}
            else if(this.cards[i].getFace().equals(""J"")){this_face[11]=this_face[11]+1;}
            else{this_face[Integer.parseInt(this.cards[i].getFace())]=this_face[Integer.parseInt(this.cards[i].getFace())]+1;}
            
        }
     //   for(int i=2;i<15;i++)
      //  {System.out.println(this_face[i]);}
        for(int i=0;i<5;i++)
        {
            if(that.cards[i].getFace().equals(""A"")) { that_face[14]=that_face[14]+1;} 
            else if(that.cards[i].getFace().equals(""K"")){that_face[13]=that_face[13]+1;}
            else if(that.cards[i].getFace().equals(""Q"")){that_face[12]=that_face[12]+1;}
            else if(that.cards[i].getFace().equals(""J"")){that_face[11]=that_face[11]+1;}
            else{that_face[Integer.parseInt(that.cards[i].getFace())]=that_face[Integer.parseInt(that.cards[i].getFace())]+1;}
        }
   //      for(int i=2;i<15;i++)
    //    {System.out.println(that_face[i]);}
  search: for(int j=2;j<15;j++)
        { if(this_face[j]>=2){
            if(this_face[j]==3){for(int k=j+1;k<15;k++)
              {if(this_face[k]==2){this_round1=6;this_round2=j; break search;}
            
              }
             this_round1=2;this_round2=j;
            }
            else{for(int k=j+1;k<15;k++)
              {if(this_face[k]==3){this_round1=6;this_round2=k; break search;}
               else if(this_face[k]==2){this_round1=3;this_round2=k; break search;}
               
              }
             this_round1=2;this_round2=j;
            }
          }
        }
  
 search1: for(int j=2;j<15;j++)
        { if(that_face[j]>=2){
            if(that_face[j]==3){for(int k=j+1;k<15;k++)
              {if(that_face[k]==2){that_round1=6;that_round2=j; break search1;}
              
              }
            that_round1=2;that_round2=j;
            }
            else{for(int k=j+1;k<15;k++)
              {if(that_face[k]==3){that_round1=6;that_round2=k; break search1;}
               else if(that_face[k]==2){that_round1=3;that_round2=k; break search1;}
               
              }
            that_round1=2;that_round2=j;
            }
          }
        }
 search2:for(int j=2;j<11;j++)
        { if(j==2&&this_face[j]==1)
          {if(this_face[14]==1){if(this_face[3]==1&&this_face[4]==1&&this_face[5]==1){this_round1=4;this_round2=5;break search2;}}
           if(this_face[3]==1&&this_face[4]==1&&this_face[5]==1&&this_face[6]==1){this_round1=4;this_round2=6;break search2;}
          }
         else if(j!=2&&this_face[j]==1){if(this_face[j+1]==1&&this_face[j+2]==1&&this_face[j+3]==1&&this_face[j+4]==1){this_round1=4;this_round2=j+4;break search2;}}
        }
 search3:for(int j=2;j<11;j++)
        { if(j==2&&that_face[j]==1)
          {if(that_face[14]==1){if(that_face[3]==1&&that_face[4]==1&&that_face[5]==1){that_round1=4;that_round2=5;break search3;}}
           if(that_face[3]==1&&that_face[4]==1&&that_face[5]==1&&that_face[6]==1){that_round1=4;this_round2=6;break search3;}
          }
         else if(j!=2&&that_face[j]==1){if(that_face[j+1]==1&&that_face[j+2]==1&&that_face[j+3]==1&&that_face[j+4]==1){that_round1=4;that_round2=j+4;break search3;}}
        }
 search4:
         if(this.cards[0].getSuit().equals(this.cards[1].getSuit())&&this.cards[0].getSuit().equals(this.cards[2].getSuit())&&this.cards[0].getSuit().equals(this.cards[3].getSuit())&&this.cards[0].getSuit().equals(this.cards[4].getSuit()))
         {this_round1=5;}
         if(that.cards[0].getSuit().equals(that.cards[1].getSuit())&&that.cards[0].getSuit().equals(that.cards[2].getSuit())&&that.cards[0].getSuit().equals(that.cards[3].getSuit())&&that.cards[0].getSuit().equals(that.cards[4].getSuit()))
         {that_round1=5;}
        // complete this function so the Player can be sorted according to the cards he/she has.
     //if(this.cards[1].getFace().equals(""9"")) {return 1;} 
     //    System.out.println(this_round1);
    //     System.out.println(that_round1);
         
        if(this_round1>that_round1){return 1;}
        if(this_round1<that_round1){return -1;}
        if(this_round1==that_round1&&this_round1==6)
          {if(this_round2>that_round2){return 1;}
           if(this_round2<that_round2){return -1;}
          }
        if(this_round1==that_round1&&this_round1==4)
          {if(this_round2>that_round2){return 1;}
           if(this_round2<that_round2){return -1;}
           if(this_round2==that_round2)
             {if(this_round2==14)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""A""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""A""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                       }
                    }
                }
              else if(this_round2==13)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""K""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""K""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                       }
                    }
                }
              else if(this_round2==12)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""Q""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""Q""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                       }
                    }
                }
              else if(this_round2==11)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""J""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""J""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                       }
                    }
                }
              else
                {for(int i=0;i<5;i++)
                    {if(Integer.parseInt(this.cards[i].getFace())==this_round2)
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                       }
                     if(Integer.parseInt(that.cards[i].getFace())==this_round2)
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                       }
                    }
                }
             if(this_round3>that_round3){return 1;}
             if(this_round3<that_round3){return -1;}
             }
          } 
        if(this_round1==that_round1&&this_round1==5)
          {if(this.cards[0].getFace().equals(""Spades"")) { this_round2=4;} 
           else if(this.cards[0].getSuit().equals(""Hearts"")){this_round2=3;}
           else if(this.cards[0].getSuit().equals(""Diamonds"")){this_round2=2;}
           else if(this.cards[0].getSuit().equals(""Clubs"")){this_round2=1;}
           if(that.cards[0].getFace().equals(""Spades"")) { that_round2=4;} 
           if(that.cards[0].getSuit().equals(""Hearts"")){that_round2=3;}
           if(that.cards[0].getSuit().equals(""Diamonds"")){that_round2=2;}
           if(that.cards[0].getSuit().equals(""Clubs"")){that_round2=1;}
           if(this_round2>that_round2){return 1;}
           if(this_round2<that_round2){return -1;}
           if(this_round2==that_round2)
             {for(int k=14;k>1;k--)
                 {if(this_face[k]==1){this_round3=k;break;}
                 }
              for(int k=14;k>1;k--)
                 {if(that_face[k]==1){that_round3=k;break;}
                 }
              if(this_round3>that_round3){return 1;}
              if(this_round3<that_round3){return -1;}
             } 
          }
        if(this_round1==that_round1&&this_round1==3)
          {if(this_round2>that_round2){return 1;}
           if(this_round2<that_round2){return -1;}
           if(this_round2==that_round2)
             {if(this_round2==14)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""A""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""A""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
            else if(this_round2==13)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""K""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""K""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
              else if(this_round2==12)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""Q""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""Q""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
              else if(this_round2==11)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""J""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""J""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
              else
                {for(int i=0;i<5;i++)
                    {if(Integer.parseInt(this.cards[i].getFace())==this_round2)
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(Integer.parseInt(that.cards[i].getFace())==this_round2)
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
             if(this_round3>that_round3){return 1;}
             if(this_round3<that_round3){return -1;}
             }
          }
        if(this_round1==that_round1&&this_round1==2)    
          {if(this_round2>that_round2){return 1;}
           if(this_round2<that_round2){return -1;}
           if(this_round2==that_round2)
             {if(this_round2==14)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""A""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""A""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
            else if(this_round2==13)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""K""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""K""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
              else if(this_round2==12)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""Q""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""Q""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
              else if(this_round2==11)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""J""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""J""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
              else
                {for(int i=0;i<5;i++)
                    {if(Integer.parseInt(this.cards[i].getFace())==this_round2)
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(Integer.parseInt(that.cards[i].getFace())==this_round2)
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
             if(this_round3>that_round3){return 1;}
             if(this_round3<that_round3){return -1;}
             }
          }
        if(this_round1==that_round1&&this_round1==1)    
          {for(int k=14;k>1;k--)
                 {if(this_face[k]==1){this_round2=k;break;}
                 }
              for(int k=14;k>1;k--)
                 {if(that_face[k]==1){that_round2=k;break;}
                 }
               if(this_round2>that_round2){return 1;}
               if(this_round2<that_round2){return -1;}
               if(this_round2==that_round2)
                 {if(this_round2==14)
                    {for(int i=0;i<5;i++)
                        {if(this.cards[i].getFace().equals(""A""))
                           {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                            else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                            else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                            else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                           }
                         if(that.cards[i].getFace().equals(""A""))
                            {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                             else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                             else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                             else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                            }
                        }
                    }
                 else if(this_round2==13)
                     {for(int i=0;i<5;i++)
                         {if(this.cards[i].getFace().equals(""K""))
                            {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                             else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                             else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                             else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                            }
                          if(that.cards[i].getFace().equals(""K""))
                            {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                             else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                             else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                             else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                            }
                        }
                     }
              else if(this_round2==12)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""Q""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""Q""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                       }
                    }
                }
              else if(this_round2==11)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""J""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""J""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                       }
                    }
                }
              else
                {for(int i=0;i<5;i++)
                    {if(Integer.parseInt(this.cards[i].getFace())==this_round2)
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                       }
                     if(Integer.parseInt(that.cards[i].getFace())==this_round2)
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                       }
                    }
                }
             if(this_round3>that_round3){return 1;}
             if(this_round3<that_round3){return -1;}
                 }
           
           }
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
    
    public static void main(String[] args) throws Exception{

      /*  try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
        
            int idx = 0;
            int playerCount = Integer.parseInt(br.readLine());
            Player[] playerArray = new Player[playerCount];

            for(String in = br.readLine(); in != null; in = br.readLine()) {
                String name = in;
                Player player = new Player(name);
                playerArray[idx++] = player;

                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                player.setCards(cardsArray);
            }

            Arrays.sort(playerArray);
            System.out.println(playerArray[playerCount - 1].getName());
        }*/
    }
}

@a3bfd4a274b2db347e833ae01939ade7@"
"b02611023","3","0.1","106032","@a04a590ab44438dd4162e9447a322b0b@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards;

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards) {
        this.cards = cards;
    }

    // TODO
    public int compareTo(Hand that) {
        int face1 = 0;
        int suit1 = 0;
        int face2 = 0;
        int suit2 = 0;
        int countsecmax1 = 0;
        int countsecmax2 = 0;
        int counts1 = 0;
        int counts2 = 0;
        Card max1 = this.cards[0];
        Card max2 = that.cards[0];
        Card min1 = this.cards[0];
        Card min2 = that.cards[0];
        Card secmax1 = this.cards[0];
        Card secmax2 = that.cards[0];
        Card pairmax1 = null;
        Card pairmax2 = null;
        Stack<Card> pair1 = new Stack<Card>();
        Stack<Card> pair2 = new Stack<Card>();
        Stack<Integer> this1 = new Stack<Integer>();
        Stack<Integer> that1 = new Stack<Integer>();
        QuickUnionUF uf1 = new QuickUnionUF(5);
        QuickUnionUF uf2 = new QuickUnionUF(5);

        for (int i = 0; i < 5; i++) {
            for (int j = i + 1; j < 5; j++) {
                if (this.cards[i].getFace().equals(this.cards[j].getFace())) {
                    uf1.union(j, i);
                }
                if (that.cards[i].getFace().equals(that.cards[j].getFace())) {
                    uf2.union(j, i);
                }
            }
        }

        for (int i = 0; i < 5; i++) {
            suit1 = 0;
            suit2 = 0;
            for (int j = 0; j < 5; j++) {
                if (max1.compareTo(this.cards[j]) < 0) {
                    max1 = this.cards[j];
                }
                if (max2.compareTo(that.cards[j]) < 0) {
                    max2 = that.cards[j];
                }
                if (min1.compareTo(this.cards[j]) > 0) {
                    min1 = this.cards[j];
                }
                if (min2.compareTo(that.cards[j]) > 0) {
                    min2 = that.cards[j];
                }
                if (this.cards[i].compareTo(this.cards[j]) > 0) {
                    countsecmax1++;
                }
                if (that.cards[i].compareTo(that.cards[j]) > 0) {
                    countsecmax2++;
                }
                if (uf1.find(j) == i) {
                    face1++;
                    if (face1 >= 2) {
                        if (pairmax1 == null) {
                            pairmax1 = this.cards[i];
                        }
                        if (pairmax1.compareTo(this.cards[j]) < 0) {
                            pairmax1 = this.cards[j];
                        }
                    }
                }
                if (uf2.find(j) == i) {
                    face2++;
                    if (face2 >= 2) {
                        if (pairmax2 == null) {
                            pairmax2 = that.cards[i];
                        }
                        if (pairmax2.compareTo(that.cards[j]) < 0) {
                            pairmax2 = that.cards[j];
                        }
                    }
                }
                if (this.cards[i].getSuit().equals(this.cards[j].getSuit())) {
                    suit1++;
                }
                if (that.cards[i].getSuit().equals(that.cards[j].getSuit())) {
                    suit2++;
                }

            }
            if (face1 == 2) {
                if (!pair1.isEmpty()) {
                    if (counts1 < 1) {
                        Card temp = pair1.pop();
                        if (pairmax1.compareTo(temp) > 0) {
                            pair1.push(pairmax1);
                        } else {
                            pair1.push(temp);
                        }
                    }
                } else {
                    pair1.push(pairmax1);
                }
                pairmax1 = null;
            }
            if (face1 >= 3) {
                if (!pair1.isEmpty()) {
                    pair1.pop();
                    pair1.push(pairmax1);
                } else {
                    pair1.push(pairmax1);
                }
                pairmax1 = null;
                counts1++;
            }

            if (face2 == 2) {
                if (!pair2.isEmpty()) {
                    if (counts2 < 1) {
                        Card temp = pair2.pop();
                        if (pairmax2.compareTo(temp) > 0) {
                            pair2.push(pairmax2);
                        } else {
                            pair2.push(temp);
                        }
                    }
                } else {
                    pair2.push(pairmax2);
                }
                pairmax2 = null;
            }
            if (face2 >= 3) {
                if (!pair2.isEmpty()) {
                    pair2.pop();
                    pair2.push(pairmax2);
                } else {
                    pair2.push(pairmax2);
                }
                pairmax2 = null;
                counts2++;
            }

            if (countsecmax1 == 4) {
                secmax1 = this.cards[i];
            }
            if (countsecmax2 == 4) {
                secmax2 = that.cards[i];
            }
            this1.push(face1);
            that1.push(face2);
            face1 = 0;
            face2 = 0;
            countsecmax1 = 0;
            countsecmax2 = 0;
        }

        int count1 = 0;
        int count2 = 0;
        int thismax = 0;
        int thismin = 0;
        int thatmax = 0;
        int thatmin = 0;

        while (!this1.isEmpty()) {
            int a = this1.pop();
            if (a >= 2) {
                count1 = count1 + a;
            }
        }

        if (count1 == 5) {
            count1 = 5;
            max1 = pair1.pop();
        } else if (count1 == 4) {
            count1 = 2;
            max1 = pair1.pop();
        } else if (count1 == 3) {
            count1 = 1;
            max1 = pair1.pop();
        } else if (count1 == 2) {
            count1 = 1;
            max1 = pair1.pop();
        } else if (suit1 == 5) {
            count1 = 4;
        } else {
            if (max1.getFace().equals(""A"") && secmax1.getFace().equals(""5"")) {
                max1 = secmax1;
                thismax = 5;
                thismin = 1;
            } else if (max1.getFace().equals(""A"") && min1.getFace().equals(""10"")) {
                thismax = 14;
                thismin = 10;
            } else if (max1.getFace().equals(""J"")) {
                thismax = 11;
                thismin = Integer.parseInt(min1.getFace());
            } else if (max1.getFace().equals(""Q"")) {
                thismax = 12;
                thismin = Integer.parseInt(min1.getFace());
            } else if (max1.getFace().equals(""K"")) {
                thismax = 13;
                thismin = Integer.parseInt(min1.getFace());
            } else if (max1.getFace().equals(""A"")) {
                thismax = 0;
                thismin = 0;
            } else {
                thismax = Integer.parseInt(max1.getFace());
                thismin = Integer.parseInt(min1.getFace());
            }
            if ((thismax - thismin) == 4) {
                count1 = 3;
            } else {
                count1 = 0;
            }
        }

//        System.out.println(max1.getFace());
//        System.out.println(max1.getSuit());
//        System.out.println(min1.getFace());
//        System.out.println(min1.getSuit());
//        System.out.println(thismax);
//        System.out.println(thismin);
//        System.out.println(count1);
        while (!that1.isEmpty()) {
            int b = that1.pop();
            if (b >= 2) {
                count2 = count2 + b;
            }
        }

        if (count2 == 5) {
            count2 = 5;
            max2 = pair2.pop();
        } else if (count2 == 4) {
            count2 = 2;
            max2 = pair2.pop();
        } else if (count2 == 3) {
            count2 = 1;
            max2 = pair2.pop();
        } else if (count2 == 2) {
            count2 = 1;
            max2 = pair2.pop();
        } else if (suit2 == 5) {
            count2 = 4;
        } else {
            if (max2.getFace().equals(""A"") && secmax2.getFace().equals(""5"")) {
                max2 = secmax2;
                thatmax = 5;
                thatmin = 1;
            } else if (max2.getFace().equals(""A"") && min2.getFace().equals(""10"")) {
                thatmax = 14;
                thatmin = 10;
            } else if (max2.getFace().equals(""J"")) {
                thatmax = 11;
                thatmin = Integer.parseInt(min2.getFace());
            } else if (max2.getFace().equals(""Q"")) {
                thatmax = 12;
                thatmin = Integer.parseInt(min2.getFace());
            } else if (max2.getFace().equals(""K"")) {
                thatmax = 13;
                thatmin = Integer.parseInt(min2.getFace());
            } else if (max2.getFace().equals(""A"")) {
                thatmax = 0;
                thatmin = 0;
            } else {
                thatmax = Integer.parseInt(max2.getFace());
                thatmin = Integer.parseInt(min2.getFace());
            }
            if ((thatmax - thatmin) == 4) {
                count2 = 3;
            } else {
                count2 = 0;
            }
        }

//        System.out.println(max2.getFace());
//        System.out.println(max2.getSuit());
//        System.out.println(thatmax);
//        System.out.println(thatmin);
//        System.out.println(count2);
        if (count1 > count2) {
            return +1;
        } else if (count1 < count2) {
            return -1;
        } else {
            if (max1.compareTo(max2) > 0) {
                return +1;
            } else {
                return -1;
            }
        }
    }

    // Do not modified this function
    public Card[] getCards() {
        return this.cards;
    }
}

@a04a590ab44438dd4162e9447a322b0b@"
"r04546014","0","0.45","105232","@fdc7517803bc10dc265b31547fa20d43@import edu.princeton.cs.algs4.MaxPQ;
import edu.princeton.cs.algs4.MinPQ;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] hand = new Hand[count];//訂出幾個人
            Card[][] card = new Card[count][];//前面格子代表每一個人，後面格子代表他的每一張牌
            //MaxPQ pq=new MaxPQ();
            MinPQ pq=new MinPQ();
            for (int i = 0; i < count; i++) {
                String[] PlayerHand = br.readLine().split("","");//讀每一個player的手牌
                card[i] = new Card[5];
                for (int j = 0; j < 5; j++) {
                    String[] sf = PlayerHand[i].split(""_"");//讀每一張排的花色和數字
                    card[i][j] = new Card(sf[1], sf[0]);
                }
                hand[i] = new Hand(card[i]);
                pq.insert(hand[i]);
                if(pq.size()>target)
                    pq.delMin();
            }
            Hand[] kk=new Hand[5];
            Card[] anser = hand[count-target].getCards();
            for(int i=0;i<pq.size();i++){
                if(i==pq.size()-1)
                    System.out.println(pq.delMin());
            }
//                kk=pq.delMin();
//            
//            for (int i = 0; i < 5; i++) {//輸出牌
//                System.out.println(anser[i].getSuit()+""_""+anser[i].getFace());
//                if(i<4)
//                    System.out.println("","");
//            }

        }
    }
}

@fdc7517803bc10dc265b31547fa20d43@"
"r04631006","0","0","0","@4c4d816d07a28e1b0630c5dcb2688abb@
import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards = new Card[5];


    // TODO, Judge System will call this constructor once for each hand

    public Hand(Card[] cards) {
        Arrays.sort (cards);
    }

    public int CardsName(Card[] cards) {
        int a = 0;
        int[] b = new int[5];
        int[] cc = new int[5];
        Arrays.sort(cards);
        for (int i = 0; i < 5; i++) {
            for (int j = i; j < 5; j++) {
                if (cards[i].getFace().equals(cards[i].getFace()) && cards[i].getFace().equals(cards[j].getFace())) {
                    cc[i] = cc[i] + 1;
                }
            }
            if (cc[i] == 3) {
                i = i + 2;
            }
            if (cc[i] == 2) {
                i = i + 1;
            }
        }
        Arrays.sort(cc);
        if (cc[4] == 3 && cc[3] == 2) {
            return 6;
        } else if (cc[4] == 2 && cc[3] == 2) {
            return 3;
        } else if (cc[4] == 2 && cc[3] == 1) {
            return 2;
        } else if (Card.SUIT_ORDER.compare(cards[4], cards[3]) == 0 && Card.SUIT_ORDER.compare(cards[4], cards[2]) == 0 && Card.SUIT_ORDER.compare(cards[4], cards[1]) == 0 && Card.SUIT_ORDER.compare(cards[4], cards[0]) == 0) {
            return 5;
        } else {
            Arrays.sort(cards);
            for (int i = 0; i < 5; i++) {
                switch (cards[i].getFace()) {
                    case ""A"":
                        b[i] = 14;
                        break;
                    case ""K"":
                        b[i] = 13;
                        break;
                    case ""Q"":
                        b[i] = 12;
                        break;
                    case ""J"":
                        b[i] = 11;
                        break;
                    default:
                        b[i] = Integer.parseInt(cards[i].getFace());
                        break;
                }
            }
            if (b[1] == b[0] + 1 && b[2] == b[1] + 1 && b[3] == b[2] + 1 && b[4] == b[3] + 1) {
                return 4;
            } else {
                return 1;
            }

        }

    }

    // TODO
    @Override
    public int compareTo(Hand that) {
        int x = 0;
        int y = 0;
        int b = 0;
        int a = 0;
        x = CardsName(this.cards);
        y = CardsName(that.cards);
        if (x > y) {
            return +1;
        } else if (x < y) {
            return -1;
        } else {
            Arrays.sort(this.cards);
            Arrays.sort(that.cards);
            if (this.cards[4].getFace().equals(that.cards[4].getFace())) {
                if (Card.SUIT_ORDER.compare(this.cards[4], that.cards[3]) == 1) {
                    return 1;
                } else if (Card.SUIT_ORDER.compare(this.cards[4], that.cards[3]) == -1) {
                    return -1;
                }
            } else {
                switch (this.cards[4].getFace()) {
                    case ""A"":
                        b = 14;
                        break;
                    case ""K"":
                        b = 13;
                        break;
                    case ""Q"":
                        b = 12;
                        break;
                    case ""J"":
                        b = 11;
                        break;
                    default:
                        b = Integer.parseInt(this.cards[4].getFace());
                        break;
                }
                switch (that.cards[4].getFace()) {
                    case ""A"":
                        a = 14;
                        break;
                    case ""K"":
                        a = 13;
                        break;
                    case ""Q"":
                        a = 12;
                        break;
                    case ""J"":
                        a = 11;
                        break;
                    default:
                        a = Integer.parseInt(that.cards[4].getFace());
                        break;
                }
                if (b > a) {
                    return +1;
                } else if (b < a) {
                    return -1;
                } else {
                    return 0;
                }
            }
        }
        return 0;
    }

    // Do not modified this function
    public Card[] getCards() {
        return this.cards;
    }
}

@4c4d816d07a28e1b0630c5dcb2688abb@"
"r04631006","0","0.46","105488","@3838ec480a5266f51db92946bad2038e@
import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards = new Card[5];

    // TODO, Judge System will call this constructor once for each hand
    public String Hand(Card[] cards) {
        int a = 0;
        int[] b = new int[5];
        int[] cc = new int[5];
        String e = """";
        Arrays.sort(cards);
        for (int i = 0; i < 5; i++) {
            for (int j = i; j < 5; j++) {
                if (cards[i].getFace().equals(cards[i].getFace()) && cards[i].getFace().equals(cards[j].getFace())) {
                    cc[i] = cc[i] + 1;
                }
            }
            if (cc[i] == 3) {
                i = i + 2;
            }
            if (cc[i] == 2) {
                i = i + 1;
            }
        }
        Arrays.sort(cc);
        if (cc[4] == 3 && cc[3] == 2) {
            e = ""full house"";
            return e;
        } else if (cc[4] == 2 && cc[3] == 2) {
            e = ""two pair"";
            return e;
        } else if (cc[4] == 2 && cc[3] == 1) {
            e = ""one pair"";
            return e;
        } else if (Card.SUIT_ORDER.compare(cards[4], cards[3]) == 0 && Card.SUIT_ORDER.compare(cards[4], cards[2]) == 0 && Card.SUIT_ORDER.compare(cards[4], cards[1]) == 0 && Card.SUIT_ORDER.compare(cards[4], cards[0]) == 0) {
            e = ""flush"";
            return e;
        } else {
            Arrays.sort(cards);
            for (int i = 0; i < 5; i++) {
                switch (cards[i].getFace()) {
                    case ""A"":
                        b[i] = 14;
                        break;
                    case ""K"":
                        b[i] = 13;
                        break;
                    case ""Q"":
                        b[i] = 12;
                        break;
                    case ""J"":
                        b[i] = 11;
                        break;
                    default:
                        b[i] = Integer.parseInt(cards[i].getFace());
                        break;
                }
            }
            if (b[1] == b[0] + 1 && b[2] == b[1] + 1 && b[3] == b[2] + 1 && b[4] == b[3] + 1) {
                e = ""straight"";
                return e;
            } else {
                e = ""high card"";
                return e;
            }

        }

    }

    // TODO
    @Override
    public int compareTo(Hand that) {
        int x = 0;
        int y = 0;
        int b = 0;
        int a = 0;
        switch (Hand(this.cards)) {
            case ""full house"":
                x = 6;
                break;
            case ""flush"":
                x = 5;
                break;
            case ""straight"":
                x = 4;
                break;
            case ""two pair"":
                x = 3;
                break;
            case ""one pair"":
                x = 2;
                break;
            case ""high card"":
                x = 1;
                break;
        }
        switch (Hand(that.cards)) {
            case ""full house"":
                y = 6;
                break;
            case ""flush"":
                y = 5;
                break;
            case ""straight"":
                y = 4;
                break;
            case ""two pair"":
                y = 3;
                break;
            case ""one pair"":
                y = 2;
                break;
            case ""high card"":
                y = 1;
                break;
        }
        if (x > y) {
            return +1;
        } else if (x < y) {
            return -1;
        } else {
            Arrays.sort(this.cards);
            Arrays.sort(that.cards);
            if (this.cards[4].getFace().equals(that.cards[4].getFace())) {
                if (Card.SUIT_ORDER.compare(this.cards[4], that.cards[3]) == 1) {
                    return 1;
                } else if (Card.SUIT_ORDER.compare(this.cards[4], that.cards[3]) == -1) {
                    return -1;
                }
            } else {
                switch (this.cards[4].getFace()) {
                    case ""A"":
                        b = 14;
                        break;
                    case ""K"":
                        b = 13;
                        break;
                    case ""Q"":
                        b = 12;
                        break;
                    case ""J"":
                        b = 11;
                        break;
                    default:
                        b = Integer.parseInt(this.cards[4].getFace());
                        break;
                }
                switch (that.cards[4].getFace()) {
                    case ""A"":
                        a = 14;
                        break;
                    case ""K"":
                        a = 13;
                        break;
                    case ""Q"":
                        a = 12;
                        break;
                    case ""J"":
                        a = 11;
                        break;
                    default:
                        a = Integer.parseInt(that.cards[4].getFace());
                        break;
                }
                if (b > a) {
                    return +1;
                } else if (b < a) {
                    return -1;
                } else {
                    return 0;
                }
            }
        }
        return 0;
    }

    // Do not modified this function
    public Card[] getCards() {
        return this.cards;
    }
}
@3838ec480a5266f51db92946bad2038e@"
"r04631006","3","0.0966666666666667","105488","@b692b6270f5dbd66c281dbd69f154acc@import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    
    private Card[] cards;

    
    public Hand(Card[] cards) {
        this.cards = cards;
    }

    public int CardsName(Card[] cards) {
        int a = 0;
        int[] b = new int[5];
        int[] cc = new int[5];
        Arrays.sort(cards);
        for (int i = 0; i < 5; i++) {
            for (int j = i; j < 5; j++) {
                if (cards[i].getFace().equals(cards[i].getFace()) && cards[i].getFace().equals(cards[j].getFace())) {
                    cc[i] = cc[i] + 1;
                }
            }
            if (cc[i] == 3) {
                i = i + 2;
            }
            if (cc[i] == 2) {
                i = i + 1;
            }
        }
        Arrays.sort(cc);
        if (cc[4] == 3 && cc[3] == 2) {
            return 6;
        } else if (cc[4] == 2 && cc[3] == 2) {
            return 3;
        } else if (cc[4] == 2 && cc[3] == 1) {
            return 2;
        } else if (Card.SUIT_ORDER.compare(cards[4], cards[3]) == 0 && Card.SUIT_ORDER.compare(cards[4], cards[2]) == 0 && Card.SUIT_ORDER.compare(cards[4], cards[1]) == 0 && Card.SUIT_ORDER.compare(cards[4], cards[0]) == 0) {
            return 5;
        } else {
            Arrays.sort(cards);
            for (int i = 0; i < 5; i++) {
                switch (cards[i].getFace()) {
                    case ""A"":
                        b[i] = 14;
                        break;
                    case ""K"":
                        b[i] = 13;
                        break;
                    case ""Q"":
                        b[i] = 12;
                        break;
                    case ""J"":
                        b[i] = 11;
                        break;
                    default:
                        b[i] = Integer.parseInt(cards[i].getFace());
                        break;
                }
            }
            if (b[1] == b[0] + 1 && b[2] == b[1] + 1 && b[3] == b[2] + 1 && b[4] == b[3] + 1) {
                return 4;
            } else {
                return 1;
            }

        }

    }

    @Override
    public int compareTo(Hand that) {
        int x = 0;
        int y = 0;
        int b = 0;
        int a = 0;
        x = CardsName(this.cards);
        y = CardsName(that.cards);
        if (x > y) {
            return +1;
        } else if (x < y) {
            return -1;
        } else {
            Arrays.sort(this.cards);
            Arrays.sort(that.cards);
            if (this.cards[4].getFace().equals(that.cards[4].getFace())) {
                if (Card.SUIT_ORDER.compare(this.cards[4], that.cards[3]) == 1) {
                    return 1;
                } else if (Card.SUIT_ORDER.compare(this.cards[4], that.cards[3]) == -1) {
                    return -1;
                }
            } else {
                switch (this.cards[4].getFace()) {
                    case ""A"":
                        b = 14;
                        break;
                    case ""K"":
                        b = 13;
                        break;
                    case ""Q"":
                        b = 12;
                        break;
                    case ""J"":
                        b = 11;
                        break;
                    default:
                        b = Integer.parseInt(this.cards[4].getFace());
                        break;
                }
                switch (that.cards[4].getFace()) {
                    case ""A"":
                        a = 14;
                        break;
                    case ""K"":
                        a = 13;
                        break;
                    case ""Q"":
                        a = 12;
                        break;
                    case ""J"":
                        a = 11;
                        break;
                    default:
                        a = Integer.parseInt(that.cards[4].getFace());
                        break;
                }
                if (b > a) {
                    return +1;
                } else if (b < a) {
                    return -1;
                } else {
                    return 0;
                }
            }
        }
        return 0;
    }

    public Card[] getCards() {
        return this.cards;
    }
}
@b692b6270f5dbd66c281dbd69f154acc@"
"r04522627","0","0.49","104304","@5c23395524586359bf52ad7859a2a1b1@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hw7;

/**
 *
 * @author Chih-Kai
 */
public class HW7 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
    }
    
}

@5c23395524586359bf52ad7859a2a1b1@"
"r04522627","3","0.0966666666666667","105520","@0374bca644065417d0b87d99600d2c49@import java.util.Arrays;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    boolean tryParseInt(String value) {  
     try {  
         Integer.parseInt(value);  
         return true;  
      } catch (NumberFormatException e) {  
         return false;  
      }  
    }
    
    public int getFaceValue(String face){
        int v = 0;
        if(tryParseInt(face))
        {
            v = Integer.parseInt(face);
        }
        else if(face.equals(""A""))
        {
            v = 14;
        }
        else if(face.equals(""K""))
        {
            v = 13;
        }
        else if(face.equals(""Q""))
        {
            v = 12;
        }
        else if(face.equals(""J""))
        {
            v = 11;
        }
        return v;
    }
    
    public int getSuitValue(String suit){
        int v1 = 0;  
        if(suit.equals(""Spades""))
            {
                v1 = 4;
            }
            else if(suit.equals(""Hearts""))
            {
                v1 = 3;
            }
            else if(suit.equals(""Diamonds""))
            {
                v1 = 2;
            }
            else if(suit.equals(""Clubs""))
            {
                v1 = 1;
            }
        return v1;
    }
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
    }
    public double getHandValue(Hand hand){
        double c1 = 0;
        int i = 0,j =0;
        int[] PairIndex = new int[2];
        while(i < 4)
        {
            if(hand.cards[i].getFace().equals(hand.cards[++i].getFace()))
            {
                c1 = c1 + 2;
                PairIndex[j++] = i; 
                if(i == 4) break;
                if(hand.cards[i].getFace().equals(hand.cards[++i].getFace()))
                {
                    c1 = c1 + 1 + getFaceValue(hand.cards[i].getFace()) * 0.01;
                    if(i == 4) break;
                     if(hand.cards[i].getFace().equals(hand.cards[++i].getFace()))
                    {
                        c1 = c1 + 1 + getFaceValue(hand.cards[i].getFace()) * 0.0001;
                    }
                }
            }
        }
        //flush
        if(c1 < 5)
        {
            i = 0; 
            int k = 0;
            while(i < 4)
            {
                if(hand.cards[i].getSuit().equals(hand.cards[++i].getSuit()))
                {
                    k++;
                }
            }
            if(k == 4)
            {
                c1 = 4.8  + getFaceValue(hand.cards[4].getFace()) * 0.001 + getSuitValue(hand.cards[4].getSuit()) * 0.0001;
            }
        }
        //straight  4.5x  4.1x
        if(c1 < 4.8)
        {
            i = 0; 
            int k = 0;
            while(i < 4)
            {
                if(getFaceValue(hand.cards[i].getFace()) - getFaceValue(hand.cards[++i].getFace()) == -1) k++;
            }
            if(k == 4)
            {
                c1 = 4.5 + getFaceValue(hand.cards[4].getFace()) * 0.001 + getSuitValue(hand.cards[4].getSuit()) * 0.0001;
            }
            else if(k == 3 && getFaceValue(hand.cards[0].getFace()) == 2 && getFaceValue(hand.cards[4].getFace()) == 14)
            {
                c1 = 4.1 + getFaceValue(hand.cards[3].getFace()) * 0.001 + getSuitValue(hand.cards[3].getSuit()) * 0.0001;
            }
        }
        
        if(c1 == 4)
        {
            c1 =  c1 + getFaceValue(hand.cards[PairIndex[1]].getFace()) * 0.01 + getSuitValue(hand.cards[PairIndex[0]].getSuit()) * 0.0001;
        }
        else if(c1 == 2)
        {
             c1 = c1 +  getFaceValue(hand.cards[PairIndex[0]].getFace()) * 0.01;
        }
                
        else if(c1 == 0)
        {
            c1 = getFaceValue(hand.cards[4].getFace()) * 0.01 + getSuitValue(hand.cards[4].getSuit()) * 0.001;
        }
        return c1;
    }
    
    // TODO
    public int compareTo(Hand that) {
        double c1 = 0, c2 = 0;
        Arrays.sort(this.cards);
        Arrays.sort(that.cards);
        
        c1 = getHandValue(this);
        c2 = getHandValue(that);
        
        
        if(c1 > c2)
        {
            return 1;
        }
        else if(c1 == c2)
        {
            return 0;
        }
        else
        {
            return -1;
        }
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@0374bca644065417d0b87d99600d2c49@"
"r04546014","0","0","0","@cbd2b5a7b682ce97cd745fa7636e76dc@import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards;
    private int[] face;
    private int[] suit;
    private int cardSuit;

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards) {
        return;
    }

    // TODO
    public int compareTo(Hand that) {
        Arrays.sort(this.cards);
        Arrays.sort(that.cards);
        this.getFace(this.cards);//算好我的每一張牌的數字
        that.getFace(that.cards);//算好你的每一張牌的數字
        this.getSuit(this.cards);//算好我的每一張牌的花色
        that.getSuit(that.cards);//算好你的每一張牌的花色
        this.handCard();//算好我的牌是什麼牌
        that.handCard();//算好你的牌是什麼牌
        if(this.cardSuit>that.cardSuit) return 1;//我的牌組合比你大
        if(this.cardSuit<that.cardSuit) return -1;//你的牌組合比我大
        //平手
        if(this.cardSuit==5){//如果兩個都是桐花
            return this.cards[4].compareTo(that.cards[4]);//比較最大的那張牌的大小
        }
        if(this.cardSuit==6){//兩個都是蘆
            return this.cards[2].compareTo(that.cards[2]);//蘆的話，比較中間那張牌就可以了(很酷的想法吧)            
        }
        if(this.cardSuit==4){//如果兩個都是順的話
            if(this.face[4]==14&&this.face[0]==2&&that.face[4]==14&&that.face[0]==2)//如果兩個都是A2345
                return this.cards[3].compareTo(that.cards[3]);//比較第四張牌，也就是5
            return this.cards[4].compareTo(that.cards[4]);//其餘的就是比較第五張牌
        }
        if(this.cardSuit==2||this.cardSuit==1){//兩個都是2pair或1pair
            Card myCard=null,yourCard=null;
            for(int i=1;i<5;i++){
                if(this.face[i]==this.face[i-1]) myCard=this.cards[i];
                if(that.face[i]==that.face[i-1]) yourCard=that.cards[i];
            }
            return myCard.compareTo(yourCard);
        }       
        return this.cards[4].compareTo(that.cards[4]);//剩下的case就是兩個都是雜牌
    }

    private void getFace(Card[] card) {//看數字
        this.face = new int[5];
        for (int i = 0; i < 5; i++) {
            if (card[i].getFace().equals(""A"")) {
                face[i] = 14;
            } else if (card[i].getFace().equals(""K"")) {
                face[i] = 13;
            } else if (card[i].getFace().equals(""Q"")) {
                face[i] = 12;
            } else if (card[i].getFace().equals(""J"")) {
                face[i] = 11;
            } else {
                face[i] = Integer.valueOf(card[i].getFace());
            }
        }
    }

    private void getSuit(Card[] card) {
        this.suit = new int[5];
        for (int i = 0; i < 5; i++) {
            if (card[i].getSuit().equals(""Spades"")) {
                suit[i] = 4;//黑桃
            } else if (card[i].getSuit().equals(""Hearts"")) {
                suit[i] = 3;//愛心
            } else if (card[i].getSuit().equals(""Diamonds"")) {
                suit[i] = 2;//方塊
            } else {
                suit[i] = 1;//梅花
            }
        }
    }

    private void handCard() {//檢查花色
        if (this.checkFlush()) {
            this.cardSuit = 5;//同花=5
        } else if (this.checkStright()) {
            this.cardSuit = 4;//順=4
        } else {
            this.cardSuit = this.checkPair();
        }
    }

    private boolean checkFlush() {//檢查是否為桐花
        for (int i = 0; i < 4; i++) {
            if (this.suit[i] != this.suit[i + 1]) {
                return false;
            }
        }
        return true;
    }

    private boolean checkStright() {//順
        if (this.face[0] == 2 && this.face[1] == 3 && this.face[2] == 4 && this.face[3] == 5 && this.face[4] == 14) {
            return true;//A2345
        }
        for (int i = 0; i < 4; i++) {
            if (this.face[i + 1] - this.face[i] != 1) {
                return false;
            }
        }
        return true;
    }//先看是不是A2345在看是不是一班的順子

    private int checkPair() {//檢查蘆、2胚、1胚或是雜牌
        int count = 0;
        for (int i = 0; i < 4; i++) {
            if (this.face[i] == this.face[i + 1]) {
                count++;
            }
        }
        if (count == 3) {//蘆或鐵支
            if (this.face[0] == this.face[3] || this.face[1] == this.face[4]) {
                return 1;//在這裡鐵支算是1胚
            }
            return 6;//蘆
        }
        if (count == 2) {//2胚或3條
            if (this.face[0] == this.face[2] || this.face[1] == this.face[3] || this.face[2] == this.face[4]) {
                return 1;//在這裡三條算是1胚
            }
        }
        if (count == 1) {
            return 1;//一胚
        }
        return 0;//雜牌
    }

    // Do not modified this function
    public Card[] getCards() {
        return this.cards;
    }
}

@cbd2b5a7b682ce97cd745fa7636e76dc@"
"r04546014","3","0.1","105520","@eedca3bcce046a387b4235e39b8dc64a@
import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards;
    private int[] face=new int[5];
    private int[] suit=new int[5];
    private int cardSuit;

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards) {
        this.cards=cards;
        Arrays.sort(cards);
    }

    // TODO
    public int compareTo(Hand that) {
        this.getFace(this);//算好我的每一張牌的數字
        that.getFace(that);//算好你的每一張牌的數字
        this.getSuit(this);//算好我的每一張牌的花色
        that.getSuit(that);//算好你的每一張牌的花色
        this.handCard();//算好我的牌是什麼牌
        that.handCard();//算好你的牌是什麼牌
        if(this.cardSuit>that.cardSuit) return 1;//我的牌組合比你大
        if(this.cardSuit<that.cardSuit) return -1;//你的牌組合比我大
        //平手
        if(this.cardSuit==5){//如果兩個都是桐花
            return this.cards[4].compareTo(that.cards[4]);//比較最大的那張牌的大小
        }
        if(this.cardSuit==6){//兩個都是蘆
            return this.cards[2].compareTo(that.cards[2]);//蘆的話，比較中間那張牌就可以了(很酷的想法吧)            
        }
        if(this.cardSuit==4){//如果兩個都是順的話
            if(this.face[4]==14&&this.face[0]==2&&that.face[4]==14&&that.face[0]==2)//如果兩個都是A2345
                return this.cards[3].compareTo(that.cards[3]);//比較第四張牌，也就是5
            return this.cards[4].compareTo(that.cards[4]);//其餘的就是比較第五張牌
        }
        if(this.cardSuit==2||this.cardSuit==1){//兩個都是2pair或1pair
            Card myCard=null,yourCard=null;
            for(int i=1;i<5;i++){
                if(this.face[i]==this.face[i-1]) myCard=this.cards[i];
                if(that.face[i]==that.face[i-1]) yourCard=that.cards[i];
            }
            return myCard.compareTo(yourCard);
        }       
        return this.cards[4].compareTo(that.cards[4]);//剩下的case就是兩個都是雜牌
    }

    private void getFace(Hand hh) {//看數字        
        for (int i = 0; i < 5; i++) {
            switch (hh.cards[i].getFace()) {
                case ""A"":
                    hh.face[i] = 14;
                    break;
                case ""K"":
                    hh.face[i] = 13;
                    break;
                case ""Q"":
                    hh.face[i] = 12;
                    break;
                case ""J"":
                    hh.face[i] = 11;
                    break;
                default:
                    face[i] = Integer.valueOf(hh.cards[i].getFace());
                    break;
            }
        }
    }

    private void getSuit(Hand hh) {
        this.suit = new int[5];
        for (int i = 0; i < 5; i++) {
            switch (hh.cards[i].getSuit()) {
                case ""Spades"":
                    suit[i] = 4;//黑桃
                    break;
                case ""Hearts"":
                    suit[i] = 3;//愛心
                    break;
                case ""Diamonds"":
                    suit[i] = 2;//方塊
                    break;
                default:
                    suit[i] = 1;//梅花
                    break;
            }
        }
    }

    private void handCard() {//檢查花色
        if (this.checkFlush()) {
            this.cardSuit = 5;//同花=5
        } else if (this.checkStright()) {
            this.cardSuit = 4;//順=4
        } else {
            this.cardSuit = this.checkPair();
        }
    }

    private boolean checkFlush() {//檢查是否為桐花
        for (int i = 0; i < 4; i++) {
            if (this.suit[i] != this.suit[i + 1]) {
                return false;
            }
        }
        return true;
    }

    private boolean checkStright() {//順
        if (this.face[0] == 2 && this.face[1] == 3 && this.face[2] == 4 && this.face[3] == 5 && this.face[4] == 14) {
            return true;//A2345
        }
        for (int i = 0; i < 4; i++) {
            if (this.face[i + 1] - this.face[i] != 1) {
                return false;
            }
        }
        return true;
    }//先看是不是A2345在看是不是一班的順子

    private int checkPair() {//檢查蘆、2胚、1胚或是雜牌
        int count = 0;
        for (int i = 0; i < 4; i++) {
            if (this.face[i] == this.face[i + 1]) {
                count++;
            }
        }
        if (count == 3) {//蘆或鐵支
            if (this.face[0] == this.face[3] || this.face[1] == this.face[4]) {
                return 1;//在這裡鐵支算是1胚
            }
            return 6;//蘆
        }
        if (count == 2) {//2胚或3條
            if (this.face[0] == this.face[2] || this.face[1] == this.face[3] || this.face[2] == this.face[4]) {
                return 1;//在這裡三條算是1胚
            }
        }
        if (count == 1) {
            return 1;//一胚
        }
        return 0;//雜牌
    }

    // Do not modified this function
    public Card[] getCards() {
        return this.cards;
    }
}

@eedca3bcce046a387b4235e39b8dc64a@"
"r04546014","0","0.1","105520","@d6f8d24201bff3ae03f39e236c11deef@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] hand = new Hand[count];//訂出幾個人
            Card[]card = new Card[5];//紀錄每一張牌
            MinPQ<Hand> pq = new MinPQ();
            for (int i = 0; i < count; i++) {
                String[] PlayerHand = br.readLine().split("","");//讀每一個player的手牌                
                for (int j = 0; j < 5; j++) {
                    String[] sf = PlayerHand[j].split(""_"");//讀每一張排的花色和數字
                    card[j] = new Card(sf[1], sf[0]);
                }
                hand[i] = new Hand(card);
                pq.insert(hand[i]);
                if (pq.size() > target) {
                    pq.delMin();
                }
            }
            
            Card[] answer=pq.delMin().getCards();
            Arrays.sort(answer);
            for(int i=0;i<5;i++){
                System.out.print(answer[i].getSuit()+""_""+answer[i].getFace());
                if(i<4) System.out.print("","");
            }
        }
    }
}

@d6f8d24201bff3ae03f39e236c11deef@"
"b02611028","3","0.0966666666666667","105536","@d92e67955d8ca2e5a95073dcaa186c99@
import java.util.Arrays;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards=cards;
    }

    // TODO
    public int compareTo(Hand that) {
        Arrays.sort(this.cards);
        Arrays.sort(that.cards);
        // String a = this.cards[1].getFace();
        int[] points = new int[5];
        int[] suits =new int[5];
        int[] points2 = new int[5];
        int[] suits2 =new int[5];
        for (int i = 0; i < 5; i++) {
            
            if(this.cards[i].getSuit().equals(""Clubs""))suits[i]=1;
            if(this.cards[i].getSuit().equals(""Diamonds""))suits[i]=2;
            if(this.cards[i].getSuit().equals(""Hearts""))suits[i]=3;
            if(this.cards[i].getSuit().equals(""Spades""))suits[i]=4;
            
            if(that.cards[i].getSuit().equals(""Clubs""))suits2[i]=1;
            if(that.cards[i].getSuit().equals(""Diamonds""))suits2[i]=2;
            if(that.cards[i].getSuit().equals(""Hearts""))suits2[i]=3;
            if(that.cards[i].getSuit().equals(""Spades""))suits2[i]=4;
            
            if (!this.cards[i].getFace().equals(""J"") && !this.cards[i].getFace().equals(""Q"") && !this.cards[i].getFace().equals(""K"") && !this.cards[i].getFace().equals(""A"")) {
                points[i] = Integer.parseInt(this.cards[i].getFace());
            } else {
                if (this.cards[i].getFace().equals(""J"")) {
                    points[i] = 11;
                }
                if (this.cards[i].getFace().equals(""Q"")) {
                    points[i] = 12;
                }
                if (this.cards[i].getFace().equals(""K"")) {
                    points[i] = 13;
                }
                if (this.cards[i].getFace().equals(""A"")) {
                    points[i] = 14;
                }
            }

            if (!that.cards[i].getFace().equals(""J"") && !that.cards[i].getFace().equals(""Q"") && !that.cards[i].getFace().equals(""K"") && !that.cards[i].getFace().equals(""A"")) {
                points2[i] = Integer.parseInt(that.cards[i].getFace());
            } else {
                if (that.cards[i].getFace().equals(""J"")) {
                    points2[i] = 11;
                }
                if (that.cards[i].getFace().equals(""Q"")) {
                    points2[i] = 12;
                }
                if (that.cards[i].getFace().equals(""K"")) {
                    points2[i] = 13;
                }
                if (that.cards[i].getFace().equals(""A"")) {
                    points2[i] = 14;
                }
            }

        }
        

        int priority = 0;
        int priority2 = 0;

        int count = 0;
        int pairindex1 = 0;
        int pairindex2 = 0;

        for (int i = 0; i < 4; i++) {
            if (points[i] == points[i + 1]) {
                count = count + 1;
                pairindex1=i+1;//biggest pair card index
            }
        }
        if (count == 0) {
            priority = 1;
        }
        if (count == 1) {
            priority = 2;
        }

        if (points[0] == points[1] && points[2] == points[3] && points[1] != points[2] && points[4] != points[2] || points[1] == points[2] && points[3] == points[4] && points[0] != points[1]&& points[2] != points[3] || points[0] == points[1] && points[3] == points[4] && points[2] != points[1]&& points[2] != points[3]) {
            priority = 3;
        }
        if (points[0] + 1 == points[1] && points[1] + 1 == points[2] && points[2] + 1 == points[3] && points[3] + 1 == points[4]) {
            priority = 4;
        }
        if (suits[0]==suits[1]&&suits[1]==suits[2]&&suits[2]==suits[3]&&suits[3]==suits[4]) {
            priority = 5;
        }
        if (points[0] == points[1] && points[2] == points[3] && points[3] == points[4] || points[0] == points[1] && points[1] == points[2] && points[3] == points[4]) {
            priority = 6;
        }

        count = 0;
        

        for (int i = 0; i < 4; i++) {
            if (points2[i] == points2[i + 1]) {
                count = count + 1;
            }
        }
        if (count == 0) {
            priority2 = 1;
        }
        count = 0;
        for (int i = 0; i < 4; i++) {
            if (points2[i] == points2[i + 1]) {
                count = count + 1;
                pairindex2 = i+1;
            }
        }

        if (count == 1) {
            priority2 = 2;
        }
        if (points2[0] == points2[1] && points2[2] == points2[3] && points2[1] != points2[2] && points2[4] != points2[2] || points2[1] == points2[2] && points2[3] == points2[4] && points2[0] != points2[1]&& points2[2] != points2[3] || points2[0] == points2[1] && points2[3] == points2[4] && points2[2] != points2[1]&& points2[2] != points2[3]) {
            priority2 = 3;
        }
        if (points2[0] + 1 == points2[1] && points2[1] + 1 == points2[2] && points2[2] + 1 == points2[3] && points2[3] + 1 == points2[4]) {
            priority2 = 4;
        }
        if (suits2[0]==suits2[1]&&suits2[1]==suits2[2]&&suits2[2]==suits2[3]&&suits2[3]==suits2[4]) {
            priority2 = 5;
        }
        if (points2[0] == points2[1] && points2[2] == points2[3] && points2[3] == points2[4] || points2[0] == points2[1] && points2[1] == points2[2] && points2[3] == points2[4]) {
            priority2 = 6;
        }
        // complete this function so the Player can be sorted according to the cards he/she has.
        Card c = this.cards[0];
        Card d = that.cards[0];

        if (priority > priority2) {

            return 1;
        }
        if (priority < priority2) {
            return -1;
        }
        if (priority == priority2) {
            if (priority == 1) {
                for (int i = 1; i < 4; i++) {
                    if (c.compareTo(this.cards[i + 1]) == -1) {
                        c = this.cards[i + 1];
                    }
                    if (d.compareTo(that.cards[i + 1]) == -1) {
                        d = that.cards[i + 1];
                    }
                }
                if (c.compareTo(d) == -1) {
                    return -1;
                }
                if (c.compareTo(d) == 1) {
                    return 1;
                }
            }
            if(priority==2){
                if(points[pairindex1]>points2[pairindex2])return 1;
                if(points[pairindex1]<points2[pairindex2])return -1;
                if(points[pairindex1]==points2[pairindex2]){
                    if(suits[pairindex1]>suits2[pairindex2])return 1;
                    if(suits[pairindex1]<suits2[pairindex2])return -1;
                }
            }
            if(priority==3){
                if(points[3]>points2[3])return 1;
                if(points[3]<points2[3])return -1;
                
            }
            if(priority==4){
                if(points[4]>points2[4])return 1;
                if(points[4]<points2[4])return -1;
            }

        }
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@d92e67955d8ca2e5a95073dcaa186c99@"
"r04921105","0","0","0","@ccc2065a592014490085c37e0dd83d8d@
import java.util.Arrays;





public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        return;
    }

    // TODO
    public int compareTo(Hand that) {
        if(cardtorank(this.cards)>cardtorank(that.cards))
            return 1;
        if(cardtorank(this.cards)<cardtorank(that.cards))
            return -1;
        else
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
    public static int cardtorank(Card[] cards){
        Arrays.sort(cards);
        
      int rank=0;
        //pair
        for(int i=4;i>0;i--){
            if (cards[i].getFace().equals(cards[i-1].getFace()))
                rank= 1;
        }
        //2-pair
        if(cards[0].getFace().equals(cards[1].getFace())&&cards[2].getFace().equals(cards[3].getFace()))
            rank=2;
        if(cards[0].getFace().equals(cards[1].getFace())&&cards[3].getFace().equals(cards[4].getFace()))
            rank=2;
        if(cards[1].getFace().equals(cards[2].getFace())&&cards[3].getFace().equals(cards[4].getFace()))
            rank=2;
        
        
        //順子
        boolean s=true;
        for(int i=4;i>0;i--){
                       
            int a=facetonum(cards[i]);
            int b=facetonum(cards[i-1]);
            if(a!=b+1)
                s=false;
            /*
            if(cards[i].getFace().equals(cards[i-1].getFace()));
                else s=false;    
            */
        }
        if (s== true)
            rank =3;
        //同花
        if(cards[0].getSuit().equals(cards[1].getSuit())&&cards[1].getSuit().equals(cards[2].getSuit())&&
                cards[2].getSuit().equals(cards[3].getSuit())&&cards[3].getSuit().equals(cards[4].getSuit()))
                rank=4;
        
        //葫蘆
        
            if(cards[0].getFace().equals(cards[1].getFace())&&cards[1].getFace().equals(cards[2].getFace())){
                if(cards[3].getFace().equals(cards[4].getFace()))
                    rank=5;
            }
            if(cards[2].getFace().equals(cards[3].getFace())&&cards[3].getFace().equals(cards[4].getFace())){
                if(cards[0].getFace().equals(cards[1].getFace()))
                    rank=5;
            }
        
    
        
        
        
        return rank;
    }
    
    
      
    public static int facetonum(Card c){
        switch(c.getFace()){
            case(""A""):
              return 14;
            case(""K""):
                return 13;
            case(""Q""):
                return 12;
            case(""J""):
                return 11;
            default:
                return Integer.parseInt(c.getFace());
                                      
        }
    }
}

@ccc2065a592014490085c37e0dd83d8d@"
"r04921105","3","0.1","105584","@10f62a40c0c2e6715da99122fd03236f@
import java.util.Arrays;
public class Hand implements Comparable<Hand> {
    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
    }

    // TODO
    public int compareTo(Hand that) {
        if(cardtorank(this.cards)>cardtorank(that.cards))
            return 1;
        if(cardtorank(this.cards)<cardtorank(that.cards))
            return -1;
        else
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
    
    public static int cardtorank(Card[] cards){
        Arrays.sort(cards);
        
      int rank=0;
        //pair
        for(int i=4;i>0;i--){
            if (cards[i].getFace().equals(cards[i-1].getFace()))
                rank= 1;
        }
        //2-pair
        if(cards[0].getFace().equals(cards[1].getFace())&&cards[2].getFace().equals(cards[3].getFace()))
            rank=2;
        if(cards[0].getFace().equals(cards[1].getFace())&&cards[3].getFace().equals(cards[4].getFace()))
            rank=2;
        if(cards[1].getFace().equals(cards[2].getFace())&&cards[3].getFace().equals(cards[4].getFace()))
            rank=2;
        
        
        //順子
        boolean s=true;
        for(int i=4;i>0;i--){
                       
            int a=facetonum(cards[i]);
            int b=facetonum(cards[i-1]);
            if(a!=b+1)
                s=false;
            /*
            if(cards[i].getFace().equals(cards[i-1].getFace()));
                else s=false;    
            */
        }
        if (s== true)
            rank =3;
        //同花
        if(cards[0].getSuit().equals(cards[1].getSuit())&&cards[1].getSuit().equals(cards[2].getSuit())&&
                cards[2].getSuit().equals(cards[3].getSuit())&&cards[3].getSuit().equals(cards[4].getSuit()))
                rank=4;
        
        //葫蘆
        
            if(cards[0].getFace().equals(cards[1].getFace())&&cards[1].getFace().equals(cards[2].getFace())){
                if(cards[3].getFace().equals(cards[4].getFace()))
                    rank=5;
            }
            if(cards[2].getFace().equals(cards[3].getFace())&&cards[3].getFace().equals(cards[4].getFace())){
                if(cards[0].getFace().equals(cards[1].getFace()))
                    rank=5;
            }
        
    
        
        
        
        return rank;
    }
    
    
      
    public static int facetonum(Card c){
        switch(c.getFace()){
            case(""A""):
              return 14;
            case(""K""):
                return 13;
            case(""Q""):
                return 12;
            case(""J""):
                return 11;
            default:
                return Integer.parseInt(c.getFace());
                                      
        }
    }
}

@10f62a40c0c2e6715da99122fd03236f@"
"r04921074","3","0.0933333333333333","105632","@c474e99a2384f53dbdfe35c71f1e61c4@
import java.util.Arrays;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards=cards;
        return;
    }

    // TODO
    public int compareTo(Hand that) {
                
        Arrays.sort(this.getCards());
        Arrays.sort(that.getCards());
        
        int thisSET = GetOrder(this.cards);
        int thatSET = GetOrder(that.cards);
        
        if(thisSET>thatSET)return +1;
        else if(thatSET>thisSET)return -1;
        else if(thisSET == thatSET){
                if(thisSET==0){ 
                    if(GetPoint(this.cards[4])>GetPoint(that.cards[4]))return+1;
                    else return-1;
                }
                else if(thisSET==1){
                    if(OnePair(this.cards)[1]>OnePair(that.cards)[1])return+1;
                    else return-1;
                }
                else if(thisSET==2){
                    if(TwoPair(this.cards)[1]>TwoPair(that.cards)[1])return+1;
                    else return-1;
                }
                else if(thisSET==3){
                    if(Straight(this.cards)[1]>Straight(that.cards)[1])return+1;
                    else return-1;
                }
                else if(thisSET==4){
                    if(Flush(this.cards)[1]>Flush(that.cards)[1])return+1;
                    else return-1;
                }
                else if(thisSET==5){
                    if(FullHouse(this.cards)[1]>FullHouse(that.cards)[1])return+1;
                    else return-1;
                }
                else return 0;
               
        }
        // complete this function so the Player can be sorted according to the cards he/she has.
        else  return 0;
       
    }
//***************************** Function for sort*****************************\\
//----------------------------------------------------------------------------\\
    public int FacetoINT(String a){
    int facepoint = 0;
    if(a.equals(""A""))facepoint = 130;
    else if(a.equals(""2""))facepoint = 10;
    else if(a.equals(""3""))facepoint = 20;
    else if(a.equals(""4""))facepoint = 30;
    else if(a.equals(""5""))facepoint = 40;
    else if(a.equals(""6""))facepoint = 50;
    else if(a.equals(""7""))facepoint = 60;
    else if(a.equals(""8""))facepoint = 70;
    else if(a.equals(""9""))facepoint = 80;
    else if(a.equals(""10""))facepoint = 90;
    else if(a.equals(""J""))facepoint = 100;
    else if(a.equals(""Q""))facepoint = 110;
    else if(a.equals(""K""))facepoint = 120;
    return facepoint;
} 
    public int SuittoINT(String b){
    int suitpoint = 0;
    if(b.equals(""Clubs""))suitpoint=1;
    else if(b.equals(""Diamonds""))suitpoint=2;
    else if(b.equals(""Hearts""))suitpoint=3;
    else if(b.equals(""Spades""))suitpoint=4;
    return suitpoint;
} 
    public int GetPoint(Card aa) {
        int GP = 0;
        GP = FacetoINT(aa.getFace())+SuittoINT(aa.getSuit());
        return GP;
    }
        public int[] FullHouse(Card[] bb) {     //FULLHOUSE
        Arrays.sort(bb);
        int[] GP = new int[2];
        int[] temp = new int[5];
        int[] tempC = new int[5];
        for(int i=0; i<5; i++){
            temp[i]=GetPoint(bb[i])/10;
            tempC[i]=GetPoint(bb[i]);
        }
        if(temp[0]==temp[1]&&temp[2]==temp[3]&&temp[3]==temp[4]){
            GP[0]=1;
            GP[1]=tempC[4];
        }
        else if(temp[0]==temp[1]&&temp[1]==temp[2]&&temp[3]==temp[4]){
            GP[0]=1;
            GP[1]=tempC[2];
        }
        else{GP[0]=0; GP[1]=0;}
        return GP;
    }
    public int[] Flush(Card[] cc) {                ///FLUSH
        Arrays.sort(cc);
         int[] GP = new int[2];
        for(int i=0; i<4; i++){
           if((GetPoint(cc[0])%10)==(GetPoint(cc[i+1])%10))GP[0] = GP[0]+1;
        } 
        GP[1] = GetPoint(cc[4]);//save max card
        GP[0] = GP[0]/4;//save whether set is establish?
        return GP;
    }
    public int[] Straight(Card[] aa) {              //STRAIGHT
        Arrays.sort(aa);
        int[] GP = new int[2];
        for(int i=0; i<4; i++){
           if((GetPoint(aa[i+1])/10)-(GetPoint(aa[i])/10)==1)GP[0] = GP[0]+1;
        } 
        GP[1] = GetPoint(aa[4]);//save max card
        GP[0] = GP[0]/4;//save whether set is establish?
        if((GetPoint(aa[0])/10)==1&&(GetPoint(aa[1])/10)==2&&(GetPoint(aa[2])/10)==3&&(GetPoint(aa[3])/10)==4&&(GetPoint(aa[4])/10)==13){
            GP[0]=1; GP[1]=GetPoint(aa[3]);
        }
        return GP;
    }
    public int[] TwoPair(Card[] dd) {         ///TWO PAIR
        Arrays.sort(dd);
        int[] GP = new int[2];
        int count = 0;
        int temp = 0;
        for(int i=0; i<4; i++){
            for(int j=i+1; j<5; j++){
                if((GetPoint(dd[i])/10)==(GetPoint(dd[j])/10)){
                    temp=j;
                    count++;
                }
            }            
        }
        if(count==2){
            GP[0]=1;GP[1]=GetPoint(dd[temp]);}
        else if(count==3){
            GP[0]=1;GP[1]=GetPoint(dd[temp]);}
        else if(count==6){
            GP[0]=1;GP[1]=GetPoint(dd[temp]);}
        else{ GP[0]=0;GP[1]=0;
        }
        return GP;
    }
    public int[] OnePair(Card[] ee) {         //ONE PAIR
        Arrays.sort(ee);
        int[] GP = new int[2];
        int temp = 0;
        int count = 0;
        for(int i=0; i<4; i++){
            for(int j=i+1; j<5; j++){
                if((GetPoint(ee[i])/10)==(GetPoint(ee[j])/10)){
                    temp=j;
                    count++;
                }
            }            
        }
        if(count==1){
            GP[0]=1; GP[1]=GetPoint(ee[temp]);}
        else{GP[0]=0; GP[1]=0;            
        }
        return GP;
    }
    
    public int GetOrder(Card[] O){
        Arrays.sort(O);
        int Order = 0;
        if(FullHouse(O)[0]==1) Order = 5;
        else{
            if(Flush(O)[0]==1) Order = 4;
            else{
                if(Straight(O)[0]==1)Order = 3;
                else{
                    if(TwoPair(O)[0]==1)Order = 2;
                    else{
                        if(OnePair(O)[0]==1)Order = 1;
                        else Order = 0;
                    }
                }
            }//2-else
        }//1-else
        return Order;
    }
//----------------------------------------------------------------------------\\    
//***********************************Sort end*********************************\\    
    
      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@c474e99a2384f53dbdfe35c71f1e61c4@"
"r04921028","3","0.09","103504","@05e06e2d2c930545ada7f6933887fdd3@import java.util.Arrays;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author DANNY
 */

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
        return;
    }

    // TODO
    public int compareTo(Hand that) {
        // complete this function so the Player can be sorted according to the cards he/she has.
        String[] comsuit = { ""Clubs"" , ""Diamonds"", ""Hearts"", ""Spades""};
        String[] comface = { ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"", ""A""};
        
        Arrays.sort(this.cards);
        Arrays.sort(that.cards);
        
        
        int [] thissamecaed = {0,0,0,0};
        int [] thatsamecaed = {0,0,0,0};
        
        int thissamesuit = 0;
        int thatsamesuit = 0;
        
        int thisstraight = 0; 
        int thatstraight = 0;
        
        int thisMVP = 0; 
        int thatMVP = 0;
        
        int [] thishold = {0,0,0,0,0,0};
        int [] thathold = {0,0,0,0,0,0};
        
        int thiscard = 0;
        int thatcard = 0;
        //======================================
        for(int i=0;i<5;i++){
            for(int j=0;j<13;j++){
                   if((this.cards[i].getFace()).equals(comface[j])){
                     thishold[i]=j;
                   }
                }
        }
        if(thishold[0]==0&&thishold[4]==13){
              thisstraight++;
        }
        for(int i=0;i<4;i++){
            if((this.cards[i].getFace()).equals(this.cards[i+1].getFace())){
              thissamecaed[i]++;
            }
            //flush
            if((this.cards[i].getSuit()).equals(this.cards[i+1].getSuit())){
              thissamesuit++;
            }
            //straight 
            if((thishold[i]+1)%13==(thishold[i+1])%13){
              thisstraight++;
            }
        }
        //=============================================
        for(int i=0;i<5;i++){
            for(int j=0;j<13;j++){
                   if((that.cards[i].getFace()).equals(comface[j])){
                     thathold[i]=j;
                   }
                }
        }
        if(thathold[0]==0&&thathold[4]==13){
              thatstraight++;
        }
        for(int i=0;i<4;i++){
            if((that.cards[i].getFace()).equals(that.cards[i+1].getFace())){
              thatsamecaed[i]++;
            }
            //flush
            if((that.cards[i].getSuit()).equals(that.cards[i+1].getSuit())){
              thatsamesuit++;
            }
            //straight 
            
            if((thathold[i]+1)==(thathold[i+1])){
              thatstraight++;
            }
			
        }
        
        //FULL HOUSE
        if((thissamecaed[0]==1&&thissamecaed[1]==1&&thissamecaed[3]==1))
        {thisMVP = 2; thiscard=0;}
        else if((thissamecaed[0]==1&&thissamecaed[2]==1&&thissamecaed[3]==1))
        {thisMVP = 4; thiscard=0;}
        //flush
        else if(thissamesuit==4)
        {thisMVP = 4; thiscard=1;}
        //straight
        else if(thisstraight==4)
        {
            thiscard=2;
            if(thishold[4]==13&&thishold[0]==0)
                thisMVP = 3;
            else 
                thisMVP = 4; 
        }
        //two pair
        else if((thissamecaed[0]==1&&thissamecaed[3]==1))
        {thisMVP=4; thiscard=3;}
        else if((thissamecaed[1]==1&&thissamecaed[3]==1))
        {thisMVP=4; thiscard=3;}
        else if((thissamecaed[0]==1&&thissamecaed[2]==1))
        {thisMVP=3; thiscard=3;}
        
        //one pair
        else if((thissamecaed[0]==1))
        {thisMVP=1; thiscard=4;}
        else if((thissamecaed[1]==1))
        {thisMVP=2; thiscard=4;}
        else if((thissamecaed[2]==1))
        {thisMVP=3; thiscard=4;}
        else if((thissamecaed[3]==1))
        {thisMVP=4; thiscard=4;}
        //high card
        else
        {thisMVP = 4; thiscard=5;}
        //=================================================
        //FULL HOUSE
        if((thatsamecaed[0]==1&&thatsamecaed[1]==1&&thatsamecaed[3]==1))
        {thatMVP = 2; thatcard=0;}
        else if((thatsamecaed[0]==1&&thatsamecaed[2]==1&&thatsamecaed[3]==1))
        {thatMVP = 4; thatcard=0;}
        //flush
        else if(thatsamesuit==4)
        {thatMVP = 4; thatcard=1;}
        //straight
        else if(thatstraight==4)
        {
            thatcard=2;
            if(thathold[4]==13&&thathold[0]==0)
                thatMVP = 3;
            else 
                thatMVP = 4; 
        }
        //two pair
        else if((thatsamecaed[0]==1&&thatsamecaed[3]==1))
        {thatMVP=4; thatcard=3;}
        else if((thatsamecaed[1]==1&&thatsamecaed[3]==1))
        {thatMVP=4; thatcard=3;}
        else if((thatsamecaed[0]==1&&thatsamecaed[2]==1))
        {thatMVP=3; thatcard=3;}
        
        //one pair
        else if((thatsamecaed[0]==1))
        {thatMVP=1; thatcard=4;}
        else if((thatsamecaed[1]==1))
        {thatMVP=2; thatcard=4;}
        else if((thatsamecaed[2]==1))
        {thatMVP=3; thatcard=4;}
        else if((thatsamecaed[3]==1))
        {thatMVP=4; thatcard=4;}
        //high card
        else
        {thatMVP = 4; thatcard=5;}

        if(thiscard<thatcard)
            return 1;
        else if(thiscard>thatcard)
            return -1;
        else if((thiscard==thatcard)&&thiscard==0)
            return this.cards[thisMVP].compareTo(that.cards[thatMVP]);
        else if((thiscard==thatcard)&&thiscard==1)
            return this.cards[thisMVP].compareTo(that.cards[thatMVP]);
        else if((thiscard==thatcard)&&thiscard==2)
            return this.cards[thisMVP].compareTo(that.cards[thatMVP]);
        else if((thiscard==thatcard)&&thiscard==3)
            return this.cards[thisMVP].compareTo(that.cards[thatMVP]);
        else if((thiscard==thatcard)&&thiscard==4)
            return this.cards[thisMVP].compareTo(that.cards[thatMVP]);
        else if((thiscard==thatcard)&&thiscard==5)
            return this.cards[thisMVP].compareTo(that.cards[thatMVP]);
        else
            return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@05e06e2d2c930545ada7f6933887fdd3@"
"b03611015","0","0","0","@654b63334410231722ca22e388d6ceea@
import java.util.Arrays;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        return;
    }

    // TODO
    public int compareTo(Hand that) {
        // complete this function so the Player can be sorted according to the cards he/she has.
        Card[] thishand = this.cards;
        Card[] thathand = that.cards;
        if (handtype(thishand) > handtype(thathand)) {
            return 1;
        } else if (handtype(thishand) == handtype(thathand)) {
            return 0;
        } else {
            return -1;
        }
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

public static int face(Card that) {
        if (""A"".equals(that.getFace())) {
            return 14;
        } else if (""J"".equals(that.getFace())) {
            return 11;
        } else if (""Q"".equals(that.getFace())) {
            return 12;
        } else if (""K"".equals(that.getFace())) {
            return 13;
        } else {
            return Integer.parseInt(that.getFace());
        }

    }

    public static double suit(Card A) {
        if (""Spades"".equals(A.getSuit())) {
            return 0.4;
        } else if (""Hearts"".equals(A.getSuit())) {
            return 0.3;
        } else if (""Diamonds"".equals(A.getSuit())) {
            return 0.2;
        } else {
            return 0.1;
        }
    }

    public double handtype(Card[] A) {

        Arrays.sort(A);
        int face[] = new int[5];
        double suit[] = new double[5];
        for (int i = 0; i < 5; i++) {
            suit[i] = suit(A[i]);
        }
        for (int i = 0; i < 5; i++) {
            face[i] = face(A[i]);
        }
        int num = 1;
        int count = 0;
        int fullhouse = 0;
        int fullhouseCard = 0;
        int straight = 1;
        int pairValue = 0;
        int pair = 0;
        int twopair = 0;
        int straightValue = 0;
        int flush = 1;
        double flushValue = 0;
        int pairmax = 0;

        for (int i = 1; i < 5; i++) {

            if (face[i] == face[i - 1]) {
                num++;
            }
            if (face[i] > face[i - 1]) {
                if (num == 2) {
                    num = 1;
                    count++;
                    pairmax = face[i - 1];
                }
                if (num == 3) {
                    num = 1;
                    fullhouse++;
                    fullhouseCard = face[i - 1];
                }
                if (face[i] == face[i - 1] + 1) {
                    straight++;
                }
            }
            if (i == 4) {
                if (num == 2) 
                        count++;
                if (count == 1) {
                    

                        if (pairmax < face[3]) {
                            pairmax = face[3];
                        }
                    
                    if (num == 3) {
                        fullhouse++;
                        fullhouseCard = face[i];
                    }
                }
                if (fullhouse == 1 && count == 0) {
                    pair = 1;
                    fullhouse = fullhouse - 1;
                }
            }
            if (count == 2 && i == 4) {
                twopair = 1;
            }
            if (count == 1 && i == 4) {
                if (fullhouse == 0) {
                    pair = 1;
                }

            }

            if (i == 4 && straight == 5) {
                straightValue = face[4];
            }

        }
        if (face[0] == 2 && face[1] == 3 && face[2] == 4 && face[3] == 5 && face[4] == 14) {
            straight = 5;
            straightValue = 5;
        }
        for (int i = 1; i < 5; i++) {
            if (suit[i] == suit[i - 1]) {
                flush++;
            }
            if (flush == 5) {
                flushValue = face[i];
            }
        }

        if (fullhouse == 1) {
            return 600 + fullhouseCard;
        } else if (flush == 5) {
            return 500 + flushValue;
        } else if (straight == 5) {
            return 400 + straightValue;
        } else if (twopair == 1) {
            return 300 + face[3];
        } else if (pair == 1) {
            return 200 + pairmax;
        } else {
            return 100 + face[4];
        }
    }
}
@654b63334410231722ca22e388d6ceea@"
"b03611015","3","0.1","105520","@bb3ace79d8bc046460ea4e2315ea8958@
import java.util.Arrays;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
         this.cards = cards;
    }

    // TODO
    public int compareTo(Hand that) {
        // complete this function so the Player can be sorted according to the cards he/she has.
        Card[] thishand = this.cards;
        Card[] thathand = that.cards;
        if (handtype(thishand) > handtype(thathand)) {
            return 1;
        } else if (handtype(thishand) == handtype(thathand)) {
            return 0;
        } else {
            return -1;
        }
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

public static int face(Card that) {
        if (""A"".equals(that.getFace())) {
            return 14;
        } else if (""J"".equals(that.getFace())) {
            return 11;
        } else if (""Q"".equals(that.getFace())) {
            return 12;
        } else if (""K"".equals(that.getFace())) {
            return 13;
        } else {
            return Integer.parseInt(that.getFace());
        }

    }

    public static double suit(Card A) {
        if (""Spades"".equals(A.getSuit())) {
            return 0.4;
        } else if (""Hearts"".equals(A.getSuit())) {
            return 0.3;
        } else if (""Diamonds"".equals(A.getSuit())) {
            return 0.2;
        } else {
            return 0.1;
        }
    }

    public double handtype(Card[] A) {

        Arrays.sort(A);
        int face[] = new int[5];
        double suit[] = new double[5];
        for (int i = 0; i < 5; i++) {
            suit[i] = suit(A[i]);
        }
        for (int i = 0; i < 5; i++) {
            face[i] = face(A[i]);
        }
        int num = 1;
        int count = 0;
        int fullhouse = 0;
        int fullhouseCard = 0;
        int straight = 1;
        int pairValue = 0;
        int pair = 0;
        int twopair = 0;
        int straightValue = 0;
        int flush = 1;
        double flushValue = 0;
        int pairmax = 0;

        for (int i = 1; i < 5; i++) {

            if (face[i] == face[i - 1]) {
                num++;
            }
            if (face[i] > face[i - 1]) {
                if (num == 2) {
                    num = 1;
                    count++;
                    pairmax = face[i - 1];
                }
                if (num == 3) {
                    num = 1;
                    fullhouse++;
                    fullhouseCard = face[i - 1];
                }
                if (face[i] == face[i - 1] + 1) {
                    straight++;
                }
            }
            if (i == 4) {
                if (num == 2) 
                        count++;
                if (count == 1) {
                    

                        if (pairmax < face[3]) {
                            pairmax = face[3];
                        }
                    
                    if (num == 3) {
                        fullhouse++;
                        fullhouseCard = face[i];
                    }
                }
                if (fullhouse == 1 && count == 0) {
                    pair = 1;
                    fullhouse = fullhouse - 1;
                }
            }
            if (count == 2 && i == 4) {
                twopair = 1;
            }
            if (count == 1 && i == 4) {
                if (fullhouse == 0) {
                    pair = 1;
                }

            }

            if (i == 4 && straight == 5) {
                straightValue = face[4];
            }

        }
        if (face[0] == 2 && face[1] == 3 && face[2] == 4 && face[3] == 5 && face[4] == 14) {
            straight = 5;
            straightValue = 5;
        }
        for (int i = 1; i < 5; i++) {
            if (suit[i] == suit[i - 1]) {
                flush++;
            }
            if (flush == 5) {
                flushValue = face[i];
            }
        }

        if (fullhouse == 1) {
            return 600 + fullhouseCard;
        } else if (flush == 5) {
            return 500 + flushValue;
        } else if (straight == 5) {
            return 400 + straightValue;
        } else if (twopair == 1) {
            return 300 + face[3];
        } else if (pair == 1) {
            return 200 + pairmax;
        } else {
            return 100 + face[4];
        }
    }
}
@bb3ace79d8bc046460ea4e2315ea8958@"
"r04921044","3","0.1","102768","@e751e6923243ed5e58751b9a235d3f46@
import java.util.*;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards;

    public enum Type {
        NOT_SET(1),
        HIGH_CARD(2),
        ONE_PAIR(3),
        TWO_PAIR(4),
        STRAIGHT(5),
        FLUSH(6),
        FULL_HOUSE(7);

        private final int _val;

        Type(int value) {
            _val = value;
        }

        public static int compareTo(Type t1, Type t2) {
            return t1._val - t2._val;
        }
    }

    public Type type;
    public Card highestCard;

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
        this.type = Type.NOT_SET;
    }

    // TODO
    public int compareTo(Hand that) {
        if (this.type == Type.NOT_SET) {
            this.distinguishType();
        }
        if (that.type == Type.NOT_SET) {
            that.distinguishType();
        }

        if (this.type != that.type)
            return Type.compareTo(this.type, that.type);

        return this.highestCard.compareTo(that.highestCard);
    }

    public void distinguishType() {
        Arrays.sort(cards);

        if (this.isFullHouse() ||
            this.isFlush() ||
            this.isStraight() ||
            this.hasPair())
            return;

        this.type = Type.HIGH_CARD;
        this.highestCard = cards[4];
    }

    public boolean isFullHouse() {
        if (!cards[0].getFace().equals(cards[1].getFace()) ||
            !cards[3].getFace().equals(cards[4].getFace()))
            return false;

        if (cards[2].getFace().equals(cards[1].getFace())) {
            this.type = Type.FULL_HOUSE;
            this.highestCard = cards[2];
            return true;
        }
        else if (cards[2].getFace().equals(cards[3].getFace())) {
            this.type = Type.FULL_HOUSE;
            this.highestCard = cards[4];
            return true;
        }

        return false;
    }

    public boolean isFlush() {
        if (cards[0].getSuit().equals(cards[1].getSuit()) &&
            cards[1].getSuit().equals(cards[2].getSuit()) &&
            cards[2].getSuit().equals(cards[3].getSuit()) &&
            cards[3].getSuit().equals(cards[4].getSuit())) {
            this.type = Type.FLUSH;
            this.highestCard = cards[4];
            return true;
        }

        return false;
    }

    public boolean isStraight() {
        Map<String, Integer> faceMap = new HashMap<String, Integer> ();
        faceMap.put(""A"", 14);
        faceMap.put(""2"", 2);
        faceMap.put(""3"", 3);
        faceMap.put(""4"", 4);
        faceMap.put(""5"", 5);
        faceMap.put(""6"", 6);
        faceMap.put(""7"", 7);
        faceMap.put(""8"", 8);
        faceMap.put(""9"", 9);
        faceMap.put(""10"", 10);
        faceMap.put(""J"", 11);
        faceMap.put(""Q"", 12);
        faceMap.put(""K"", 13);

        int count = 0;
        for (int i=0; i<5; ++i) {
            if ((faceMap.get(cards[i].getFace())+1) % 13 == faceMap.get(cards[(i+1)%5].getFace()) % 13)
                count++;
        }

        if (count == 4) {
            this.type = Type.STRAIGHT;
            this.highestCard = cards[4];
            return true;
        }

        return false;
    }

    public boolean hasPair() {
        int count = 0;
        for (int i=0; i<4; ++i) {
            if (cards[i].getFace().equals(cards[i+1].getFace())) {
                this.highestCard = cards[i+1];
                count++;
                i++;
            }
        }

        if (count == 2) {
            this.type = Type.TWO_PAIR;
            return true;
        }
        else if (count == 1) {
            this.type = Type.ONE_PAIR;
            return true;
        }

        return false;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@e751e6923243ed5e58751b9a235d3f46@"
"r04921115","3","0.1","103632","@58aec4cc51dcf7a37dc6830b72a5541c@import java.util.*;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
	private Card[] cards = new Card[5];

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
        return;
    }

    // TODO
    public int compareTo(Hand that) {
    	Arrays.sort(this.cards, Card.SUIT_ORDER);
    	Arrays.sort(that.cards, Card.SUIT_ORDER);
    	Arrays.sort(this.cards);
    	Arrays.sort(that.cards);
    	
    	String[] faceString = {""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9"",""10"",""J"",""Q"",""K"",""A""};
    	String[] suitString = {""Clubs"",""Diamonds"",""Hearts"",""Spades""};
    	String[] type= {""high card"",""one pair"",""two pair"",""straight"",""flush"",""full house""};

    	int[] faceint1 = new int[cards.length];
    	int[] suitint1 = new int[cards.length];
    	int[] faceint2 = new int[cards.length];
    	int[] suitint2 = new int[cards.length];
    	
    	int player1typeindex = 0;
    	int player2typeindex = 0;
    	
    	UF ufthisface = new UF(cards.length);
    	UF ufthatface = new UF(cards.length);
    	UF ufthissuit = new UF(cards.length);
    	UF ufthatsuit = new UF(cards.length);
    	
    	int samesuitcount=0;
    	int samefacecount=0;
    	
    	//faceint initialize
    	for(int i = 0; i<cards.length;i++){
        	for(int j = 0; j<faceString.length;j++){
        		if(this.cards[i].getFace().equals(faceString[j])){
        			faceint1[i] = j+1;
        		}
        		if(that.cards[i].getFace().equals(faceString[j])){
        			faceint2[i] = j+1;
        		}
    		}
    	}

    	//suitint initialize
    	for(int i = 0; i<cards.length;i++){
        	for(int j = 0; j<suitString.length;j++){
        		if(this.cards[i].getSuit().equals(suitString[j])){
        			suitint1[i] = j;
        		}
        		if(that.cards[i].getSuit().equals(suitString[j])){
        			suitint2[i] = j;
        		}
    		}
    	}
    	
    	//this union
    	for(int i =0; i<cards.length; i++){
        	for(int j =0; j<cards.length; j++){
        		if(this.cards[i].getFace().equals(this.cards[j].getFace())){
        			ufthisface.union(i, j);
        		}
        		if(this.cards[i].getSuit().equals(this.cards[j].getSuit())){
        			ufthissuit.union(i, j);
        		}
        	}
    	}
    	
    	//that union
    	for(int i =0; i<cards.length; i++){
    		for(int j =0; j<cards.length; j++){
        		if(that.cards[i].getFace().equals(that.cards[j].getFace())){
        			ufthatface.union(i, j);
        		}
        		if(that.cards[i].getSuit().equals(that.cards[j].getSuit())){
        			ufthatsuit.union(i, j);
        		}
        	}
    	}

    	//list 1
		ArrayList<String> arrlist1 = new ArrayList<String>();
    	int samecount;
    	if(ufthisface.count()==2){
			player1typeindex = 5;
    	}else if(ufthissuit.count()==1){
    		player1typeindex=4;
    	}else if(ufthisface.count()==3){
    		for(int i = 0;i<cards.length-2;i++){
    			if(faceint1[i]==faceint1[i+2]){
    				player1typeindex=1;
    				break;
    			}else{
    				player1typeindex=2;
    			}
    		}
    	}else if(ufthisface.count()==4){
    		player1typeindex=1;
    	}else if(ufthisface.count()==5){
    		boolean flag = true;
    		for(int i = 1;i<cards.length;i++){
    			if((faceint1[i]-faceint1[i-1])!=1){
    				flag=false;
    			}
    		}
    		if(flag == true){
    			player1typeindex=3;
    		}else if(faceint1[0]==2 & faceint1[1]==3 & faceint1[2]==4 & faceint1[3]==5 & faceint1[4]==14){
	    		player1typeindex=3;
			}else{
				player1typeindex=0;
			}
    	}
    	
    	
    	//list 2
    	ArrayList<String> arrlist2 = new ArrayList<String>();
    	if(ufthatface.count()==2){
			player2typeindex = 5;
    	}else if(ufthatsuit.count()==1){
    		player2typeindex=4;
    	}else if(ufthatface.count()==3){
    		for(int i = 0;i<cards.length-2;i++){
    			if(faceint2[i]==faceint2[i+2]){
    				player2typeindex=1;
    				break;
    			}else{
    				player2typeindex=2;
    			}
    		}
    	}else if(ufthatface.count()==4){
    		player2typeindex=1;
    	}else if(ufthatface.count()==5){
    		boolean flag = true;
    		for(int i = 1;i<cards.length;i++){
    			if((faceint2[i]-faceint2[i-1])!=1){
    				flag=false;
    			}
    		}
    		if(flag == true){
    			player2typeindex=3;
    		}else if(faceint2[0]==2 & faceint2[1]==3 & faceint2[2]==4 & faceint2[3]==5 & faceint2[4]==14){
	    		player2typeindex=3;
			}else{
				player2typeindex=0;
			}
    	}
    	
    	
    	//compare
    	int highface1=0;
    	int highface2=0;
    	int highsuit1=0;
    	int highsuit2=0;
    	
    	if(player1typeindex > player2typeindex){
    		return +1;
    	}else if(player1typeindex < player2typeindex){
    		return -1;
    	}else if(player1typeindex == player2typeindex){
    		if(player1typeindex == 5){
    			for(int i = 0;i<cards.length-2;i++){
        			if(faceint1[i]==faceint1[i+2]){
        				highface1=faceint1[i];
        				highsuit1=suitint1[i];
        			}
        			if(faceint2[i]==faceint2[i+2]){
        				highface2=faceint2[i];
        				highsuit2=suitint2[i];
        			}
    			}
    			if(highface1 > highface2){
    				return +1;
    			}else if(highface1 < highface2){
    				return -1;
    			}else{
    				if(highsuit1 > highsuit2){
        				return +1;
        			}else if(highsuit1 < highsuit2){
        				return -1;
        			}else{
        				return 0;
        			}
    			}
    		}
    		if(player1typeindex==2 || player1typeindex==1){
    			for(int i = cards.length-1; i>0;i--){
    				if(faceint1[i]==faceint1[i-1]){
    					highface1=faceint1[i];
    					highsuit1=suitint1[i];
    					break;
    				}
    			}
    			for(int i = cards.length-1; i>0;i--){
    				if(faceint2[i]==faceint2[i-1]){
    					highface2=faceint2[i];
    					highsuit2=suitint2[i];
    					break;
    				}
    			}
    			if(highface1 > highface2){
    				return +1;
    			}else if(highface1 < highface2){
    				return -1;
    			}else{
    				if(highsuit1 > highsuit2){
        				return +1;
        			}else if(highsuit1 < highsuit2){
        				return -1;
        			}else{
        				return 0;
        			}
    			}
    		}
    		if(player1typeindex==3){
    			if(faceint1[0]==2 & faceint1[cards.length-1]==14){
    				highface1=faceint1[cards.length-1-1];
    				highsuit1=suitint1[cards.length-1-1];
    			}else{
    				highface1=faceint1[cards.length-1];
    				highsuit1=suitint1[cards.length-1];
    			}
    			if(faceint2[0]==2 & faceint2[cards.length-1]==14){
    				highface2=faceint2[cards.length-1-1];
    				highsuit2=suitint2[cards.length-1-1];
    			}else{
    				highface2=faceint2[cards.length-1];
    				highsuit2=suitint2[cards.length-1];
    			}
    			if(highface1 > highface2){
    				return +1;
    			}else if(highface1 < highface2){
    				return -1;
    			}else{
    				if(highsuit1 > highsuit2){
        				return +1;
        			}else if(highsuit1 < highsuit2){
        				return -1;
        			}else{
        				return 0;
        			}
    			}
    		}
    		if(player1typeindex==0 || player1typeindex==4){
    			if(faceint1[cards.length-1] > faceint2[cards.length-1]){
    				return +1;
    			}else if(faceint1[cards.length-1] < faceint2[cards.length-1]){
    				return -1;
    			}else{
    				if(suitint1[cards.length-1] > suitint2[cards.length-1]){
        				return +1;
        			}else if(suitint1[cards.length-1] < suitint2[cards.length-1]){
        				return -1;
        			}else{
        				return 0;
        			}
    			}
    		}
    	}
    	return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

/*
 * HW7 - Priority Queue

Assignment

Hand.java
請實作一份 Hand 型別。並上傳至作業 7-1。Hand 為五張撲克牌的組合，需要實作 Comparable 介面 (interface)。此作業中，我們只考慮 full house > flush > straight > two pair > one pair > high card (Reference: http://en.wikipedia.org/wiki/List_of_poker_hands) 這六種組合。詳細的 api 請參考附件。

HandPQ.java
此份作業需要同學讀進一個文字檔。文字檔的第一行會利用逗點隔開，其中包含兩個數字，第一個數字代表需要處理的 Hand 個數，第二個數字代表欲求得第幾大的 Hand。第二行開始到文件的結尾則為五張牌的組合。舉例來說，第一行為 4,3，即代表第 2~5 行為需要處理的 Hand，而答案則是要找出 2~5 行這 4 個 Hand 裡面第 3 大的 Hand。最後請輸出這個 Hand 的所有 Card (依據 Card 的大小，由小到大輸出)。

Example Input:

4,3
Hearts_10,Hearts_9,Hearts_Q,Hearts_J,Hearts_8
Spades_A,Hearts_K,Hearts_10,Diamonds_4,Clubs_4
Diamonds_J,Diamonds_K,Diamonds_Q,Diamonds_10,Clubs_9
Clubs_A,Hearts_8,Diamonds_Q,Diamonds_10,Clubs_2

Example Output:

Clubs_4,Diamonds_4,Hearts_10,Hearts_K,Spades_A Note
1. 批改系統會獨立的批改 HW7-1 與 HW7-2，所以兩者的 Hand.java 不會互通。

2. 本次作業請使用 Priority Queue 來實作，批改系統會測試程式所使用的記憶體評估分數。

3. 作業中會使用到 HW6 的 Card.java，批改時會使用批改系統的 Card.java。

4. HW7-1 可以從 HW6 的 Player.java 經過部分的修改後建構。

Files: hw7.zip

 */
@58aec4cc51dcf7a37dc6830b72a5541c@"
"r04631023","3","0.09","105552","@af21b69be642d0049f66842717f4fae3@import java.util.Arrays;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    private String[] checkFace = new String[]{""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"", ""A""};
    private String[] checkSuit = new String[]{""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};
    private Card[] checkCardsFace = new Card[13];
    private Card[] checkCardsSuit = new Card[4];
    double[][] check = new double[5][2];


    public double[][] checkhandspoint(Card[] cards) {
        double[][] checkhandspoint = new double[cards.length][2];
        for (int k = 0; k < cards.length; k++) {
            for (int i = 0; i < 13; i++) {
                if (cards[k].getFace().compareTo(checkFace[i]) == 0) {
                    checkhandspoint[k][0] = i;
                    break;
                }
            }
            for (int i = 0; i < 4; i++) {
                if (cards[k].getSuit().compareTo(checkSuit[i]) == 0) {
                    checkhandspoint[k][1] = i;
                    checkhandspoint[k][1] = checkhandspoint[k][1] / 10;
                    break;
                }
            }
        }
        return checkhandspoint;
    }
    
    public double checkhands(Card[] cards) {
        double handpoints = 0;
        Arrays.sort(cards);
        double[][] check = checkhandspoint(cards);
        if (check[0][0] == check[1][0] && check[1][0] != check[2][0] && check[2][0] == check[3][0] && check[3][0] != check[4][0]) {
            handpoints = 2 * 13 + check[3][0] + check[3][1]; //two pair
            return handpoints;
        } else if (check[0][0] == check[1][0] && check[1][0] != check[2][0] && check[2][0] != check[3][0] && check[3][0] == check[4][0]) {
            handpoints = 2 * 13 + check[4][0] + check[4][1]; //two pair
            return handpoints;
        } else if (check[0][0] != check[1][0] && check[1][0] == check[2][0] && check[2][0] != check[3][0] && check[3][0] == check[4][0]) {
            handpoints = 2 * 13 + check[4][0] + check[4][1]; //two pair
            return handpoints;
        } else if (check[0][0] == check[1][0] && check[1][0] != check[2][0] && check[2][0] == check[3][0] && check[3][0] == check[4][0]) {
            handpoints = 5 * 13 + check[4][0] + check[4][1]; //full house
            return handpoints;
        } else if (check[0][0] == check[1][0] && check[1][0] == check[2][0] && check[2][0] != check[3][0] && check[3][0] == check[4][0]) {
            handpoints = 5 * 13 + check[2][0] + check[2][1]; //full house
            return handpoints;
        } else if (check[0][1] == check[1][1] && check[0][1] == check[2][1] && check[0][1] == check[3][1] && check[0][1] == check[4][1]) {
            handpoints = 4 * 13 + check[4][0] + check[4][1]; //flush
            return handpoints;
        } else if (check[4][0] - check[3][0] == check[3][0] - check[2][0] && check[3][0] - check[2][0] == check[2][0] - check[1][0] && check[2][0] - check[1][0] == check[1][0] - check[0][0]) {
            handpoints = 3 * 13 + check[4][0] + check[4][1];//Straight
            return handpoints;
        } else if (check[0][0] != check[1][0] && check[1][0] != check[2][0] && check[2][0] != check[3][0] && check[3][0] != check[4][0]) {
            handpoints = check[4][0] + check[4][1]; //high card
            return handpoints;
        } else if (check[3][0] == check[4][0]) {
            handpoints = 1 * 13 + check[4][0] + check[4][1]; //one pair
            return handpoints;
        } else if (check[2][0] == check[3][0]) {
            handpoints = 1 * 13 + check[3][0] + check[3][1]; //one pair
            return handpoints;
        } else if (check[1][0] == check[2][0]) {
            handpoints = 1 * 13 + check[2][0] + check[2][1]; //one pair
            return handpoints;
        } else if (check[0][0] == check[1][0]) {
            handpoints = 1 * 13 + check[1][0] + check[1][1]; //one pair
            return handpoints;
        }
        return handpoints;
    }

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards ;
        return;
    }

    // TODO
    public int compareTo(Hand that) {
        if (checkhands(this.cards) > checkhands(that.cards)) {
            return 1;
        } else if (checkhands(this.cards) == checkhands(that.cards)) {
            return 0;
        } else {
            return -1;
        }
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@af21b69be642d0049f66842717f4fae3@"
"b99611017","0","0","0","@b845f8fe5765799a2cc86277f2e24b25@
import java.util.Arrays;




public class Hand implements Comparable<Hand> {


    private Card[] cards; 

    public int[] cardLabel(Card[] cards) {

        int[] label = new int[5];

        for (int i = 0; i < 5; i++) {

            int value = 0;
            if (""A"".equals(cards[i].getFace())) {
                value += 12;
            } else if (""K"".equals(cards[i].getFace())) {
                value += 11;
            } else if (""Q"".equals(cards[i].getFace())) {
                value += 10;
            } else if (""J"".equals(cards[i].getFace())) {
                value += 9;
            } else if (""10"".equals(cards[i].getFace())) {
                value += 8;
            } else if (""9"".equals(cards[i].getFace())) {
                value += 7;
            } else if (""8"".equals(cards[i].getFace())) {
                value += 6;
            } else if (""7"".equals(cards[i].getFace())) {
                value += 5;
            } else if (""6"".equals(cards[i].getFace())) {
                value += 4;
            } else if (""5"".equals(cards[i].getFace())) {
                value += 3;
            } else if (""4"".equals(cards[i].getFace())) {
                value += 2;
            } else if (""3"".equals(cards[i].getFace())) {
                value += 1;
            } else if (""2"".equals(cards[i].getFace())) {
                value += 0;
            }
            if (""Spades"".equals(cards[i].getSuit())) {
                value = value * 4 + 3;
            } else if (""Hearts"".equals(cards[i].getSuit())) {
                value = value * 4 + 2;
            } else if (""Diamonds"".equals(cards[i].getSuit())) {
                value = value * 4 + 1;
            } else if (""Clubs"".equals(cards[i].getSuit())) {
                value = value * 4;
            }
            label[i] = value;
        }
        return label;
    }

    private int findMax(int[] a) {

        int b = 0;
        for (int i = 0; i < a.length; i++) {
            if (a[i] > b) {
                b = a[i];
            }
        }
        return b;
    }

    private int findGroup(int[] a) {
        int b = 0;
        for (int i = 0; i < a.length; i++) {
            if (a[i] != 0) {
                b++;
            }
        }
        return b;
    }

    //找大招
    private int[] combo(int[] card) {
        int faceGroup = 0;
        int suitGroup = 0;
        int fgMax = 0;
        int sgMax = 0;
        int ans[] = new int[2];

        int[] face = new int[13];
        int[] suit = new int[4];
        for (int i = 0; i < card.length; i++) {
            face[card[i] /4]++;
            suit[card[i] % 4]++;

        }

        faceGroup = findGroup(face);
        suitGroup = findGroup(suit);
        fgMax = findMax(face);
        sgMax = findMax(suit);
        //full house
        if (faceGroup == 2 && fgMax == 3) {
            ans[0] = 5;
            if(card[0]/4==card[2]/4)
            {
                ans[1]=card[2];
            }
            else if(card[0]/4!=card[2]/4)
            {
                ans[1]=card[4];
            }
            
        }
        //flush
        if (suitGroup == 1 && sgMax == 5 && ans[0] == 0) {

            ans[0] = 4;
            ans[1] = card[card.length-1];
           
        }
        //straight    and high card
        if (faceGroup == 5 && fgMax == 1 && ans[0] == 0) {

           int TF = 0;
            for (int i = 0; i < card.length - 2; i++) {
                if (card[i + 1] /4 == card[i] /4 + 1) {
                    TF +=1;
                } 
            }
            if ((TF==3&&card[3]/4+1==card[4]/4)||(TF==3&&card[3]/4+9==card[4]/4)) {
                ans[0] = 2;
                ans[1] = card[card.length-1];
                
            } else {
                ans[0] = 0;
                ans[1] = card[card.length - 1];
            }
           
        }
        //two pair
        if (faceGroup == 3 && fgMax == 2 && ans[0] == 0) {
            ans[0] = 2;
            int temp = 0;
            for (int i = 0; i < face.length; i++) {
                if (face[i] == 2) {
                    temp = i;
                }
            }
            for (int i = 0; i < card.length; i++) {
                if (card[i] /4 == temp) {
                    ans[1] = card[i];
                }
            }
           
        }
        //one pair
        if (faceGroup == 4 && fgMax == 2 && ans[0] == 0) {
            ans[0] = 1;
            int temp = 0;
            for (int i = 0; i < face.length; i++) {
                if (face[i] == 2) {
                    temp = i;
                }
            }
            for (int i = 0; i < card.length; i++) {
                if (card[i] /4 == temp) {
                    
                    ans[1] = card[i];
                }
            }
          
        }

        return ans;
    }
    
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
    
       Arrays.sort(this.cards);
       
    }

    // TODO
    public int compareTo(Hand that) {
       
        Arrays.sort(that.cards);
        int ans = 0;
        int[] a = combo(cardLabel(this.cards));
        int[] b = combo(cardLabel(that.cards));
        if (a[0] > b[0]) {
            ans = 1;
        } else if (a[0] < b[0]) {
            ans = -1;
        } else if (a[0] == b[0] && a[1] > b[1]) {
            ans = 1;
        } else if (a[0] == b[0] && a[1] < b[1]) {
            ans = -1;
        }
        return ans;
        
    
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

    
}

@b845f8fe5765799a2cc86277f2e24b25@"
"b99611017","0","0","0","@b845f8fe5765799a2cc86277f2e24b25@
import java.util.Arrays;




public class Hand implements Comparable<Hand> {


    private Card[] cards; 

    public int[] cardLabel(Card[] cards) {

        int[] label = new int[5];

        for (int i = 0; i < 5; i++) {

            int value = 0;
            if (""A"".equals(cards[i].getFace())) {
                value += 12;
            } else if (""K"".equals(cards[i].getFace())) {
                value += 11;
            } else if (""Q"".equals(cards[i].getFace())) {
                value += 10;
            } else if (""J"".equals(cards[i].getFace())) {
                value += 9;
            } else if (""10"".equals(cards[i].getFace())) {
                value += 8;
            } else if (""9"".equals(cards[i].getFace())) {
                value += 7;
            } else if (""8"".equals(cards[i].getFace())) {
                value += 6;
            } else if (""7"".equals(cards[i].getFace())) {
                value += 5;
            } else if (""6"".equals(cards[i].getFace())) {
                value += 4;
            } else if (""5"".equals(cards[i].getFace())) {
                value += 3;
            } else if (""4"".equals(cards[i].getFace())) {
                value += 2;
            } else if (""3"".equals(cards[i].getFace())) {
                value += 1;
            } else if (""2"".equals(cards[i].getFace())) {
                value += 0;
            }
            if (""Spades"".equals(cards[i].getSuit())) {
                value = value * 4 + 3;
            } else if (""Hearts"".equals(cards[i].getSuit())) {
                value = value * 4 + 2;
            } else if (""Diamonds"".equals(cards[i].getSuit())) {
                value = value * 4 + 1;
            } else if (""Clubs"".equals(cards[i].getSuit())) {
                value = value * 4;
            }
            label[i] = value;
        }
        return label;
    }

    private int findMax(int[] a) {

        int b = 0;
        for (int i = 0; i < a.length; i++) {
            if (a[i] > b) {
                b = a[i];
            }
        }
        return b;
    }

    private int findGroup(int[] a) {
        int b = 0;
        for (int i = 0; i < a.length; i++) {
            if (a[i] != 0) {
                b++;
            }
        }
        return b;
    }

    //找大招
    private int[] combo(int[] card) {
        int faceGroup = 0;
        int suitGroup = 0;
        int fgMax = 0;
        int sgMax = 0;
        int ans[] = new int[2];

        int[] face = new int[13];
        int[] suit = new int[4];
        for (int i = 0; i < card.length; i++) {
            face[card[i] /4]++;
            suit[card[i] % 4]++;

        }

        faceGroup = findGroup(face);
        suitGroup = findGroup(suit);
        fgMax = findMax(face);
        sgMax = findMax(suit);
        //full house
        if (faceGroup == 2 && fgMax == 3) {
            ans[0] = 5;
            if(card[0]/4==card[2]/4)
            {
                ans[1]=card[2];
            }
            else if(card[0]/4!=card[2]/4)
            {
                ans[1]=card[4];
            }
            
        }
        //flush
        if (suitGroup == 1 && sgMax == 5 && ans[0] == 0) {

            ans[0] = 4;
            ans[1] = card[card.length-1];
           
        }
        //straight    and high card
        if (faceGroup == 5 && fgMax == 1 && ans[0] == 0) {

           int TF = 0;
            for (int i = 0; i < card.length - 2; i++) {
                if (card[i + 1] /4 == card[i] /4 + 1) {
                    TF +=1;
                } 
            }
            if ((TF==3&&card[3]/4+1==card[4]/4)||(TF==3&&card[3]/4+9==card[4]/4)) {
                ans[0] = 2;
                ans[1] = card[card.length-1];
                
            } else {
                ans[0] = 0;
                ans[1] = card[card.length - 1];
            }
           
        }
        //two pair
        if (faceGroup == 3 && fgMax == 2 && ans[0] == 0) {
            ans[0] = 2;
            int temp = 0;
            for (int i = 0; i < face.length; i++) {
                if (face[i] == 2) {
                    temp = i;
                }
            }
            for (int i = 0; i < card.length; i++) {
                if (card[i] /4 == temp) {
                    ans[1] = card[i];
                }
            }
           
        }
        //one pair
        if (faceGroup == 4 && fgMax == 2 && ans[0] == 0) {
            ans[0] = 1;
            int temp = 0;
            for (int i = 0; i < face.length; i++) {
                if (face[i] == 2) {
                    temp = i;
                }
            }
            for (int i = 0; i < card.length; i++) {
                if (card[i] /4 == temp) {
                    
                    ans[1] = card[i];
                }
            }
          
        }

        return ans;
    }
    
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
    
       Arrays.sort(this.cards);
       
    }

    // TODO
    public int compareTo(Hand that) {
       
        Arrays.sort(that.cards);
        int ans = 0;
        int[] a = combo(cardLabel(this.cards));
        int[] b = combo(cardLabel(that.cards));
        if (a[0] > b[0]) {
            ans = 1;
        } else if (a[0] < b[0]) {
            ans = -1;
        } else if (a[0] == b[0] && a[1] > b[1]) {
            ans = 1;
        } else if (a[0] == b[0] && a[1] < b[1]) {
            ans = -1;
        }
        return ans;
        
    
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

    
}

@b845f8fe5765799a2cc86277f2e24b25@"
"r03849033","0","0.37","106064","@9e7042b0aab6d50c861642748cb7ec73@
import java.util.Arrays;

public class Player implements Comparable<Player>{ 

    private Card[] cards = new Card[5];
    private String name;
    private Card thismax;
    private Card thatmax;     
    // DO NOT MODIFY THIS
    public Player(String name) {
        this.name = name;
    }
     
    // DO NOT MODIFY THIS
    public String getName() {
        return this.name;
     }
     

    // DO NOT MODIFY THIS
    public void setCards(Card[] cards) {
        this.cards = cards;
    }
     
    // TODO 
    public int compareTo(Player that) {
    Arrays.sort(this.cards);
    Arrays.sort(that.cards);    
    int thisvalue = 0;
    int thatvalue = 0;
   
    int[] thispair = new int[4];
    int[] thatpair = new int[4];
    int this1 = 0;
    int that1 = 0;    
    int[] thisstraight = new int[5];
    int[] thatstraight = new int[5]; 
    int thisst = 0;
    int thatst = 0;   
    int[] thisflush  = new int[4];
    int[] thatflush  = new int[4];    

    for(int j = 0; j < 4; j++) {
        if(this.cards[j].getFace().equals(this.cards[j+1].getFace())) {thispair[j]=1; this1=j+1; }
        if(that.cards[j].getFace().equals(that.cards[j+1].getFace())) {thatpair[j]=1; that1=j+1;}        
    } 
    String[] ranks  = { ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"",""A"" };    
    for(int i = 0; i < 13; i++) {
    for(int j = 0; j < 5; j++) {    
        if(this.cards[j].getFace().equals(ranks[i])) {thisstraight[j]=i; }
        if(that.cards[j].getFace().equals(ranks[i])) {thatstraight[j]=i; }
    }}        
    for(int j = 1; j < 5; j++) {
        if(thisstraight[j]-1==thisstraight[j-1]){thisst++;}
        if(thatstraight[j]-1==thatstraight[j-1]){thatst++;}
     }
    for(int j = 0; j < 4; j++) {
        if(this.cards[j].getSuit().equals(this.cards[j+1].getSuit())) {thisflush[j]=1; }
        if(that.cards[j].getSuit().equals(that.cards[j+1].getSuit())) {thatflush[j]=1; }        
    }
    int[] case1 = {1,1,0,1};
    int[] case2 = {1,0,1,1};
    int[] case3 = {1,1,1,1};
    
    int[] case4 = {1,0,1,0}; 
    int[] case5 = {1,0,0,1};    
    int[] case6 = {0,1,0,1};
    
    int[] case7 = {1,1,1,0};  
    int[] case8 = {0,1,1,1};
    
    int[] case9 = {0,0,0,0};
    int[] case10 = {0,1,2,3,12};    
    if(Arrays.equals(thispair,case1)){ 
        thisvalue=6;  thismax = this.cards[2]; }
    else  if(Arrays.equals(thispair,case2)){ 
        thisvalue=6;   thismax = this.cards[4]; }
    
    else  if(Arrays.equals(thisflush,case3)){ 
        thisvalue=5;   thismax = this.cards[4]; }
    
    else  if(thisst==4){ 
        thisvalue=4;   thismax = this.cards[4]; }
    else  if(Arrays.equals(thisstraight,case10)){ 
        thisvalue=3;   thismax = this.cards[4]; } 
    
    else  if(Arrays.equals(thispair,case4) || Arrays.equals(thispair,case7)){ 
        thisvalue=2;   thismax = this.cards[3]; }    
    else  if(Arrays.equals(thispair,case5) || Arrays.equals(thispair,case6) || Arrays.equals(thispair,case8)){ 
        thisvalue=2;   thismax = this.cards[4]; } 
    else if (!Arrays.equals(thispair,case9)){
        thisvalue=1;   thismax = this.cards[this1];}
    else {  thismax = this.cards[4];}
    
    if(Arrays.equals(thatpair,case1)){ 
        thatvalue=6;   thatmax = that.cards[2]; }
    else  if(Arrays.equals(thatpair,case2)){ 
        thatvalue=6;   thatmax = that.cards[4]; }
    
    else  if(Arrays.equals(thatflush,case3)){ 
        thatvalue=5;   thatmax = that.cards[4]; }
    
    else  if(thatst==4){ 
        thatvalue=4;   thatmax = that.cards[4]; } 
    else  if(Arrays.equals(thatstraight,case10)){ 
        thatvalue=3;   thatmax = that.cards[4]; }  
    
    else  if(Arrays.equals(thatpair,case4) || Arrays.equals(thatpair,case7)){ 
        thatvalue=2;   thatmax = that.cards[3]; }    
    else  if(Arrays.equals(thatpair,case5) || Arrays.equals(thatpair,case6) || Arrays.equals(thatpair,case8)){ 
        thatvalue=2;   thatmax = that.cards[4]; } 
    else if (!Arrays.equals(thatpair,case9)){
        thatvalue=1;   thatmax = that.cards[that1];}
    else {  thatmax = that.cards[4];}    
   
    if(thisvalue>thatvalue){ return 1;}
    else if(thisvalue<thatvalue){ return -1;}
    
    else if(thismax.compareTo(thatmax)>0){return 1;}
    else if(thismax.compareTo(thatmax)<0){return -1;}    
        // complete this function so the Player can be sorted according to the cards he/she has.
        return 0;
    }
}

@9e7042b0aab6d50c861642748cb7ec73@"
"b03611023","0","0","0","@23a08485bb7fbbdc1a4884afa30fa4b5@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    private int[] num;
    private int[] color;
    private String[] copy = {""0"",""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9"",""10"", ""J"", ""Q"", ""K"", ""A""};
    private String[] Suit = {""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
        return;
    }

    // TODO
    public int compareTo(Hand that) {
        int a,b;
        this.cards = this.arr(this.cards);
        that.cards = that.arr(that.cards);
        
        this.findnum(this.cards);
        that.findnum(that.cards);
        
        a = this.findtype(this.num, this.color);
        b = that.findtype(that.num, that.color);
        
        if(a>b) return 1;
        else if(a<b) return -1;
        else{
            if(a==5){
                int aa,bb;
                aa = this.confullhouse(this.num);
                bb = that.confullhouse(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]>that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                    else return -1;
                }
            }
            if(a==4 || a==3 ||a==2 ||a==-1){               
                if(this.num[4]>that.num[4]) return 1;
                else if(this.num[4]>that.num[4]) return -1;
                else{
                    if(this.color[4]>that.color[4]) return 1;
                    else return -1;
                }
            }
            if(a==1){
                 int aa,bb;
                aa = this.contwopair(this.num);
                bb = that.contwopair(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]>that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                    else return -1;
                }
            }
            if(a==0){
                 int aa,bb;
                aa = this.conpair(this.num);
                bb = that.conpair(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]>that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                    else return -1;
                }
            }
        }
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

    public Card[] arr(Card[] cards){
       for(int i = 1;i<5;i++){
         for(int j = i;j>0;j--){
             if(cards[j].compareTo(cards[j-1])==1){
                 Card temp = cards[j-1];
                    cards[j-1] = cards[j];
                    cards[j] = temp;
             }
             else break;
         }
                    
       }
       return cards;
 }
    public void findnum(Card[] cards){
        for(int i = 0;i<5;i++){
            for(int j = 0;j<16;j++){
                if(cards[i].getFace().equals(copy[j])){
                    num[i] = j;
                    break;
                }
            }
            for(int k=0;k<4;k++){
                if(cards[i].getSuit().equals(Suit[k])){
                    color[i] = k;
                    break;
                }
            }
        }
        
    }
    public int findtype(int[] fa, int[] su){
        
         if(fa[0] ==fa[1] && fa[0] == fa[2] && fa[3] == fa[4])
            return 5;
        else if(fa[0] ==fa[1] && fa[2] == fa[3] && fa[2] == fa[4])
            return 5;
        else if(su[0] == su[1] && su[0] == su[2] && su[0] == su[3] && su[0] == su[4])
            return 4;
        else if(fa[0]+1==fa[1]&&fa[0]+2==fa[2]&&fa[0]+3==fa[3]
                &&fa[0]+4==fa[4])
            return 3;
        else if(fa[4]==14&&fa[3]==13&&fa[2]==12&&fa[1]==11&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==13&&fa[2]==12&&fa[1]==3&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==13&&fa[2]==4&&fa[1]==3&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==5&&fa[2]==4&&fa[1]==3&&fa[0]==2)
            return 2;
         else if(fa[0]==fa[1]&&fa[2]==fa[3])
             return 1;
         else if(fa[0]==fa[1]&&fa[3]==fa[4])
             return 1;
         else if(fa[1]==fa[2]&&fa[3]==fa[4])
             return 1;
         else if(fa[0]==fa[1])
             return 0;
         else if(fa[1]==fa[2])
             return 0;
         else if(fa[2]==fa[3])
             return 0;
         else if(fa[3]==fa[4])
             return 0;
        else
             return -1;
}
    public int confullhouse(int[] fa){
         if(fa[0]==fa[1]&&fa[0]==fa[2])
              return 2;
          else
         return 4;
    }
    public int contwopair(int[] fa){
        if(fa[2]==fa[3]) return 3;             
        else return 4;              
    }
    public int conpair(int[] fa){
         if(fa[0]==fa[1])
              return 1;
          else if(fa[1]==fa[2])
              return 2;
          else if(fa[2]==fa[3])
              return 3;
          else
              return 4;
    }
    public static void main(String[] args){
       
     } 
}
@23a08485bb7fbbdc1a4884afa30fa4b5@"
"b03611023","0","0","0","@13288972f88e21e8a904146cc76c3e66@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    private int[] num;
    private int[] color;
    private String[] copy = {""0"",""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9"",""10"", ""J"", ""Q"", ""K"", ""A""};
    private String[] Suit = {""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
        
    }

    // TODO
    public int compareTo(Hand that) {
        int a,b;
       // this.cards = this.arr(this.cards);
        //that.cards = that.arr(that.cards);
        
        this.findnum(this.cards);
        that.findnum(that.cards);
        
        a = this.findtype(this.num, this.color);
        b = that.findtype(that.num, that.color);
        
        if(a>b) return 1;
        else if(a<b) return -1;
        else{
            if(a==5){
                int aa,bb;
                aa = this.confullhouse(this.num);
                bb = that.confullhouse(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]>that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                    else return -1;
                }
            }
            if(a==4 || a==3 ||a==2 ||a==-1){               
                if(this.num[4]>that.num[4]) return 1;
                else if(this.num[4]>that.num[4]) return -1;
                else{
                    if(this.color[4]>that.color[4]) return 1;
                    else return -1;
                }
            }
            if(a==1){
                 int aa,bb;
                aa = this.contwopair(this.num);
                bb = that.contwopair(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]>that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                    else return -1;
                }
            }
            if(a==0){
                 int aa,bb;
                aa = this.conpair(this.num);
                bb = that.conpair(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]>that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                    else return -1;
                }
            }
        }
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

    public Card[] arr(Card[] cards){
       for(int i = 1;i<5;i++){
         for(int j = i;j>0;j--){
             if(cards[j].compareTo(cards[j-1])==1){
                 Card temp = cards[j-1];
                    cards[j-1] = cards[j];
                    cards[j] = temp;
             }
             else break;
         }
                    
       }
       return cards;
 }
    public void findnum(Card[] cards){
        for(int i = 0;i<5;i++){
            for(int j = 0;j<16;j++){
                if(cards[i].getFace().equals(copy[j])){
                    num[i] = j;
                    break;
                }
            }
            for(int k=0;k<4;k++){
                if(cards[i].getSuit().equals(Suit[k])){
                    color[i] = k;
                    break;
                }
            }
        }
        
    }
    public int findtype(int[] fa, int[] su){
        
         if(fa[0] ==fa[1] && fa[0] == fa[2] && fa[3] == fa[4])
            return 5;
        else if(fa[0] ==fa[1] && fa[2] == fa[3] && fa[2] == fa[4])
            return 5;
        else if(su[0] == su[1] && su[0] == su[2] && su[0] == su[3] && su[0] == su[4])
            return 4;
        else if(fa[0]+1==fa[1]&&fa[0]+2==fa[2]&&fa[0]+3==fa[3]
                &&fa[0]+4==fa[4])
            return 3;
        else if(fa[4]==14&&fa[3]==13&&fa[2]==12&&fa[1]==11&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==13&&fa[2]==12&&fa[1]==3&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==13&&fa[2]==4&&fa[1]==3&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==5&&fa[2]==4&&fa[1]==3&&fa[0]==2)
            return 2;
         else if(fa[0]==fa[1]&&fa[2]==fa[3])
             return 1;
         else if(fa[0]==fa[1]&&fa[3]==fa[4])
             return 1;
         else if(fa[1]==fa[2]&&fa[3]==fa[4])
             return 1;
         else if(fa[0]==fa[1])
             return 0;
         else if(fa[1]==fa[2])
             return 0;
         else if(fa[2]==fa[3])
             return 0;
         else if(fa[3]==fa[4])
             return 0;
        else
             return -1;
}
    public int confullhouse(int[] fa){
         if(fa[0]==fa[1]&&fa[0]==fa[2])
              return 2;
          else
         return 4;
    }
    public int contwopair(int[] fa){
        if(fa[2]==fa[3]) return 3;             
        else return 4;              
    }
    public int conpair(int[] fa){
         if(fa[0]==fa[1])
              return 1;
          else if(fa[1]==fa[2])
              return 2;
          else if(fa[2]==fa[3])
              return 3;
          else
              return 4;
    }
    public static void main(String[] args){
       
     } 
}
@13288972f88e21e8a904146cc76c3e66@"
"b03611023","2","0.29","103328","@aac0e0cf71618c7732706e20a53f097c@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    private int[] num;
    private int[] color;
    private String[] copy = {""0"",""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9"",""10"", ""J"", ""Q"", ""K"", ""A""};
    private String[] Suit = {""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
        
    }

    // TODO
    public int compareTo(Hand that) {
        int a,b;
       /* this.cards = this.arr(this.cards);
        that.cards = that.arr(that.cards);
        
        this.findnum(this.cards);
        that.findnum(that.cards);
        
        a = this.findtype(this.num, this.color);
        b = that.findtype(that.num, that.color);
        
        if(a>b) return 1;
        else if(a<b) return -1;
        else{
            if(a==5){
                int aa,bb;
                aa = this.confullhouse(this.num);
                bb = that.confullhouse(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]>that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                    else return -1;
                }
            }
            if(a==4 || a==3 ||a==2 ||a==-1){               
                if(this.num[4]>that.num[4]) return 1;
                else if(this.num[4]>that.num[4]) return -1;
                else{
                    if(this.color[4]>that.color[4]) return 1;
                    else return -1;
                }
            }
            if(a==1){
                 int aa,bb;
                aa = this.contwopair(this.num);
                bb = that.contwopair(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]>that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                    else return -1;
                }
            }
            if(a==0){
                 int aa,bb;
                aa = this.conpair(this.num);
                bb = that.conpair(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]>that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                    else return -1;
                }
            }
        }*/
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

    public Card[] arr(Card[] cards){
       for(int i = 1;i<5;i++){
         for(int j = i;j>0;j--){
             if(cards[j].compareTo(cards[j-1])==1){
                 Card temp = cards[j-1];
                    cards[j-1] = cards[j];
                    cards[j] = temp;
             }
             else break;
         }
                    
       }
       return cards;
 }
    public void findnum(Card[] cards){
        for(int i = 0;i<5;i++){
            for(int j = 0;j<16;j++){
                if(cards[i].getFace().equals(copy[j])){
                    num[i] = j;
                    break;
                }
            }
            for(int k=0;k<4;k++){
                if(cards[i].getSuit().equals(Suit[k])){
                    color[i] = k;
                    break;
                }
            }
        }
        
    }
    public int findtype(int[] fa, int[] su){
        
         if(fa[0] ==fa[1] && fa[0] == fa[2] && fa[3] == fa[4])
            return 5;
        else if(fa[0] ==fa[1] && fa[2] == fa[3] && fa[2] == fa[4])
            return 5;
        else if(su[0] == su[1] && su[0] == su[2] && su[0] == su[3] && su[0] == su[4])
            return 4;
        else if(fa[0]+1==fa[1]&&fa[0]+2==fa[2]&&fa[0]+3==fa[3]
                &&fa[0]+4==fa[4])
            return 3;
        else if(fa[4]==14&&fa[3]==13&&fa[2]==12&&fa[1]==11&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==13&&fa[2]==12&&fa[1]==3&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==13&&fa[2]==4&&fa[1]==3&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==5&&fa[2]==4&&fa[1]==3&&fa[0]==2)
            return 2;
         else if(fa[0]==fa[1]&&fa[2]==fa[3])
             return 1;
         else if(fa[0]==fa[1]&&fa[3]==fa[4])
             return 1;
         else if(fa[1]==fa[2]&&fa[3]==fa[4])
             return 1;
         else if(fa[0]==fa[1])
             return 0;
         else if(fa[1]==fa[2])
             return 0;
         else if(fa[2]==fa[3])
             return 0;
         else if(fa[3]==fa[4])
             return 0;
        else
             return -1;
}
    public int confullhouse(int[] fa){
         if(fa[0]==fa[1]&&fa[0]==fa[2])
              return 2;
          else
         return 4;
    }
    public int contwopair(int[] fa){
        if(fa[2]==fa[3]) return 3;             
        else return 4;              
    }
    public int conpair(int[] fa){
         if(fa[0]==fa[1])
              return 1;
          else if(fa[1]==fa[2])
              return 2;
          else if(fa[2]==fa[3])
              return 3;
          else
              return 4;
    }
    public static void main(String[] args){
       
     } 
}
@aac0e0cf71618c7732706e20a53f097c@"
"b03611023","0","0","0","@b0e59be8cd7b1394076c93ef423dd4bc@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    private int[] num;
    private int[] color;
    private String[] copy = {""0"",""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9"",""10"", ""J"", ""Q"", ""K"", ""A""};
    private String[] Suit = {""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
        
    }

    // TODO
    public int compareTo(Hand that) {
        int a,b;
     /*   this.cards = this.arr(this.cards);
        that.cards = that.arr(that.cards);
        
        this.findnum(this.cards);
        that.findnum(that.cards);*/
        
        a =4; /*this.findtype(this.num, this.color);*/
        b = 4;/*that.findtype(that.num, that.color);*/
        
        if(a>b) return 1;
        else if(a<b) return -1;
        else{
            if(a==5){
                int aa,bb;
                aa = this.confullhouse(this.num);
                bb = that.confullhouse(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]>that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                    else return -1;
                }
            }
            if(a==4 || a==3 ||a==2 ||a==-1){               
                if(this.num[4]>that.num[4]) return 1;
                else if(this.num[4]>that.num[4]) return -1;
                else{
                    if(this.color[4]>that.color[4]) return 1;
                    else return -1;
                }
            }
            if(a==1){
                 int aa,bb;
                aa = this.contwopair(this.num);
                bb = that.contwopair(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]>that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                    else return -1;
                }
            }
            if(a==0){
                 int aa,bb;
                aa = this.conpair(this.num);
                bb = that.conpair(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]>that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                    else return -1;
                }
            }
        }
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

    public Card[] arr(Card[] cards){
       for(int i = 1;i<5;i++){
         for(int j = i;j>0;j--){
             if(cards[j].compareTo(cards[j-1])==1){
                 Card temp = cards[j-1];
                    cards[j-1] = cards[j];
                    cards[j] = temp;
             }
             else break;
         }
                    
       }
       return cards;
 }
    public void findnum(Card[] cards){
        for(int i = 0;i<5;i++){
            for(int j = 0;j<16;j++){
                if(cards[i].getFace().equals(copy[j])){
                    num[i] = j;
                    break;
                }
            }
            for(int k=0;k<4;k++){
                if(cards[i].getSuit().equals(Suit[k])){
                    color[i] = k;
                    break;
                }
            }
        }
        
    }
    public int findtype(int[] fa, int[] su){
        
         if(fa[0] ==fa[1] && fa[0] == fa[2] && fa[3] == fa[4])
            return 5;
        else if(fa[0] ==fa[1] && fa[2] == fa[3] && fa[2] == fa[4])
            return 5;
        else if(su[0] == su[1] && su[0] == su[2] && su[0] == su[3] && su[0] == su[4])
            return 4;
        else if(fa[0]+1==fa[1]&&fa[0]+2==fa[2]&&fa[0]+3==fa[3]
                &&fa[0]+4==fa[4])
            return 3;
        else if(fa[4]==14&&fa[3]==13&&fa[2]==12&&fa[1]==11&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==13&&fa[2]==12&&fa[1]==3&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==13&&fa[2]==4&&fa[1]==3&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==5&&fa[2]==4&&fa[1]==3&&fa[0]==2)
            return 2;
         else if(fa[0]==fa[1]&&fa[2]==fa[3])
             return 1;
         else if(fa[0]==fa[1]&&fa[3]==fa[4])
             return 1;
         else if(fa[1]==fa[2]&&fa[3]==fa[4])
             return 1;
         else if(fa[0]==fa[1])
             return 0;
         else if(fa[1]==fa[2])
             return 0;
         else if(fa[2]==fa[3])
             return 0;
         else if(fa[3]==fa[4])
             return 0;
        else
             return -1;
}
    public int confullhouse(int[] fa){
         if(fa[0]==fa[1]&&fa[0]==fa[2])
              return 2;
          else
         return 4;
    }
    public int contwopair(int[] fa){
        if(fa[2]==fa[3]) return 3;             
        else return 4;              
    }
    public int conpair(int[] fa){
         if(fa[0]==fa[1])
              return 1;
          else if(fa[1]==fa[2])
              return 2;
          else if(fa[2]==fa[3])
              return 3;
          else
              return 4;
    }
    public static void main(String[] args){
       
     } 
}
@b0e59be8cd7b1394076c93ef423dd4bc@"
"b03611023","2","0.28","105504","@8ab5948b02b86778279f47a7c5511d1a@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    private int[] num = new int[5];
    private int[] color = new int[5];
    private String[] copy = {""0"",""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9"",""10"", ""J"", ""Q"", ""K"", ""A""};
    private String[] Suit = {""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;        
    }

    // TODO
    public int compareTo(Hand that) {
        int a,b;
     /*   this.cards = this.arr(this.cards);
        that.cards = that.arr(that.cards);
        
        this.findnum(this.cards);
        that.findnum(that.cards);*/
        
        a =4; /*this.findtype(this.num, this.color);*/
        b = 3;/*that.findtype(that.num, that.color);*/
        
        if(a>b) return 1;
        else if(a<b) return -1;
        else{
            if(a==5){
                int aa,bb;
                aa = this.confullhouse(this.num);
                bb = that.confullhouse(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]>that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                    else return -1;
                }
            }
            if(a==4 || a==3 ||a==2 ||a==-1){               
                if(this.num[4]>that.num[4]) return 1;
                else if(this.num[4]>that.num[4]) return -1;
                else{
                    if(this.color[4]>that.color[4]) return 1;
                    else return -1;
                }
            }
            if(a==1){
                 int aa,bb;
                aa = this.contwopair(this.num);
                bb = that.contwopair(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]>that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                    else return -1;
                }
            }
            if(a==0){
                 int aa,bb;
                aa = this.conpair(this.num);
                bb = that.conpair(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]>that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                    else return -1;
                }
            }
        }
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

    public Card[] arr(Card[] cards){
       for(int i = 1;i<5;i++){
         for(int j = i;j>0;j--){
             if(cards[j].compareTo(cards[j-1])==1){
                 Card temp = cards[j-1];
                    cards[j-1] = cards[j];
                    cards[j] = temp;
             }
             else break;
         }
                    
       }
       return cards;
 }
    public void findnum(Card[] cards){
        for(int i = 0;i<5;i++){
            for(int j = 0;j<16;j++){
                if(cards[i].getFace().equals(copy[j])){
                    num[i] = j;
                    break;
                }
            }
            for(int k=0;k<4;k++){
                if(cards[i].getSuit().equals(Suit[k])){
                    color[i] = k;
                    break;
                }
            }
        }
        
    }
    public int findtype(int[] fa, int[] su){
        
         if(fa[0] ==fa[1] && fa[0] == fa[2] && fa[3] == fa[4])
            return 5;
        else if(fa[0] ==fa[1] && fa[2] == fa[3] && fa[2] == fa[4])
            return 5;
        else if(su[0] == su[1] && su[0] == su[2] && su[0] == su[3] && su[0] == su[4])
            return 4;
        else if(fa[0]+1==fa[1]&&fa[0]+2==fa[2]&&fa[0]+3==fa[3]
                &&fa[0]+4==fa[4])
            return 3;
        else if(fa[4]==14&&fa[3]==13&&fa[2]==12&&fa[1]==11&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==13&&fa[2]==12&&fa[1]==3&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==13&&fa[2]==4&&fa[1]==3&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==5&&fa[2]==4&&fa[1]==3&&fa[0]==2)
            return 2;
         else if(fa[0]==fa[1]&&fa[2]==fa[3])
             return 1;
         else if(fa[0]==fa[1]&&fa[3]==fa[4])
             return 1;
         else if(fa[1]==fa[2]&&fa[3]==fa[4])
             return 1;
         else if(fa[0]==fa[1])
             return 0;
         else if(fa[1]==fa[2])
             return 0;
         else if(fa[2]==fa[3])
             return 0;
         else if(fa[3]==fa[4])
             return 0;
        else
             return -1;
}
    public int confullhouse(int[] fa){
         if(fa[0]==fa[1]&&fa[0]==fa[2])
              return 2;
          else
         return 4;
    }
    public int contwopair(int[] fa){
        if(fa[2]==fa[3]) return 3;             
        else return 4;              
    }
    public int conpair(int[] fa){
         if(fa[0]==fa[1])
              return 1;
          else if(fa[1]==fa[2])
              return 2;
          else if(fa[2]==fa[3])
              return 3;
          else
              return 4;
    }
    public static void main(String[] args){
       
     } 
}
@8ab5948b02b86778279f47a7c5511d1a@"
"b03611023","2","0.28","104688","@71d9ebd24406723e2858d1a6777a3a23@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    private int[] num = new int[5];
    private int[] color = new int[5];
    private String[] copy = {""0"",""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9"",""10"", ""J"", ""Q"", ""K"", ""A""};
    private String[] Suit = {""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;        
    }

    // TODO
    public int compareTo(Hand that) {
        int a,b;
        this.cards = this.arr(this.cards);
        that.cards = that.arr(that.cards);
        
        this.findnum(this.cards);
        that.findnum(that.cards);
        
        a =this.findtype(this.num, this.color);
        b =that.findtype(that.num, that.color);
        
        if(a>b) return 1;
        else if(a<b) return -1;
        else{
            if(a==5){
                int aa,bb;
                aa = this.confullhouse(this.num);
                bb = that.confullhouse(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]>that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                    else return -1;
                }
            }
            if(a==4 || a==3 ||a==2 ||a==-1){               
                if(this.num[4]>that.num[4]) return 1;
                else if(this.num[4]>that.num[4]) return -1;
                else{
                    if(this.color[4]>that.color[4]) return 1;
                    else return -1;
                }
            }
            if(a==1){
                 int aa,bb;
                aa = this.contwopair(this.num);
                bb = that.contwopair(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]>that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                    else return -1;
                }
            }
            if(a==0){
                 int aa,bb;
                aa = this.conpair(this.num);
                bb = that.conpair(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]>that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                    else return -1;
                }
            }
        }
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

    public Card[] arr(Card[] cards){
       for(int i = 1;i<5;i++){
         for(int j = i;j>0;j--){
             if(cards[j].compareTo(cards[j-1])==1){
                 Card temp = cards[j-1];
                    cards[j-1] = cards[j];
                    cards[j] = temp;
             }
             else break;
         }
                    
       }
       return cards;
 }
    public void findnum(Card[] cards){
        for(int i = 0;i<5;i++){
            for(int j = 0;j<16;j++){
                if(cards[i].getFace().equals(copy[j])){
                    num[i] = j;
                    break;
                }
            }
            for(int k=0;k<4;k++){
                if(cards[i].getSuit().equals(Suit[k])){
                    color[i] = k;
                    break;
                }
            }
        }
        
    }
    public int findtype(int[] fa, int[] su){
        
         if(fa[0] ==fa[1] && fa[0] == fa[2] && fa[3] == fa[4])
            return 5;
        else if(fa[0] ==fa[1] && fa[2] == fa[3] && fa[2] == fa[4])
            return 5;
        else if(su[0] == su[1] && su[0] == su[2] && su[0] == su[3] && su[0] == su[4])
            return 4;
        else if(fa[0]+1==fa[1]&&fa[0]+2==fa[2]&&fa[0]+3==fa[3]
                &&fa[0]+4==fa[4])
            return 3;
        else if(fa[4]==14&&fa[3]==13&&fa[2]==12&&fa[1]==11&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==13&&fa[2]==12&&fa[1]==3&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==13&&fa[2]==4&&fa[1]==3&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==5&&fa[2]==4&&fa[1]==3&&fa[0]==2)
            return 2;
         else if(fa[0]==fa[1]&&fa[2]==fa[3])
             return 1;
         else if(fa[0]==fa[1]&&fa[3]==fa[4])
             return 1;
         else if(fa[1]==fa[2]&&fa[3]==fa[4])
             return 1;
         else if(fa[0]==fa[1])
             return 0;
         else if(fa[1]==fa[2])
             return 0;
         else if(fa[2]==fa[3])
             return 0;
         else if(fa[3]==fa[4])
             return 0;
        else
             return -1;
}
    public int confullhouse(int[] fa){
         if(fa[0]==fa[1]&&fa[0]==fa[2])
              return 2;
          else
         return 4;
    }
    public int contwopair(int[] fa){
        if(fa[2]==fa[3]) return 3;             
        else return 4;              
    }
    public int conpair(int[] fa){
         if(fa[0]==fa[1])
              return 1;
          else if(fa[1]==fa[2])
              return 2;
          else if(fa[2]==fa[3])
              return 3;
          else
              return 4;
    }
    public static void main(String[] args){
       
     } 
}
@71d9ebd24406723e2858d1a6777a3a23@"
"b03611023","2","0.27","102944","@cf123ddc6a6f00ad1fcfec26efe5be88@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    private int[] num = new int[5];
    private int[] color = new int[5];
    private String[] copy = {""0"",""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9"",""10"", ""J"", ""Q"", ""K"", ""A""};
    private String[] Suit = {""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;        
    }

    // TODO
    public int compareTo(Hand that) {
        int a,b;
        Card[] A,B;
        A = this.arr(this.cards);
        B = that.arr(that.cards);
        
        this.findnum(A);
        that.findnum(B);
        
        a =this.findtype(this.num, this.color);
        b =that.findtype(that.num, that.color);
        
        if(a>b) return 1;
        else if(a<b) return -1;
        else{
            if(a==5){
                int aa,bb;
                aa = this.confullhouse(this.num);
                bb = that.confullhouse(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]>that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                    else return -1;
                }
            }
            if(a==4 || a==3 ||a==2 ||a==-1){               
                if(this.num[4]>that.num[4]) return 1;
                else if(this.num[4]>that.num[4]) return -1;
                else{
                    if(this.color[4]>that.color[4]) return 1;
                    else return -1;
                }
            }
            if(a==1){
                 int aa,bb;
                aa = this.contwopair(this.num);
                bb = that.contwopair(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]>that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                    else return -1;
                }
            }
            if(a==0){
                 int aa,bb;
                aa = this.conpair(this.num);
                bb = that.conpair(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]>that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                    else return -1;
                }
            }
        }
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

    public Card[] arr(Card[] cards){
       for(int i = 1;i<5;i++){
         for(int j = i;j>0;j--){
             if(cards[j].compareTo(cards[j-1])==1){
                 Card temp = cards[j-1];
                    cards[j-1] = cards[j];
                    cards[j] = temp;
             }
             else break;
         }
                    
       }
       return cards;
 }
    public void findnum(Card[] cards){
        for(int i = 0;i<5;i++){
            for(int j = 0;j<16;j++){
                if(cards[i].getFace().equals(copy[j])){
                    num[i] = j;
                    break;
                }
            }
            for(int k=0;k<4;k++){
                if(cards[i].getSuit().equals(Suit[k])){
                    color[i] = k;
                    break;
                }
            }
        }
        
    }
    public int findtype(int[] fa, int[] su){
        
         if(fa[0] ==fa[1] && fa[0] == fa[2] && fa[3] == fa[4])
            return 5;
        else if(fa[0] ==fa[1] && fa[2] == fa[3] && fa[2] == fa[4])
            return 5;
        else if(su[0] == su[1] && su[0] == su[2] && su[0] == su[3] && su[0] == su[4])
            return 4;
        else if(fa[0]+1==fa[1]&&fa[0]+2==fa[2]&&fa[0]+3==fa[3]
                &&fa[0]+4==fa[4])
            return 3;
        else if(fa[4]==14&&fa[3]==13&&fa[2]==12&&fa[1]==11&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==13&&fa[2]==12&&fa[1]==3&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==13&&fa[2]==4&&fa[1]==3&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==5&&fa[2]==4&&fa[1]==3&&fa[0]==2)
            return 2;
         else if(fa[0]==fa[1]&&fa[2]==fa[3])
             return 1;
         else if(fa[0]==fa[1]&&fa[3]==fa[4])
             return 1;
         else if(fa[1]==fa[2]&&fa[3]==fa[4])
             return 1;
         else if(fa[0]==fa[1])
             return 0;
         else if(fa[1]==fa[2])
             return 0;
         else if(fa[2]==fa[3])
             return 0;
         else if(fa[3]==fa[4])
             return 0;
        else
             return -1;
}
    public int confullhouse(int[] fa){
         if(fa[0]==fa[1]&&fa[0]==fa[2])
              return 2;
          else
         return 4;
    }
    public int contwopair(int[] fa){
        if(fa[2]==fa[3]) return 3;             
        else return 4;              
    }
    public int conpair(int[] fa){
         if(fa[0]==fa[1])
              return 1;
          else if(fa[1]==fa[2])
              return 2;
          else if(fa[2]==fa[3])
              return 3;
          else
              return 4;
    }
    public static void main(String[] args){
       
     } 
}
@cf123ddc6a6f00ad1fcfec26efe5be88@"
"b03611023","0","0.28","105504","@d002cdf1be464d07a1392d422eb796b3@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    private int[] num = new int[5];
    private int[] color = new int[5];
    private String[] copy = {""0"",""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9"",""10"", ""J"", ""Q"", ""K"", ""A""};
    private String[] Suit = {""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;        
    }

    // TODO
    public int compareTo(Hand that) {
        int a,b;
        Card[] A,B;
        A = this.arr(this.cards);
        B = that.arr(that.cards);
        
        this.findnum(A);
        that.findnum(B);
        
        a =this.findtype(this.num, this.color);
        b =that.findtype(that.num, that.color);
        
        if(a>b) return 1;
        else if(a<b) return -1;
        else{
            if(a==5){
                int aa,bb;
                aa = this.confullhouse(this.num);
                bb = that.confullhouse(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]>that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                    else if(this.color[aa]<that.color[bb])return -1;
                }
            }
            if(a==4 || a==3 ||a==2 ||a==-1){               
                if(this.num[4]>that.num[4]) return 1;
                else if(this.num[4]>that.num[4]) return -1;
                else{
                    if(this.color[4]>that.color[4]) return 1;
                    else if(this.color[aa]<that.color[bb])return -1;
                }
            }
            if(a==1){
                 int aa,bb;
                aa = this.contwopair(this.num);
                bb = that.contwopair(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]>that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                     else if(this.color[aa]<that.color[bb])return -1;
                }
            }
            if(a==0){
                 int aa,bb;
                aa = this.conpair(this.num);
                bb = that.conpair(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]>that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                     else if(this.color[aa]<that.color[bb])return -1;
                }
            }
        }
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

    public Card[] arr(Card[] cards){
       for(int i = 1;i<5;i++){
         for(int j = i;j>0;j--){
             if(cards[j].compareTo(cards[j-1])==1){
                 Card temp = cards[j-1];
                    cards[j-1] = cards[j];
                    cards[j] = temp;
             }
             else break;
         }
                    
       }
       return cards;
 }
    public void findnum(Card[] cards){
        for(int i = 0;i<5;i++){
            for(int j = 0;j<16;j++){
                if(cards[i].getFace().equals(copy[j])){
                    num[i] = j;
                    break;
                }
            }
            for(int k=0;k<4;k++){
                if(cards[i].getSuit().equals(Suit[k])){
                    color[i] = k;
                    break;
                }
            }
        }
        
    }
    public int findtype(int[] fa, int[] su){
        
         if(fa[0] ==fa[1] && fa[0] == fa[2] && fa[3] == fa[4])
            return 5;
        else if(fa[0] ==fa[1] && fa[2] == fa[3] && fa[2] == fa[4])
            return 5;
        else if(su[0] == su[1] && su[0] == su[2] && su[0] == su[3] && su[0] == su[4])
            return 4;
        else if(fa[0]+1==fa[1]&&fa[0]+2==fa[2]&&fa[0]+3==fa[3]
                &&fa[0]+4==fa[4])
            return 3;
        else if(fa[4]==14&&fa[3]==13&&fa[2]==12&&fa[1]==11&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==13&&fa[2]==12&&fa[1]==3&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==13&&fa[2]==4&&fa[1]==3&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==5&&fa[2]==4&&fa[1]==3&&fa[0]==2)
            return 2;
         else if(fa[0]==fa[1]&&fa[2]==fa[3])
             return 1;
         else if(fa[0]==fa[1]&&fa[3]==fa[4])
             return 1;
         else if(fa[1]==fa[2]&&fa[3]==fa[4])
             return 1;
         else if(fa[0]==fa[1])
             return 0;
         else if(fa[1]==fa[2])
             return 0;
         else if(fa[2]==fa[3])
             return 0;
         else if(fa[3]==fa[4])
             return 0;
        else
             return -1;
}
    public int confullhouse(int[] fa){
         if(fa[0]==fa[1]&&fa[0]==fa[2])
              return 2;
          else
         return 4;
    }
    public int contwopair(int[] fa){
        if(fa[2]==fa[3]) return 3;             
        else return 4;              
    }
    public int conpair(int[] fa){
         if(fa[0]==fa[1])
              return 1;
          else if(fa[1]==fa[2])
              return 2;
          else if(fa[2]==fa[3])
              return 3;
          else
              return 4;
    }
    public static void main(String[] args){
       
     } 
}
@d002cdf1be464d07a1392d422eb796b3@"
"b03611023","2","0.29","105552","@398001654a190ade273f749544798685@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    private int[] num = new int[5];
    private int[] color = new int[5];
    private String[] copy = {""0"",""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9"",""10"", ""J"", ""Q"", ""K"", ""A""};
    private String[] Suit = {""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;        
    }

    // TODO
    public int compareTo(Hand that) {
        int a,b;
        Card[] A,B;
        A = this.arr(this.cards);
        B = that.arr(that.cards);
        
        this.findnum(A);
        that.findnum(B);
        
        a =this.findtype(this.num, this.color);
        b =that.findtype(that.num, that.color);
        
        if(a>b) return 1;
        else if(a<b) return -1;
        else{
            if(a==5){
                int aa,bb;
                aa = this.confullhouse(this.num);
                bb = that.confullhouse(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]>that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                    else if(this.color[aa]<that.color[bb])return -1;
                }
            }
            if(a==4 || a==3 ||a==2 ||a==-1){               
                if(this.num[4]>that.num[4]) return 1;
                else if(this.num[4]>that.num[4]) return -1;
                else{
                    if(this.color[4]>that.color[4]) return 1;
                    else if(this.color[4]<that.color[4])return -1;
                }
            }
            if(a==1){
                 int aa,bb;
                aa = this.contwopair(this.num);
                bb = that.contwopair(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]>that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                     else if(this.color[aa]<that.color[bb])return -1;
                }
            }
            if(a==0){
                 int aa,bb;
                aa = this.conpair(this.num);
                bb = that.conpair(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]>that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                     else if(this.color[aa]<that.color[bb])return -1;
                }
            }
        }
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

    public Card[] arr(Card[] cards){
       for(int i = 1;i<5;i++){
         for(int j = i;j>0;j--){
             if(cards[j].compareTo(cards[j-1])==1){
                 Card temp = cards[j-1];
                    cards[j-1] = cards[j];
                    cards[j] = temp;
             }
             else break;
         }
                    
       }
       return cards;
 }
    public void findnum(Card[] cards){
        for(int i = 0;i<5;i++){
            for(int j = 0;j<16;j++){
                if(cards[i].getFace().equals(copy[j])){
                    num[i] = j;
                    break;
                }
            }
            for(int k=0;k<4;k++){
                if(cards[i].getSuit().equals(Suit[k])){
                    color[i] = k;
                    break;
                }
            }
        }
        
    }
    public int findtype(int[] fa, int[] su){
        
         if(fa[0] ==fa[1] && fa[0] == fa[2] && fa[3] == fa[4])
            return 5;
        else if(fa[0] ==fa[1] && fa[2] == fa[3] && fa[2] == fa[4])
            return 5;
        else if(su[0] == su[1] && su[0] == su[2] && su[0] == su[3] && su[0] == su[4])
            return 4;
        else if(fa[0]+1==fa[1]&&fa[0]+2==fa[2]&&fa[0]+3==fa[3]
                &&fa[0]+4==fa[4])
            return 3;
        else if(fa[4]==14&&fa[3]==13&&fa[2]==12&&fa[1]==11&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==13&&fa[2]==12&&fa[1]==3&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==13&&fa[2]==4&&fa[1]==3&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==5&&fa[2]==4&&fa[1]==3&&fa[0]==2)
            return 2;
         else if(fa[0]==fa[1]&&fa[2]==fa[3])
             return 1;
         else if(fa[0]==fa[1]&&fa[3]==fa[4])
             return 1;
         else if(fa[1]==fa[2]&&fa[3]==fa[4])
             return 1;
         else if(fa[0]==fa[1])
             return 0;
         else if(fa[1]==fa[2])
             return 0;
         else if(fa[2]==fa[3])
             return 0;
         else if(fa[3]==fa[4])
             return 0;
        else
             return -1;
}
    public int confullhouse(int[] fa){
         if(fa[0]==fa[1]&&fa[0]==fa[2])
              return 2;
          else
         return 4;
    }
    public int contwopair(int[] fa){
        if(fa[2]==fa[3]) return 3;             
        else return 4;              
    }
    public int conpair(int[] fa){
         if(fa[0]==fa[1])
              return 1;
          else if(fa[1]==fa[2])
              return 2;
          else if(fa[2]==fa[3])
              return 3;
          else
              return 4;
    }
    public static void main(String[] args){
       
     } 
}
@398001654a190ade273f749544798685@"
"r03849033","3","0.09","105536","@447699d95088279a91f355f0c0ef7491@import java.util.Arrays;
public class Hand implements Comparable<Hand> {
    private Card thismax;
    private Card thatmax;  
    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
    }

    // TODO
    public int compareTo(Hand that) {
    Arrays.sort(this.cards);
    Arrays.sort(that.cards);    
    int thisvalue = 0;
    int thatvalue = 0;
   
    int[] thispair = new int[4];
    int[] thatpair = new int[4];
    int this1 = 0;
    int that1 = 0;    
    int[] thisstraight = new int[5];
    int[] thatstraight = new int[5]; 
    int thisst = 0;
    int thatst = 0;   
    int[] thisflush  = new int[4];
    int[] thatflush  = new int[4];    

    for(int j = 0; j < 4; j++) {
        if(this.cards[j].getFace().equals(this.cards[j+1].getFace())) {thispair[j]=1; this1=j+1; }
        if(that.cards[j].getFace().equals(that.cards[j+1].getFace())) {thatpair[j]=1; that1=j+1;}        
    } 
    String[] ranks  = { ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"",""A"" };    
    for(int i = 0; i < 13; i++) {
    for(int j = 0; j < 5; j++) {    
        if(this.cards[j].getFace().equals(ranks[i])) {thisstraight[j]=i; }
        if(that.cards[j].getFace().equals(ranks[i])) {thatstraight[j]=i; }
    }}        
    for(int j = 1; j < 5; j++) {
        if(thisstraight[j]-1==thisstraight[j-1]){thisst++;}
        if(thatstraight[j]-1==thatstraight[j-1]){thatst++;}
     }
    for(int j = 0; j < 4; j++) {
        if(this.cards[j].getSuit().equals(this.cards[j+1].getSuit())) {thisflush[j]=1; }
        if(that.cards[j].getSuit().equals(that.cards[j+1].getSuit())) {thatflush[j]=1; }        
    }
    int[] case1 = {1,1,0,1};
    int[] case2 = {1,0,1,1};
    int[] case3 = {1,1,1,1};
    
    int[] case4 = {1,0,1,0}; 
    int[] case5 = {1,0,0,1};    
    int[] case6 = {0,1,0,1};
    
    int[] case7 = {1,1,1,0};  
    int[] case8 = {0,1,1,1};
    
    int[] case9 = {0,0,0,0};
    int[] case10 = {0,1,2,3,12};    
    if(Arrays.equals(thispair,case1)){ 
        thisvalue=6;  thismax = this.cards[2]; }
    else  if(Arrays.equals(thispair,case2)){ 
        thisvalue=6;   thismax = this.cards[4]; }
    
    else  if(Arrays.equals(thisflush,case3)){ 
        thisvalue=5;   thismax = this.cards[4]; }
    
    else  if(thisst==4){ 
        thisvalue=4;   thismax = this.cards[4]; }
    else  if(Arrays.equals(thisstraight,case10)){ 
        thisvalue=3;   thismax = this.cards[4]; } 
    
    else  if(Arrays.equals(thispair,case4) || Arrays.equals(thispair,case7)){ 
        thisvalue=2;   thismax = this.cards[3]; }    
    else  if(Arrays.equals(thispair,case5) || Arrays.equals(thispair,case6) || Arrays.equals(thispair,case8)){ 
        thisvalue=2;   thismax = this.cards[4]; } 
    else if (!Arrays.equals(thispair,case9)){
        thisvalue=1;   thismax = this.cards[this1];}
    else {  thismax = this.cards[4];}
    
    if(Arrays.equals(thatpair,case1)){ 
        thatvalue=6;   thatmax = that.cards[2]; }
    else  if(Arrays.equals(thatpair,case2)){ 
        thatvalue=6;   thatmax = that.cards[4]; }
    
    else  if(Arrays.equals(thatflush,case3)){ 
        thatvalue=5;   thatmax = that.cards[4]; }
    
    else  if(thatst==4){ 
        thatvalue=4;   thatmax = that.cards[4]; } 
    else  if(Arrays.equals(thatstraight,case10)){ 
        thatvalue=3;   thatmax = that.cards[4]; }  
    
    else  if(Arrays.equals(thatpair,case4) || Arrays.equals(thatpair,case7)){ 
        thatvalue=2;   thatmax = that.cards[3]; }    
    else  if(Arrays.equals(thatpair,case5) || Arrays.equals(thatpair,case6) || Arrays.equals(thatpair,case8)){ 
        thatvalue=2;   thatmax = that.cards[4]; } 
    else if (!Arrays.equals(thatpair,case9)){
        thatvalue=1;   thatmax = that.cards[that1];}
    else {  thatmax = that.cards[4];}    
   
    if(thisvalue>thatvalue){ return 1;}
    else if(thisvalue<thatvalue){ return -1;}
    
    else if(thismax.compareTo(thatmax)>0){return 1;}
    else if(thismax.compareTo(thatmax)<0){return -1;}    
        // complete this function so the Player can be sorted according to the cards he/she has.
        return 0;
    }
    
      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@447699d95088279a91f355f0c0ef7491@"
"b03611023","2","0.28","105184","@98a3a7a3b48d7cab8a1420e663cb4702@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    private int[] num = new int[5];
    private int[] color = new int[5];
    private String[] copy = {""0"",""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9"",""10"", ""J"", ""Q"", ""K"", ""A""};
    private String[] Suit = {""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;        
    }

    // TODO
    public int compareTo(Hand that) {
        int a,b;
        Card[] A,B;
        A = this.arr(this.cards);
        B = that.arr(that.cards);
        
        this.findnum(A);
        that.findnum(B);
        
        a =this.findtype(this.num, this.color);
        b =that.findtype(that.num, that.color);
        
        if(a>b) return 1;
        else if(a<b) return -1;
        else{
            if(a==5){
                int aa,bb;
                aa = this.confullhouse(this.num);
                bb = that.confullhouse(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]<that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                    else if(this.color[aa]<that.color[bb])return -1;
                }
            }
            if(a==4 || a==3 ||a==2 ||a==-1){               
                if(this.num[4]>that.num[4]) return 1;
                else if(this.num[4]<that.num[4]) return -1;
                else{
                    if(this.color[4]>that.color[4]) return 1;
                    else if(this.color[4]<that.color[4])return -1;
                }
            }
            if(a==1){
                 int aa,bb;
                aa = this.contwopair(this.num);
                bb = that.contwopair(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]<that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                     else if(this.color[aa]<that.color[bb])return -1;
                }
            }
            if(a==0){
                 int aa,bb;
                aa = this.conpair(this.num);
                bb = that.conpair(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]<that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                     else if(this.color[aa]<that.color[bb])return -1;
                }
            }
        }
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

    public Card[] arr(Card[] cards){
       for(int i = 1;i<5;i++){
         for(int j = i;j>0;j--){
             if(cards[j].compareTo(cards[j-1])==1){
                 Card temp = cards[j-1];
                    cards[j-1] = cards[j];
                    cards[j] = temp;
             }
             else break;
         }
                    
       }
       return cards;
 }
    public void findnum(Card[] cards){
        for(int i = 0;i<5;i++){
            for(int j = 0;j<16;j++){
                if(cards[i].getFace().equals(copy[j])){
                    num[i] = j;
                    break;
                }
            }
            for(int k=0;k<4;k++){
                if(cards[i].getSuit().equals(Suit[k])){
                    color[i] = k;
                    break;
                }
            }
        }
        
    }
    public int findtype(int[] fa, int[] su){
        
         if(fa[0] ==fa[1] && fa[0] == fa[2] && fa[3] == fa[4])
            return 5;
        else if(fa[0] ==fa[1] && fa[2] == fa[3] && fa[2] == fa[4])
            return 5;
        else if(su[0] == su[1] && su[0] == su[2] && su[0] == su[3] && su[0] == su[4])
            return 4;
        else if(fa[0]+1==fa[1]&&fa[0]+2==fa[2]&&fa[0]+3==fa[3]
                &&fa[0]+4==fa[4])
            return 3;
        else if(fa[4]==14&&fa[3]==13&&fa[2]==12&&fa[1]==11&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==13&&fa[2]==12&&fa[1]==3&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==13&&fa[2]==4&&fa[1]==3&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==5&&fa[2]==4&&fa[1]==3&&fa[0]==2)
            return 2;
         else if(fa[0]==fa[1]&&fa[2]==fa[3])
             return 1;
         else if(fa[0]==fa[1]&&fa[3]==fa[4])
             return 1;
         else if(fa[1]==fa[2]&&fa[3]==fa[4])
             return 1;
         else if(fa[0]==fa[1])
             return 0;
         else if(fa[1]==fa[2])
             return 0;
         else if(fa[2]==fa[3])
             return 0;
         else if(fa[3]==fa[4])
             return 0;
        else
             return -1;
}
    public int confullhouse(int[] fa){
         if(fa[0]==fa[1]&&fa[0]==fa[2])
              return 2;
          else
         return 4;
    }
    public int contwopair(int[] fa){
        if(fa[2]==fa[3]) return 3;             
        else return 4;              
    }
    public int conpair(int[] fa){
         if(fa[0]==fa[1])
              return 1;
          else if(fa[1]==fa[2])
              return 2;
          else if(fa[2]==fa[3])
              return 3;
          else
              return 4;
    }
    public static void main(String[] args){
       
     } 
}
@98a3a7a3b48d7cab8a1420e663cb4702@"
"b03611023","2","0.3","105536","@4c9859991f97acdb5809c5ffd0efaa57@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    private int[] num = new int[5];
    private int[] color = new int[5];
    private String[] copy = {""0"",""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9"",""10"", ""J"", ""Q"", ""K"", ""A""};
    private String[] Suit = {""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;        
    }

    // TODO
    public int compareTo(Hand that) {
        int a,b;
        Card[] A,B;
        A = this.arr(this.cards);
        B = that.arr(that.cards);
        
        this.findnum(A);
        that.findnum(B);
        
        a =this.findtype(this.num, this.color);
        b =that.findtype(that.num, that.color);
        
        if(a>b) return 1;
        else if(a<b) return -1;
        else{
            if(a==5){
                int aa,bb;
                aa = this.confullhouse(this.num);
                bb = that.confullhouse(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]<that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                    else if(this.color[aa]<that.color[bb])return -1;
                    else return 0;
                }
            }
            if(a==4 || a==3 ||a==2 ||a==-1){               
                if(this.num[4]>that.num[4]) return 1;
                else if(this.num[4]<that.num[4]) return -1;
                else{
                    if(this.color[4]>that.color[4]) return 1;
                    else if(this.color[4]<that.color[4])return -1;
                    else return 0;
                }
            }
            if(a==1){
                 int aa,bb;
                aa = this.contwopair(this.num);
                bb = that.contwopair(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]<that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                     else if(this.color[aa]<that.color[bb])return -1;
                    else return 0;
                }
            }
            if(a==0){
                 int aa,bb;
                aa = this.conpair(this.num);
                bb = that.conpair(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]<that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                     else if(this.color[aa]<that.color[bb])return -1;
                    else return 0;
                }
            }
        }
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

    public Card[] arr(Card[] cards){
       for(int i = 1;i<5;i++){
         for(int j = i;j>0;j--){
             if(cards[j].compareTo(cards[j-1])==1){
                 Card temp = cards[j-1];
                    cards[j-1] = cards[j];
                    cards[j] = temp;
             }
             else break;
         }
                    
       }
       return cards;
 }
    public void findnum(Card[] cards){
        for(int i = 0;i<5;i++){
            for(int j = 0;j<16;j++){
                if(cards[i].getFace().equals(copy[j])){
                    num[i] = j;
                    break;
                }
            }
            for(int k=0;k<4;k++){
                if(cards[i].getSuit().equals(Suit[k])){
                    color[i] = k;
                    break;
                }
            }
        }
        
    }
    public int findtype(int[] fa, int[] su){
        
         if(fa[0] ==fa[1] && fa[0] == fa[2] && fa[3] == fa[4])
            return 5;
        else if(fa[0] ==fa[1] && fa[2] == fa[3] && fa[2] == fa[4])
            return 5;
        else if(su[0] == su[1] && su[0] == su[2] && su[0] == su[3] && su[0] == su[4])
            return 4;
        else if(fa[0]+1==fa[1]&&fa[0]+2==fa[2]&&fa[0]+3==fa[3]
                &&fa[0]+4==fa[4])
            return 3;
        else if(fa[4]==14&&fa[3]==13&&fa[2]==12&&fa[1]==11&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==13&&fa[2]==12&&fa[1]==3&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==13&&fa[2]==4&&fa[1]==3&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==5&&fa[2]==4&&fa[1]==3&&fa[0]==2)
            return 2;
         else if(fa[0]==fa[1]&&fa[2]==fa[3])
             return 1;
         else if(fa[0]==fa[1]&&fa[3]==fa[4])
             return 1;
         else if(fa[1]==fa[2]&&fa[3]==fa[4])
             return 1;
         else if(fa[0]==fa[1])
             return 0;
         else if(fa[1]==fa[2])
             return 0;
         else if(fa[2]==fa[3])
             return 0;
         else if(fa[3]==fa[4])
             return 0;
        else
             return -1;
}
    public int confullhouse(int[] fa){
         if(fa[0]==fa[1]&&fa[0]==fa[2])
              return 2;
          else
         return 4;
    }
    public int contwopair(int[] fa){
        if(fa[2]==fa[3]) return 3;             
        else return 4;              
    }
    public int conpair(int[] fa){
         if(fa[0]==fa[1])
              return 1;
          else if(fa[1]==fa[2])
              return 2;
          else if(fa[2]==fa[3])
              return 3;
          else
              return 4;
    }
    public static void main(String[] args){
       
     } 
}
@4c9859991f97acdb5809c5ffd0efaa57@"
"b03611023","3","0.1","105520","@17ba2b71fe3c99de95ed8ff60944858a@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    private int[] num = new int[5];
    private int[] color = new int[5];
    private String[] copy = {""0"",""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9"",""10"", ""J"", ""Q"", ""K"", ""A""};
    private String[] Suit = {""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;        
    }

    // TODO
    public int compareTo(Hand that) {
        int a,b;
       
       this.cards = this.arr(this.cards);
        that.cards = that.arr(that.cards);
        
        this.findnum(this.cards);
        that.findnum(that.cards);
        
        a =this.findtype(this.num, this.color);
        b =that.findtype(that.num, that.color);
        
        if(a>b) return 1;
        else if(a<b) return -1;
        else{
            if(a==5){
                int aa,bb;
                aa = this.confullhouse(this.num);
                bb = that.confullhouse(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]<that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                    else if(this.color[aa]<that.color[bb])return -1;
                    else return 0;
                }
            }
            if(a==4 || a==3 ||a==2 ||a==-1){               
                if(this.num[4]>that.num[4]) return 1;
                else if(this.num[4]<that.num[4]) return -1;
                else{
                    if(this.color[4]>that.color[4]) return 1;
                    else if(this.color[4]<that.color[4])return -1;
                    else return 0;
                }
            }
            if(a==1){
                 int aa,bb;
                aa = this.contwopair(this.num);
                bb = that.contwopair(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]<that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                     else if(this.color[aa]<that.color[bb])return -1;
                    else return 0;
                }
            }
            if(a==0){
                 int aa,bb;
                aa = this.conpair(this.num);
                bb = that.conpair(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]<that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                     else if(this.color[aa]<that.color[bb])return -1;
                    else return 0;
                }
            }
        }
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

    public Card[] arr(Card[] cards){
       for(int i = 1;i<5;i++){
         for(int j = i;j>0;j--){
             if(cards[j].compareTo(cards[j-1])==-1){
                 Card temp = cards[j-1];
                    cards[j-1] = cards[j];
                    cards[j] = temp;
             }
             else break;
         }
                    
       }
       return cards;
 }
    public void findnum(Card[] cards){
        for(int i = 0;i<5;i++){
            for(int j = 0;j<16;j++){
                if(cards[i].getFace().equals(copy[j])){
                    num[i] = j;
                    break;
                }
            }
            for(int k=0;k<4;k++){
                if(cards[i].getSuit().equals(Suit[k])){
                    color[i] = k;
                    break;
                }
            }
        }
        
    }
    public int findtype(int[] fa, int[] su){
        
         if(fa[0] ==fa[1] && fa[0] == fa[2] && fa[3] == fa[4])
            return 5;
        else if(fa[0] ==fa[1] && fa[2] == fa[3] && fa[2] == fa[4])
            return 5;
        else if(su[0] == su[1] && su[0] == su[2] && su[0] == su[3] && su[0] == su[4])
            return 4;
        else if(fa[0]+1==fa[1]&&fa[0]+2==fa[2]&&fa[0]+3==fa[3]
                &&fa[0]+4==fa[4])
            return 3;
        else if(fa[4]==14&&fa[3]==13&&fa[2]==12&&fa[1]==11&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==13&&fa[2]==12&&fa[1]==3&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==13&&fa[2]==4&&fa[1]==3&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==5&&fa[2]==4&&fa[1]==3&&fa[0]==2)
            return 2;
         else if(fa[0]==fa[1]&&fa[2]==fa[3])
             return 1;
         else if(fa[0]==fa[1]&&fa[3]==fa[4])
             return 1;
         else if(fa[1]==fa[2]&&fa[3]==fa[4])
             return 1;
         else if(fa[0]==fa[1])
             return 0;
         else if(fa[1]==fa[2])
             return 0;
         else if(fa[2]==fa[3])
             return 0;
         else if(fa[3]==fa[4])
             return 0;
        else
             return -1;
}
    public int confullhouse(int[] fa){
         if(fa[0]==fa[1]&&fa[0]==fa[2])
              return 2;
          else
         return 4;
    }
    public int contwopair(int[] fa){
        if(fa[2]==fa[3]) return 3;             
        else return 4;              
    }
    public int conpair(int[] fa){
         if(fa[0]==fa[1])
              return 1;
          else if(fa[1]==fa[2])
              return 2;
          else if(fa[2]==fa[3])
              return 3;
          else
              return 4;
    }
    public static void main(String[] args){
       
     } 
}
@17ba2b71fe3c99de95ed8ff60944858a@"
"b02611012","0","0","0","@5b1c0b927d549132560a28a6d3461e4f@
import java.util.Arrays;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        return;
    }

    // TODO
    public int compareTo(Hand that) {
        int[] thisf = new int[5];
        int[] thiss = new int[5];
        int[] thatf = new int[5];
        int[] thats = new int[5];
        int[] thishand = new int[3];
        int[] thathand = new int[3];
        for (int i = 0; i < 5; i++) {
            if (this.cards[i].getFace().equals(""A"")) {
                thisf[i] = 14;
            } else if (this.cards[i].getFace().equals(""J"")) {
                thisf[i] = 11;
            } else if (this.cards[i].getFace().equals(""Q"")) {
                thisf[i] = 12;
            } else if (this.cards[i].getFace().equals(""K"")) {
                thisf[i] = 13;
            } else {
                thisf[i] = Integer.parseInt(this.cards[i].getFace());
            }
            if (that.cards[i].getFace().equals(""A"")) {
                thatf[i] = 14;
            } else if (that.cards[i].getFace().equals(""J"")) {
                thatf[i] = 11;
            } else if (that.cards[i].getFace().equals(""Q"")) {
                thatf[i] = 12;
            } else if (that.cards[i].getFace().equals(""K"")) {
                thatf[i] = 13;
            } else {
                thatf[i] = Integer.parseInt(that.cards[i].getFace());
            }
            if (this.cards[i].getSuit().equals(""Spades"")) {
                thiss[i] = 4;
            } else if (this.cards[i].getSuit().equals(""Hearts"")) {
                thiss[i] = 3;
            } else if (this.cards[i].getSuit().equals(""Diamonds"")) {
                thiss[i] = 2;
            } else if (this.cards[i].getSuit().equals(""Clubs"")) {
                thiss[i] = 1;
            }
            if (that.cards[i].getSuit().equals(""Spades"")) {
                thats[i] = 4;
            } else if (that.cards[i].getSuit().equals(""Hearts"")) {
                thats[i] = 3;
            } else if (that.cards[i].getSuit().equals(""Diamonds"")) {
                thats[i] = 2;
            } else if (that.cards[i].getSuit().equals(""Clubs"")) {
                thats[i] = 1;
            }
        }
        //pair 2pair full house
        int paircounta = 0;
        int ahigh = 0;
        int paircountb = 0;
        int bhigh = 0;
        for (int i = 0; i < 5; i++) {
            for (int j = i + 1; j < 5; j++) {
                if (thisf[i] == thisf[j]) {
                    paircounta++;
                    if (thisf[i] > ahigh) {
                        ahigh = thisf[i];
                    }
                }
            }
        }
        for (int i = 0; i < 5; i++) {
            for (int j = i + 1; j < 5; j++) {
                if (thatf[i] == thatf[j]) {
                    paircountb++;
                    if (thatf[i] > bhigh) {
                        bhigh = thatf[i];
                    }
                }
            }
        }
        if (paircounta > 0) {
            //1 pair
            if (paircounta == 1 || paircounta == 3) {
                thishand[0] = 1;
                thishand[1] = ahigh;
                int suithigh = 0;
                for (int i = 0; i < 5; i++) {
                    if (thisf[i] == ahigh) {
                        if (thiss[i] > suithigh) {
                            suithigh = thiss[i];
                        }
                    }
                }
                thishand[2] = suithigh;
            }
            //2 pairs
            if (paircounta == 2) {
                thishand[0] = 2;
                thishand[1] = ahigh;
                int suithigh = 0;
                for (int i = 0; i < 5; i++) {
                    if (thisf[i] == ahigh) {
                        if (thiss[i] > suithigh) {
                            suithigh = thiss[i];
                        }
                    }
                }
                thishand[2] = suithigh;
            }
            //fullhouse
            if (paircounta == 4) {
                thishand[0] = 5;
                for (int i = 0; i < 5; i++) {
                    int a = 0;
                    for (int j = i + 1; j < 5; j++) {
                        if (thisf[i] == thisf[j]) {
                            a++;
                            if (a == 2) {
                                thishand[1] = thisf[i];
                            }
                        }
                    }
                }
            }
        }else{
            Arrays.sort(thisf);
            //straight
            for (int i = 0; i < 4; i++) {
                if (i == 3 && thisf[4] == 14) {
                    thishand[0] = 3;
                    thishand[1] = thisf[3];
                    thishand[2] = thiss[3];
                }
                if (thisf[i] + 1 != thisf[i+1]) {
                    break;
                }
                if (i == 3) {
                    thishand[0] = 3;
                    thishand[1] = thisf[i+1];
                    thishand[2] = thiss[i+1];
                }
            }
            //flush
            for (int i = 0; i < 4; i++) {
                if (thiss[i] != thiss[i+1]) {
                    break;
                }
                if (i == 3) {
                    thishand[0] = 4;
                    thishand[1] = thisf[i+1];
                    thishand[2] = thiss[i+1];
                }
            }
            //highcard
            if (thishand[0] == 0) {
                thishand[1] = thisf[4];
                thishand[2] = thiss[4];
            }
        }
        if (paircountb > 0) {
            //1 pair
            if (paircountb == 1 || paircountb == 3) {
                thathand[0] = 1;
                thathand[1] = bhigh;
                int suithigh = 0;
                for (int i = 0; i < 5; i++) {
                    if (thatf[i] == bhigh) {
                        if (thats[i] > suithigh) {
                            suithigh = thats[i];
                        }
                    }
                }
                thathand[2] = suithigh;
            }
            //2 pairs
            if (paircountb == 2) {
                thathand[0] = 2;
                thathand[1] = bhigh;
                int suithigh = 0;
                for (int i = 0; i < 5; i++) {
                    if (thatf[i] == bhigh) {
                        if (thats[i] > suithigh) {
                            suithigh = thats[i];
                        }
                    }
                }
                thathand[2] = suithigh;
            }
            //fullhouse
            if (paircountb == 4) {
                thathand[0] = 5;
                for (int i = 0; i < 5; i++) {
                    int a = 0;
                    for (int j = i + 1; j < 5; j++) {
                        if (thatf[i] == thatf[j]) {
                            a++;
                            if (a == 2) {
                                thathand[1] = thatf[i];
                            }
                        }
                    }
                }
            }
        }else{
            Arrays.sort(thatf);
            //straight
            for (int i = 0; i < 4; i++) {
                if (i == 3 && thatf[4] == 14) {
                    thathand[0] = 3;
                    thathand[1] = thatf[3];
                    thathand[2] = thats[3];
                }
                if (thatf[i] + 1 != thatf[i+1]) {
                    break;
                }
                if (i == 3) {
                    thathand[0] = 3;
                    thathand[1] = thatf[i+1];
                    thathand[2] = thats[i+1];
                }
            }
            //flush
            for (int i = 0; i < 4; i++) {
                if (thats[i] != thats[i+1]) {
                    break;
                }
                if (i == 3) {
                    thathand[0] = 4;
                    thathand[1] = thatf[i+1];
                    thathand[2] = thats[i+1];
                }
            }
            //highcard
            if (thathand[0] == 0) {
                thathand[1] = thatf[4];
                thathand[2] = thats[4];
            }
        }
        //compare
        for (int i = 0; i < 3; i++) {
            if (thishand[i] > thathand[i]) {
                return +1;
            }
            if (thishand[i] < thathand[i]) {
                return -1;
            }
        }
        
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@5b1c0b927d549132560a28a6d3461e4f@"
"b02611012","3","0.0933333333333333","105488","@97084fc5fce48f728d68aeeb1550392c@
import java.util.Arrays;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
    }

    // TODO
    public int compareTo(Hand that) {
        int[] thisf = new int[5];
        int[] thiss = new int[5];
        int[] thatf = new int[5];
        int[] thats = new int[5];
        int[] thishand = new int[3];
        int[] thathand = new int[3];
        for (int i = 0; i < 5; i++) {
            if (this.cards[i].getFace().equals(""A"")) {
                thisf[i] = 14;
            } else if (this.cards[i].getFace().equals(""J"")) {
                thisf[i] = 11;
            } else if (this.cards[i].getFace().equals(""Q"")) {
                thisf[i] = 12;
            } else if (this.cards[i].getFace().equals(""K"")) {
                thisf[i] = 13;
            } else {
                thisf[i] = Integer.parseInt(this.cards[i].getFace());
            }
            if (that.cards[i].getFace().equals(""A"")) {
                thatf[i] = 14;
            } else if (that.cards[i].getFace().equals(""J"")) {
                thatf[i] = 11;
            } else if (that.cards[i].getFace().equals(""Q"")) {
                thatf[i] = 12;
            } else if (that.cards[i].getFace().equals(""K"")) {
                thatf[i] = 13;
            } else {
                thatf[i] = Integer.parseInt(that.cards[i].getFace());
            }
            if (this.cards[i].getSuit().equals(""Spades"")) {
                thiss[i] = 4;
            } else if (this.cards[i].getSuit().equals(""Hearts"")) {
                thiss[i] = 3;
            } else if (this.cards[i].getSuit().equals(""Diamonds"")) {
                thiss[i] = 2;
            } else if (this.cards[i].getSuit().equals(""Clubs"")) {
                thiss[i] = 1;
            }
            if (that.cards[i].getSuit().equals(""Spades"")) {
                thats[i] = 4;
            } else if (that.cards[i].getSuit().equals(""Hearts"")) {
                thats[i] = 3;
            } else if (that.cards[i].getSuit().equals(""Diamonds"")) {
                thats[i] = 2;
            } else if (that.cards[i].getSuit().equals(""Clubs"")) {
                thats[i] = 1;
            }
        }
        //pair 2pair full house
        int paircounta = 0;
        int ahigh = 0;
        int paircountb = 0;
        int bhigh = 0;
        for (int i = 0; i < 5; i++) {
            for (int j = i + 1; j < 5; j++) {
                if (thisf[i] == thisf[j]) {
                    paircounta++;
                    if (thisf[i] > ahigh) {
                        ahigh = thisf[i];
                    }
                }
            }
        }
        for (int i = 0; i < 5; i++) {
            for (int j = i + 1; j < 5; j++) {
                if (thatf[i] == thatf[j]) {
                    paircountb++;
                    if (thatf[i] > bhigh) {
                        bhigh = thatf[i];
                    }
                }
            }
        }
        if (paircounta > 0) {
            //1 pair
            if (paircounta == 1 || paircounta == 3) {
                thishand[0] = 1;
                thishand[1] = ahigh;
                int suithigh = 0;
                for (int i = 0; i < 5; i++) {
                    if (thisf[i] == ahigh) {
                        if (thiss[i] > suithigh) {
                            suithigh = thiss[i];
                        }
                    }
                }
                thishand[2] = suithigh;
            }
            //2 pairs
            if (paircounta == 2) {
                thishand[0] = 2;
                thishand[1] = ahigh;
                int suithigh = 0;
                for (int i = 0; i < 5; i++) {
                    if (thisf[i] == ahigh) {
                        if (thiss[i] > suithigh) {
                            suithigh = thiss[i];
                        }
                    }
                }
                thishand[2] = suithigh;
            }
            //fullhouse
            if (paircounta == 4) {
                thishand[0] = 5;
                for (int i = 0; i < 5; i++) {
                    int a = 0;
                    for (int j = i + 1; j < 5; j++) {
                        if (thisf[i] == thisf[j]) {
                            a++;
                            if (a == 2) {
                                thishand[1] = thisf[i];
                            }
                        }
                    }
                }
            }
        }else{
            Arrays.sort(thisf);
            //straight
            for (int i = 0; i < 4; i++) {
                if (i == 3 && thisf[4] == 14) {
                    thishand[0] = 3;
                    thishand[1] = thisf[3];
                    thishand[2] = thiss[3];
                }
                if (thisf[i] + 1 != thisf[i+1]) {
                    break;
                }
                if (i == 3) {
                    thishand[0] = 3;
                    thishand[1] = thisf[i+1];
                    thishand[2] = thiss[i+1];
                }
            }
            //flush
            for (int i = 0; i < 4; i++) {
                if (thiss[i] != thiss[i+1]) {
                    break;
                }
                if (i == 3) {
                    thishand[0] = 4;
                    thishand[1] = thisf[i+1];
                    thishand[2] = thiss[i+1];
                }
            }
            //highcard
            if (thishand[0] == 0) {
                thishand[1] = thisf[4];
                thishand[2] = thiss[4];
            }
        }
        if (paircountb > 0) {
            //1 pair
            if (paircountb == 1 || paircountb == 3) {
                thathand[0] = 1;
                thathand[1] = bhigh;
                int suithigh = 0;
                for (int i = 0; i < 5; i++) {
                    if (thatf[i] == bhigh) {
                        if (thats[i] > suithigh) {
                            suithigh = thats[i];
                        }
                    }
                }
                thathand[2] = suithigh;
            }
            //2 pairs
            if (paircountb == 2) {
                thathand[0] = 2;
                thathand[1] = bhigh;
                int suithigh = 0;
                for (int i = 0; i < 5; i++) {
                    if (thatf[i] == bhigh) {
                        if (thats[i] > suithigh) {
                            suithigh = thats[i];
                        }
                    }
                }
                thathand[2] = suithigh;
            }
            //fullhouse
            if (paircountb == 4) {
                thathand[0] = 5;
                for (int i = 0; i < 5; i++) {
                    int a = 0;
                    for (int j = i + 1; j < 5; j++) {
                        if (thatf[i] == thatf[j]) {
                            a++;
                            if (a == 2) {
                                thathand[1] = thatf[i];
                            }
                        }
                    }
                }
            }
        }else{
            Arrays.sort(thatf);
            //straight
            for (int i = 0; i < 4; i++) {
                if (i == 3 && thatf[4] == 14) {
                    thathand[0] = 3;
                    thathand[1] = thatf[3];
                    thathand[2] = thats[3];
                }
                if (thatf[i] + 1 != thatf[i+1]) {
                    break;
                }
                if (i == 3) {
                    thathand[0] = 3;
                    thathand[1] = thatf[i+1];
                    thathand[2] = thats[i+1];
                }
            }
            //flush
            for (int i = 0; i < 4; i++) {
                if (thats[i] != thats[i+1]) {
                    break;
                }
                if (i == 3) {
                    thathand[0] = 4;
                    thathand[1] = thatf[i+1];
                    thathand[2] = thats[i+1];
                }
            }
            //highcard
            if (thathand[0] == 0) {
                thathand[1] = thatf[4];
                thathand[2] = thats[4];
            }
        }
        //compare
        for (int i = 0; i < 3; i++) {
            if (thishand[i] > thathand[i]) {
                return +1;
            }
            if (thishand[i] < thathand[i]) {
                return -1;
            }
        }
        
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@97084fc5fce48f728d68aeeb1550392c@"
"b03611023","3","0.1","105504","@c10e87370d0f767cf379e615f22ef569@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    private int[] num = new int[5];
    private int[] color = new int[5];
    private String[] copy = {""0"",""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9"",""10"", ""J"", ""Q"", ""K"", ""A""};
    private String[] Suit = {""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;        
    }

    // TODO
    public int compareTo(Hand that) {
        int a,b;
       Card[] r,e;
       r = this.arr(this.cards);
        e = that.arr(that.cards);
        
        this.findnum(r);
        that.findnum(e);
        
        a =this.findtype(this.num, this.color);
        b =that.findtype(that.num, that.color);
        
        if(a>b) return 1;
        else if(a<b) return -1;
        else{
            if(a==5){
                int aa,bb;
                aa = this.confullhouse(this.num);
                bb = that.confullhouse(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]<that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                    else if(this.color[aa]<that.color[bb])return -1;
                   
                }
            }
            if(a==4 || a==3 ||a==2 ||a==-1){               
                if(this.num[4]>that.num[4]) return 1;
                else if(this.num[4]<that.num[4]) return -1;
                else{
                    if(this.color[4]>that.color[4]) return 1;
                    else if(this.color[4]<that.color[4])return -1;
                
                }
            }
            if(a==1){
                 int aa,bb;
                aa = this.contwopair(this.num);
                bb = that.contwopair(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]<that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                    else if(this.color[aa]<that.color[bb])return -1;
                  
                }
            }
            if(a==0){
                 int aa,bb;
                aa = this.conpair(this.num);
                bb = that.conpair(that.num);
                if(this.num[aa]>that.num[bb]) return 1;
                else if(this.num[aa]<that.num[bb]) return -1;
                else{
                    if(this.color[aa]>that.color[bb]) return 1;
                     else if(this.color[aa]<that.color[bb])return -1;
                  
                }
            }
        }
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

    public Card[] arr(Card[] cards){
       for(int i = 1;i<5;i++){
         for(int j = i;j>0;j--){
             if(cards[j].compareTo(cards[j-1])==-1){
                 Card temp = cards[j-1];
                    cards[j-1] = cards[j];
                    cards[j] = temp;
             }
             else break;
         }
                    
       }
       return cards;
 }
    public void findnum(Card[] cards){
        for(int i = 0;i<5;i++){
            for(int j = 0;j<16;j++){
                if(cards[i].getFace().equals(copy[j])){
                    num[i] = j;
                    break;
                }
            }
            for(int k=0;k<4;k++){
                if(cards[i].getSuit().equals(Suit[k])){
                    color[i] = k;
                    break;
                }
            }
        }
        
    }
    public int findtype(int[] fa, int[] su){
        
         if(fa[0] ==fa[1] && fa[0] == fa[2] && fa[3] == fa[4])
            return 5;
        else if(fa[0] ==fa[1] && fa[2] == fa[3] && fa[2] == fa[4])
            return 5;
        else if(su[0] == su[1] && su[0] == su[2] && su[0] == su[3] && su[0] == su[4])
            return 4;
        else if(fa[0]+1==fa[1]&&fa[0]+2==fa[2]&&fa[0]+3==fa[3]
                &&fa[0]+4==fa[4])
            return 3;
        else if(fa[4]==14&&fa[3]==13&&fa[2]==12&&fa[1]==11&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==13&&fa[2]==12&&fa[1]==3&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==13&&fa[2]==4&&fa[1]==3&&fa[0]==2)
            return 3;
         else if(fa[4]==14&&fa[3]==5&&fa[2]==4&&fa[1]==3&&fa[0]==2)
            return 2;
         else if(fa[0]==fa[1]&&fa[2]==fa[3])
             return 1;
         else if(fa[0]==fa[1]&&fa[3]==fa[4])
             return 1;
         else if(fa[1]==fa[2]&&fa[3]==fa[4])
             return 1;
         else if(fa[0]==fa[1])
             return 0;
         else if(fa[1]==fa[2])
             return 0;
         else if(fa[2]==fa[3])
             return 0;
         else if(fa[3]==fa[4])
             return 0;
        else
             return -1;
}
    public int confullhouse(int[] fa){
         if(fa[0]==fa[1]&&fa[0]==fa[2])
              return 2;
          else
         return 4;
    }
    public int contwopair(int[] fa){
        if(fa[2]==fa[3]) return 3;             
        else return 4;              
    }
    public int conpair(int[] fa){
         if(fa[0]==fa[1])
              return 1;
          else if(fa[1]==fa[2])
              return 2;
          else if(fa[2]==fa[3])
              return 3;
          else
              return 4;
    }
    public static void main(String[] args){
       
     } 
}
@c10e87370d0f767cf379e615f22ef569@"
"r04631027","0","0.88","119200","@56c0a4fe94f04a29d71e0bb9a1d493d9@
import java.util.HashMap;

public class Player implements Comparable<Player>{ 

    private Card[] cards = new Card[5];
    private String name;
    public Card[] HighCard = new Card[1] ;
    
    public void HighCard (Card cards) {
        this.HighCard[0] = cards;
    }
     
    // DO NOT MODIFY THIS    
    public Player(String name) {
        this.name = name;
    }
     
    // DO NOT MODIFY THIS
    public String getName() {
        return this.name;
     }
     
    // DO NOT MODIFY THIS
    public void setCards(Card[] cards) {
        this.cards = cards;
    }
    public boolean isFullHouse(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards);
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace()))
                    this.HighCard(Cards[0]) ;
                return true ;
            }
            else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                    this.HighCard(Cards[4]) ;
                    return true ;
                }
            }
        }
        return false ;
    }
    public boolean isFlush(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getSuit().equalsIgnoreCase(Cards[1].getSuit())){
            if(Cards[1].getSuit().equalsIgnoreCase(Cards[2].getSuit())){
                if(Cards[2].getSuit().equalsIgnoreCase(Cards[3].getSuit())){
                 if(Cards[3].getSuit().equalsIgnoreCase(Cards[4].getSuit())){
                        this.HighCard(Cards[4]) ;
            return true ;
                    }
                }
            }
        }
            return false ;
        }
    public boolean isStraight(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
      
        MergeX.sort(Cards);
        Integer[] a1 = new Integer[Cards.length] ;
        for(int i = 0 ; i < 5 ; i++){
            if(Cards[i].getFace().equalsIgnoreCase(""J""))
                a1[i] = 11 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""Q""))
                a1[i] = 12 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""K""))
                a1[i] = 13 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""A""))
                a1[i] = 14 ;
            else
            a1[i] = Integer.parseInt(Cards[i].getFace());            
        }
        if(a1[1]==a1[0]+1){
            if(a1[2] == a1[1]+1){
                if(a1[3]== a1[2]+1){
                    if(a1[4] == a1[3]+1){
                        this.HighCard(Cards[4]) ;
                        return true ;
                    }
                }
            }
        }
        else if(a1[0]==2){
            if(a1[1]==3){
                if(a1[2]==4){
                    if(a1[3]==5){
                        if(a1[4]==14){
                            this.HighCard(Cards[3]) ;
                            return true ;
                        }
                    }
                }
            }
        }
        return false ;
    }
    public boolean isTwoPair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                this.HighCard(Cards[3]) ;
                return true ;
            }
            else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
       }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
        }
        return false;
    }
    public boolean isOnePair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            this.HighCard(Cards[1]) ;
            return true ;
        }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            this.HighCard(Cards[2]) ;
            return true ;
        }
        else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
            this.HighCard(Cards[3]) ;
            return true ;
        }
        else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
            this.HighCard(Cards[4]) ;
            return true ;
        }
        
        return false ;
    }
    // TODO 
    public int compareTo(Player that) {
        
//         complete this function so the Player can be sorted according to the cards he/she has.
        
            int[] Points = new int [2] ;
            if(this.isFullHouse())
                Points[0] = 60 ;
            
            else if(this.isFlush())
                Points[0] = 50 ;
            
            else if(this.isStraight())
                Points[0] = 40 ;
            
            else if(this.isTwoPair()){
                Points[0] = 30 ;
            }
            else if(this.isOnePair()){
                Points[0] = 20 ;
            
            }
            else
                Points[0] = 10 ;
            
            
            if(that.isFullHouse())
                Points[1] = 60 ;
            
            else if(that.isFlush())
                Points[1] = 50 ;
            
            else if(that.isStraight())
                Points[1] = 40 ;
            
            else if(that.isTwoPair()){
                Points[1] = 30 ;
            }
            else if(that.isOnePair()){
                Points[1] = 20 ;

    }
            else 
                Points[1] = 10 ;
            
//            System.out.println(Points[0]+"" ""+Points[1] ) ;
            
            if(Points[0]>Points[1])
                return 1 ;
            else if(Points[0]<Points[1])
                return -1 ;
            
            else if(Points[0]==Points[1])
            if(Points[0] == 10){
                MergeX.sort(this.cards);
                MergeX.sort(that.cards);
                this.HighCard(this.cards[4]) ;
                that.HighCard(that.cards[4]) ;
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
                }
            else 
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
            return 0 ;
    }
   
     public static void main(String[] args) {
         In in = new In(args[0]);
         String line = in.readLine();
         int players = Integer.parseInt(line.split("","")[0]);
         int win =Integer.parseInt(line.split("","")[1]);
         int playercount=0;
         HashMap<Double, Player> map = new HashMap<Double, Player>();
         Player[] a = new Player[players] ;
         for(int i=0;i<players;i++){
             a[i] = new Player(String.valueOf(i));
         }
          Player[] winn = new Player[win] ;
         for(int i=0;i<win;i++){
             winn[i] = new Player(String.valueOf(i));
         }
         
         while((line = in.readLine())!=null)
         {
           //  line = in.readLine();
             Card[] cards =new Card[5];
             String[] five = new String[5];
             five = line.split("","");
             cards[0] = new Card(five[0].split(""_"")[1],five[0].split(""_"")[0]);
             cards[1] = new Card(five[1].split(""_"")[1],five[1].split(""_"")[0]);
             cards[2] = new Card(five[2].split(""_"")[1],five[2].split(""_"")[0]);
             cards[3] = new Card(five[3].split(""_"")[1],five[3].split(""_"")[0]);
             cards[4] = new Card(five[4].split(""_"")[1],five[4].split(""_"")[0]);
             a[playercount].setCards(cards);  
            // System.out.println(playercount);
             if(playercount<win)
             {winn[playercount] = a[playercount];}
             else
             { MergeX.sort(winn);
             int uccu =a[playercount].compareTo(winn[0]);
             if(uccu==1)
             {winn[win-1]=a[playercount];}
             }
             playercount++;        
             
              
         }
        // MergeX.sort(winn[win-1].cards);
       System.out.println(winn[0].cards[0].getSuit()+""_""+winn[0].cards[0].getFace()+"",""+winn[0].cards[1].getSuit()+""_""+winn[0].cards[1].getFace()+"",""+winn[0].cards[2].getSuit()+""_""+winn[0].cards[2].getFace()+"",""+winn[0].cards[3].getSuit()+""_""+winn[0].cards[3].getFace()+"",""+winn[0].cards[4].getSuit()+""_""+winn[0].cards[4].getFace());
      
         //MergeX.sort(a);
    // Player[] c = new Player[2];
     //c[0] = new Player(""John Cena"") ;
     //c[1] = new Player(""undertaker"") ;
     //Card[] fuck = new Card[5];
     //Card[] fuck1 = new Card[5] ;
     
     
     //fuck1[0] = new Card(""4"",""Spades"") ;
     //fuck1[1] = new Card(""K"",""Hearts"") ;
     //fuck1[2] = new Card(""J"",""Clubs"") ;
     //fuck1[3] = new Card(""3"",""Spades"") ;
     //fuck1[4] = new Card(""Q"",""Hearts"") ;
     //c[1].setCards(fuck1);
     //c[0].setCards(fuck1);
     //MergeX.sort(c);
//     for (int i = 0 ; i < 5 ; i++){
 //    
//     System.out.println(a[1].cards[i].getFace());
//     }
//     System.out.println(a[0].compareTo(a[1]));
//     System.out.println(a[1].HighCard[0].compareTo(a[0].HighCard[0]));
}
}


@56c0a4fe94f04a29d71e0bb9a1d493d9@"
"r04631027","0","0.88","119200","@df357a9f0ac9175860b44bb49b7afc2b@

public class Player implements Comparable<Player>{ 

    private Card[] cards = new Card[5];
    private String name;
    public Card[] HighCard = new Card[1] ;
    
    public void HighCard (Card cards) {
        this.HighCard[0] = cards;
    }
     
    // DO NOT MODIFY THIS    
    public Player(String name) {
        this.name = name;
    }
     
    // DO NOT MODIFY THIS
    public String getName() {
        return this.name;
     }
     
    // DO NOT MODIFY THIS
    public void setCards(Card[] cards) {
        this.cards = cards;
    }
    public boolean isFullHouse(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards);
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace()))
                    this.HighCard(Cards[0]) ;
                return true ;
            }
            else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                    this.HighCard(Cards[4]) ;
                    return true ;
                }
            }
        }
        return false ;
    }
    public boolean isFlush(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getSuit().equalsIgnoreCase(Cards[1].getSuit())){
            if(Cards[1].getSuit().equalsIgnoreCase(Cards[2].getSuit())){
                if(Cards[2].getSuit().equalsIgnoreCase(Cards[3].getSuit())){
                 if(Cards[3].getSuit().equalsIgnoreCase(Cards[4].getSuit())){
                        this.HighCard(Cards[4]) ;
            return true ;
                    }
                }
            }
        }
            return false ;
        }
    public boolean isStraight(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
      
        MergeX.sort(Cards);
        Integer[] a1 = new Integer[Cards.length] ;
        for(int i = 0 ; i < 5 ; i++){
            if(Cards[i].getFace().equalsIgnoreCase(""J""))
                a1[i] = 11 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""Q""))
                a1[i] = 12 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""K""))
                a1[i] = 13 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""A""))
                a1[i] = 14 ;
            else
            a1[i] = Integer.parseInt(Cards[i].getFace());            
        }
        if(a1[1]==a1[0]+1){
            if(a1[2] == a1[1]+1){
                if(a1[3]== a1[2]+1){
                    if(a1[4] == a1[3]+1){
                        this.HighCard(Cards[4]) ;
                        return true ;
                    }
                }
            }
        }
        else if(a1[0]==2){
            if(a1[1]==3){
                if(a1[2]==4){
                    if(a1[3]==5){
                        if(a1[4]==14){
                            this.HighCard(Cards[3]) ;
                            return true ;
                        }
                    }
                }
            }
        }
        return false ;
    }
    public boolean isTwoPair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                this.HighCard(Cards[3]) ;
                return true ;
            }
            else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
       }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
        }
        return false;
    }
    public boolean isOnePair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            this.HighCard(Cards[1]) ;
            return true ;
        }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            this.HighCard(Cards[2]) ;
            return true ;
        }
        else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
            this.HighCard(Cards[3]) ;
            return true ;
        }
        else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
            this.HighCard(Cards[4]) ;
            return true ;
        }
        
        return false ;
    }
    // TODO 
    public int compareTo(Player that) {
        
//         complete this function so the Player can be sorted according to the cards he/she has.
        
            int[] Points = new int [2] ;
            if(this.isFullHouse())
                Points[0] = 60 ;
            
            else if(this.isFlush())
                Points[0] = 50 ;
            
            else if(this.isStraight())
                Points[0] = 40 ;
            
            else if(this.isTwoPair()){
                Points[0] = 30 ;
            }
            else if(this.isOnePair()){
                Points[0] = 20 ;
            
            }
            else
                Points[0] = 10 ;
            
            
            if(that.isFullHouse())
                Points[1] = 60 ;
            
            else if(that.isFlush())
                Points[1] = 50 ;
            
            else if(that.isStraight())
                Points[1] = 40 ;
            
            else if(that.isTwoPair()){
                Points[1] = 30 ;
            }
            else if(that.isOnePair()){
                Points[1] = 20 ;

    }
            else 
                Points[1] = 10 ;
            
//            System.out.println(Points[0]+"" ""+Points[1] ) ;
            
            if(Points[0]>Points[1])
                return 1 ;
            else if(Points[0]<Points[1])
                return -1 ;
            
            else if(Points[0]==Points[1])
            if(Points[0] == 10){
                MergeX.sort(this.cards);
                MergeX.sort(that.cards);
                this.HighCard(this.cards[4]) ;
                that.HighCard(that.cards[4]) ;
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
                }
            else 
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
            return 0 ;
    }
   
     public static void main(String[] args) {
         In in = new In(args[0]);
         String line = in.readLine();
         int players = Integer.parseInt(line.split("","")[0]);
         int win =Integer.parseInt(line.split("","")[1]);
         int playercount=0;
        
         Player[] a = new Player[players] ;
         for(int i=0;i<players;i++){
             a[i] = new Player(String.valueOf(i));
         }
          Player[] winn = new Player[win] ;
         for(int i=0;i<win;i++){
             winn[i] = new Player(String.valueOf(i));
         }
         
         while((line = in.readLine())!=null)
         {
           //  line = in.readLine();
             Card[] cards =new Card[5];
             String[] five = new String[5];
             five = line.split("","");
             cards[0] = new Card(five[0].split(""_"")[1],five[0].split(""_"")[0]);
             cards[1] = new Card(five[1].split(""_"")[1],five[1].split(""_"")[0]);
             cards[2] = new Card(five[2].split(""_"")[1],five[2].split(""_"")[0]);
             cards[3] = new Card(five[3].split(""_"")[1],five[3].split(""_"")[0]);
             cards[4] = new Card(five[4].split(""_"")[1],five[4].split(""_"")[0]);
             a[playercount].setCards(cards);  
            // System.out.println(playercount);
             if(playercount<win)
             {winn[playercount] = a[playercount];}
             else
             { MergeX.sort(winn);
             int uccu =a[playercount].compareTo(winn[0]);
             if(uccu==1)
             {winn[win-1]=a[playercount];}
             }
             playercount++;        
             
              
         }
        // MergeX.sort(winn[win-1].cards);
       System.out.println(winn[0].cards[0].getSuit()+""_""+winn[0].cards[0].getFace()+"",""+winn[0].cards[1].getSuit()+""_""+winn[0].cards[1].getFace()+"",""+winn[0].cards[2].getSuit()+""_""+winn[0].cards[2].getFace()+"",""+winn[0].cards[3].getSuit()+""_""+winn[0].cards[3].getFace()+"",""+winn[0].cards[4].getSuit()+""_""+winn[0].cards[4].getFace());
      
         //MergeX.sort(a);
    // Player[] c = new Player[2];
     //c[0] = new Player(""John Cena"") ;
     //c[1] = new Player(""undertaker"") ;
     //Card[] fuck = new Card[5];
     //Card[] fuck1 = new Card[5] ;
     
     
     //fuck1[0] = new Card(""4"",""Spades"") ;
     //fuck1[1] = new Card(""K"",""Hearts"") ;
     //fuck1[2] = new Card(""J"",""Clubs"") ;
     //fuck1[3] = new Card(""3"",""Spades"") ;
     //fuck1[4] = new Card(""Q"",""Hearts"") ;
     //c[1].setCards(fuck1);
     //c[0].setCards(fuck1);
     //MergeX.sort(c);
//     for (int i = 0 ; i < 5 ; i++){
 //    
//     System.out.println(a[1].cards[i].getFace());
//     }
//     System.out.println(a[0].compareTo(a[1]));
//     System.out.println(a[1].HighCard[0].compareTo(a[0].HighCard[0]));
}
}


@df357a9f0ac9175860b44bb49b7afc2b@"
"r04631036","0","0","0","@42ea838cc4260f89ff55e2586dab0120@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    public Card[] HighCard = new Card[1] ;
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        Hand[] hands= new Hand[5];
        return;
    }

    
    public void HighCard (Card cards) {
        this.HighCard[0] = cards;
    }
public boolean isFullHouse(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards);
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace()))
                    this.HighCard(Cards[0]) ;
                return true ;
            }
            else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                    this.HighCard(Cards[4]) ;
                    return true ;
                }
            }
        }
        return false ;
    }
    public boolean isFlush(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getSuit().equalsIgnoreCase(Cards[1].getSuit())){
            if(Cards[1].getSuit().equalsIgnoreCase(Cards[2].getSuit())){
                if(Cards[2].getSuit().equalsIgnoreCase(Cards[3].getSuit())){
                 if(Cards[3].getSuit().equalsIgnoreCase(Cards[4].getSuit())){
                        this.HighCard(Cards[4]) ;
            return true ;
                    }
                }
            }
        }
            return false ;
        }
    public boolean isStraight(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
      
        MergeX.sort(Cards);
        Integer[] a1 = new Integer[Cards.length] ;
        for(int i = 0 ; i < 5 ; i++){
            if(Cards[i].getFace().equalsIgnoreCase(""J""))
                a1[i] = 11 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""Q""))
                a1[i] = 12 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""K""))
                a1[i] = 13 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""A""))
                a1[i] = 14 ;
            else
            a1[i] = Integer.parseInt(Cards[i].getFace());            
        }
        if(a1[1]==a1[0]+1){
            if(a1[2] == a1[1]+1){
                if(a1[3]== a1[2]+1){
                    if(a1[4] == a1[3]+1){
                        this.HighCard(Cards[4]) ;
                        return true ;
                    }
                }
            }
        }
        else if(a1[0]==2){
            if(a1[1]==3){
                if(a1[2]==4){
                    if(a1[3]==5){
                        if(a1[4]==14){
                            this.HighCard(Cards[3]) ;
                            return true ;
                        }
                    }
                }
            }
        }
        return false ;
    }
    public boolean isTwoPair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                this.HighCard(Cards[3]) ;
                return true ;
            }
            else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
       }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
        }
        return false;
    }
    public boolean isOnePair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            this.HighCard(Cards[1]) ;
            return true ;
        }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            this.HighCard(Cards[2]) ;
            return true ;
        }
        else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
            this.HighCard(Cards[3]) ;
            return true ;
        }
        else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
            this.HighCard(Cards[4]) ;
            return true ;
        }
        
        return false ;
    }
    // TODO
    public int compareTo(Hand that) {
        int[] Points = new int [2] ;
            if(this.isFullHouse())
                Points[0] = 60 ;
            
            else if(this.isFlush())
                Points[0] = 50 ;
            
            else if(this.isStraight())
                Points[0] = 40 ;
            
            else if(this.isTwoPair()){
                Points[0] = 30 ;
            }
            else if(this.isOnePair()){
                Points[0] = 20 ;
            
            }
            else
                Points[0] = 10 ;
            
            
            if(that.isFullHouse())
                Points[1] = 60 ;
            
            else if(that.isFlush())
                Points[1] = 50 ;
            
            else if(that.isStraight())
                Points[1] = 40 ;
            
            else if(that.isTwoPair()){
                Points[1] = 30 ;
            }
            else if(that.isOnePair()){
                Points[1] = 20 ;

    }
            else 
                Points[1] = 10 ;
            
//            System.out.println(Points[0]+"" ""+Points[1] ) ;
            
            if(Points[0]>Points[1])
                return 1 ;
            else if(Points[0]<Points[1])
                return -1 ;
            
            else if(Points[0]==Points[1])
            if(Points[0] == 10){
                MergeX.sort(this.cards);
                MergeX.sort(that.cards);
                this.HighCard(this.cards[4]) ;
                that.HighCard(that.cards[4]) ;
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
                }
            else 
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
            return 0 ;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@42ea838cc4260f89ff55e2586dab0120@"
"r04631027","0","0","0","@fcb5ee0c8deb8ca850241d85a2136746@public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
 public Card[] HighCard = new Card[1] ;
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        return;
    }
     public void HighCard (Card cards) {
        this.HighCard[0] = cards;
    }
 public boolean isFullHouse(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards);
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace()))
                    this.HighCard(Cards[0]) ;
                return true ;
            }
            else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                    this.HighCard(Cards[4]) ;
                    return true ;
                }
            }
        }
        return false ;
    }
    public boolean isFlush(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getSuit().equalsIgnoreCase(Cards[1].getSuit())){
            if(Cards[1].getSuit().equalsIgnoreCase(Cards[2].getSuit())){
                if(Cards[2].getSuit().equalsIgnoreCase(Cards[3].getSuit())){
                 if(Cards[3].getSuit().equalsIgnoreCase(Cards[4].getSuit())){
                        this.HighCard(Cards[4]) ;
            return true ;
                    }
                }
            }
        }
            return false ;
        }
    public boolean isStraight(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
      
        MergeX.sort(Cards);
        Integer[] a1 = new Integer[Cards.length] ;
        for(int i = 0 ; i < 5 ; i++){
            if(Cards[i].getFace().equalsIgnoreCase(""J""))
                a1[i] = 11 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""Q""))
                a1[i] = 12 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""K""))
                a1[i] = 13 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""A""))
                a1[i] = 14 ;
            else
            a1[i] = Integer.parseInt(Cards[i].getFace());            
        }
        if(a1[1]==a1[0]+1){
            if(a1[2] == a1[1]+1){
                if(a1[3]== a1[2]+1){
                    if(a1[4] == a1[3]+1){
                        this.HighCard(Cards[4]) ;
                        return true ;
                    }
                }
            }
        }
        else if(a1[0]==2){
            if(a1[1]==3){
                if(a1[2]==4){
                    if(a1[3]==5){
                        if(a1[4]==14){
                            this.HighCard(Cards[3]) ;
                            return true ;
                        }
                    }
                }
            }
        }
        return false ;
    }
    public boolean isTwoPair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                this.HighCard(Cards[3]) ;
                return true ;
            }
            else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
       }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
        }
        return false;
    }
    public boolean isOnePair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            this.HighCard(Cards[1]) ;
            return true ;
        }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            this.HighCard(Cards[2]) ;
            return true ;
        }
        else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
            this.HighCard(Cards[3]) ;
            return true ;
        }
        else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
            this.HighCard(Cards[4]) ;
            return true ;
        }
        
        return false ;
    }
    // TODO
    public int compareTo(Hand that) {
        int[] Points = new int [2] ;
            if(this.isFullHouse())
                Points[0] = 60 ;
            
            else if(this.isFlush())
                Points[0] = 50 ;
            
            else if(this.isStraight())
                Points[0] = 40 ;
            
            else if(this.isTwoPair()){
                Points[0] = 30 ;
            }
            else if(this.isOnePair()){
                Points[0] = 20 ;
            
            }
            else
                Points[0] = 10 ;
            
            
            if(that.isFullHouse())
                Points[1] = 60 ;
            
            else if(that.isFlush())
                Points[1] = 50 ;
            
            else if(that.isStraight())
                Points[1] = 40 ;
            
            else if(that.isTwoPair()){
                Points[1] = 30 ;
            }
            else if(that.isOnePair()){
                Points[1] = 20 ;

    }
            else 
                Points[1] = 10 ;
            
//            System.out.println(Points[0]+"" ""+Points[1] ) ;
            
            if(Points[0]>Points[1])
                return 1 ;
            else if(Points[0]<Points[1])
                return -1 ;
            
            else if(Points[0]==Points[1])
            if(Points[0] == 10){
                MergeX.sort(this.cards);
                MergeX.sort(that.cards);
                this.HighCard(this.cards[4]) ;
                that.HighCard(that.cards[4]) ;
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
                }
            else 
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
            return 0 ;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}
@fcb5ee0c8deb8ca850241d85a2136746@"
"r04631027","3","0.0966666666666667","106016","@0326c2ca08c3243ab36fe04582c58dd3@public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
 public Card[] HighCard = new Card[1] ;
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
      this.cards = cards;
    }
     public void HighCard (Card cards) {
        this.HighCard[0] = cards;
    }
 public boolean isFullHouse(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards);
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace()))
                    this.HighCard(Cards[0]) ;
                return true ;
            }
            else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                    this.HighCard(Cards[4]) ;
                    return true ;
                }
            }
        }
        return false ;
    }
    public boolean isFlush(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getSuit().equalsIgnoreCase(Cards[1].getSuit())){
            if(Cards[1].getSuit().equalsIgnoreCase(Cards[2].getSuit())){
                if(Cards[2].getSuit().equalsIgnoreCase(Cards[3].getSuit())){
                 if(Cards[3].getSuit().equalsIgnoreCase(Cards[4].getSuit())){
                        this.HighCard(Cards[4]) ;
            return true ;
                    }
                }
            }
        }
            return false ;
        }
    public boolean isStraight(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
      
        MergeX.sort(Cards);
        Integer[] a1 = new Integer[Cards.length] ;
        for(int i = 0 ; i < 5 ; i++){
            if(Cards[i].getFace().equalsIgnoreCase(""J""))
                a1[i] = 11 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""Q""))
                a1[i] = 12 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""K""))
                a1[i] = 13 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""A""))
                a1[i] = 14 ;
            else
            a1[i] = Integer.parseInt(Cards[i].getFace());            
        }
        if(a1[1]==a1[0]+1){
            if(a1[2] == a1[1]+1){
                if(a1[3]== a1[2]+1){
                    if(a1[4] == a1[3]+1){
                        this.HighCard(Cards[4]) ;
                        return true ;
                    }
                }
            }
        }
        else if(a1[0]==2){
            if(a1[1]==3){
                if(a1[2]==4){
                    if(a1[3]==5){
                        if(a1[4]==14){
                            this.HighCard(Cards[3]) ;
                            return true ;
                        }
                    }
                }
            }
        }
        return false ;
    }
    public boolean isTwoPair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                this.HighCard(Cards[3]) ;
                return true ;
            }
            else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
       }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
        }
        return false;
    }
    public boolean isOnePair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            this.HighCard(Cards[1]) ;
            return true ;
        }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            this.HighCard(Cards[2]) ;
            return true ;
        }
        else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
            this.HighCard(Cards[3]) ;
            return true ;
        }
        else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
            this.HighCard(Cards[4]) ;
            return true ;
        }
        
        return false ;
    }
    // TODO
    public int compareTo(Hand that) {
        int[] Points = new int [2] ;
            if(this.isFullHouse())
                Points[0] = 60 ;
            
            else if(this.isFlush())
                Points[0] = 50 ;
            
            else if(this.isStraight())
                Points[0] = 40 ;
            
            else if(this.isTwoPair()){
                Points[0] = 30 ;
            }
            else if(this.isOnePair()){
                Points[0] = 20 ;
            
            }
            else
                Points[0] = 10 ;
            
            
            if(that.isFullHouse())
                Points[1] = 60 ;
            
            else if(that.isFlush())
                Points[1] = 50 ;
            
            else if(that.isStraight())
                Points[1] = 40 ;
            
            else if(that.isTwoPair()){
                Points[1] = 30 ;
            }
            else if(that.isOnePair()){
                Points[1] = 20 ;

    }
            else 
                Points[1] = 10 ;
            
//            System.out.println(Points[0]+"" ""+Points[1] ) ;
            
            if(Points[0]>Points[1])
                return 1 ;
            else if(Points[0]<Points[1])
                return -1 ;
            
            else if(Points[0]==Points[1])
            if(Points[0] == 10){
                MergeX.sort(this.cards);
                MergeX.sort(that.cards);
                this.HighCard(this.cards[4]) ;
                that.HighCard(that.cards[4]) ;
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
                }
            else 
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
            return 0 ;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}
@0326c2ca08c3243ab36fe04582c58dd3@"
"b03106003","0","0","0","@ff6a66ea3572fbf31f3d52b56135e760@
import java.util.Arrays;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    public int mainCardIndex = 4;
    public int kind;
    private Card[] oricards;
    private Card[] cards;
    public Hand(){
        return;
    }
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.oricards = cards;
        cards = Arrays.copyOf(oricards,oricards.length);
        Arrays.sort(cards);
        setOrder(cards);
        return;
    }

    // TODO
    public int compareTo(Hand that) {
        int ans = 0;
        Arrays.sort(cards);
        Arrays.sort(that.cards);
        
        if(this.kind > that.kind){
            ans = 1;
        }else if(this.kind < that.kind){
            ans = -1;
        }else if(this.kind == that.kind){
            ans = cards[mainCardIndex].compareTo(that.cards[that.mainCardIndex]);  
        }
        return ans;
    }

      // Do not modified this function
    public Card[] getCards() { return this.oricards; }
    
    //Copy from Player
    public boolean sameSuit(Card c1, Card c2){
    if (c1.getSuit().equals(c2.getSuit())){
        return true;
    }
        return false;
    }
    
    //new
    
    public int setOrder(Card[] card){
    int flag = 0;
    //1 High Card
    //2 1-Pair
    //3 2-Pair
    //4 Straight
    //5 Flush
    //6 Full House
    Arrays.sort(card);
    if(full_house(card)){
        flag = 6;
    }else if(flush(card)){
        flag = 5;
    }else if(straight(card)){
        flag = 4;
    }else if(two_pare(card)){
        flag = 3;
    }else if(one_pare(card)){
        flag = 2;
    }else{
        flag = 1;
        mainCardIndex = 4;
    }        
        kind = flag;
        return flag;
    }
    public boolean full_house(Card[] card){
        boolean flag = false;
        // use three_of_a_kind and two_pare because 1 1 1 5 5  can also be seen as a two_pare
        if(two_pare(card)&&three_of_a_kind(card)&&getnumber(card[1].getFace()) != getnumber(card[3].getFace())){
            three_of_a_kind(card);
            flag = true;
        }else{
            mainCardIndex = 4;
        }
        return flag;
        
    }
    public boolean flush(Card[] card){
        boolean flag = false;
        /*
        System.out.println(name);
        System.out.println(card[0].getSuit());
        System.out.println(card[1].getSuit());
        System.out.println(card[0].getSuit().equals(card[1].getSuit()));
        */
        
        if(card[0].getSuit().equals(card[1].getSuit())&&card[1].getSuit().equals(card[2].getSuit())&&card[2].getSuit().equals(card[3].getSuit())&&card[3].getSuit().equals(card[4].getSuit())){
            flag = true;
            mainCardIndex = 4;
        }
        return flag;
    }
    public boolean straight(Card[] card){
        boolean flag = false;    
            if(getnumber(card[0].getFace())+1 == getnumber(card[1].getFace())&&getnumber(card[1].getFace())+1 == getnumber(card[2].getFace())
                    &&getnumber(card[2].getFace())+1 == getnumber(card[3].getFace())
                    &&getnumber(card[3].getFace())+1 == getnumber(card[4].getFace())
                    ){
                flag = true;
                mainCardIndex = 4;
            }else if(getnumber(card[4].getFace())== 14 &&getnumber(card[4].getFace())== 2){
                if(getnumber(card[0].getFace())+1 == getnumber(card[1].getFace())&&getnumber(card[1].getFace())+1 == getnumber(card[2].getFace())
                    &&getnumber(card[2].getFace())+1 == getnumber(card[3].getFace())
                    ){
                flag = true;
                mainCardIndex = 3;
            }
            }
        return flag;
    }        
    public boolean three_of_a_kind(Card[] card){
        boolean flag = false;
        if(getnumber(card[0].getFace()) == getnumber(card[1].getFace()) && getnumber(card[1].getFace()) == getnumber(card[2].getFace())){
            flag = true;
            mainCardIndex = 2;
        }if(getnumber(card[1].getFace()) == getnumber(card[2].getFace()) && getnumber(card[2].getFace()) == getnumber(card[3].getFace())){
            flag = true;
            mainCardIndex = 3;
        }if(getnumber(card[2].getFace()) == getnumber(card[3].getFace()) && getnumber(card[3].getFace()) == getnumber(card[4].getFace())){
            flag = true;
            mainCardIndex = 4;
        }
        return flag;
    }
    public boolean two_pare(Card[] card){
        boolean flag = false;
        if(getnumber(card[0].getFace()) == getnumber(card[1].getFace())&& getnumber(card[2].getFace()) == getnumber(card[3].getFace())){
            flag = true;
            mainCardIndex = 3;
        }else if(getnumber(card[0].getFace()) == getnumber(card[1].getFace())&&getnumber(card[3].getFace()) == getnumber(card[4].getFace())){
            flag = true;
            mainCardIndex = 4;
        }else if(getnumber(card[1].getFace()) == getnumber(card[2].getFace())&&getnumber(card[3].getFace()) == getnumber(card[4].getFace())){
            flag = true;
            mainCardIndex = 4;
        }
        return flag;
    }
    public boolean one_pare(Card[] card){
        boolean flag = false;
        if(getnumber(card[0].getFace()) == getnumber(card[1].getFace())){
            flag = true;
            mainCardIndex = 1;
        }else if(getnumber(card[1].getFace()) == getnumber(card[2].getFace())){
            flag = true;
            mainCardIndex = 2;
        }else if(getnumber(card[2].getFace()) == getnumber(card[3].getFace())){
            flag = true;
            mainCardIndex = 3;
        }else if(getnumber(card[3].getFace()) == getnumber(card[4].getFace())){
            flag = true;
            mainCardIndex = 4;
        }
        return flag;
    }
    static private int getnumber(String s){
        int flag = 0;
        switch (s){
            case""A"":
                flag = 14;
                break;
            case""2"":
                flag = 2;
                break;            
            case""3"":
                flag = 3;
                break;                
            case""4"":
                flag = 4;
                break;        
            case""5"":
                flag = 5;
                break; 
            case""6"":
                flag = 6;
                break;
            case""7"":
                flag = 7;
                break;
            case""8"":
                flag = 8;
                break;
            case""9"":
                flag = 9;
                break;
            case""10"":
                flag = 10;
                break;
            case""J"":
                flag = 11;
                break;
            case""Q"":
                flag = 12;
                break;
            case""K"":
                flag = 13;
                break;
                default:
                System.out.println(""Wrong!"");
                break;
        }
        return flag;
    
    }
    
}

@ff6a66ea3572fbf31f3d52b56135e760@"
"b03106003","1","0.1","102752","@d8a1a04cfe71655351d8e2dd882dfa15@
import java.util.Arrays;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    public int mainCardIndex = 4;
    public int kind;
    private Card[] oricards;
    private Card[] cards;
    public Hand(){
        return;
    }
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.oricards = cards;
        cards = Arrays.copyOf(oricards,oricards.length);
        Arrays.sort(cards);
        setOrder(cards);
        return;
    }

    // TODO
    public int compareTo(Hand that) {
        int ans = 0;        
        if(this.kind > that.kind){
            ans = 1;
        }else if(this.kind < that.kind){
            ans = -1;
        }else if(this.kind == that.kind){
            ans = cards[mainCardIndex].compareTo(that.cards[that.mainCardIndex]);  
        }
        return ans;
    }

      // Do not modified this function
    public Card[] getCards() { return this.oricards; }
    
    //Copy from Player  
    public int setOrder(Card[] card){
    int flag = 0;
    //1 High Card
    //2 1-Pair
    //3 2-Pair
    //4 Straight
    //5 Flush
    //6 Full House
    if(full_house(card)){
        flag = 6;
    }else if(flush(card)){
        flag = 5;
    }else if(straight(card)){
        flag = 4;
    }else if(two_pare(card)){
        flag = 3;
    }else if(one_pare(card)){
        flag = 2;
    }else{
        flag = 1;
        mainCardIndex = 4;
    }        
        kind = flag;
        return flag;
    }
    public boolean full_house(Card[] card){
        boolean flag = false;
        // use three_of_a_kind and two_pare because 1 1 1 5 5  can also be seen as a two_pare
        if(two_pare(card)&&three_of_a_kind(card)&&getnumber(card[1].getFace()) != getnumber(card[3].getFace())){
            three_of_a_kind(card);
            flag = true;
        }else{
            mainCardIndex = 4;
        }
        return flag;
        
    }
    public boolean flush(Card[] card){
        boolean flag = false;
        if(card[0].getSuit().equals(card[1].getSuit())&&card[1].getSuit().equals(card[2].getSuit())&&card[2].getSuit().equals(card[3].getSuit())&&card[3].getSuit().equals(card[4].getSuit())){
            flag = true;
            mainCardIndex = 4;
        }
        return flag;
    }
    public boolean straight(Card[] card){
        boolean flag = false;    
            if(getnumber(card[0].getFace())+1 == getnumber(card[1].getFace())&&getnumber(card[1].getFace())+1 == getnumber(card[2].getFace())
                    &&getnumber(card[2].getFace())+1 == getnumber(card[3].getFace())
                    &&getnumber(card[3].getFace())+1 == getnumber(card[4].getFace())
                    ){
                flag = true;
                mainCardIndex = 4;
            }else if(getnumber(card[4].getFace())== 14 &&getnumber(card[4].getFace())== 2){
                if(getnumber(card[0].getFace())+1 == getnumber(card[1].getFace())&&getnumber(card[1].getFace())+1 == getnumber(card[2].getFace())
                    &&getnumber(card[2].getFace())+1 == getnumber(card[3].getFace())
                    ){
                flag = true;
                mainCardIndex = 3;
            }
            }
        return flag;
    }        
    public boolean three_of_a_kind(Card[] card){
        boolean flag = false;
        if(getnumber(card[0].getFace()) == getnumber(card[1].getFace()) && getnumber(card[1].getFace()) == getnumber(card[2].getFace())){
            flag = true;
            mainCardIndex = 2;
        }if(getnumber(card[1].getFace()) == getnumber(card[2].getFace()) && getnumber(card[2].getFace()) == getnumber(card[3].getFace())){
            flag = true;
            mainCardIndex = 3;
        }if(getnumber(card[2].getFace()) == getnumber(card[3].getFace()) && getnumber(card[3].getFace()) == getnumber(card[4].getFace())){
            flag = true;
            mainCardIndex = 4;
        }
        return flag;
    }
    public boolean two_pare(Card[] card){
        boolean flag = false;
        if(getnumber(card[0].getFace()) == getnumber(card[1].getFace())&& getnumber(card[2].getFace()) == getnumber(card[3].getFace())){
            flag = true;
            mainCardIndex = 3;
        }else if(getnumber(card[0].getFace()) == getnumber(card[1].getFace())&&getnumber(card[3].getFace()) == getnumber(card[4].getFace())){
            flag = true;
            mainCardIndex = 4;
        }else if(getnumber(card[1].getFace()) == getnumber(card[2].getFace())&&getnumber(card[3].getFace()) == getnumber(card[4].getFace())){
            flag = true;
            mainCardIndex = 4;
        }
        return flag;
    }
    public boolean one_pare(Card[] card){
        boolean flag = false;
        if(getnumber(card[0].getFace()) == getnumber(card[1].getFace())){
            flag = true;
            mainCardIndex = 1;
        }else if(getnumber(card[1].getFace()) == getnumber(card[2].getFace())){
            flag = true;
            mainCardIndex = 2;
        }else if(getnumber(card[2].getFace()) == getnumber(card[3].getFace())){
            flag = true;
            mainCardIndex = 3;
        }else if(getnumber(card[3].getFace()) == getnumber(card[4].getFace())){
            flag = true;
            mainCardIndex = 4;
        }
        return flag;
    }
    static private int getnumber(String s){
        int flag = 0;
        switch (s){
            case""A"":
                flag = 14;
                break;
            case""2"":
                flag = 2;
                break;            
            case""3"":
                flag = 3;
                break;                
            case""4"":
                flag = 4;
                break;        
            case""5"":
                flag = 5;
                break; 
            case""6"":
                flag = 6;
                break;
            case""7"":
                flag = 7;
                break;
            case""8"":
                flag = 8;
                break;
            case""9"":
                flag = 9;
                break;
            case""10"":
                flag = 10;
                break;
            case""J"":
                flag = 11;
                break;
            case""Q"":
                flag = 12;
                break;
            case""K"":
                flag = 13;
                break;
                default:
                System.out.println(""Wrong!"");
                break;
        }
        return flag;
    
    }
    
}
@d8a1a04cfe71655351d8e2dd882dfa15@"
"b03106003","3","0.1","103232","@b56a124fa6dfb3693458f5b42c6bde8a@
import java.util.Arrays;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    public int mainCardIndex = 4;
    public int kind;
    private Card[] cards;
    public Hand(){
        return;
    }
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
        Arrays.sort(cards);
        setOrder(cards);
        return;
    }

    // TODO
    public int compareTo(Hand that) {
        int ans = 0;        
        if(this.kind > that.kind){
            ans = 1;
        }else if(this.kind < that.kind){
            ans = -1;
        }else if(this.kind == that.kind){
            ans = cards[mainCardIndex].compareTo(that.cards[that.mainCardIndex]);  
        }
        return ans;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
    
    //Copy from Player  
    public int setOrder(Card[] card){
    int flag = 0;
    //1 High Card
    //2 1-Pair
    //3 2-Pair
    //4 Straight
    //5 Flush
    //6 Full House
    if(full_house(card)){
        flag = 6;
    }else if(flush(card)){
        flag = 5;
    }else if(straight(card)){
        flag = 4;
    }else if(two_pare(card)){
        flag = 3;
    }else if(one_pare(card)){
        flag = 2;
    }else{
        flag = 1;
        mainCardIndex = 4;
    }        
        kind = flag;
        return flag;
    }
    public boolean full_house(Card[] card){
        boolean flag = false;
        // use three_of_a_kind and two_pare because 1 1 1 5 5  can also be seen as a two_pare
        if(two_pare(card)&&three_of_a_kind(card)&&getnumber(card[1].getFace()) != getnumber(card[3].getFace())){
            three_of_a_kind(card);
            flag = true;
        }else{
            mainCardIndex = 4;
        }
        return flag;
        
    }
    public boolean flush(Card[] card){
        boolean flag = false;
        if(card[0].getSuit().equals(card[1].getSuit())&&card[1].getSuit().equals(card[2].getSuit())&&card[2].getSuit().equals(card[3].getSuit())&&card[3].getSuit().equals(card[4].getSuit())){
            flag = true;
            mainCardIndex = 4;
        }
        return flag;
    }
    public boolean straight(Card[] card){
        boolean flag = false;    
            if(getnumber(card[0].getFace())+1 == getnumber(card[1].getFace())&&getnumber(card[1].getFace())+1 == getnumber(card[2].getFace())
                    &&getnumber(card[2].getFace())+1 == getnumber(card[3].getFace())
                    &&getnumber(card[3].getFace())+1 == getnumber(card[4].getFace())
                    ){
                flag = true;
                mainCardIndex = 4;
            }else if(getnumber(card[4].getFace())== 14 &&getnumber(card[4].getFace())== 2){
                if(getnumber(card[0].getFace())+1 == getnumber(card[1].getFace())&&getnumber(card[1].getFace())+1 == getnumber(card[2].getFace())
                    &&getnumber(card[2].getFace())+1 == getnumber(card[3].getFace())
                    ){
                flag = true;
                mainCardIndex = 3;
            }
            }
        return flag;
    }        
    public boolean three_of_a_kind(Card[] card){
        boolean flag = false;
        if(getnumber(card[0].getFace()) == getnumber(card[1].getFace()) && getnumber(card[1].getFace()) == getnumber(card[2].getFace())){
            flag = true;
            mainCardIndex = 2;
        }if(getnumber(card[1].getFace()) == getnumber(card[2].getFace()) && getnumber(card[2].getFace()) == getnumber(card[3].getFace())){
            flag = true;
            mainCardIndex = 3;
        }if(getnumber(card[2].getFace()) == getnumber(card[3].getFace()) && getnumber(card[3].getFace()) == getnumber(card[4].getFace())){
            flag = true;
            mainCardIndex = 4;
        }
        return flag;
    }
    public boolean two_pare(Card[] card){
        boolean flag = false;
        if(getnumber(card[0].getFace()) == getnumber(card[1].getFace())&& getnumber(card[2].getFace()) == getnumber(card[3].getFace())){
            flag = true;
            mainCardIndex = 3;
        }else if(getnumber(card[0].getFace()) == getnumber(card[1].getFace())&&getnumber(card[3].getFace()) == getnumber(card[4].getFace())){
            flag = true;
            mainCardIndex = 4;
        }else if(getnumber(card[1].getFace()) == getnumber(card[2].getFace())&&getnumber(card[3].getFace()) == getnumber(card[4].getFace())){
            flag = true;
            mainCardIndex = 4;
        }
        return flag;
    }
    public boolean one_pare(Card[] card){
        boolean flag = false;
        if(getnumber(card[0].getFace()) == getnumber(card[1].getFace())){
            flag = true;
            mainCardIndex = 1;
        }else if(getnumber(card[1].getFace()) == getnumber(card[2].getFace())){
            flag = true;
            mainCardIndex = 2;
        }else if(getnumber(card[2].getFace()) == getnumber(card[3].getFace())){
            flag = true;
            mainCardIndex = 3;
        }else if(getnumber(card[3].getFace()) == getnumber(card[4].getFace())){
            flag = true;
            mainCardIndex = 4;
        }
        return flag;
    }
    static private int getnumber(String s){
        int flag = 0;
        switch (s){
            case""A"":
                flag = 14;
                break;
            case""2"":
                flag = 2;
                break;            
            case""3"":
                flag = 3;
                break;                
            case""4"":
                flag = 4;
                break;        
            case""5"":
                flag = 5;
                break; 
            case""6"":
                flag = 6;
                break;
            case""7"":
                flag = 7;
                break;
            case""8"":
                flag = 8;
                break;
            case""9"":
                flag = 9;
                break;
            case""10"":
                flag = 10;
                break;
            case""J"":
                flag = 11;
                break;
            case""Q"":
                flag = 12;
                break;
            case""K"":
                flag = 13;
                break;
                default:
                System.out.println(""Wrong!"");
                break;
        }
        return flag;
    
    }
    
}

@b56a124fa6dfb3693458f5b42c6bde8a@"
"b03611003","3","0.0966666666666667","105552","@5bbab5bb64053258ab01dd29a036188e@
import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards;

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards) {
        this.cards = cards;

    }

    // TODO
    public int compareTo(Hand that) {
        int typethis = this.typesofhand(this.cards);
        int typethat = this.typesofhand(that.cards);

        if (typethis > typethat) {
            return 1;
        } else if (typethis < typethat) {
            return -1;
        } else {
            if (typethis == 5) {
                return this.compareFull(that.cards);
            } else if (typethis == 4) {
                return this.compareFlush(that.cards);
            } else if (typethis == 3) {
                return this.compareStraight(that.cards);
            } else if (typethis == 2) {
                return this.compareTwopair(that.cards);
            } else if (typethis == 1) {
                return this.comparePair(that.cards);
            } else {
                return this.compareHigh(that.cards);
            }

        }

    }

    // Do not modified this function
    public Card[] getCards() {
        return this.cards;
    }

    public static int toface(Card A) {
        if (""A"".equals(A.getFace())) {
            return 14;
        } else if (""J"".equals(A.getFace())) {
            return 11;
        } else if (""Q"".equals(A.getFace())) {
            return 12;
        } else if (""K"".equals(A.getFace())) {
            return 13;
        } else {
            return Integer.parseInt(A.getFace());
        }
    }

//    4 3 2 1 黑陶、紅心、方塊、梅花
    public static int tosuit(Card A) {
        if (""Spades"".equals(A.getSuit())) {
            return 4;
        } else if (""Hearts"".equals(A.getSuit())) {
            return 3;
        } else if (""Diamonds"".equals(A.getSuit())) {
            return 2;
        } else {
            return 1;
        }
    }
//    5 Full、4 Flush、3 Straight、2 two pair、1 one pair、0 High

    public int typesofhand(Card[] cards) {
        Arrays.sort(cards);

        int[] face = new int[5];
        int[] suit = new int[5];
        int[] numberofface = new int[15];  // 從2到14(A)
        int[] numberofsuit = new int[5];    // 從1(clubs)到4(spades)

        int fullhouse = 0;
        int pair = 0;
        int straight = 0;
        int flush = 0;

        for (int i = 0; i < 5; i++) {
            face[i] = Hand.toface(cards[i]);
            suit[i] = Hand.tosuit(cards[i]);
            numberofface[face[i]]++;
            numberofsuit[suit[i]]++;
        }

//        測重複 full、pair
//        Full house 要符合 fullhouse == 1、pair ==2
//        Pair 即 pair個數
//        Straight 符合 straight == 4
        for (int i = 2; i < 15; i++) {
            if (numberofface[i] == 4) {
                pair += 2;
            }
            if (numberofface[i] == 3) {
                fullhouse += 1;
                pair += 1;
            }
            if (numberofface[i] == 2) {
                pair += 1;
            }
            if (numberofface[i] == 1 && numberofface[i - 1] == 1) {
                straight += 1;
            }
            if (i == 5 && straight == 3) {
                if (numberofface[14] == 1) {
                    straight += 1;
                    break;
                }
            }
        }

//        flush == 1則是 Flush
        for (int i = 0; i < 4; i++) {
            if (numberofsuit[i] == 5) {
                flush += 1;
            }
        }

        if (fullhouse == 1 && pair == 2) {
            return 5;
        } else if (flush == 1) {
            return 4;
        } else if (straight == 4) {
            return 3;
        } else if (pair == 2) {
            return 2;
        } else if (pair == 1) {
            return 1;
        } else {
            return 0;
        }

    }

    public int compareFull(Card[] that) {
        int thisthree = Hand.toface(this.cards[2]);
        int thistwo;
        int thatthree = Hand.toface(that[2]);
        int thattwo;

        if (thisthree == Hand.toface(this.cards[0])) {
            thistwo = Hand.toface(this.cards[4]);
        } else {
            thistwo = Hand.toface(this.cards[2]);
        }

        if (thatthree == Hand.toface(that[0])) {
            thattwo = Hand.toface(that[4]);
        } else {
            thattwo = Hand.toface(that[2]);
        }

        if (thisthree > thatthree) {
            return 1;
        } else if (thisthree < thatthree) {
            return -1;
        } else {
            if (thistwo > thattwo) {
                return 1;
            } else {
                return -1;
            }
        }

    }

    public int compareFlush(Card[] that) {
        if (Hand.toface(this.cards[4]) > Hand.toface(that[4])) {
            return 1;
        } else if (Hand.toface(this.cards[4]) < Hand.toface(that[4])) {
            return -1;
        } else {
            if (Hand.toface(this.cards[3]) > Hand.toface(that[3])) {
                return 1;
            } else if (Hand.toface(this.cards[3]) < Hand.toface(that[3])) {
                return -1;
            } else {
                if (Hand.toface(this.cards[2]) > Hand.toface(that[2])) {
                    return 1;
                } else if (Hand.toface(this.cards[2]) < Hand.toface(that[2])) {
                    return -1;
                } else {
                    if (Hand.toface(this.cards[1]) > Hand.toface(that[1])) {
                        return 1;
                    } else if (Hand.toface(this.cards[1]) < Hand.toface(that[1])) {
                        return -1;
                    } else {
                        if (Hand.toface(this.cards[0]) > Hand.toface(that[0])) {
                            return 1;
                        } else if (Hand.toface(this.cards[0]) < Hand.toface(that[0])) {
                            return -1;
                        } else {
                            return 0;
                        }
                    }
                }
            }
        }
    }

    public int compareStraight(Card[] that) {
        if (Hand.toface(this.cards[4]) > Hand.toface(that[4])) {
            return 1;
        } else if (Hand.toface(this.cards[4]) < Hand.toface(that[4])) {
            return -1;
        } else {
            return 0;
        }
    }

    public int compareTwopair(Card[] that) {
        int thispair1 = Hand.toface(this.cards[3]);
        int thatpair1 = Hand.toface(that[3]);
        int thispair2 = Hand.toface(this.cards[1]);
        int thatpair2 = Hand.toface(that[1]);
        int thiskicker1;
        int thatkicker1;

        if (thispair1 == Hand.toface(this.cards[4])) {
            if (thispair2 == Hand.toface(this.cards[2])) {
                thiskicker1 = Hand.toface(this.cards[0]);
            } else {
                thiskicker1 = Hand.toface(this.cards[2]);
            }
        } else {
            thiskicker1 = Hand.toface(this.cards[4]);
        }

        if (thatpair1 == Hand.toface(that[4])) {
            if (thatpair2 == Hand.toface(that[2])) {
                thatkicker1 = Hand.toface(that[0]);
            } else {
                thatkicker1 = Hand.toface(that[2]);
            }
        } else {
            thatkicker1 = Hand.toface(that[4]);
        }

        if (thispair1 > thatpair1) {
            return 1;
        } else if (thispair1 < thatpair1) {
            return -1;
        } else {
            if (thispair2 > thatpair2) {
                return 1;
            } else if (thispair2 < thatpair2) {
                return -1;
            } else {
                if (thiskicker1 > thatkicker1) {
                    return 1;
                } else {
                    return -1;
                }
            }
        }

    }

    public int comparePair(Card[] that) {
        int thispair;
        int thatpair;
        int pair1rank = 0;
        int pair2rank = 0;

        for (int i = 1; i < 5; i++) {
            if (Hand.toface(this.cards[i]) == Hand.toface(this.cards[i - 1])) {
                thispair = Hand.toface(this.cards[i]);
                pair1rank = i;
            }
            if (Hand.toface(that[i]) == Hand.toface(that[i - 1])) {
                thatpair = Hand.toface(that[i]);
                pair2rank = i;
            }
        }

        int[] thiskicker = new int[3];
        int[] thatkicker = new int[3];

        if (Hand.toface(this.cards[pair1rank]) > Hand.toface(that[pair2rank])) {
            return 1;
        } else if (Hand.toface(this.cards[pair1rank]) < Hand.toface(that[pair2rank])) {
            return -1;
        } else {
            if (pair1rank == 4) {
                thiskicker[0] = 0;
                thiskicker[1] = 1;
                thiskicker[2] = 2;
            } else if (pair1rank == 3) {
                thiskicker[0] = 0;
                thiskicker[1] = 1;
                thiskicker[2] = 4;
            } else if (pair1rank == 2) {
                thiskicker[0] = 0;
                thiskicker[1] = 3;
                thiskicker[2] = 4;
            } else if (pair1rank == 1) {
                thiskicker[0] = 2;
                thiskicker[1] = 3;
                thiskicker[2] = 4;
            }
            if (pair2rank == 4) {
                thatkicker[0] = 0;
                thatkicker[1] = 1;
                thatkicker[2] = 2;
            } else if (pair2rank == 3) {
                thatkicker[0] = 0;
                thatkicker[1] = 1;
                thatkicker[2] = 4;
            } else if (pair2rank == 2) {
                thatkicker[0] = 0;
                thatkicker[1] = 3;
                thatkicker[2] = 4;
            } else if (pair1rank == 1) {
                thatkicker[0] = 2;
                thatkicker[1] = 3;
                thatkicker[2] = 4;
            }

            if (Hand.toface(this.cards[thiskicker[2]]) > Hand.toface(that[thatkicker[2]])) {
                return 1;
            } else if (Hand.toface(this.cards[thiskicker[2]]) < Hand.toface(that[thatkicker[2]])) {
                return -1;
            } else {
                if (Hand.toface(this.cards[thiskicker[1]]) > Hand.toface(that[thatkicker[1]])) {
                    return 1;
                } else if (Hand.toface(this.cards[thiskicker[1]]) < Hand.toface(that[thatkicker[1]])) {
                    return -1;
                } else {
                    if (Hand.toface(this.cards[thiskicker[0]]) > Hand.toface(that[thatkicker[0]])) {
                        return 1;
                    } else if (Hand.toface(this.cards[thiskicker[0]]) < Hand.toface(that[thatkicker[0]])) {
                        return -1;
                    } else {
                        return 0;
                    }
                }
            }

        }
    }

    public int compareHigh(Card[] that) {
        if (Hand.toface(this.cards[4]) > Hand.toface(that[4])) {
            return 1;
        } else if (Hand.toface(this.cards[4]) < Hand.toface(that[4])) {
            return -1;
        } else {
            if (Hand.toface(this.cards[3]) > Hand.toface(that[3])) {
                return 1;
            } else if (Hand.toface(this.cards[3]) < Hand.toface(that[3])) {
                return -1;
            } else {
                if (Hand.toface(this.cards[2]) > Hand.toface(that[2])) {
                    return 1;
                } else if (Hand.toface(this.cards[2]) < Hand.toface(that[2])) {
                    return -1;
                } else {
                    if (Hand.toface(this.cards[1]) > Hand.toface(that[1])) {
                        return 1;
                    } else if (Hand.toface(this.cards[1]) < Hand.toface(that[1])) {
                        return -1;
                    } else {
                        if (Hand.toface(this.cards[0]) > Hand.toface(that[0])) {
                            return 1;
                        } else if (Hand.toface(this.cards[0]) < Hand.toface(that[0])) {
                            return -1;
                        } else {
                            return 0;
                        }
                    }
                }
            }
        }

    }
}

@5bbab5bb64053258ab01dd29a036188e@"
"b03611035","3","0.0933333333333333","103392","@6e970076f4e6fd25c8828c2758e1ba55@import java.util.Arrays;
import java.util.Comparator;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] mycards){
        cards=mycards;
    }

    // TODO
    public int compareTo(Hand that) {
        
        // complete this function so the Player can be sorted according to the cards he/she has.
        // 先確定牌型，用int來存
        int thistype;
        int thattype;
        // 要存最大牌
        int thishigh=0;
        int thathigh=0;
        
        
        // 先sort牌
        Arrays.sort(cards);
        Arrays.sort(that.cards);
        int[] thiscard=new int[5];
        int[] thatcard=new int[5];
        for(int i=0;i<5;i++){
            if(cards[i].getFace().equals(""A""))thiscard[i]=14;
            else if(cards[i].getFace().equals(""J""))thiscard[i]=11;
            else if(cards[i].getFace().equals(""Q""))thiscard[i]=12;
            else if(cards[i].getFace().equals(""K""))thiscard[i]=13;
            else thiscard[i]=Integer.parseInt(cards[i].getFace());
            if(that.cards[i].getFace().equals(""A""))thatcard[i]=14;
            else if(that.cards[i].getFace().equals(""J""))thatcard[i]=11;
            else if(that.cards[i].getFace().equals(""Q""))thatcard[i]=12;
            else if(that.cards[i].getFace().equals(""K""))thatcard[i]=13;
            else thatcard[i]=Integer.parseInt(that.cards[i].getFace());
        }
        // 先檢查this
        // 葫蘆 012同&34同 or 01同&&234同 
        if(thiscard[0]==thiscard[1]&&thiscard[0]==thiscard[2]&&thiscard[3]==thiscard[4]) {
            thistype=7;
            thishigh=thiscard[0];
        }
        else if(thiscard[0]==thiscard[1]&&thiscard[2]==thiscard[3]&&thiscard[2]==thiscard[4]) {
            thistype=7;
            thishigh=thiscard[2];
        }
        // 同花
        else if(cards[0].getSuit().equals(cards[1].getSuit())&&cards[0].getSuit().equals(cards[2].getSuit())&&cards[0].getSuit().equals(cards[3].getSuit())&&cards[0].getSuit().equals(cards[4].getSuit())) {
            thistype=6;
            thishigh=thiscard[4];
        }
        // 順子2-6~10~A
        else if(thiscard[0]+1==thiscard[1]&&thiscard[0]+2==thiscard[2]&&thiscard[0]+3==thiscard[3]&&thiscard[0]+4==thiscard[4]){
            thistype=5;            
            thishigh=thiscard[4];
        }// 順子A1234
        else if(thiscard[0]==2&&thiscard[1]==3&&thiscard[2]==3&&thiscard[3]==4&&thiscard[4]==14){
            thistype=5;            
            thishigh=4;
        }
        // 三條
        else if(thiscard[0]==thiscard[1]&&thiscard[0]==thiscard[2]){
            thistype=4;
            thishigh=thiscard[0];
        }
        else if(thiscard[2]==thiscard[4]&&thiscard[3]==thiscard[4]){
            thistype=4;
            thishigh=thiscard[2];
        }
        // 兩對 01+23 01+34 12+34
        else if(thiscard[0]==thiscard[1]&&thiscard[2]==thiscard[3]){
            thistype=3;
            if(thiscard[0]>thiscard[2])thishigh=thiscard[0];
            else if(thiscard[0]<thiscard[2])thishigh=thiscard[2];            
        }
        else if(thiscard[0]==thiscard[1]&&thiscard[4]==thiscard[3]){
            thistype=3;
            if(thiscard[0]>thiscard[4])thishigh=thiscard[0];
            else if(thiscard[0]<thiscard[4])thishigh=thiscard[4];            
        }
        else if(thiscard[2]==thiscard[1]&&thiscard[4]==thiscard[3]){
            thistype=3;
            if(thiscard[2]>thiscard[4])thishigh=thiscard[2];
            else if(thiscard[2]<thiscard[4])thishigh=thiscard[4];            
        }
        // 一對01 12 23 34
        else if(thiscard[0]==thiscard[1]){
            thistype=2;
            thishigh=thiscard[0];
        }
        else if(thiscard[1]==thiscard[2]){
            thistype=2;
            thishigh=thiscard[1];
        }
        else if(thiscard[2]==thiscard[3]){
            thistype=2;
            thishigh=thiscard[2];
        }
        else if(thiscard[3]==thiscard[4]){
            thistype=2;
            thishigh=thiscard[3];
        }
        // 單隻
        else {
            thistype=1;
            thishigh=thiscard[4];
        }
        // 再檢查that
        // 葫蘆 012同&34同 or 01同&&234同 
       if(thatcard[0]==thatcard[1]&&thatcard[0]==thatcard[2]&&thatcard[3]==thatcard[4]) {
            thattype=7;
            thathigh=thatcard[0];
        }
        else if(thatcard[0]==thatcard[1]&&thatcard[2]==thatcard[3]&&thatcard[2]==thatcard[4]) {
            thattype=7;
            thathigh=thatcard[2];
        }
        // 同花
        else if(that.cards[0].getSuit().equals(that.cards[1].getSuit())&&that.cards[0].getSuit().equals(that.cards[2].getSuit())&&that.cards[0].getSuit().equals(that.cards[3].getSuit())&&that.cards[0].getSuit().equals(that.cards[4].getSuit())) {
            thattype=6;
            thathigh=thatcard[4];
        }
        // 順子2-6~10~A
        else if(thatcard[0]+1==thatcard[1]&&thatcard[0]+2==thatcard[2]&&thatcard[0]+3==thatcard[3]&&thatcard[0]+4==thatcard[4]){
            thattype=5;            
            thathigh=thatcard[4];
        }// 順子A1234
        else if(thatcard[0]==2&&thatcard[1]==3&&thatcard[2]==3&&thatcard[3]==4&&thatcard[4]==14){
            thattype=5;            
            thathigh=4;
        }
        // 三條
        else if(thatcard[0]==thatcard[1]&&thatcard[0]==thatcard[2]){
            thattype=4;
            thathigh=thatcard[0];
        }
        else if(thatcard[2]==thatcard[4]&&thatcard[3]==thatcard[4]){
            thattype=4;
            thathigh=thatcard[2];
        }
        // 兩對 01+23 01+34 12+34
        else if(thatcard[0]==thatcard[1]&&thatcard[2]==thatcard[3]){
            thattype=3;
            if(thatcard[0]>thatcard[2])thathigh=thatcard[0];
            else if(thatcard[0]<thatcard[2])thathigh=thatcard[2];            
        }
        else if(thatcard[0]==thatcard[1]&&thatcard[4]==thatcard[3]){
            thattype=3;
            if(thatcard[0]>thatcard[4])thathigh=thatcard[0];
            else if(thatcard[0]<thatcard[4])thathigh=thatcard[4];            
        }
        else if(thatcard[2]==thatcard[1]&&thatcard[4]==thatcard[3]){
            thattype=3;
            if(thatcard[2]>thatcard[4])thathigh=thatcard[2];
            else if(thatcard[2]<thatcard[4])thathigh=thatcard[4];            
        }
        // 一對01 12 23 34
        else if(thatcard[0]==thatcard[1]){
            thattype=2;
            thathigh=thatcard[0];
        }
        else if(thatcard[1]==thatcard[2]){
            thattype=2;
            thathigh=thatcard[1];
        }
        else if(thatcard[2]==thatcard[3]){
            thattype=2;
            thathigh=thatcard[2];
        }
        else if(thatcard[3]==thatcard[4]){
            thattype=2;
            thathigh=thatcard[3];
        }
        // 單隻
        else {
            thattype=1;
            thathigh=thatcard[4];
        }
        // 比牌型    
        if(thistype>thattype)return 1;
        else if(thistype<thattype)return -1;
        // 再比最大牌
        else{
            if(thishigh>thathigh)return 1;
            else if(thishigh<thathigh)return -1;
            else return 0;
        }
        
    }
    

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@6e970076f4e6fd25c8828c2758e1ba55@"
"r04522616","3","0.09","103024","@07e0b896b5e77a653ac034696f750736@import java.util.Arrays;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
    }

    // TODO
    public int compareTo(Hand that) {
        Arrays.sort(that.cards);
        Arrays.sort(this.cards);
        
        int[] thisCardNumber=new int[5];
        int[] thatCardNumber=new int[5];
        
        for(int i=0;i<5;i++)
        {
            if(this.cards[i].getFace().equals(""A""))thisCardNumber[i]=14;
            if(this.cards[i].getFace().equals(""K""))thisCardNumber[i]=13;
            if(this.cards[i].getFace().equals(""Q""))thisCardNumber[i]=12;
            if(this.cards[i].getFace().equals(""J""))thisCardNumber[i]=11;
            if(this.cards[i].getFace().equals(""10""))thisCardNumber[i]=10;
            if(this.cards[i].getFace().equals(""9""))thisCardNumber[i]=9;
            if(this.cards[i].getFace().equals(""8""))thisCardNumber[i]=8;
            if(this.cards[i].getFace().equals(""7""))thisCardNumber[i]=7;
            if(this.cards[i].getFace().equals(""6""))thisCardNumber[i]=6;
            if(this.cards[i].getFace().equals(""5""))thisCardNumber[i]=5;
            if(this.cards[i].getFace().equals(""4""))thisCardNumber[i]=4;
            if(this.cards[i].getFace().equals(""3""))thisCardNumber[i]=3;
            if(this.cards[i].getFace().equals(""2""))thisCardNumber[i]=2;
            
            if(that.cards[i].getFace().equals(""A""))thatCardNumber[i]=14;
            if(that.cards[i].getFace().equals(""K""))thatCardNumber[i]=13;
            if(that.cards[i].getFace().equals(""Q""))thatCardNumber[i]=12;
            if(that.cards[i].getFace().equals(""J""))thatCardNumber[i]=11;
            if(that.cards[i].getFace().equals(""10""))thatCardNumber[i]=10;
            if(that.cards[i].getFace().equals(""9""))thatCardNumber[i]=9;
            if(that.cards[i].getFace().equals(""8""))thatCardNumber[i]=8;
            if(that.cards[i].getFace().equals(""7""))thatCardNumber[i]=7;
            if(that.cards[i].getFace().equals(""6""))thatCardNumber[i]=6;
            if(that.cards[i].getFace().equals(""5""))thatCardNumber[i]=5;
            if(that.cards[i].getFace().equals(""4""))thatCardNumber[i]=4;
            if(that.cards[i].getFace().equals(""3""))thatCardNumber[i]=3;
            if(that.cards[i].getFace().equals(""2""))thatCardNumber[i]=2;            
        }
        
        int thisCardsType=0;
        int thatCardsType=0;
        int thisFullHouseBig=0;
        int thatFullHouseBig=0;
        int thisFullHouseSmall=0;
        int thatFullHouseSmall=0;
        int thisOnePair=0;
        int thatOnePair=0;
        int thisOnePairBigSingle=0;
        int thatOnePairBigSingle=0;
        int thisOnePairMSingle=0;
        int thatOnePairMSingle=0;
        int thisOnePairSSingle=0;
        int thatOnePairSSingle=0;
        int thisTwoPairBig=0;
        int thatTwoPairBig=0;
        int thisTwoPairSmall=0;
        int thatTwoPairSmall=0;
        int thisTwoPairSingle=0;
        int thatTwoPairSingle=0;
        
        if(thisCardNumber[0]==thisCardNumber[1]||thisCardNumber[1]==thisCardNumber[2]||thisCardNumber[2]==thisCardNumber[3]||thisCardNumber[3]==thisCardNumber[4])
        {
            thisCardsType=1;
            if(thisCardNumber[0]==thisCardNumber[1])
            {
                thisOnePair=thisCardNumber[0];
                thisOnePairBigSingle=thisCardNumber[4];
                thisOnePairMSingle=thisCardNumber[3];
                thisOnePairSSingle=thisCardNumber[2];
            }
            else if(thisCardNumber[1]==thisCardNumber[2])
            {
                thisOnePair=thisCardNumber[1];
                thisOnePairBigSingle=thisCardNumber[4];
                thisOnePairMSingle=thisCardNumber[3];
                thisOnePairSSingle=thisCardNumber[0];
            }
            else if(thisCardNumber[2]==thisCardNumber[3])
            {
                thisOnePair=thisCardNumber[2];
                thisOnePairBigSingle=thisCardNumber[4];
                thisOnePairMSingle=thisCardNumber[1];
                thisOnePairSSingle=thisCardNumber[0];
            }
            else if(thisCardNumber[3]==thisCardNumber[4])
            {
                thisOnePair=thisCardNumber[3];
                thisOnePairBigSingle=thisCardNumber[2];
                thisOnePairMSingle=thisCardNumber[1];
                thisOnePairSSingle=thisCardNumber[0];
            }
        }
        else if(thisCardNumber[0]==thisCardNumber[1]&&thisCardNumber[1]==thisCardNumber[2])
        {
            thisCardsType=5;
            thisFullHouseBig=thisCardNumber[2];
            thisFullHouseSmall=thisCardNumber[4];
            thisOnePair=0;
        }
        else if(thisCardNumber[2]==thisCardNumber[3]&&thisCardNumber[3]==thisCardNumber[4])
        {
            thisCardsType=5;
            thisFullHouseBig=thisCardNumber[4];
            thisFullHouseSmall=thisCardNumber[0];
            thisOnePair=0;
        }
        else if(this.cards[0].getSuit().equals(this.cards[1].getSuit()) && this.cards[1].getSuit().equals(this.cards[2].getSuit()) && this.cards[2].getSuit().equals(this.cards[3].getSuit()) && this.cards[3].getSuit().equals(this.cards[4].getSuit()))
        {
            thisCardsType=4;
        }
        else if(thisCardNumber[0]+1==thisCardNumber[1] && thisCardNumber[1]+1==thisCardNumber[2] && thisCardNumber[2]+1==thisCardNumber[3] && thisCardNumber[3]+1==thisCardNumber[4])
        {
            thisCardsType=3;
        }
        else if(thisCardNumber[0]==2&&thisCardNumber[1]==3&&thisCardNumber[2]==4&&thisCardNumber[3]==5&&thisCardNumber[4]==14)
        {
            thisCardsType=3;
        }        
        else if(thisCardNumber[0]==thisCardNumber[1]&&thisCardNumber[2]==thisCardNumber[3])
        {
            thisCardsType=2;
            thisTwoPairBig=thisCardNumber[3];
            thisTwoPairSmall=thisCardNumber[1];
            thisTwoPairSingle=thisCardNumber[4];
            thisFullHouseBig=0;
            thisOnePair=0;
        }
        else if(thisCardNumber[1]==thisCardNumber[2]&&thisCardNumber[3]==thisCardNumber[4])
        {
            thisCardsType=2;
            thisTwoPairBig=thisCardNumber[4];
            thisTwoPairSmall=thisCardNumber[1];
            thisTwoPairSingle=thisCardNumber[0];
            thisFullHouseBig=0;
            thisOnePair=0;
        }
        else if(thisCardNumber[0]==thisCardNumber[1]&&thisCardNumber[3]==thisCardNumber[4])
        {
            thisCardsType=2;
            thisTwoPairBig=thisCardNumber[4];
            thisTwoPairSmall=thisCardNumber[1];
            thisTwoPairSingle=thisCardNumber[2];
            thisFullHouseBig=0;
            thisOnePair=0;
        }
        else
        {
            thisCardsType=0;
        }
        //
        if(thatCardNumber[0]==thatCardNumber[1]||thatCardNumber[1]==thatCardNumber[2]||thatCardNumber[2]==thatCardNumber[3]||thatCardNumber[3]==thatCardNumber[4])
        {
            thatCardsType=1;
            if(thatCardNumber[0]==thatCardNumber[1])
            {
                thatOnePair=thatCardNumber[0];
                thatOnePairBigSingle=thatCardNumber[4];
                thatOnePairMSingle=thatCardNumber[3];
                thatOnePairSSingle=thatCardNumber[2];
            }
            else if(thatCardNumber[1]==thatCardNumber[2])
            {
                thatOnePair=thatCardNumber[1];
                thatOnePairBigSingle=thatCardNumber[4];
                thatOnePairMSingle=thatCardNumber[3];
                thatOnePairSSingle=thatCardNumber[0];
            }
            else if(thatCardNumber[2]==thatCardNumber[3])
            {
                thatOnePair=thatCardNumber[2];
                thatOnePairBigSingle=thatCardNumber[4];
                thatOnePairMSingle=thatCardNumber[1];
                thatOnePairSSingle=thatCardNumber[0];
            }
            else if(thatCardNumber[3]==thatCardNumber[4])
            {
                thatOnePair=thatCardNumber[3];
                thatOnePairBigSingle=thatCardNumber[2];
                thatOnePairMSingle=thatCardNumber[1];
                thatOnePairSSingle=thatCardNumber[0];
            }
        }
        else if(thatCardNumber[0]==thatCardNumber[1]&&thatCardNumber[1]==thatCardNumber[2])
        {
            thatCardsType=5;
            thatFullHouseBig=thatCardNumber[2];
            thatFullHouseSmall=thatCardNumber[4];
            thatOnePair=0;
        }
        else if(thatCardNumber[2]==thatCardNumber[3]&&thatCardNumber[3]==thatCardNumber[4])
        {
            thatCardsType=5;
            thatFullHouseBig=thatCardNumber[4];
            thatFullHouseSmall=thatCardNumber[0];
            thatOnePair=0;
        }
        else if(that.cards[0].getSuit().equals(that.cards[1].getSuit()) && that.cards[1].getSuit().equals(that.cards[2].getSuit()) && that.cards[2].getSuit().equals(that.cards[3].getSuit()) && that.cards[3].getSuit().equals(that.cards[4].getSuit()))
        {
            thatCardsType=4;
        }
        else if(thatCardNumber[0]+1==thatCardNumber[1] && thatCardNumber[1]+1==thatCardNumber[2] && thatCardNumber[2]+1==thatCardNumber[3] && thatCardNumber[3]+1==thatCardNumber[4])
        {
            thatCardsType=3;
        }
        else if(thatCardNumber[0]==2&&thatCardNumber[1]==3&&thatCardNumber[2]==4&&thatCardNumber[3]==5&&thatCardNumber[4]==14)
        {
            thatCardsType=3;
        }        
        else if(thatCardNumber[0]==thatCardNumber[1]&&thatCardNumber[2]==thatCardNumber[3])
        {
            thatCardsType=2;
            thatTwoPairBig=thatCardNumber[3];
            thatTwoPairSmall=thatCardNumber[1];
            thatTwoPairSingle=thatCardNumber[4];
            thatFullHouseBig=0;
            thatOnePair=0;
        }
        else if(thatCardNumber[1]==thatCardNumber[2]&&thatCardNumber[3]==thatCardNumber[4])
        {
            thatCardsType=2;
            thatTwoPairBig=thatCardNumber[3];
            thatTwoPairSmall=thatCardNumber[1];
            thatTwoPairSingle=thatCardNumber[0];
            thatFullHouseBig=0;
            thatOnePair=0;
        }
        else if(thatCardNumber[0]==thatCardNumber[1]&&thatCardNumber[3]==thatCardNumber[4])
        {
            thatCardsType=2;
            thatTwoPairBig=thatCardNumber[4];
            thatTwoPairSmall=thatCardNumber[1];
            thatTwoPairSingle=thatCardNumber[2];
            thatFullHouseBig=0;
            thatOnePair=0;
        }
        else
        {
            thatCardsType=0;
        }
        //
        if(thisCardsType>thatCardsType)
        {
            return 1;
        }
        else if(thisCardsType<thatCardsType)
        {
            return -1;
        }
        else
        {
            if(thisCardsType==5)
            {
                if(thisFullHouseBig>thatFullHouseBig)
                {
                    return 1;
                }
                else if(thisFullHouseBig<thatFullHouseBig)
                {
                    return -1;
                }
                else
                {
                    if(thisFullHouseSmall>thatFullHouseSmall)
                    {
                        return 1;
                    }
                    else if(thisFullHouseSmall<thatFullHouseSmall)
                    {
                        return -1;
                    }
                }
            }
            if(thisCardsType==4)
            {
                if(thisCardNumber[4]>thatCardNumber[4]){return 1;}                
                else if(thisCardNumber[4]<thatCardNumber[4]){return -1;}                
                else
                {
                    if(thisCardNumber[3]>thatCardNumber[3]){return 1;}                    
                    else if(thisCardNumber[3]<thatCardNumber[3]){return -1;}                    
                    else
                    {
                        if(thisCardNumber[2]>thatCardNumber[2]){return 1;}                        
                        else if(thisCardNumber[2]<thatCardNumber[2]){return -1;}                        
                        else
                        {
                            if(thisCardNumber[1]>thatCardNumber[1]){return 1;}
                            else if(thisCardNumber[1]<thatCardNumber[1]){return -1;}
                            else
                            {
                                if(thisCardNumber[0]>thatCardNumber[0]){return 1;}
                                else if(thisCardNumber[0]<thatCardNumber[0]){return -1;}
                            }                    
                        }                    
                    }
                }
            }
            if(thisCardsType==3)
            {
                if(thatCardNumber[0]==2 && thatCardNumber[4]==14 && thisCardNumber[0]==2 && thisCardNumber[4]==14)
                {
                    return 0;
                }
                else if(thatCardNumber[0]==2 && thatCardNumber[4]==14)
                {
                    return 1;
                }
                else if(thisCardNumber[0]==2 && thisCardNumber[4]==14)
                {
                    return -1;
                }
                else if(thisCardNumber[4]>thatCardNumber[4])
                {
                    return 1;
                }
                else if(thisCardNumber[4]<thatCardNumber[4])
                {
                    return -1;
                }
            }
            if(thisCardsType==2)
            {
                if(thisTwoPairBig>thatTwoPairBig){return 1;}                       
                else if(thisTwoPairBig<thatTwoPairBig){return -1;}                      
                else
                {
                    if(thisTwoPairSmall>thatTwoPairSmall){return 1;}                        
                    else if(thisTwoPairSmall<thatTwoPairSmall){return -1;}    
                    else
                    {
                        if(thisTwoPairSingle>thatTwoPairSingle){return 1;}                        
                        else if(thisTwoPairSingle<thatTwoPairSingle){return -1;}
                    }
                }
            }
            if(thisCardsType==1)
            {
                if(thisOnePair>thatOnePair){return 1;}                
                else if(thisOnePair<thatOnePair){return -1;}
                else
                {
                    if(thisOnePairBigSingle>thatOnePairBigSingle){return 1;}                
                    else if(thisOnePairBigSingle<thatOnePairBigSingle){return -1;}
                    else
                    {
                        if(thisOnePairMSingle>thatOnePairMSingle){return 1;}                
                        else if(thisOnePairMSingle<thatOnePairMSingle){return -1;}
                        else
                        {
                            if(thisOnePairSSingle>thatOnePairSSingle){return 1;}                
                            else if(thisOnePairSSingle<thatOnePairSSingle){return -1;}                            
                        }
                    }
                }
            }
            if(thisCardsType==0)
            {
                if(thisCardNumber[4]>thatCardNumber[4]){return 1;}                
                else if(thisCardNumber[4]<thatCardNumber[4]){return -1;}                
                else
                {
                    if(thisCardNumber[3]>thatCardNumber[3]){return 1;}                    
                    else if(thisCardNumber[3]<thatCardNumber[3]){return -1;}                    
                    else
                    {
                        if(thisCardNumber[2]>thatCardNumber[2]){return 1;}                        
                        else if(thisCardNumber[2]<thatCardNumber[2]){return -1;}                        
                        else
                        {
                            if(thisCardNumber[1]>thatCardNumber[1]){return 1;}
                            else if(thisCardNumber[1]<thatCardNumber[1]){return -1;}
                            else
                            {
                                if(thisCardNumber[0]>thatCardNumber[0]){return 1;}
                                else if(thisCardNumber[0]<thatCardNumber[0]){return -1;}
                            }                    
                        }                    
                    }
                }
            }
        }
        
        
        // complete this function so the Player can be sorted according to the cards he/she has.
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@07e0b896b5e77a653ac034696f750736@"
"r04631036","0","0","0","@d04912cab7c2a247a33797f7889b41d4@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    public Card[] HighCard = new Card[1] ;
    public void HighCard (Card cards) {
        this.HighCard[0] = cards;
    }
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards= new Card[5];
        
        return;
    }
 public boolean isFullHouse(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards);
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace()))
                    this.HighCard(Cards[0]) ;
                return true ;
            }
            else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                    this.HighCard(Cards[4]) ;
                    return true ;
                }
            }
        }
        return false ;
    }
    public boolean isFlush(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getSuit().equalsIgnoreCase(Cards[1].getSuit())){
            if(Cards[1].getSuit().equalsIgnoreCase(Cards[2].getSuit())){
                if(Cards[2].getSuit().equalsIgnoreCase(Cards[3].getSuit())){
                 if(Cards[3].getSuit().equalsIgnoreCase(Cards[4].getSuit())){
                        this.HighCard(Cards[4]) ;
            return true ;
                    }
                }
            }
        }
            return false ;
        }
    public boolean isStraight(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
      
        MergeX.sort(Cards);
        Integer[] a1 = new Integer[Cards.length] ;
        for(int i = 0 ; i < 5 ; i++){
            if(Cards[i].getFace().equalsIgnoreCase(""J""))
                a1[i] = 11 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""Q""))
                a1[i] = 12 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""K""))
                a1[i] = 13 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""A""))
                a1[i] = 14 ;
            else
            a1[i] = Integer.parseInt(Cards[i].getFace());            
        }
        if(a1[1]==a1[0]+1){
            if(a1[2] == a1[1]+1){
                if(a1[3]== a1[2]+1){
                    if(a1[4] == a1[3]+1){
                        this.HighCard(Cards[4]) ;
                        return true ;
                    }
                }
            }
        }
        else if(a1[0]==2){
            if(a1[1]==3){
                if(a1[2]==4){
                    if(a1[3]==5){
                        if(a1[4]==14){
                            this.HighCard(Cards[3]) ;
                            return true ;
                        }
                    }
                }
            }
        }
        return false ;
    }
    public boolean isTwoPair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                this.HighCard(Cards[3]) ;
                return true ;
            }
            else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
       }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
        }
        return false;
    }
    public boolean isOnePair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            this.HighCard(Cards[1]) ;
            return true ;
        }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            this.HighCard(Cards[2]) ;
            return true ;
        }
        else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
            this.HighCard(Cards[3]) ;
            return true ;
        }
        else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
            this.HighCard(Cards[4]) ;
            return true ;
        }
        
        return false ;
    }
    // TODO
    public int compareTo(Hand that) {
        int[] Points = new int [2] ;
            if(this.isFullHouse())
                Points[0] = 60 ;
            
            else if(this.isFlush())
                Points[0] = 50 ;
            
            else if(this.isStraight())
                Points[0] = 40 ;
            
            else if(this.isTwoPair()){
                Points[0] = 30 ;
            }
            else if(this.isOnePair()){
                Points[0] = 20 ;
            
            }
            else
                Points[0] = 10 ;
            
            
            if(that.isFullHouse())
                Points[1] = 60 ;
            
            else if(that.isFlush())
                Points[1] = 50 ;
            
            else if(that.isStraight())
                Points[1] = 40 ;
            
            else if(that.isTwoPair()){
                Points[1] = 30 ;
            }
            else if(that.isOnePair()){
                Points[1] = 20 ;

    }
            else 
                Points[1] = 10 ;
            
//            System.out.println(Points[0]+"" ""+Points[1] ) ;
            
            if(Points[0]>Points[1])
                return 1 ;
            else if(Points[0]<Points[1])
                return -1 ;
            
            else if(Points[0]==Points[1])
            if(Points[0] == 10){
                MergeX.sort(this.cards);
                MergeX.sort(that.cards);
                this.HighCard(this.cards[4]) ;
                that.HighCard(that.cards[4]) ;
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
                }
            else 
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
            return 0 ;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}
;
@d04912cab7c2a247a33797f7889b41d4@"
"r04631036","3","0.0966666666666667","105952","@afefd88677664a72f319cc00fbb78078@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    public Card[] HighCard = new Card[1] ;
    public void HighCard (Card cards) {
        this.HighCard[0] = cards;
    }
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards= cards;
        
        return;
    }
 public boolean isFullHouse(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards);
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace()))
                    this.HighCard(Cards[0]) ;
                return true ;
            }
            else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                    this.HighCard(Cards[4]) ;
                    return true ;
                }
            }
        }
        return false ;
    }
    public boolean isFlush(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getSuit().equalsIgnoreCase(Cards[1].getSuit())){
            if(Cards[1].getSuit().equalsIgnoreCase(Cards[2].getSuit())){
                if(Cards[2].getSuit().equalsIgnoreCase(Cards[3].getSuit())){
                 if(Cards[3].getSuit().equalsIgnoreCase(Cards[4].getSuit())){
                        this.HighCard(Cards[4]) ;
            return true ;
                    }
                }
            }
        }
            return false ;
        }
    public boolean isStraight(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
      
        MergeX.sort(Cards);
        Integer[] a1 = new Integer[Cards.length] ;
        for(int i = 0 ; i < 5 ; i++){
            if(Cards[i].getFace().equalsIgnoreCase(""J""))
                a1[i] = 11 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""Q""))
                a1[i] = 12 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""K""))
                a1[i] = 13 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""A""))
                a1[i] = 14 ;
            else
            a1[i] = Integer.parseInt(Cards[i].getFace());            
        }
        if(a1[1]==a1[0]+1){
            if(a1[2] == a1[1]+1){
                if(a1[3]== a1[2]+1){
                    if(a1[4] == a1[3]+1){
                        this.HighCard(Cards[4]) ;
                        return true ;
                    }
                }
            }
        }
        else if(a1[0]==2){
            if(a1[1]==3){
                if(a1[2]==4){
                    if(a1[3]==5){
                        if(a1[4]==14){
                            this.HighCard(Cards[3]) ;
                            return true ;
                        }
                    }
                }
            }
        }
        return false ;
    }
    public boolean isTwoPair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                this.HighCard(Cards[3]) ;
                return true ;
            }
            else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
       }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
        }
        return false;
    }
    public boolean isOnePair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            this.HighCard(Cards[1]) ;
            return true ;
        }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            this.HighCard(Cards[2]) ;
            return true ;
        }
        else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
            this.HighCard(Cards[3]) ;
            return true ;
        }
        else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
            this.HighCard(Cards[4]) ;
            return true ;
        }
        
        return false ;
    }
    // TODO
    public int compareTo(Hand that) {
        int[] Points = new int [2] ;
            if(this.isFullHouse())
                Points[0] = 60 ;
            
            else if(this.isFlush())
                Points[0] = 50 ;
            
            else if(this.isStraight())
                Points[0] = 40 ;
            
            else if(this.isTwoPair()){
                Points[0] = 30 ;
            }
            else if(this.isOnePair()){
                Points[0] = 20 ;
            
            }
            else
                Points[0] = 10 ;
            
            
            if(that.isFullHouse())
                Points[1] = 60 ;
            
            else if(that.isFlush())
                Points[1] = 50 ;
            
            else if(that.isStraight())
                Points[1] = 40 ;
            
            else if(that.isTwoPair()){
                Points[1] = 30 ;
            }
            else if(that.isOnePair()){
                Points[1] = 20 ;

    }
            else 
                Points[1] = 10 ;
            
//            System.out.println(Points[0]+"" ""+Points[1] ) ;
            
            if(Points[0]>Points[1])
                return 1 ;
            else if(Points[0]<Points[1])
                return -1 ;
            
            else if(Points[0]==Points[1])
            if(Points[0] == 10){
                MergeX.sort(this.cards);
                MergeX.sort(that.cards);
                this.HighCard(this.cards[4]) ;
                that.HighCard(that.cards[4]) ;
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
                }
            else 
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
            return 0 ;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}
;
@afefd88677664a72f319cc00fbb78078@"
"b99611017","0","0.28","101520","@b2dd2ec0b54faeaab511769e91dbe404@
import java.util.Arrays;




public class Hand implements Comparable<Hand> {


    private Card[] cards; 

    public int[] cardLabel(Card[] cards) {

        int[] label = new int[5];

        for (int i = 0; i < 5; i++) {

            int value = 0;
            if (""A"".equals(cards[i].getFace())) {
                value += 12;
            } else if (""K"".equals(cards[i].getFace())) {
                value += 11;
            } else if (""Q"".equals(cards[i].getFace())) {
                value += 10;
            } else if (""J"".equals(cards[i].getFace())) {
                value += 9;
            } else if (""10"".equals(cards[i].getFace())) {
                value += 8;
            } else if (""9"".equals(cards[i].getFace())) {
                value += 7;
            } else if (""8"".equals(cards[i].getFace())) {
                value += 6;
            } else if (""7"".equals(cards[i].getFace())) {
                value += 5;
            } else if (""6"".equals(cards[i].getFace())) {
                value += 4;
            } else if (""5"".equals(cards[i].getFace())) {
                value += 3;
            } else if (""4"".equals(cards[i].getFace())) {
                value += 2;
            } else if (""3"".equals(cards[i].getFace())) {
                value += 1;
            } else if (""2"".equals(cards[i].getFace())) {
                value += 0;
            }
            if (""Spades"".equals(cards[i].getSuit())) {
                value = value * 4 + 3;
            } else if (""Hearts"".equals(cards[i].getSuit())) {
                value = value * 4 + 2;
            } else if (""Diamonds"".equals(cards[i].getSuit())) {
                value = value * 4 + 1;
            } else if (""Clubs"".equals(cards[i].getSuit())) {
                value = value * 4;
            }
            label[i] = value;
        }
        return label;
    }

    private int findMax(int[] a) {

        int b = 0;
        for (int i = 0; i < a.length; i++) {
            if (a[i] > b) {
                b = a[i];
            }
        }
        return b;
    }

    private int findGroup(int[] a) {
        int b = 0;
        for (int i = 0; i < a.length; i++) {
            if (a[i] != 0) {
                b++;
            }
        }
        return b;
    }

    //找大招
    private int[] combo(int[] card) {
        int faceGroup = 0;
        int suitGroup = 0;
        int fgMax = 0;
        int sgMax = 0;
        int ans[] = new int[2];

        int[] face = new int[13];
        int[] suit = new int[4];
        for (int i = 0; i < card.length; i++) {
            face[card[i] /4]++;
            suit[card[i] % 4]++;

        }

        faceGroup = findGroup(face);
        suitGroup = findGroup(suit);
        fgMax = findMax(face);
        sgMax = findMax(suit);
        //full house
        if (faceGroup == 2 && fgMax == 3) {
            ans[0] = 5;
            if(card[0]/4==card[2]/4)
            {
                ans[1]=card[2];
            }
            else if(card[0]/4!=card[2]/4)
            {
                ans[1]=card[4];
            }
            
        }
        //flush
        if (suitGroup == 1 && sgMax == 5 && ans[0] == 0) {

            ans[0] = 4;
            ans[1] = card[card.length-1];
           
        }
        //straight    and high card
        if (faceGroup == 5 && fgMax == 1 && ans[0] == 0) {

           int TF = 0;
            for (int i = 0; i < card.length - 2; i++) {
                if (card[i + 1] /4 == card[i] /4 + 1) {
                    TF +=1;
                } 
            }
            if ((TF==3&&card[3]/4+1==card[4]/4)||(TF==3&&card[3]/4+9==card[4]/4)) {
                ans[0] = 2;
                ans[1] = card[card.length-1];
                
            } else {
                ans[0] = 0;
                ans[1] = card[card.length - 1];
            }
           
        }
        //two pair
        if (faceGroup == 3 && fgMax == 2 && ans[0] == 0) {
            ans[0] = 2;
            int temp = 0;
            for (int i = 0; i < face.length; i++) {
                if (face[i] == 2) {
                    temp = i;
                }
            }
            for (int i = 0; i < card.length; i++) {
                if (card[i] /4 == temp) {
                    ans[1] = card[i];
                }
            }
           
        }
        //one pair
        if (faceGroup == 4 && fgMax == 2 && ans[0] == 0) {
            ans[0] = 1;
            int temp = 0;
            for (int i = 0; i < face.length; i++) {
                if (face[i] == 2) {
                    temp = i;
                }
            }
            for (int i = 0; i < card.length; i++) {
                if (card[i] /4 == temp) {
                    
                    ans[1] = card[i];
                }
            }
          
        }

        return ans;
    }
    
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
      
        this.cards = cards;
        
       Arrays.sort(this.cards);
       System.out.println(cards[0].getFace());
       
    }

    // TODO
    public int compareTo(Hand that) {
       
        Arrays.sort(that.cards);
        int ans = 0;
        int[] a = combo(cardLabel(this.cards));
        int[] b = combo(cardLabel(that.cards));
//        System.out.println(a[0]);
//        System.out.println(a[1]);
        if (a[0] > b[0]) {
            ans = 1;
        } else if (a[0] < b[0]) {
            ans = -1;
        } else if (a[0] == b[0] && a[1] > b[1]) {
            ans = 1;
        } else if (a[0] == b[0] && a[1] < b[1]) {
            ans = -1;
        }
        
        return ans;
        
    
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

    
}

@b2dd2ec0b54faeaab511769e91dbe404@"
"b99611017","0","0.29","102160","@7fe317aceb821b81b964ef348c33ebb3@
import java.util.Arrays;




public class Hand implements Comparable<Hand> {


    private Card[] cards; 

    public int[] cardLabel(Card[] cards) {

        int[] label = new int[5];

        for (int i = 0; i < 5; i++) {

            int value = 0;
            if (""A"".equals(cards[i].getFace())) {
                value += 12;
            } else if (""K"".equals(cards[i].getFace())) {
                value += 11;
            } else if (""Q"".equals(cards[i].getFace())) {
                value += 10;
            } else if (""J"".equals(cards[i].getFace())) {
                value += 9;
            } else if (""10"".equals(cards[i].getFace())) {
                value += 8;
            } else if (""9"".equals(cards[i].getFace())) {
                value += 7;
            } else if (""8"".equals(cards[i].getFace())) {
                value += 6;
            } else if (""7"".equals(cards[i].getFace())) {
                value += 5;
            } else if (""6"".equals(cards[i].getFace())) {
                value += 4;
            } else if (""5"".equals(cards[i].getFace())) {
                value += 3;
            } else if (""4"".equals(cards[i].getFace())) {
                value += 2;
            } else if (""3"".equals(cards[i].getFace())) {
                value += 1;
            } else if (""2"".equals(cards[i].getFace())) {
                value += 0;
            }
            if (""Spades"".equals(cards[i].getSuit())) {
                value = value * 4 + 3;
            } else if (""Hearts"".equals(cards[i].getSuit())) {
                value = value * 4 + 2;
            } else if (""Diamonds"".equals(cards[i].getSuit())) {
                value = value * 4 + 1;
            } else if (""Clubs"".equals(cards[i].getSuit())) {
                value = value * 4;
            }
            label[i] = value;
        }
        return label;
    }

    private int findMax(int[] a) {

        int b = 0;
        for (int i = 0; i < a.length; i++) {
            if (a[i] > b) {
                b = a[i];
            }
        }
        return b;
    }

    private int findGroup(int[] a) {
        int b = 0;
        for (int i = 0; i < a.length; i++) {
            if (a[i] != 0) {
                b++;
            }
        }
        return b;
    }

    //找大招
    private int[] combo(int[] card) {
        int faceGroup = 0;
        int suitGroup = 0;
        int fgMax = 0;
        int sgMax = 0;
        int ans[] = new int[2];

        int[] face = new int[13];
        int[] suit = new int[4];
        for (int i = 0; i < card.length; i++) {
            face[card[i] /4]++;
            suit[card[i] % 4]++;

        }

        faceGroup = findGroup(face);
        suitGroup = findGroup(suit);
        fgMax = findMax(face);
        sgMax = findMax(suit);
        //full house
        if (faceGroup == 2 && fgMax == 3) {
            ans[0] = 5;
            if(card[0]/4==card[2]/4)
            {
                ans[1]=card[2];
            }
            else if(card[0]/4!=card[2]/4)
            {
                ans[1]=card[4];
            }
            
        }
        //flush
        if (suitGroup == 1 && sgMax == 5 && ans[0] == 0) {

            ans[0] = 4;
            ans[1] = card[card.length-1];
           
        }
        //straight    and high card
        if (faceGroup == 5 && fgMax == 1 && ans[0] == 0) {

           int TF = 0;
            for (int i = 0; i < card.length - 2; i++) {
                if (card[i + 1] /4 == card[i] /4 + 1) {
                    TF +=1;
                } 
            }
            if ((TF==3&&card[3]/4+1==card[4]/4)||(TF==3&&card[3]/4+9==card[4]/4)) {
                ans[0] = 2;
                ans[1] = card[card.length-1];
                
            } else {
                ans[0] = 0;
                ans[1] = card[card.length - 1];
            }
           
        }
        //two pair
        if (faceGroup == 3 && fgMax == 2 && ans[0] == 0) {
            ans[0] = 2;
            int temp = 0;
            for (int i = 0; i < face.length; i++) {
                if (face[i] == 2) {
                    temp = i;
                }
            }
            for (int i = 0; i < card.length; i++) {
                if (card[i] /4 == temp) {
                    ans[1] = card[i];
                }
            }
           
        }
        //one pair
        if (faceGroup == 4 && fgMax == 2 && ans[0] == 0) {
            ans[0] = 1;
            int temp = 0;
            for (int i = 0; i < face.length; i++) {
                if (face[i] == 2) {
                    temp = i;
                }
            }
            for (int i = 0; i < card.length; i++) {
                if (card[i] /4 == temp) {
                    
                    ans[1] = card[i];
                }
            }
          
        }

        return ans;
    }
    
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
      
        this.cards = cards;
         Arrays.sort(this.cards);
       
    
       
    }

    // TODO
    public int compareTo(Hand that) {
//        Arrays.sort(this.cards);
//        Arrays.sort(that.cards);
        int ans = 0;
        int[] a = combo(cardLabel(this.cards));
        int[] b = combo(cardLabel(that.cards));
        System.out.println(a[0]);
        System.out.println(b[0]);
        if (a[0] > b[0]) {
            ans = 1;
        } else if (a[0] < b[0]) {
            ans = -1;
        } else if (a[0] == b[0] && a[1] > b[1]) {
            ans = 1;
        } else if (a[0] == b[0] && a[1] < b[1]) {
            ans = -1;
        }
        
        return ans;
        
    
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

    
}

@7fe317aceb821b81b964ef348c33ebb3@"
"b99611017","0","0.29","105600","@0c8153197b838231ac99b105fac93180@
import java.util.Arrays;




public class Hand implements Comparable<Hand> {


    private Card[] cards; 

    public int[] cardLabel(Card[] cards) {

        int[] label = new int[5];

        for (int i = 0; i < 5; i++) {

            int value = 0;
            if (""A"".equals(cards[i].getFace())) {
                value += 12;
            } else if (""K"".equals(cards[i].getFace())) {
                value += 11;
            } else if (""Q"".equals(cards[i].getFace())) {
                value += 10;
            } else if (""J"".equals(cards[i].getFace())) {
                value += 9;
            } else if (""10"".equals(cards[i].getFace())) {
                value += 8;
            } else if (""9"".equals(cards[i].getFace())) {
                value += 7;
            } else if (""8"".equals(cards[i].getFace())) {
                value += 6;
            } else if (""7"".equals(cards[i].getFace())) {
                value += 5;
            } else if (""6"".equals(cards[i].getFace())) {
                value += 4;
            } else if (""5"".equals(cards[i].getFace())) {
                value += 3;
            } else if (""4"".equals(cards[i].getFace())) {
                value += 2;
            } else if (""3"".equals(cards[i].getFace())) {
                value += 1;
            } else if (""2"".equals(cards[i].getFace())) {
                value += 0;
            }
            if (""Spades"".equals(cards[i].getSuit())) {
                value = value * 4 + 3;
            } else if (""Hearts"".equals(cards[i].getSuit())) {
                value = value * 4 + 2;
            } else if (""Diamonds"".equals(cards[i].getSuit())) {
                value = value * 4 + 1;
            } else if (""Clubs"".equals(cards[i].getSuit())) {
                value = value * 4;
            }
            label[i] = value;
        }
        return label;
    }

    private int findMax(int[] a) {

        int b = 0;
        for (int i = 0; i < a.length; i++) {
            if (a[i] > b) {
                b = a[i];
            }
        }
        return b;
    }

    private int findGroup(int[] a) {
        int b = 0;
        for (int i = 0; i < a.length; i++) {
            if (a[i] != 0) {
                b++;
            }
        }
        return b;
    }

    //找大招
    private int[] combo(int[] card) {
        int faceGroup = 0;
        int suitGroup = 0;
        int fgMax = 0;
        int sgMax = 0;
        int ans[] = new int[2];

        int[] face = new int[13];
        int[] suit = new int[4];
        for (int i = 0; i < card.length; i++) {
            face[card[i] /4]++;
            suit[card[i] % 4]++;

        }

        faceGroup = findGroup(face);
        suitGroup = findGroup(suit);
        fgMax = findMax(face);
        sgMax = findMax(suit);
        //full house
        if (faceGroup == 2 && fgMax == 3) {
            ans[0] = 5;
            if(card[0]/4==card[2]/4)
            {
                ans[1]=card[2];
            }
            else if(card[0]/4!=card[2]/4)
            {
                ans[1]=card[4];
            }
            
        }
        //flush
        if (suitGroup == 1 && sgMax == 5 && ans[0] == 0) {

            ans[0] = 4;
            ans[1] = card[card.length-1];
           
        }
        //straight    and high card
        if (faceGroup == 5 && fgMax == 1 && ans[0] == 0) {

           int TF = 0;
            for (int i = 0; i < card.length - 2; i++) {
                if (card[i + 1] /4 == card[i] /4 + 1) {
                    TF +=1;
                } 
            }
            if ((TF==3&&card[3]/4+1==card[4]/4)||(TF==3&&card[3]/4+9==card[4]/4)) {
                ans[0] = 2;
                ans[1] = card[card.length-1];
                
            } else {
                ans[0] = 0;
                ans[1] = card[card.length - 1];
            }
           
        }
        //two pair
        if (faceGroup == 3 && fgMax == 2 && ans[0] == 0) {
            ans[0] = 2;
            int temp = 0;
            for (int i = 0; i < face.length; i++) {
                if (face[i] == 2) {
                    temp = i;
                }
            }
            for (int i = 0; i < card.length; i++) {
                if (card[i] /4 == temp) {
                    ans[1] = card[i];
                }
            }
           
        }
        //one pair
        if (faceGroup == 4 && fgMax == 2 && ans[0] == 0) {
            ans[0] = 1;
            int temp = 0;
            for (int i = 0; i < face.length; i++) {
                if (face[i] == 2) {
                    temp = i;
                }
            }
            for (int i = 0; i < card.length; i++) {
                if (card[i] /4 == temp) {
                    
                    ans[1] = card[i];
                }
            }
          
        }

        return ans;
    }
    
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
      
        this.cards = cards;
        
       
    
       
    }

    // TODO
    public int compareTo(Hand that) {
        Arrays.sort(this.cards);
        Arrays.sort(that.cards);
        int ans = 0;
        int[] a = combo(cardLabel(this.cards));
        int[] b = combo(cardLabel(that.cards));
        System.out.println(a[0]);
        System.out.println(b[0]);
        if (a[0] > b[0]) {
            ans = 1;
        } else if (a[0] < b[0]) {
            ans = -1;
        } else if (a[0] == b[0] && a[1] > b[1]) {
            ans = 1;
        } else if (a[0] == b[0] && a[1] < b[1]) {
            ans = -1;
        }
        
        return ans;
        
    
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

    
}

@0c8153197b838231ac99b105fac93180@"
"r03228006","0","0.29","105600","@c03702960859fec5a0d864dfc8038510@import java.util.Arrays;

public class Hand implements Comparable<Hand>{ 

    private Card[] cards = new Card[5];
    private String name;
     
    // DO NOT MODIFY THIS
    public Hand(String name) {
        this.name = name;
    }
     
    // DO NOT MODIFY THIS
    public String getName() {
        return this.name;
     }
     
    // DO NOT MODIFY THIS
    public void setCards(Card[] cards) {
        this.cards = cards;
    }
    public int Faceint(Card c){
          if(c.getFace().equals(""A"")) return 14;
          else if(c.getFace().equals(""K"")) return 13;
          else if(c.getFace().equals(""Q"")) return 12;
          else if(c.getFace().equals(""J"")) return 11;
          return Integer.parseInt(c.getFace());} 
    // TODO 
    public int compareTo(Hand that) {
        // complete this function so the Player can be sorted according to the cards he/she has.
        //sort from small to large
         Arrays.sort(this.cards);
         Arrays.sort(that.cards);
         //full house > 3+2 
         if ((this.cards[2].getFace().equals(this.cards[0].getFace())|this.cards[2].getFace().equals(this.cards[4].getFace()))|(that.cards[2].getFace().equals(that.cards[0].getFace())|that.cards[2].getFace().equals(that.cards[4].getFace()))){
             if((this.cards[2].getFace().equals(this.cards[0].getFace())|this.cards[2].getFace().equals(this.cards[4].getFace()))&(that.cards[2].getFace().equals(that.cards[0].getFace())|that.cards[2].getFace().equals(that.cards[4].getFace()))){
                return this.cards[2].compareTo(that.cards[2]); //both are full house and compare face&suit
             }
             else if ((this.cards[2].getFace().equals(this.cards[0].getFace())|this.cards[2].getFace().equals(this.cards[4].getFace()))){
                return +1; //only this is full house
             }
             else {return -1;}// only that is full house
         }
         //flush > same suit
         boolean x0=true;
         boolean x1=true;
         for(int i=1;i<5;i++){
           if(!this.cards[0].getSuit().equals(this.cards[i].getSuit())) {x0=false;}
           if(!that.cards[0].getSuit().equals(that.cards[i].getSuit())) {x1=false;}}//unless everyone same
         if (x0|x1){
           if (x0 & x1) {return this.cards[4].compareTo(that.cards[4]);}
           else if (x0){return +1;}//只有x0是flush
           else {return -1;}}//只有x1是flush}
         
         //straight > 
         x0=true;
         x1=true;
         for(int i=0;i<4;i++){
           if(Faceint(this.cards[i])!=(Faceint(this.cards[i+1])-1)) {x0=false;}
           if(Faceint(that.cards[i])!=(Faceint(that.cards[i+1])-1)) {x1=false;}}//unless everyone continuous
         //if(x0){maxs0=Faceint(this.cards[4]);}
         //if(x1){maxs1=Faceint(that.cards[4]);}
         if(this.cards[4].getFace().equals(""A"")&this.cards[0].getFace().equals(""2"")){//2,3,4,5,A
             x0=true;
             for(int i=0;i<4;i++){
                 if(Faceint(this.cards[i])!=i+2){x0=false;}
             }}
         if(that.cards[4].getFace().equals(""A"")&that.cards[0].getFace().equals(""2"")){
             x1=true;
             for(int i=0;i<4;i++){
                 if(Faceint(that.cards[i])!=i+2){x1=false;}
             }}
         if(x0|x1){
             if(x0 & x1){
                 if(this.cards[4].getFace().equals(""A"")&this.cards[0].getFace().equals(""2"")) {
                     if(that.cards[4].getFace().equals(""A"")&that.cards[0].getFace().equals(""2"")){
                             return this.cards[4].compareTo(that.cards[4]);}  //if both smallest straight
                     else {return -1;}}
                 else if(that.cards[4].getFace().equals(""A"")&that.cards[0].getFace().equals(""2"")) {return +1;}
                 else return this.cards[4].compareTo(that.cards[4]);}  
             else if(x0){return +1;} // this straight
             else {return -1;}//that straight
         } 
         
         //two pair >
         x0=false;
         x1=false;
         int pair0=0;
         int pair1=0; 
         Card[] pairs = new Card[2];
         //Card pairn0=new Card(name, name);
         for(int i=0;i<4;i++){
           if(this.cards[i].getFace().equals(this.cards[i+1].getFace())){
               pairs[0] = this.cards[i];
               pair0++;}
           if(that.cards[i].getFace().equals(that.cards[i+1].getFace())){
               pairs[1] = that.cards[i];
               //Card p1 = new Card(that.cards[i].getFace(),that.cards[i].getSuit());
               pair1++;}
           }
         if(pair0>=2){x0=true;}
         if(pair1>=2){x1=true;}
         //Card p1 = new Card(""3"",""Hearts"");
         //Card p2= new Card(""J"",""Clubs""); 
         //int K = p1.compareTo(p2);
         if(x0|x1){
            if(x0 & x1) {return pairs[0].compareTo(pairs[1]);}
            else if(x0) {return +1;}
            else {return -1;}
         }
         //one pair > 
         if(pair0==1){x0=true;}
         if(pair1==1){x1=true;}
         if(x0|x1){
            if(x0 & x1) {return pairs[0].compareTo(pairs[1]);}
            else if(x0) {return +1;}
            else {return -1;}
         }
         //high card
         return this.cards[4].compareTo(that.cards[4]);
    }

}
@c03702960859fec5a0d864dfc8038510@"
"r03228006","3","0.0933333333333333","105568","@7834c74c662a935eb3f155da507e46c3@import java.util.Arrays;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
        return;
    }

    // TODO
    public int compareTo(Hand that) {
       // complete this function so the Player can be sorted according to the cards he/she has.
        //sort from small to large
         Arrays.sort(this.cards);
         Arrays.sort(that.cards);
         //full house > 3+2 
         if ((this.cards[2].getFace().equals(this.cards[0].getFace())|this.cards[2].getFace().equals(this.cards[4].getFace()))|(that.cards[2].getFace().equals(that.cards[0].getFace())|that.cards[2].getFace().equals(that.cards[4].getFace()))){
             if((this.cards[2].getFace().equals(this.cards[0].getFace())|this.cards[2].getFace().equals(this.cards[4].getFace()))&(that.cards[2].getFace().equals(that.cards[0].getFace())|that.cards[2].getFace().equals(that.cards[4].getFace()))){
                return this.cards[2].compareTo(that.cards[2]); //both are full house and compare face&suit
             }
             else if ((this.cards[2].getFace().equals(this.cards[0].getFace())|this.cards[2].getFace().equals(this.cards[4].getFace()))){
                return +1; //only this is full house
             }
             else {return -1;}// only that is full house
         }
         //flush > same suit
         boolean x0=true;
         boolean x1=true;
         for(int i=1;i<5;i++){
           if(!this.cards[0].getSuit().equals(this.cards[i].getSuit())) {x0=false;}
           if(!that.cards[0].getSuit().equals(that.cards[i].getSuit())) {x1=false;}}//unless everyone same
         if (x0|x1){
           if (x0 & x1) {return this.cards[4].compareTo(that.cards[4]);}
           else if (x0){return +1;}//只有x0是flush
           else {return -1;}}//只有x1是flush}
         
         //straight > 
         x0=true;
         x1=true;
         for(int i=0;i<4;i++){
           if(Faceint(this.cards[i])!=(Faceint(this.cards[i+1])-1)) {x0=false;}
           if(Faceint(that.cards[i])!=(Faceint(that.cards[i+1])-1)) {x1=false;}}//unless everyone continuous
         //if(x0){maxs0=Faceint(this.cards[4]);}
         //if(x1){maxs1=Faceint(that.cards[4]);}
         if(this.cards[4].getFace().equals(""A"")&this.cards[0].getFace().equals(""2"")){//2,3,4,5,A
             x0=true;
             for(int i=0;i<4;i++){
                 if(Faceint(this.cards[i])!=i+2){x0=false;}
             }}
         if(that.cards[4].getFace().equals(""A"")&that.cards[0].getFace().equals(""2"")){
             x1=true;
             for(int i=0;i<4;i++){
                 if(Faceint(that.cards[i])!=i+2){x1=false;}
             }}
         if(x0|x1){
             if(x0 & x1){
                 if(this.cards[4].getFace().equals(""A"")&this.cards[0].getFace().equals(""2"")) {
                     if(that.cards[4].getFace().equals(""A"")&that.cards[0].getFace().equals(""2"")){
                             return this.cards[4].compareTo(that.cards[4]);}  //if both smallest straight
                     else {return -1;}}
                 else if(that.cards[4].getFace().equals(""A"")&that.cards[0].getFace().equals(""2"")) {return +1;}
                 else return this.cards[4].compareTo(that.cards[4]);}  
             else if(x0){return +1;} // this straight
             else {return -1;}//that straight
         } 
         
         //two pair >
         x0=false;
         x1=false;
         int pair0=0;
         int pair1=0; 
         Card[] pairs = new Card[2];
         //Card pairn0=new Card(name, name);
         for(int i=0;i<4;i++){
           if(this.cards[i].getFace().equals(this.cards[i+1].getFace())){
               pairs[0] = this.cards[i];
               pair0++;}
           if(that.cards[i].getFace().equals(that.cards[i+1].getFace())){
               pairs[1] = that.cards[i];
               //Card p1 = new Card(that.cards[i].getFace(),that.cards[i].getSuit());
               pair1++;}
           }
         if(pair0>=2){x0=true;}
         if(pair1>=2){x1=true;}
         //Card p1 = new Card(""3"",""Hearts"");
         //Card p2= new Card(""J"",""Clubs""); 
         //int K = p1.compareTo(p2);
         if(x0|x1){
            if(x0 & x1) {return pairs[0].compareTo(pairs[1]);}
            else if(x0) {return +1;}
            else {return -1;}
         }
         //one pair > 
         if(pair0==1){x0=true;}
         if(pair1==1){x1=true;}
         if(x0|x1){
            if(x0 & x1) {return pairs[0].compareTo(pairs[1]);}
            else if(x0) {return +1;}
            else {return -1;}
         }
         //high card
         return this.cards[4].compareTo(that.cards[4]);
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }


     

    public int Faceint(Card c){
          if(c.getFace().equals(""A"")) return 14;
          else if(c.getFace().equals(""K"")) return 13;
          else if(c.getFace().equals(""Q"")) return 12;
          else if(c.getFace().equals(""J"")) return 11;
          return Integer.parseInt(c.getFace());} 
    // TODO 

}
@7834c74c662a935eb3f155da507e46c3@"
"r04631041","0","1","116896","@159fccf7208613a5bed3bb8e2c3581dd@public class Hand implements Comparable<Hand> {
     // sorted by Card value are recommended but not necessary
    private Card[] cards=new Card[5]; 
    public int HandOrder,CardOrder;
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards=cards;
        Insertion.sort(this.cards);
        GetOrder();
       }
     private int suittointeger (String suit){
         int num=0;
         switch (suit){
             case ""Spades"":
                 num=3;
                 break;
             case ""Hearts"":
                 num=2;
                 break;
             case ""Dimonds"":
                 num=1;
                 break;
             case ""Clubs"":
                 num=0;
                 break;
         }
         return(num);
     }
     private int facetointeger(String face) {
        int num1 = 0;
        switch (face) {
            case ""A"":
                num1 = 13;
                break;
            case ""K"":
                num1 = 12;
                break;
            case ""Q"":
                num1 = 11;
                break;
            case ""J"":
                num1 = 10;
                break;
            case ""10"":
                num1 = 9;
                break;
            case ""9"":
                num1 = 8;
                break;
            case ""8"":
                num1 = 7;
                break;
            case ""7"":
                num1 = 6;
                break;
            case ""6"":
                num1 = 5;
                break;
            case ""5"":
                num1 = 4;
                break;
            case ""4"":
                num1 = 3;
                break;
            case ""3"":
                num1 = 2;
                break;
            case ""2"":
                num1 = 1;
                break;

        }
        return num1;
    }
    private boolean isFullhouse(){
        if(cards[0].getFace().equals(cards[1].getFace()) && cards[1].getFace().equals(cards[2].getFace()) && cards[3].getFace().equals(cards[4].getFace()) && !cards[0].getFace().equals(cards[3].getFace()))
            return (true);
        if (cards[0].getFace().equals(cards[1].getFace()) && !cards[0].getFace().equals(cards[2].getFace()) && cards[2].getFace().equals(cards[3].getFace()) && cards[2].getFace().equals(cards[4].getFace()))
            return (true);
        else
            return (false);
       }
    private boolean isFlush(){
        String temp=cards[0].getSuit();
        int i=0;
        while (i<5 && cards[i].getSuit().equals(temp) )
            i++;
        return(i==5);
    }
    private boolean isStraight(){
        if (cards[0].getFace().equals(""2"") && cards[1].getFace().equals(""3"") && cards[2].getFace().equals(""4"") && cards[3].getFace().equals(""5"") && cards[4].getFace().equals(""A""))
        return (true);
      
        int i=facetointeger(cards[4].getFace());
        int temp=3;
        while (temp>=0 && facetointeger(cards[temp].getFace())==(i-1) ){
            temp--;
            i--;
        }
        return(i==(facetointeger(cards[4].getFace())-4));
    }
    private int PairNumber(){
        QuickFindUF cc=new QuickFindUF(5);
        for (int i=0 ; i<5 ; i++)
            for (int j=0 ; j<5 ; j++)
                if (facetointeger(cards[i].getFace())==facetointeger(cards[j].getFace()))
                    cc.union(i, j);
        if(cc.count()==5)
            return 0;
        else if(cc.count()==4)
            return 1;
        else if(cc.count()==3 && (cc.find(0)==cc.find(2)||cc.find(4)==cc.find(2)||cc.find(1)==cc.find(3)))
            return 1;
        else 
            return 2;
            }
    // TODO
    public void GetOrder(){
        if (isFullhouse()){
            HandOrder=5;
            CardOrder=facetointeger(cards[2].getFace());
         }
        else if (isFlush()){
            HandOrder=4;
            CardOrder=13*suittointeger(cards[4].getSuit())+facetointeger(cards[4].getFace());
        }
        else if (isStraight()){
            HandOrder=3;
            int i;
            if (cards[0].getFace().equals(""2"") && cards[4].getFace().equals(""A""))
                CardOrder=facetointeger(cards[3].getFace())*4+suittointeger(cards[3].getSuit())+1;
            else 
                CardOrder=facetointeger(cards[4].getFace())*4+suittointeger(cards[4].getSuit())+1;
        }
        else if  (PairNumber()==2){
            HandOrder=2;
            if (cards[4].getFace().equals(cards[3].getFace()))
               CardOrder=facetointeger(cards[4].getFace())*4+suittointeger(cards[4].getSuit())+1;
            else
               CardOrder=facetointeger(cards[3].getFace())*4+suittointeger(cards[3].getSuit())+1;
        }
        else if (PairNumber()==1){
            HandOrder=1;
            if (cards[4].getFace().equals(cards[3].getFace()))
                CardOrder=facetointeger(cards[4].getFace())*4+suittointeger(cards[4].getSuit())+1;
            else if (cards[3].getFace().equals(cards[2].getFace()))
                CardOrder=facetointeger(cards[3].getFace())*4+suittointeger(cards[3].getSuit())+1;
            else if (cards[2].getFace().equals(cards[1].getFace()))
                CardOrder=facetointeger(cards[2].getFace())*4+suittointeger(cards[2].getSuit())+1;
            else
                CardOrder=facetointeger(cards[1].getFace())*4+suittointeger(cards[1].getSuit())+1;
        }
        else{
            HandOrder=0;
            CardOrder=facetointeger(cards[4].getFace())*4+suittointeger(cards[4].getSuit())+1;
        }
    } 
    public int compareTo(Hand that) {
        if (this.HandOrder>that.HandOrder) return 1;
        if (this.HandOrder<that.HandOrder) return -1;
        if (this.CardOrder>that.CardOrder) return 1;
        if (this.CardOrder<that.CardOrder) return -1;
        return 0; 
}
}
@159fccf7208613a5bed3bb8e2c3581dd@"
"r04631041","3","0.0966666666666667","105888","@c48de25ffb7dcc44379e2b344f982655@public class Hand implements Comparable<Hand> {
     // sorted by Card value are recommended but not necessary
    private Card[] cards=new Card[5]; 
    public int HandOrder,CardOrder;
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards=cards;
        Insertion.sort(this.cards);
        GetOrder();
       }
     // Do not modified this function
    public Card[] getCards() { return this.cards; }
    private int suittointeger (String suit){
         int num=0;
         switch (suit){
             case ""Spades"":
                 num=3;
                 break;
             case ""Hearts"":
                 num=2;
                 break;
             case ""Dimonds"":
                 num=1;
                 break;
             case ""Clubs"":
                 num=0;
                 break;
         }
         return(num);
     }
     private int facetointeger(String face) {
        int num1 = 0;
        switch (face) {
            case ""A"":
                num1 = 13;
                break;
            case ""K"":
                num1 = 12;
                break;
            case ""Q"":
                num1 = 11;
                break;
            case ""J"":
                num1 = 10;
                break;
            case ""10"":
                num1 = 9;
                break;
            case ""9"":
                num1 = 8;
                break;
            case ""8"":
                num1 = 7;
                break;
            case ""7"":
                num1 = 6;
                break;
            case ""6"":
                num1 = 5;
                break;
            case ""5"":
                num1 = 4;
                break;
            case ""4"":
                num1 = 3;
                break;
            case ""3"":
                num1 = 2;
                break;
            case ""2"":
                num1 = 1;
                break;

        }
        return num1;
    }
    private boolean isFullhouse(){
        if(cards[0].getFace().equals(cards[1].getFace()) && cards[1].getFace().equals(cards[2].getFace()) && cards[3].getFace().equals(cards[4].getFace()) && !cards[0].getFace().equals(cards[3].getFace()))
            return (true);
        if (cards[0].getFace().equals(cards[1].getFace()) && !cards[0].getFace().equals(cards[2].getFace()) && cards[2].getFace().equals(cards[3].getFace()) && cards[2].getFace().equals(cards[4].getFace()))
            return (true);
        else
            return (false);
       }
    private boolean isFlush(){
        String temp=cards[0].getSuit();
        int i=0;
        while (i<5 && cards[i].getSuit().equals(temp) )
            i++;
        return(i==5);
    }
    private boolean isStraight(){
        if (cards[0].getFace().equals(""2"") && cards[1].getFace().equals(""3"") && cards[2].getFace().equals(""4"") && cards[3].getFace().equals(""5"") && cards[4].getFace().equals(""A""))
        return (true);
      
        int i=facetointeger(cards[4].getFace());
        int temp=3;
        while (temp>=0 && facetointeger(cards[temp].getFace())==(i-1) ){
            temp--;
            i--;
        }
        return(i==(facetointeger(cards[4].getFace())-4));
    }
    private int PairNumber(){
        QuickFindUF cc=new QuickFindUF(5);
        for (int i=0 ; i<5 ; i++)
            for (int j=0 ; j<5 ; j++)
                if (facetointeger(cards[i].getFace())==facetointeger(cards[j].getFace()))
                    cc.union(i, j);
        if(cc.count()==5)
            return 0;
        else if(cc.count()==4)
            return 1;
        else if(cc.count()==3 && (cc.find(0)==cc.find(2)||cc.find(4)==cc.find(2)||cc.find(1)==cc.find(3)))
            return 1;
        else 
            return 2;
            }
    // TODO
    public void GetOrder(){
        if (isFullhouse()){
            HandOrder=5;
            CardOrder=facetointeger(cards[2].getFace());
         }
        else if (isFlush()){
            HandOrder=4;
            CardOrder=13*suittointeger(cards[4].getSuit())+facetointeger(cards[4].getFace());
        }
        else if (isStraight()){
            HandOrder=3;
            int i;
            if (cards[0].getFace().equals(""2"") && cards[4].getFace().equals(""A""))
                CardOrder=facetointeger(cards[3].getFace())*4+suittointeger(cards[3].getSuit())+1;
            else 
                CardOrder=facetointeger(cards[4].getFace())*4+suittointeger(cards[4].getSuit())+1;
        }
        else if  (PairNumber()==2){
            HandOrder=2;
            if (cards[4].getFace().equals(cards[3].getFace()))
               CardOrder=facetointeger(cards[4].getFace())*4+suittointeger(cards[4].getSuit())+1;
            else
               CardOrder=facetointeger(cards[3].getFace())*4+suittointeger(cards[3].getSuit())+1;
        }
        else if (PairNumber()==1){
            HandOrder=1;
            if (cards[4].getFace().equals(cards[3].getFace()))
                CardOrder=facetointeger(cards[4].getFace())*4+suittointeger(cards[4].getSuit())+1;
            else if (cards[3].getFace().equals(cards[2].getFace()))
                CardOrder=facetointeger(cards[3].getFace())*4+suittointeger(cards[3].getSuit())+1;
            else if (cards[2].getFace().equals(cards[1].getFace()))
                CardOrder=facetointeger(cards[2].getFace())*4+suittointeger(cards[2].getSuit())+1;
            else
                CardOrder=facetointeger(cards[1].getFace())*4+suittointeger(cards[1].getSuit())+1;
        }
        else{
            HandOrder=0;
            CardOrder=facetointeger(cards[4].getFace())*4+suittointeger(cards[4].getSuit())+1;
        }
    } 
    public int compareTo(Hand that) {
        if (this.HandOrder>that.HandOrder) return 1;
        if (this.HandOrder<that.HandOrder) return -1;
        if (this.CardOrder>that.CardOrder) return 1;
        if (this.CardOrder<that.CardOrder) return -1;
        return 0; 
}  
}
@c48de25ffb7dcc44379e2b344f982655@"
"b03611041","0","0","0","@b79d779b76968e84f353ea5cf0ccbdc7@import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards;

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        Arrays.sort(this.cards);
        return ;
    }

    // TODO
    public int compareTo(Hand that) {
        int countThis = 0, ptsThis = 0, countThat = 0, ptsThat = 0, strThis = 0, strThat = 0, flushThis = 0, flushThat = 0;
        Arrays.sort(this.cards, Card::compareTo);
        Arrays.sort(that.cards, Card::compareTo);

        int[] iFace1 = new int[cards.length];
        int[] iFace2 = new int[cards.length];
        int[] j1 = new int[cards.length];
        int[] j2 = new int[cards.length];

        for (int i = 0; i < cards.length; i++) {
            if (this.cards[i].getFace().equals(""A"")) iFace1[i] = 14;
            else if (this.cards[i].getFace().equals(""J"")) iFace1[i] = 11;
            else if (this.cards[i].getFace().equals(""Q"")) iFace1[i] = 12;
            else if (this.cards[i].getFace().equals(""K"")) iFace1[i] = 13;
            else iFace1[i] = Integer.parseInt(this.cards[i].getFace());

            if (that.cards[i].getFace().equals(""A"")) iFace2[i] = 14;
            else if (that.cards[i].getFace().equals(""J"")) iFace2[i] = 11;
            else if (that.cards[i].getFace().equals(""Q"")) iFace2[i] = 12;
            else if (that.cards[i].getFace().equals(""K"")) iFace2[i] = 13;
            else iFace2[i] = Integer.parseInt(that.cards[i].getFace());
//            System.out.println(this.cards[i].getFace()+"" ""+this.cards[i].getSuit());
        }
//        System.out.println(""\n"");
        for (int i = 0; i < cards.length - 1; i++) {
            if (iFace1[i] == iFace1[i + 1]) {
                j1[i] = 1;
                j1[i + 1] = 1;
                countThis++;
            }
            if (iFace2[i] == iFace2[i + 1]) {
                j2[i] = 1;
                j2[i + 1] = 1;
                countThat++;
            }
            if (Math.abs(iFace1[i] - iFace1[i + 1]) != 1) strThis++;
            if (Math.abs(iFace2[i] - iFace2[i + 1]) != 1) strThat++;
            if (!this.cards[i].getSuit().equals(this.cards[i + 1].getSuit())) flushThis++;
            if (!that.cards[i].getSuit().equals(that.cards[i + 1].getSuit())) flushThat++;
        }

        if (iFace1[0] == 2 && iFace1[1] == 3 && iFace1[2] == 4 && iFace1[3] == 5 && iFace1[4] == 14) strThis = 0;
        if (iFace2[0] == 2 && iFace2[1] == 3 && iFace2[2] == 4 && iFace2[3] == 5 && iFace2[4] == 14) strThat = 0;

        if (countThis == 3) ptsThis += 5;
        else if (countThis == 2) ptsThis += 2;
        else if (countThis == 1) ptsThis += 1;

        if (countThat == 3) ptsThat += 5;
        else if (countThat == 2) ptsThat += 2;
        else if (countThat == 1) ptsThat += 1;

        if (strThis == 0) ptsThis += 3;
        if (strThat == 0) ptsThat += 3;

        if (flushThis == 0) ptsThis += 4;
        if (flushThat == 0) ptsThat += 4;
//        System.out.println(ptsThis);
        // complete this function so the Player can be sorted according to the cards he/she has.
        if (ptsThis - ptsThat != 0) return ptsThis - ptsThat;
        else {
            if (countThat == countThis && countThat != 0) {
                int a = -1, b = -1;
                for (int i = j1.length - 1; i >= 0; i--) {
                    if (j1[i] == 1 && a == -1) a = i;
                    if (j2[i] == 1 && b == -1) b = i;
                }
                if (iFace1[a] - iFace2[b] == 0) return this.cards[a].getSuit().compareTo(that.cards[b].getSuit());
                else return iFace1[a] - iFace2[b];
            }
            if (iFace1[iFace1.length-1] - iFace2[iFace2.length-1] == 0) return this.cards[iFace1.length-1].getSuit().compareTo(that.cards[iFace2.length-1].getSuit());
            else return iFace1[iFace1.length-1] - iFace2[iFace2.length-1];
        }
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@b79d779b76968e84f353ea5cf0ccbdc7@"
"b03611041","3","0.143333333333333","116848","@6340c4d72ad26419ffa4e7842970b838@import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards;

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards=cards;
    }

    // TODO
    public int compareTo(Hand that) {
        int countThis = 0, ptsThis = 0, countThat = 0, ptsThat = 0, strThis = 0, strThat = 0, flushThis = 0, flushThat = 0;
        Arrays.sort(this.cards, Card::compareTo);
        Arrays.sort(that.cards, Card::compareTo);

        int[] iFace1 = new int[cards.length];
        int[] iFace2 = new int[cards.length];
        int[] j1 = new int[cards.length];
        int[] j2 = new int[cards.length];

        for (int i = 0; i < cards.length; i++) {
            if (this.cards[i].getFace().equals(""A"")) iFace1[i] = 14;
            else if (this.cards[i].getFace().equals(""J"")) iFace1[i] = 11;
            else if (this.cards[i].getFace().equals(""Q"")) iFace1[i] = 12;
            else if (this.cards[i].getFace().equals(""K"")) iFace1[i] = 13;
            else iFace1[i] = Integer.parseInt(this.cards[i].getFace());

            if (that.cards[i].getFace().equals(""A"")) iFace2[i] = 14;
            else if (that.cards[i].getFace().equals(""J"")) iFace2[i] = 11;
            else if (that.cards[i].getFace().equals(""Q"")) iFace2[i] = 12;
            else if (that.cards[i].getFace().equals(""K"")) iFace2[i] = 13;
            else iFace2[i] = Integer.parseInt(that.cards[i].getFace());
//            System.out.println(this.cards[i].getFace()+"" ""+this.cards[i].getSuit());
        }
//        System.out.println(""\n"");
        for (int i = 0; i < cards.length - 1; i++) {
            if (iFace1[i] == iFace1[i + 1]) {
                j1[i] = 1;
                j1[i + 1] = 1;
                countThis++;
            }
            if (iFace2[i] == iFace2[i + 1]) {
                j2[i] = 1;
                j2[i + 1] = 1;
                countThat++;
            }
            if (Math.abs(iFace1[i] - iFace1[i + 1]) != 1) strThis++;
            if (Math.abs(iFace2[i] - iFace2[i + 1]) != 1) strThat++;
            if (!this.cards[i].getSuit().equals(this.cards[i + 1].getSuit())) flushThis++;
            if (!that.cards[i].getSuit().equals(that.cards[i + 1].getSuit())) flushThat++;
        }

        if (iFace1[0] == 2 && iFace1[1] == 3 && iFace1[2] == 4 && iFace1[3] == 5 && iFace1[4] == 14) strThis = 0;
        if (iFace2[0] == 2 && iFace2[1] == 3 && iFace2[2] == 4 && iFace2[3] == 5 && iFace2[4] == 14) strThat = 0;

        if (countThis == 3) ptsThis += 5;
        else if (countThis == 2) ptsThis += 2;
        else if (countThis == 1) ptsThis += 1;

        if (countThat == 3) ptsThat += 5;
        else if (countThat == 2) ptsThat += 2;
        else if (countThat == 1) ptsThat += 1;

        if (strThis == 0) ptsThis += 3;
        if (strThat == 0) ptsThat += 3;

        if (flushThis == 0) ptsThis += 4;
        if (flushThat == 0) ptsThat += 4;
//        System.out.println(ptsThis);
        // complete this function so the Player can be sorted according to the cards he/she has.
        if (ptsThis - ptsThat != 0) return ptsThis - ptsThat;
        else {
            if (countThat == countThis && countThat != 0) {
                int a = -1, b = -1;
                for (int i = j1.length - 1; i >= 0; i--) {
                    if (j1[i] == 1 && a == -1) a = i;
                    if (j2[i] == 1 && b == -1) b = i;
                }
                if (iFace1[a] - iFace2[b] == 0) return this.cards[a].getSuit().compareTo(that.cards[b].getSuit());
                else return iFace1[a] - iFace2[b];
            }
            if (iFace1[iFace1.length-1] - iFace2[iFace2.length-1] == 0) return this.cards[iFace1.length-1].getSuit().compareTo(that.cards[iFace2.length-1].getSuit());
            else return iFace1[iFace1.length-1] - iFace2[iFace2.length-1];
        }
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@6340c4d72ad26419ffa4e7842970b838@"
"r04228002","3","0.0933333333333333","104976","@a0f688d026bd0ca491e111f949a2d9a6@
import java.util.Arrays;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author Lenovo
 */
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    private int big;
    private int level;

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        Arrays.sort(cards,Card.SUIT_ORDER);
        Arrays.sort(cards);
        this.cards = cards;
        this.level = judgeLevel(cards);
        //return;
    }

    // TODO
    public int compareTo(Hand that) {
        if (this.level > that.level){
            return 1;
        }
        else if (this.level==that.level){
                        
            Card C1 = this.getCards()[this.getBig()];
            Card C2 = that.getCards()[that.getBig()];
            return C1.compareTo(C2);   
        }
        else{
            return -1;
        }
        
        //return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
    
    //////////////////////////////////////////////////////
    
    
    public int getBig(){
        return this.big;
    }
    
    private static int transFace(String ff){
        int intface = 0;
        if (ff.equals(""J"")){
            intface = 11;
        }
        else if (ff.equals(""Q"")){
            intface = 12;
        }
        else if (ff.equals(""K"")){
            intface = 13;
        }
        else if (ff.equals(""A"")){
            intface = 14;
        }
        else{
            intface = Integer.parseInt(ff);
        }
        return intface;
    }
    
    
    private int judgeLevel(Card[] cards){
        int out = 0;
        Card C1 = cards[0];
        Card C2 = cards[1];
        Card C3 = cards[2];
        Card C4 = cards[3];
        Card C5 = cards[4];
        if ((C1.getFace().equals(C2.getFace()))&&(C3.getFace().equals(C4.getFace()))&&
                (C4.getFace().equals(C5.getFace()))){
            this.big=4;
            out = 6;
        }
        
        else if ((C4.getFace().equals(C5.getFace()))&&(C1.getFace().equals(C2.getFace()))&&
                (C2.getFace().equals(C3.getFace()))){
            this.big=2;
            out = 6;
        }
        
        else if ((C1.getSuit().equals(C2.getSuit()))&&(C1.getSuit().equals(C3.getSuit()))&&
                (C1.getSuit().equals(C4.getSuit()))&&(C1.getSuit().equals(C5.getSuit()))){
            this.big=4;
            out = 5;
        }
        
        else if ((transFace(C1.getFace())+1==transFace(C2.getFace()))&&
                (transFace(C2.getFace())+1==transFace(C3.getFace()))&&
                (transFace(C3.getFace())+1==transFace(C4.getFace()))){
            if (transFace(C4.getFace())+1==transFace(C5.getFace())){
                this.big=4;
                out = 4;
            }
            else if (transFace(C5.getFace())-12==transFace(C1.getFace())){
                this.big=3;
                out = 4;
            }    
        }
        
        else if ((C5.getFace().equals(C4.getFace()))&&
                ((C3.getFace().equals(C2.getFace()))||
                (C2.getFace().equals(C1.getFace())))){
            this.big=4;
            out = 3;
        }
        
        else if ((C1.getFace().equals(C2.getFace()))&&
                (C3.getFace().equals(C4.getFace()))){
            this.big=3;
            out = 3;
        }
        
        else if (C1.getFace().equals(C2.getFace())){
            this.big=1;
            out = 2;
        }
        
        else if (C2.getFace().equals(C3.getFace())){
            this.big=2;
            out = 2;
        }
                
        else if (C3.getFace().equals(C4.getFace())){
            this.big=3;
            out = 2;
        } 
        
        else if (C4.getFace().equals(C5.getFace())){
            this.big=4;
            out = 2;
        }                
        
        else{
            this.big=4;
            out = 1;
        }
        return out;
    }
    
    
    public static void main(String[] args) {
        // TODO code application logic here
        
        Card[] cardsArray1 = new Card[5];
        
        cardsArray1[0] = new Card(""A"",""Spades"");
        cardsArray1[1] = new Card(""4"",""Hearts"");
        cardsArray1[2] = new Card(""4"",""Diamonds"");
        cardsArray1[3] = new Card(""2"",""Clubs"");
        cardsArray1[4] = new Card(""2"",""Hearts"");
        Hand myhand1 = new Hand(cardsArray1);
        
        Card[] cardsArray2 = new Card[5];
        cardsArray2[0] = new Card(""A"",""Spades"");
        cardsArray2[1] = new Card(""4"",""Hearts"");
        cardsArray2[2] = new Card(""A"",""Diamonds"");
        cardsArray2[3] = new Card(""3"",""Clubs"");
        cardsArray2[4] = new Card(""2"",""Hearts"");
        Hand myhand2 = new Hand(cardsArray2);
        
        System.out.println(myhand2.compareTo(myhand1));
        
    }
}
    
    


@a0f688d026bd0ca491e111f949a2d9a6@"
"b01703032","3","0.0933333333333333","105648","@e678fbc3c56eee06a008a316478b6b4d@import java.util.*;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards;

    private CardType cardType;
    public CardQuery cardQuery = new CardQuery();
    private static final CardTypeOrder CARD_TYPE_ORDER = new CardTypeOrder();

    enum CardType {
        full_house , flush , straight , two_pair , one_pair , high_card
    }


    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
        this.setCardType();
    }

    public CardType getCardType(){
        return cardType;
    }

    private void setCardType(){
        Map<String,Integer> faces = cardQuery.getFaceCount();
        if (faces.size() == 2) {
            // (4,1) or (3,2)
            if (cardQuery.getThrees().size() != 0) {
                cardType = CardType.full_house;
                return;
            }
            cardType = CardType.high_card;
        } else if (faces.size() == 3){
            // (3,1,1) or (2,2,1)
            if (cardQuery.getPairs().size() != 0) {
                cardType = CardType.two_pair;
                return;
            }
            cardType = CardType.high_card;
        } else if (faces.size() == 4){
            // (2,1,1,1)
            cardType = CardType.one_pair;
        } else if (faces.size() == 5){
            // check for flush
            if (cardQuery.getSuitSet().size() == 1) {
                cardType = CardType.flush;
                return;
            }
            // check for straight
            String[] straights = {""A"",""K"",""Q"",""J"",""10"",""9"",""8"",""7"",""6"",""5"",""4"",""3"",""2"",""A""};
            Set<String> faceSet = faces.keySet();
            for(int i = 0; i < straights.length - 5 ; i++){
                Set<String> straightOne = new HashSet<String>();
                for(int j = i ; j < i + 5 ; j++){
                    straightOne.add(straights[j]);
                }
                if (faceSet.containsAll(straightOne)) {
                    cardType = CardType.straight;
                    return;
                }
            }
            // high card otherwise
            cardType = CardType.high_card;
        }
    }

    // TODO
    public int compareTo(Hand that) {
        int result = CARD_TYPE_ORDER.compare(this.getCardType(), that.getCardType());
        if (result != 0){
            return result;
        } else {
            // broke ties
            switch (this.getCardType()) {
                case full_house:
                    Card c1 = Collections.max(this.cardQuery.getThrees());
                    Card c2 = Collections.max(that.cardQuery.getThrees());
                    return c1.compareTo(c2);

                case two_pair:
                case one_pair:
                    c1 = Collections.max(this.cardQuery.getPairs());
                    c2 = Collections.max(that.cardQuery.getPairs());
                    return c1.compareTo(c2);

                case high_card:
                case straight:
                case flush:
                    c1 = Collections.max(this.cardQuery.getOnes());
                    c2 = Collections.max(that.cardQuery.getOnes());
                    return c1.compareTo(c2);
            }
        }
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }


    private static class CardTypeOrder implements Comparator<CardType> {
        private static List<CardType> order;
        CardTypeOrder() {
            CardType[] cardTypes = {
                    CardType.full_house,
                    CardType.flush,
                    CardType.straight,
                    CardType.two_pair,
                    CardType.one_pair,
                    CardType.high_card
            };
            order = new ArrayList<CardType>();
            for (CardType cardType : cardTypes) {
                order.add(cardType);
            }
        }

        @Override
        public int compare(CardType cardType1, CardType cardType2) {
            int cardType_1 = order.indexOf(cardType1);
            int cardType_2 = order.indexOf(cardType2);
            if (cardType_1 < cardType_2) return 1;
            else if (cardType_1 > cardType_2) return -1;
            else return 0;
        }
    }


    private class CardQuery {

        public Map<String , Integer> getFaceCount(){
            Map<String,Integer> faces = new HashMap<String,Integer>();
            for(Card c:cards){
                if (faces.containsKey(c.getFace()))
                    faces.put(c.getFace() , faces.get(c.getFace())+1);
                else
                    faces.put(c.getFace() , 1);
            }
            return faces;
        }

        public Set<String> getSuitSet(){
            Set<String> suitSet = new HashSet<String>();
            for (Card c:cards){
                suitSet.add(c.getSuit());
            }
            return suitSet;
        }

        public Set<String> getSuitSet(String face){
            Set<String> suitSet = new HashSet<String>();
            for (Card c:cards){
                if (face.equals(c.getFace()))
                    suitSet.add(c.getSuit());
            }
            return suitSet;
        }

        public Set<Card> getOnes(){
            Set<Card> ones = new HashSet<Card>();
            Map<String,Integer> faces = getFaceCount();
            for (Card c:cards){
                if (faces.get(c.getFace()) == 1)
                    ones.add(c);
            }
            return ones;
        }

        public Set<Card> getPairs(){
            Set<Card> pairs = new HashSet<Card>();
            Map<String,Integer> faces = getFaceCount();
            for (Card c:cards){
                if (faces.get(c.getFace()) == 2)
                    pairs.add(c);
            }
            return pairs;
        }

        public Set<Card> getThrees(){
            Set<Card> threes = new HashSet<Card>();
            Map<String,Integer> faces = getFaceCount();
            for (Card c:cards){
                if (faces.get(c.getFace()) == 3)
                    threes.add(c);
            }
            return threes;
        }
    }

}
@e678fbc3c56eee06a008a316478b6b4d@"
"r02b48003","2","0.28","105552","@0ab2112440b1b7952b7091c97bc25186@
import java.util.Arrays;

/**
 * 請實作一份 Hand 型別。並上傳至作業 7-1。
 * Hand 為五張撲克牌的組合，需要實作 Comparable 介面 (interface)。
 * 此作業中，我們只考慮 
 *     full house > flush > straight > two pair > one pair > high card 
 *     (Reference: http://en.wikipedia.org/wiki/List_of_poker_hands) 
 * 這六種組合。詳細的 api 請參考附件。
 */

/**
 *
 * @author clint
 */
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        Arrays.sort(cards);
        this.cards = cards;
    }

    // TODO
    public int compareTo(Hand that) {
        return 0;
    }

     
    // Do not modified this function
    public Card[] getCards() { return this.cards; }
    
    /**
     * method: hand
     * the main method in the class; it determine the hands of cards
     * @return int[]
     */
    public int[] hand() {
        // first 
        int[] handFace = convertFace();
        int[] handSuit = convertSuit();
        
        // case 01: four kinds (in this case, it belongs to TwoPairs)
        if (sum(handFace) == 6) { 
            int idx = search(handFace, 3);
            return new int[] {
                mapHand(""TwoPairs""),
                mapFace(cards[idx], true),
                mapSuit(cards[idx])}; 
            
        // case02: full house
        } else if (sum(handFace) == 4) { 
            int idx = search(handFace, 2);
            return new int[] {
                mapHand(""fullhouse""),
                mapFace(cards[idx], true),
                mapSuit(cards[idx])}; 
        
        // case03: two pairs
        } else if (sum(handFace) == 2) { 
            int idx = search(handFace, 1);
            return new int[] {
                mapHand(""TwoPairs""),
                mapFace(cards[idx], true),
                mapSuit(cards[idx])}; 
            
        // case04: one pairs  
        } else if (sum(handFace) == 1) { 
            int idx = search(handFace, 1);
            return new int[] {
                mapHand(""OnePairs""),
                mapFace(cards[idx], true),
                mapSuit(cards[idx])}; 
        
        // case05: Flush, Straight or High Card
        } else if (sum(handFace) == 0)    { 
            // case 05-1: Flush (all the suits are the same)
            if (handSuit[4] == 4)         { 
                return new int[] {
                    mapHand(""Flush""),
                    mapFace(cards[4],true),
                    mapSuit(cards[4])};
            
            // case 05-2: Straight (with Ace be the largest card)
            } else if (isStraight(true)) { 
                return new int[] {
                    mapHand(""Straight""),
                    mapFace(cards[4], true),
                    mapSuit(cards[4])}; 
            
            // case 05-3: Straight (the smallest one: A 2 3 4 5)
            } else if (isStraight(false)) { 
                return new int[] {
                    mapHand(""Straight""),
                    5,
                    mapSuit(cards[0])}; 
                
            // case 05-4: High Card   
            } else { 
                return new int[] {
                    mapHand(""HighCard""),
                    mapFace(cards[4], true),
                    mapSuit(cards[4])}; 
            } // end inner if-else
            
        } else { 
            return new int[] {0};    
        } // end outer if-else
    } // end showCards
    
    /**
     * helper method: sum
     * sum all elements in an integer array
     * @param arr
     * @return int
     */
    private int sum(int[] arr) {
        int res = 0;
        for (int i = 0; i < arr.length; i++)
        { res += arr[i]; }
        return res;
    } // end sum
    
    /**
     * helper method: search
     * the method search the input number in the array
     * return the last match in order to get the largest cards
     * (search from the last item of array)
     * @param arr; input array
     * @param num; query number
     * @return integer 
     */
    private int search(int[] arr, int num) {
        for (int i = 4; i >= 0; i--) {
            if (arr[i] == num) { return i; }
        } // end loop
        return -1;
    } // end search
    
    /**
     * helper method: isStraight
     * determine whether the card is straight or not
     * @param isAce14
     * @return boolean; true if hand of cards is Straight, false otherwise
     */
    public boolean isStraight(boolean isAce14) {
        // initialization
        int[] numFaces = mapFaces(isAce14);
        Arrays.sort(numFaces);
        int res = 0;
        
        // check if face of cards[i] = face of cards[i-1] + 1
        for (int i = 1; i < numFaces.length; i++) {
            if (numFaces[i] - numFaces[i-1] == 1) res++;
        } // end for loop
        
        // return whether the cards is straight or not
        if (res == 4) return true;
        else          return false;
    } // end isStraight
    
    /**
     * helper method: convertFace
     * get sorted card array, convert into integer array
     * if face of cards[i] == face of cards[i-1], set a[i] = a[i-1] + 1
     * if face of cards[i] != face of cards[i-1], set a[i] = 0
     * Note: Face [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
     * @return int[]
     */
    public int[] convertFace() {
        // initialization
        int[] numFaces = mapFaces(true);
        int[] res = new int[cards.length];
        res[0] = 0;
        
        // convert the cards into the result array by face
        for (int i = 1; i < res.length; i++) {
            if (numFaces[i] == numFaces[i-1]) { res[i] = res[i-1] + 1; } 
            else                              { res[i] = 0; }
        } // end for loop
        return res;           
    } // end COnvertFace
    
    /**
     * helper method: convertSuit
     * get sorted card array, convert into integer array
     * if suit of cards[i] == suit of cards[i-1], set a[i] = a[i-1] + 1
     * if suit of cards[i] != suit of cards[i-1], set a[i] = 0
     * note:
     *   1. Spades, Hearts, Diamonds, Clubs
     *   2. the method is targeted for hand ""Flush""
     * @return int[]
     */
    public int[] convertSuit() {
        // initialization
        int[] numSuits = mapSuits();
        int[] res = new int[cards.length];
        res[0] = 0;
        
        // convert the cards into the result array by suit
        for (int i = 1; i < res.length; i++) {
            if (numSuits[i] == numSuits[i-1]) { res[i] = res[i-1] + 1; } 
            else                              { res[i] = 0; }
        } // end for loop
        
        return res;
    } // end convertSuit
    
    /**
     * helper method: mapFaces
     * extension of method mapFace; mapFaces utilize mapFace
     * to map the face of all cards
     * Note: Face [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
     * @param isAce14; should Ace be mapped to 14 or 1 (true -- 14, false -- 1
     * @return int[]
     */
    public int[] mapFaces(boolean isAce14) {
        // initialization 
        int[] face2Num = new int[cards.length];
        
        // map each cards to an integer 
        for (int i = 0; i < face2Num.length; i++) {
            face2Num[i] = mapFace(cards[i], isAce14);
        } // end for loop
        
        return face2Num;
    } // end mapCards
    
    /**
     * helper method: mapSuits
     * extension of method mapSuit; mapSuits utilize mapSuit
     * to map the suit of all cards
     * Note: Spades, Hearts, Diamonds, Clubs
     * @return int[]
     */
    public int[] mapSuits() {
        // initialization
        int[] suit2Num = new int[cards.length];
        
        // map each cards to an integer
        for (int i = 0; i < suit2Num.length; i++) {
            suit2Num[i] = mapSuit(cards[i]);
        } // end for loop
        
        return suit2Num;
    } // end mapCards
    
    
    /**
     * helper method: mapFace
     * convert the face into integer and return
     * Note: Face [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
     * A --- 14 or 1
     * K --- 13
     * Q --- 12
     * J --- 11
     * @param isAce14; should Ace be mapped to 14 or 1 (true -- 14, false -- 1
     * @return Integer
     */
    private Integer mapFace(Card card, boolean isAce14) {
        String cardFace = card.getFace();
        switch (cardFace) {
            // special cards: A K Q J
            case ""A"": if (isAce14) return 14;
                      else         return 1;
            case ""K"": return 13;
            case ""Q"": return 12;
            case ""J"": return 11;
                
            // normal cards: 2~10, convert string to Integer
            default:
                return Integer.valueOf(cardFace);
            } // end switch
    } // end func mapFace
    
    /**
     * helper method: mapSuit
     * return integer that corresponds to the suit
     * note: Spades, Hearts, Diamonds, Clubs
     * Spades   --- 4
     * Hearts   --- 3
     * Diamonds --- 2
     * Clubs    --- 1
     * @return Integer
     */
    private Integer mapSuit(Card card) {
        String cardSuit;
        cardSuit = card.getSuit();
            switch (cardSuit) {
                case ""Spades"":   return 4; // Spades
                case ""Hearts"":   return 3; // Hearts
                case ""Diamonds"": return 2; // Diamonds
                default:         return 1; // Clubs
            } // end switch
    } // end func mapSuit
    
    /**
     * helper method mapHand
     * this function decides the order of hands
     * note: full house > flush > straight > two pair > one pair > high card
     * @param strHand; the type of hand
     * @return integer 
     */
    private int mapHand(String strHand) {
        if      (strHand.equals(""fullhouse"")) { return 5; }
        else if (strHand.equals(""Flush""))     { return 4; }
        else if (strHand.equals(""Straight""))  { return 3; }
        else if (strHand.equals(""TwoPairs""))  { return 2; }
        else if (strHand.equals(""OnePairs""))  { return 1; }
        else if (strHand.equals(""HighCard""))  { return 0; }
        else                              { return -1; }
    } // end func mapHand
}
@0ab2112440b1b7952b7091c97bc25186@"
"r02b48003","3","0.0933333333333333","105536","@987ff7ed4e9ca998e34aa41c4b6e6f48@
import java.util.Arrays;

/**
 * 請實作一份 Hand 型別。並上傳至作業 7-1。
 * Hand 為五張撲克牌的組合，需要實作 Comparable 介面 (interface)。
 * 此作業中，我們只考慮 
 *     full house > flush > straight > two pair > one pair > high card 
 *     (Reference: http://en.wikipedia.org/wiki/List_of_poker_hands) 
 * 這六種組合。詳細的 api 請參考附件。
 */

/**
 *
 * @author clint
 */
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        Arrays.sort(cards);
        this.cards = cards;
    }

    // TODO
    public int compareTo(Hand that) {
        int[] thisHand = this.hand();
        int[] thatHand = that.hand();
        for (int i = 0; i < thisHand.length; i++) {
            if      (thisHand[i] < thatHand[i]) {return -1;}
            else if (thisHand[i] > thatHand[i]) {return  1;}
            else                                {continue; }
        } // end loop
        return 0;
    } // end func compareTo

     
    // Do not modified this function
    public Card[] getCards() { return this.cards; }
    
    /**
     * method: hand
     * the main method in the class; it determine the hands of cards
     * @return int[]
     */
    public int[] hand() {
        // first 
        int[] handFace = convertFace();
        int[] handSuit = convertSuit();
        
        // case 01: four kinds (in this case, it belongs to TwoPairs)
        if (sum(handFace) == 6) { 
            int idx = search(handFace, 3);
            return new int[] {
                mapHand(""TwoPairs""),
                mapFace(cards[idx], true),
                mapSuit(cards[idx])}; 
            
        // case02: full house
        } else if (sum(handFace) == 4) { 
            int idx = search(handFace, 2);
            return new int[] {
                mapHand(""fullhouse""),
                mapFace(cards[idx], true),
                mapSuit(cards[idx])}; 
        
        // case03: two pairs
        } else if (sum(handFace) == 2) { 
            int idx = search(handFace, 1);
            return new int[] {
                mapHand(""TwoPairs""),
                mapFace(cards[idx], true),
                mapSuit(cards[idx])}; 
            
        // case04: one pairs  
        } else if (sum(handFace) == 1) { 
            int idx = search(handFace, 1);
            return new int[] {
                mapHand(""OnePairs""),
                mapFace(cards[idx], true),
                mapSuit(cards[idx])}; 
        
        // case05: Flush, Straight or High Card
        } else if (sum(handFace) == 0)    { 
            // case 05-1: Flush (all the suits are the same)
            if (handSuit[4] == 4)         { 
                return new int[] {
                    mapHand(""Flush""),
                    mapFace(cards[4],true),
                    mapSuit(cards[4])};
            
            // case 05-2: Straight (with Ace be the largest card)
            } else if (isStraight(true)) { 
                return new int[] {
                    mapHand(""Straight""),
                    mapFace(cards[4], true),
                    mapSuit(cards[4])}; 
            
            // case 05-3: Straight (the smallest one: A 2 3 4 5)
            } else if (isStraight(false)) { 
                return new int[] {
                    mapHand(""Straight""),
                    5,
                    mapSuit(cards[0])}; 
                
            // case 05-4: High Card   
            } else { 
                return new int[] {
                    mapHand(""HighCard""),
                    mapFace(cards[4], true),
                    mapSuit(cards[4])}; 
            } // end inner if-else
            
        } else { 
            return new int[] {0};    
        } // end outer if-else
    } // end showCards
    
    /**
     * helper method: sum
     * sum all elements in an integer array
     * @param arr
     * @return int
     */
    private int sum(int[] arr) {
        int res = 0;
        for (int i = 0; i < arr.length; i++)
        { res += arr[i]; }
        return res;
    } // end sum
    
    /**
     * helper method: search
     * the method search the input number in the array
     * return the last match in order to get the largest cards
     * (search from the last item of array)
     * @param arr; input array
     * @param num; query number
     * @return integer 
     */
    private int search(int[] arr, int num) {
        for (int i = 4; i >= 0; i--) {
            if (arr[i] == num) { return i; }
        } // end loop
        return -1;
    } // end search
    
    /**
     * helper method: isStraight
     * determine whether the card is straight or not
     * @param isAce14
     * @return boolean; true if hand of cards is Straight, false otherwise
     */
    public boolean isStraight(boolean isAce14) {
        // initialization
        int[] numFaces = mapFaces(isAce14);
        Arrays.sort(numFaces);
        int res = 0;
        
        // check if face of cards[i] = face of cards[i-1] + 1
        for (int i = 1; i < numFaces.length; i++) {
            if (numFaces[i] - numFaces[i-1] == 1) res++;
        } // end for loop
        
        // return whether the cards is straight or not
        if (res == 4) return true;
        else          return false;
    } // end isStraight
    
    /**
     * helper method: convertFace
     * get sorted card array, convert into integer array
     * if face of cards[i] == face of cards[i-1], set a[i] = a[i-1] + 1
     * if face of cards[i] != face of cards[i-1], set a[i] = 0
     * Note: Face [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
     * @return int[]
     */
    public int[] convertFace() {
        // initialization
        int[] numFaces = mapFaces(true);
        int[] res = new int[cards.length];
        res[0] = 0;
        
        // convert the cards into the result array by face
        for (int i = 1; i < res.length; i++) {
            if (numFaces[i] == numFaces[i-1]) { res[i] = res[i-1] + 1; } 
            else                              { res[i] = 0; }
        } // end for loop
        return res;           
    } // end COnvertFace
    
    /**
     * helper method: convertSuit
     * get sorted card array, convert into integer array
     * if suit of cards[i] == suit of cards[i-1], set a[i] = a[i-1] + 1
     * if suit of cards[i] != suit of cards[i-1], set a[i] = 0
     * note:
     *   1. Spades, Hearts, Diamonds, Clubs
     *   2. the method is targeted for hand ""Flush""
     * @return int[]
     */
    public int[] convertSuit() {
        // initialization
        int[] numSuits = mapSuits();
        int[] res = new int[cards.length];
        res[0] = 0;
        
        // convert the cards into the result array by suit
        for (int i = 1; i < res.length; i++) {
            if (numSuits[i] == numSuits[i-1]) { res[i] = res[i-1] + 1; } 
            else                              { res[i] = 0; }
        } // end for loop
        
        return res;
    } // end convertSuit
    
    /**
     * helper method: mapFaces
     * extension of method mapFace; mapFaces utilize mapFace
     * to map the face of all cards
     * Note: Face [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
     * @param isAce14; should Ace be mapped to 14 or 1 (true -- 14, false -- 1
     * @return int[]
     */
    public int[] mapFaces(boolean isAce14) {
        // initialization 
        int[] face2Num = new int[cards.length];
        
        // map each cards to an integer 
        for (int i = 0; i < face2Num.length; i++) {
            face2Num[i] = mapFace(cards[i], isAce14);
        } // end for loop
        
        return face2Num;
    } // end mapCards
    
    /**
     * helper method: mapSuits
     * extension of method mapSuit; mapSuits utilize mapSuit
     * to map the suit of all cards
     * Note: Spades, Hearts, Diamonds, Clubs
     * @return int[]
     */
    public int[] mapSuits() {
        // initialization
        int[] suit2Num = new int[cards.length];
        
        // map each cards to an integer
        for (int i = 0; i < suit2Num.length; i++) {
            suit2Num[i] = mapSuit(cards[i]);
        } // end for loop
        
        return suit2Num;
    } // end mapCards
    
    
    /**
     * helper method: mapFace
     * convert the face into integer and return
     * Note: Face [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
     * A --- 14 or 1
     * K --- 13
     * Q --- 12
     * J --- 11
     * @param isAce14; should Ace be mapped to 14 or 1 (true -- 14, false -- 1
     * @return Integer
     */
    private Integer mapFace(Card card, boolean isAce14) {
        String cardFace = card.getFace();
        switch (cardFace) {
            // special cards: A K Q J
            case ""A"": if (isAce14) return 14;
                      else         return 1;
            case ""K"": return 13;
            case ""Q"": return 12;
            case ""J"": return 11;
                
            // normal cards: 2~10, convert string to Integer
            default:
                return Integer.valueOf(cardFace);
            } // end switch
    } // end func mapFace
    
    /**
     * helper method: mapSuit
     * return integer that corresponds to the suit
     * note: Spades, Hearts, Diamonds, Clubs
     * Spades   --- 4
     * Hearts   --- 3
     * Diamonds --- 2
     * Clubs    --- 1
     * @return Integer
     */
    private Integer mapSuit(Card card) {
        String cardSuit;
        cardSuit = card.getSuit();
            switch (cardSuit) {
                case ""Spades"":   return 4; // Spades
                case ""Hearts"":   return 3; // Hearts
                case ""Diamonds"": return 2; // Diamonds
                default:         return 1; // Clubs
            } // end switch
    } // end func mapSuit
    
    /**
     * helper method mapHand
     * this function decides the order of hands
     * note: full house > flush > straight > two pair > one pair > high card
     * @param strHand; the type of hand
     * @return integer 
     */
    private int mapHand(String strHand) {
        if      (strHand.equals(""fullhouse"")) { return 5; }
        else if (strHand.equals(""Flush""))     { return 4; }
        else if (strHand.equals(""Straight""))  { return 3; }
        else if (strHand.equals(""TwoPairs""))  { return 2; }
        else if (strHand.equals(""OnePairs""))  { return 1; }
        else if (strHand.equals(""HighCard""))  { return 0; }
        else                              { return -1; }
    } // end func mapHand
}
@987ff7ed4e9ca998e34aa41c4b6e6f48@"
"b01502105","0","0.29","105536","@1f81ec5191e598bd7d6fa13a8222ad66@
import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        Arrays.sort(cards);
        this.cards = cards;
    }

    public int[] getSequence_num(Card[] cards){
        
        int[] sequence_num = new int[2];
        StringBuilder card_face = new StringBuilder();
        for(int i=0;i<5;i++){
            card_face.append(cards[i].getFace());
        }
        //full house 
        if( cards[0].getFace().equals(cards[1].getFace()) ){  //AAOOO
            
            if( cards[1].getFace().equals(cards[2].getFace()) && 
                cards[3].getFace().equals(cards[4].getFace())){       
                sequence_num[0] = 5;
                sequence_num[1] = 1;
//                System.out.printf(""full house type_1  AAABB\n"");
                return sequence_num;
            }
            else if( cards[2].getFace().equals(cards[3].getFace()) && 
                     cards[3].getFace().equals(cards[4].getFace())){  
                sequence_num[0] = 5;
                sequence_num[1] = 2;
//                System.out.printf(""full house type_2  AABBB\n"");
                return sequence_num;
            }  
        }
        //flush
        if( (cards[0].getSuit().equals(cards[1].getSuit())) &&
            (cards[1].getSuit().equals(cards[2].getSuit())) &&
            (cards[2].getSuit().equals(cards[3].getSuit())) &&    
            (cards[3].getSuit().equals(cards[4].getSuit())) ){
            sequence_num[0] = 4;
            switch(cards[0].getSuit()){
                case ""Clubs"":    sequence_num[1] = 1; System.out.printf(""flush_Clubs\n""); return sequence_num;
                case ""Diamonds"": sequence_num[1] = 2; System.out.printf(""flush_Diamonds\n""); return sequence_num;   
                case ""Hearts"":   sequence_num[1] = 3; System.out.printf(""flush_Hearts\n""); return sequence_num;
                case ""Spades"":   sequence_num[1] = 4; System.out.printf(""flush_Spades\n""); return sequence_num;
                default: System.out.printf(""suit_input wrong\n"");
            }             
        }
        //Straight
        switch(card_face.toString()){
            case ""A2345"": sequence_num[0] = 3; sequence_num[1] = 1; System.out.printf(""Straight A2345\n""); return sequence_num;
            case ""23456"": sequence_num[0] = 3; sequence_num[1] = 2; System.out.printf(""Straight 23456\n""); return sequence_num;
            case ""34567"": sequence_num[0] = 3; sequence_num[1] = 3; System.out.printf(""Straight 34567\n""); return sequence_num;    
            case ""45678"": sequence_num[0] = 3; sequence_num[1] = 4; System.out.printf(""Straight 45678\n""); return sequence_num;
            case ""56789"": sequence_num[0] = 3; sequence_num[1] = 5; System.out.printf(""Straight 56789\n""); return sequence_num;    
            case ""678910"":sequence_num[0] = 3; sequence_num[1] = 6; System.out.printf(""Straight 678910\n""); return sequence_num;
            case ""78910J"":sequence_num[0] = 3; sequence_num[1] = 7; System.out.printf(""Straight 78910J\n""); return sequence_num;
            case ""8910JQ"":sequence_num[0] = 3; sequence_num[1] = 8; System.out.printf(""Straight 8910JQ\n""); return sequence_num;
            case ""910JQK"":sequence_num[0] = 3; sequence_num[1] = 9; System.out.printf(""Straight 910JQK\n""); return sequence_num;
            case ""10JQKA"":sequence_num[0] = 3; sequence_num[1] = 10; System.out.printf(""Straight 10JQKA\n""); return sequence_num;
        }
        
        if( cards[0].getFace().equals(cards[1].getFace()) ){  //AAOOO           
            if( cards[2].getFace().equals(cards[3].getFace()) &&
             !(cards[3].getFace().equals(cards[4].getFace())) ){  
                sequence_num[0] = 2;
                sequence_num[1] = 1;
                System.out.printf(""two pairs type_1  AABBC\n"");
                return sequence_num;
            }
            else if( cards[3].getFace().equals(cards[4].getFace()) &&
                   !(cards[2].getFace().equals(cards[3].getFace())) ){  
                sequence_num[0] = 2;
                sequence_num[1] = 2;
                System.out.printf(""two pairs type_2  AABCC\n"");
                return sequence_num;
            }
            else{  //AABCD
                sequence_num[0] = 1;
                sequence_num[1] = 1;
                System.out.printf(""one pair type_1  AABCD\n"");
                return sequence_num;
            }
        }
        else if(cards[1].getFace().equals(cards[2].getFace())){  //OAAOO
            
            if( cards[3].getFace().equals(cards[4].getFace()) &&
              !(cards[2].getFace().equals(cards[3].getFace())) ){  
                sequence_num[0] = 2;
                sequence_num[1] = 3;
                System.out.printf(""two pairs type_3  ABBCC\n"");
                return sequence_num;
            }
            else{   //ABBCD
                sequence_num[0] = 1;
                sequence_num[1] = 2;
                System.out.printf(""one pair type_2  ABBCD\n"");
                return sequence_num;
            }
        }
        else if( cards[2].getFace().equals(cards[3].getFace())){ //ABCCD
            sequence_num[0] = 1;
            sequence_num[1] = 3;
            System.out.printf(""one pair type_3  ABBCD\n"");
            return sequence_num;
        }
        else if( cards[3].getFace().equals(cards[4].getFace())){ //ABCDD
            sequence_num[0] = 1;
            sequence_num[1] = 4;
            System.out.printf(""one pair type_4  ABCDD\n"");
            return sequence_num;
        }
        else{  //faces are distinct
            sequence_num[0] = 0; 
            sequence_num[1] = 0;
            System.out.printf(""High card\n""); 
            return sequence_num;
        }
    }
   
    // TODO
    public int compareTo(Hand that) {
        
        // complete this function so the Player can be sorted according to the cards he/she has.
        int[][] hand_sequence_num = new int[2][2];
        hand_sequence_num[0] = getSequence_num(this.getCards());
        hand_sequence_num[1] = getSequence_num(that.getCards());
        
        if( hand_sequence_num[0][0] < hand_sequence_num[1][0]) return -1;
        if( hand_sequence_num[0][0] > hand_sequence_num[1][0]) return +1;
        // Cases below are those player_sequence_num[0][0] = player_sequence_num[1][0]
        Card[] key_card = new Card[2];
        switch(hand_sequence_num[0][0]){   //sequence level are the same
            case 5:  //full house
                if(hand_sequence_num[0][1] == 1 )   {key_card[0] = this.cards[2];}
                else if(hand_sequence_num[0][1] ==2){key_card[0] = this.cards[4];}
                if(hand_sequence_num[1][1] == 1 )   {key_card[1] = that.cards[2];}
                else if(hand_sequence_num[1][1] ==2){key_card[1] = that.cards[4];}
                
                if( key_card[0].compareTo(key_card[1]) < 0) return -1;
                if( key_card[0].compareTo(key_card[1]) > 0) return +1;
            
            case 4:  //flush
                key_card[0] = this.cards[4];
                key_card[1] = that.cards[4];
                
                if( key_card[0].compareTo(key_card[1]) < 0) return -1;
                if( key_card[0].compareTo(key_card[1]) > 0) return +1;
                
            case 3:  //straight
                if( hand_sequence_num[0][1] < hand_sequence_num[1][1]) return -1;
                if( hand_sequence_num[0][1] > hand_sequence_num[1][1]) return +1;
                //player_sequence_num[0][1] = player_sequence_num[1][1]
                key_card[0] = this.cards[4];
                key_card[1] = that.cards[4];
                if( key_card[0].compareTo(key_card[1]) < 0) return -1;
                if( key_card[0].compareTo(key_card[1]) > 0) return +1;
                
            case 2:  //two pairs
                switch(hand_sequence_num[0][1]){
                    case 1:  //AABBC
                        key_card[0] = this.cards[3]; break;
                    case 2:  //AABCC
                        key_card[0] = this.cards[4]; break;
                    case 3:  //ABBCC
                        key_card[0] = this.cards[4]; break;
                }
                switch(hand_sequence_num[1][1]){
                    case 1:  //AABBC
                        key_card[1] = that.cards[3]; break;
                    case 2:  //AABCC
                        key_card[1] = that.cards[4]; break;
                    case 3:  //ABBCC
                        key_card[1] = that.cards[4]; break;
                }
                if( key_card[0].compareTo(key_card[1]) < 0) return -1;
                if( key_card[0].compareTo(key_card[1]) > 0) return +1;
                
            case 1:  //one pair
                switch(hand_sequence_num[0][1]){
                    case 1:  //AABCD
                        key_card[0] = this.cards[1]; break;
                    case 2:  //ABBCD
                        key_card[0] = this.cards[2]; break;
                    case 3:  //ABCCD
                        key_card[0] = this.cards[3]; break;
                    case 4:  //ABCDD
                        key_card[0] = this.cards[4]; break;
                }
                switch(hand_sequence_num[1][1]){
                    case 1:  //AABCD
                        key_card[1] = that.cards[1]; break;
                    case 2:  //ABBCD
                        key_card[1] = that.cards[2]; break;
                    case 3:  //ABCCD
                        key_card[1] = that.cards[3]; break;
                    case 4:  //ABCDD
                        key_card[1] = that.cards[4]; break;
                }
                if( key_card[0].compareTo(key_card[1]) < 0) return -1;
                if( key_card[0].compareTo(key_card[1]) > 0) return +1;
                
            case 0:  //high card
                key_card[0] = this.cards[4];
                key_card[1] = that.cards[4];
                
                if( key_card[0].compareTo(key_card[1]) < 0) return -1;
                if( key_card[0].compareTo(key_card[1]) > 0) return +1;
        }
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@1f81ec5191e598bd7d6fa13a8222ad66@"
"b01502105","3","0.0966666666666667","105552","@cfa3654b4d28ad9598b08321988af441@
import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        Arrays.sort(cards);
        this.cards = cards;
    }

    public int[] getSequence_num(Card[] cards){
        
        int[] sequence_num = new int[2];
        StringBuilder card_face = new StringBuilder();
        for(int i=0;i<5;i++){
            card_face.append(cards[i].getFace());
        }
        //full house 
        if( cards[0].getFace().equals(cards[1].getFace()) ){  //AAOOO
            
            if( cards[1].getFace().equals(cards[2].getFace()) && 
                cards[3].getFace().equals(cards[4].getFace())){       
                sequence_num[0] = 5;
                sequence_num[1] = 1;
//                System.out.printf(""full house type_1  AAABB\n"");
                return sequence_num;
            }
            else if( cards[2].getFace().equals(cards[3].getFace()) && 
                     cards[3].getFace().equals(cards[4].getFace())){  
                sequence_num[0] = 5;
                sequence_num[1] = 2;
//                System.out.printf(""full house type_2  AABBB\n"");
                return sequence_num;
            }  
        }
        //flush
        if( (cards[0].getSuit().equals(cards[1].getSuit())) &&
            (cards[1].getSuit().equals(cards[2].getSuit())) &&
            (cards[2].getSuit().equals(cards[3].getSuit())) &&    
            (cards[3].getSuit().equals(cards[4].getSuit())) ){
            sequence_num[0] = 4;
            switch(cards[0].getSuit()){
                case ""Clubs"":    sequence_num[1] = 1; return sequence_num;
                case ""Diamonds"": sequence_num[1] = 2; return sequence_num;   
                case ""Hearts"":   sequence_num[1] = 3; return sequence_num;
                case ""Spades"":   sequence_num[1] = 4; return sequence_num;
                default: System.out.printf(""suit_input wrong\n"");
            }             
        }
        //Straight
        switch(card_face.toString()){
            case ""A2345"": sequence_num[0] = 3; sequence_num[1] = 1; return sequence_num;
            case ""23456"": sequence_num[0] = 3; sequence_num[1] = 2; return sequence_num;
            case ""34567"": sequence_num[0] = 3; sequence_num[1] = 3; return sequence_num;    
            case ""45678"": sequence_num[0] = 3; sequence_num[1] = 4; return sequence_num;
            case ""56789"": sequence_num[0] = 3; sequence_num[1] = 5; return sequence_num;    
            case ""678910"":sequence_num[0] = 3; sequence_num[1] = 6; return sequence_num;
            case ""78910J"":sequence_num[0] = 3; sequence_num[1] = 7; return sequence_num;
            case ""8910JQ"":sequence_num[0] = 3; sequence_num[1] = 8; return sequence_num;
            case ""910JQK"":sequence_num[0] = 3; sequence_num[1] = 9; return sequence_num;
            case ""10JQKA"":sequence_num[0] = 3; sequence_num[1] = 10; return sequence_num;
        }
        
        if( cards[0].getFace().equals(cards[1].getFace()) ){  //AAOOO           
            if( cards[2].getFace().equals(cards[3].getFace()) &&
             !(cards[3].getFace().equals(cards[4].getFace())) ){  
                sequence_num[0] = 2;
                sequence_num[1] = 1;
//                System.out.printf(""two pairs type_1  AABBC\n"");
                return sequence_num;
            }
            else if( cards[3].getFace().equals(cards[4].getFace()) &&
                   !(cards[2].getFace().equals(cards[3].getFace())) ){  
                sequence_num[0] = 2;
                sequence_num[1] = 2;
//                System.out.printf(""two pairs type_2  AABCC\n"");
                return sequence_num;
            }
            else{  //AABCD
                sequence_num[0] = 1;
                sequence_num[1] = 1;
//                System.out.printf(""one pair type_1  AABCD\n"");
                return sequence_num;
            }
        }
        else if(cards[1].getFace().equals(cards[2].getFace())){  //OAAOO
            
            if( cards[3].getFace().equals(cards[4].getFace()) &&
              !(cards[2].getFace().equals(cards[3].getFace())) ){  
                sequence_num[0] = 2;
                sequence_num[1] = 3;
//                System.out.printf(""two pairs type_3  ABBCC\n"");
                return sequence_num;
            }
            else{   //ABBCD
                sequence_num[0] = 1;
                sequence_num[1] = 2;
//                System.out.printf(""one pair type_2  ABBCD\n"");
                return sequence_num;
            }
        }
        else if( cards[2].getFace().equals(cards[3].getFace())){ //ABCCD
            sequence_num[0] = 1;
            sequence_num[1] = 3;
//            System.out.printf(""one pair type_3  ABBCD\n"");
            return sequence_num;
        }
        else if( cards[3].getFace().equals(cards[4].getFace())){ //ABCDD
            sequence_num[0] = 1;
            sequence_num[1] = 4;
//            System.out.printf(""one pair type_4  ABCDD\n"");
            return sequence_num;
        }
        else{  //faces are distinct
            sequence_num[0] = 0; 
            sequence_num[1] = 0;
//            System.out.printf(""High card\n""); 
            return sequence_num;
        }
    }
   
    // TODO
    public int compareTo(Hand that) {
        
        // complete this function so the Player can be sorted according to the cards he/she has.
        int[][] hand_sequence_num = new int[2][2];
        hand_sequence_num[0] = getSequence_num(this.getCards());
        hand_sequence_num[1] = getSequence_num(that.getCards());
        
        if( hand_sequence_num[0][0] < hand_sequence_num[1][0]) return -1;
        if( hand_sequence_num[0][0] > hand_sequence_num[1][0]) return +1;
        // Cases below are those player_sequence_num[0][0] = player_sequence_num[1][0]
        Card[] key_card = new Card[2];
        switch(hand_sequence_num[0][0]){   //sequence level are the same
            case 5:  //full house
                if(hand_sequence_num[0][1] == 1 )   {key_card[0] = this.cards[2];}
                else if(hand_sequence_num[0][1] ==2){key_card[0] = this.cards[4];}
                if(hand_sequence_num[1][1] == 1 )   {key_card[1] = that.cards[2];}
                else if(hand_sequence_num[1][1] ==2){key_card[1] = that.cards[4];}
                
                if( key_card[0].compareTo(key_card[1]) < 0) return -1;
                if( key_card[0].compareTo(key_card[1]) > 0) return +1;
            
            case 4:  //flush
                key_card[0] = this.cards[4];
                key_card[1] = that.cards[4];
                
                if( key_card[0].compareTo(key_card[1]) < 0) return -1;
                if( key_card[0].compareTo(key_card[1]) > 0) return +1;
                
            case 3:  //straight
                if( hand_sequence_num[0][1] < hand_sequence_num[1][1]) return -1;
                if( hand_sequence_num[0][1] > hand_sequence_num[1][1]) return +1;
                //player_sequence_num[0][1] = player_sequence_num[1][1]
                key_card[0] = this.cards[4];
                key_card[1] = that.cards[4];
                if( key_card[0].compareTo(key_card[1]) < 0) return -1;
                if( key_card[0].compareTo(key_card[1]) > 0) return +1;
                
            case 2:  //two pairs
                switch(hand_sequence_num[0][1]){
                    case 1:  //AABBC
                        key_card[0] = this.cards[3]; break;
                    case 2:  //AABCC
                        key_card[0] = this.cards[4]; break;
                    case 3:  //ABBCC
                        key_card[0] = this.cards[4]; break;
                }
                switch(hand_sequence_num[1][1]){
                    case 1:  //AABBC
                        key_card[1] = that.cards[3]; break;
                    case 2:  //AABCC
                        key_card[1] = that.cards[4]; break;
                    case 3:  //ABBCC
                        key_card[1] = that.cards[4]; break;
                }
                if( key_card[0].compareTo(key_card[1]) < 0) return -1;
                if( key_card[0].compareTo(key_card[1]) > 0) return +1;
                
            case 1:  //one pair
                switch(hand_sequence_num[0][1]){
                    case 1:  //AABCD
                        key_card[0] = this.cards[1]; break;
                    case 2:  //ABBCD
                        key_card[0] = this.cards[2]; break;
                    case 3:  //ABCCD
                        key_card[0] = this.cards[3]; break;
                    case 4:  //ABCDD
                        key_card[0] = this.cards[4]; break;
                }
                switch(hand_sequence_num[1][1]){
                    case 1:  //AABCD
                        key_card[1] = that.cards[1]; break;
                    case 2:  //ABBCD
                        key_card[1] = that.cards[2]; break;
                    case 3:  //ABCCD
                        key_card[1] = that.cards[3]; break;
                    case 4:  //ABCDD
                        key_card[1] = that.cards[4]; break;
                }
                if( key_card[0].compareTo(key_card[1]) < 0) return -1;
                if( key_card[0].compareTo(key_card[1]) > 0) return +1;
                
            case 0:  //high card
                key_card[0] = this.cards[4];
                key_card[1] = that.cards[4];
                
                if( key_card[0].compareTo(key_card[1]) < 0) return -1;
                if( key_card[0].compareTo(key_card[1]) > 0) return +1;
        }
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@cfa3654b4d28ad9598b08321988af441@"
"r03222054","0","0.39","103520","@bb1f7038b4932e24a6aa56b46d690f93@
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards)
    {
        this.cards = cards;
        return;
    }
private static int faceToInt(String thatFace)
    {
         // String thatFace = that.getFace();
          int faceInt2 = 0;
        
    if(thatFace.equals(""2""))
            faceInt2 = 2;
        if(thatFace.equals(""3""))
            faceInt2 = 3;
        if(thatFace.equals(""4""))
            faceInt2 = 4;
        if(thatFace.equals(""5""))
            faceInt2 = 5;
        if(thatFace.equals(""6""))
            faceInt2 = 6;
        if(thatFace.equals(""7""))
            faceInt2 = 7;
        if(thatFace.equals(""8""))
            faceInt2 = 8;
        if(thatFace.equals(""9""))
            faceInt2 = 9;
        if(thatFace.equals(""10""))
            faceInt2 = 10;
        if(thatFace.equals(""J""))
            faceInt2 = 11;
        if(thatFace.equals(""Q""))
            faceInt2 = 12;
        if(thatFace.equals(""K""))
            faceInt2 = 13;
        if(thatFace.equals(""A""))
            faceInt2 = 14;
        return faceInt2;
    }
       private static int suitToInt(String suitStr) 
       {
        int num1 = 0;
      //  String suitStr = that.getSuit();
        if (suitStr.equals(""Spades""))
            num1=  3;
        else if (suitStr.equals(""Hearts""))
            num1 =2;
        else if (suitStr.equals(""Diamonds""))
            num1=1;
        else if(suitStr.equals(""Clubs""))
            num1 = 0;
        
        return num1;
       }
    
    
    
    public int compareTo(Hand that) 
    {
        Card[] thisCard = this.getCards();
        Card[] thatCard = that.getCards();
        
        int thisKey = checkCombination(this.cards);
        int thatKey = checkCombination(that.cards);
        // complete this function so the Player can be sorted according to the cards he/she has.
        return thisKey-thatKey;
    }
    
    public static boolean isStraight(List<List<Integer>> that)
    {
        
        //Arrays.sort(that);
        int key0=that.get(0).get(0);//
        for( int i =1; i<5; i++)
        {
           if( i==4 && that.get(0).get(0) == 2 && that.get(i).get(0) ==14)
               return true;
           else if(that.get(i).get(0)-key0 != i)
           // if(Card.faceToMap(that[i].getFace()) - key0 != i)
                return false;
        }
        return true;
    }
    
public static boolean isFlush(Card[] that)
{
    String lastSuit = that[0].getSuit();
    for(int i=1; i< 5; i++)
    {
        if(!that[i].getSuit().equals(lastSuit))
            return false;
        
    }
    return true;
    
}
    



public static Integer checkCombination(Card[] that)
    {
        Arrays.sort(that);
        String lastCardFace = that[0].getFace();
        int kind =1;//how many kind of face;
        
        for(int i =1; i<5; i++)
        {
            if(!that[i].getFace().equals(lastCardFace))
                kind++;
        }
        List<List<Integer>> count = new ArrayList<List<Integer>>() {} ;// how many 
        int index = 0;
        count.add(new ArrayList<Integer>());
        count.get(index).add(faceToInt(lastCardFace));
        int maxIndexCount =1;
        int key= 4*(faceToInt(that[4].getFace())-1) + suitToInt(that[4].getSuit()) ;
        
        for( int i =1; i<5; i++)
        {
            if(that[i].getFace().equals(lastCardFace))
            {
                count.get(index).add(faceToInt(lastCardFace));
                if(count.get(index).size() == maxIndexCount)
                {
                  //  maxIndexCount++;
                    key = 4*(faceToInt(that[i].getFace())-1) + suitToInt(that[i].getSuit()) ;
                }
                
                if(count.get(index).size() > maxIndexCount)
                {
                    maxIndexCount++;
                    key = 4*(faceToInt(that[i].getFace())-1) + suitToInt(that[i].getSuit()) ;
                }
            }
            
            else
            {
              index ++;
                lastCardFace = that[i].getFace();
                 count.add(new ArrayList<Integer>());
                count.get(index).add(faceToInt(lastCardFace));
            }         
        }       
        if (count.size() == 2 && maxIndexCount ==3)// fullhouse
            return 6*56+key;
        
        else if(count.size() ==5 )
        {
            if (isFlush(that))
                return 5*56 +key;
            
            else if(Player.isStraight(count))
            {
                if(that[4].getFace().equals(""A"") && that[3].getFace().equals(""5""))
                {
                  // System.out.print(that[3].getFace());
                    key = 4*(faceToInt(that[3].getFace())-1) + suitToInt(that[3].getSuit()) ;
                   // return 4*56 +key
                }
                return 4*56 + key;
            }

            
            else return 1*56+key;
        }
        
        if(maxIndexCount ==2 &&count.size() == 3 )
            return 3*56+key;
        
        else if(maxIndexCount ==2 &&count.size() == 4 )
            return 2*56+key;
      
       // String one = Integer.toString(maxIndexCount);
       // String two = Integer.toString(count.size());
    //    String three = new String(one + "" ""+two);
        return 0;
        

    }
    // TODO


      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@bb1f7038b4932e24a6aa56b46d690f93@"
"r03222054","3","0.09","102512","@32b1cc09da1846c573807554caea7bdf@
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards)
    {
        this.cards = cards;
        return;
    }
private static int faceToInt(String thatFace)
    {
         // String thatFace = that.getFace();
          int faceInt2 = 0;
        
    if(thatFace.equals(""2""))
            faceInt2 = 2;
        if(thatFace.equals(""3""))
            faceInt2 = 3;
        if(thatFace.equals(""4""))
            faceInt2 = 4;
        if(thatFace.equals(""5""))
            faceInt2 = 5;
        if(thatFace.equals(""6""))
            faceInt2 = 6;
        if(thatFace.equals(""7""))
            faceInt2 = 7;
        if(thatFace.equals(""8""))
            faceInt2 = 8;
        if(thatFace.equals(""9""))
            faceInt2 = 9;
        if(thatFace.equals(""10""))
            faceInt2 = 10;
        if(thatFace.equals(""J""))
            faceInt2 = 11;
        if(thatFace.equals(""Q""))
            faceInt2 = 12;
        if(thatFace.equals(""K""))
            faceInt2 = 13;
        if(thatFace.equals(""A""))
            faceInt2 = 14;
        return faceInt2;
    }
       private static int suitToInt(String suitStr) 
       {
        int num1 = 0;
      //  String suitStr = that.getSuit();
        if (suitStr.equals(""Spades""))
            num1=  3;
        else if (suitStr.equals(""Hearts""))
            num1 =2;
        else if (suitStr.equals(""Diamonds""))
            num1=1;
        else if(suitStr.equals(""Clubs""))
            num1 = 0;
        
        return num1;
       }
    
    
    
    public int compareTo(Hand that) 
    {
        Card[] thisCard = this.getCards();
        Card[] thatCard = that.getCards();
        
        int thisKey = checkCombination(this.cards);
        int thatKey = checkCombination(that.cards);
        // complete this function so the Player can be sorted according to the cards he/she has.
        return thisKey-thatKey;
    }
    
    public static boolean isStraight(List<List<Integer>> that)
    {
        
        //Arrays.sort(that);
        int key0=that.get(0).get(0);//
        for( int i =1; i<5; i++)
        {
           if( i==4 && that.get(0).get(0) == 2 && that.get(i).get(0) ==14)
               return true;
           else if(that.get(i).get(0)-key0 != i)
           // if(Card.faceToMap(that[i].getFace()) - key0 != i)
                return false;
        }
        return true;
    }
    
public static boolean isFlush(Card[] that)
{
    String lastSuit = that[0].getSuit();
    for(int i=1; i< 5; i++)
    {
        if(!that[i].getSuit().equals(lastSuit))
            return false;
        
    }
    return true;
    
}
    



public static Integer checkCombination(Card[] that)
    {
        Arrays.sort(that);
        String lastCardFace = that[0].getFace();
        int kind =1;//how many kind of face;
        
        for(int i =1; i<5; i++)
        {
            if(!that[i].getFace().equals(lastCardFace))
                kind++;
        }
        List<List<Integer>> count = new ArrayList<List<Integer>>() {} ;// how many 
        int index = 0;
        count.add(new ArrayList<Integer>());
        count.get(index).add(faceToInt(lastCardFace));
        int maxIndexCount =1;
        int key= 4*(faceToInt(that[4].getFace())-1) + suitToInt(that[4].getSuit()) ;
        
        for( int i =1; i<5; i++)
        {
            if(that[i].getFace().equals(lastCardFace))
            {
                count.get(index).add(faceToInt(lastCardFace));
                if(count.get(index).size() == maxIndexCount)
                {
                  //  maxIndexCount++;
                    key = 4*(faceToInt(that[i].getFace())-1) + suitToInt(that[i].getSuit()) ;
                }
                
                if(count.get(index).size() > maxIndexCount)
                {
                    maxIndexCount++;
                    key = 4*(faceToInt(that[i].getFace())-1) + suitToInt(that[i].getSuit()) ;
                }
            }
            
            else
            {
              index ++;
                lastCardFace = that[i].getFace();
                 count.add(new ArrayList<Integer>());
                count.get(index).add(faceToInt(lastCardFace));
            }         
        }       
        if (count.size() == 2 && maxIndexCount ==3)// fullhouse
            return 6*56+key;
        
        else if(count.size() ==5 )
        {
            if (isFlush(that))
                return 5*56 +key;
            
            else if(Hand.isStraight(count))
            {
                if(that[4].getFace().equals(""A"") && that[3].getFace().equals(""5""))
                {
                  // System.out.print(that[3].getFace());
                    key = 4*(faceToInt(that[3].getFace())-1) + suitToInt(that[3].getSuit()) ;
                   // return 4*56 +key
                }
                return 4*56 + key;
            }

            
            else return 1*56+key;
        }
        
        if(maxIndexCount ==2 &&count.size() == 3 )
            return 3*56+key;
        
        else if(maxIndexCount ==2 &&count.size() == 4 )
            return 2*56+key;
      
       // String one = Integer.toString(maxIndexCount);
       // String two = Integer.toString(count.size());
    //    String three = new String(one + "" ""+two);
        return 0;
        

    }
    // TODO


      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@32b1cc09da1846c573807554caea7bdf@"
"f02631008","2","0.29","102016","@9893b7bf562834b7ff559b462399ad6f@import java.util.Comparator;
import java.util.Objects;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    public Card[] HighCard = new Card[1] ;
    
    public void HighCard (Card cards) {
        this.HighCard[0] = cards;
    }
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
    }
    
    public boolean isFullHouse(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards);
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace()))
                    this.HighCard(Cards[0]) ;
                return true ;
            }
            else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                    this.HighCard(Cards[4]) ;
                    return true ;
                }
            }
        }
        return false ;
    }
    public boolean isFlush(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getSuit().equalsIgnoreCase(Cards[1].getSuit())){
            if(Cards[1].getSuit().equalsIgnoreCase(Cards[2].getSuit())){
                if(Cards[2].getSuit().equalsIgnoreCase(Cards[3].getSuit())){
                 if(Cards[3].getSuit().equalsIgnoreCase(Cards[4].getSuit())){
                        this.HighCard(Cards[4]) ;
            return true ;
                    }
                }
            }
        }
            return false ;
        }
    public boolean isStraight(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
      
        MergeX.sort(Cards);
        Integer[] a1 = new Integer[Cards.length] ;
        for(int i = 0 ; i < 5 ; i++){
            if(Cards[i].getFace().equalsIgnoreCase(""J""))
                a1[i] = 11 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""Q""))
                a1[i] = 12 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""K""))
                a1[i] = 13 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""A""))
                a1[i] = 14 ;
            else
            a1[i] = Integer.parseInt(Cards[i].getFace());            
        }
        if(a1[1]==a1[0]+1){
            if(a1[2] == a1[1]+1){
                if(a1[3]== a1[2]+1){
                    if(a1[4] == a1[3]+1){
                        this.HighCard(Cards[4]) ;
                        return true ;
                    }
                }
            }
        }
        else if(a1[0]==2){
            if(a1[1]==3){
                if(a1[2]==4){
                    if(a1[3]==5){
                        if(a1[4]==14){
                            this.HighCard(Cards[3]) ;
                            return true ;
                        }
                    }
                }
            }
        }
        return false ;
    }
    public boolean isTwoPair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                this.HighCard(Cards[3]) ;
                return true ;
            }
            else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
       }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
        }
        return false;
    }
    public boolean isOnePair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            this.HighCard(Cards[1]) ;
            return true ;
        }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            this.HighCard(Cards[2]) ;
            return true ;
        }
        else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
            this.HighCard(Cards[3]) ;
            return true ;
        }
        else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
            this.HighCard(Cards[4]) ;
            return true ;
        }
        
        return false ;
    }

    // TODO
    public int compareTo(Hand that) {
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
  
    public static void main(String[] args) {
        System.out.println(""John C ENA"");
        // TODO code application logic here
    }
    
}



@9893b7bf562834b7ff559b462399ad6f@"
"f02631008","3","0.0966666666666667","101936","@d4d206affc9623f7d77f6f47655d7c4d@import java.util.Comparator;
import java.util.Objects;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    public Card[] HighCard = new Card[1] ;
    
    public void HighCard (Card cards) {
        this.HighCard[0] = cards;
    }
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
    }
    
    public boolean isFullHouse(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards);
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace()))
                    this.HighCard(Cards[0]) ;
                return true ;
            }
            else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                    this.HighCard(Cards[4]) ;
                    return true ;
                }
            }
        }
        return false ;
    }
    public boolean isFlush(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getSuit().equalsIgnoreCase(Cards[1].getSuit())){
            if(Cards[1].getSuit().equalsIgnoreCase(Cards[2].getSuit())){
                if(Cards[2].getSuit().equalsIgnoreCase(Cards[3].getSuit())){
                 if(Cards[3].getSuit().equalsIgnoreCase(Cards[4].getSuit())){
                        this.HighCard(Cards[4]) ;
            return true ;
                    }
                }
            }
        }
            return false ;
        }
    public boolean isStraight(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
      
        MergeX.sort(Cards);
        Integer[] a1 = new Integer[Cards.length] ;
        for(int i = 0 ; i < 5 ; i++){
            if(Cards[i].getFace().equalsIgnoreCase(""J""))
                a1[i] = 11 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""Q""))
                a1[i] = 12 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""K""))
                a1[i] = 13 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""A""))
                a1[i] = 14 ;
            else
            a1[i] = Integer.parseInt(Cards[i].getFace());            
        }
        if(a1[1]==a1[0]+1){
            if(a1[2] == a1[1]+1){
                if(a1[3]== a1[2]+1){
                    if(a1[4] == a1[3]+1){
                        this.HighCard(Cards[4]) ;
                        return true ;
                    }
                }
            }
        }
        else if(a1[0]==2){
            if(a1[1]==3){
                if(a1[2]==4){
                    if(a1[3]==5){
                        if(a1[4]==14){
                            this.HighCard(Cards[3]) ;
                            return true ;
                        }
                    }
                }
            }
        }
        return false ;
    }
    public boolean isTwoPair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                this.HighCard(Cards[3]) ;
                return true ;
            }
            else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
       }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
        }
        return false;
    }
    public boolean isOnePair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            this.HighCard(Cards[1]) ;
            return true ;
        }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            this.HighCard(Cards[2]) ;
            return true ;
        }
        else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
            this.HighCard(Cards[3]) ;
            return true ;
        }
        else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
            this.HighCard(Cards[4]) ;
            return true ;
        }
        
        return false ;
    }

    // TODO
    public int compareTo(Hand that) {
        
        int[] Points = new int [2] ;
            if(this.isFullHouse())
                Points[0] = 60 ;
            
            else if(this.isFlush())
                Points[0] = 50 ;
            
            else if(this.isStraight())
                Points[0] = 40 ;
            
            else if(this.isTwoPair()){
                Points[0] = 30 ;
            }
            else if(this.isOnePair()){
                Points[0] = 20 ;
            
            }
            else
                Points[0] = 10 ;
            
            
            if(that.isFullHouse())
                Points[1] = 60 ;
            
            else if(that.isFlush())
                Points[1] = 50 ;
            
            else if(that.isStraight())
                Points[1] = 40 ;
            
            else if(that.isTwoPair()){
                Points[1] = 30 ;
            }
            else if(that.isOnePair()){
                Points[1] = 20 ;

    }
            else 
                Points[1] = 10 ;
            
//            System.out.println(Points[0]+"" ""+Points[1] ) ;
            
            if(Points[0]>Points[1])
                return 1 ;
            else if(Points[0]<Points[1])
                return -1 ;
            
            else if(Points[0]==Points[1])
            if(Points[0] == 10){
                MergeX.sort(this.cards);
                MergeX.sort(that.cards);
                this.HighCard(this.cards[4]) ;
                that.HighCard(that.cards[4]) ;
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
                }
            else 
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
            return 0 ;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
  
    public static void main(String[] args) {
        System.out.println(""John C ENA"");
        // TODO code application logic here
    }
    
}



@d4d206affc9623f7d77f6f47655d7c4d@"
"b03704074","0","0","0","@22c5173ff9297c4ae738a3c18609cab0@
import java.util.Arrays;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        cards = new Card[5];
        
    }

    // TODO
    public int compareTo(Hand that) {
        // complete this function so the Player can be sorted according to the cards he/she has.
        Arrays.sort(this.cards);
        Arrays.sort(that.cards);
        int c1size = -1;
        int c2size = -1;
        int flag1 = -1;
        int flag2 = -1;
        //葫蘆
        if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[1].getFace().equals(this.cards[2].getFace())  
            &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 14;
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[2].getFace().equals(this.cards[3].getFace())  
            &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 14;
        //同花
        else if(this.cards[0].getSuit().equals(this.cards[1].getSuit())  &&  this.cards[1].getSuit().equals(this.cards[2].getSuit())  
            &&  this.cards[2].getSuit().equals(this.cards[3].getSuit())  && this.cards[3].getSuit().equals(this.cards[4].getSuit()))
            c1size = 13;
        //順子
        else if(this.cards[0].getFace().equals(""10"") && this.cards[1].getFace().equals(""J"")  && this.cards[2].getFace().equals(""Q"")
            && this.cards[3].getFace().equals(""K"") && this.cards[4].getFace().equals(""A""))
            c1size = 12;
        else if(this.cards[0].getFace().equals(""9"") && this.cards[1].getFace().equals(""10"")  && this.cards[2].getFace().equals(""J"")
            && this.cards[3].getFace().equals(""Q"") && this.cards[4].getFace().equals(""K""))
            c1size = 11;
        else if(this.cards[0].getFace().equals(""8"") && this.cards[1].getFace().equals(""9"")  && this.cards[2].getFace().equals(""10"")
            && this.cards[3].getFace().equals(""J"") && this.cards[4].getFace().equals(""Q""))
            c1size = 10;
        else if(this.cards[0].getFace().equals(""7"") && this.cards[1].getFace().equals(""8"")  && this.cards[2].getFace().equals(""9"")
            && this.cards[3].getFace().equals(""10"") && this.cards[4].getFace().equals(""J""))
            c1size = 9;
        else if(this.cards[0].getFace().equals(""6"") && this.cards[1].getFace().equals(""7"")  && this.cards[2].getFace().equals(""8"")
            && this.cards[3].getFace().equals(""9"") && this.cards[4].getFace().equals(""10""))
            c1size = 8;
        else if(this.cards[0].getFace().equals(""7"") && this.cards[1].getFace().equals(""8"")  && this.cards[2].getFace().equals(""9"")
            && this.cards[3].getFace().equals(""10"") && this.cards[4].getFace().equals(""J""))
            c1size = 7;
        else if(this.cards[0].getFace().equals(""4"") && this.cards[1].getFace().equals(""5"")  && this.cards[2].getFace().equals(""6"")
            && this.cards[3].getFace().equals(""7"") && this.cards[4].getFace().equals(""8""))
            c1size = 6;
        else if(this.cards[0].getFace().equals(""3"") && this.cards[1].getFace().equals(""4"")  && this.cards[2].getFace().equals(""5"")
            && this.cards[3].getFace().equals(""6"") && this.cards[4].getFace().equals(""7""))
            c1size = 5;
        else if(this.cards[0].getFace().equals(""2"") && this.cards[1].getFace().equals(""3"")  && this.cards[2].getFace().equals(""4"")
            && this.cards[3].getFace().equals(""5"") && this.cards[4].getFace().equals(""6""))
            c1size = 4;
        else if(this.cards[0].getFace().equals(""2"") && this.cards[1].getFace().equals(""3"")  && this.cards[2].getFace().equals(""4"")
            && this.cards[3].getFace().equals(""5"") && this.cards[4].getFace().equals(""A""))
            c1size = 3;
        //兩ㄆㄟ
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[2].getFace().equals(this.cards[3].getFace()))
            c1size = 2;
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 2;
        else if(this.cards[1].getFace().equals(this.cards[2].getFace())  &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 2;
        //一ㄆㄟ
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())){
            c1size = 1;
            flag1 = 0;}
        else if(this.cards[1].getFace().equals(this.cards[2].getFace())){
            c1size = 1;
            flag1 = 1;}
        else if(this.cards[2].getFace().equals(this.cards[3].getFace())){
            c1size = 1;
            flag1 = 2;}
        else if(this.cards[3].getFace().equals(this.cards[4].getFace())){
            c1size = 1;
            flag1 = 3;}
        //散牌
        else c1size = 0;
        
        //葫蘆
        if(that.cards[0].getFace().equals(that.cards[1].getFace())  &&  that.cards[1].getFace().equals(that.cards[2].getFace())  
            &&  that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 14;
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())  &&  that.cards[2].getFace().equals(that.cards[3].getFace())  
            &&  that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 14;
        //同花
        else if(that.cards[0].getSuit().equals(that.cards[1].getSuit())  &&  that.cards[1].getSuit().equals(that.cards[2].getSuit())  
            &&  that.cards[2].getSuit().equals(that.cards[3].getSuit())  && that.cards[3].getSuit().equals(that.cards[4].getSuit()))
            c2size = 13;
        //順子
        else if(that.cards[0].getFace().equals(""10"") && that.cards[1].getFace().equals(""J"")  && that.cards[2].getFace().equals(""Q"")
            && that.cards[3].getFace().equals(""K"") && that.cards[4].getFace().equals(""A""))
            c2size = 12;
        else if(that.cards[0].getFace().equals(""9"") && that.cards[1].getFace().equals(""10"")  && that.cards[2].getFace().equals(""J"")
            && that.cards[3].getFace().equals(""Q"") && that.cards[4].getFace().equals(""K""))
            c2size = 11;
        else if(that.cards[0].getFace().equals(""8"") && that.cards[1].getFace().equals(""9"")  && that.cards[2].getFace().equals(""10"")
            && that.cards[3].getFace().equals(""J"") && that.cards[4].getFace().equals(""Q""))
            c2size = 10;
        else if(that.cards[0].getFace().equals(""7"") && that.cards[1].getFace().equals(""8"")  && that.cards[2].getFace().equals(""9"")
            && that.cards[3].getFace().equals(""10"") && that.cards[4].getFace().equals(""J""))
            c2size = 9;
        else if(that.cards[0].getFace().equals(""6"") && that.cards[1].getFace().equals(""7"")  && that.cards[2].getFace().equals(""8"")
            && that.cards[3].getFace().equals(""9"") && that.cards[4].getFace().equals(""10""))
            c2size = 8;
        else if(that.cards[0].getFace().equals(""5"") && that.cards[1].getFace().equals(""6"")  && that.cards[2].getFace().equals(""7"")
            && that.cards[3].getFace().equals(""8"") && that.cards[4].getFace().equals(""9""))
            c2size = 7;
        else if(that.cards[0].getFace().equals(""4"") && that.cards[1].getFace().equals(""5"")  && that.cards[2].getFace().equals(""6"")
            && that.cards[3].getFace().equals(""7"") && that.cards[4].getFace().equals(""8""))
            c2size = 6;
        else if(that.cards[0].getFace().equals(""3"") && that.cards[1].getFace().equals(""4"")  && that.cards[2].getFace().equals(""5"")
            && that.cards[3].getFace().equals(""6"") && that.cards[4].getFace().equals(""7""))
            c2size = 5;
        else if(that.cards[0].getFace().equals(""2"") && that.cards[1].getFace().equals(""3"")  && that.cards[2].getFace().equals(""4"")
            && that.cards[3].getFace().equals(""5"") && that.cards[4].getFace().equals(""6""))
            c2size = 4;
        else if(that.cards[0].getFace().equals(""2"") && that.cards[1].getFace().equals(""3"")  && that.cards[2].getFace().equals(""4"")
            && that.cards[3].getFace().equals(""5"") && that.cards[4].getFace().equals(""A""))
            c2size = 3;
        //兩ㄆㄟ
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())  &&  that.cards[2].getFace().equals(that.cards[3].getFace()))
            c2size = 2;
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())  && that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 2;
        else if(that.cards[1].getFace().equals(that.cards[2].getFace())  &&  that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 2;
        //一ㄆㄟ
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())){
            c2size = 1;
            flag2 = 0;}
        else if(that.cards[1].getFace().equals(that.cards[2].getFace())){
            c2size = 1;
            flag2 = 1;}
        else if(that.cards[2].getFace().equals(that.cards[3].getFace())){
            c2size = 1;
            flag2 = 2;}
        else if(that.cards[3].getFace().equals(that.cards[4].getFace())){
            c2size = 1;
            flag2 = 3;}
        //散牌
        else c2size = 0;
        
        if(c1size>c2size) return +1;
        if(c1size<c2size) return -1;
        //c1size == c2size
        
        //都是葫蘆，直接比中間的大小
        if(c1size == 14) return this.cards[2].compareTo(that.cards[2]);
        //都是同花
        else if(c1size == 13) return this.cards[4].compareTo(that.cards[4]);
        //都是2ㄆㄟ
        else if(c1size == 2) return this.cards[3].compareTo(that.cards[3]);
        //都是1ㄆㄟ
        else if (c1size == 1) return this.cards[flag1].compareTo(that.cards[flag2]);
        //散牌
        else  return this.cards[4].compareTo(that.cards[4]);
        
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@22c5173ff9297c4ae738a3c18609cab0@"
"r04921065","0","0","0","@cc314c43114013547bf66b56831b8137@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        //this.cards = cards;
        return;
    }

    
  
  public int[] handcards(Card[] cards){ //回傳 Value陣列
        int[] Value = new int[6];
        for (int x =0;x<6;x++){
            Value[x]=0;
        }
        
//        int sameCards=1;
//        int groupRank=0;
        int[] ranks = new int[14];
        for (int x=0; x<=13; x++){
            ranks[x]=0; //zero the contents of the array
       }
// 交作業時，要獨立交Player.java，裡面不能用Card.java裡面自創的function(changeFace)
//        for (int x=0; x<5; x++){ 
//            if (cards[x].getFace().equals(""A""))
//                    ranks[1]++;
//            else
//            ranks[cards[x].changeFace(cards[x])]++;
//        }
          for (int x=0; x<5; x++){
              switch (cards[x].getFace()){  // '': char, """": String 記得要加break;否則會一行一行執行下去
                  case(""A""):
                      ranks[1]++;
                      break;
                  case(""J""):
                      ranks[11]++;
                      break;
                  case(""Q""):
                      ranks[12]++;
                      break;
                  case(""K""):
                      ranks[13]++;
                      break;
                  default:
                      //System.out.println(cards[x].getFace());
                      ranks[Integer.parseInt(cards[x].getFace())]++;
              }
          }
        
        
//        for (int x=13; x>=1; x--){
//            if (ranks[x]>sameCards){
//                sameCards=ranks[x]; // 找最多一樣的數字
//                groupRank=x;
//            }
//        }
        
          //flush
        boolean flush = true;  
        for (int i = 0;i<4;i++){
            if (!cards[i].getSuit().equals(cards[i+1].getSuit()))
                    flush = false;
        }
  
        
        // largeGroupRank, smallGroupRank
        int sameCards=1;
        int sameCards2=1;
        int largeGroupRank=0,smallGroupRank=0;
        for (int x=13; x>=1; x--){
            if (ranks[x]>sameCards)
            {
                if (sameCards!=1){ //if sameCards was not the default(預設) value
                    sameCards2 = sameCards; //讓原本sameCards變次要的
                    smallGroupRank = largeGroupRank; //讓原本laregeGroupRank變次要的
                }
                sameCards = ranks[x];
                largeGroupRank = x;
                
            }else if (ranks[x]>sameCards2){ //考慮2-pair
                sameCards2 = ranks[x];
                smallGroupRank = x;  //此時不知道largeGroupRank與smallGroupRank誰大誰小
            }
        }
        if (largeGroupRank==1) largeGroupRank=largeGroupRank+13; //讓A變最大
        if (smallGroupRank==1) smallGroupRank=smallGroupRank+13; //讓A變最大
        
        
        //Straight
        int topStraightValue=0;
        boolean straight=false;     
        for (int x=1; x<=9; x++){
            if (ranks[x]==1 && ranks[x+1]==1 && ranks[x+2]==1 && ranks[x+3]==1 && ranks[x+4]==1){
                straight = true;
                topStraightValue=x+4;
                break;
            }
        }
        if (ranks[10]==1 && ranks[11]==1 && ranks[12]==1 && ranks[13]==1 && ranks[1]==1){
            straight = true;
            topStraightValue=14;
        }

        
         int[] orderedRanks = new int[5];
         int index=0;
         if (ranks[1]==1){ //if ace, run this before because ace is highest card
         orderedRanks[index]=14;
         index++;
         }
         for (int x=13; x>=2; x--){ //從大到小找
             if (ranks[x]==1){
                 orderedRanks[index]=x;
                 index++;
             }
         }
         
         if ( sameCards==1 ) {
             Value[0]=1;   // no pair
             Value[1]=orderedRanks[0]; //the first determining factor is the highest card,
             Value[2]=orderedRanks[1]; //then the next highest card,
             Value[3]=orderedRanks[2]; //and so on
             Value[4]=orderedRanks[3];
             Value[5]=orderedRanks[4];
         }
         if (sameCards==2 && sameCards2==1) {
             Value[0]=2;  // 1 pair
             Value[1]=largeGroupRank;   //rank of pair
             Value[2]=orderedRanks[0];  //next highest cards.
             Value[3]=orderedRanks[1];
             Value[4]=orderedRanks[2];
         }
         if (sameCards==2 && sameCards2==2) { //此時largeGroup的數目 = smallGroup的數目
             Value[0]=3;//two pair
             Value[1]= largeGroupRank>smallGroupRank ? largeGroupRank : smallGroupRank; //rank of greater pair
             Value[2]= largeGroupRank<smallGroupRank ? largeGroupRank : smallGroupRank; //rank of smaller pair
             Value[3]=orderedRanks[0];  //extra card
         }
         if (straight) {
             Value[0]=4; // straight
             Value[1]=topStraightValue;  //if we have two straights, the one with the highest top cards wins

         }
         if (flush) {
             Value[0]=5; // flush
             Value[1]=orderedRanks[0]; //tie determined by ranks of cards
             Value[2]=orderedRanks[1];
             Value[3]=orderedRanks[2];
             Value[4]=orderedRanks[3];
             Value[5]=orderedRanks[4];
         }
         if (sameCards==3 && sameCards2==2)  {
             Value[0]=6;// full house
             Value[1]=largeGroupRank;
             Value[2]=smallGroupRank;
         }
         return Value;
    }
    
    // TODO
    public int compareTo(Hand that) {
        // complete this function so the Player can be sorted according to the cards he/she has.
        // P1,P2 分別為this,that的Value值
           int[] P1 = this.handcards(this.cards);
           //System.out.println(P1[0]+"" ""+P1[1]);
           int[] P2 = that.handcards(that.cards);
           //System.out.println(P2[0]+"" ""+P2[1]);
          
           if (P1[0]>P2[0]) return 1;
           else if (P1[0]==P2[0])
               switch(P1[0]){
                   case 1:
                       return P1[1]>P2[1]? 1:-1;
                   case 2:
                       return P1[1]>P2[1]? 1:-1;
                   case 3:
                       return P1[1]>P2[1]? 1:-1;
                   case 4:
                       return P1[1]>P2[1]? 1:-1;
                   case 5:
                       return P1[1]>P2[1]? 1:-1;
                   case 6:
                       return P1[1]>P2[1]? 1:-1;
               }
           else 
               return -1;
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@cc314c43114013547bf66b56831b8137@"
"r04921065","3","0.0933333333333333","105504","@3e630dc70dad5adcffd111a5810532d1@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
        //return;
    }

    
  
  public int[] handcards(Card[] cards){ //回傳 Value陣列
        int[] Value = new int[6];
        for (int x =0;x<6;x++){
            Value[x]=0;
        }
        
//        int sameCards=1;
//        int groupRank=0;
        int[] ranks = new int[14];
        for (int x=0; x<=13; x++){
            ranks[x]=0; //zero the contents of the array
       }
// 交作業時，要獨立交Player.java，裡面不能用Card.java裡面自創的function(changeFace)
//        for (int x=0; x<5; x++){ 
//            if (cards[x].getFace().equals(""A""))
//                    ranks[1]++;
//            else
//            ranks[cards[x].changeFace(cards[x])]++;
//        }
          for (int x=0; x<5; x++){
              switch (cards[x].getFace()){  // '': char, """": String 記得要加break;否則會一行一行執行下去
                  case(""A""):
                      ranks[1]++;
                      break;
                  case(""J""):
                      ranks[11]++;
                      break;
                  case(""Q""):
                      ranks[12]++;
                      break;
                  case(""K""):
                      ranks[13]++;
                      break;
                  default:
                      //System.out.println(cards[x].getFace());
                      ranks[Integer.parseInt(cards[x].getFace())]++;
              }
          }
        
        
//        for (int x=13; x>=1; x--){
//            if (ranks[x]>sameCards){
//                sameCards=ranks[x]; // 找最多一樣的數字
//                groupRank=x;
//            }
//        }
        
          //flush
        boolean flush = true;  
        for (int i = 0;i<4;i++){
            if (!cards[i].getSuit().equals(cards[i+1].getSuit()))
                    flush = false;
        }
  
        
        // largeGroupRank, smallGroupRank
        int sameCards=1;
        int sameCards2=1;
        int largeGroupRank=0,smallGroupRank=0;
        for (int x=13; x>=1; x--){
            if (ranks[x]>sameCards)
            {
                if (sameCards!=1){ //if sameCards was not the default(預設) value
                    sameCards2 = sameCards; //讓原本sameCards變次要的
                    smallGroupRank = largeGroupRank; //讓原本laregeGroupRank變次要的
                }
                sameCards = ranks[x];
                largeGroupRank = x;
                
            }else if (ranks[x]>sameCards2){ //考慮2-pair
                sameCards2 = ranks[x];
                smallGroupRank = x;  //此時不知道largeGroupRank與smallGroupRank誰大誰小
            }
        }
        if (largeGroupRank==1) largeGroupRank=largeGroupRank+13; //讓A變最大
        if (smallGroupRank==1) smallGroupRank=smallGroupRank+13; //讓A變最大
        
        
        //Straight
        int topStraightValue=0;
        boolean straight=false;     
        for (int x=1; x<=9; x++){
            if (ranks[x]==1 && ranks[x+1]==1 && ranks[x+2]==1 && ranks[x+3]==1 && ranks[x+4]==1){
                straight = true;
                topStraightValue=x+4;
                break;
            }
        }
        if (ranks[10]==1 && ranks[11]==1 && ranks[12]==1 && ranks[13]==1 && ranks[1]==1){
            straight = true;
            topStraightValue=14;
        }

        
         int[] orderedRanks = new int[5];
         int index=0;
         if (ranks[1]==1){ //if ace, run this before because ace is highest card
         orderedRanks[index]=14;
         index++;
         }
         for (int x=13; x>=2; x--){ //從大到小找
             if (ranks[x]==1){
                 orderedRanks[index]=x;
                 index++;
             }
         }
         
         if ( sameCards==1 ) {
             Value[0]=1;   // no pair
             Value[1]=orderedRanks[0]; //the first determining factor is the highest card,
             Value[2]=orderedRanks[1]; //then the next highest card,
             Value[3]=orderedRanks[2]; //and so on
             Value[4]=orderedRanks[3];
             Value[5]=orderedRanks[4];
         }
         if (sameCards==2 && sameCards2==1) {
             Value[0]=2;  // 1 pair
             Value[1]=largeGroupRank;   //rank of pair
             Value[2]=orderedRanks[0];  //next highest cards.
             Value[3]=orderedRanks[1];
             Value[4]=orderedRanks[2];
         }
         if (sameCards==2 && sameCards2==2) { //此時largeGroup的數目 = smallGroup的數目
             Value[0]=3;//two pair
             Value[1]= largeGroupRank>smallGroupRank ? largeGroupRank : smallGroupRank; //rank of greater pair
             Value[2]= largeGroupRank<smallGroupRank ? largeGroupRank : smallGroupRank; //rank of smaller pair
             Value[3]=orderedRanks[0];  //extra card
         }
         if (straight) {
             Value[0]=4; // straight
             Value[1]=topStraightValue;  //if we have two straights, the one with the highest top cards wins

         }
         if (flush) {
             Value[0]=5; // flush
             Value[1]=orderedRanks[0]; //tie determined by ranks of cards
             Value[2]=orderedRanks[1];
             Value[3]=orderedRanks[2];
             Value[4]=orderedRanks[3];
             Value[5]=orderedRanks[4];
         }
         if (sameCards==3 && sameCards2==2)  {
             Value[0]=6;// full house
             Value[1]=largeGroupRank;
             Value[2]=smallGroupRank;
         }
         return Value;
    }
    
    // TODO
    public int compareTo(Hand that) {
        // complete this function so the Player can be sorted according to the cards he/she has.
        // P1,P2 分別為this,that的Value值
           int[] P1 = this.handcards(this.cards);
           //System.out.println(P1[0]+"" ""+P1[1]);
           int[] P2 = that.handcards(that.cards);
           //System.out.println(P2[0]+"" ""+P2[1]);
          
           if (P1[0]>P2[0]) return 1;
           else if (P1[0]==P2[0])
               switch(P1[0]){
                   case 1:
                       return P1[1]>P2[1]? 1:-1;
                   case 2:
                       return P1[1]>P2[1]? 1:-1;
                   case 3:
                       return P1[1]>P2[1]? 1:-1;
                   case 4:
                       return P1[1]>P2[1]? 1:-1;
                   case 5:
                       return P1[1]>P2[1]? 1:-1;
                   case 6:
                       return P1[1]>P2[1]? 1:-1;
               }
           else 
               return -1;
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@3e630dc70dad5adcffd111a5810532d1@"
"r04921065","3","0.09","101440","@f3edb461e7c4717700bde9673a91900c@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
        return;
    }

    
  
  public int[] handcards(Card[] cards){ //回傳 Value陣列
        int[] Value = new int[6];
        for (int x =0;x<6;x++){
            Value[x]=0;
        }
        
//        int sameCards=1;
//        int groupRank=0;
        int[] ranks = new int[14];
        for (int x=0; x<=13; x++){
            ranks[x]=0; //zero the contents of the array
       }
// 交作業時，要獨立交Player.java，裡面不能用Card.java裡面自創的function(changeFace)
//        for (int x=0; x<5; x++){ 
//            if (cards[x].getFace().equals(""A""))
//                    ranks[1]++;
//            else
//            ranks[cards[x].changeFace(cards[x])]++;
//        }
          for (int x=0; x<5; x++){
              switch (cards[x].getFace()){  // '': char, """": String 記得要加break;否則會一行一行執行下去
                  case(""A""):
                      ranks[1]++;
                      break;
                  case(""J""):
                      ranks[11]++;
                      break;
                  case(""Q""):
                      ranks[12]++;
                      break;
                  case(""K""):
                      ranks[13]++;
                      break;
                  default:
                      //System.out.println(cards[x].getFace());
                      ranks[Integer.parseInt(cards[x].getFace())]++;
              }
          }
        
        
//        for (int x=13; x>=1; x--){
//            if (ranks[x]>sameCards){
//                sameCards=ranks[x]; // 找最多一樣的數字
//                groupRank=x;
//            }
//        }
        
          //flush
        boolean flush = true;  
        for (int i = 0;i<4;i++){
            if (!cards[i].getSuit().equals(cards[i+1].getSuit()))
                    flush = false;
        }
  
        
        // largeGroupRank, smallGroupRank
        int sameCards=1;
        int sameCards2=1;
        int largeGroupRank=0,smallGroupRank=0;
        for (int x=13; x>=1; x--){
            if (ranks[x]>sameCards)
            {
                if (sameCards!=1){ //if sameCards was not the default(預設) value
                    sameCards2 = sameCards; //讓原本sameCards變次要的
                    smallGroupRank = largeGroupRank; //讓原本laregeGroupRank變次要的
                }
                sameCards = ranks[x];
                largeGroupRank = x;
                
            }else if (ranks[x]>sameCards2){ //考慮2-pair
                sameCards2 = ranks[x];
                smallGroupRank = x;  //此時不知道largeGroupRank與smallGroupRank誰大誰小
            }
        }
        if (largeGroupRank==1) largeGroupRank=largeGroupRank+13; //讓A變最大
        if (smallGroupRank==1) smallGroupRank=smallGroupRank+13; //讓A變最大
        
        
        //Straight
        int topStraightValue=0;
        boolean straight=false;     
        for (int x=1; x<=9; x++){
            if (ranks[x]==1 && ranks[x+1]==1 && ranks[x+2]==1 && ranks[x+3]==1 && ranks[x+4]==1){
                straight = true;
                topStraightValue=x+4;
                break;
            }
        }
        if (ranks[10]==1 && ranks[11]==1 && ranks[12]==1 && ranks[13]==1 && ranks[1]==1){
            straight = true;
            topStraightValue=14;
        }

        
         int[] orderedRanks = new int[5];
         int index=0;
         if (ranks[1]==1){ //if ace, run this before because ace is highest card
         orderedRanks[index]=14;
         index++;
         }
         for (int x=13; x>=2; x--){ //從大到小找
             if (ranks[x]==1){
                 orderedRanks[index]=x;
                 index++;
             }
         }
         
         if ( sameCards==1 ) {
             Value[0]=1;   // no pair
             Value[1]=orderedRanks[0]; //the first determining factor is the highest card,
             Value[2]=orderedRanks[1]; //then the next highest card,
             Value[3]=orderedRanks[2]; //and so on
             Value[4]=orderedRanks[3];
             Value[5]=orderedRanks[4];
         }
         if (sameCards==2 && sameCards2==1) {
             Value[0]=2;  // 1 pair
             Value[1]=largeGroupRank;   //rank of pair
             Value[2]=orderedRanks[0];  //next highest cards.
             Value[3]=orderedRanks[1];
             Value[4]=orderedRanks[2];
         }
         if (sameCards==2 && sameCards2==2) { //此時largeGroup的數目 = smallGroup的數目
             Value[0]=3;//two pair
             Value[1]= largeGroupRank>smallGroupRank ? largeGroupRank : smallGroupRank; //rank of greater pair
             Value[2]= largeGroupRank<smallGroupRank ? largeGroupRank : smallGroupRank; //rank of smaller pair
             Value[3]=orderedRanks[0];  //extra card
         }
         if (straight) {
             Value[0]=4; // straight
             Value[1]=topStraightValue;  //if we have two straights, the one with the highest top cards wins

         }
         if (flush) {
             Value[0]=5; // flush
             Value[1]=orderedRanks[0]; //tie determined by ranks of cards
             Value[2]=orderedRanks[1];
             Value[3]=orderedRanks[2];
             Value[4]=orderedRanks[3];
             Value[5]=orderedRanks[4];
         }
         if (sameCards==3 && sameCards2==2)  {
             Value[0]=6;// full house
             Value[1]=largeGroupRank;
             Value[2]=smallGroupRank;
         }
         return Value;
    }
    
    // TODO
    public int compareTo(Hand that) {
        // complete this function so the Player can be sorted according to the cards he/she has.
        // P1,P2 分別為this,that的Value值
           int[] P1 = this.handcards(this.cards);
           //System.out.println(P1[0]+"" ""+P1[1]);
           int[] P2 = that.handcards(that.cards);
           //System.out.println(P2[0]+"" ""+P2[1]);
          
           if (P1[0]>P2[0]) return 1;
           else if (P1[0]==P2[0])
               switch(P1[0]){
                   case 1:
                       return P1[1]>P2[1]? 1:-1;
                   case 2:
                       return P1[1]>P2[1]? 1:-1;
                   case 3:
                       return P1[1]>P2[1]? 1:-1;
                   case 4:
                       return P1[1]>P2[1]? 1:-1;
                   case 5:
                       return P1[1]>P2[1]? 1:-1;
                   case 6:
                       return P1[1]>P2[1]? 1:-1;
               }
           else 
               return -1;
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@f3edb461e7c4717700bde9673a91900c@"
"b03704074","0","0","0","@5577b72291da6d1f3777d414ae24d41d@
import java.util.Arrays;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        Arrays.sort(cards);
        
    }

    // TODO
    public int compareTo(Hand that) {
        // complete this function so the Player can be sorted according to the cards he/she has.
        Arrays.sort(this.cards);
        Arrays.sort(that.cards);
        int c1size = -1;
        int c2size = -1;
        int flag1 = -1;
        int flag2 = -1;
        //葫蘆
        if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[1].getFace().equals(this.cards[2].getFace())  
            &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 14;
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[2].getFace().equals(this.cards[3].getFace())  
            &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 14;
        //同花
        else if(this.cards[0].getSuit().equals(this.cards[1].getSuit())  &&  this.cards[1].getSuit().equals(this.cards[2].getSuit())  
            &&  this.cards[2].getSuit().equals(this.cards[3].getSuit())  && this.cards[3].getSuit().equals(this.cards[4].getSuit()))
            c1size = 13;
        //順子
        else if(this.cards[0].getFace().equals(""10"") && this.cards[1].getFace().equals(""J"")  && this.cards[2].getFace().equals(""Q"")
            && this.cards[3].getFace().equals(""K"") && this.cards[4].getFace().equals(""A""))
            c1size = 12;
        else if(this.cards[0].getFace().equals(""9"") && this.cards[1].getFace().equals(""10"")  && this.cards[2].getFace().equals(""J"")
            && this.cards[3].getFace().equals(""Q"") && this.cards[4].getFace().equals(""K""))
            c1size = 11;
        else if(this.cards[0].getFace().equals(""8"") && this.cards[1].getFace().equals(""9"")  && this.cards[2].getFace().equals(""10"")
            && this.cards[3].getFace().equals(""J"") && this.cards[4].getFace().equals(""Q""))
            c1size = 10;
        else if(this.cards[0].getFace().equals(""7"") && this.cards[1].getFace().equals(""8"")  && this.cards[2].getFace().equals(""9"")
            && this.cards[3].getFace().equals(""10"") && this.cards[4].getFace().equals(""J""))
            c1size = 9;
        else if(this.cards[0].getFace().equals(""6"") && this.cards[1].getFace().equals(""7"")  && this.cards[2].getFace().equals(""8"")
            && this.cards[3].getFace().equals(""9"") && this.cards[4].getFace().equals(""10""))
            c1size = 8;
        else if(this.cards[0].getFace().equals(""7"") && this.cards[1].getFace().equals(""8"")  && this.cards[2].getFace().equals(""9"")
            && this.cards[3].getFace().equals(""10"") && this.cards[4].getFace().equals(""J""))
            c1size = 7;
        else if(this.cards[0].getFace().equals(""4"") && this.cards[1].getFace().equals(""5"")  && this.cards[2].getFace().equals(""6"")
            && this.cards[3].getFace().equals(""7"") && this.cards[4].getFace().equals(""8""))
            c1size = 6;
        else if(this.cards[0].getFace().equals(""3"") && this.cards[1].getFace().equals(""4"")  && this.cards[2].getFace().equals(""5"")
            && this.cards[3].getFace().equals(""6"") && this.cards[4].getFace().equals(""7""))
            c1size = 5;
        else if(this.cards[0].getFace().equals(""2"") && this.cards[1].getFace().equals(""3"")  && this.cards[2].getFace().equals(""4"")
            && this.cards[3].getFace().equals(""5"") && this.cards[4].getFace().equals(""6""))
            c1size = 4;
        else if(this.cards[0].getFace().equals(""2"") && this.cards[1].getFace().equals(""3"")  && this.cards[2].getFace().equals(""4"")
            && this.cards[3].getFace().equals(""5"") && this.cards[4].getFace().equals(""A""))
            c1size = 3;
        //兩ㄆㄟ
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[2].getFace().equals(this.cards[3].getFace()))
            c1size = 2;
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 2;
        else if(this.cards[1].getFace().equals(this.cards[2].getFace())  &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 2;
        //一ㄆㄟ
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())){
            c1size = 1;
            flag1 = 0;}
        else if(this.cards[1].getFace().equals(this.cards[2].getFace())){
            c1size = 1;
            flag1 = 1;}
        else if(this.cards[2].getFace().equals(this.cards[3].getFace())){
            c1size = 1;
            flag1 = 2;}
        else if(this.cards[3].getFace().equals(this.cards[4].getFace())){
            c1size = 1;
            flag1 = 3;}
        //散牌
        else c1size = 0;
        
        //葫蘆
        if(that.cards[0].getFace().equals(that.cards[1].getFace())  &&  that.cards[1].getFace().equals(that.cards[2].getFace())  
            &&  that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 14;
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())  &&  that.cards[2].getFace().equals(that.cards[3].getFace())  
            &&  that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 14;
        //同花
        else if(that.cards[0].getSuit().equals(that.cards[1].getSuit())  &&  that.cards[1].getSuit().equals(that.cards[2].getSuit())  
            &&  that.cards[2].getSuit().equals(that.cards[3].getSuit())  && that.cards[3].getSuit().equals(that.cards[4].getSuit()))
            c2size = 13;
        //順子
        else if(that.cards[0].getFace().equals(""10"") && that.cards[1].getFace().equals(""J"")  && that.cards[2].getFace().equals(""Q"")
            && that.cards[3].getFace().equals(""K"") && that.cards[4].getFace().equals(""A""))
            c2size = 12;
        else if(that.cards[0].getFace().equals(""9"") && that.cards[1].getFace().equals(""10"")  && that.cards[2].getFace().equals(""J"")
            && that.cards[3].getFace().equals(""Q"") && that.cards[4].getFace().equals(""K""))
            c2size = 11;
        else if(that.cards[0].getFace().equals(""8"") && that.cards[1].getFace().equals(""9"")  && that.cards[2].getFace().equals(""10"")
            && that.cards[3].getFace().equals(""J"") && that.cards[4].getFace().equals(""Q""))
            c2size = 10;
        else if(that.cards[0].getFace().equals(""7"") && that.cards[1].getFace().equals(""8"")  && that.cards[2].getFace().equals(""9"")
            && that.cards[3].getFace().equals(""10"") && that.cards[4].getFace().equals(""J""))
            c2size = 9;
        else if(that.cards[0].getFace().equals(""6"") && that.cards[1].getFace().equals(""7"")  && that.cards[2].getFace().equals(""8"")
            && that.cards[3].getFace().equals(""9"") && that.cards[4].getFace().equals(""10""))
            c2size = 8;
        else if(that.cards[0].getFace().equals(""5"") && that.cards[1].getFace().equals(""6"")  && that.cards[2].getFace().equals(""7"")
            && that.cards[3].getFace().equals(""8"") && that.cards[4].getFace().equals(""9""))
            c2size = 7;
        else if(that.cards[0].getFace().equals(""4"") && that.cards[1].getFace().equals(""5"")  && that.cards[2].getFace().equals(""6"")
            && that.cards[3].getFace().equals(""7"") && that.cards[4].getFace().equals(""8""))
            c2size = 6;
        else if(that.cards[0].getFace().equals(""3"") && that.cards[1].getFace().equals(""4"")  && that.cards[2].getFace().equals(""5"")
            && that.cards[3].getFace().equals(""6"") && that.cards[4].getFace().equals(""7""))
            c2size = 5;
        else if(that.cards[0].getFace().equals(""2"") && that.cards[1].getFace().equals(""3"")  && that.cards[2].getFace().equals(""4"")
            && that.cards[3].getFace().equals(""5"") && that.cards[4].getFace().equals(""6""))
            c2size = 4;
        else if(that.cards[0].getFace().equals(""2"") && that.cards[1].getFace().equals(""3"")  && that.cards[2].getFace().equals(""4"")
            && that.cards[3].getFace().equals(""5"") && that.cards[4].getFace().equals(""A""))
            c2size = 3;
        //兩ㄆㄟ
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())  &&  that.cards[2].getFace().equals(that.cards[3].getFace()))
            c2size = 2;
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())  && that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 2;
        else if(that.cards[1].getFace().equals(that.cards[2].getFace())  &&  that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 2;
        //一ㄆㄟ
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())){
            c2size = 1;
            flag2 = 0;}
        else if(that.cards[1].getFace().equals(that.cards[2].getFace())){
            c2size = 1;
            flag2 = 1;}
        else if(that.cards[2].getFace().equals(that.cards[3].getFace())){
            c2size = 1;
            flag2 = 2;}
        else if(that.cards[3].getFace().equals(that.cards[4].getFace())){
            c2size = 1;
            flag2 = 3;}
        //散牌
        else c2size = 0;
        
        if(c1size>c2size) return +1;
        if(c1size<c2size) return -1;
        //c1size == c2size
        
        //都是葫蘆，直接比中間的大小
        if(c1size == 14) return this.cards[2].compareTo(that.cards[2]);
        //都是同花
        else if(c1size == 13) return this.cards[4].compareTo(that.cards[4]);
        //都是2ㄆㄟ
        else if(c1size == 2) return this.cards[3].compareTo(that.cards[3]);
        //都是1ㄆㄟ
        else if (c1size == 1) return this.cards[flag1].compareTo(that.cards[flag2]);
        //散牌
        else  return this.cards[4].compareTo(that.cards[4]);
        
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@5577b72291da6d1f3777d414ae24d41d@"
"b03704074","0","0","0","@97bcbf10aa293e0e5eca608b63df9970@
import java.util.Arrays;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        cards = new Card[5];
        Arrays.sort(cards);
        return;
        
    }

    // TODO
    public int compareTo(Hand that) {
        // complete this function so the Player can be sorted according to the cards he/she has.
        Arrays.sort(this.cards);
        Arrays.sort(that.cards);
        int c1size = -1;
        int c2size = -1;
        int flag1 = -1;
        int flag2 = -1;
        //葫蘆
        if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[1].getFace().equals(this.cards[2].getFace())  
            &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 14;
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[2].getFace().equals(this.cards[3].getFace())  
            &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 14;
        //同花
        else if(this.cards[0].getSuit().equals(this.cards[1].getSuit())  &&  this.cards[1].getSuit().equals(this.cards[2].getSuit())  
            &&  this.cards[2].getSuit().equals(this.cards[3].getSuit())  && this.cards[3].getSuit().equals(this.cards[4].getSuit()))
            c1size = 13;
        //順子
        else if(this.cards[0].getFace().equals(""10"") && this.cards[1].getFace().equals(""J"")  && this.cards[2].getFace().equals(""Q"")
            && this.cards[3].getFace().equals(""K"") && this.cards[4].getFace().equals(""A""))
            c1size = 12;
        else if(this.cards[0].getFace().equals(""9"") && this.cards[1].getFace().equals(""10"")  && this.cards[2].getFace().equals(""J"")
            && this.cards[3].getFace().equals(""Q"") && this.cards[4].getFace().equals(""K""))
            c1size = 11;
        else if(this.cards[0].getFace().equals(""8"") && this.cards[1].getFace().equals(""9"")  && this.cards[2].getFace().equals(""10"")
            && this.cards[3].getFace().equals(""J"") && this.cards[4].getFace().equals(""Q""))
            c1size = 10;
        else if(this.cards[0].getFace().equals(""7"") && this.cards[1].getFace().equals(""8"")  && this.cards[2].getFace().equals(""9"")
            && this.cards[3].getFace().equals(""10"") && this.cards[4].getFace().equals(""J""))
            c1size = 9;
        else if(this.cards[0].getFace().equals(""6"") && this.cards[1].getFace().equals(""7"")  && this.cards[2].getFace().equals(""8"")
            && this.cards[3].getFace().equals(""9"") && this.cards[4].getFace().equals(""10""))
            c1size = 8;
        else if(this.cards[0].getFace().equals(""7"") && this.cards[1].getFace().equals(""8"")  && this.cards[2].getFace().equals(""9"")
            && this.cards[3].getFace().equals(""10"") && this.cards[4].getFace().equals(""J""))
            c1size = 7;
        else if(this.cards[0].getFace().equals(""4"") && this.cards[1].getFace().equals(""5"")  && this.cards[2].getFace().equals(""6"")
            && this.cards[3].getFace().equals(""7"") && this.cards[4].getFace().equals(""8""))
            c1size = 6;
        else if(this.cards[0].getFace().equals(""3"") && this.cards[1].getFace().equals(""4"")  && this.cards[2].getFace().equals(""5"")
            && this.cards[3].getFace().equals(""6"") && this.cards[4].getFace().equals(""7""))
            c1size = 5;
        else if(this.cards[0].getFace().equals(""2"") && this.cards[1].getFace().equals(""3"")  && this.cards[2].getFace().equals(""4"")
            && this.cards[3].getFace().equals(""5"") && this.cards[4].getFace().equals(""6""))
            c1size = 4;
        else if(this.cards[0].getFace().equals(""2"") && this.cards[1].getFace().equals(""3"")  && this.cards[2].getFace().equals(""4"")
            && this.cards[3].getFace().equals(""5"") && this.cards[4].getFace().equals(""A""))
            c1size = 3;
        //兩ㄆㄟ
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[2].getFace().equals(this.cards[3].getFace()))
            c1size = 2;
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 2;
        else if(this.cards[1].getFace().equals(this.cards[2].getFace())  &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 2;
        //一ㄆㄟ
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())){
            c1size = 1;
            flag1 = 0;}
        else if(this.cards[1].getFace().equals(this.cards[2].getFace())){
            c1size = 1;
            flag1 = 1;}
        else if(this.cards[2].getFace().equals(this.cards[3].getFace())){
            c1size = 1;
            flag1 = 2;}
        else if(this.cards[3].getFace().equals(this.cards[4].getFace())){
            c1size = 1;
            flag1 = 3;}
        //散牌
        else c1size = 0;
        
        //葫蘆
        if(that.cards[0].getFace().equals(that.cards[1].getFace())  &&  that.cards[1].getFace().equals(that.cards[2].getFace())  
            &&  that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 14;
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())  &&  that.cards[2].getFace().equals(that.cards[3].getFace())  
            &&  that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 14;
        //同花
        else if(that.cards[0].getSuit().equals(that.cards[1].getSuit())  &&  that.cards[1].getSuit().equals(that.cards[2].getSuit())  
            &&  that.cards[2].getSuit().equals(that.cards[3].getSuit())  && that.cards[3].getSuit().equals(that.cards[4].getSuit()))
            c2size = 13;
        //順子
        else if(that.cards[0].getFace().equals(""10"") && that.cards[1].getFace().equals(""J"")  && that.cards[2].getFace().equals(""Q"")
            && that.cards[3].getFace().equals(""K"") && that.cards[4].getFace().equals(""A""))
            c2size = 12;
        else if(that.cards[0].getFace().equals(""9"") && that.cards[1].getFace().equals(""10"")  && that.cards[2].getFace().equals(""J"")
            && that.cards[3].getFace().equals(""Q"") && that.cards[4].getFace().equals(""K""))
            c2size = 11;
        else if(that.cards[0].getFace().equals(""8"") && that.cards[1].getFace().equals(""9"")  && that.cards[2].getFace().equals(""10"")
            && that.cards[3].getFace().equals(""J"") && that.cards[4].getFace().equals(""Q""))
            c2size = 10;
        else if(that.cards[0].getFace().equals(""7"") && that.cards[1].getFace().equals(""8"")  && that.cards[2].getFace().equals(""9"")
            && that.cards[3].getFace().equals(""10"") && that.cards[4].getFace().equals(""J""))
            c2size = 9;
        else if(that.cards[0].getFace().equals(""6"") && that.cards[1].getFace().equals(""7"")  && that.cards[2].getFace().equals(""8"")
            && that.cards[3].getFace().equals(""9"") && that.cards[4].getFace().equals(""10""))
            c2size = 8;
        else if(that.cards[0].getFace().equals(""5"") && that.cards[1].getFace().equals(""6"")  && that.cards[2].getFace().equals(""7"")
            && that.cards[3].getFace().equals(""8"") && that.cards[4].getFace().equals(""9""))
            c2size = 7;
        else if(that.cards[0].getFace().equals(""4"") && that.cards[1].getFace().equals(""5"")  && that.cards[2].getFace().equals(""6"")
            && that.cards[3].getFace().equals(""7"") && that.cards[4].getFace().equals(""8""))
            c2size = 6;
        else if(that.cards[0].getFace().equals(""3"") && that.cards[1].getFace().equals(""4"")  && that.cards[2].getFace().equals(""5"")
            && that.cards[3].getFace().equals(""6"") && that.cards[4].getFace().equals(""7""))
            c2size = 5;
        else if(that.cards[0].getFace().equals(""2"") && that.cards[1].getFace().equals(""3"")  && that.cards[2].getFace().equals(""4"")
            && that.cards[3].getFace().equals(""5"") && that.cards[4].getFace().equals(""6""))
            c2size = 4;
        else if(that.cards[0].getFace().equals(""2"") && that.cards[1].getFace().equals(""3"")  && that.cards[2].getFace().equals(""4"")
            && that.cards[3].getFace().equals(""5"") && that.cards[4].getFace().equals(""A""))
            c2size = 3;
        //兩ㄆㄟ
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())  &&  that.cards[2].getFace().equals(that.cards[3].getFace()))
            c2size = 2;
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())  && that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 2;
        else if(that.cards[1].getFace().equals(that.cards[2].getFace())  &&  that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 2;
        //一ㄆㄟ
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())){
            c2size = 1;
            flag2 = 0;}
        else if(that.cards[1].getFace().equals(that.cards[2].getFace())){
            c2size = 1;
            flag2 = 1;}
        else if(that.cards[2].getFace().equals(that.cards[3].getFace())){
            c2size = 1;
            flag2 = 2;}
        else if(that.cards[3].getFace().equals(that.cards[4].getFace())){
            c2size = 1;
            flag2 = 3;}
        //散牌
        else c2size = 0;
        
        if(c1size>c2size) return +1;
        if(c1size<c2size) return -1;
        //c1size == c2size
        
        //都是葫蘆，直接比中間的大小
        if(c1size == 14) return this.cards[2].compareTo(that.cards[2]);
        //都是同花
        else if(c1size == 13) return this.cards[4].compareTo(that.cards[4]);
        //都是2ㄆㄟ
        else if(c1size == 2) return this.cards[3].compareTo(that.cards[3]);
        //都是1ㄆㄟ
        else if (c1size == 1) return this.cards[flag1].compareTo(that.cards[flag2]);
        //散牌
        else  return this.cards[4].compareTo(that.cards[4]);
        
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@97bcbf10aa293e0e5eca608b63df9970@"
"b03704074","0","0","0","@c9e32c1117932ab487e44ce51eff83b9@
import java.util.Arrays;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        
        Arrays.sort(cards);
        
        
    }

    // TODO
    public int compareTo(Hand that) {
        // complete this function so the Player can be sorted according to the cards he/she has.
        Arrays.sort(this.cards);
        Arrays.sort(that.cards);
        int c1size = -1;
        int c2size = -1;
        int flag1 = -1;
        int flag2 = -1;
        //葫蘆
        if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[1].getFace().equals(this.cards[2].getFace())  
            &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 14;
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[2].getFace().equals(this.cards[3].getFace())  
            &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 14;
        //同花
        else if(this.cards[0].getSuit().equals(this.cards[1].getSuit())  &&  this.cards[1].getSuit().equals(this.cards[2].getSuit())  
            &&  this.cards[2].getSuit().equals(this.cards[3].getSuit())  && this.cards[3].getSuit().equals(this.cards[4].getSuit()))
            c1size = 13;
        //順子
        else if(this.cards[0].getFace().equals(""10"") && this.cards[1].getFace().equals(""J"")  && this.cards[2].getFace().equals(""Q"")
            && this.cards[3].getFace().equals(""K"") && this.cards[4].getFace().equals(""A""))
            c1size = 12;
        else if(this.cards[0].getFace().equals(""9"") && this.cards[1].getFace().equals(""10"")  && this.cards[2].getFace().equals(""J"")
            && this.cards[3].getFace().equals(""Q"") && this.cards[4].getFace().equals(""K""))
            c1size = 11;
        else if(this.cards[0].getFace().equals(""8"") && this.cards[1].getFace().equals(""9"")  && this.cards[2].getFace().equals(""10"")
            && this.cards[3].getFace().equals(""J"") && this.cards[4].getFace().equals(""Q""))
            c1size = 10;
        else if(this.cards[0].getFace().equals(""7"") && this.cards[1].getFace().equals(""8"")  && this.cards[2].getFace().equals(""9"")
            && this.cards[3].getFace().equals(""10"") && this.cards[4].getFace().equals(""J""))
            c1size = 9;
        else if(this.cards[0].getFace().equals(""6"") && this.cards[1].getFace().equals(""7"")  && this.cards[2].getFace().equals(""8"")
            && this.cards[3].getFace().equals(""9"") && this.cards[4].getFace().equals(""10""))
            c1size = 8;
        else if(this.cards[0].getFace().equals(""7"") && this.cards[1].getFace().equals(""8"")  && this.cards[2].getFace().equals(""9"")
            && this.cards[3].getFace().equals(""10"") && this.cards[4].getFace().equals(""J""))
            c1size = 7;
        else if(this.cards[0].getFace().equals(""4"") && this.cards[1].getFace().equals(""5"")  && this.cards[2].getFace().equals(""6"")
            && this.cards[3].getFace().equals(""7"") && this.cards[4].getFace().equals(""8""))
            c1size = 6;
        else if(this.cards[0].getFace().equals(""3"") && this.cards[1].getFace().equals(""4"")  && this.cards[2].getFace().equals(""5"")
            && this.cards[3].getFace().equals(""6"") && this.cards[4].getFace().equals(""7""))
            c1size = 5;
        else if(this.cards[0].getFace().equals(""2"") && this.cards[1].getFace().equals(""3"")  && this.cards[2].getFace().equals(""4"")
            && this.cards[3].getFace().equals(""5"") && this.cards[4].getFace().equals(""6""))
            c1size = 4;
        else if(this.cards[0].getFace().equals(""2"") && this.cards[1].getFace().equals(""3"")  && this.cards[2].getFace().equals(""4"")
            && this.cards[3].getFace().equals(""5"") && this.cards[4].getFace().equals(""A""))
            c1size = 3;
        //兩ㄆㄟ
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[2].getFace().equals(this.cards[3].getFace()))
            c1size = 2;
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 2;
        else if(this.cards[1].getFace().equals(this.cards[2].getFace())  &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 2;
        //一ㄆㄟ
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())){
            c1size = 1;
            flag1 = 0;}
        else if(this.cards[1].getFace().equals(this.cards[2].getFace())){
            c1size = 1;
            flag1 = 1;}
        else if(this.cards[2].getFace().equals(this.cards[3].getFace())){
            c1size = 1;
            flag1 = 2;}
        else if(this.cards[3].getFace().equals(this.cards[4].getFace())){
            c1size = 1;
            flag1 = 3;}
        //散牌
        else c1size = 0;
        
        //葫蘆
        if(that.cards[0].getFace().equals(that.cards[1].getFace())  &&  that.cards[1].getFace().equals(that.cards[2].getFace())  
            &&  that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 14;
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())  &&  that.cards[2].getFace().equals(that.cards[3].getFace())  
            &&  that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 14;
        //同花
        else if(that.cards[0].getSuit().equals(that.cards[1].getSuit())  &&  that.cards[1].getSuit().equals(that.cards[2].getSuit())  
            &&  that.cards[2].getSuit().equals(that.cards[3].getSuit())  && that.cards[3].getSuit().equals(that.cards[4].getSuit()))
            c2size = 13;
        //順子
        else if(that.cards[0].getFace().equals(""10"") && that.cards[1].getFace().equals(""J"")  && that.cards[2].getFace().equals(""Q"")
            && that.cards[3].getFace().equals(""K"") && that.cards[4].getFace().equals(""A""))
            c2size = 12;
        else if(that.cards[0].getFace().equals(""9"") && that.cards[1].getFace().equals(""10"")  && that.cards[2].getFace().equals(""J"")
            && that.cards[3].getFace().equals(""Q"") && that.cards[4].getFace().equals(""K""))
            c2size = 11;
        else if(that.cards[0].getFace().equals(""8"") && that.cards[1].getFace().equals(""9"")  && that.cards[2].getFace().equals(""10"")
            && that.cards[3].getFace().equals(""J"") && that.cards[4].getFace().equals(""Q""))
            c2size = 10;
        else if(that.cards[0].getFace().equals(""7"") && that.cards[1].getFace().equals(""8"")  && that.cards[2].getFace().equals(""9"")
            && that.cards[3].getFace().equals(""10"") && that.cards[4].getFace().equals(""J""))
            c2size = 9;
        else if(that.cards[0].getFace().equals(""6"") && that.cards[1].getFace().equals(""7"")  && that.cards[2].getFace().equals(""8"")
            && that.cards[3].getFace().equals(""9"") && that.cards[4].getFace().equals(""10""))
            c2size = 8;
        else if(that.cards[0].getFace().equals(""5"") && that.cards[1].getFace().equals(""6"")  && that.cards[2].getFace().equals(""7"")
            && that.cards[3].getFace().equals(""8"") && that.cards[4].getFace().equals(""9""))
            c2size = 7;
        else if(that.cards[0].getFace().equals(""4"") && that.cards[1].getFace().equals(""5"")  && that.cards[2].getFace().equals(""6"")
            && that.cards[3].getFace().equals(""7"") && that.cards[4].getFace().equals(""8""))
            c2size = 6;
        else if(that.cards[0].getFace().equals(""3"") && that.cards[1].getFace().equals(""4"")  && that.cards[2].getFace().equals(""5"")
            && that.cards[3].getFace().equals(""6"") && that.cards[4].getFace().equals(""7""))
            c2size = 5;
        else if(that.cards[0].getFace().equals(""2"") && that.cards[1].getFace().equals(""3"")  && that.cards[2].getFace().equals(""4"")
            && that.cards[3].getFace().equals(""5"") && that.cards[4].getFace().equals(""6""))
            c2size = 4;
        else if(that.cards[0].getFace().equals(""2"") && that.cards[1].getFace().equals(""3"")  && that.cards[2].getFace().equals(""4"")
            && that.cards[3].getFace().equals(""5"") && that.cards[4].getFace().equals(""A""))
            c2size = 3;
        //兩ㄆㄟ
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())  &&  that.cards[2].getFace().equals(that.cards[3].getFace()))
            c2size = 2;
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())  && that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 2;
        else if(that.cards[1].getFace().equals(that.cards[2].getFace())  &&  that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 2;
        //一ㄆㄟ
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())){
            c2size = 1;
            flag2 = 0;}
        else if(that.cards[1].getFace().equals(that.cards[2].getFace())){
            c2size = 1;
            flag2 = 1;}
        else if(that.cards[2].getFace().equals(that.cards[3].getFace())){
            c2size = 1;
            flag2 = 2;}
        else if(that.cards[3].getFace().equals(that.cards[4].getFace())){
            c2size = 1;
            flag2 = 3;}
        //散牌
        else c2size = 0;
        
        if(c1size>c2size) return +1;
        if(c1size<c2size) return -1;
        //c1size == c2size
        
        //都是葫蘆，直接比中間的大小
        if(c1size == 14) return this.cards[2].compareTo(that.cards[2]);
        //都是同花
        else if(c1size == 13) return this.cards[4].compareTo(that.cards[4]);
        //都是2ㄆㄟ
        else if(c1size == 2) return this.cards[3].compareTo(that.cards[3]);
        //都是1ㄆㄟ
        else if (c1size == 1) return this.cards[flag1].compareTo(that.cards[flag2]);
        //散牌
        else  return this.cards[4].compareTo(that.cards[4]);
        
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@c9e32c1117932ab487e44ce51eff83b9@"
"b03704074","0","0","0","@eaa392d85af5f4291e47f7ea46ffab8e@
import java.util.Arrays;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        
        Arrays.sort(cards);
        
        
    }

    // TODO
    public int compareTo(Hand that) {
        // complete this function so the Player can be sorted according to the cards he/she has.
        //Arrays.sort(this.cards);
        //Arrays.sort(that.cards);
        int c1size = -1;
        int c2size = -1;
        int flag1 = -1;
        int flag2 = -1;
        //葫蘆
        if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[1].getFace().equals(this.cards[2].getFace())  
            &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 14;
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[2].getFace().equals(this.cards[3].getFace())  
            &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 14;
        //同花
        else if(this.cards[0].getSuit().equals(this.cards[1].getSuit())  &&  this.cards[1].getSuit().equals(this.cards[2].getSuit())  
            &&  this.cards[2].getSuit().equals(this.cards[3].getSuit())  && this.cards[3].getSuit().equals(this.cards[4].getSuit()))
            c1size = 13;
        //順子
        else if(this.cards[0].getFace().equals(""10"") && this.cards[1].getFace().equals(""J"")  && this.cards[2].getFace().equals(""Q"")
            && this.cards[3].getFace().equals(""K"") && this.cards[4].getFace().equals(""A""))
            c1size = 12;
        else if(this.cards[0].getFace().equals(""9"") && this.cards[1].getFace().equals(""10"")  && this.cards[2].getFace().equals(""J"")
            && this.cards[3].getFace().equals(""Q"") && this.cards[4].getFace().equals(""K""))
            c1size = 11;
        else if(this.cards[0].getFace().equals(""8"") && this.cards[1].getFace().equals(""9"")  && this.cards[2].getFace().equals(""10"")
            && this.cards[3].getFace().equals(""J"") && this.cards[4].getFace().equals(""Q""))
            c1size = 10;
        else if(this.cards[0].getFace().equals(""7"") && this.cards[1].getFace().equals(""8"")  && this.cards[2].getFace().equals(""9"")
            && this.cards[3].getFace().equals(""10"") && this.cards[4].getFace().equals(""J""))
            c1size = 9;
        else if(this.cards[0].getFace().equals(""6"") && this.cards[1].getFace().equals(""7"")  && this.cards[2].getFace().equals(""8"")
            && this.cards[3].getFace().equals(""9"") && this.cards[4].getFace().equals(""10""))
            c1size = 8;
        else if(this.cards[0].getFace().equals(""7"") && this.cards[1].getFace().equals(""8"")  && this.cards[2].getFace().equals(""9"")
            && this.cards[3].getFace().equals(""10"") && this.cards[4].getFace().equals(""J""))
            c1size = 7;
        else if(this.cards[0].getFace().equals(""4"") && this.cards[1].getFace().equals(""5"")  && this.cards[2].getFace().equals(""6"")
            && this.cards[3].getFace().equals(""7"") && this.cards[4].getFace().equals(""8""))
            c1size = 6;
        else if(this.cards[0].getFace().equals(""3"") && this.cards[1].getFace().equals(""4"")  && this.cards[2].getFace().equals(""5"")
            && this.cards[3].getFace().equals(""6"") && this.cards[4].getFace().equals(""7""))
            c1size = 5;
        else if(this.cards[0].getFace().equals(""2"") && this.cards[1].getFace().equals(""3"")  && this.cards[2].getFace().equals(""4"")
            && this.cards[3].getFace().equals(""5"") && this.cards[4].getFace().equals(""6""))
            c1size = 4;
        else if(this.cards[0].getFace().equals(""2"") && this.cards[1].getFace().equals(""3"")  && this.cards[2].getFace().equals(""4"")
            && this.cards[3].getFace().equals(""5"") && this.cards[4].getFace().equals(""A""))
            c1size = 3;
        //兩ㄆㄟ
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[2].getFace().equals(this.cards[3].getFace()))
            c1size = 2;
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 2;
        else if(this.cards[1].getFace().equals(this.cards[2].getFace())  &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 2;
        //一ㄆㄟ
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())){
            c1size = 1;
            flag1 = 0;}
        else if(this.cards[1].getFace().equals(this.cards[2].getFace())){
            c1size = 1;
            flag1 = 1;}
        else if(this.cards[2].getFace().equals(this.cards[3].getFace())){
            c1size = 1;
            flag1 = 2;}
        else if(this.cards[3].getFace().equals(this.cards[4].getFace())){
            c1size = 1;
            flag1 = 3;}
        //散牌
        else c1size = 0;
        
        //葫蘆
        if(that.cards[0].getFace().equals(that.cards[1].getFace())  &&  that.cards[1].getFace().equals(that.cards[2].getFace())  
            &&  that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 14;
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())  &&  that.cards[2].getFace().equals(that.cards[3].getFace())  
            &&  that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 14;
        //同花
        else if(that.cards[0].getSuit().equals(that.cards[1].getSuit())  &&  that.cards[1].getSuit().equals(that.cards[2].getSuit())  
            &&  that.cards[2].getSuit().equals(that.cards[3].getSuit())  && that.cards[3].getSuit().equals(that.cards[4].getSuit()))
            c2size = 13;
        //順子
        else if(that.cards[0].getFace().equals(""10"") && that.cards[1].getFace().equals(""J"")  && that.cards[2].getFace().equals(""Q"")
            && that.cards[3].getFace().equals(""K"") && that.cards[4].getFace().equals(""A""))
            c2size = 12;
        else if(that.cards[0].getFace().equals(""9"") && that.cards[1].getFace().equals(""10"")  && that.cards[2].getFace().equals(""J"")
            && that.cards[3].getFace().equals(""Q"") && that.cards[4].getFace().equals(""K""))
            c2size = 11;
        else if(that.cards[0].getFace().equals(""8"") && that.cards[1].getFace().equals(""9"")  && that.cards[2].getFace().equals(""10"")
            && that.cards[3].getFace().equals(""J"") && that.cards[4].getFace().equals(""Q""))
            c2size = 10;
        else if(that.cards[0].getFace().equals(""7"") && that.cards[1].getFace().equals(""8"")  && that.cards[2].getFace().equals(""9"")
            && that.cards[3].getFace().equals(""10"") && that.cards[4].getFace().equals(""J""))
            c2size = 9;
        else if(that.cards[0].getFace().equals(""6"") && that.cards[1].getFace().equals(""7"")  && that.cards[2].getFace().equals(""8"")
            && that.cards[3].getFace().equals(""9"") && that.cards[4].getFace().equals(""10""))
            c2size = 8;
        else if(that.cards[0].getFace().equals(""5"") && that.cards[1].getFace().equals(""6"")  && that.cards[2].getFace().equals(""7"")
            && that.cards[3].getFace().equals(""8"") && that.cards[4].getFace().equals(""9""))
            c2size = 7;
        else if(that.cards[0].getFace().equals(""4"") && that.cards[1].getFace().equals(""5"")  && that.cards[2].getFace().equals(""6"")
            && that.cards[3].getFace().equals(""7"") && that.cards[4].getFace().equals(""8""))
            c2size = 6;
        else if(that.cards[0].getFace().equals(""3"") && that.cards[1].getFace().equals(""4"")  && that.cards[2].getFace().equals(""5"")
            && that.cards[3].getFace().equals(""6"") && that.cards[4].getFace().equals(""7""))
            c2size = 5;
        else if(that.cards[0].getFace().equals(""2"") && that.cards[1].getFace().equals(""3"")  && that.cards[2].getFace().equals(""4"")
            && that.cards[3].getFace().equals(""5"") && that.cards[4].getFace().equals(""6""))
            c2size = 4;
        else if(that.cards[0].getFace().equals(""2"") && that.cards[1].getFace().equals(""3"")  && that.cards[2].getFace().equals(""4"")
            && that.cards[3].getFace().equals(""5"") && that.cards[4].getFace().equals(""A""))
            c2size = 3;
        //兩ㄆㄟ
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())  &&  that.cards[2].getFace().equals(that.cards[3].getFace()))
            c2size = 2;
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())  && that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 2;
        else if(that.cards[1].getFace().equals(that.cards[2].getFace())  &&  that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 2;
        //一ㄆㄟ
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())){
            c2size = 1;
            flag2 = 0;}
        else if(that.cards[1].getFace().equals(that.cards[2].getFace())){
            c2size = 1;
            flag2 = 1;}
        else if(that.cards[2].getFace().equals(that.cards[3].getFace())){
            c2size = 1;
            flag2 = 2;}
        else if(that.cards[3].getFace().equals(that.cards[4].getFace())){
            c2size = 1;
            flag2 = 3;}
        //散牌
        else c2size = 0;
        
        if(c1size>c2size) return +1;
        if(c1size<c2size) return -1;
        //c1size == c2size
        
        //都是葫蘆，直接比中間的大小
        if(c1size == 14) return this.cards[2].compareTo(that.cards[2]);
        //都是同花
        else if(c1size == 13) return this.cards[4].compareTo(that.cards[4]);
        //都是2ㄆㄟ
        else if(c1size == 2) return this.cards[3].compareTo(that.cards[3]);
        //都是1ㄆㄟ
        else if (c1size == 1) return this.cards[flag1].compareTo(that.cards[flag2]);
        //散牌
        else  return this.cards[4].compareTo(that.cards[4]);
        
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@eaa392d85af5f4291e47f7ea46ffab8e@"
"r03525006","3","0.0966666666666667","105536","@e80c90bf874e3602f9ed4c49b469392a@import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards = new Card[5];

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        for (int i = 0; i < 5; i++)
            this.cards[i] = cards[i];
    }

    public int[] faceArray(Card[] card) {
        String[] faceArray = {""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"", ""A""};
        int[] ans = new int[5];
        int face = 0;
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 13; j++)
                if (card[i].getFace().equals(faceArray[j])) face = j+1;
            ans[i] = face;
        } return ans;
    }

    // TODO
    public int compareTo(Hand that) {
        // complete this function so the Player can be sorted according to the cards he/she has.

        int orderPlayer1 = 6;
        int orderPlayer2 = 6;
        // one pair
        if (this.isOnePair()) orderPlayer1 = 5;
        if (that.isOnePair()) orderPlayer2 = 5;
        // two pair
        if (this.isTwoPair()) orderPlayer1 = 4;
        if (that.isTwoPair()) orderPlayer2 = 4;
        // straight
        if (this.isStraight()) orderPlayer1 = 3;
        if (that.isStraight()) orderPlayer2 = 3;
        // flush
        if (this.isFlush()) orderPlayer1 = 2;
        if (that.isFlush()) orderPlayer2 = 2;
        // full house
        if (this.isFullHouse()) orderPlayer1 = 1;
        if (that.isFullHouse()) orderPlayer2 = 1;


        // compare
        if (orderPlayer1 < orderPlayer2) return 1;
        else if (orderPlayer1 > orderPlayer2) return -1;
        else {
            // full house
            if (orderPlayer1 == 1) {
                Card Player1 = this.getFullHouse();
                Card Player2 = that.getFullHouse();
                if (Player1.compareTo(Player2) == 1) return 1;
                else if (Player1.compareTo(Player2) == -1) return -1;
                else return 0;
            }
            // flush
            else if (orderPlayer1 == 2) {
                Card Player1 = this.getFlush();
                Card Player2 = that.getFlush();
                if (Player1.compareTo(Player2) == 1) return 1;
                else if (Player1.compareTo(Player2) == -1) return -1;
                else return 0;
            }
            // straight
            else if (orderPlayer1 == 3) {
                Card Player1 = this.getStraight();
                Card Player2 = that.getStraight();
                if (Player1.compareTo(Player2) == 1) return 1;
                else if (Player1.compareTo(Player2) == -1) return -1;
                else return 0;
            }
            // two pair
            else if (orderPlayer1 == 4) {
                Card Player1 = this.getTwoPair();
                Card Player2 = that.getTwoPair();
                if (Player1.compareTo(Player2) == 1) return 1;
                else if (Player1.compareTo(Player2) == -1) return -1;
                else return 0;
            }
            // one pair
            else if (orderPlayer1 == 5) {
                Card Player1 = this.getOnePair();
                Card Player2 = that.getOnePair();
                if (Player1.compareTo(Player2) == 1) return 1;
                else if (Player1.compareTo(Player2) == -1) return -1;
                else return 0;
            }
            // high card
            else if (orderPlayer1 == 6) {
                Card Player1 = this.getHighCard();
                Card Player2 = that.getHighCard();
                if (Player1.compareTo(Player2) == 1) return 1;
                else if (Player1.compareTo(Player2) == -1) return -1;
                else return 0;

            } else return 0;
        }
    }

    public boolean isFullHouse() {
        int count = 0;
        for (int i = 0; i < 4; i++)
            for (int j = i + 1; j < 5; j++)
                if (cards[i].getFace().equals(cards[j].getFace())) count++;
        return count == 4;
    }

    public boolean isFlush() {
        int count = 0;
        for (int i = 0; i < 4; i++)
            for (int j = i + 1; j < 5; j++)
                if (cards[i].getSuit().equals(cards[j].getSuit())) count++;
        return count == 10;
    }

    public boolean isStraight() {
        Card[] cardCopy = new Card[5];
        for (int i = 0; i < 5; i++)
            cardCopy[i] = cards[i];
        Arrays.sort(cardCopy);
        int[] faceNum = this.faceArray(cardCopy);
        int count = 0;
        if (cardCopy[4].getFace().equals(""A"") & cardCopy[0].getFace().equals(""2"")) {
            for (int i = 1; i < 4; i++)
                if (faceNum[i] == i+1) count++;
            return count == 3;
        } else {
            for (int i = 0; i < 4; i++)
                if (faceNum[i+1] - faceNum[i] == 1) count++;
            return count == 4;
        }
    }

    public boolean isTwoPair() {
        int count = 0;
        for (int i = 0; i < 4; i++)
            for (int j = i + 1; j < 5; j++)
                if (cards[i].getFace().equals(cards[j].getFace())) count++;
        return count == 2;
    }

    public boolean isOnePair() {
        int count = 0;
        for (int i = 0; i < 4; i++)
            for (int j = i + 1; j < 5; j++)
                if (cards[i].getFace().equals(cards[j].getFace())) count++;
        return count == 1;
    }

    private Card getFullHouse() {
        Card[] cardCopy = new Card[5];
        for (int i = 0; i < 5; i++)
            cardCopy[i] = cards[i];
        Arrays.sort(cardCopy);
        int face1Count = 0;
        String face1 = cardCopy[4].getFace();
        for (int i = 0; i < 4; i++)
            if (face1.equals(cardCopy[i].getFace())) face1Count++;
        if (face1Count == 1) return cardCopy[2];
        else return cardCopy[4];
    }

    private Card getFlush() {
        Card[] cardCopy = new Card[5];
        for (int i = 0; i < 5; i++)
            cardCopy[i] = cards[i];
        Arrays.sort(cardCopy);
        return cardCopy[4];
    }

    private Card getStraight() {
        Card[] cardCopy = new Card[5];
        for (int i = 0; i < 5; i++)
            cardCopy[i] = cards[i];
        Arrays.sort(cardCopy);
        if (cardCopy[4].getFace().equals(""A"") & cardCopy[0].getFace().equals(""2"")) return cardCopy[3];
        else return cardCopy[0];
    }

    private Card getTwoPair() {
        Card[] cardCopy = new Card[5];
        for (int i = 0; i < 5; i++)
            cardCopy[i] = cards[i];
        Arrays.sort(cardCopy);
        String face1 = cardCopy[4].getFace();
        int face1Count = 0;
        for (int i = 0; i < 4; i++)
            if (face1.equals(cardCopy[i].getFace())) face1Count++;
        if (face1Count == 1) return cardCopy[4];
        else return cardCopy[3];
    }

    private Card getOnePair() {
        Card[] cardCopy = new Card[5];
        for (int i = 0; i < 5; i++)
            cardCopy[i] = cards[i];
        int pairIndex1 = 0;
        int pairIndex2 = 0;
        for (int i = 0; i < 4; i++) {
            for (int j = i + 1; j < 5; j++) {
                if (cardCopy[i].getFace().equals(cardCopy[j].getFace())) {
                    pairIndex1 = i;
                    pairIndex2 = j;
                    break;
                }
            }
        }
        if (cardCopy[pairIndex1].compareTo(cardCopy[pairIndex2]) == 1) return cardCopy[pairIndex1];
        else return cardCopy[pairIndex2];
    }

    private Card getHighCard() {
        Card[] cardCopy = new Card[5];
        for (int i = 0; i < 5; i++)
            cardCopy[i] = cards[i];
        Arrays.sort(cardCopy);
        return cardCopy[4];
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@e80c90bf874e3602f9ed4c49b469392a@"
"b03704074","0","0","0","@11a8f475ce11573b035193f54c74e595@
import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        Arrays.sort(cards);
    }

    // TODO
    public int compareTo(Hand that) {
        Arrays.sort(this.cards);
        Arrays.sort(that.cards);
        int c1size = -1;
        int c2size = -1;
        int flag1 = -1;
        int flag2 = -1;
        //葫蘆
        if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[1].getFace().equals(this.cards[2].getFace())  
            &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 14;
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[2].getFace().equals(this.cards[3].getFace())  
            &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 14;
        //同花
        else if(this.cards[0].getSuit().equals(this.cards[1].getSuit())  &&  this.cards[1].getSuit().equals(this.cards[2].getSuit())  
            &&  this.cards[2].getSuit().equals(this.cards[3].getSuit())  && this.cards[3].getSuit().equals(this.cards[4].getSuit()))
            c1size = 13;
        //順子
        else if(this.cards[0].getFace().equals(""10"") && this.cards[1].getFace().equals(""J"")  && this.cards[2].getFace().equals(""Q"")
            && this.cards[3].getFace().equals(""K"") && this.cards[4].getFace().equals(""A""))
            c1size = 12;
        else if(this.cards[0].getFace().equals(""9"") && this.cards[1].getFace().equals(""10"")  && this.cards[2].getFace().equals(""J"")
            && this.cards[3].getFace().equals(""Q"") && this.cards[4].getFace().equals(""K""))
            c1size = 11;
        else if(this.cards[0].getFace().equals(""8"") && this.cards[1].getFace().equals(""9"")  && this.cards[2].getFace().equals(""10"")
            && this.cards[3].getFace().equals(""J"") && this.cards[4].getFace().equals(""Q""))
            c1size = 10;
        else if(this.cards[0].getFace().equals(""7"") && this.cards[1].getFace().equals(""8"")  && this.cards[2].getFace().equals(""9"")
            && this.cards[3].getFace().equals(""10"") && this.cards[4].getFace().equals(""J""))
            c1size = 9;
        else if(this.cards[0].getFace().equals(""6"") && this.cards[1].getFace().equals(""7"")  && this.cards[2].getFace().equals(""8"")
            && this.cards[3].getFace().equals(""9"") && this.cards[4].getFace().equals(""10""))
            c1size = 8;
        else if(this.cards[0].getFace().equals(""7"") && this.cards[1].getFace().equals(""8"")  && this.cards[2].getFace().equals(""9"")
            && this.cards[3].getFace().equals(""10"") && this.cards[4].getFace().equals(""J""))
            c1size = 7;
        else if(this.cards[0].getFace().equals(""4"") && this.cards[1].getFace().equals(""5"")  && this.cards[2].getFace().equals(""6"")
            && this.cards[3].getFace().equals(""7"") && this.cards[4].getFace().equals(""8""))
            c1size = 6;
        else if(this.cards[0].getFace().equals(""3"") && this.cards[1].getFace().equals(""4"")  && this.cards[2].getFace().equals(""5"")
            && this.cards[3].getFace().equals(""6"") && this.cards[4].getFace().equals(""7""))
            c1size = 5;
        else if(this.cards[0].getFace().equals(""2"") && this.cards[1].getFace().equals(""3"")  && this.cards[2].getFace().equals(""4"")
            && this.cards[3].getFace().equals(""5"") && this.cards[4].getFace().equals(""6""))
            c1size = 4;
        else if(this.cards[0].getFace().equals(""2"") && this.cards[1].getFace().equals(""3"")  && this.cards[2].getFace().equals(""4"")
            && this.cards[3].getFace().equals(""5"") && this.cards[4].getFace().equals(""A""))
            c1size = 3;
        //兩ㄆㄟ
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[2].getFace().equals(this.cards[3].getFace()))
            c1size = 2;
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 2;
        else if(this.cards[1].getFace().equals(this.cards[2].getFace())  &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 2;
        //一ㄆㄟ
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())){
            c1size = 1;
            flag1 = 0;}
        else if(this.cards[1].getFace().equals(this.cards[2].getFace())){
            c1size = 1;
            flag1 = 1;}
        else if(this.cards[2].getFace().equals(this.cards[3].getFace())){
            c1size = 1;
            flag1 = 2;}
        else if(this.cards[3].getFace().equals(this.cards[4].getFace())){
            c1size = 1;
            flag1 = 3;}
        //散牌
        else c1size = 0;
        
        //葫蘆
        if(that.cards[0].getFace().equals(that.cards[1].getFace())  &&  that.cards[1].getFace().equals(that.cards[2].getFace())  
            &&  that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 14;
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())  &&  that.cards[2].getFace().equals(that.cards[3].getFace())  
            &&  that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 14;
        //同花
        else if(that.cards[0].getSuit().equals(that.cards[1].getSuit())  &&  that.cards[1].getSuit().equals(that.cards[2].getSuit())  
            &&  that.cards[2].getSuit().equals(that.cards[3].getSuit())  && that.cards[3].getSuit().equals(that.cards[4].getSuit()))
            c2size = 13;
        //順子
        else if(that.cards[0].getFace().equals(""10"") && that.cards[1].getFace().equals(""J"")  && that.cards[2].getFace().equals(""Q"")
            && that.cards[3].getFace().equals(""K"") && that.cards[4].getFace().equals(""A""))
            c2size = 12;
        else if(that.cards[0].getFace().equals(""9"") && that.cards[1].getFace().equals(""10"")  && that.cards[2].getFace().equals(""J"")
            && that.cards[3].getFace().equals(""Q"") && that.cards[4].getFace().equals(""K""))
            c2size = 11;
        else if(that.cards[0].getFace().equals(""8"") && that.cards[1].getFace().equals(""9"")  && that.cards[2].getFace().equals(""10"")
            && that.cards[3].getFace().equals(""J"") && that.cards[4].getFace().equals(""Q""))
            c2size = 10;
        else if(that.cards[0].getFace().equals(""7"") && that.cards[1].getFace().equals(""8"")  && that.cards[2].getFace().equals(""9"")
            && that.cards[3].getFace().equals(""10"") && that.cards[4].getFace().equals(""J""))
            c2size = 9;
        else if(that.cards[0].getFace().equals(""6"") && that.cards[1].getFace().equals(""7"")  && that.cards[2].getFace().equals(""8"")
            && that.cards[3].getFace().equals(""9"") && that.cards[4].getFace().equals(""10""))
            c2size = 8;
        else if(that.cards[0].getFace().equals(""5"") && that.cards[1].getFace().equals(""6"")  && that.cards[2].getFace().equals(""7"")
            && that.cards[3].getFace().equals(""8"") && that.cards[4].getFace().equals(""9""))
            c2size = 7;
        else if(that.cards[0].getFace().equals(""4"") && that.cards[1].getFace().equals(""5"")  && that.cards[2].getFace().equals(""6"")
            && that.cards[3].getFace().equals(""7"") && that.cards[4].getFace().equals(""8""))
            c2size = 6;
        else if(that.cards[0].getFace().equals(""3"") && that.cards[1].getFace().equals(""4"")  && that.cards[2].getFace().equals(""5"")
            && that.cards[3].getFace().equals(""6"") && that.cards[4].getFace().equals(""7""))
            c2size = 5;
        else if(that.cards[0].getFace().equals(""2"") && that.cards[1].getFace().equals(""3"")  && that.cards[2].getFace().equals(""4"")
            && that.cards[3].getFace().equals(""5"") && that.cards[4].getFace().equals(""6""))
            c2size = 4;
        else if(that.cards[0].getFace().equals(""2"") && that.cards[1].getFace().equals(""3"")  && that.cards[2].getFace().equals(""4"")
            && that.cards[3].getFace().equals(""5"") && that.cards[4].getFace().equals(""A""))
            c2size = 3;
        //兩ㄆㄟ
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())  &&  that.cards[2].getFace().equals(that.cards[3].getFace()))
            c2size = 2;
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())  && that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 2;
        else if(that.cards[1].getFace().equals(that.cards[2].getFace())  &&  that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 2;
        //一ㄆㄟ
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())){
            c2size = 1;
            flag2 = 0;}
        else if(that.cards[1].getFace().equals(that.cards[2].getFace())){
            c2size = 1;
            flag2 = 1;}
        else if(that.cards[2].getFace().equals(that.cards[3].getFace())){
            c2size = 1;
            flag2 = 2;}
        else if(that.cards[3].getFace().equals(that.cards[4].getFace())){
            c2size = 1;
            flag2 = 3;}
        //散牌
        else c2size = 0;
        
        if(c1size>c2size) return +1;
        if(c1size<c2size) return -1;
        //c1size == c2size
        
        //都是葫蘆，直接比中間的大小
        if(c1size == 14) return this.cards[2].compareTo(that.cards[2]);
        //都是同花
        else if(c1size == 13) return this.cards[4].compareTo(that.cards[4]);
        //都是2ㄆㄟ
        else if(c1size == 2) return this.cards[3].compareTo(that.cards[3]);
        //都是1ㄆㄟ
        else if (c1size == 1) return this.cards[flag1].compareTo(that.cards[flag2]);
        //散牌
        else  return this.cards[4].compareTo(that.cards[4]);
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@11a8f475ce11573b035193f54c74e595@"
"b03704074","0","0","0","@1a64b7847e518cd45d6a88501628b066@
import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        
        
    }

    // TODO
    public int compareTo(Hand that) {
        Arrays.sort(this.cards);
        Arrays.sort(that.cards);
        int c1size = -1;
        int c2size = -1;
        int flag1 = -1;
        int flag2 = -1;
        //葫蘆
        if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[1].getFace().equals(this.cards[2].getFace())  
            &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 14;
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[2].getFace().equals(this.cards[3].getFace())  
            &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 14;
        //同花
        else if(this.cards[0].getSuit().equals(this.cards[1].getSuit())  &&  this.cards[1].getSuit().equals(this.cards[2].getSuit())  
            &&  this.cards[2].getSuit().equals(this.cards[3].getSuit())  && this.cards[3].getSuit().equals(this.cards[4].getSuit()))
            c1size = 13;
        //順子
        else if(this.cards[0].getFace().equals(""10"") && this.cards[1].getFace().equals(""J"")  && this.cards[2].getFace().equals(""Q"")
            && this.cards[3].getFace().equals(""K"") && this.cards[4].getFace().equals(""A""))
            c1size = 12;
        else if(this.cards[0].getFace().equals(""9"") && this.cards[1].getFace().equals(""10"")  && this.cards[2].getFace().equals(""J"")
            && this.cards[3].getFace().equals(""Q"") && this.cards[4].getFace().equals(""K""))
            c1size = 11;
        else if(this.cards[0].getFace().equals(""8"") && this.cards[1].getFace().equals(""9"")  && this.cards[2].getFace().equals(""10"")
            && this.cards[3].getFace().equals(""J"") && this.cards[4].getFace().equals(""Q""))
            c1size = 10;
        else if(this.cards[0].getFace().equals(""7"") && this.cards[1].getFace().equals(""8"")  && this.cards[2].getFace().equals(""9"")
            && this.cards[3].getFace().equals(""10"") && this.cards[4].getFace().equals(""J""))
            c1size = 9;
        else if(this.cards[0].getFace().equals(""6"") && this.cards[1].getFace().equals(""7"")  && this.cards[2].getFace().equals(""8"")
            && this.cards[3].getFace().equals(""9"") && this.cards[4].getFace().equals(""10""))
            c1size = 8;
        else if(this.cards[0].getFace().equals(""7"") && this.cards[1].getFace().equals(""8"")  && this.cards[2].getFace().equals(""9"")
            && this.cards[3].getFace().equals(""10"") && this.cards[4].getFace().equals(""J""))
            c1size = 7;
        else if(this.cards[0].getFace().equals(""4"") && this.cards[1].getFace().equals(""5"")  && this.cards[2].getFace().equals(""6"")
            && this.cards[3].getFace().equals(""7"") && this.cards[4].getFace().equals(""8""))
            c1size = 6;
        else if(this.cards[0].getFace().equals(""3"") && this.cards[1].getFace().equals(""4"")  && this.cards[2].getFace().equals(""5"")
            && this.cards[3].getFace().equals(""6"") && this.cards[4].getFace().equals(""7""))
            c1size = 5;
        else if(this.cards[0].getFace().equals(""2"") && this.cards[1].getFace().equals(""3"")  && this.cards[2].getFace().equals(""4"")
            && this.cards[3].getFace().equals(""5"") && this.cards[4].getFace().equals(""6""))
            c1size = 4;
        else if(this.cards[0].getFace().equals(""2"") && this.cards[1].getFace().equals(""3"")  && this.cards[2].getFace().equals(""4"")
            && this.cards[3].getFace().equals(""5"") && this.cards[4].getFace().equals(""A""))
            c1size = 3;
        //兩ㄆㄟ
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[2].getFace().equals(this.cards[3].getFace()))
            c1size = 2;
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 2;
        else if(this.cards[1].getFace().equals(this.cards[2].getFace())  &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 2;
        //一ㄆㄟ
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())){
            c1size = 1;
            flag1 = 0;}
        else if(this.cards[1].getFace().equals(this.cards[2].getFace())){
            c1size = 1;
            flag1 = 1;}
        else if(this.cards[2].getFace().equals(this.cards[3].getFace())){
            c1size = 1;
            flag1 = 2;}
        else if(this.cards[3].getFace().equals(this.cards[4].getFace())){
            c1size = 1;
            flag1 = 3;}
        //散牌
        else c1size = 0;
        
        //葫蘆
        if(that.cards[0].getFace().equals(that.cards[1].getFace())  &&  that.cards[1].getFace().equals(that.cards[2].getFace())  
            &&  that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 14;
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())  &&  that.cards[2].getFace().equals(that.cards[3].getFace())  
            &&  that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 14;
        //同花
        else if(that.cards[0].getSuit().equals(that.cards[1].getSuit())  &&  that.cards[1].getSuit().equals(that.cards[2].getSuit())  
            &&  that.cards[2].getSuit().equals(that.cards[3].getSuit())  && that.cards[3].getSuit().equals(that.cards[4].getSuit()))
            c2size = 13;
        //順子
        else if(that.cards[0].getFace().equals(""10"") && that.cards[1].getFace().equals(""J"")  && that.cards[2].getFace().equals(""Q"")
            && that.cards[3].getFace().equals(""K"") && that.cards[4].getFace().equals(""A""))
            c2size = 12;
        else if(that.cards[0].getFace().equals(""9"") && that.cards[1].getFace().equals(""10"")  && that.cards[2].getFace().equals(""J"")
            && that.cards[3].getFace().equals(""Q"") && that.cards[4].getFace().equals(""K""))
            c2size = 11;
        else if(that.cards[0].getFace().equals(""8"") && that.cards[1].getFace().equals(""9"")  && that.cards[2].getFace().equals(""10"")
            && that.cards[3].getFace().equals(""J"") && that.cards[4].getFace().equals(""Q""))
            c2size = 10;
        else if(that.cards[0].getFace().equals(""7"") && that.cards[1].getFace().equals(""8"")  && that.cards[2].getFace().equals(""9"")
            && that.cards[3].getFace().equals(""10"") && that.cards[4].getFace().equals(""J""))
            c2size = 9;
        else if(that.cards[0].getFace().equals(""6"") && that.cards[1].getFace().equals(""7"")  && that.cards[2].getFace().equals(""8"")
            && that.cards[3].getFace().equals(""9"") && that.cards[4].getFace().equals(""10""))
            c2size = 8;
        else if(that.cards[0].getFace().equals(""5"") && that.cards[1].getFace().equals(""6"")  && that.cards[2].getFace().equals(""7"")
            && that.cards[3].getFace().equals(""8"") && that.cards[4].getFace().equals(""9""))
            c2size = 7;
        else if(that.cards[0].getFace().equals(""4"") && that.cards[1].getFace().equals(""5"")  && that.cards[2].getFace().equals(""6"")
            && that.cards[3].getFace().equals(""7"") && that.cards[4].getFace().equals(""8""))
            c2size = 6;
        else if(that.cards[0].getFace().equals(""3"") && that.cards[1].getFace().equals(""4"")  && that.cards[2].getFace().equals(""5"")
            && that.cards[3].getFace().equals(""6"") && that.cards[4].getFace().equals(""7""))
            c2size = 5;
        else if(that.cards[0].getFace().equals(""2"") && that.cards[1].getFace().equals(""3"")  && that.cards[2].getFace().equals(""4"")
            && that.cards[3].getFace().equals(""5"") && that.cards[4].getFace().equals(""6""))
            c2size = 4;
        else if(that.cards[0].getFace().equals(""2"") && that.cards[1].getFace().equals(""3"")  && that.cards[2].getFace().equals(""4"")
            && that.cards[3].getFace().equals(""5"") && that.cards[4].getFace().equals(""A""))
            c2size = 3;
        //兩ㄆㄟ
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())  &&  that.cards[2].getFace().equals(that.cards[3].getFace()))
            c2size = 2;
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())  && that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 2;
        else if(that.cards[1].getFace().equals(that.cards[2].getFace())  &&  that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 2;
        //一ㄆㄟ
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())){
            c2size = 1;
            flag2 = 0;}
        else if(that.cards[1].getFace().equals(that.cards[2].getFace())){
            c2size = 1;
            flag2 = 1;}
        else if(that.cards[2].getFace().equals(that.cards[3].getFace())){
            c2size = 1;
            flag2 = 2;}
        else if(that.cards[3].getFace().equals(that.cards[4].getFace())){
            c2size = 1;
            flag2 = 3;}
        //散牌
        else c2size = 0;
        
        if(c1size>c2size) return +1;
        if(c1size<c2size) return -1;
        //c1size == c2size
        
        //都是葫蘆，直接比中間的大小
        if(c1size == 14) return this.cards[2].compareTo(that.cards[2]);
        //都是同花
        else if(c1size == 13) return this.cards[4].compareTo(that.cards[4]);
        //都是2ㄆㄟ
        else if(c1size == 2) return this.cards[3].compareTo(that.cards[3]);
        //都是1ㄆㄟ
        else if (c1size == 1) return this.cards[flag1].compareTo(that.cards[flag2]);
        //散牌
        else  return this.cards[4].compareTo(that.cards[4]);
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@1a64b7847e518cd45d6a88501628b066@"
"b03704074","0","0","0","@432fccb594140c381014e92563806805@
import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        cards = new Card[5] ;
        Arrays.sort(cards);
        
    }

    // TODO
    public int compareTo(Hand that) {
        Arrays.sort(this.cards);
        Arrays.sort(that.cards);
        int c1size = -1;
        int c2size = -1;
        int flag1 = -1;
        int flag2 = -1;
        //葫蘆
        if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[1].getFace().equals(this.cards[2].getFace())  
            &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 14;
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[2].getFace().equals(this.cards[3].getFace())  
            &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 14;
        //同花
        else if(this.cards[0].getSuit().equals(this.cards[1].getSuit())  &&  this.cards[1].getSuit().equals(this.cards[2].getSuit())  
            &&  this.cards[2].getSuit().equals(this.cards[3].getSuit())  && this.cards[3].getSuit().equals(this.cards[4].getSuit()))
            c1size = 13;
        //順子
        else if(this.cards[0].getFace().equals(""10"") && this.cards[1].getFace().equals(""J"")  && this.cards[2].getFace().equals(""Q"")
            && this.cards[3].getFace().equals(""K"") && this.cards[4].getFace().equals(""A""))
            c1size = 12;
        else if(this.cards[0].getFace().equals(""9"") && this.cards[1].getFace().equals(""10"")  && this.cards[2].getFace().equals(""J"")
            && this.cards[3].getFace().equals(""Q"") && this.cards[4].getFace().equals(""K""))
            c1size = 11;
        else if(this.cards[0].getFace().equals(""8"") && this.cards[1].getFace().equals(""9"")  && this.cards[2].getFace().equals(""10"")
            && this.cards[3].getFace().equals(""J"") && this.cards[4].getFace().equals(""Q""))
            c1size = 10;
        else if(this.cards[0].getFace().equals(""7"") && this.cards[1].getFace().equals(""8"")  && this.cards[2].getFace().equals(""9"")
            && this.cards[3].getFace().equals(""10"") && this.cards[4].getFace().equals(""J""))
            c1size = 9;
        else if(this.cards[0].getFace().equals(""6"") && this.cards[1].getFace().equals(""7"")  && this.cards[2].getFace().equals(""8"")
            && this.cards[3].getFace().equals(""9"") && this.cards[4].getFace().equals(""10""))
            c1size = 8;
        else if(this.cards[0].getFace().equals(""7"") && this.cards[1].getFace().equals(""8"")  && this.cards[2].getFace().equals(""9"")
            && this.cards[3].getFace().equals(""10"") && this.cards[4].getFace().equals(""J""))
            c1size = 7;
        else if(this.cards[0].getFace().equals(""4"") && this.cards[1].getFace().equals(""5"")  && this.cards[2].getFace().equals(""6"")
            && this.cards[3].getFace().equals(""7"") && this.cards[4].getFace().equals(""8""))
            c1size = 6;
        else if(this.cards[0].getFace().equals(""3"") && this.cards[1].getFace().equals(""4"")  && this.cards[2].getFace().equals(""5"")
            && this.cards[3].getFace().equals(""6"") && this.cards[4].getFace().equals(""7""))
            c1size = 5;
        else if(this.cards[0].getFace().equals(""2"") && this.cards[1].getFace().equals(""3"")  && this.cards[2].getFace().equals(""4"")
            && this.cards[3].getFace().equals(""5"") && this.cards[4].getFace().equals(""6""))
            c1size = 4;
        else if(this.cards[0].getFace().equals(""2"") && this.cards[1].getFace().equals(""3"")  && this.cards[2].getFace().equals(""4"")
            && this.cards[3].getFace().equals(""5"") && this.cards[4].getFace().equals(""A""))
            c1size = 3;
        //兩ㄆㄟ
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[2].getFace().equals(this.cards[3].getFace()))
            c1size = 2;
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 2;
        else if(this.cards[1].getFace().equals(this.cards[2].getFace())  &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 2;
        //一ㄆㄟ
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())){
            c1size = 1;
            flag1 = 0;}
        else if(this.cards[1].getFace().equals(this.cards[2].getFace())){
            c1size = 1;
            flag1 = 1;}
        else if(this.cards[2].getFace().equals(this.cards[3].getFace())){
            c1size = 1;
            flag1 = 2;}
        else if(this.cards[3].getFace().equals(this.cards[4].getFace())){
            c1size = 1;
            flag1 = 3;}
        //散牌
        else c1size = 0;
        
        //葫蘆
        if(that.cards[0].getFace().equals(that.cards[1].getFace())  &&  that.cards[1].getFace().equals(that.cards[2].getFace())  
            &&  that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 14;
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())  &&  that.cards[2].getFace().equals(that.cards[3].getFace())  
            &&  that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 14;
        //同花
        else if(that.cards[0].getSuit().equals(that.cards[1].getSuit())  &&  that.cards[1].getSuit().equals(that.cards[2].getSuit())  
            &&  that.cards[2].getSuit().equals(that.cards[3].getSuit())  && that.cards[3].getSuit().equals(that.cards[4].getSuit()))
            c2size = 13;
        //順子
        else if(that.cards[0].getFace().equals(""10"") && that.cards[1].getFace().equals(""J"")  && that.cards[2].getFace().equals(""Q"")
            && that.cards[3].getFace().equals(""K"") && that.cards[4].getFace().equals(""A""))
            c2size = 12;
        else if(that.cards[0].getFace().equals(""9"") && that.cards[1].getFace().equals(""10"")  && that.cards[2].getFace().equals(""J"")
            && that.cards[3].getFace().equals(""Q"") && that.cards[4].getFace().equals(""K""))
            c2size = 11;
        else if(that.cards[0].getFace().equals(""8"") && that.cards[1].getFace().equals(""9"")  && that.cards[2].getFace().equals(""10"")
            && that.cards[3].getFace().equals(""J"") && that.cards[4].getFace().equals(""Q""))
            c2size = 10;
        else if(that.cards[0].getFace().equals(""7"") && that.cards[1].getFace().equals(""8"")  && that.cards[2].getFace().equals(""9"")
            && that.cards[3].getFace().equals(""10"") && that.cards[4].getFace().equals(""J""))
            c2size = 9;
        else if(that.cards[0].getFace().equals(""6"") && that.cards[1].getFace().equals(""7"")  && that.cards[2].getFace().equals(""8"")
            && that.cards[3].getFace().equals(""9"") && that.cards[4].getFace().equals(""10""))
            c2size = 8;
        else if(that.cards[0].getFace().equals(""5"") && that.cards[1].getFace().equals(""6"")  && that.cards[2].getFace().equals(""7"")
            && that.cards[3].getFace().equals(""8"") && that.cards[4].getFace().equals(""9""))
            c2size = 7;
        else if(that.cards[0].getFace().equals(""4"") && that.cards[1].getFace().equals(""5"")  && that.cards[2].getFace().equals(""6"")
            && that.cards[3].getFace().equals(""7"") && that.cards[4].getFace().equals(""8""))
            c2size = 6;
        else if(that.cards[0].getFace().equals(""3"") && that.cards[1].getFace().equals(""4"")  && that.cards[2].getFace().equals(""5"")
            && that.cards[3].getFace().equals(""6"") && that.cards[4].getFace().equals(""7""))
            c2size = 5;
        else if(that.cards[0].getFace().equals(""2"") && that.cards[1].getFace().equals(""3"")  && that.cards[2].getFace().equals(""4"")
            && that.cards[3].getFace().equals(""5"") && that.cards[4].getFace().equals(""6""))
            c2size = 4;
        else if(that.cards[0].getFace().equals(""2"") && that.cards[1].getFace().equals(""3"")  && that.cards[2].getFace().equals(""4"")
            && that.cards[3].getFace().equals(""5"") && that.cards[4].getFace().equals(""A""))
            c2size = 3;
        //兩ㄆㄟ
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())  &&  that.cards[2].getFace().equals(that.cards[3].getFace()))
            c2size = 2;
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())  && that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 2;
        else if(that.cards[1].getFace().equals(that.cards[2].getFace())  &&  that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 2;
        //一ㄆㄟ
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())){
            c2size = 1;
            flag2 = 0;}
        else if(that.cards[1].getFace().equals(that.cards[2].getFace())){
            c2size = 1;
            flag2 = 1;}
        else if(that.cards[2].getFace().equals(that.cards[3].getFace())){
            c2size = 1;
            flag2 = 2;}
        else if(that.cards[3].getFace().equals(that.cards[4].getFace())){
            c2size = 1;
            flag2 = 3;}
        //散牌
        else c2size = 0;
        
        if(c1size>c2size) return +1;
        if(c1size<c2size) return -1;
        //c1size == c2size
        
        //都是葫蘆，直接比中間的大小
        if(c1size == 14) return this.cards[2].compareTo(that.cards[2]);
        //都是同花
        else if(c1size == 13) return this.cards[4].compareTo(that.cards[4]);
        //都是2ㄆㄟ
        else if(c1size == 2) return this.cards[3].compareTo(that.cards[3]);
        //都是1ㄆㄟ
        else if (c1size == 1) return this.cards[flag1].compareTo(that.cards[flag2]);
        //散牌
        else  return this.cards[4].compareTo(that.cards[4]);
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@432fccb594140c381014e92563806805@"
"b03704074","3","0.09","100144","@131c3e450c937c96667d609f102cbae9@
import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
        
    }

    // TODO
    public int compareTo(Hand that) {
        Arrays.sort(this.cards);
        Arrays.sort(that.cards);
        int c1size = -1;
        int c2size = -1;
        int flag1 = -1;
        int flag2 = -1;
        //葫蘆
        if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[1].getFace().equals(this.cards[2].getFace())  
            &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 14;
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[2].getFace().equals(this.cards[3].getFace())  
            &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 14;
        //同花
        else if(this.cards[0].getSuit().equals(this.cards[1].getSuit())  &&  this.cards[1].getSuit().equals(this.cards[2].getSuit())  
            &&  this.cards[2].getSuit().equals(this.cards[3].getSuit())  && this.cards[3].getSuit().equals(this.cards[4].getSuit()))
            c1size = 13;
        //順子
        else if(this.cards[0].getFace().equals(""10"") && this.cards[1].getFace().equals(""J"")  && this.cards[2].getFace().equals(""Q"")
            && this.cards[3].getFace().equals(""K"") && this.cards[4].getFace().equals(""A""))
            c1size = 12;
        else if(this.cards[0].getFace().equals(""9"") && this.cards[1].getFace().equals(""10"")  && this.cards[2].getFace().equals(""J"")
            && this.cards[3].getFace().equals(""Q"") && this.cards[4].getFace().equals(""K""))
            c1size = 11;
        else if(this.cards[0].getFace().equals(""8"") && this.cards[1].getFace().equals(""9"")  && this.cards[2].getFace().equals(""10"")
            && this.cards[3].getFace().equals(""J"") && this.cards[4].getFace().equals(""Q""))
            c1size = 10;
        else if(this.cards[0].getFace().equals(""7"") && this.cards[1].getFace().equals(""8"")  && this.cards[2].getFace().equals(""9"")
            && this.cards[3].getFace().equals(""10"") && this.cards[4].getFace().equals(""J""))
            c1size = 9;
        else if(this.cards[0].getFace().equals(""6"") && this.cards[1].getFace().equals(""7"")  && this.cards[2].getFace().equals(""8"")
            && this.cards[3].getFace().equals(""9"") && this.cards[4].getFace().equals(""10""))
            c1size = 8;
        else if(this.cards[0].getFace().equals(""7"") && this.cards[1].getFace().equals(""8"")  && this.cards[2].getFace().equals(""9"")
            && this.cards[3].getFace().equals(""10"") && this.cards[4].getFace().equals(""J""))
            c1size = 7;
        else if(this.cards[0].getFace().equals(""4"") && this.cards[1].getFace().equals(""5"")  && this.cards[2].getFace().equals(""6"")
            && this.cards[3].getFace().equals(""7"") && this.cards[4].getFace().equals(""8""))
            c1size = 6;
        else if(this.cards[0].getFace().equals(""3"") && this.cards[1].getFace().equals(""4"")  && this.cards[2].getFace().equals(""5"")
            && this.cards[3].getFace().equals(""6"") && this.cards[4].getFace().equals(""7""))
            c1size = 5;
        else if(this.cards[0].getFace().equals(""2"") && this.cards[1].getFace().equals(""3"")  && this.cards[2].getFace().equals(""4"")
            && this.cards[3].getFace().equals(""5"") && this.cards[4].getFace().equals(""6""))
            c1size = 4;
        else if(this.cards[0].getFace().equals(""2"") && this.cards[1].getFace().equals(""3"")  && this.cards[2].getFace().equals(""4"")
            && this.cards[3].getFace().equals(""5"") && this.cards[4].getFace().equals(""A""))
            c1size = 3;
        //兩ㄆㄟ
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[2].getFace().equals(this.cards[3].getFace()))
            c1size = 2;
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())  &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 2;
        else if(this.cards[1].getFace().equals(this.cards[2].getFace())  &&  this.cards[3].getFace().equals(this.cards[4].getFace()))
            c1size = 2;
        //一ㄆㄟ
        else if(this.cards[0].getFace().equals(this.cards[1].getFace())){
            c1size = 1;
            flag1 = 0;}
        else if(this.cards[1].getFace().equals(this.cards[2].getFace())){
            c1size = 1;
            flag1 = 1;}
        else if(this.cards[2].getFace().equals(this.cards[3].getFace())){
            c1size = 1;
            flag1 = 2;}
        else if(this.cards[3].getFace().equals(this.cards[4].getFace())){
            c1size = 1;
            flag1 = 3;}
        //散牌
        else c1size = 0;
        
        //葫蘆
        if(that.cards[0].getFace().equals(that.cards[1].getFace())  &&  that.cards[1].getFace().equals(that.cards[2].getFace())  
            &&  that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 14;
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())  &&  that.cards[2].getFace().equals(that.cards[3].getFace())  
            &&  that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 14;
        //同花
        else if(that.cards[0].getSuit().equals(that.cards[1].getSuit())  &&  that.cards[1].getSuit().equals(that.cards[2].getSuit())  
            &&  that.cards[2].getSuit().equals(that.cards[3].getSuit())  && that.cards[3].getSuit().equals(that.cards[4].getSuit()))
            c2size = 13;
        //順子
        else if(that.cards[0].getFace().equals(""10"") && that.cards[1].getFace().equals(""J"")  && that.cards[2].getFace().equals(""Q"")
            && that.cards[3].getFace().equals(""K"") && that.cards[4].getFace().equals(""A""))
            c2size = 12;
        else if(that.cards[0].getFace().equals(""9"") && that.cards[1].getFace().equals(""10"")  && that.cards[2].getFace().equals(""J"")
            && that.cards[3].getFace().equals(""Q"") && that.cards[4].getFace().equals(""K""))
            c2size = 11;
        else if(that.cards[0].getFace().equals(""8"") && that.cards[1].getFace().equals(""9"")  && that.cards[2].getFace().equals(""10"")
            && that.cards[3].getFace().equals(""J"") && that.cards[4].getFace().equals(""Q""))
            c2size = 10;
        else if(that.cards[0].getFace().equals(""7"") && that.cards[1].getFace().equals(""8"")  && that.cards[2].getFace().equals(""9"")
            && that.cards[3].getFace().equals(""10"") && that.cards[4].getFace().equals(""J""))
            c2size = 9;
        else if(that.cards[0].getFace().equals(""6"") && that.cards[1].getFace().equals(""7"")  && that.cards[2].getFace().equals(""8"")
            && that.cards[3].getFace().equals(""9"") && that.cards[4].getFace().equals(""10""))
            c2size = 8;
        else if(that.cards[0].getFace().equals(""5"") && that.cards[1].getFace().equals(""6"")  && that.cards[2].getFace().equals(""7"")
            && that.cards[3].getFace().equals(""8"") && that.cards[4].getFace().equals(""9""))
            c2size = 7;
        else if(that.cards[0].getFace().equals(""4"") && that.cards[1].getFace().equals(""5"")  && that.cards[2].getFace().equals(""6"")
            && that.cards[3].getFace().equals(""7"") && that.cards[4].getFace().equals(""8""))
            c2size = 6;
        else if(that.cards[0].getFace().equals(""3"") && that.cards[1].getFace().equals(""4"")  && that.cards[2].getFace().equals(""5"")
            && that.cards[3].getFace().equals(""6"") && that.cards[4].getFace().equals(""7""))
            c2size = 5;
        else if(that.cards[0].getFace().equals(""2"") && that.cards[1].getFace().equals(""3"")  && that.cards[2].getFace().equals(""4"")
            && that.cards[3].getFace().equals(""5"") && that.cards[4].getFace().equals(""6""))
            c2size = 4;
        else if(that.cards[0].getFace().equals(""2"") && that.cards[1].getFace().equals(""3"")  && that.cards[2].getFace().equals(""4"")
            && that.cards[3].getFace().equals(""5"") && that.cards[4].getFace().equals(""A""))
            c2size = 3;
        //兩ㄆㄟ
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())  &&  that.cards[2].getFace().equals(that.cards[3].getFace()))
            c2size = 2;
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())  && that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 2;
        else if(that.cards[1].getFace().equals(that.cards[2].getFace())  &&  that.cards[3].getFace().equals(that.cards[4].getFace()))
            c2size = 2;
        //一ㄆㄟ
        else if(that.cards[0].getFace().equals(that.cards[1].getFace())){
            c2size = 1;
            flag2 = 0;}
        else if(that.cards[1].getFace().equals(that.cards[2].getFace())){
            c2size = 1;
            flag2 = 1;}
        else if(that.cards[2].getFace().equals(that.cards[3].getFace())){
            c2size = 1;
            flag2 = 2;}
        else if(that.cards[3].getFace().equals(that.cards[4].getFace())){
            c2size = 1;
            flag2 = 3;}
        //散牌
        else c2size = 0;
        
        if(c1size>c2size) return +1;
        if(c1size<c2size) return -1;
        //c1size == c2size
        
        //都是葫蘆，直接比中間的大小
        if(c1size == 14) return this.cards[2].compareTo(that.cards[2]);
        //都是同花
        else if(c1size == 13) return this.cards[4].compareTo(that.cards[4]);
        //都是2ㄆㄟ
        else if(c1size == 2) return this.cards[3].compareTo(that.cards[3]);
        //都是1ㄆㄟ
        else if (c1size == 1) return this.cards[flag1].compareTo(that.cards[flag2]);
        //散牌
        else  return this.cards[4].compareTo(that.cards[4]);
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@131c3e450c937c96667d609f102cbae9@"
"r04631004","3","0.09","105168","@0482d7c296c41b19b44ac62a74066575@import java.util.Arrays;

/**
 *
 * @author Po-Lin
 */
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards;

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards) {
        this.cards=cards;
    }

    // TODO
    public int compareTo(Hand that) {
        Arrays.sort(this.cards);
        Arrays.sort(that.cards);
        //檢查full house
        if (this.cards[0].getFace().equals(this.cards[1].getFace()) && this.cards[0].getFace().equals(this.cards[2].getFace())) { //若this是前三張相同
            if (that.cards[0].getFace().equals(that.cards[1].getFace()) && that.cards[0].getFace().equals(that.cards[2].getFace())) { //判斷that是否也有full house
                if (this.cards[0].compareTo(that.cards[0]) == 1) {
                    return 1;
                } else {
                    return -1;
                }
            } else if (that.cards[1].getFace().equals(that.cards[2].getFace()) && that.cards[1].getFace().equals(that.cards[3].getFace())) {
                if (this.cards[0].compareTo(that.cards[2]) == 1) {
                    return 1;
                } else {
                    return -1;
                }
            } else if (that.cards[2].getFace().equals(that.cards[3].getFace()) && that.cards[2].getFace().equals(that.cards[4].getFace())) {
                if (this.cards[0].compareTo(that.cards[2]) == 1) {
                    return 1;
                } else {
                    return -1;
                }
            } else {  //表示that不是full house
                return 1;
            }
        } else if (this.cards[1].getFace().equals(this.cards[2].getFace()) && this.cards[1].getFace().equals(this.cards[3].getFace())) { //若this是中間三張相同
            if (that.cards[0].getFace().equals(that.cards[1].getFace()) && that.cards[0].getFace().equals(that.cards[2].getFace())) { //判斷that是否也有full house
                if (this.cards[1].compareTo(that.cards[0]) == 1) {
                    return 1;
                } else {
                    return -1;
                }
            } else if (that.cards[1].getFace().equals(that.cards[2].getFace()) && that.cards[1].getFace().equals(that.cards[3].getFace())) {
                if (this.cards[1].compareTo(that.cards[2]) == 1) {
                    return 1;
                } else {
                    return -1;
                }
            } else if (that.cards[2].getFace().equals(that.cards[3].getFace()) && that.cards[2].getFace().equals(that.cards[4].getFace())) {
                if (this.cards[1].compareTo(that.cards[2]) == 1) {
                    return 1;
                } else {
                    return -1;
                }
            } else {  //表示that不是full house
                return 1;
            }
        } else if (this.cards[2].getFace().equals(this.cards[3].getFace()) && this.cards[2].getFace().equals(this.cards[4].getFace())) { //若this是後三張相同
            if (that.cards[0].getFace().equals(that.cards[1].getFace()) && that.cards[0].getFace().equals(that.cards[2].getFace())) { //判斷that是否也有full house
                if (this.cards[2].compareTo(that.cards[0]) == 1) {
                    return 1;
                } else {
                    return -1;
                }
            } else if (that.cards[1].getFace().equals(that.cards[2].getFace()) && that.cards[1].getFace().equals(that.cards[3].getFace())) {
                if (this.cards[2].compareTo(that.cards[2]) == 1) {
                    return 1;
                } else {
                    return -1;
                }
            } else if (that.cards[2].getFace().equals(that.cards[3].getFace()) && that.cards[2].getFace().equals(that.cards[4].getFace())) {
                if (this.cards[2].compareTo(that.cards[2]) == 1) {
                    return 1;
                } else {
                    return -1;
                }
            } else {  //表示that不是full house
                return 1;
            }
        }

        //檢查Flush
        int flush_check = 0;
        for (int i = 1; i < 5; i++) {
            if (Card.SUIT_ORDER.compare(this.cards[0], this.cards[i]) != 0) {
                flush_check = 1;
                break;
            }
        }
        if (flush_check == 0) {
            for (int i = 1; i < 5; i++) {  //this是flush時判斷that是不是flush
                if (Card.SUIT_ORDER.compare(that.cards[0], that.cards[i]) != 0) {
                    flush_check = 1;
                    break;
                }
            }
            if (flush_check == 1) { //that不是flush
                return 1;
            } else {
                if (Card.SUIT_ORDER.compare(this.cards[0], that.cards[0]) == 1) {
                    return 1;
                } else if (Card.SUIT_ORDER.compare(this.cards[0], that.cards[0]) == -1) {
                    return -1;
                } else //同花色時,比最後一張
                {
                    if (this.cards[4].compareTo(that.cards[4]) == 1) {
                        return 1;
                    } else if (this.cards[4].compareTo(that.cards[4]) == -1) {
                        return -1;
                    }
                }
            }
        } else {  //this不是flush時判斷that是不是flush
            flush_check = 0;
            for (int i = 1; i < 5; i++) {
                if (Card.SUIT_ORDER.compare(that.cards[0], that.cards[i]) != 0) {
                    flush_check = 1;
                    break;
                }
            }
            if (flush_check == 0) {
                return -1;
            }
        }

        //檢查Straight
        int this_straightcheck = 0; //this_straightcheck=1 時表示不是Straight
        int first = 0;
        int last = 0;
        Card[] this_maxcard = new Card[1];
        for (int i = 0; i < 5; i++) { //this是否是Straight
            switch (this.cards[i].getFace()) {
                case ""A"":
                    last = 13;
                    break;
                case ""2"":
                    last = 1;
                    break;
                case ""3"":
                    last = 2;
                    break;
                case ""4"":
                    last = 3;
                    break;
                case ""5"":
                    last = 4;
                    break;
                case ""6"":
                    last = 5;
                    break;
                case ""7"":
                    last = 6;
                    break;
                case ""8"":
                    last = 7;
                    break;
                case ""9"":
                    last = 8;
                    break;
                case ""10"":
                    last = 9;
                    break;
                case ""J"":
                    last = 10;
                    break;
                case ""Q"":
                    last = 11;
                    break;
                case ""K"":
                    last = 12;
                    break;
            }
            if (i > 0) {
                if (last - first != 1) {
                    if (i == 4 && last == 13 && first == 4) {  //A 2 3 4 5的情況
                        this_maxcard[0] = this.cards[3];
                        break;
                    }
                    this_straightcheck = 1;
                    break;
                }
            }
            if (i == 4) {
                this_maxcard[0] = this.cards[4];
            }
            first = last;
        }

        int that_straightcheck = 0;
        first = 0;
        last = 0;
        Card[] that_maxcard = new Card[1];
        for (int i = 0; i < 5; i++) { //that是否是Straight
            switch (that.cards[i].getFace()) {
                case ""A"":
                    last = 13;
                    break;
                case ""2"":
                    last = 1;
                    break;
                case ""3"":
                    last = 2;
                    break;
                case ""4"":
                    last = 3;
                    break;
                case ""5"":
                    last = 4;
                    break;
                case ""6"":
                    last = 5;
                    break;
                case ""7"":
                    last = 6;
                    break;
                case ""8"":
                    last = 7;
                    break;
                case ""9"":
                    last = 8;
                    break;
                case ""10"":
                    last = 9;
                    break;
                case ""J"":
                    last = 10;
                    break;
                case ""Q"":
                    last = 11;
                    break;
                case ""K"":
                    last = 12;
                    break;
            }
            if (i > 0) {
                if (last - first != 1) {
                    if (i == 4 && last == 13 && first == 4) {  //A 2 3 4 5的情況
                        that_maxcard[0] = that.cards[3];
                        break;
                    }
                    that_straightcheck = 1;
                    break;
                }
            }
            if (i == 4) {
                that_maxcard[0] = that.cards[4];
            }
            first = last;
        }

        if (this_straightcheck == 0 && that_straightcheck == 1) {
            return 1;
        } else if (this_straightcheck == 1 && that_straightcheck == 0) {
            return -1;
        } else if (this_straightcheck == 0 && that_straightcheck == 0) { //如果this與that都是straight
            if (this_maxcard[0].compareTo(that_maxcard[0]) == 1) {
                return 1;
            } else if (this_maxcard[0].compareTo(that_maxcard[0]) == -1) {
                return -1;
            }
        }

        //檢查 2 pair
        if (this.cards[0].getFace().equals(this.cards[1].getFace())) { //找出this第一個pair
            if (this.cards[2].getFace().equals(this.cards[3].getFace())) //this 是2 pair 且位置是0 1 2 3
            {
                if (that.cards[0].getFace().equals(that.cards[1].getFace()) && that.cards[2].getFace().equals(that.cards[3].getFace())) //判斷that是否為2 pair
                {
                    if (this.cards[3].compareTo(that.cards[3]) == 1) {
                        return 1;
                    } else if (this.cards[3].compareTo(that.cards[3]) == -1) {
                        return -1;
                    }
                } else if (that.cards[0].getFace().equals(that.cards[1].getFace()) && that.cards[3].getFace().equals(that.cards[4].getFace())) {
                    if (this.cards[3].compareTo(that.cards[4]) == 1) {
                        return 1;
                    } else if (this.cards[3].compareTo(that.cards[4]) == -1) {
                        return -1;
                    }
                } else if (that.cards[1].getFace().equals(that.cards[2].getFace()) && that.cards[3].getFace().equals(that.cards[4].getFace())) {
                    if (this.cards[3].compareTo(that.cards[4]) == 1) {
                        return 1;
                    } else if (this.cards[3].compareTo(that.cards[4]) == -1) {
                        return -1;
                    }
                } else {  //表示that不是2 pair
                    return 1;
                }
            }
            if (this.cards[3].getFace().equals(this.cards[4].getFace())) //this 是2 pair 且位置是0 1 3 4
            {
                if (that.cards[0].getFace().equals(that.cards[1].getFace()) && that.cards[2].getFace().equals(that.cards[3].getFace())) //判斷that是否為2 pair
                {
                    if (this.cards[4].compareTo(that.cards[3]) == 1) {
                        return 1;
                    } else if (this.cards[4].compareTo(that.cards[3]) == -1) {
                        return -1;
                    }
                } else if (that.cards[0].getFace().equals(that.cards[1].getFace()) && that.cards[3].getFace().equals(that.cards[4].getFace())) {
                    if (this.cards[4].compareTo(that.cards[4]) == 1) {
                        return 1;
                    } else if (this.cards[4].compareTo(that.cards[4]) == -1) {
                        return -1;
                    }
                } else if (that.cards[1].getFace().equals(that.cards[2].getFace()) && that.cards[3].getFace().equals(that.cards[4].getFace())) {
                    if (this.cards[4].compareTo(that.cards[4]) == 1) {
                        return 1;
                    } else if (this.cards[4].compareTo(that.cards[4]) == -1) {
                        return -1;
                    }
                } else {  //表示that不是2 pair
                    return 1;
                }
            }
        }
        if (this.cards[1].getFace().equals(this.cards[2].getFace())) { //找出this第一個pair
            if (this.cards[3].getFace().equals(this.cards[4].getFace())) //this 是2 pair 且位置是 1 2 3 4
            {
                if (that.cards[0].getFace().equals(that.cards[1].getFace()) && that.cards[2].getFace().equals(that.cards[3].getFace())) //判斷that是否為2 pair
                {
                    if (this.cards[4].compareTo(that.cards[3]) == 1) {
                        return 1;
                    } else if (this.cards[3].compareTo(that.cards[3]) == -1) {
                        return -1;
                    }
                } else if (that.cards[0].getFace().equals(that.cards[1].getFace()) && that.cards[3].getFace().equals(that.cards[4].getFace())) {
                    if (this.cards[4].compareTo(that.cards[4]) == 1) {
                        return 1;
                    } else if (this.cards[3].compareTo(that.cards[4]) == -1) {
                        return -1;
                    }
                } else if (that.cards[1].getFace().equals(that.cards[2].getFace()) && that.cards[3].getFace().equals(that.cards[4].getFace())) {
                    if (this.cards[4].compareTo(that.cards[4]) == 1) {
                        return 1;
                    } else if (this.cards[3].compareTo(that.cards[4]) == -1) {
                        return -1;
                    }
                } else {  //表示that不是2 pair
                    return 1;
                }
            }
        }

        //檢查pair
        int this_paircheck = 0;
        int temp_thisj = 0;

        for (int i = 0; i < 4; i++) {
            for (int j = i + 1; j < 5; j++) {
                if (this.cards[i].getFace().equals(this.cards[j].getFace())) {
                    temp_thisj = j;
                    this_paircheck = 1;
                    break;
                }
            }
        }

        int that_paircheck = 0;
        int temp_thatj = 0;
        for (int i = 0; i < 4; i++) {
            for (int j = i + 1; j < 5; j++) {
                if (that.cards[i].getFace().equals(that.cards[j].getFace())) {
                    temp_thatj = j;
                    that_paircheck = 1;
                    break;
                }
            }
        }

        if (this_paircheck == 1 && that_paircheck == 0) {
            return 1;
        } else if (this_paircheck == 0 && that_paircheck == 1) {
            return -1;
        } else if (this_paircheck == 1 && that_paircheck == 1) {
            if (this.cards[temp_thisj].compareTo(that.cards[temp_thatj]) == 1) {
                return 1;
            } else {
                return -1;
            }
        }

        //檢查High Card
        if (this.cards[4].compareTo(that.cards[4]) == 1) //比最後一張
        {
            return 1;
        } else if (this.cards[4].compareTo(that.cards[4]) == -1) {
            return -1;
        }

        return 0;
    }

    // Do not modified this function
    public Card[] getCards() {
        return this.cards;
    }
}

@0482d7c296c41b19b44ac62a74066575@"
"r04525016","3","0.0933333333333333","105536","@2ec344c94d3e075da8441d5bbb33820b@
public class Hand implements Comparable<Hand> {

    private int cardType;

    // sorted by Card value are recommended but not necessary
    private Card[] cards;

    // Do not modified this function
    public Card[] getCards() {
        return this.cards;
    }

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards) {

        this.cards = cards;
        cardType = this.cardType(this.cards);

    }

    // TODO
    public int compareTo(Hand that) {

        int player1 = this.cardType;
        int player2 = that.cardType;

        if (player1 > player2) return 1;
        else if (player1 < player2) return -1;
        else if (player1 == player2) {

            int SPlayer1 = this.secondRound(player1, this.cards);
            int SPlayer2 = that.secondRound(player2, that.cards);

            if (SPlayer1 > SPlayer2) return 1;
            else if (SPlayer1 < SPlayer2) return -1;
            else if (SPlayer1 == SPlayer2) {
//
//                int TPlayer1 = this.thirdRound(player1, this.cards);
//                int TPlayer2 = that.thirdRound(player2, that.cards);
//
//                if (TPlayer1 > TPlayer2) return 1;
//                else if (TPlayer1 < TPlayer2) return -1;
//                else if(TPlayer1 == TPlayer2)  return 0;
            }
        }
        return 0;
    }


    public int secondRound(int s, Card[] c) {
        int[] allFace = getAllFace(c);
        int secondValue = -1;
        if (s == 5) {
            for (int i = 0; i < 13; i++) {
                if (allFace[i] == 3) {
                    return i;
                }
            }
        } else if (s == 0 | s == 3 | s == 4) {
            for (int i = 0; i < 13; i++) {
                if (allFace[i] == 1) {
                    secondValue = i;
                }
            }
            return secondValue;
        } else if (s == 3 | s == 2) {
            for (int i = 0; i < 13; i++) {
                if (allFace[i] == 2) {
                    secondValue = i;
                }
            }
            return secondValue;
        }
        return secondValue;
    }


//    public int thirdRound(int t, Card[] c) {
//
//
//
//
//    }

    public int[] getAllFace(Card[] c) {
        int[] allFace = new int[13];

        for (int i = 0; i < allFace.length; i++) {
            allFace[i] = 0;
        }

        for (int i = 0; i < c.length; i++) {
            String temp = c[i].getFace();
            allFace[faceIndex(temp)]++;
        }

        return allFace;
    }


    public int cardType(Card[] c) {

        int[] allFace = getAllFace(c);

        int[] allType = new int[4];
        for (int i = 0; i < allFace.length; i++) {
            if (allFace[i] == 3) allType[3]++;
            else if (allFace[i] == 2) allType[2]++;
            else if (allFace[i] == 1) allType[1]++;
        }

        int type = -1;
        if (allType[3] == 1) {
            if (allType[2] == 1) {
                type = 5;
            } else if (allType[1] == 2) {
                type = 1;
            }
        } else if (allType[2] == 2) {
            type = 2;
        } else if (allType[2] == 1) {
            type = 1;
        } else if (allType[1] == 5) {
            if (isFlush(cards)) {
                type = 4;
            } else if (isStraight(allFace)) {
                type = 3;
            } else {
                type = 0;
            }
        }

//
//        for (int i = 0; i < allFace.length; i++) {
//            System.out.print(allFace[i] + "" "");
//        }
//
//        System.out.print(""["");
//        String sp = """";
//        for (int i : allType) {
//            System.out.print(sp + i);
//            sp = "","";
//        }
//        System.out.println(""]"");

        return type;
    }

    private boolean isStraight(int[] allFace) {

        int counter = 0;
        for (int i = 0; i < allFace.length; i++) {
            if (allFace[i] == 1) {
                if (i == 0 && allFace[12] == 1) {
                    int[] temp = {9, 10, 11, 12, 0, 1, 2, 3};
                    int counter2 = 0;
                    for (int k = 1; k < temp.length; k++) {
                        if (allFace[k] - allFace[k - 1] == 0) {
                            counter2++;
                        }
                        if (counter2 == 4) {
                            return true;
                        }
                    }
                }

                for (int j = i + 1; j < i + 5; j++) {
                    if (allFace[j] - allFace[j - 1] == 0) {
                        counter++;
                    }
                    if (counter == 4) {
                        return true;
                    }
                }
            }
            return false;
        }

        if (counter == 4) {
            return true;
        } else return false;
    }

    public boolean isFlush(Card[] c) {
        int[] allSuit = new int[4];
        for (int i = 0; i < c.length; i++) {
            String temp = c[i].getSuit();
            allSuit[suitIndex(temp)]++;
        }
        for (int j = 0; j < 4; j++) {
            if (allSuit[j] == 5) return true;
        }
        return false;
    }

    public int faceIndex(String f) {
        String[] faces = {""A"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K""};
        int face_index = 0;
        while (!f.equals(faces[face_index])) face_index++;
        return face_index;
    }

    public int suitIndex(String s) {
        String[] suits = {""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};
        int suit_index = 0;
        while (!s.equals(suits[suit_index])) suit_index++;
        return suit_index;
    }

}


@2ec344c94d3e075da8441d5bbb33820b@"
"r04945008","0","0","0","@e0d8524d13516d71288de4e74b525da4@import java.util.Arrays;
import java.util.Comparator; 

public class Hand implements Comparable<Hand> {
    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        Arrays.sort(this.cards);
        return;
    }
    
    public int findPair() {
        Arrays.sort(this.cards);
        int[] count = new int[5];
        for (int i = 0; i < 5; i++) {count[i]=0;
            for (int j = 0; j < 5; j++) {
                if(this.cards[i].getFace().equals(this.cards[j].getFace())) count[i]++;
            }
        }
        for(int i = 4; i >= 0; i--){
            if(count[i] == 3) return i;
            if(count[i] == 2) return i;
        }
        return 0;
    }
    
    public int getRank() {
        Arrays.sort(this.cards);
        int[] count = new int[5];
        for (int i = 0; i < 5; i++) {count[i]=0;
            for (int j = 0; j < 5; j++) {
                if(this.cards[i].getFace().equals(this.cards[j].getFace())) count[i]+=1;
            }
        }

        if(count[2] == 3 && (count[0] == 2 || count[4] == 2)) return +15;                                   //fullhouse
        if(this.cards[0].getSuit().equals(this.cards[1].getSuit()) && this.cards[0].getSuit().equals(this.cards[2].getSuit()) && this.cards[0].getSuit().equals(this.cards[3].getSuit()) && this.cards[0].getSuit().equals(this.cards[4].getSuit()))
        return +14; 
        
        if(this.cards[0].getFace().equals(""10"") && this.cards[1].getFace().equals(""J"") && this.cards[2].getFace().equals(""Q"") && this.cards[3].getFace().equals(""K"") && this.cards[4].getFace().equals(""A"")) return +13;         //10JQKA
        if(this.cards[0].getFace().equals(""9"") && this.cards[1].getFace().equals(""10"") && this.cards[2].getFace().equals(""J"") && this.cards[3].getFace().equals(""Q"") && this.cards[4].getFace().equals(""K""))  return +12;
        if(this.cards[0].getFace().equals(""8"") && this.cards[1].getFace().equals(""9"") && this.cards[2].getFace().equals(""10"") && this.cards[3].getFace().equals(""J"") && this.cards[4].getFace().equals(""Q""))  return +11;
        if(this.cards[0].getFace().equals(""7"") && this.cards[1].getFace().equals(""8"") && this.cards[2].getFace().equals(""9"") && this.cards[3].getFace().equals(""10"") && this.cards[4].getFace().equals(""J""))  return +10;
        if(this.cards[0].getFace().equals(""6"") && this.cards[1].getFace().equals(""7"") && this.cards[2].getFace().equals(""8"") && this.cards[3].getFace().equals(""9"") && this.cards[4].getFace().equals(""10"")) return +9;
        if(this.cards[0].getFace().equals(""5"") && this.cards[1].getFace().equals(""6"") && this.cards[2].getFace().equals(""7"") && this.cards[3].getFace().equals(""8"") && this.cards[4].getFace().equals(""9""))  return +8;
        if(this.cards[0].getFace().equals(""4"") && this.cards[1].getFace().equals(""5"") && this.cards[2].getFace().equals(""6"") && this.cards[3].getFace().equals(""7"") && this.cards[4].getFace().equals(""8""))  return +7;
        if(this.cards[0].getFace().equals(""3"") && this.cards[1].getFace().equals(""4"") && this.cards[2].getFace().equals(""5"") && this.cards[3].getFace().equals(""6"") && this.cards[4].getFace().equals(""7""))  return +6;
        if(this.cards[0].getFace().equals(""2"") && this.cards[1].getFace().equals(""3"") && this.cards[2].getFace().equals(""4"") && this.cards[3].getFace().equals(""5"") && this.cards[4].getFace().equals(""6""))  return +5;
        if(this.cards[0].getFace().equals(""2"") && this.cards[1].getFace().equals(""3"") && this.cards[2].getFace().equals(""4"") && this.cards[3].getFace().equals(""5"") && this.cards[4].getFace().equals(""A""))  return +4;          //A2345
        
        if(count[0]+count[1]+count[2]+count[3]+count[4] == 9) return +3;                                                         //2 pair
        if(count[0]+count[1]+count[2]+count[3]+count[4] == 7 || count[0]+count[1]+count[2]+count[3]+count[4] == 11) return +2;    //1 pair
        return 1;                                                                                                                //high card
    }

    // TODO
    public int compareTo(Hand that) {
        int a,b;
        if(this.getRank() < that.getRank()) return -1;
        if(this.getRank() > that.getRank()) return +1;
        if(this.getRank() == that.getRank()){
            switch(this.getRank()){
                case 15:
                    a=this.findPair();
                    b=that.findPair();
                    if(this.cards[a].compareTo(that.cards[b]) == 1) return +1; 
                    if(this.cards[a].compareTo(that.cards[b]) == -1) return -1;
                    return 0;
                case 4:
                    if(this.cards[3].compareTo(that.cards[3]) == 1) return +1; 
                    if(this.cards[3].compareTo(that.cards[3]) == -1) return -1;
                    return 0;  
                case 3:
                    a=this.findPair();
                    b=that.findPair();
                    if(this.cards[a].compareTo(that.cards[b]) == 1) return +1; 
                    if(this.cards[a].compareTo(that.cards[b]) == -1) return -1;
                    return 0;
                case 2:
                    a=this.findPair();
                    b=that.findPair();
                    if(this.cards[a].compareTo(that.cards[b]) == 1) return +1; 
                    if(this.cards[a].compareTo(that.cards[b]) == -1) return -1;
                    return 0;
                default:
                    if(this.cards[4].compareTo(that.cards[4]) == 1) return +1; 
                    if(this.cards[4].compareTo(that.cards[4]) == -1) return -1;
                    return 0;
            } 
        }
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@e0d8524d13516d71288de4e74b525da4@"
"r04945008","0","0","0","@be87b214aa7af758fdd6aea8f3cf3afa@import java.util.Arrays;
import java.util.Comparator; 

public class Hand implements Comparable<Hand> {
    // sorted by Card value are recommended but not necessary
    private Card[] cards = new Card[5]; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        Arrays.sort(this.cards);
        return;
    }
    
    public int findPair() {
        Arrays.sort(this.cards);
        int[] count = new int[5];
        for (int i = 0; i < 5; i++) {count[i]=0;
            for (int j = 0; j < 5; j++) {
                if(this.cards[i].getFace().equals(this.cards[j].getFace())) count[i]++;
            }
        }
        for(int i = 4; i >= 0; i--){
            if(count[i] == 3) return i;
            if(count[i] == 2) return i;
        }
        return 0;
    }
    
    public int getRank() {
        Arrays.sort(this.cards);
        int[] count = new int[5];
        for (int i = 0; i < 5; i++) {count[i]=0;
            for (int j = 0; j < 5; j++) {
                if(this.cards[i].getFace().equals(this.cards[j].getFace())) count[i]+=1;
            }
        }

        if(count[2] == 3 && (count[0] == 2 || count[4] == 2)) return +15;                                   //fullhouse
        if(this.cards[0].getSuit().equals(this.cards[1].getSuit()) && this.cards[0].getSuit().equals(this.cards[2].getSuit()) && this.cards[0].getSuit().equals(this.cards[3].getSuit()) && this.cards[0].getSuit().equals(this.cards[4].getSuit()))
        return +14; 
        
        if(this.cards[0].getFace().equals(""10"") && this.cards[1].getFace().equals(""J"") && this.cards[2].getFace().equals(""Q"") && this.cards[3].getFace().equals(""K"") && this.cards[4].getFace().equals(""A"")) return +13;         //10JQKA
        if(this.cards[0].getFace().equals(""9"") && this.cards[1].getFace().equals(""10"") && this.cards[2].getFace().equals(""J"") && this.cards[3].getFace().equals(""Q"") && this.cards[4].getFace().equals(""K""))  return +12;
        if(this.cards[0].getFace().equals(""8"") && this.cards[1].getFace().equals(""9"") && this.cards[2].getFace().equals(""10"") && this.cards[3].getFace().equals(""J"") && this.cards[4].getFace().equals(""Q""))  return +11;
        if(this.cards[0].getFace().equals(""7"") && this.cards[1].getFace().equals(""8"") && this.cards[2].getFace().equals(""9"") && this.cards[3].getFace().equals(""10"") && this.cards[4].getFace().equals(""J""))  return +10;
        if(this.cards[0].getFace().equals(""6"") && this.cards[1].getFace().equals(""7"") && this.cards[2].getFace().equals(""8"") && this.cards[3].getFace().equals(""9"") && this.cards[4].getFace().equals(""10"")) return +9;
        if(this.cards[0].getFace().equals(""5"") && this.cards[1].getFace().equals(""6"") && this.cards[2].getFace().equals(""7"") && this.cards[3].getFace().equals(""8"") && this.cards[4].getFace().equals(""9""))  return +8;
        if(this.cards[0].getFace().equals(""4"") && this.cards[1].getFace().equals(""5"") && this.cards[2].getFace().equals(""6"") && this.cards[3].getFace().equals(""7"") && this.cards[4].getFace().equals(""8""))  return +7;
        if(this.cards[0].getFace().equals(""3"") && this.cards[1].getFace().equals(""4"") && this.cards[2].getFace().equals(""5"") && this.cards[3].getFace().equals(""6"") && this.cards[4].getFace().equals(""7""))  return +6;
        if(this.cards[0].getFace().equals(""2"") && this.cards[1].getFace().equals(""3"") && this.cards[2].getFace().equals(""4"") && this.cards[3].getFace().equals(""5"") && this.cards[4].getFace().equals(""6""))  return +5;
        if(this.cards[0].getFace().equals(""2"") && this.cards[1].getFace().equals(""3"") && this.cards[2].getFace().equals(""4"") && this.cards[3].getFace().equals(""5"") && this.cards[4].getFace().equals(""A""))  return +4;          //A2345
        
        if(count[0]+count[1]+count[2]+count[3]+count[4] == 9) return +3;                                                         //2 pair
        if(count[0]+count[1]+count[2]+count[3]+count[4] == 7 || count[0]+count[1]+count[2]+count[3]+count[4] == 11) return +2;    //1 pair
        return 1;                                                                                                                //high card
    }

    // TODO
    public int compareTo(Hand that) {
        int a,b;
        if(this.getRank() < that.getRank()) return -1;
        if(this.getRank() > that.getRank()) return +1;
        if(this.getRank() == that.getRank()){
            switch(this.getRank()){
                case 15:
                    a=this.findPair();
                    b=that.findPair();
                    if(this.cards[a].compareTo(that.cards[b]) == 1) return +1; 
                    if(this.cards[a].compareTo(that.cards[b]) == -1) return -1;
                    return 0;
                case 4:
                    if(this.cards[3].compareTo(that.cards[3]) == 1) return +1; 
                    if(this.cards[3].compareTo(that.cards[3]) == -1) return -1;
                    return 0;  
                case 3:
                    a=this.findPair();
                    b=that.findPair();
                    if(this.cards[a].compareTo(that.cards[b]) == 1) return +1; 
                    if(this.cards[a].compareTo(that.cards[b]) == -1) return -1;
                    return 0;
                case 2:
                    a=this.findPair();
                    b=that.findPair();
                    if(this.cards[a].compareTo(that.cards[b]) == 1) return +1; 
                    if(this.cards[a].compareTo(that.cards[b]) == -1) return -1;
                    return 0;
                default:
                    if(this.cards[4].compareTo(that.cards[4]) == 1) return +1; 
                    if(this.cards[4].compareTo(that.cards[4]) == -1) return -1;
                    return 0;
            } 
        }
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@be87b214aa7af758fdd6aea8f3cf3afa@"
"r04945008","0","0","0","@7af47af587d2e337a4d45a59f5aa874a@import java.util.Arrays;
import java.util.Comparator; 

public class Hand implements Comparable<Hand> {
    // sorted by Card value are recommended but not necessary
    private Card[] cards = new Card[5]; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        return;
    }
    
    public int findPair() {
        Arrays.sort(this.cards);
        int[] count = new int[5];
        for (int i = 0; i < 5; i++) {count[i]=0;
            for (int j = 0; j < 5; j++) {
                if(this.cards[i].getFace().equals(this.cards[j].getFace())) count[i]++;
            }
        }
        for(int i = 4; i >= 0; i--){
            if(count[i] == 3) return i;
            if(count[i] == 2) return i;
        }
        return 0;
    }
    
    public int getRank() {
        Arrays.sort(this.cards);
        int[] count = new int[5];
        for (int i = 0; i < 5; i++) {count[i]=0;
            for (int j = 0; j < 5; j++) {
                if(this.cards[i].getFace().equals(this.cards[j].getFace())) count[i]+=1;
            }
        }

        if(count[2] == 3 && (count[0] == 2 || count[4] == 2)) return +15;                                   //fullhouse
        if(this.cards[0].getSuit().equals(this.cards[1].getSuit()) && this.cards[0].getSuit().equals(this.cards[2].getSuit()) && this.cards[0].getSuit().equals(this.cards[3].getSuit()) && this.cards[0].getSuit().equals(this.cards[4].getSuit()))
        return +14; 
        
        if(this.cards[0].getFace().equals(""10"") && this.cards[1].getFace().equals(""J"") && this.cards[2].getFace().equals(""Q"") && this.cards[3].getFace().equals(""K"") && this.cards[4].getFace().equals(""A"")) return +13;         //10JQKA
        if(this.cards[0].getFace().equals(""9"") && this.cards[1].getFace().equals(""10"") && this.cards[2].getFace().equals(""J"") && this.cards[3].getFace().equals(""Q"") && this.cards[4].getFace().equals(""K""))  return +12;
        if(this.cards[0].getFace().equals(""8"") && this.cards[1].getFace().equals(""9"") && this.cards[2].getFace().equals(""10"") && this.cards[3].getFace().equals(""J"") && this.cards[4].getFace().equals(""Q""))  return +11;
        if(this.cards[0].getFace().equals(""7"") && this.cards[1].getFace().equals(""8"") && this.cards[2].getFace().equals(""9"") && this.cards[3].getFace().equals(""10"") && this.cards[4].getFace().equals(""J""))  return +10;
        if(this.cards[0].getFace().equals(""6"") && this.cards[1].getFace().equals(""7"") && this.cards[2].getFace().equals(""8"") && this.cards[3].getFace().equals(""9"") && this.cards[4].getFace().equals(""10"")) return +9;
        if(this.cards[0].getFace().equals(""5"") && this.cards[1].getFace().equals(""6"") && this.cards[2].getFace().equals(""7"") && this.cards[3].getFace().equals(""8"") && this.cards[4].getFace().equals(""9""))  return +8;
        if(this.cards[0].getFace().equals(""4"") && this.cards[1].getFace().equals(""5"") && this.cards[2].getFace().equals(""6"") && this.cards[3].getFace().equals(""7"") && this.cards[4].getFace().equals(""8""))  return +7;
        if(this.cards[0].getFace().equals(""3"") && this.cards[1].getFace().equals(""4"") && this.cards[2].getFace().equals(""5"") && this.cards[3].getFace().equals(""6"") && this.cards[4].getFace().equals(""7""))  return +6;
        if(this.cards[0].getFace().equals(""2"") && this.cards[1].getFace().equals(""3"") && this.cards[2].getFace().equals(""4"") && this.cards[3].getFace().equals(""5"") && this.cards[4].getFace().equals(""6""))  return +5;
        if(this.cards[0].getFace().equals(""2"") && this.cards[1].getFace().equals(""3"") && this.cards[2].getFace().equals(""4"") && this.cards[3].getFace().equals(""5"") && this.cards[4].getFace().equals(""A""))  return +4;          //A2345
        
        if(count[0]+count[1]+count[2]+count[3]+count[4] == 9) return +3;                                                         //2 pair
        if(count[0]+count[1]+count[2]+count[3]+count[4] == 7 || count[0]+count[1]+count[2]+count[3]+count[4] == 11) return +2;    //1 pair
        return 1;                                                                                                                //high card
    }

    // TODO
    public int compareTo(Hand that) {
        int a,b;
        Arrays.sort(this.cards);
        Arrays.sort(that.cards);
        if(this.getRank() < that.getRank()) return -1;
        if(this.getRank() > that.getRank()) return +1;
        if(this.getRank() == that.getRank()){
            switch(this.getRank()){
                case 15:
                    a=this.findPair();
                    b=that.findPair();
                    if(this.cards[a].compareTo(that.cards[b]) == 1) return +1; 
                    if(this.cards[a].compareTo(that.cards[b]) == -1) return -1;
                    return 0;
                case 4:
                    if(this.cards[3].compareTo(that.cards[3]) == 1) return +1; 
                    if(this.cards[3].compareTo(that.cards[3]) == -1) return -1;
                    return 0;  
                case 3:
                    a=this.findPair();
                    b=that.findPair();
                    if(this.cards[a].compareTo(that.cards[b]) == 1) return +1; 
                    if(this.cards[a].compareTo(that.cards[b]) == -1) return -1;
                    return 0;
                case 2:
                    a=this.findPair();
                    b=that.findPair();
                    if(this.cards[a].compareTo(that.cards[b]) == 1) return +1; 
                    if(this.cards[a].compareTo(that.cards[b]) == -1) return -1;
                    return 0;
                default:
                    if(this.cards[4].compareTo(that.cards[4]) == 1) return +1; 
                    if(this.cards[4].compareTo(that.cards[4]) == -1) return -1;
                    return 0;
            } 
        }
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@7af47af587d2e337a4d45a59f5aa874a@"
"r04945008","3","0.0933333333333333","105216","@a67e39322e6af1fc60a5226e2808b967@import java.util.Arrays;
import java.util.Comparator; 

public class Hand implements Comparable<Hand> {
    // sorted by Card value are recommended but not necessary
    private Card[] cards = new Card[5]; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
    }
    
    public int findPair() {
        Arrays.sort(this.cards);
        int[] count = new int[5];
        for (int i = 0; i < 5; i++) {count[i]=0;
            for (int j = 0; j < 5; j++) {
                if(this.cards[i].getFace().equals(this.cards[j].getFace())) count[i]++;
            }
        }
        for(int i = 4; i >= 0; i--){
            if(count[i] == 3) return i;
            if(count[i] == 2) return i;
        }
        return 0;
    }
    
    public int getRank() {
        Arrays.sort(this.cards);
        int[] count = new int[5];
        for (int i = 0; i < 5; i++) {count[i]=0;
            for (int j = 0; j < 5; j++) {
                if(this.cards[i].getFace().equals(this.cards[j].getFace())) count[i]+=1;
            }
        }

        if(count[2] == 3 && (count[0] == 2 || count[4] == 2)) return +15;                                   //fullhouse
        if(this.cards[0].getSuit().equals(this.cards[1].getSuit()) && this.cards[0].getSuit().equals(this.cards[2].getSuit()) && this.cards[0].getSuit().equals(this.cards[3].getSuit()) && this.cards[0].getSuit().equals(this.cards[4].getSuit()))
        return +14; 
        
        if(this.cards[0].getFace().equals(""10"") && this.cards[1].getFace().equals(""J"") && this.cards[2].getFace().equals(""Q"") && this.cards[3].getFace().equals(""K"") && this.cards[4].getFace().equals(""A"")) return +13;         //10JQKA
        if(this.cards[0].getFace().equals(""9"") && this.cards[1].getFace().equals(""10"") && this.cards[2].getFace().equals(""J"") && this.cards[3].getFace().equals(""Q"") && this.cards[4].getFace().equals(""K""))  return +12;
        if(this.cards[0].getFace().equals(""8"") && this.cards[1].getFace().equals(""9"") && this.cards[2].getFace().equals(""10"") && this.cards[3].getFace().equals(""J"") && this.cards[4].getFace().equals(""Q""))  return +11;
        if(this.cards[0].getFace().equals(""7"") && this.cards[1].getFace().equals(""8"") && this.cards[2].getFace().equals(""9"") && this.cards[3].getFace().equals(""10"") && this.cards[4].getFace().equals(""J""))  return +10;
        if(this.cards[0].getFace().equals(""6"") && this.cards[1].getFace().equals(""7"") && this.cards[2].getFace().equals(""8"") && this.cards[3].getFace().equals(""9"") && this.cards[4].getFace().equals(""10"")) return +9;
        if(this.cards[0].getFace().equals(""5"") && this.cards[1].getFace().equals(""6"") && this.cards[2].getFace().equals(""7"") && this.cards[3].getFace().equals(""8"") && this.cards[4].getFace().equals(""9""))  return +8;
        if(this.cards[0].getFace().equals(""4"") && this.cards[1].getFace().equals(""5"") && this.cards[2].getFace().equals(""6"") && this.cards[3].getFace().equals(""7"") && this.cards[4].getFace().equals(""8""))  return +7;
        if(this.cards[0].getFace().equals(""3"") && this.cards[1].getFace().equals(""4"") && this.cards[2].getFace().equals(""5"") && this.cards[3].getFace().equals(""6"") && this.cards[4].getFace().equals(""7""))  return +6;
        if(this.cards[0].getFace().equals(""2"") && this.cards[1].getFace().equals(""3"") && this.cards[2].getFace().equals(""4"") && this.cards[3].getFace().equals(""5"") && this.cards[4].getFace().equals(""6""))  return +5;
        if(this.cards[0].getFace().equals(""2"") && this.cards[1].getFace().equals(""3"") && this.cards[2].getFace().equals(""4"") && this.cards[3].getFace().equals(""5"") && this.cards[4].getFace().equals(""A""))  return +4;          //A2345
        
        if(count[0]+count[1]+count[2]+count[3]+count[4] == 9) return +3;                                                         //2 pair
        if(count[0]+count[1]+count[2]+count[3]+count[4] == 7 || count[0]+count[1]+count[2]+count[3]+count[4] == 11) return +2;    //1 pair
        return 1;                                                                                                                //high card
    }

    // TODO
    public int compareTo(Hand that) {
        int a,b;
        Arrays.sort(this.cards);
        Arrays.sort(that.cards);
        if(this.getRank() < that.getRank()) return -1;
        if(this.getRank() > that.getRank()) return +1;
        if(this.getRank() == that.getRank()){
            switch(this.getRank()){
                case 15:
                    a=this.findPair();
                    b=that.findPair();
                    if(this.cards[a].compareTo(that.cards[b]) == 1) return +1; 
                    if(this.cards[a].compareTo(that.cards[b]) == -1) return -1;
                    return 0;
                case 4:
                    if(this.cards[3].compareTo(that.cards[3]) == 1) return +1; 
                    if(this.cards[3].compareTo(that.cards[3]) == -1) return -1;
                    return 0;  
                case 3:
                    a=this.findPair();
                    b=that.findPair();
                    if(this.cards[a].compareTo(that.cards[b]) == 1) return +1; 
                    if(this.cards[a].compareTo(that.cards[b]) == -1) return -1;
                    return 0;
                case 2:
                    a=this.findPair();
                    b=that.findPair();
                    if(this.cards[a].compareTo(that.cards[b]) == 1) return +1; 
                    if(this.cards[a].compareTo(that.cards[b]) == -1) return -1;
                    return 0;
                default:
                    if(this.cards[4].compareTo(that.cards[4]) == 1) return +1; 
                    if(this.cards[4].compareTo(that.cards[4]) == -1) return -1;
                    return 0;
            } 
        }
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@a67e39322e6af1fc60a5226e2808b967@"
"r03723070","3","0.0966666666666667","105456","@77df09151a9c51b44945e77a654809f7@
import java.util.Arrays;


public class Hand implements Comparable<Hand> {
    private Card[] cards = new Card[5];
    private String name;
    private int [] playerrank = new int[5];//[pair,Full_House,flush,stright,,bignumber]
    private int playerorder = 0;//[kind,big#]
    private Card playerbig;
    private String [] Oface = {""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"",""A""};
    private int [] cardfacesize = new int [5];
        int pair = 0;
        int stright = 1;
        Card bigstright=cards[4];
        int flush = 1;
        Card bigflush = cards[4];
        
        int FullHouse =0;
        Card bigFullHouse;
        
        Card big2p;
        
        int kind = 0;

    // sorted by Card value are recommended but not necessary
    //private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        Arrays.sort(cards);
        this.cards = cards;
        //High Card
        //
        //System.out.println(cards[0].getFace());
        for (int i = 0;i<13;i++){
            for(int j = 0;j<5;j++){
                if(Oface[i].equals(cards[j].getFace())){
                cardfacesize[j] =i;
            }
            }
        }
        int pairnum = 0;
       
        //paiar
        for(int i =0;i<4;i++){
            if(cardfacesize[i] == cardfacesize[i+1]){
                big2p =cards[i];
                pairnum+=1;
                //System.out.printf(""pairnum is %d\n"",pairnum);
            }
            if(cardfacesize[i] != cardfacesize[i+1] || i==3){
                if((pairnum+1)%2==0) {
                    if(big2p.compareTo(cards[i])<0){
                        big2p =cards[i];
                    }
                    pair+=(pairnum+1)/2;
                    //System.out.printf(""pair is %d\n"",pair);
                }
                if((pairnum+1)%3==0){
                    bigFullHouse = cards[i];
                    FullHouse+=(pairnum+1)/3;
                    //System.out.printf(""flush is %d\n"",flush);
                }
                pairnum = 0;
            }
            if(!(cards[i].getSuit()).equals(cards[i+1].getSuit())){
                   //System.out.printf(""flush is %d\n"",flush);
                   flush=0;
               }
        }
        //stright
        for (int i =0;i<4;i++){
            if(cardfacesize[i+1] - cardfacesize[i] !=1){
                stright=0;
            }
        }
        /*if(cardfacesize[0]==0&&cardfacesize[1]==1&&cardfacesize[2]==2&&cardfacesize[3]==3&&cardfacesize[4]==12){
                bigstright=cards[0];
                stright=1;
            }*/

        //allocate the rank
        {   //FullHouse
            if(pair==1&&FullHouse==1){
                kind = 5;
                playerorder=kind;
                playerbig=bigFullHouse;        
            }
            //flish
            else if(flush==1){
                kind = 4;
                playerorder=kind;
                playerbig=bigflush; 
            }
            //stright
            else if(stright==1){
                kind = 3;
                playerorder=kind;
                playerbig=bigstright; 
            }
            //2pair
            else if(pair==2){
                kind = 2;
                playerorder=kind;
                playerbig=big2p; 
            }
            else if(pair==1){
                kind = 1;
                playerorder=kind;
                playerbig=big2p; 
            }
            else {
                kind = 0;
                playerorder=kind;
                playerbig=cards[4]; 
            }
            
        }
    }

    // TODO
    public int compareTo(Hand that) {
                if(this.kind>that.kind) return 1;
        else if(this.kind<that.kind) return -1;
        else {
            if(this.playerbig.compareTo(that.playerbig)>0)return 1;
            if(this.playerbig.compareTo(that.playerbig)<0)return -1;
        }
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@77df09151a9c51b44945e77a654809f7@"
"r04631009","3","0.1","105968","@c48de25ffb7dcc44379e2b344f982655@public class Hand implements Comparable<Hand> {
     // sorted by Card value are recommended but not necessary
    private Card[] cards=new Card[5]; 
    public int HandOrder,CardOrder;
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards=cards;
        Insertion.sort(this.cards);
        GetOrder();
       }
     // Do not modified this function
    public Card[] getCards() { return this.cards; }
    private int suittointeger (String suit){
         int num=0;
         switch (suit){
             case ""Spades"":
                 num=3;
                 break;
             case ""Hearts"":
                 num=2;
                 break;
             case ""Dimonds"":
                 num=1;
                 break;
             case ""Clubs"":
                 num=0;
                 break;
         }
         return(num);
     }
     private int facetointeger(String face) {
        int num1 = 0;
        switch (face) {
            case ""A"":
                num1 = 13;
                break;
            case ""K"":
                num1 = 12;
                break;
            case ""Q"":
                num1 = 11;
                break;
            case ""J"":
                num1 = 10;
                break;
            case ""10"":
                num1 = 9;
                break;
            case ""9"":
                num1 = 8;
                break;
            case ""8"":
                num1 = 7;
                break;
            case ""7"":
                num1 = 6;
                break;
            case ""6"":
                num1 = 5;
                break;
            case ""5"":
                num1 = 4;
                break;
            case ""4"":
                num1 = 3;
                break;
            case ""3"":
                num1 = 2;
                break;
            case ""2"":
                num1 = 1;
                break;

        }
        return num1;
    }
    private boolean isFullhouse(){
        if(cards[0].getFace().equals(cards[1].getFace()) && cards[1].getFace().equals(cards[2].getFace()) && cards[3].getFace().equals(cards[4].getFace()) && !cards[0].getFace().equals(cards[3].getFace()))
            return (true);
        if (cards[0].getFace().equals(cards[1].getFace()) && !cards[0].getFace().equals(cards[2].getFace()) && cards[2].getFace().equals(cards[3].getFace()) && cards[2].getFace().equals(cards[4].getFace()))
            return (true);
        else
            return (false);
       }
    private boolean isFlush(){
        String temp=cards[0].getSuit();
        int i=0;
        while (i<5 && cards[i].getSuit().equals(temp) )
            i++;
        return(i==5);
    }
    private boolean isStraight(){
        if (cards[0].getFace().equals(""2"") && cards[1].getFace().equals(""3"") && cards[2].getFace().equals(""4"") && cards[3].getFace().equals(""5"") && cards[4].getFace().equals(""A""))
        return (true);
      
        int i=facetointeger(cards[4].getFace());
        int temp=3;
        while (temp>=0 && facetointeger(cards[temp].getFace())==(i-1) ){
            temp--;
            i--;
        }
        return(i==(facetointeger(cards[4].getFace())-4));
    }
    private int PairNumber(){
        QuickFindUF cc=new QuickFindUF(5);
        for (int i=0 ; i<5 ; i++)
            for (int j=0 ; j<5 ; j++)
                if (facetointeger(cards[i].getFace())==facetointeger(cards[j].getFace()))
                    cc.union(i, j);
        if(cc.count()==5)
            return 0;
        else if(cc.count()==4)
            return 1;
        else if(cc.count()==3 && (cc.find(0)==cc.find(2)||cc.find(4)==cc.find(2)||cc.find(1)==cc.find(3)))
            return 1;
        else 
            return 2;
            }
    // TODO
    public void GetOrder(){
        if (isFullhouse()){
            HandOrder=5;
            CardOrder=facetointeger(cards[2].getFace());
         }
        else if (isFlush()){
            HandOrder=4;
            CardOrder=13*suittointeger(cards[4].getSuit())+facetointeger(cards[4].getFace());
        }
        else if (isStraight()){
            HandOrder=3;
            int i;
            if (cards[0].getFace().equals(""2"") && cards[4].getFace().equals(""A""))
                CardOrder=facetointeger(cards[3].getFace())*4+suittointeger(cards[3].getSuit())+1;
            else 
                CardOrder=facetointeger(cards[4].getFace())*4+suittointeger(cards[4].getSuit())+1;
        }
        else if  (PairNumber()==2){
            HandOrder=2;
            if (cards[4].getFace().equals(cards[3].getFace()))
               CardOrder=facetointeger(cards[4].getFace())*4+suittointeger(cards[4].getSuit())+1;
            else
               CardOrder=facetointeger(cards[3].getFace())*4+suittointeger(cards[3].getSuit())+1;
        }
        else if (PairNumber()==1){
            HandOrder=1;
            if (cards[4].getFace().equals(cards[3].getFace()))
                CardOrder=facetointeger(cards[4].getFace())*4+suittointeger(cards[4].getSuit())+1;
            else if (cards[3].getFace().equals(cards[2].getFace()))
                CardOrder=facetointeger(cards[3].getFace())*4+suittointeger(cards[3].getSuit())+1;
            else if (cards[2].getFace().equals(cards[1].getFace()))
                CardOrder=facetointeger(cards[2].getFace())*4+suittointeger(cards[2].getSuit())+1;
            else
                CardOrder=facetointeger(cards[1].getFace())*4+suittointeger(cards[1].getSuit())+1;
        }
        else{
            HandOrder=0;
            CardOrder=facetointeger(cards[4].getFace())*4+suittointeger(cards[4].getSuit())+1;
        }
    } 
    public int compareTo(Hand that) {
        if (this.HandOrder>that.HandOrder) return 1;
        if (this.HandOrder<that.HandOrder) return -1;
        if (this.CardOrder>that.CardOrder) return 1;
        if (this.CardOrder<that.CardOrder) return -1;
        return 0; 
}  
}
@c48de25ffb7dcc44379e2b344f982655@"
"r04945022","0","0.14","120720","@a1b2933073b339d6222858dcef4692c2@
import cardgame.Card;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    enum CardType {
        full_house , flush , straight , two_pair , one_pair , high
    }
    private CardType cardtype;
    public cardReq cardreq = new cardReq();

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
        this.setCardType();
//        return;
    }
    

    // TODO
    public int compareTo(Hand that) {
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
    
    private static class CardTypeOrder implements Comparator<CardType> {
        private static List<CardType> order;
        CardTypeOrder() {
            CardType[] cardTypes = {
                    CardType.full_house,
                    CardType.flush,
                    CardType.straight,
                    CardType.two_pair,
                    CardType.one_pair,
                    CardType.high
            };
            order = new ArrayList<CardType>();
            for (CardType cardType : cardTypes) {
                order.add(cardType);
            }
        }

        @Override
        public int compare(CardType cardType1, CardType cardType2) {
            int cardType_1 = order.indexOf(cardType1);
            int cardType_2 = order.indexOf(cardType2);
            if (cardType_1 < cardType_2) return 1;
            else if (cardType_1 > cardType_2) return -1;
            else return 0;
        }
    }
    private void setCardType(){
        Map<String,Integer> faces = cardreq.getFaceCount();
        if (faces.size() == 2) {
            // (4,1) or (3,2)
            if (cardreq.Triples().size() != 0) {
                cardtype = CardType.full_house;
                return;
            }
            cardtype = CardType.high;
        } else if (faces.size() == 3){
            // (3,1,1) or (2,2,1)
            if (cardreq.Doubles().size() != 0) {
                cardtype = CardType.two_pair;
                return;
            }
            cardtype = CardType.high;
        } else if (faces.size() == 4){
            // (2,1,1,1)
            cardtype = CardType.one_pair;
        } else if (faces.size() == 5){
            // check for flush
            if (cardreq.getSuitSet().size() == 1) {
               cardtype = CardType.flush;
                return;
            }
            // check for straight
            String[] straights = {""A"",""K"",""Q"",""J"",""10"",""9"",""8"",""7"",""6"",""5"",""4"",""3"",""2"",""A""};
            Set<String> faceSet = faces.keySet();
            for(int i = 0; i < straights.length - 5 ; i++){
                Set<String> straightOne = new HashSet<String>();
                for(int j = i ; j < i + 5 ; j++){
                    straightOne.add(straights[j]);
                }
                if (faceSet.containsAll(straightOne)) {
                    cardtype = CardType.straight;
                    return;
                }
            }
            // high card otherwise
            cardtype = CardType.high;
        }
    }
    private class cardReq{
        public Map<String , Integer> getFaceCount(){
            Map<String,Integer> faces = new HashMap<String,Integer>();
            for(Card c:cards){
                if (faces.containsKey(c.getFace())){
                    faces.put(c.getFace() , faces.get(c.getFace())+1);
                }
                else
                    faces.put(c.getFace() , 1);
            }
            return faces;
        }
        public Set<String> getSuitSet(){
            Set<String> suitSet = new HashSet<String>();
            for (Card c:cards){
                suitSet.add(c.getSuit());
            }
            return suitSet;
        }
        public Set<String> getSuitSet(String fsample){
            Set<String> suitSet = new HashSet<String>();
            for (Card c:cards){
                if (fsample.equals(c.getFace()))
                    suitSet.add(c.getSuit());
            }
            return suitSet;
        }
        public Set<Card> Singles(){
            Set<Card> single = new HashSet<Card>();
            Map<String,Integer> faces = getFaceCount();
            for (Card c:cards){
                if (faces.get(c.getFace()) == 1)
                    single.add(c);
            }
            return single;
        }
         public Set<Card> Doubles(){
            Set<Card> pairs = new HashSet<Card>();
            Map<String,Integer> faces = getFaceCount();
            for (Card c:cards){
                if (faces.get(c.getFace()) == 2)
                    pairs.add(c);
            }
            return pairs;
        }
         public Set<Card> Triples(){
            Set<Card> threes = new HashSet<Card>();
            Map<String,Integer> faces = getFaceCount();
            for (Card c:cards){
                if (faces.get(c.getFace()) == 3)
                    threes.add(c);
            }
            return threes;
         }
        
        
    }
    
}

@a1b2933073b339d6222858dcef4692c2@"
"r04945022","1","0.27","101568","@d91f53e637d8a368673d5b0c51d70229@
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    enum CardType {
        full_house , flush , straight , two_pair , one_pair , high
    }
    private CardType cardtype;
    public cardReq cardreq = new cardReq();

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
        this.setCardType();
//        return;
    }
    

    // TODO
    public int compareTo(Hand that) {
        return -1;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
    
    private static class CardTypeOrder implements Comparator<CardType> {
        private static List<CardType> order;
        CardTypeOrder() {
            CardType[] cardTypes = {
                    CardType.full_house,
                    CardType.flush,
                    CardType.straight,
                    CardType.two_pair,
                    CardType.one_pair,
                    CardType.high
            };
            order = new ArrayList<CardType>();
            for (CardType cardType : cardTypes) {
                order.add(cardType);
            }
        }

        @Override
        public int compare(CardType cardType1, CardType cardType2) {
            int cardType_1 = order.indexOf(cardType1);
            int cardType_2 = order.indexOf(cardType2);
            if (cardType_1 < cardType_2) return 1;
            else if (cardType_1 > cardType_2) return -1;
            else return 0;
        }
    }
    private void setCardType(){
        Map<String,Integer> faces = cardreq.getFaceCount();
        if (faces.size() == 2) {
            // (4,1) or (3,2)
            if (cardreq.Triples().size() != 0) {
                cardtype = CardType.full_house;
                return;
            }
            cardtype = CardType.high;
        } else if (faces.size() == 3){
            // (3,1,1) or (2,2,1)
            if (cardreq.Doubles().size() != 0) {
                cardtype = CardType.two_pair;
                return;
            }
            cardtype = CardType.high;
        } else if (faces.size() == 4){
            // (2,1,1,1)
            cardtype = CardType.one_pair;
        } else if (faces.size() == 5){
            // check for flush
            if (cardreq.getSuitSet().size() == 1) {
               cardtype = CardType.flush;
                return;
            }
            // check for straight
            String[] straights = {""A"",""K"",""Q"",""J"",""10"",""9"",""8"",""7"",""6"",""5"",""4"",""3"",""2"",""A""};
            Set<String> faceSet = faces.keySet();
            for(int i = 0; i < straights.length - 5 ; i++){
                Set<String> straightOne = new HashSet<String>();
                for(int j = i ; j < i + 5 ; j++){
                    straightOne.add(straights[j]);
                }
                if (faceSet.containsAll(straightOne)) {
                    cardtype = CardType.straight;
                    return;
                }
            }
            // high card otherwise
            cardtype = CardType.high;
        }
    }
    private class cardReq{
        public Map<String , Integer> getFaceCount(){
            Map<String,Integer> faces = new HashMap<String,Integer>();
            for(Card c:cards){
                if (faces.containsKey(c.getFace())){
                    faces.put(c.getFace() , faces.get(c.getFace())+1);
                }
                else
                    faces.put(c.getFace() , 1);
            }
            return faces;
        }
        public Set<String> getSuitSet(){
            Set<String> suitSet = new HashSet<String>();
            for (Card c:cards){
                suitSet.add(c.getSuit());
            }
            return suitSet;
        }
        public Set<String> getSuitSet(String fsample){
            Set<String> suitSet = new HashSet<String>();
            for (Card c:cards){
                if (fsample.equals(c.getFace()))
                    suitSet.add(c.getSuit());
            }
            return suitSet;
        }
        public Set<Card> Singles(){
            Set<Card> single = new HashSet<Card>();
            Map<String,Integer> faces = getFaceCount();
            for (Card c:cards){
                if (faces.get(c.getFace()) == 1)
                    single.add(c);
            }
            return single;
        }
         public Set<Card> Doubles(){
            Set<Card> pairs = new HashSet<Card>();
            Map<String,Integer> faces = getFaceCount();
            for (Card c:cards){
                if (faces.get(c.getFace()) == 2)
                    pairs.add(c);
            }
            return pairs;
        }
         public Set<Card> Triples(){
            Set<Card> threes = new HashSet<Card>();
            Map<String,Integer> faces = getFaceCount();
            for (Card c:cards){
                if (faces.get(c.getFace()) == 3)
                    threes.add(c);
            }
            return threes;
         }
        
        
    }
    
}

@d91f53e637d8a368673d5b0c51d70229@"
"r04945022","3","0.1","105616","@7e87fa8cd8f16e4bfa93af8392af99bb@import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Iterator;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    enum CardType {
        full_house , flush , straight , two_pair , one_pair , high
    }
    private CardType cardtype;
    public cardReq cardreq = new cardReq();
    private static CardTypeOrder CTO = new CardTypeOrder();
    

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
        this.setCardType();
//        return;
    }
    public CardType getCardType(){
        return cardtype;
    }

    // TODO
    public int compareTo(Hand that) {
        int result = CTO.compare(this.getCardType(), that.getCardType());
        if (result != 0){
            return result;
        } else {
            // broke ties
            switch (this.getCardType()) {
                case full_house:
                    Card c1 = Collections.max(this.cardreq.Triples());
                    Card c2 = Collections.max(that.cardreq.Triples());
                    return c1.compareTo(c2);

                case two_pair:
                case one_pair:
                    c1 = Collections.max(this.cardreq.Doubles());
                    c2 = Collections.max(that.cardreq.Doubles());
                    return c1.compareTo(c2);

                case high:
                    c1 = Collections.max(this.cardreq.Singles());
                    c2 = Collections.max(that.cardreq.Singles());
                    return c1.compareTo(c2);
                case straight:
                case flush:
                    c1 = Collections.max(this.cardreq.Singles());
                    c2 = Collections.max(that.cardreq.Singles());
                    return c1.compareTo(c2);
            }
        }
        return 0;
       
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
    
    private static class CardTypeOrder implements Comparator<CardType> {
        private static List<CardType> order;
        CardTypeOrder() {
            CardType[] cardTypes = {
                    CardType.full_house,
                    CardType.flush,
                    CardType.straight,
                    CardType.two_pair,
                    CardType.one_pair,
                    CardType.high
            };
            order = new ArrayList<CardType>();
            for (CardType cardType : cardTypes) {
                order.add(cardType);
            }
        }

        @Override
        public int compare(CardType cardType1, CardType cardType2) {
            int cardType_1 = order.indexOf(cardType1);
            int cardType_2 = order.indexOf(cardType2);
            if (cardType_1 < cardType_2) return 1;
            else if (cardType_1 > cardType_2) return -1;
            else return 0;
        }
    }
    private void setCardType(){
        Map<String,Integer> faces = cardreq.getFaceCount();
        if (faces.size() == 2) {
            // (4,1) or (3,2)
            if (cardreq.Triples().size() != 0) {
                cardtype = CardType.full_house;
                return;
            }
            cardtype = CardType.high;
        } else if (faces.size() == 3){
            // (3,1,1) or (2,2,1)
            if (cardreq.Doubles().size() != 0) {
                cardtype = CardType.two_pair;
                return;
            }
            cardtype = CardType.high;
        } else if (faces.size() == 4){
            // (2,1,1,1)
            cardtype = CardType.one_pair;
        } else if (faces.size() == 5){
            // check for flush
            if (cardreq.getSuitSet().size() == 1) {
               cardtype = CardType.flush;
                return;
            }
            // check for straight
            String[] straights = {""A"",""K"",""Q"",""J"",""10"",""9"",""8"",""7"",""6"",""5"",""4"",""3"",""2"",""A""};
            Set<String> faceSet = faces.keySet();
            for(int i = 0; i < straights.length - 5 ; i++){
                Set<String> straightOne = new HashSet<String>();
                for(int j = i ; j < i + 5 ; j++){
                    straightOne.add(straights[j]);
                }
                if (faceSet.containsAll(straightOne)) {
                    cardtype = CardType.straight;
                    return;
                }
            }
            // high card otherwise
            cardtype = CardType.high;
        }
    }
    private class cardReq{
        public Map<String , Integer> getFaceCount(){
            Map<String,Integer> faces = new HashMap<String,Integer>();
            for(Card c:cards){
                if (faces.containsKey(c.getFace())){
                    faces.put(c.getFace() , faces.get(c.getFace())+1);
                }
                else
                    faces.put(c.getFace() , 1);
            }
            return faces;
        }
        public Set<String> getSuitSet(){
            Set<String> suitSet = new HashSet<String>();
            for (Card c:cards){
                suitSet.add(c.getSuit());
            }
            return suitSet;
        }
        public Set<String> getSuitSet(String fsample){
            Set<String> suitSet = new HashSet<String>();
            for (Card c:cards){
                if (fsample.equals(c.getFace()))
                    suitSet.add(c.getSuit());
            }
            return suitSet;
        }
        public Set<Card> Singles(){
            Set<Card> single = new HashSet<Card>();
            Map<String,Integer> faces = getFaceCount();
            for (Card c:cards){
                if (faces.get(c.getFace()) == 1)
                    single.add(c);
            }
            return single;
        }
         public Set<Card> Doubles(){
            Set<Card> pairs = new HashSet<Card>();
            Map<String,Integer> faces = getFaceCount();
            for (Card c:cards){
                if (faces.get(c.getFace()) == 2)
                    pairs.add(c);
            }
            return pairs;
        }
         public Set<Card> Triples(){
            Set<Card> threes = new HashSet<Card>();
            Map<String,Integer> faces = getFaceCount();
            for (Card c:cards){
                if (faces.get(c.getFace()) == 3){
                    threes.add(c);
                }
            }
            return threes;
         }
        
        
    }
    
}

@7e87fa8cd8f16e4bfa93af8392af99bb@"
"b02611002","0","0.29","105520","@c2dd160bf2179abea438e4619bc40efa@import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards = new Card[5]; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards=cards;
    }

//    // TODO
//    public int compareTo(Hand that) {
//        return 0;
//    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }


    public int compareTo(Hand that) {
        // complete this function so the Hand can be sorted according to its cards.


        int[] hand={0,0}; //hand[1] for this, while hand[2] for that.

        boolean[] isFullHouse={false,false};
        int FHCounter=0;
        String[] FHThreeFace={""-1"",""-1""};//10 //9
        String[] FHTwoFace={""-1"",""-1""};//4 //A
        String[] tempFHTwoFace={""-1"",""-1""};

        boolean[] isFlush={false,false};
        int suitCombo[]={0,0};

        boolean[] isStraight={false,false};
        int faceCombo[]={0,0};

        boolean[] isTwoPair={false,false};

        boolean[] isOnePair={false,false};
        boolean doneOnce=false;

        Card[] THIS = this.cards;
        Card[] THAT = that.cards;
        for(int i=0;i<THIS.length;i++){
            if(THIS[i].getFace().equals(""A"")){
                THIS[i]=new Card(""14"",THIS[i].getSuit());
            }else if(THIS[i].getFace().equals(""J"")){
                THIS[i]=new Card(""11"",THIS[i].getSuit());
            }else if(THIS[i].getFace().equals(""Q"")){
                THIS[i]=new Card(""12"",THIS[i].getSuit());
            }else if(THIS[i].getFace().equals(""K"")){
                THIS[i]=new Card(""13"",THIS[i].getSuit());
            }
        }
        for(int i=0;i<THAT.length;i++){
            if(THAT[i].getFace().equals(""A"")){
                THAT[i]=new Card(""14"",THAT[i].getSuit());
            }else if(THAT[i].getFace().equals(""J"")){
                THAT[i]=new Card(""11"",THAT[i].getSuit());
            }else if(THAT[i].getFace().equals(""Q"")){
                THAT[i]=new Card(""12"",THAT[i].getSuit());
            }else if(THAT[i].getFace().equals(""K"")){
                THAT[i]=new Card(""13"",THAT[i].getSuit());
            }
        }





        Arrays.sort(THIS);
        Arrays.sort(THAT);







        int pID=0;
        Card[] now = THIS;

        for(int i =0;i<2;i++){
            if(pID==1) now=THAT;

            Card previous=new Card(""1"",""Spades"");
            FHCounter=0;
            suitCombo[pID]=0;
            faceCombo[pID]=0;
            FHThreeFace[pID]=""-1"";
            FHTwoFace[pID]=""-1"";
            tempFHTwoFace[pID]=""-1"";

            for(Card c:now){


                if(!doneOnce){
                    previous=c;
                    doneOnce=true;
                    break;
                }

                // check Card c

                // isFullHouse?
                {
                    if (previous.getFace() == c.getFace()) {
                        FHCounter++;
                    } else {
                        FHCounter = 1;
                    }

                    if (FHCounter == 3) {
                        FHThreeFace[pID] = c.getFace();
                        FHTwoFace[pID] = tempFHTwoFace[pID];
                    } else if (FHCounter == 2) {
                        tempFHTwoFace[pID] = FHTwoFace[pID];
                        FHTwoFace[pID] = c.getFace();
                    }
                }
                //is Flush
                {
                    if(previous.getSuit().equals(c.getSuit())){
                        suitCombo[pID]++;
                    }
                }
                //is Straight?
                {
                    if((Integer.parseInt(previous.getFace())-Integer.parseInt(c.getFace())==-1)
                            ||(Integer.parseInt(previous.getFace())-Integer.parseInt(c.getFace())==-9)){
                        faceCombo[pID]++;
                    }
                }
                previous=c;
            }
            hand[pID]=Integer.parseInt(now[4].getFace());

            if(!FHTwoFace[pID].equals(""-1"")){
                isOnePair[pID]=true;
                hand[pID]=20;
            }
            if(!tempFHTwoFace[pID].equals(""-1"") && !FHTwoFace[pID].equals(""-1"")){
                isTwoPair[pID]=true;
                hand[pID]=30;
            }
            if(faceCombo[pID]==4){
                isStraight[pID]=true;
                hand[pID]=40;
            }
            if(suitCombo[pID]==4){
                isFlush[pID]=true;
                hand[pID]=50;
            }
            if (!FHThreeFace[pID].equals(""-1"") && !FHTwoFace[pID].equals(""-1"")) {
                isFullHouse[pID]=true;
                hand[pID]=60;
            }
            pID++;
        }





        if(isFullHouse[0]&&isFullHouse[1]){
            if(Integer.parseInt(FHThreeFace[0])>Integer.parseInt(FHThreeFace[1])){
                hand[0]+=6;
            }else if(Integer.parseInt(FHThreeFace[0])<Integer.parseInt(FHThreeFace[1])){
                hand[1]+=6;
            }
        }

        if(isFlush[0]&&isFlush[1]){
            if(Integer.parseInt(THIS[4].getFace())>Integer.parseInt(THAT[4].getFace())){
                hand[0]+=5;
            }else if(Integer.parseInt(THIS[4].getFace())<Integer.parseInt(THAT[4].getFace())){
                hand[1]+=5;
            }
        }


        if(isStraight[0]&&isStraight[1]){
            if(Integer.parseInt(THIS[4].getFace())==14)hand[0]-=3;
            if(Integer.parseInt(THAT[4].getFace())==14)hand[0]-=3;
            if(Integer.parseInt(THIS[0].getFace())>Integer.parseInt(THAT[0].getFace())){
                hand[0]+=3;
            }else if(Integer.parseInt(THIS[0].getFace())<Integer.parseInt(THAT[0].getFace())) {
                hand[1]+=3;
            }
        }

        if(isTwoPair[0] && isTwoPair[1]){
            if(Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                hand[0]+=3;
            }else if (Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                hand[1]+=3;
            }
        }

        if(isOnePair[0] && isOnePair[1]){
            if(Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                hand[0]+=2;
            }else if (Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                hand[1]+=2;
            }
        }


        return hand[0]-hand[1];
    }
}

@c2dd160bf2179abea438e4619bc40efa@"
"b01b01039","0","0","0","@1339a1ee26c703694b73a151611ff815@import java.util.Arrays;
import java.util.Comparator;
import java.io.FileReader;
import java.io.BufferedReader;

public class Hand implements Comparable<Hand> {
	
	private String[]  FACE = {""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"", ""A""};
	private String[]  SUIT = {""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};	
    private int[] face;
	private int[] suit;
	// sorted by Card value are recommended but not necessary
    private Card[] cards; 
	private int[]  hand;
	
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        hand = new int[3];
		Arrays.sort(cards);
		this.face = SF2IF(cards);
		this.suit = SS2IF(cards);
		Hand_D();
		//return;
    }

    // TODO
    public int compareTo(Hand that) {
        if     (this.hand[0] > that.hand[0]) return  1;
		else if(this.hand[0] < that.hand[0]) return -1;
		else if(this.hand[1] > that.hand[1]) return  1;
		else if(this.hand[1] < that.hand[1]) return -1;
		else if(this.hand[2] > that.hand[2]) return  1;
		else if(this.hand[2] < that.hand[2]) return -1;
		return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
	
	public void get_hand() {
		System.out.printf(""%2d %2s %8s"", hand[0], FACE[hand[1]], SUIT[hand[2]]);
		System.out.println();
	}
	
	private int[] SF2IF(Card cards[]){
		int n = cards.length;
		int[] face = new int[n];
		for(int i = 0; i < n; i++){
			for(int j = 0; j < 13; j++){
				if(cards[i].getFace().equals(FACE[j])) face[i] = j;
			}
		}
		return face;
	}
	
	private int[] SS2IF(Card cards[]){
		int n = cards.length;
		int[] suit = new int[n];
		for(int i = 0; i < n; i++){
			for(int j = 0; j < 4; j++){
				if(cards[i].getSuit().equals(SUIT[j])) suit[i] = j;
			}
		}
		return suit;
	}
	
	private int IsFH(){
		if (this.face[0] == this.face[1] && this.face[1] == this.face[2]){
			if  (this.face[3] == this.face[4]) return   0;
			else                               return  -1;
		}else if (this.face[2] == this.face[3] && this.face[3] == this.face[4]){
			if  (this.face[0] == this.face[1]) return   2;
			else                               return  -1;
		}else{
			return -1;
		}
	}
	
	private int IsFl(){
		for(int i=0; i<4; i++){
			if(this.suit[i] != this.suit[i+1]) return -1;
		}
		return 4;
	}
	
	private int IsSt(){
		if(this.face[4] == 12 && this.face[0] == 0){  //2(0) 3(1) 4(2) 5(3) A(12)
			if(this.face[1] == 1 && this.face[2] == 2 && this.face[3] == 3) return  0;
			else                                                            return -1;
		}else{
			for(int i = 1; i < 5; i++){
				if(this.face[i] - this.face[i-1] != 1) break;
				if(i == 4)                             return 4;
			}
		}
		return -1;
	}
	
	private int Is2P(){
		if(this.face[0] == this.face[1]){
			if(this.face[2] == this.face[3]) return 3;
			if(this.face[3] == this.face[4]) return 4;
		}else if(this.face[1] == this.face[2]){
			if(this.face[3] == this.face[4]) return 4;
		}
		return -1;
	}
	
	private int Is1P(){
		if(this.face[0] == this.face[1]) return 1;
		if(this.face[1] == this.face[2]) return 2;
		if(this.face[2] == this.face[3]) return 3;
		if(this.face[3] == this.face[4]) return 4;
		return -1;
	}
	
	public void Hand_D(){
		int i = -1;
		int h = -1;
		if     (IsFH()>=0) {h = 5;i = IsFH();}
		else if(IsFl()>=0) {h = 4;i = IsFl();}
		else if(IsSt()>=0) {h = 3;i = IsSt();}
		else if(Is2P()>=0) {h = 2;i = Is2P();}
		else if(Is1P()>=0) {h = 1;i = Is1P();}
		else               {h = 0;i = 4;}
		this.hand[0] = h;
		this.hand[1] = face[i];
		this.hand[2] = suit[i];
	}
	
	
	public static void main(String[] args) throws Exception{
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            int idx = 0;
			String[] s = br.readLine().split("","");
            int handCount = Integer.parseInt(s[0]);
			int handNum   = Integer.parseInt(s[1]);
            
			Hand[] handArray = new Hand[handCount];
			
            for(String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
				handArray[idx++] = new Hand(cardsArray);
            }

			System.out.println(""Before arrange"");
			for(int i=0; i<handCount; i++){
				handArray[i].get_hand();
			}
			
			Arrays.sort(handArray);
			
			System.out.println(""After arrange"");
			for(int i=handCount-1; i>-1; i--){
				handArray[i].get_hand();
			}
		}
    }
}

@1339a1ee26c703694b73a151611ff815@"
"b01b01039","0","0","0","@95cfeb8a39ece42cc7c3f9fe6d20291e@import java.util.Arrays;
import java.util.Comparator;
import java.io.FileReader;
import java.io.BufferedReader;

public class Hand implements Comparable<Hand> {
	
	private String[]  FACE = {""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"", ""A""};
	private String[]  SUIT = {""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};	
    private int[] face;
	private int[] suit;
	// sorted by Card value are recommended but not necessary
    private Card[] cards; 
	private int[]  hand;
	
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        hand = new int[3];
		Arrays.sort(cards);
		this.face = SF2IF(cards);
		this.suit = SS2IF(cards);
		Hand_D();
		return;
    }

    // TODO
    public int compareTo(Hand that) {
        if     (this.hand[0] > that.hand[0]) return  1;
		else if(this.hand[0] < that.hand[0]) return -1;
		else if(this.hand[1] > that.hand[1]) return  1;
		else if(this.hand[1] < that.hand[1]) return -1;
		else if(this.hand[2] > that.hand[2]) return  1;
		else if(this.hand[2] < that.hand[2]) return -1;
		return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
	
	public void get_hand() {
		System.out.printf(""%2d %2s %8s"", hand[0], FACE[hand[1]], SUIT[hand[2]]);
		System.out.println();
	}
	
	private int[] SF2IF(Card cards[]){
		int n = cards.length;
		int[] face = new int[n];
		for(int i = 0; i < n; i++){
			for(int j = 0; j < 13; j++){
				if(cards[i].getFace().equals(FACE[j])) face[i] = j;
			}
		}
		return face;
	}
	
	private int[] SS2IF(Card cards[]){
		int n = cards.length;
		int[] suit = new int[n];
		for(int i = 0; i < n; i++){
			for(int j = 0; j < 4; j++){
				if(cards[i].getSuit().equals(SUIT[j])) suit[i] = j;
			}
		}
		return suit;
	}
	
	private int IsFH(){
		if (this.face[0] == this.face[1] && this.face[1] == this.face[2]){
			if  (this.face[3] == this.face[4]) return   0;
			else                               return  -1;
		}else if (this.face[2] == this.face[3] && this.face[3] == this.face[4]){
			if  (this.face[0] == this.face[1]) return   2;
			else                               return  -1;
		}else{
			return -1;
		}
	}
	
	private int IsFl(){
		for(int i=0; i<4; i++){
			if(this.suit[i] != this.suit[i+1]) return -1;
		}
		return 4;
	}
	
	private int IsSt(){
		if(this.face[4] == 12 && this.face[0] == 0){  //2(0) 3(1) 4(2) 5(3) A(12)
			if(this.face[1] == 1 && this.face[2] == 2 && this.face[3] == 3) return  0;
			else                                                            return -1;
		}else{
			for(int i = 1; i < 5; i++){
				if(this.face[i] - this.face[i-1] != 1) break;
				if(i == 4)                             return 4;
			}
		}
		return -1;
	}
	
	private int Is2P(){
		if(this.face[0] == this.face[1]){
			if(this.face[2] == this.face[3]) return 3;
			if(this.face[3] == this.face[4]) return 4;
		}else if(this.face[1] == this.face[2]){
			if(this.face[3] == this.face[4]) return 4;
		}
		return -1;
	}
	
	private int Is1P(){
		if(this.face[0] == this.face[1]) return 1;
		if(this.face[1] == this.face[2]) return 2;
		if(this.face[2] == this.face[3]) return 3;
		if(this.face[3] == this.face[4]) return 4;
		return -1;
	}
	
	public void Hand_D(){
		int i = -1;
		int h = -1;
		if     (IsFH()>=0) {h = 5;i = IsFH();}
		else if(IsFl()>=0) {h = 4;i = IsFl();}
		else if(IsSt()>=0) {h = 3;i = IsSt();}
		else if(Is2P()>=0) {h = 2;i = Is2P();}
		else if(Is1P()>=0) {h = 1;i = Is1P();}
		else               {h = 0;i = 4;}
		this.hand[0] = h;
		this.hand[1] = face[i];
		this.hand[2] = suit[i];
	}
	
	
	public static void main(String[] args) throws Exception{
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            int idx = 0;
			String[] s = br.readLine().split("","");
            int handCount = Integer.parseInt(s[0]);
			int handNum   = Integer.parseInt(s[1]);
            
			Hand[] handArray = new Hand[handCount];
			
            for(String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
				handArray[idx++] = new Hand(cardsArray);
            }

			System.out.println(""Before arrange"");
			for(int i=0; i<handCount; i++){
				handArray[i].get_hand();
			}
			
			Arrays.sort(handArray);
			
			System.out.println(""After arrange"");
			for(int i=handCount-1; i>-1; i--){
				handArray[i].get_hand();
			}
		}
    }
}

@95cfeb8a39ece42cc7c3f9fe6d20291e@"
"b01b01039","0","0","0","@c24d2040199a42e79c1498b4ae7469f6@import java.util.Arrays;
import java.util.Comparator;
import java.io.FileReader;
import java.io.BufferedReader;

public class Hand implements Comparable<Hand> {
	
	private String[]  FACE = {""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"", ""A""};
	private String[]  SUIT = {""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};	
    private int[] face;
	private int[] suit;
	// sorted by Card value are recommended but not necessary
    private Card[] cards; 
	private int[]  hand;
	
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        hand = new int[3];
		Arrays.sort(cards);
		this.face = SF2IF(cards);
		this.suit = SS2IF(cards);
		Hand_D();
		return;
    }

    // TODO
    public int compareTo(Hand that) {
        if     (this.hand[0] > that.hand[0]) return  1;
		else if(this.hand[0] < that.hand[0]) return -1;
		else if(this.hand[1] > that.hand[1]) return  1;
		else if(this.hand[1] < that.hand[1]) return -1;
		else if(this.hand[2] > that.hand[2]) return  1;
		else if(this.hand[2] < that.hand[2]) return -1;
		return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
	
	public void get_hand() {
		System.out.printf(""%2d %2s %8s"", hand[0], FACE[hand[1]], SUIT[hand[2]]);
		System.out.println();
	}
	
	private int[] SF2IF(Card cards[]){
		int n = cards.length;
		int[] face = new int[n];
		for(int i = 0; i < n; i++){
			for(int j = 0; j < 13; j++){
				if(cards[i].getFace().equals(FACE[j])) face[i] = j;
			}
		}
		return face;
	}
	
	private int[] SS2IF(Card cards[]){
		int n = cards.length;
		int[] suit = new int[n];
		for(int i = 0; i < n; i++){
			for(int j = 0; j < 4; j++){
				if(cards[i].getSuit().equals(SUIT[j])) suit[i] = j;
			}
		}
		return suit;
	}
	
	private int IsFH(){
		if (this.face[0] == this.face[1] && this.face[1] == this.face[2]){
			if  (this.face[3] == this.face[4]) return   0;
			else                               return  -1;
		}else if (this.face[2] == this.face[3] && this.face[3] == this.face[4]){
			if  (this.face[0] == this.face[1]) return   2;
			else                               return  -1;
		}else{
			return -1;
		}
	}
	
	private int IsFl(){
		for(int i=0; i<4; i++){
			if(this.suit[i] != this.suit[i+1]) return -1;
		}
		return 4;
	}
	
	private int IsSt(){
		if(this.face[4] == 12 && this.face[0] == 0){  //2(0) 3(1) 4(2) 5(3) A(12)
			if(this.face[1] == 1 && this.face[2] == 2 && this.face[3] == 3) return  0;
			else                                                            return -1;
		}else{
			for(int i = 1; i < 5; i++){
				if(this.face[i] - this.face[i-1] != 1) break;
				if(i == 4)                             return 4;
			}
		}
		return -1;
	}
	
	private int Is2P(){
		if(this.face[0] == this.face[1]){
			if(this.face[2] == this.face[3]) return 3;
			if(this.face[3] == this.face[4]) return 4;
		}else if(this.face[1] == this.face[2]){
			if(this.face[3] == this.face[4]) return 4;
		}
		return -1;
	}
	
	private int Is1P(){
		if(this.face[0] == this.face[1]) return 1;
		if(this.face[1] == this.face[2]) return 2;
		if(this.face[2] == this.face[3]) return 3;
		if(this.face[3] == this.face[4]) return 4;
		return -1;
	}
	
	public void Hand_D(){
		int i = -1;
		int h = -1;
		if     (IsFH()>=0) {h = 5;i = IsFH();}
		else if(IsFl()>=0) {h = 4;i = IsFl();}
		else if(IsSt()>=0) {h = 3;i = IsSt();}
		else if(Is2P()>=0) {h = 2;i = Is2P();}
		else if(Is1P()>=0) {h = 1;i = Is1P();}
		else               {h = 0;i = 4;}
		this.hand[0] = h;
		this.hand[1] = face[i];
		this.hand[2] = suit[i];
	}
	
	
	public static void main(String[] args) throws Exception{
        //System.out.println(""Yee"");
		/*try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            int idx = 0;
			String[] s = br.readLine().split("","");
            int handCount = Integer.parseInt(s[0]);
			int handNum   = Integer.parseInt(s[1]);
            
			Hand[] handArray = new Hand[handCount];
			
            for(String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
				handArray[idx++] = new Hand(cardsArray);
            }

			System.out.println(""Before arrange"");
			for(int i=0; i<handCount; i++){
				handArray[i].get_hand();
			}
			
			Arrays.sort(handArray);
			
			System.out.println(""After arrange"");
			for(int i=handCount-1; i>-1; i--){
				handArray[i].get_hand();
			}
		}*/
    }
}

@c24d2040199a42e79c1498b4ae7469f6@"
"b02611002","0","0","0","@3e995e0a798e85f5f665e8b48ef335c2@import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards = new Card[5];

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards=cards;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

    // TODO
    public int compareTo(Hand that) {
        // complete this function so the Hand can be sorted according to its cards.


        int[] scores={0,0}; //hand[1] for this, hand[2] for that.

        boolean[] isFullHouse={false,false};
        int FHCounter=0;
        String[] FHThreeFace={""-1"",""-1""};//10 //9
        String[] FHTwoFace={""-1"",""-1""};//4 //A
        String[] tempFHTwoFace={""-1"",""-1""};

        boolean[] isFlush={false,false};
        int suitCombo[]={0,0};

        boolean[] isStraight={false,false};
        int faceCombo[]={0,0};

        boolean[] isTwoPair={false,false};

        boolean[] isOnePair={false,false};
        boolean doneOnce=false;



        Card[] NThis = this.cards;  //cards in ""numerical"" expression (A->14, J->11, Q->12, K->13)
        Card[] NThat = that.cards;
        for(int i=0;i<NThis.length;i++){

            switch (NThis[i].getFace()){
                case ""A"": NThis[i]=new Card(""14"",NThis[i].getSuit());break;
                case ""J"": NThis[i]=new Card(""11"",NThis[i].getSuit());break;
                case ""Q"": NThis[i]=new Card(""12"",NThis[i].getSuit());break;
                case ""K"": NThis[i]=new Card(""13"",NThis[i].getSuit());break;
            }

            switch (NThat[i].getFace()){
                case ""A"": NThat[i]=new Card(""14"",NThis[i].getSuit());break;
                case ""J"": NThat[i]=new Card(""11"",NThis[i].getSuit());break;
                case ""Q"": NThat[i]=new Card(""12"",NThis[i].getSuit());break;
                case ""K"": NThat[i]=new Card(""13"",NThis[i].getSuit());break;
            }
        }


        Arrays.sort(NThis);
        //TODO remove
        System.out.println(""\n*Print NThis:"");
        for(Card c:NThis){
            System.out.println(c.getFace()+c.getSuit());
        }
        Arrays.sort(NThat);
        //TODO remove
        System.out.println(""*Print NThat:"");
        for(Card c:NThat){
            System.out.println(c.getFace()+c.getSuit());
        }


        int hID=0;
        Card[] currentHand = NThis;
        for(int i =0;i<2;i++){
            if(hID==1) currentHand=NThat;

            Card previous=new Card(""-1"",""NA"");
            FHCounter=0;
            suitCombo[hID]=0;
            faceCombo[hID]=0;
            FHThreeFace[hID]=""-1"";
            FHTwoFace[hID]=""-1"";
            tempFHTwoFace[hID]=""-1"";

            for(Card c:currentHand){


                if(!doneOnce){
                    previous=c;
                    doneOnce=true;
                    break;
                }

                // check Card c

                // isFullHouse?
                {
                    if (previous.getFace() == c.getFace()) {
                        FHCounter++;
                    } else {
                        FHCounter = 1;
                    }

                    if (FHCounter == 3) {
                        FHThreeFace[hID] = c.getFace();
                        FHTwoFace[hID] = tempFHTwoFace[hID];
                    } else if (FHCounter == 2) {
                        tempFHTwoFace[hID] = FHTwoFace[hID];
                        FHTwoFace[hID] = c.getFace();
                    }
                }
                //is Flush
                {
                    if(previous.getSuit().equals(c.getSuit())){
                        suitCombo[hID]++;
                    }
                }
                //is Straight?
                {
                    if((Integer.parseInt(previous.getFace())-Integer.parseInt(c.getFace())==-1)
                            ||(Integer.parseInt(previous.getFace())-Integer.parseInt(c.getFace())==-9)){
                        faceCombo[hID]++;
                    }
                }
                previous=c;
            }
            scores[hID]=Integer.parseInt(currentHand[4].getFace());

            if(!FHTwoFace[hID].equals(""-1"")){
                isOnePair[hID]=true;
                scores[hID]=20;
            }
            if(!tempFHTwoFace[hID].equals(""-1"") && !FHTwoFace[hID].equals(""-1"")){
                isTwoPair[hID]=true;
                scores[hID]=30;
            }
            if(faceCombo[hID]==4){
                isStraight[hID]=true;
                scores[hID]=40;
            }
            if(suitCombo[hID]==4){
                isFlush[hID]=true;
                scores[hID]=50;
            }
            if (!FHThreeFace[hID].equals(""-1"") && !FHTwoFace[hID].equals(""-1"")) {
                isFullHouse[hID]=true;
                scores[hID]=60;
            }
            hID++;
        }





        if(isFullHouse[0]&&isFullHouse[1]){
            if(Integer.parseInt(FHThreeFace[0])>Integer.parseInt(FHThreeFace[1])){
                scores[0]+=6;
            }else if(Integer.parseInt(FHThreeFace[0])<Integer.parseInt(FHThreeFace[1])){
                scores[1]+=6;
            }
        }

        if(isFlush[0]&&isFlush[1]){
            if(Integer.parseInt(NThis[4].getFace())>Integer.parseInt(NThat[4].getFace())){
                scores[0]+=5;
            }else if(Integer.parseInt(NThis[4].getFace())<Integer.parseInt(NThat[4].getFace())){
                scores[1]+=5;
            }
        }


        if(isStraight[0]&&isStraight[1]){
            if(Integer.parseInt(NThis[4].getFace())==14)scores[0]-=3;
            if(Integer.parseInt(NThat[4].getFace())==14)scores[0]-=3;
            if(Integer.parseInt(NThis[0].getFace())>Integer.parseInt(NThat[0].getFace())){
                scores[0]+=3;
            }else if(Integer.parseInt(NThis[0].getFace())<Integer.parseInt(NThat[0].getFace())) {
                scores[1]+=3;
            }
        }

        if(isTwoPair[0] && isTwoPair[1]){
            if(Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[0]+=3;
            }else if (Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[1]+=3;
            }
        }

        if(isOnePair[0] && isOnePair[1]){
            if(Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[0]+=2;
            }else if (Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[1]+=2;
            }
        }


        return scores[0]-scores[1];
    }
}

@3e995e0a798e85f5f665e8b48ef335c2@"
"b02611002","0","0","0","@963cffc2a237b503be4d64e7a163d487@import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards = new Card[5];

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards=cards;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

    // TODO
    public int compareTo(Hand that) {
        // complete this function so the Hand can be sorted according to its cards.


        int[] scores={0,0}; //hand[1] for this, hand[2] for that.

        boolean[] isFullHouse={false,false};
        int FHCounter=0;
        String[] FHThreeFace={""-1"",""-1""};//10 //9
        String[] FHTwoFace={""-1"",""-1""};//4 //A
        String[] tempFHTwoFace={""-1"",""-1""};

        boolean[] isFlush={false,false};
        int suitCombo[]={0,0};

        boolean[] isStraight={false,false};
        int faceCombo[]={0,0};

        boolean[] isTwoPair={false,false};

        boolean[] isOnePair={false,false};
        boolean doneOnce=false;



        Card[] NThis = this.cards;  //cards in ""numerical"" expression (A->14, J->11, Q->12, K->13)
        Card[] NThat = that.cards;
        for(int i=0;i<NThis.length;i++){

            switch (NThis[i].getFace()){
                case ""A"": NThis[i]=new Card(""14"",NThis[i].getSuit());break;
                case ""J"": NThis[i]=new Card(""11"",NThis[i].getSuit());break;
                case ""Q"": NThis[i]=new Card(""12"",NThis[i].getSuit());break;
                case ""K"": NThis[i]=new Card(""13"",NThis[i].getSuit());break;
            }

            switch (NThat[i].getFace()){
                case ""A"": NThat[i]=new Card(""14"",NThis[i].getSuit());break;
                case ""J"": NThat[i]=new Card(""11"",NThis[i].getSuit());break;
                case ""Q"": NThat[i]=new Card(""12"",NThis[i].getSuit());break;
                case ""K"": NThat[i]=new Card(""13"",NThis[i].getSuit());break;
            }
        }


        Arrays.sort(NThis);
        //TODO remove
        System.out.println(""\n*Print NThis:"");
        for(Card c:NThis){
            System.out.println(c.getFace()+c.getSuit());
        }
        Arrays.sort(NThat);
        //TODO remove
        System.out.println(""*Print NThat:"");
        for(Card c:NThat){
            System.out.println(c.getFace()+c.getSuit());
        }


        int hID=0;
        Card[] currentHand = NThis;
        for(int i =0;i<2;i++){
            if(hID==1) currentHand=NThat;

            Card previous=new Card(""1"",""NA"");
            FHCounter=0;
            suitCombo[hID]=0;
            faceCombo[hID]=0;
            FHThreeFace[hID]=""-1"";
            FHTwoFace[hID]=""-1"";
            tempFHTwoFace[hID]=""-1"";

            for(Card c:currentHand){


                if(!doneOnce){
                    previous=c;
                    doneOnce=true;
                    break;
                }

                // check Card c

                // isFullHouse?
                {
                    if (previous.getFace() == c.getFace()) {
                        FHCounter++;
                    } else {
                        FHCounter = 1;
                    }

                    if (FHCounter == 3) {
                        FHThreeFace[hID] = c.getFace();
                        FHTwoFace[hID] = tempFHTwoFace[hID];
                    } else if (FHCounter == 2) {
                        tempFHTwoFace[hID] = FHTwoFace[hID];
                        FHTwoFace[hID] = c.getFace();
                    }
                }
                //is Flush
                {
                    if(previous.getSuit().equals(c.getSuit())){
                        suitCombo[hID]++;
                    }
                }
                //is Straight?
                {
                    if((Integer.parseInt(previous.getFace())-Integer.parseInt(c.getFace())==-1)
                            ||(Integer.parseInt(previous.getFace())-Integer.parseInt(c.getFace())==-9)){
                        faceCombo[hID]++;
                    }
                }
                previous=c;
            }
            scores[hID]=Integer.parseInt(currentHand[4].getFace());

            if(!FHTwoFace[hID].equals(""-1"")){
                isOnePair[hID]=true;
                scores[hID]=20;
            }
            if(!tempFHTwoFace[hID].equals(""-1"") && !FHTwoFace[hID].equals(""-1"")){
                isTwoPair[hID]=true;
                scores[hID]=30;
            }
            if(faceCombo[hID]==4){
                isStraight[hID]=true;
                scores[hID]=40;
            }
            if(suitCombo[hID]==4){
                isFlush[hID]=true;
                scores[hID]=50;
            }
            if (!FHThreeFace[hID].equals(""-1"") && !FHTwoFace[hID].equals(""-1"")) {
                isFullHouse[hID]=true;
                scores[hID]=60;
            }
            hID++;
        }





        if(isFullHouse[0]&&isFullHouse[1]){
            if(Integer.parseInt(FHThreeFace[0])>Integer.parseInt(FHThreeFace[1])){
                scores[0]+=6;
            }else if(Integer.parseInt(FHThreeFace[0])<Integer.parseInt(FHThreeFace[1])){
                scores[1]+=6;
            }
        }

        if(isFlush[0]&&isFlush[1]){
            if(Integer.parseInt(NThis[4].getFace())>Integer.parseInt(NThat[4].getFace())){
                scores[0]+=5;
            }else if(Integer.parseInt(NThis[4].getFace())<Integer.parseInt(NThat[4].getFace())){
                scores[1]+=5;
            }
        }


        if(isStraight[0]&&isStraight[1]){
            if(Integer.parseInt(NThis[4].getFace())==14)scores[0]-=3;
            if(Integer.parseInt(NThat[4].getFace())==14)scores[0]-=3;
            if(Integer.parseInt(NThis[0].getFace())>Integer.parseInt(NThat[0].getFace())){
                scores[0]+=3;
            }else if(Integer.parseInt(NThis[0].getFace())<Integer.parseInt(NThat[0].getFace())) {
                scores[1]+=3;
            }
        }

        if(isTwoPair[0] && isTwoPair[1]){
            if(Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[0]+=3;
            }else if (Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[1]+=3;
            }
        }

        if(isOnePair[0] && isOnePair[1]){
            if(Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[0]+=2;
            }else if (Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[1]+=2;
            }
        }


        return scores[0]-scores[1];
    }
}

@963cffc2a237b503be4d64e7a163d487@"
"r04631025","0","0","0","@6810f6ebabf5177c2cc352581c6bfde2@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
     
    private Card[] cards = new Card[5];
    private String name;
    public Card[] HighCard = new Card[1] ;

    // TODO, Judge System will call this constructor once for each hand
     public void HighCard (Card cards) {
        this.HighCard[0] = cards;
    }
        public boolean isFullHouse(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards);
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace()))
                    this.HighCard(Cards[0]) ;
                return true ;
            }
            else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                    this.HighCard(Cards[4]) ;
                    return true ;
                }
            }
        }
        return false ;
    }
    public boolean isFlush(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getSuit().equalsIgnoreCase(Cards[1].getSuit())){
            if(Cards[1].getSuit().equalsIgnoreCase(Cards[2].getSuit())){
                if(Cards[2].getSuit().equalsIgnoreCase(Cards[3].getSuit())){
                 if(Cards[3].getSuit().equalsIgnoreCase(Cards[4].getSuit())){
                        this.HighCard(Cards[4]) ;
            return true ;
                    }
                }
            }
        }
            return false ;
        }
    public boolean isStraight(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
      
        MergeX.sort(Cards);
        Integer[] a1 = new Integer[Cards.length] ;
        for(int i = 0 ; i < 5 ; i++){
            if(Cards[i].getFace().equalsIgnoreCase(""J""))
                a1[i] = 11 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""Q""))
                a1[i] = 12 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""K""))
                a1[i] = 13 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""A""))
                a1[i] = 14 ;
            else
            a1[i] = Integer.parseInt(Cards[i].getFace());            
        }
        if(a1[1]==a1[0]+1){
            if(a1[2] == a1[1]+1){
                if(a1[3]== a1[2]+1){
                    if(a1[4] == a1[3]+1){
                        this.HighCard(Cards[4]) ;
                        return true ;
                    }
                }
            }
        }
        else if(a1[0]==2){
            if(a1[1]==3){
                if(a1[2]==4){
                    if(a1[3]==5){
                        if(a1[4]==14){
                            this.HighCard(Cards[3]) ;
                            return true ;
                        }
                    }
                }
            }
        }
        return false ;
    }
    public boolean isTwoPair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                this.HighCard(Cards[3]) ;
                return true ;
            }
            else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
       }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
        }
        return false;
    }
    public boolean isOnePair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            this.HighCard(Cards[1]) ;
            return true ;
        }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            this.HighCard(Cards[2]) ;
            return true ;
        }
        else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
            this.HighCard(Cards[3]) ;
            return true ;
        }
        else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
            this.HighCard(Cards[4]) ;
            return true ;
        }
        
        return false ;
    } 
    public Hand(Card[] cards){
        
        
        return;
    }

    // TODO
    public int compareTo(Hand that) {
            int[] Points = new int [2] ;
            if(this.isFullHouse())
                Points[0] = 60 ;
            
            else if(this.isFlush())
                Points[0] = 50 ;
            
            else if(this.isStraight())
                Points[0] = 40 ;
            
            else if(this.isTwoPair()){
                Points[0] = 30 ;
            }
            else if(this.isOnePair()){
                Points[0] = 20 ;
            
            }
            else
                Points[0] = 10 ;
            
            
            if(that.isFullHouse())
                Points[1] = 60 ;
            
            else if(that.isFlush())
                Points[1] = 50 ;
            
            else if(that.isStraight())
                Points[1] = 40 ;
            
            else if(that.isTwoPair()){
                Points[1] = 30 ;
            }
            else if(that.isOnePair()){
                Points[1] = 20 ;

    }
            else 
                Points[1] = 10 ;
            
//            System.out.println(Points[0]+"" ""+Points[1] ) ;
            
            if(Points[0]>Points[1])
                return 1 ;
            else if(Points[0]<Points[1])
                return -1 ;
            
            else if(Points[0]==Points[1])
            if(Points[0] == 10){
                MergeX.sort(this.cards);
                MergeX.sort(that.cards);
                this.HighCard(this.cards[4]) ;
                that.HighCard(that.cards[4]) ;
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
                }
            else 
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
            return 0 ;
    }
    

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@6810f6ebabf5177c2cc352581c6bfde2@"
"r04631025","0","0","0","@986783f6e23bb3af5501d1d21e7ae973@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
     
    private Card[] cards ;
    public Card[] HighCard = new Card[1] ;

    // TODO, Judge System will call this constructor once for each hand
     public void HighCard (Card cards) {
        this.HighCard[0] = cards;
    }
        public boolean isFullHouse(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards);
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace()))
                    this.HighCard(Cards[0]) ;
                return true ;
            }
            else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                    this.HighCard(Cards[4]) ;
                    return true ;
                }
            }
        }
        return false ;
    }
    public boolean isFlush(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getSuit().equalsIgnoreCase(Cards[1].getSuit())){
            if(Cards[1].getSuit().equalsIgnoreCase(Cards[2].getSuit())){
                if(Cards[2].getSuit().equalsIgnoreCase(Cards[3].getSuit())){
                 if(Cards[3].getSuit().equalsIgnoreCase(Cards[4].getSuit())){
                        this.HighCard(Cards[4]) ;
            return true ;
                    }
                }
            }
        }
            return false ;
        }
    public boolean isStraight(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
      
        MergeX.sort(Cards);
        Integer[] a1 = new Integer[Cards.length] ;
        for(int i = 0 ; i < 5 ; i++){
            if(Cards[i].getFace().equalsIgnoreCase(""J""))
                a1[i] = 11 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""Q""))
                a1[i] = 12 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""K""))
                a1[i] = 13 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""A""))
                a1[i] = 14 ;
            else
            a1[i] = Integer.parseInt(Cards[i].getFace());            
        }
        if(a1[1]==a1[0]+1){
            if(a1[2] == a1[1]+1){
                if(a1[3]== a1[2]+1){
                    if(a1[4] == a1[3]+1){
                        this.HighCard(Cards[4]) ;
                        return true ;
                    }
                }
            }
        }
        else if(a1[0]==2){
            if(a1[1]==3){
                if(a1[2]==4){
                    if(a1[3]==5){
                        if(a1[4]==14){
                            this.HighCard(Cards[3]) ;
                            return true ;
                        }
                    }
                }
            }
        }
        return false ;
    }
    public boolean isTwoPair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                this.HighCard(Cards[3]) ;
                return true ;
            }
            else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
       }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
        }
        return false;
    }
    public boolean isOnePair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            this.HighCard(Cards[1]) ;
            return true ;
        }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            this.HighCard(Cards[2]) ;
            return true ;
        }
        else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
            this.HighCard(Cards[3]) ;
            return true ;
        }
        else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
            this.HighCard(Cards[4]) ;
            return true ;
        }
        
        return false ;
    } 
    public Hand(Card[] cards){
        return;
    }

    // TODO
    public int compareTo(Hand that) {
            int[] Points = new int [2] ;
            if(this.isFullHouse())
                Points[0] = 60 ;
            
            else if(this.isFlush())
                Points[0] = 50 ;
            
            else if(this.isStraight())
                Points[0] = 40 ;
            
            else if(this.isTwoPair()){
                Points[0] = 30 ;
            }
            else if(this.isOnePair()){
                Points[0] = 20 ;
            
            }
            else
                Points[0] = 10 ;
            
            
            if(that.isFullHouse())
                Points[1] = 60 ;
            
            else if(that.isFlush())
                Points[1] = 50 ;
            
            else if(that.isStraight())
                Points[1] = 40 ;
            
            else if(that.isTwoPair()){
                Points[1] = 30 ;
            }
            else if(that.isOnePair()){
                Points[1] = 20 ;

    }
            else 
                Points[1] = 10 ;
            
//            System.out.println(Points[0]+"" ""+Points[1] ) ;
            
            if(Points[0]>Points[1])
                return 1 ;
            else if(Points[0]<Points[1])
                return -1 ;
            
            else if(Points[0]==Points[1])
            if(Points[0] == 10){
                MergeX.sort(this.cards);
                MergeX.sort(that.cards);
                this.HighCard(this.cards[4]) ;
                that.HighCard(that.cards[4]) ;
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
                }
            else 
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
            return 0 ;
    }
    

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@986783f6e23bb3af5501d1d21e7ae973@"
"r04631025","0","0","0","@5bc2fe40fa0dec15eb70ee5aed325dd6@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards ;
    public Card[] HighCard = new Card[1] ;
    public void HighCard (Card cards) {
        this.HighCard[0] = cards;
         }
    // TODO, Judge System will call this constructor once for each hand

     
    public Hand(Card[] cards){
        return;
    }
    public boolean isFullHouse(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards);
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace()))
                    this.HighCard(Cards[0]) ;
                return true ;
            }
            else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                    this.HighCard(Cards[4]) ;
                    return true ;
                }
            }
        }
        return false ;
    }
    public boolean isFlush(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getSuit().equalsIgnoreCase(Cards[1].getSuit())){
            if(Cards[1].getSuit().equalsIgnoreCase(Cards[2].getSuit())){
                if(Cards[2].getSuit().equalsIgnoreCase(Cards[3].getSuit())){
                 if(Cards[3].getSuit().equalsIgnoreCase(Cards[4].getSuit())){
                        this.HighCard(Cards[4]) ;
            return true ;
                    }
                }
            }
        }
            return false ;
        }
    public boolean isStraight(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
      
        MergeX.sort(Cards);
        Integer[] a1 = new Integer[Cards.length] ;
        for(int i = 0 ; i < 5 ; i++){
            if(Cards[i].getFace().equalsIgnoreCase(""J""))
                a1[i] = 11 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""Q""))
                a1[i] = 12 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""K""))
                a1[i] = 13 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""A""))
                a1[i] = 14 ;
            else
            a1[i] = Integer.parseInt(Cards[i].getFace());            
        }
        if(a1[1]==a1[0]+1){
            if(a1[2] == a1[1]+1){
                if(a1[3]== a1[2]+1){
                    if(a1[4] == a1[3]+1){
                        this.HighCard(Cards[4]) ;
                        return true ;
                    }
                }
            }
        }
        else if(a1[0]==2){
            if(a1[1]==3){
                if(a1[2]==4){
                    if(a1[3]==5){
                        if(a1[4]==14){
                            this.HighCard(Cards[3]) ;
                            return true ;
                        }
                    }
                }
            }
        }
        return false ;
    }
    public boolean isTwoPair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                this.HighCard(Cards[3]) ;
                return true ;
            }
            else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
       }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
        }
        return false;
    }
    public boolean isOnePair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            this.HighCard(Cards[1]) ;
            return true ;
        }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            this.HighCard(Cards[2]) ;
            return true ;
        }
        else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
            this.HighCard(Cards[3]) ;
            return true ;
        }
        else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
            this.HighCard(Cards[4]) ;
            return true ;
        }
        
        return false ;
    } 

    // TODO
    public int compareTo(Hand that) {
            int[] Points = new int [2] ;
            if(this.isFullHouse())
                Points[0] = 60 ;
            
            else if(this.isFlush())
                Points[0] = 50 ;
            
            else if(this.isStraight())
                Points[0] = 40 ;
            
            else if(this.isTwoPair()){
                Points[0] = 30 ;
            }
            else if(this.isOnePair()){
                Points[0] = 20 ;
            
            }
            else
                Points[0] = 10 ;
            
            
            if(that.isFullHouse())
                Points[1] = 60 ;
            
            else if(that.isFlush())
                Points[1] = 50 ;
            
            else if(that.isStraight())
                Points[1] = 40 ;
            
            else if(that.isTwoPair()){
                Points[1] = 30 ;
            }
            else if(that.isOnePair()){
                Points[1] = 20 ;

    }
            else 
                Points[1] = 10 ;
            
//            System.out.println(Points[0]+"" ""+Points[1] ) ;
            
            if(Points[0]>Points[1])
                return 1 ;
            else if(Points[0]<Points[1])
                return -1 ;
            
            else if(Points[0]==Points[1])
            if(Points[0] == 10){
                MergeX.sort(this.cards);
                MergeX.sort(that.cards);
                this.HighCard(this.cards[4]) ;
                that.HighCard(that.cards[4]) ;
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
                }
            else 
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
            return 0 ;
    }
    

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@5bc2fe40fa0dec15eb70ee5aed325dd6@"
"r04631025","0","0","0","@8ca10d48ba5411b2d9a0758e52776504@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards;
    public Card[] HighCard = new Card[1];

    public void HighCard(Card cards) {
        this.HighCard[0] = cards;
    }
    // TODO, Judge System will call this constructor once for each hand

    public Hand(Card[] cards) {
        return;
    }

    public boolean isFullHouse() {
        Card[] Cards = new Card[5];
        Cards = this.cards;
        MergeX.sort(Cards);
        if (Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())) {
            if (Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())) {
                if (Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())) {
                    this.HighCard(Cards[0]);
                }
                return true;
            } else if (Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())) {
                if (Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())) {
                    this.HighCard(Cards[4]);
                    return true;
                }
            }
        }
        return false;
    }

    public boolean isFlush() {
        Card[] Cards = new Card[5];
        Cards = this.cards;
        MergeX.sort(Cards);
        if (Cards[0].getSuit().equalsIgnoreCase(Cards[1].getSuit())) {
            if (Cards[1].getSuit().equalsIgnoreCase(Cards[2].getSuit())) {
                if (Cards[2].getSuit().equalsIgnoreCase(Cards[3].getSuit())) {
                    if (Cards[3].getSuit().equalsIgnoreCase(Cards[4].getSuit())) {
                        this.HighCard(Cards[4]);
                        return true;
                    }
                }
            }
        }
        return false;
    }

    public boolean isStraight() {
        Card[] Cards = new Card[5];
        Cards = this.cards;

        MergeX.sort(Cards);
        Integer[] a1 = new Integer[Cards.length];
        for (int i = 0; i < 5; i++) {
            if (Cards[i].getFace().equalsIgnoreCase(""J"")) {
                a1[i] = 11;
            } else if (Cards[i].getFace().equalsIgnoreCase(""Q"")) {
                a1[i] = 12;
            } else if (Cards[i].getFace().equalsIgnoreCase(""K"")) {
                a1[i] = 13;
            } else if (Cards[i].getFace().equalsIgnoreCase(""A"")) {
                a1[i] = 14;
            } else {
                a1[i] = Integer.parseInt(Cards[i].getFace());
            }
        }
        if (a1[1] == a1[0] + 1) {
            if (a1[2] == a1[1] + 1) {
                if (a1[3] == a1[2] + 1) {
                    if (a1[4] == a1[3] + 1) {
                        this.HighCard(Cards[4]);
                        return true;
                    }
                }
            }
        } else if (a1[0] == 2) {
            if (a1[1] == 3) {
                if (a1[2] == 4) {
                    if (a1[3] == 5) {
                        if (a1[4] == 14) {
                            this.HighCard(Cards[3]);
                            return true;
                        }
                    }
                }
            }
        }
        return false;
    }

    public boolean isTwoPair() {
        Card[] Cards = new Card[5];
        Cards = this.cards;
        MergeX.sort(Cards);
        if (Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())) {
            if (Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())) {
                this.HighCard(Cards[3]);
                return true;
            } else if (Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())) {
                this.HighCard(Cards[4]);
                return true;
            }
        } else if (Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())) {
            if (Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())) {
                this.HighCard(Cards[4]);
                return true;
            }
        }
        return false;
    }

    public boolean isOnePair() {
        Card[] Cards = new Card[5];
        Cards = this.cards;
        MergeX.sort(Cards);
        if (Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())) {
            this.HighCard(Cards[1]);
            return true;
        } else if (Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())) {
            this.HighCard(Cards[2]);
            return true;
        } else if (Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())) {
            this.HighCard(Cards[3]);
            return true;
        } else if (Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())) {
            this.HighCard(Cards[4]);
            return true;
        }

        return false;
    }

    // TODO
    public int compareTo(Hand that) {
        int[] Points = new int[2];
        if (this.isFullHouse()) {
            Points[0] = 60;
        } else if (this.isFlush()) {
            Points[0] = 50;
        } else if (this.isStraight()) {
            Points[0] = 40;
        } else if (this.isTwoPair()) {
            Points[0] = 30;
        } else if (this.isOnePair()) {
            Points[0] = 20;

        } else {
            Points[0] = 10;
        }

        if (that.isFullHouse()) {
            Points[1] = 60;
        } else if (that.isFlush()) {
            Points[1] = 50;
        } else if (that.isStraight()) {
            Points[1] = 40;
        } else if (that.isTwoPair()) {
            Points[1] = 30;
        } else if (that.isOnePair()) {
            Points[1] = 20;

        } else {
            Points[1] = 10;
        }

//            System.out.println(Points[0]+"" ""+Points[1] ) ;
        if (Points[0] > Points[1]) {
            return 1;
        } else if (Points[0] < Points[1]) {
            return -1;
        } else if (Points[0] == Points[1]) {
            if (Points[0] == 10) {
                MergeX.sort(this.cards);
                MergeX.sort(that.cards);
                this.HighCard(this.cards[4]);
                that.HighCard(that.cards[4]);
                return (this.HighCard[0].compareTo(that.HighCard[0]));
            } else {
                return (this.HighCard[0].compareTo(that.HighCard[0]));
            }
        }
        return 0;
    }

    // Do not modified this function
    public Card[] getCards() {
        return this.cards;
    }
};

@8ca10d48ba5411b2d9a0758e52776504@"
"r04631025","0","0","0","@b0284f0ba9a3229cbc1e975f04c79033@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    public Card[] HighCard = new Card[1] ;
    public void HighCard (Card cards) {
        this.HighCard[0] = cards;
    }
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){

        return;
    }
 public boolean isFullHouse(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards);
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace()))
                    this.HighCard(Cards[0]) ;
                return true ;
            }
            else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                    this.HighCard(Cards[4]) ;
                    return true ;
                }
            }
        }
        return false ;
    }
    public boolean isFlush(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getSuit().equalsIgnoreCase(Cards[1].getSuit())){
            if(Cards[1].getSuit().equalsIgnoreCase(Cards[2].getSuit())){
                if(Cards[2].getSuit().equalsIgnoreCase(Cards[3].getSuit())){
                 if(Cards[3].getSuit().equalsIgnoreCase(Cards[4].getSuit())){
                        this.HighCard(Cards[4]) ;
            return true ;
                    }
                }
            }
        }
            return false ;
        }
    public boolean isStraight(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
      
        MergeX.sort(Cards);
        Integer[] a1 = new Integer[Cards.length] ;
        for(int i = 0 ; i < 5 ; i++){
            if(Cards[i].getFace().equalsIgnoreCase(""J""))
                a1[i] = 11 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""Q""))
                a1[i] = 12 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""K""))
                a1[i] = 13 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""A""))
                a1[i] = 14 ;
            else
            a1[i] = Integer.parseInt(Cards[i].getFace());            
        }
        if(a1[1]==a1[0]+1){
            if(a1[2] == a1[1]+1){
                if(a1[3]== a1[2]+1){
                    if(a1[4] == a1[3]+1){
                        this.HighCard(Cards[4]) ;
                        return true ;
                    }
                }
            }
        }
        else if(a1[0]==2){
            if(a1[1]==3){
                if(a1[2]==4){
                    if(a1[3]==5){
                        if(a1[4]==14){
                            this.HighCard(Cards[3]) ;
                            return true ;
                        }
                    }
                }
            }
        }
        return false ;
    }
    public boolean isTwoPair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                this.HighCard(Cards[3]) ;
                return true ;
            }
            else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
       }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
        }
        return false;
    }
    public boolean isOnePair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            this.HighCard(Cards[1]) ;
            return true ;
        }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            this.HighCard(Cards[2]) ;
            return true ;
        }
        else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
            this.HighCard(Cards[3]) ;
            return true ;
        }
        else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
            this.HighCard(Cards[4]) ;
            return true ;
        }
        
        return false ;
    }
    // TODO
    public int compareTo(Hand that) {
        int[] Points = new int [2] ;
            if(this.isFullHouse())
                Points[0] = 60 ;
            
            else if(this.isFlush())
                Points[0] = 50 ;
            
            else if(this.isStraight())
                Points[0] = 40 ;
            
            else if(this.isTwoPair()){
                Points[0] = 30 ;
            }
            else if(this.isOnePair()){
                Points[0] = 20 ;
            
            }
            else
                Points[0] = 10 ;
            
            
            if(that.isFullHouse())
                Points[1] = 60 ;
            
            else if(that.isFlush())
                Points[1] = 50 ;
            
            else if(that.isStraight())
                Points[1] = 40 ;
            
            else if(that.isTwoPair()){
                Points[1] = 30 ;
            }
            else if(that.isOnePair()){
                Points[1] = 20 ;

    }
            else 
                Points[1] = 10 ;
            
//            System.out.println(Points[0]+"" ""+Points[1] ) ;
            
            if(Points[0]>Points[1])
                return 1 ;
            else if(Points[0]<Points[1])
                return -1 ;
            
            else if(Points[0]==Points[1])
            if(Points[0] == 10){
                MergeX.sort(this.cards);
                MergeX.sort(that.cards);
                this.HighCard(this.cards[4]) ;
                that.HighCard(that.cards[4]) ;
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
                }
            else 
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
            return 0 ;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}
;
@b0284f0ba9a3229cbc1e975f04c79033@"
"r04631025","0","0","0","@b0284f0ba9a3229cbc1e975f04c79033@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    public Card[] HighCard = new Card[1] ;
    public void HighCard (Card cards) {
        this.HighCard[0] = cards;
    }
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){

        return;
    }
 public boolean isFullHouse(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards);
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace()))
                    this.HighCard(Cards[0]) ;
                return true ;
            }
            else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                    this.HighCard(Cards[4]) ;
                    return true ;
                }
            }
        }
        return false ;
    }
    public boolean isFlush(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getSuit().equalsIgnoreCase(Cards[1].getSuit())){
            if(Cards[1].getSuit().equalsIgnoreCase(Cards[2].getSuit())){
                if(Cards[2].getSuit().equalsIgnoreCase(Cards[3].getSuit())){
                 if(Cards[3].getSuit().equalsIgnoreCase(Cards[4].getSuit())){
                        this.HighCard(Cards[4]) ;
            return true ;
                    }
                }
            }
        }
            return false ;
        }
    public boolean isStraight(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
      
        MergeX.sort(Cards);
        Integer[] a1 = new Integer[Cards.length] ;
        for(int i = 0 ; i < 5 ; i++){
            if(Cards[i].getFace().equalsIgnoreCase(""J""))
                a1[i] = 11 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""Q""))
                a1[i] = 12 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""K""))
                a1[i] = 13 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""A""))
                a1[i] = 14 ;
            else
            a1[i] = Integer.parseInt(Cards[i].getFace());            
        }
        if(a1[1]==a1[0]+1){
            if(a1[2] == a1[1]+1){
                if(a1[3]== a1[2]+1){
                    if(a1[4] == a1[3]+1){
                        this.HighCard(Cards[4]) ;
                        return true ;
                    }
                }
            }
        }
        else if(a1[0]==2){
            if(a1[1]==3){
                if(a1[2]==4){
                    if(a1[3]==5){
                        if(a1[4]==14){
                            this.HighCard(Cards[3]) ;
                            return true ;
                        }
                    }
                }
            }
        }
        return false ;
    }
    public boolean isTwoPair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                this.HighCard(Cards[3]) ;
                return true ;
            }
            else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
       }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
        }
        return false;
    }
    public boolean isOnePair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            this.HighCard(Cards[1]) ;
            return true ;
        }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            this.HighCard(Cards[2]) ;
            return true ;
        }
        else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
            this.HighCard(Cards[3]) ;
            return true ;
        }
        else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
            this.HighCard(Cards[4]) ;
            return true ;
        }
        
        return false ;
    }
    // TODO
    public int compareTo(Hand that) {
        int[] Points = new int [2] ;
            if(this.isFullHouse())
                Points[0] = 60 ;
            
            else if(this.isFlush())
                Points[0] = 50 ;
            
            else if(this.isStraight())
                Points[0] = 40 ;
            
            else if(this.isTwoPair()){
                Points[0] = 30 ;
            }
            else if(this.isOnePair()){
                Points[0] = 20 ;
            
            }
            else
                Points[0] = 10 ;
            
            
            if(that.isFullHouse())
                Points[1] = 60 ;
            
            else if(that.isFlush())
                Points[1] = 50 ;
            
            else if(that.isStraight())
                Points[1] = 40 ;
            
            else if(that.isTwoPair()){
                Points[1] = 30 ;
            }
            else if(that.isOnePair()){
                Points[1] = 20 ;

    }
            else 
                Points[1] = 10 ;
            
//            System.out.println(Points[0]+"" ""+Points[1] ) ;
            
            if(Points[0]>Points[1])
                return 1 ;
            else if(Points[0]<Points[1])
                return -1 ;
            
            else if(Points[0]==Points[1])
            if(Points[0] == 10){
                MergeX.sort(this.cards);
                MergeX.sort(that.cards);
                this.HighCard(this.cards[4]) ;
                that.HighCard(that.cards[4]) ;
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
                }
            else 
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
            return 0 ;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}
;
@b0284f0ba9a3229cbc1e975f04c79033@"
"r04631013","0","0","0","@e85c4cdd39851305c85d45c9f3b15d55@
import java.util.Arrays;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
       cards = new Card[5];
       Arrays.sort(cards);
    }

    // TODO
    public int compareTo(Hand that) {
   Arrays.sort(this.cards);
        Arrays.sort(that.cards);
        int flower_a[] = new int[2];
        flower_a[0] = 0;
        flower_a[1] = 0;
        for (int k = 0; k < 2; k++) {
            int my[] = new int[5];
            Card[] see = new Card[5];
            switch (k) {
                case 0:
                    see = this.cards;
                    break;
                case 1:
                    see = that.cards;
            }
            for (int i = 0; i < 5; i++) {
                if (""J"".equals(see[i].getFace())) {
                    my[i] = 11;
                } else if (""Q"".equals(see[i].getFace())) {
                    my[i] = 12;
                } else if (""K"".equals(see[i].getFace())) {
                    my[i] = 13;
                } else if (""A"".equals(see[i].getFace())) {
                    my[i] = 14;
                } else {
                    my[i] = Integer.parseInt(see[i].getFace());
                }
// System.out.printf(""%d\n "", my[i]);
            }
            int my_2[] = new int[5];
            my_2[0] = my[4];
            for (int i = 0; i < 4; i++) {
                my_2[i + 1] = my[i];
            }
            int save_0 = 0;
            int save_1 = 0;
// culmulate how many 1 and 0
            for (int i = 0; i < 5; i++) {
                int temp = my_2[i] - my[i];
                if (temp == 0) {
                    save_0 = save_0 + 1;
                } else if (temp == -1) {
                    save_1 = save_1 + 1;
                }
            }
//            System.out.printf(""%d\n "", save_0);
//            System.out.printf(""%d\n "", save_1);
            
            
            if (save_0 == 3) {
                flower_a[k] = 6;
            } 
            if (see[0].getSuit().equals(see[1].getSuit())) {
                if (see[1].getSuit().equals(see[2].getSuit())) {
                    if (see[2].getSuit().equals(see[3].getSuit())) {
                        if (see[3].getSuit().equals(see[4].getSuit())) {
                            flower_a[k] = 5;

                        }
                    }
                }
            } 
            if (save_1 == 4) {
                if (flower_a[k] != 5) {
                    flower_a[k] = 4;
                }
            } else if (save_1 == 3) {
                if (""A"".equals(see[4].getFace())) {
                    flower_a[k] = 4;
                }
            } else if (save_0 == 2) {
                if (see[0].getFace().equals(see[1].getFace()) && see[1].getFace().equals(see[2].getFace())) {
                    flower_a[k] = 2;
                } else if (see[1].getFace().equals(see[2].getFace()) && see[2].getFace().equals(see[3].getFace())) {
                    flower_a[k] = 2;
                } else if (see[2].getFace().equals(see[3].getFace()) && see[3].getFace().equals(see[4].getFace())) {
                    flower_a[k] = 2;
                } else {
                    flower_a[k] = 3;
                }
            } else if (save_0 == 1) {
                flower_a[k] = 2;
            } else {
                flower_a[k] = 1;
            }
//            System.out.printf(""%d\n "", flower_a[k]);

        }

        int roo = 0;
        if (flower_a[0] > flower_a[1]) {
            return 1;
        } else if (flower_a[0] < flower_a[1]) {
            return -1;
        } else {
            if (flower_a[0] == 6) {
                int a;
                int b;
                if (this.cards[0].getFace().equals(this.cards[1].getFace()) && this.cards[1].getFace().equals(this.cards[2].getFace())) {
                    a = 2;
                } else {
                    a = 4;
                }
                if (that.cards[0].getFace().equals(that.cards[1].getFace()) && that.cards[1].getFace().equals(that.cards[2].getFace())) {
                    b = 2;
                } else {
                    b = 4;
                }

                roo = this.cards[a].compareTo(that.cards[b]);
// return roo;
            }
// //////////////////////
            if (flower_a[0] == 5) {
                if (flower_a[1] == 5) {
                    roo = this.cards[4].compareTo(that.cards[4]);
                }
            }
//////////////////////////////
            if (flower_a[0] == 4) {
                roo = this.cards[4].compareTo(that.cards[4]);
// return roo;
            }
///////////////////////////////////////////////////
            if (flower_a[0] == 3) {
                roo = this.cards[3].compareTo(that.cards[3]);
// return roo;
            }
////////////////////////////////////////////////
            if (flower_a[0] == 1) {
                roo = this.cards[4].compareTo(that.cards[4]);
// return roo;
            }
/////////////////////////////////////
            int my_num = 0;
            int your_num = 0;
            if (flower_a[0] == 2) {
                for (int i = 0; i < 4; i++) {
                    if (this.cards[i].getFace().equals(this.cards[i + 1].getFace())) {
                        int j;
                        j = Card.SUIT_ORDER.compare(this.cards[i], this.cards[i + 1]);
                        if (j == 1) {
                            my_num = i;
                        } else {
                            my_num = i + 1;
                        }
                    }
                }
                for (int i = 0; i < 4; i++) {
                    if (that.cards[i].getFace().equals(that.cards[i++].getFace())) {
                        int j = Card.SUIT_ORDER.compare(that.cards[i], that.cards[i + 1]);
                        if (j == 1) {
                            your_num = i;
                        } else {
                            your_num = i + 1;
                        }

                    }
                }
                roo = Card.SUIT_ORDER.compare(this.cards[my_num], that.cards[your_num]);
// return roo;
            }
            return roo;
        }

    }
      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@e85c4cdd39851305c85d45c9f3b15d55@"
"r04631025","3","0.1","100032","@dceda9604bd22e58edcda926b9f955f6@public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    public Card[] HighCard = new Card[1] ;
    public void HighCard (Card cards) {
        this.HighCard[0] = cards;
    }
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards= cards;
        
        return;
    }
 public boolean isFullHouse(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards);
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace()))
                    this.HighCard(Cards[0]) ;
                return true ;
            }
            else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                    this.HighCard(Cards[4]) ;
                    return true ;
                }
            }
        }
        return false ;
    }
    public boolean isFlush(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getSuit().equalsIgnoreCase(Cards[1].getSuit())){
            if(Cards[1].getSuit().equalsIgnoreCase(Cards[2].getSuit())){
                if(Cards[2].getSuit().equalsIgnoreCase(Cards[3].getSuit())){
                 if(Cards[3].getSuit().equalsIgnoreCase(Cards[4].getSuit())){
                        this.HighCard(Cards[4]) ;
            return true ;
                    }
                }
            }
        }
            return false ;
        }
    public boolean isStraight(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
      
        MergeX.sort(Cards);
        Integer[] a1 = new Integer[Cards.length] ;
        for(int i = 0 ; i < 5 ; i++){
            if(Cards[i].getFace().equalsIgnoreCase(""J""))
                a1[i] = 11 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""Q""))
                a1[i] = 12 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""K""))
                a1[i] = 13 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""A""))
                a1[i] = 14 ;
            else
            a1[i] = Integer.parseInt(Cards[i].getFace());            
        }
        if(a1[1]==a1[0]+1){
            if(a1[2] == a1[1]+1){
                if(a1[3]== a1[2]+1){
                    if(a1[4] == a1[3]+1){
                        this.HighCard(Cards[4]) ;
                        return true ;
                    }
                }
            }
        }
        else if(a1[0]==2){
            if(a1[1]==3){
                if(a1[2]==4){
                    if(a1[3]==5){
                        if(a1[4]==14){
                            this.HighCard(Cards[3]) ;
                            return true ;
                        }
                    }
                }
            }
        }
        return false ;
    }
    public boolean isTwoPair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                this.HighCard(Cards[3]) ;
                return true ;
            }
            else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
       }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
        }
        return false;
    }
    public boolean isOnePair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            this.HighCard(Cards[1]) ;
            return true ;
        }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            this.HighCard(Cards[2]) ;
            return true ;
        }
        else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
            this.HighCard(Cards[3]) ;
            return true ;
        }
        else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
            this.HighCard(Cards[4]) ;
            return true ;
        }
        
        return false ;
    }
    // TODO
    public int compareTo(Hand that) {
        int[] Points = new int [2] ;
            if(this.isFullHouse())
                Points[0] = 60 ;
            
            else if(this.isFlush())
                Points[0] = 50 ;
            
            else if(this.isStraight())
                Points[0] = 40 ;
            
            else if(this.isTwoPair()){
                Points[0] = 30 ;
            }
            else if(this.isOnePair()){
                Points[0] = 20 ;
            
            }
            else
                Points[0] = 10 ;
            
            
            if(that.isFullHouse())
                Points[1] = 60 ;
            
            else if(that.isFlush())
                Points[1] = 50 ;
            
            else if(that.isStraight())
                Points[1] = 40 ;
            
            else if(that.isTwoPair()){
                Points[1] = 30 ;
            }
            else if(that.isOnePair()){
                Points[1] = 20 ;

    }
            else 
                Points[1] = 10 ;
            
//            System.out.println(Points[0]+"" ""+Points[1] ) ;
            
            if(Points[0]>Points[1])
                return 1 ;
            else if(Points[0]<Points[1])
                return -1 ;
            
            else if(Points[0]==Points[1])
            if(Points[0] == 10){
                MergeX.sort(this.cards);
                MergeX.sort(that.cards);
                this.HighCard(this.cards[4]) ;
                that.HighCard(that.cards[4]) ;
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
                }
            else 
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
            return 0 ;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}
;


@dceda9604bd22e58edcda926b9f955f6@"
"r04631013","0","0","0","@1919ffabd91853284bc6efc7f8c9d3a2@
import java.util.Arrays;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
       cards = new Card[5];
       this.cards = cards;
    }

    // TODO
    public int compareTo(Hand that) {
   Arrays.sort(this.cards);
        Arrays.sort(that.cards);
        int flower_a[] = new int[2];
        flower_a[0] = 0;
        flower_a[1] = 0;
        for (int k = 0; k < 2; k++) {
            int my[] = new int[5];
            Card[] see = new Card[5];
            switch (k) {
                case 0:
                    see = this.cards;
                    break;
                case 1:
                    see = that.cards;
            }
            for (int i = 0; i < 5; i++) {
                if (""J"".equals(see[i].getFace())) {
                    my[i] = 11;
                } else if (""Q"".equals(see[i].getFace())) {
                    my[i] = 12;
                } else if (""K"".equals(see[i].getFace())) {
                    my[i] = 13;
                } else if (""A"".equals(see[i].getFace())) {
                    my[i] = 14;
                } else {
                    my[i] = Integer.parseInt(see[i].getFace());
                }
// System.out.printf(""%d\n "", my[i]);
            }
            int my_2[] = new int[5];
            my_2[0] = my[4];
            for (int i = 0; i < 4; i++) {
                my_2[i + 1] = my[i];
            }
            int save_0 = 0;
            int save_1 = 0;
// culmulate how many 1 and 0
            for (int i = 0; i < 5; i++) {
                int temp = my_2[i] - my[i];
                if (temp == 0) {
                    save_0 = save_0 + 1;
                } else if (temp == -1) {
                    save_1 = save_1 + 1;
                }
            }
//            System.out.printf(""%d\n "", save_0);
//            System.out.printf(""%d\n "", save_1);
            
            
            if (save_0 == 3) {
                flower_a[k] = 6;
            } 
            if (see[0].getSuit().equals(see[1].getSuit())) {
                if (see[1].getSuit().equals(see[2].getSuit())) {
                    if (see[2].getSuit().equals(see[3].getSuit())) {
                        if (see[3].getSuit().equals(see[4].getSuit())) {
                            flower_a[k] = 5;

                        }
                    }
                }
            } 
            if (save_1 == 4) {
                if (flower_a[k] != 5) {
                    flower_a[k] = 4;
                }
            } else if (save_1 == 3) {
                if (""A"".equals(see[4].getFace())) {
                    flower_a[k] = 4;
                }
            } else if (save_0 == 2) {
                if (see[0].getFace().equals(see[1].getFace()) && see[1].getFace().equals(see[2].getFace())) {
                    flower_a[k] = 2;
                } else if (see[1].getFace().equals(see[2].getFace()) && see[2].getFace().equals(see[3].getFace())) {
                    flower_a[k] = 2;
                } else if (see[2].getFace().equals(see[3].getFace()) && see[3].getFace().equals(see[4].getFace())) {
                    flower_a[k] = 2;
                } else {
                    flower_a[k] = 3;
                }
            } else if (save_0 == 1) {
                flower_a[k] = 2;
            } else {
                flower_a[k] = 1;
            }
//            System.out.printf(""%d\n "", flower_a[k]);

        }

        int roo = 0;
        if (flower_a[0] > flower_a[1]) {
            return 1;
        } else if (flower_a[0] < flower_a[1]) {
            return -1;
        } else {
            if (flower_a[0] == 6) {
                int a;
                int b;
                if (this.cards[0].getFace().equals(this.cards[1].getFace()) && this.cards[1].getFace().equals(this.cards[2].getFace())) {
                    a = 2;
                } else {
                    a = 4;
                }
                if (that.cards[0].getFace().equals(that.cards[1].getFace()) && that.cards[1].getFace().equals(that.cards[2].getFace())) {
                    b = 2;
                } else {
                    b = 4;
                }

                roo = this.cards[a].compareTo(that.cards[b]);
// return roo;
            }
// //////////////////////
            if (flower_a[0] == 5) {
                if (flower_a[1] == 5) {
                    roo = this.cards[4].compareTo(that.cards[4]);
                }
            }
//////////////////////////////
            if (flower_a[0] == 4) {
                roo = this.cards[4].compareTo(that.cards[4]);
// return roo;
            }
///////////////////////////////////////////////////
            if (flower_a[0] == 3) {
                roo = this.cards[3].compareTo(that.cards[3]);
// return roo;
            }
////////////////////////////////////////////////
            if (flower_a[0] == 1) {
                roo = this.cards[4].compareTo(that.cards[4]);
// return roo;
            }
/////////////////////////////////////
            int my_num = 0;
            int your_num = 0;
            if (flower_a[0] == 2) {
                for (int i = 0; i < 4; i++) {
                    if (this.cards[i].getFace().equals(this.cards[i + 1].getFace())) {
                        int j;
                        j = Card.SUIT_ORDER.compare(this.cards[i], this.cards[i + 1]);
                        if (j == 1) {
                            my_num = i;
                        } else {
                            my_num = i + 1;
                        }
                    }
                }
                for (int i = 0; i < 4; i++) {
                    if (that.cards[i].getFace().equals(that.cards[i++].getFace())) {
                        int j = Card.SUIT_ORDER.compare(that.cards[i], that.cards[i + 1]);
                        if (j == 1) {
                            your_num = i;
                        } else {
                            your_num = i + 1;
                        }

                    }
                }
                roo = Card.SUIT_ORDER.compare(this.cards[my_num], that.cards[your_num]);
// return roo;
            }
            return roo;
        }

    }
      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}


back return to list
@1919ffabd91853284bc6efc7f8c9d3a2@"
"r04631013","3","0.0933333333333333","105216","@7f2b562b5badfacbca235c0db4ce3acf@
import java.util.Arrays;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
      
       this.cards = cards;
    }

    // TODO
    public int compareTo(Hand that) {
   Arrays.sort(this.cards);
        Arrays.sort(that.cards);
        int flower_a[] = new int[2];
        flower_a[0] = 0;
        flower_a[1] = 0;
        for (int k = 0; k < 2; k++) {
            int my[] = new int[5];
            Card[] see = new Card[5];
            switch (k) {
                case 0:
                    see = this.cards;
                    break;
                case 1:
                    see = that.cards;
            }
            for (int i = 0; i < 5; i++) {
                if (""J"".equals(see[i].getFace())) {
                    my[i] = 11;
                } else if (""Q"".equals(see[i].getFace())) {
                    my[i] = 12;
                } else if (""K"".equals(see[i].getFace())) {
                    my[i] = 13;
                } else if (""A"".equals(see[i].getFace())) {
                    my[i] = 14;
                } else {
                    my[i] = Integer.parseInt(see[i].getFace());
                }
// System.out.printf(""%d\n "", my[i]);
            }
            int my_2[] = new int[5];
            my_2[0] = my[4];
            for (int i = 0; i < 4; i++) {
                my_2[i + 1] = my[i];
            }
            int save_0 = 0;
            int save_1 = 0;
// culmulate how many 1 and 0
            for (int i = 0; i < 5; i++) {
                int temp = my_2[i] - my[i];
                if (temp == 0) {
                    save_0 = save_0 + 1;
                } else if (temp == -1) {
                    save_1 = save_1 + 1;
                }
            }
//            System.out.printf(""%d\n "", save_0);
//            System.out.printf(""%d\n "", save_1);
            
            
            if (save_0 == 3) {
                flower_a[k] = 6;
            } 
            if (see[0].getSuit().equals(see[1].getSuit())) {
                if (see[1].getSuit().equals(see[2].getSuit())) {
                    if (see[2].getSuit().equals(see[3].getSuit())) {
                        if (see[3].getSuit().equals(see[4].getSuit())) {
                            flower_a[k] = 5;

                        }
                    }
                }
            } 
            if (save_1 == 4) {
                if (flower_a[k] != 5) {
                    flower_a[k] = 4;
                }
            } else if (save_1 == 3) {
                if (""A"".equals(see[4].getFace())) {
                    flower_a[k] = 4;
                }
            } else if (save_0 == 2) {
                if (see[0].getFace().equals(see[1].getFace()) && see[1].getFace().equals(see[2].getFace())) {
                    flower_a[k] = 2;
                } else if (see[1].getFace().equals(see[2].getFace()) && see[2].getFace().equals(see[3].getFace())) {
                    flower_a[k] = 2;
                } else if (see[2].getFace().equals(see[3].getFace()) && see[3].getFace().equals(see[4].getFace())) {
                    flower_a[k] = 2;
                } else {
                    flower_a[k] = 3;
                }
            } else if (save_0 == 1) {
                flower_a[k] = 2;
            } else {
                flower_a[k] = 1;
            }
//            System.out.printf(""%d\n "", flower_a[k]);

        }

        int roo = 0;
        if (flower_a[0] > flower_a[1]) {
            return 1;
        } else if (flower_a[0] < flower_a[1]) {
            return -1;
        } else {
            if (flower_a[0] == 6) {
                int a;
                int b;
                if (this.cards[0].getFace().equals(this.cards[1].getFace()) && this.cards[1].getFace().equals(this.cards[2].getFace())) {
                    a = 2;
                } else {
                    a = 4;
                }
                if (that.cards[0].getFace().equals(that.cards[1].getFace()) && that.cards[1].getFace().equals(that.cards[2].getFace())) {
                    b = 2;
                } else {
                    b = 4;
                }

                roo = this.cards[a].compareTo(that.cards[b]);
// return roo;
            }
// //////////////////////
            if (flower_a[0] == 5) {
                if (flower_a[1] == 5) {
                    roo = this.cards[4].compareTo(that.cards[4]);
                }
            }
//////////////////////////////
            if (flower_a[0] == 4) {
                roo = this.cards[4].compareTo(that.cards[4]);
// return roo;
            }
///////////////////////////////////////////////////
            if (flower_a[0] == 3) {
                roo = this.cards[3].compareTo(that.cards[3]);
// return roo;
            }
////////////////////////////////////////////////
            if (flower_a[0] == 1) {
                roo = this.cards[4].compareTo(that.cards[4]);
// return roo;
            }
/////////////////////////////////////
            int my_num = 0;
            int your_num = 0;
            if (flower_a[0] == 2) {
                for (int i = 0; i < 4; i++) {
                    if (this.cards[i].getFace().equals(this.cards[i + 1].getFace())) {
                        int j;
                        j = Card.SUIT_ORDER.compare(this.cards[i], this.cards[i + 1]);
                        if (j == 1) {
                            my_num = i;
                        } else {
                            my_num = i + 1;
                        }
                    }
                }
                for (int i = 0; i < 4; i++) {
                    if (that.cards[i].getFace().equals(that.cards[i++].getFace())) {
                        int j = Card.SUIT_ORDER.compare(that.cards[i], that.cards[i + 1]);
                        if (j == 1) {
                            your_num = i;
                        } else {
                            your_num = i + 1;
                        }

                    }
                }
                roo = Card.SUIT_ORDER.compare(this.cards[my_num], that.cards[your_num]);
// return roo;
            }
            return roo;
        }

    }
      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}



@7f2b562b5badfacbca235c0db4ce3acf@"
"b02611002","0","0","0","@f990a7858024d8c1a69afb95dbed128a@import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards = new Card[5];

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards=cards;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

    // TODO
    public int compareTo(Hand that) {
        // complete this function so the Hand can be sorted according to its cards.


        int[] scores={0,0}; //hand[1] for this, hand[2] for that.

        boolean[] isFullHouse={false,false};
        int FHCounter=0;
        String[] FHThreeFace={""-1"",""-1""};//10 //9
        String[] FHTwoFace={""-1"",""-1""};//4 //A
        String[] tempFHTwoFace={""-1"",""-1""};

        boolean[] isFlush={false,false};
        int suitCombo[]={0,0};

        boolean[] isStraight={false,false};
        int faceCombo[]={0,0};

        boolean[] isTwoPair={false,false};

        boolean[] isOnePair={false,false};
        boolean isFirstCard=true;



        Card[] NThis = this.cards;  //cards in ""numerical"" expression (A->14, J->11, Q->12, K->13)
        Card[] NThat = that.cards;
        for(int i=0;i<NThis.length;i++){

            switch (NThis[i].getFace()){
                case ""A"": NThis[i]=new Card(""14"",NThis[i].getSuit());break;
                case ""J"": NThis[i]=new Card(""11"",NThis[i].getSuit());break;
                case ""Q"": NThis[i]=new Card(""12"",NThis[i].getSuit());break;
                case ""K"": NThis[i]=new Card(""13"",NThis[i].getSuit());break;
            }

            switch (NThat[i].getFace()){
                case ""A"": NThat[i]=new Card(""14"",NThis[i].getSuit());break;
                case ""J"": NThat[i]=new Card(""11"",NThis[i].getSuit());break;
                case ""Q"": NThat[i]=new Card(""12"",NThis[i].getSuit());break;
                case ""K"": NThat[i]=new Card(""13"",NThis[i].getSuit());break;
            }
        }


        Arrays.sort(NThis);

        Arrays.sort(NThat);
 

        int hID=0;
        Card[] currentHand = NThis;
        for(int i =0;i<2;i++){  // loop: NThis, NThat
            if(hID==1) currentHand=NThat;

            Card previous = null;
            FHCounter=0;
            suitCombo[hID]=0;
            faceCombo[hID]=0;
            FHThreeFace[hID]=""-1"";
            FHTwoFace[hID]=""-1"";
            tempFHTwoFace[hID]=""-1"";

            for(Card c:currentHand){// loop: card1, card2, card3, card4 ...

                //handle first card case
                if(isFirstCard){
                    FHCounter=1;
                    suitCombo[hID]=1;
                    faceCombo[hID]=1;
                    isFirstCard=false;
                    previous=c;
                    break;
                }

                // FullHouse counter
                if (previous.getFace() == c.getFace()) FHCounter++;
                else FHCounter = 1;
                if (FHCounter == 3) {
                    FHThreeFace[hID] = c.getFace();
                    FHTwoFace[hID] = tempFHTwoFace[hID];
                } else if (FHCounter == 2) {
                    tempFHTwoFace[hID] = FHTwoFace[hID];
                    FHTwoFace[hID] = c.getFace();
                }

                // Flush counter
                if(previous.getSuit().equals(c.getSuit())){
                    suitCombo[hID]++;
                }

                // Straight counter
                if(Integer.parseInt(c.getFace())-Integer.parseInt(previous.getFace())==1){
                    faceCombo[hID]++;
                }

                previous=c;
            }// loop: card1, card2, card3, card4 ...


            scores[hID]=Integer.parseInt(currentHand[4].getFace());

            if(!FHTwoFace[hID].equals(""-1"")){
                isOnePair[hID]=true;
                scores[hID]=20;
            }
            if(!tempFHTwoFace[hID].equals(""-1"") && !FHTwoFace[hID].equals(""-1"")){
                isTwoPair[hID]=true;
                scores[hID]=30;
            }
            if(faceCombo[hID]==4){
                isStraight[hID]=true;
                scores[hID]=40;
            }
            if(suitCombo[hID]==4){
                isFlush[hID]=true;
                scores[hID]=50;
            }
            if (!FHThreeFace[hID].equals(""-1"") && !FHTwoFace[hID].equals(""-1"")) {
                isFullHouse[hID]=true;
                scores[hID]=60;
            }
            hID++;

        }// loop: NThis, NThat





        if(isFullHouse[0]&&isFullHouse[1]){
            if(Integer.parseInt(FHThreeFace[0])>Integer.parseInt(FHThreeFace[1])){
                scores[0]+=6;
            }else if(Integer.parseInt(FHThreeFace[0])<Integer.parseInt(FHThreeFace[1])){
                scores[1]+=6;
            }
        }

        if(isFlush[0]&&isFlush[1]){
            if(Integer.parseInt(NThis[4].getFace())>Integer.parseInt(NThat[4].getFace())){
                scores[0]+=5;
            }else if(Integer.parseInt(NThis[4].getFace())<Integer.parseInt(NThat[4].getFace())){
                scores[1]+=5;
            }
        }


        if(isStraight[0]&&isStraight[1]){
            if(Integer.parseInt(NThis[4].getFace())==14)scores[0]-=3;
            if(Integer.parseInt(NThat[4].getFace())==14)scores[0]-=3;
            if(Integer.parseInt(NThis[0].getFace())>Integer.parseInt(NThat[0].getFace())){
                scores[0]+=3;
            }else if(Integer.parseInt(NThis[0].getFace())<Integer.parseInt(NThat[0].getFace())) {
                scores[1]+=3;
            }
        }

        if(isTwoPair[0] && isTwoPair[1]){
            if(Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[0]+=3;
            }else if (Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[1]+=3;
            }
        }

        if(isOnePair[0] && isOnePair[1]){
            if(Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[0]+=2;
            }else if (Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[1]+=2;
            }
        }


        return scores[0]-scores[1];
    }
}

@f990a7858024d8c1a69afb95dbed128a@"
"b02611002","0","0","0","@9f02faeccc1d91353f564ce5538c3b3c@import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards = new Card[5];

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards=cards;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

    // TODO
    public int compareTo(Hand that) {
        // complete this function so the Hand can be sorted according to its cards.


        int[] scores={0,0}; //hand[1] for this, hand[2] for that.

        boolean[] isFullHouse={false,false};
        int FHCounter=0;
        String[] FHThreeFace={""-1"",""-1""};//10 //9
        String[] FHTwoFace={""-1"",""-1""};//4 //A
        String[] tempFHTwoFace={""-1"",""-1""};

        boolean[] isFlush={false,false};
        int suitCombo[]={0,0};

        boolean[] isStraight={false,false};
        int faceCombo[]={0,0};

        boolean[] isTwoPair={false,false};

        boolean[] isOnePair={false,false};
        boolean isFirstCard=true;



        Card[] NThis = this.cards;  //cards in ""numerical"" expression (A->14, J->11, Q->12, K->13)
        Card[] NThat = that.cards;
        for(int i=0;i<NThis.length;i++){

            switch (NThis[i].getFace()){
                case ""A"": NThis[i]=new Card(""14"",NThis[i].getSuit());break;
                case ""J"": NThis[i]=new Card(""11"",NThis[i].getSuit());break;
                case ""Q"": NThis[i]=new Card(""12"",NThis[i].getSuit());break;
                case ""K"": NThis[i]=new Card(""13"",NThis[i].getSuit());break;
            }

            switch (NThat[i].getFace()){
                case ""A"": NThat[i]=new Card(""14"",NThis[i].getSuit());break;
                case ""J"": NThat[i]=new Card(""11"",NThis[i].getSuit());break;
                case ""Q"": NThat[i]=new Card(""12"",NThis[i].getSuit());break;
                case ""K"": NThat[i]=new Card(""13"",NThis[i].getSuit());break;
            }
        }


        Arrays.sort(NThis);

        Arrays.sort(NThat);
 

        int hID=0;
        Card[] currentHand = NThis;
        for(int i =0;i<2;i++){  // loop: NThis, NThat
            if(hID==1) currentHand=NThat;

            Card previous = new Card(""2"",""Clubs"");
            FHCounter=0;
            suitCombo[hID]=0;
            faceCombo[hID]=0;
            FHThreeFace[hID]=""-1"";
            FHTwoFace[hID]=""-1"";
            tempFHTwoFace[hID]=""-1"";

            for(Card c:currentHand){// loop: card1, card2, card3, card4 ...

                //handle first card case
                if(isFirstCard){
                    FHCounter=1;
                    suitCombo[hID]=1;
                    faceCombo[hID]=1;
                    isFirstCard=false;
                    previous=c;
                    break;
                }

                // FullHouse counter
                if (previous.getFace() == c.getFace()) FHCounter++;
                else FHCounter = 1;
                if (FHCounter == 3) {
                    FHThreeFace[hID] = c.getFace();
                    FHTwoFace[hID] = tempFHTwoFace[hID];
                } else if (FHCounter == 2) {
                    tempFHTwoFace[hID] = FHTwoFace[hID];
                    FHTwoFace[hID] = c.getFace();
                }

                // Flush counter
                if(previous.getSuit().equals(c.getSuit())){
                    suitCombo[hID]++;
                }

                // Straight counter
                if(Integer.parseInt(c.getFace())-Integer.parseInt(previous.getFace())==1){
                    faceCombo[hID]++;
                }

                previous=c;
            }// loop: card1, card2, card3, card4 ...


            scores[hID]=Integer.parseInt(currentHand[4].getFace());

            if(!FHTwoFace[hID].equals(""-1"")){
                isOnePair[hID]=true;
                scores[hID]=20;
            }
            if(!tempFHTwoFace[hID].equals(""-1"") && !FHTwoFace[hID].equals(""-1"")){
                isTwoPair[hID]=true;
                scores[hID]=30;
            }
            if(faceCombo[hID]==4){
                isStraight[hID]=true;
                scores[hID]=40;
            }
            if(suitCombo[hID]==4){
                isFlush[hID]=true;
                scores[hID]=50;
            }
            if (!FHThreeFace[hID].equals(""-1"") && !FHTwoFace[hID].equals(""-1"")) {
                isFullHouse[hID]=true;
                scores[hID]=60;
            }
            hID++;

        }// loop: NThis, NThat





        if(isFullHouse[0]&&isFullHouse[1]){
            if(Integer.parseInt(FHThreeFace[0])>Integer.parseInt(FHThreeFace[1])){
                scores[0]+=6;
            }else if(Integer.parseInt(FHThreeFace[0])<Integer.parseInt(FHThreeFace[1])){
                scores[1]+=6;
            }
        }

        if(isFlush[0]&&isFlush[1]){
            if(Integer.parseInt(NThis[4].getFace())>Integer.parseInt(NThat[4].getFace())){
                scores[0]+=5;
            }else if(Integer.parseInt(NThis[4].getFace())<Integer.parseInt(NThat[4].getFace())){
                scores[1]+=5;
            }
        }


        if(isStraight[0]&&isStraight[1]){
            if(Integer.parseInt(NThis[4].getFace())==14)scores[0]-=3;
            if(Integer.parseInt(NThat[4].getFace())==14)scores[0]-=3;
            if(Integer.parseInt(NThis[0].getFace())>Integer.parseInt(NThat[0].getFace())){
                scores[0]+=3;
            }else if(Integer.parseInt(NThis[0].getFace())<Integer.parseInt(NThat[0].getFace())) {
                scores[1]+=3;
            }
        }

        if(isTwoPair[0] && isTwoPair[1]){
            if(Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[0]+=3;
            }else if (Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[1]+=3;
            }
        }

        if(isOnePair[0] && isOnePair[1]){
            if(Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[0]+=2;
            }else if (Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[1]+=2;
            }
        }


        return scores[0]-scores[1];
    }
}


back return to list
@9f02faeccc1d91353f564ce5538c3b3c@"
"r03522826","3","0.0933333333333333","105872","@822202e7642469ac45c40754a41f2e44@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
     private int Judge, index;

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        index = 0;
        this.cards = cards;
        Judge = 1;
        index = 4;
    }

    // TODO
    public void Pairs(){
        int pairsize = 0;
         int ind1 = 0;
         for(int i = 0; i < 5; i++){
                for(int j = i+1; j < 5; j++)
                {
                    if(cards[i].getFace().equals(cards[j].getFace()))
                    {
                        ind1 = i;
                        if(pairsize < 4){
                            pairsize += 1;
                        }
                        if(cards[i].compareTo(cards[ind1]) > 0){                         
                            index = i;
                        }
                        
                    }
                }

        }
         if((pairsize == 1)||(pairsize == 3))
             Judge = 2;
         if((pairsize == 2))
             Judge = 3;
         if(pairsize == 4)
             Judge = 6;
    }
    
    public void Straight(){
        int[] Number = new int[5];
         for (int i = 0; i < 5; i++){ 
             if(cards[i].getFace().equals(""A""))
                 Number[i] = 1;
             else if(cards[i].getFace().equals(""K""))
                 Number[i] = 13;
             else if(cards[i].getFace().equals(""Q""))
                 Number[i] = 12;
             else if(cards[i].getFace().equals(""J""))
                 Number[i] = 11;
             else
                 Number[i] = Integer.parseInt(cards[i].getFace());
         }
         
         if(((Number[4] - Number[0]) == 4)&&(Judge < 5)){
             if((Number[3] - Number[1])==2)
                 if((Number[2]-Number[1])==1)
                    Judge = 4;
                    index = 4;
         }
         if((Number[4] == 1)&&(Judge < 5))
         {
             if(((Number[3]-Number[0]) == 3)&&(Number[3] == 5)){
                 if((Number[2]-Number[1]) == 1)
                    Judge = 4;
//                    special  = 1;
                    index = 3;
             }
             if(((Number[3]-Number[0]) == 3)&&(Number[3] == 13)){
                 if((Number[2]-Number[1]) == 1)
                    Judge = 4;
             }
         }
    }
    
     public void Flush(){
         int count = 1;
         for(int i = 0; i < 4; i++)
             if(cards[i].getSuit().equals(cards[i+1].getSuit()))
                 count += 1;
         if ((count == 5)&&(Judge < 6))
             Judge = 5;
     }
    
    public int compareTo(Hand that) {
       Insertion.sort(this.cards);
        Insertion.sort(that.cards);
//        this.Judge = 1;
//        that.Judge = 1;
//        this.index = 4;
//        that.index = 4;
        this.Pairs();
        this.Flush();
        this.Straight();
        that.Pairs();
        that.Flush();
        that.Straight();
        if (this.Judge > that.Judge)
            return 1;
        else if (this.Judge < that.Judge)
            return -1;
        else
            return (this.cards[this.index].compareTo(that.cards[that.index]));
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@822202e7642469ac45c40754a41f2e44@"
"r03522809","3","0.0966666666666667","105856","@34db780eaec0bc2495f7cd61e8c24a25@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Comparator;
/**
 *
 * @author Dennis
 */
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
    }

    // TODO
    public int compareTo(Hand that) {
        Insertion.sort(this.cards);
        Insertion.sort(that.cards);
        int thiscardvalue,thatcardvalue,value=0;
        int thisvalue[]=new int[5];
        int thatvalue[]=new int[5];

//        System.out.println(this.cards[0].getSuit());
        
        for(int i=0;i<5;i++){
                if(this.cards[i].getFace().equals(""A"")){thisvalue[i] = 14;} //get that card value
                else if(this.cards[i].getFace().equals(""J"")){thisvalue[i]= 11;}
                else if(this.cards[i].getFace().equals(""Q"")){thisvalue[i]= 12;}          
                else if(this.cards[i].getFace().equals(""K"")){thisvalue[i]= 13;}
                else{thisvalue[i]=Integer.parseInt(this.cards[i].getFace());}
                
                if(that.cards[i].getFace().equals(""A"")){thatvalue[i] = 14;} //get that card value
                else if(that.cards[i].getFace().equals(""J"")){thatvalue[i]= 11;}
                else if(that.cards[i].getFace().equals(""Q"")){thatvalue[i]= 12;}          
                else if(that.cards[i].getFace().equals(""K"")){thatvalue[i]= 13;}
                else{thatvalue[i]=Integer.parseInt(that.cards[i].getFace());}
            }
            if( (thisvalue[4]==thisvalue[3] && thisvalue[4]==thisvalue[2] && thisvalue[1]==thisvalue[0]) ||
               ( thisvalue[0]==thisvalue[1] && thisvalue[0]==thisvalue[2] && thisvalue[3]==thisvalue[4] ) ){thiscardvalue=6;}
            else if( this.cards[0].getSuit().equals(this.cards[1].getSuit()) && 
                     this.cards[0].getSuit().equals(this.cards[2].getSuit()) && 
                     this.cards[0].getSuit().equals(this.cards[3].getSuit()) && 
                     this.cards[0].getSuit().equals(this.cards[4].getSuit())){thiscardvalue=5;}
            else if( thisvalue[0]==2 &&
                     thisvalue[1]==3 &&
                     thisvalue[2]==4 &&
                     thisvalue[3]==5 &&
                     thisvalue[4]==14){thisvalue[0]=1;thisvalue[1]=2;thisvalue[2]=3;thisvalue[3]=4;thisvalue[4]=5;thiscardvalue=4;}
            else if( thisvalue[0]==thisvalue[1]-1 &&
                     thisvalue[0]==thisvalue[2]-2 &&
                     thisvalue[0]==thisvalue[3]-3 &&
                     thisvalue[0]==thisvalue[4]-4 ){thiscardvalue=4;}
            else if( thisvalue[0]==thisvalue[1]  &&  thisvalue[2]==thisvalue[3] ||
                     thisvalue[0]==thisvalue[1]  &&  thisvalue[3]==thisvalue[4] ||
                     thisvalue[1]==thisvalue[2]  &&  thisvalue[3]==thisvalue[4]){thiscardvalue=3;}
            else if( thisvalue[0]==thisvalue[1] || 
                     thisvalue[1]==thisvalue[2] || 
                     thisvalue[2]==thisvalue[3] || 
                     thisvalue[3]==thisvalue[4]){thiscardvalue=2;}
            else{thiscardvalue=1;}
            
            if( (thatvalue[4]==thatvalue[3] && thatvalue[4]==thatvalue[2] && thatvalue[1]==thatvalue[0]) ||
               ( thatvalue[0]==thatvalue[1] && thatvalue[0]==thatvalue[2] && thatvalue[3]==thatvalue[4] ) ){thatcardvalue=6;}
            else if( that.cards[0].getSuit().equals(that.cards[1].getSuit()) && 
                     that.cards[0].getSuit().equals(that.cards[2].getSuit()) && 
                     that.cards[0].getSuit().equals(that.cards[3].getSuit()) && 
                     that.cards[0].getSuit().equals(that.cards[4].getSuit())){thatcardvalue=5;}
            else if( thatvalue[0]==2 &&
                     thatvalue[1]==3 &&
                     thatvalue[2]==4 &&
                     thatvalue[3]==5 &&
                     thatvalue[4]==14){thatvalue[0]=1;thatvalue[1]=2;thatvalue[2]=3;thatvalue[3]=4;thatvalue[4]=5;thatcardvalue=4;}
            else if( thatvalue[0]==thatvalue[1]-1 &&
                     thatvalue[0]==thatvalue[2]-2 &&
                     thatvalue[0]==thatvalue[3]-3 &&
                     thatvalue[0]==thatvalue[4]-4 ){thatcardvalue=4;}
            else if( thatvalue[0]==thatvalue[1]  &&  thatvalue[2]==thatvalue[3] ||
                     thatvalue[0]==thatvalue[1]  &&  thatvalue[3]==thatvalue[4] ||
                     thatvalue[1]==thatvalue[2]  &&  thatvalue[3]==thatvalue[4]){thatcardvalue=3;}
            else if( thatvalue[0]==thatvalue[1] || 
                     thatvalue[1]==thatvalue[2] || 
                     thatvalue[2]==thatvalue[3] || 
                     thatvalue[3]==thatvalue[4]){thatcardvalue=2;}
            else{thatcardvalue=1;}
            
//            if(thiscardvalue==6){System.out.println(thisvalue[0]+""\t""+thisvalue[1]+""\t""+thisvalue[2]+""\t""+thisvalue[3]+""\t""+thisvalue[4]);}
//            if(thatcardvalue==6){System.out.println(thatvalue[0]+""\t""+thatvalue[1]+""\t""+thatvalue[2]+""\t""+thatvalue[3]+""\t""+thatvalue[4]);}        
//           System.out.println(thatcardvalue);
//           System.out.println(thiscardvalue+""\t""+thatcardvalue);
           
           if(thiscardvalue>thatcardvalue){return 1;}
           else if(thiscardvalue<thatcardvalue){return -1;}
           else if(thiscardvalue==6 && thatcardvalue==6){
                if((thisvalue[0]==thisvalue[1] && thisvalue[0]==thisvalue[2]) &&
                   (thatvalue[0]==thatvalue[1] && thatvalue[0]==thatvalue[2]) ){if(thisvalue[0]>thatvalue[0]){value= 1;}
                                                                                else if(thisvalue[0]<thatvalue[0]){value= -1;}
                                                                                else if(thisvalue[0]==thatvalue[0]){
                                                                                    if(Card.SUIT_ORDER.compare(this.cards[0],that.cards[0])>0){value= 1;}
                                                                                    else if(Card.SUIT_ORDER.compare(this.cards[0],that.cards[0])<0){value= -1;}
                                                                                    else if(thisvalue[4]>thatvalue[4]){value= 1;}
                                                                                    else if(thisvalue[4]<thatvalue[4]){value= -1;}
                                                                                    else if(thisvalue[4]==thatvalue[4]){
                                                                                      if(Card.SUIT_ORDER.compare(this.cards[4],that.cards[4])>0){value= 1;}
                                                                                      else if(Card.SUIT_ORDER.compare(this.cards[4],that.cards[4])<0){value= -1;}
                                                                                        }
                                                                                    }
                                                                                }
                else if((thisvalue[4]==thisvalue[3] && thisvalue[4]==thisvalue[2]) &&
                        (thatvalue[4]==thatvalue[3] && thatvalue[4]==thatvalue[2]) ){if(thisvalue[4]>thatvalue[4]){value= 1;}
                                                                                else if(thisvalue[4]<thatvalue[4]){value= -1;}
                                                                                else if(thisvalue[4]==thatvalue[4]){
                                                                                    if(Card.SUIT_ORDER.compare(this.cards[4],that.cards[4])>0){value= 1;}
                                                                                    else if(Card.SUIT_ORDER.compare(this.cards[4],that.cards[4])<0){value= -1;}
                                                                                    else if(thisvalue[0]>thatvalue[0]){value= 1;}
                                                                                    else if(thisvalue[0]<thatvalue[0]){value= -1;}
                                                                                    else if(thisvalue[0]==thatvalue[0]){
                                                                                      if(Card.SUIT_ORDER.compare(this.cards[0],that.cards[0])>0){value= 1;}
                                                                                      else if(Card.SUIT_ORDER.compare(this.cards[0],that.cards[0])<0){value= -1;}
                                                                                            }
                                                                                    }
                                                                                }
                else if(thisvalue[2]>thatvalue[2]){value= 1;}
                else if(thisvalue[2]<thatvalue[2]){value= -1;}
           }
           else if(thiscardvalue==5 && thatcardvalue==5){
                for(int i=4;i>=0;i--){
                    if(thisvalue[i]>thatvalue[i]){value= 1;break;}
                    else if(thisvalue[i]<thatvalue[i]){value= -1;break;}
                     }
            }
           else if(thiscardvalue==4 && thatcardvalue==4){

                    for(int i=4;i>=0;i--){
                    if(thisvalue[i]>thatvalue[i]){value= 1;break;}
                    else if(thisvalue[i]<thatvalue[i]){value= -1;break;}
                    else if(thisvalue[i]==thatvalue[i]){
                        if(Card.SUIT_ORDER.compare(this.cards[i],that.cards[i])>0){value= 1;break;}
                        else if(Card.SUIT_ORDER.compare(this.cards[i],that.cards[i])<0){value= -1;break;}
                         }
                    }
           }
          else if(thiscardvalue==3 && thatcardvalue==3){
                    if( thisvalue[4]==thisvalue[3] && thatvalue[4]==thatvalue[3] ){
                        if(thisvalue[4]>thatvalue[4]){value= 1;}
                        else if(thisvalue[4]<thatvalue[4]){value= -1;}
                        else if(Card.SUIT_ORDER.compare(this.cards[4],that.cards[4])>0){value= 1;}
                        else if(Card.SUIT_ORDER.compare(this.cards[4],that.cards[4])<0){value= -1;}
                                }
                    else if( thisvalue[3]==thisvalue[2] && thatvalue[3]==thatvalue[2] ){
                        if(thisvalue[3]>thatvalue[3]){value= 1;}
                        else if(thisvalue[3]<thatvalue[3]){value= -1;}                        
                        else if(Card.SUIT_ORDER.compare(this.cards[3],that.cards[3])>0){value= 1;}
                        else if(Card.SUIT_ORDER.compare(this.cards[3],that.cards[3])<0){value= -1;}
                                }
                     else if(thisvalue[3]>thatvalue[3]){value= 1;}
                     else if(thisvalue[3]<thatvalue[3]){value=-1;}
                      }
//          else if(thiscardvalue==3 && thatcardvalue==3){
//                    if( thisvalue[4]==thisvalue[3] && thatvalue[4]==thatvalue[3] ){
//                        if(thisvalue[4]>thatvalue[4]){value= 1;}
//                        else if(thisvalue[4]<thatvalue[4]){value= -1;}
//                        else if(Card.SUIT_ORDER.compare(this.cards[4],that.cards[4])>0){value= 1;}
//                        else if(Card.SUIT_ORDER.compare(this.cards[4],that.cards[4])<0){value= -1;}
//                                }
//                    else if( thisvalue[3]==thisvalue[2] && thatvalue[3]==thatvalue[2] ){
//                        if(thisvalue[3]>thatvalue[3]){value= 1;}
//                        else if(thisvalue[3]<thatvalue[3]){value= -1;}
//                        else if(Card.SUIT_ORDER.compare(this.cards[3],that.cards[3])>0){value= 1;}
//                        else if(Card.SUIT_ORDER.compare(this.cards[3],that.cards[3])<0){value= -1;}
//                                }
//                     else if(thisvalue[3]>thatvalue[3]){value= 1;}
//                     else if(thisvalue[3]<thatvalue[3]){value=-1;}
//                      }
           else if(thiscardvalue==2 && thatcardvalue==2){
               int vi=0,va=0;
                  for( vi=4;vi>=1;vi--){
                      if(thisvalue[vi]==thisvalue[vi-1]){break;}
                  }
                  for( va=4;va>=1;va--){
                      if(thisvalue[va]==thisvalue[va-1]){break;}
                  }
                  if(vi>va){value= 1;}
                  else if(vi>va){value= -1;}
                  else if(vi==va){
                        if(Card.SUIT_ORDER.compare(this.cards[vi],that.cards[va])>0){value= 1;}
                        else if(Card.SUIT_ORDER.compare(this.cards[vi],that.cards[va])<0){value= -1;}
                  }
           }
           else if(thiscardvalue==1 && thatcardvalue==1){
               if(thisvalue[4]>thatvalue[4]){value= 1;}
               else if(thisvalue[4]<thatvalue[4]){value= -1;}
               else if(thisvalue[4]==thatvalue[4]){
                        if(Card.SUIT_ORDER.compare(this.cards[4],that.cards[4])>0){value= 1;}
                        else if(Card.SUIT_ORDER.compare(this.cards[4],that.cards[4])<0){value= -1;}
               }
                   }
           
           return value;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
    
}
@34db780eaec0bc2495f7cd61e8c24a25@"
"r04921105","0","0.99","118256","@5179c0cd88b61cc78828f5c3b5c5d089@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){           
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx=0; 
                //System.out.printf(""count=""+count+"","");
                //System.out.println(""target=""+target);
            Hand[] hands = new Hand[count];            
            MaxPQ<Hand> pq = new MaxPQ<Hand>() ;            
                //read file
              for(String in = br.readLine(); in != null; in = br.readLine()) {
                String[] cardStr = in.split("","");
                Card[] cardsArray = new Card[5];
                //file to card               
                for(int i = 0; i < 5
                        ; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;                      
                    //System.out.printf(""_""+cardsArray.length); 
                }//end of loading 5 cards                  
                //System.out.printf(""=====""+cardsArray[1].getFace()+"",""+cardsArray[1].getSuit()+""====="");
                //print card
                /*印card
                for(int i =0;i<cardsArray.length;i++){
                    System.out.printf(""(""+cardsArray[i].getSuit()+"",""+cardsArray[i].getFace()+"")"");
                }
                    System.out.print(""\n"");                   
                 //
                */
               Hand hand=new Hand(cardsArray);
                hands[idx]=hand;
                idx++;
                }//end of reading a in
              //print hands
              Card[] check = new Card[5];
              //System.out.println(pq.size());
              for(int i=0;i<hands.length;i++){
                  check=hands[i].getCards();
                  for(int x =0;x<check.length;x++){
                    //System.out.printf(""[""+check[x].getSuit()+"",""+check[x].getFace()+""]"");
                }
                   // System.out.print(""\n"");
                }
              //print hands^
              //insert hand into pq
              
              Card[] insertcard = new Card[5];
              
              for (int i=0;i<hands.length;i++){
                  pq.insert(hands[i]);
                  insertcard=hands[i].getCards();
                  Arrays.sort(insertcard);/*
                  for(int x=0;x<target;x++){
                  System.out.printf(""insert:(""+checkcard[x].getSuit()+"",""+checkcard[x].getFace()+"")"");
                 
                  }
                  System.out.print(""*******"");
                  System.out.print(""\n"");  */                
              }
                                         
              
             //Card[] mincard = new Card[5]; 
             /*
              for(int i=0;i<pq.size();i++){
                  System.out.println(pq.size()); 
                  mincard = pq.max().getCards();                                
                    for(int j =0;j<mincard.length;j++){
                        System.out.printf(""<<""+mincard[j].getSuit()+"",""+mincard[j].getFace()+"">>"");
                     }
                     System.out.print(""\n"");
                     pq.delMax();
                    if(pq.size()==2){
                      mincard = pq.max().getCards();                                
                         for(int j =0;j<mincard.length;j++){
                            System.out.printf(""<<""+mincard[j].getSuit()+"",""+mincard[j].getFace()+"">>"");
                        }
                    }                     
              }
              */
              
            
              
              Card[] anscard = new Card[5];
              for(int i =0;i<target-1;i++){
                  pq.delMax();
              }
              anscard=pq.max().getCards();
              for(int i=0;i<anscard.length;i++){
                  
                  System.out.printf(anscard[i].getSuit()+""_""+anscard[i].getFace()+"","");
              }
              
              
          
              
              
                
              
              
              
                    
               
                
                
              
              
                
                
//            MinPQ pq = new MinPQ(playerArray);
            //////讀取input,把hand排序好,存入pq,del min(target),output the target////// 
          
           
            
             
            
        }
    }
}

@5179c0cd88b61cc78828f5c3b5c5d089@"
"r03522809","3","0.0966666666666667","105840","@f62ca913aef59f02c015824d67ddcd67@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Comparator;
/**
 *
 * @author Dennis
 */
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
    }

    // TODO
    public int compareTo(Hand that) {
        Insertion.sort(this.cards);
        Insertion.sort(that.cards);
        int thiscardvalue,thatcardvalue,value=0;
        int thisvalue[]=new int[5];
        int thatvalue[]=new int[5];

//        System.out.println(this.cards[0].getSuit());
        
        for(int i=0;i<5;i++){
                if(this.cards[i].getFace().equals(""A"")){thisvalue[i] = 14;} //get that card value
                else if(this.cards[i].getFace().equals(""J"")){thisvalue[i]= 11;}
                else if(this.cards[i].getFace().equals(""Q"")){thisvalue[i]= 12;}          
                else if(this.cards[i].getFace().equals(""K"")){thisvalue[i]= 13;}
                else{thisvalue[i]=Integer.parseInt(this.cards[i].getFace());}
                
                if(that.cards[i].getFace().equals(""A"")){thatvalue[i] = 14;} //get that card value
                else if(that.cards[i].getFace().equals(""J"")){thatvalue[i]= 11;}
                else if(that.cards[i].getFace().equals(""Q"")){thatvalue[i]= 12;}          
                else if(that.cards[i].getFace().equals(""K"")){thatvalue[i]= 13;}
                else{thatvalue[i]=Integer.parseInt(that.cards[i].getFace());}
            }
            if( (thisvalue[4]==thisvalue[3] && thisvalue[4]==thisvalue[2] && thisvalue[1]==thisvalue[0]) ||
               ( thisvalue[0]==thisvalue[1] && thisvalue[0]==thisvalue[2] && thisvalue[3]==thisvalue[4] ) ){thiscardvalue=6;}
            else if( this.cards[0].getSuit().equals(this.cards[1].getSuit()) && 
                     this.cards[0].getSuit().equals(this.cards[2].getSuit()) && 
                     this.cards[0].getSuit().equals(this.cards[3].getSuit()) && 
                     this.cards[0].getSuit().equals(this.cards[4].getSuit())){thiscardvalue=5;}
            else if( thisvalue[0]==2 &&
                     thisvalue[1]==3 &&
                     thisvalue[2]==4 &&
                     thisvalue[3]==5 &&
                     thisvalue[4]==14){thisvalue[0]=1;thisvalue[1]=2;thisvalue[2]=3;thisvalue[3]=4;thisvalue[4]=5;thiscardvalue=4;}
            else if( thisvalue[0]==thisvalue[1]-1 &&
                     thisvalue[0]==thisvalue[2]-2 &&
                     thisvalue[0]==thisvalue[3]-3 &&
                     thisvalue[0]==thisvalue[4]-4 ){thiscardvalue=4;}
            else if( thisvalue[0]==thisvalue[1]  &&  thisvalue[2]==thisvalue[3] ||
                     thisvalue[0]==thisvalue[1]  &&  thisvalue[3]==thisvalue[4] ||
                     thisvalue[1]==thisvalue[2]  &&  thisvalue[3]==thisvalue[4]){thiscardvalue=3;}
            else if( thisvalue[0]==thisvalue[1] || 
                     thisvalue[1]==thisvalue[2] || 
                     thisvalue[2]==thisvalue[3] || 
                     thisvalue[3]==thisvalue[4]){thiscardvalue=2;}
            else{thiscardvalue=1;}
            
            if( (thatvalue[4]==thatvalue[3] && thatvalue[4]==thatvalue[2] && thatvalue[1]==thatvalue[0]) ||
               ( thatvalue[0]==thatvalue[1] && thatvalue[0]==thatvalue[2] && thatvalue[3]==thatvalue[4] ) ){thatcardvalue=6;}
            else if( that.cards[0].getSuit().equals(that.cards[1].getSuit()) && 
                     that.cards[0].getSuit().equals(that.cards[2].getSuit()) && 
                     that.cards[0].getSuit().equals(that.cards[3].getSuit()) && 
                     that.cards[0].getSuit().equals(that.cards[4].getSuit())){thatcardvalue=5;}
            else if( thatvalue[0]==2 &&
                     thatvalue[1]==3 &&
                     thatvalue[2]==4 &&
                     thatvalue[3]==5 &&
                     thatvalue[4]==14){thatvalue[0]=1;thatvalue[1]=2;thatvalue[2]=3;thatvalue[3]=4;thatvalue[4]=5;thatcardvalue=4;}
            else if( thatvalue[0]==thatvalue[1]-1 &&
                     thatvalue[0]==thatvalue[2]-2 &&
                     thatvalue[0]==thatvalue[3]-3 &&
                     thatvalue[0]==thatvalue[4]-4 ){thatcardvalue=4;}
            else if( thatvalue[0]==thatvalue[1]  &&  thatvalue[2]==thatvalue[3] ||
                     thatvalue[0]==thatvalue[1]  &&  thatvalue[3]==thatvalue[4] ||
                     thatvalue[1]==thatvalue[2]  &&  thatvalue[3]==thatvalue[4]){thatcardvalue=3;}
            else if( thatvalue[0]==thatvalue[1] || 
                     thatvalue[1]==thatvalue[2] || 
                     thatvalue[2]==thatvalue[3] || 
                     thatvalue[3]==thatvalue[4]){thatcardvalue=2;}
            else{thatcardvalue=1;}
            
//            if(thiscardvalue==6){System.out.println(thisvalue[0]+""\t""+thisvalue[1]+""\t""+thisvalue[2]+""\t""+thisvalue[3]+""\t""+thisvalue[4]);}
//            if(thatcardvalue==6){System.out.println(thatvalue[0]+""\t""+thatvalue[1]+""\t""+thatvalue[2]+""\t""+thatvalue[3]+""\t""+thatvalue[4]);}        
//           System.out.println(thatcardvalue);
//           System.out.println(thiscardvalue+""\t""+thatcardvalue);
           
           if(thiscardvalue>thatcardvalue){return 1;}
           else if(thiscardvalue<thatcardvalue){return -1;}
           else if(thiscardvalue==6 && thatcardvalue==6){
                if((thisvalue[0]==thisvalue[1] && thisvalue[0]==thisvalue[2]) &&
                   (thatvalue[0]==thatvalue[1] && thatvalue[0]==thatvalue[2]) ){if(thisvalue[0]>thatvalue[0]){value= 1;}
                                                                                else if(thisvalue[0]<thatvalue[0]){value= -1;}
                                                                                else if(thisvalue[0]==thatvalue[0]){
                                                                                    if(Card.SUIT_ORDER.compare(this.cards[0],that.cards[0])>0){value= 1;}
                                                                                    else if(Card.SUIT_ORDER.compare(this.cards[0],that.cards[0])<0){value= -1;}
                                                                                    else if(thisvalue[4]>thatvalue[4]){value= 1;}
                                                                                    else if(thisvalue[4]<thatvalue[4]){value= -1;}
                                                                                    else if(thisvalue[4]==thatvalue[4]){
                                                                                      if(Card.SUIT_ORDER.compare(this.cards[4],that.cards[4])>0){value= 1;}
                                                                                      else if(Card.SUIT_ORDER.compare(this.cards[4],that.cards[4])<0){value= -1;}
                                                                                        }
                                                                                    }
                                                                                }
                else if((thisvalue[4]==thisvalue[3] && thisvalue[4]==thisvalue[2]) &&
                        (thatvalue[4]==thatvalue[3] && thatvalue[4]==thatvalue[2]) ){if(thisvalue[4]>thatvalue[4]){value= 1;}
                                                                                else if(thisvalue[4]<thatvalue[4]){value= -1;}
                                                                                else if(thisvalue[4]==thatvalue[4]){
                                                                                    if(Card.SUIT_ORDER.compare(this.cards[4],that.cards[4])>0){value= 1;}
                                                                                    else if(Card.SUIT_ORDER.compare(this.cards[4],that.cards[4])<0){value= -1;}
                                                                                    else if(thisvalue[0]>thatvalue[0]){value= 1;}
                                                                                    else if(thisvalue[0]<thatvalue[0]){value= -1;}
                                                                                    else if(thisvalue[0]==thatvalue[0]){
                                                                                      if(Card.SUIT_ORDER.compare(this.cards[0],that.cards[0])>0){value= 1;}
                                                                                      else if(Card.SUIT_ORDER.compare(this.cards[0],that.cards[0])<0){value= -1;}
                                                                                            }
                                                                                    }
                                                                                }
                else if(thisvalue[2]>thatvalue[2]){value= 1;}
                else if(thisvalue[2]<thatvalue[2]){value= -1;}
           }
           else if(thiscardvalue==5 && thatcardvalue==5){
                for(int i=4;i>=0;i--){
                    if(thisvalue[i]>thatvalue[i]){value= 1;break;}
                    else if(thisvalue[i]<thatvalue[i]){value= -1;break;}
                     }
            }
           else if(thiscardvalue==4 && thatcardvalue==4){

                    for(int i=4;i>=0;i--){
                    if(thisvalue[i]>thatvalue[i]){value= 1;break;}
                    else if(thisvalue[i]<thatvalue[i]){value= -1;break;}
                    else if(thisvalue[i]==thatvalue[i]){
                        if(Card.SUIT_ORDER.compare(this.cards[i],that.cards[i])>0){value= 1;break;}
                        else if(Card.SUIT_ORDER.compare(this.cards[i],that.cards[i])<0){value= -1;break;}
                         }
                    }
           }
          else if(thiscardvalue==3 && thatcardvalue==3){
                    if( thisvalue[4]==thisvalue[3] && thatvalue[4]==thatvalue[3] ){
                        if(thisvalue[4]>thatvalue[4]){value= 1;}
                        else if(thisvalue[4]<thatvalue[4]){value= -1;}
                        else if(Card.SUIT_ORDER.compare(this.cards[4],that.cards[4])>0){value= 1;}
                        else if(Card.SUIT_ORDER.compare(this.cards[4],that.cards[4])<0){value= -1;}
                                }
                    else if( thisvalue[3]==thisvalue[2] && thatvalue[3]==thatvalue[2] ){
                        if(thisvalue[3]>thatvalue[3]){value= 1;}
                        else if(thisvalue[3]<thatvalue[3]){value= -1;}                        
                        else if(Card.SUIT_ORDER.compare(this.cards[3],that.cards[3])>0){value= 1;}
                        else if(Card.SUIT_ORDER.compare(this.cards[3],that.cards[3])<0){value= -1;}
                                }
                     else if(thisvalue[3]>thatvalue[3]){value= 1;}
                     else if(thisvalue[3]<thatvalue[3]){value=-1;}
                      }
//          else if(thiscardvalue==3 && thatcardvalue==3){
//                    if( thisvalue[4]==thisvalue[3] && thatvalue[4]==thatvalue[3] ){
//                        if(thisvalue[4]>thatvalue[4]){value= 1;}
//                        else if(thisvalue[4]<thatvalue[4]){value= -1;}
//                        else if(Card.SUIT_ORDER.compare(this.cards[4],that.cards[4])>0){value= 1;}
//                        else if(Card.SUIT_ORDER.compare(this.cards[4],that.cards[4])<0){value= -1;}
//                                }
//                    else if( thisvalue[3]==thisvalue[2] && thatvalue[3]==thatvalue[2] ){
//                        if(thisvalue[3]>thatvalue[3]){value= 1;}
//                        else if(thisvalue[3]<thatvalue[3]){value= -1;}
//                        else if(Card.SUIT_ORDER.compare(this.cards[3],that.cards[3])>0){value= 1;}
//                        else if(Card.SUIT_ORDER.compare(this.cards[3],that.cards[3])<0){value= -1;}
//                                }
//                     else if(thisvalue[3]>thatvalue[3]){value= 1;}
//                     else if(thisvalue[3]<thatvalue[3]){value=-1;}
//                      }
           else if(thiscardvalue==2 && thatcardvalue==2){
               int vi=0,va=0;
                  for( vi=4;vi>=1;vi--){
                      if(thisvalue[vi]==thisvalue[vi-1]){break;}
                  }
                  for( va=4;va>=1;va--){
                      if(thisvalue[va]==thisvalue[va-1]){break;}
                  }
                  if(vi>va){value= 1;}
                  else if(vi>va){value= -1;}
                  else if(vi==va){
                        if(Card.SUIT_ORDER.compare(this.cards[vi],that.cards[va])>0){value= 1;}
                        else if(Card.SUIT_ORDER.compare(this.cards[vi],that.cards[va])<0){value= -1;}
                  }
           }
           else if(thiscardvalue==1 && thatcardvalue==1){
               if(thisvalue[4]>thatvalue[4]){value= 1;}
               else if(thisvalue[4]<thatvalue[4]){value= -1;}
               else if(thisvalue[4]==thatvalue[4]){
                        if(Card.SUIT_ORDER.compare(this.cards[4],that.cards[4])>0){value= 1;}
                        else if(Card.SUIT_ORDER.compare(this.cards[4],that.cards[4])<0){value= -1;}
               }
                   }
           
           return value;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
    
}

@f62ca913aef59f02c015824d67ddcd67@"
"b99611017","3","0.0966666666666667","105552","@9619bcb863448e4302de1239f137a658@
import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    private Card[] cards;

    public int[] cardLabel(Card[] cards) {

        int[] label = new int[5];

        for (int i = 0; i < 5; i++) {

            int value = 0;
            if (""A"".equals(cards[i].getFace())) {
                value += 12;
            } else if (""K"".equals(cards[i].getFace())) {
                value += 11;
            } else if (""Q"".equals(cards[i].getFace())) {
                value += 10;
            } else if (""J"".equals(cards[i].getFace())) {
                value += 9;
            } else if (""10"".equals(cards[i].getFace())) {
                value += 8;
            } else if (""9"".equals(cards[i].getFace())) {
                value += 7;
            } else if (""8"".equals(cards[i].getFace())) {
                value += 6;
            } else if (""7"".equals(cards[i].getFace())) {
                value += 5;
            } else if (""6"".equals(cards[i].getFace())) {
                value += 4;
            } else if (""5"".equals(cards[i].getFace())) {
                value += 3;
            } else if (""4"".equals(cards[i].getFace())) {
                value += 2;
            } else if (""3"".equals(cards[i].getFace())) {
                value += 1;
            } else if (""2"".equals(cards[i].getFace())) {
                value += 0;
            }
            if (""Spades"".equals(cards[i].getSuit())) {
                value = value * 4 + 3;
            } else if (""Hearts"".equals(cards[i].getSuit())) {
                value = value * 4 + 2;
            } else if (""Diamonds"".equals(cards[i].getSuit())) {
                value = value * 4 + 1;
            } else if (""Clubs"".equals(cards[i].getSuit())) {
                value = value * 4;
            }
            label[i] = value;
        }
        return label;
    }

    private int findMax(int[] a) {

        int b = 0;
        for (int i = 0; i < a.length; i++) {
            if (a[i] > b) {
                b = a[i];
            }
        }
        return b;
    }

    private int findGroup(int[] a) {
        int b = 0;
        for (int i = 0; i < a.length; i++) {
            if (a[i] != 0) {
                b++;
            }
        }
        return b;
    }

    //找大招
    private int[] combo(int[] card) {
        int faceGroup = 0;
        int suitGroup = 0;
        int fgMax = 0;
        int sgMax = 0;
        int ans[] = new int[2];

        int[] face = new int[13];
        int[] suit = new int[4];
        for (int i = 0; i < card.length; i++) {
            face[card[i] / 4]++;
            suit[card[i] % 4]++;

        }

        faceGroup = findGroup(face);
        suitGroup = findGroup(suit);
        fgMax = findMax(face);
        sgMax = findMax(suit);
        //full house
        if (faceGroup == 2 && fgMax == 3) {
            ans[0] = 5;
            if (card[0] / 4 == card[2] / 4) {
                ans[1] = card[2];
            } else if (card[0] / 4 != card[2] / 4) {
                ans[1] = card[4];
            }

        }
        //flush
        if (suitGroup == 1 && sgMax == 5 && ans[0] == 0) {

            ans[0] = 4;
            ans[1] = card[card.length - 1];

        }
        //straight    and high card
        if (faceGroup == 5 && fgMax == 1 && ans[0] == 0) {

            int TF = 0;
            for (int i = 0; i < card.length - 2; i++) {
                if (card[i + 1] / 4 == card[i] / 4 + 1) {
                    TF += 1;
                }
            }
            if ((TF == 3 && card[3] / 4 + 1 == card[4] / 4) || (TF == 3 && card[3] / 4 + 9 == card[4] / 4)) {
                ans[0] = 2;
                ans[1] = card[card.length - 1];

            } else {
                ans[0] = 0;
                ans[1] = card[card.length - 1];
            }

        }
        //two pair
        if (faceGroup == 3 && fgMax == 2 && ans[0] == 0) {
            ans[0] = 2;
            int temp = 0;
            for (int i = 0; i < face.length; i++) {
                if (face[i] == 2) {
                    temp = i;
                }
            }
            for (int i = 0; i < card.length; i++) {
                if (card[i] / 4 == temp) {
                    ans[1] = card[i];
                }
            }

        }
        //one pair
        if (faceGroup == 4 && fgMax == 2 && ans[0] == 0) {
            ans[0] = 1;
            int temp = 0;
            for (int i = 0; i < face.length; i++) {
                if (face[i] == 2) {
                    temp = i;
                }
            }
            for (int i = 0; i < card.length; i++) {
                if (card[i] / 4 == temp) {

                    ans[1] = card[i];
                }
            }

        }

        return ans;
    }

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards) {
        
        this.cards = cards;
        
    }

    // TODO
    public int compareTo(Hand that) {
        Arrays.sort(cards);
        int ans = 0;
        int[] a = combo(cardLabel(this.cards));
        int[] b = combo(cardLabel(that.cards));
    
        if (a[0] > b[0]) {
            ans = 1;
        } else if (a[0] < b[0]) {
            ans = -1;
        } else if (a[0] == b[0] && a[1] > b[1]) {
            ans = 1;
        } else if (a[0] == b[0] && a[1] < b[1]) {
            ans = -1;
        }

        return ans;

    }

    // Do not modified this function
    public Card[] getCards() {
        return this.cards;
    }

}

@9619bcb863448e4302de1239f137a658@"
"r03525006","3","0.1","105552","@3ea191ec671b5e55754e94670533b426@import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards = new Card[5];

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        for (int i = 0; i < 5; i++)
            this.cards[i] = cards[i];
    }

    public int[] faceArray(Card[] card) {
        String[] faceArray = {""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"", ""A""};
        int[] ans = new int[5];
        int face = 0;
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 13; j++)
                if (card[i].getFace().equals(faceArray[j])) face = j+1;
            ans[i] = face;
        } return ans;
    }

    // TODO
    public int compareTo(Hand that) {
        // complete this function so the Player can be sorted according to the cards he/she has.

        int orderPlayer1 = 6;
        int orderPlayer2 = 6;
        // one pair
        if (this.isOnePair()) orderPlayer1 = 5;
        if (that.isOnePair()) orderPlayer2 = 5;
        // two pair
        if (this.isTwoPair()) orderPlayer1 = 4;
        if (that.isTwoPair()) orderPlayer2 = 4;
        // straight
        if (this.isStraight()) orderPlayer1 = 3;
        if (that.isStraight()) orderPlayer2 = 3;
        // flush
        if (this.isFlush()) orderPlayer1 = 2;
        if (that.isFlush()) orderPlayer2 = 2;
        // full house
        if (this.isFullHouse()) orderPlayer1 = 1;
        if (that.isFullHouse()) orderPlayer2 = 1;


        // compare
        if (orderPlayer1 < orderPlayer2) return 1;
        else if (orderPlayer1 > orderPlayer2) return -1;
        else {
            switch (orderPlayer1) {
                // full house
                case 1 :
                    Card fullHouse1 = this.getFullHouse();
                    Card fullHouse2 = that.getFullHouse();
                    if (fullHouse1.compareTo(fullHouse2) == 1) return 1;
                    else if (fullHouse1.compareTo(fullHouse2) == -1) return -1;
                    else return 0;

                    // flush
                case 2 :
                    Card flush1 = this.getFlush();
                    Card flush2 = that.getFlush();
                    if (flush1.compareTo(flush2) == 1) return 1;
                    else if (flush1.compareTo(flush2) == -1) return -1;
                    else return 0;

                    // straight
                case 3 :
                    Card straight1 = this.getStraight();
                    Card straight2 = that.getStraight();
                    if (straight1.compareTo(straight2) == 1) return 1;
                    else if (straight1.compareTo(straight2) == -1) return -1;
                    else return 0;

                    // two pair
                case 4 :
                    Card twoPair1 = this.getTwoPair();
                    Card twoPair2 = that.getTwoPair();
                    if (twoPair1.compareTo(twoPair2) == 1) return 1;
                    else if (twoPair1.compareTo(twoPair2) == -1) return -1;
                    else return 0;

                    // one pair
                case 5 :
                    Card onePair1 = this.getOnePair();
                    Card onePair2 = that.getOnePair();
                    if (onePair1.compareTo(onePair2) == 1) return 1;
                    else if (onePair1.compareTo(onePair2) == -1) return -1;
                    else return 0;

                    // high card
                case 6 :
                    Card Player1 = this.getHighCard();
                    Card Player2 = that.getHighCard();
                    if (Player1.compareTo(Player2) == 1) return 1;
                    else if (Player1.compareTo(Player2) == -1) return -1;
                    else return 0;

            }
        } return 0;
    }

    public boolean isFullHouse() {
        int count = 0;
        for (int i = 0; i < 4; i++)
            for (int j = i + 1; j < 5; j++)
                if (cards[i].getFace().equals(cards[j].getFace())) count++;
        return count == 4;
    }

    public boolean isFlush() {
        int count = 0;
        for (int i = 0; i < 4; i++)
            for (int j = i + 1; j < 5; j++)
                if (cards[i].getSuit().equals(cards[j].getSuit())) count++;
        return count == 10;
    }

    public boolean isStraight() {
        Card[] cardCopy = new Card[5];
        for (int i = 0; i < 5; i++)
            cardCopy[i] = cards[i];
        Arrays.sort(cardCopy);
        int[] faceNum = this.faceArray(cardCopy);
        int count = 0;
        if (cardCopy[4].getFace().equals(""A"") & cardCopy[0].getFace().equals(""2"")) {
            for (int i = 1; i < 4; i++)
                if (faceNum[i] == i+1) count++;
            return count == 3;
        } else {
            for (int i = 0; i < 4; i++)
                if (faceNum[i+1] - faceNum[i] == 1) count++;
            return count == 4;
        }
    }

    public boolean isTwoPair() {
        int count = 0;
        for (int i = 0; i < 4; i++)
            for (int j = i + 1; j < 5; j++)
                if (cards[i].getFace().equals(cards[j].getFace())) count++;
        return count == 2;
    }

    public boolean isOnePair() {
        int count = 0;
        for (int i = 0; i < 4; i++)
            for (int j = i + 1; j < 5; j++)
                if (cards[i].getFace().equals(cards[j].getFace())) count++;
        return count == 1;
    }

    private Card getFullHouse() {
        Card[] cardCopy = new Card[5];
        for (int i = 0; i < 5; i++)
            cardCopy[i] = cards[i];
        Arrays.sort(cardCopy);
        int face1Count = 0;
        String face1 = cardCopy[4].getFace();
        for (int i = 0; i < 4; i++)
            if (face1.equals(cardCopy[i].getFace())) face1Count++;
        if (face1Count == 1) return cardCopy[2];
        else return cardCopy[4];
    }

    private Card getFlush() {
        Card[] cardCopy = new Card[5];
        for (int i = 0; i < 5; i++)
            cardCopy[i] = cards[i];
        Arrays.sort(cardCopy);
        return cardCopy[4];
    }

    private Card getStraight() {
        Card[] cardCopy = new Card[5];
        for (int i = 0; i < 5; i++)
            cardCopy[i] = cards[i];
        Arrays.sort(cardCopy);
        if (cardCopy[4].getFace().equals(""A"") & cardCopy[0].getFace().equals(""2"")) return cardCopy[3];
        else return cardCopy[0];
    }

    private Card getTwoPair() {
        Card[] cardCopy = new Card[5];
        for (int i = 0; i < 5; i++)
            cardCopy[i] = cards[i];
        Arrays.sort(cardCopy);
        String face1 = cardCopy[4].getFace();
        int face1Count = 0;
        for (int i = 0; i < 4; i++)
            if (face1.equals(cardCopy[i].getFace())) face1Count++;
        if (face1Count == 1) return cardCopy[4];
        else return cardCopy[3];
    }

    private Card getOnePair() {
        Card[] cardCopy = new Card[5];
        for (int i = 0; i < 5; i++)
            cardCopy[i] = cards[i];
        int pairIndex1 = 0;
        int pairIndex2 = 0;
        for (int i = 0; i < 4; i++) {
            for (int j = i + 1; j < 5; j++) {
                if (cardCopy[i].getFace().equals(cardCopy[j].getFace())) {
                    pairIndex1 = i;
                    pairIndex2 = j;
                    break;
                }
            }
        }
        if (cardCopy[pairIndex1].compareTo(cardCopy[pairIndex2]) == 1) return cardCopy[pairIndex1];
        else return cardCopy[pairIndex2];
    }

    private Card getHighCard() {
        Card[] cardCopy = new Card[5];
        for (int i = 0; i < 5; i++)
            cardCopy[i] = cards[i];
        Arrays.sort(cardCopy);
        return cardCopy[4];
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@3ea191ec671b5e55754e94670533b426@"
"b02611002","0","0.29","105504","@d8feb1828e1ff5e490c4ce96da220722@import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards = new Card[5];

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards=cards;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

    // TODO
    public int compareTo(Hand that) {
        // complete this function so the Hand can be sorted according to its cards.


        int[] scores={0,0}; //hand[1] for this, hand[2] for that.

        boolean[] isFullHouse={false,false};
        int FHCounter=0;
        String[] FHThreeFace={""-1"",""-1""};//10 //9
        String[] FHTwoFace={""-1"",""-1""};//4 //A
        String[] tempFHTwoFace={""-1"",""-1""};

        boolean[] isFlush={false,false};
        int suitCombo[]={0,0};

        boolean[] isStraight={false,false};
        int faceCombo[]={0,0};

        boolean[] isTwoPair={false,false};

        boolean[] isOnePair={false,false};
        boolean isFirstCard=true;



        Card[] NThis = this.cards;  //cards in ""numerical"" expression (A->14, J->11, Q->12, K->13)
        Card[] NThat = that.cards;
        for(int i=0;i<NThis.length;i++){

            switch (NThis[i].getFace()){
                case ""A"": NThis[i]=new Card(""14"",NThis[i].getSuit());break;
                case ""J"": NThis[i]=new Card(""11"",NThis[i].getSuit());break;
                case ""Q"": NThis[i]=new Card(""12"",NThis[i].getSuit());break;
                case ""K"": NThis[i]=new Card(""13"",NThis[i].getSuit());break;
            }

            switch (NThat[i].getFace()){
                case ""A"": NThat[i]=new Card(""14"",NThis[i].getSuit());break;
                case ""J"": NThat[i]=new Card(""11"",NThis[i].getSuit());break;
                case ""Q"": NThat[i]=new Card(""12"",NThis[i].getSuit());break;
                case ""K"": NThat[i]=new Card(""13"",NThis[i].getSuit());break;
            }
        }


        Arrays.sort(NThis);
        //TODO remove
        
        Arrays.sort(NThat);
        


        int hID=0;
        Card[] currentHand = NThis;
        for(int i =0;i<2;i++){  // loop: NThis, NThat
            if(hID==1) currentHand=NThat;

            Card previous = new Card(""2"",""Clubs"");
            FHCounter=0;
            suitCombo[hID]=0;
            faceCombo[hID]=0;
            FHThreeFace[hID]=""-1"";
            FHTwoFace[hID]=""-1"";
            tempFHTwoFace[hID]=""-1"";

            for(Card c:currentHand){// loop: card1, card2, card3, card4 ...

                //handle first card case
                if(isFirstCard){
                    FHCounter=1;
                    suitCombo[hID]=1;
                    faceCombo[hID]=1;
                    isFirstCard=false;
                    previous=c;
                    continue;
                }

                // FullHouse counter
                if (previous.getFace() == c.getFace()) FHCounter++;
                else FHCounter = 1;
                if (FHCounter == 3) {
                    FHThreeFace[hID] = c.getFace();
                    FHTwoFace[hID] = tempFHTwoFace[hID];
                } else if (FHCounter == 2) {
                    tempFHTwoFace[hID] = FHTwoFace[hID];
                    FHTwoFace[hID] = c.getFace();
                }

                // Flush counter
                if(previous.getSuit().equals(c.getSuit())){
                    suitCombo[hID]++;
                }

                // Straight counter
                if(Integer.parseInt(c.getFace())-Integer.parseInt(previous.getFace())==1){
                    faceCombo[hID]++;
                }

                previous=c;
            }// loop: card1, card2, card3, card4 ...


            scores[hID]=Integer.parseInt(currentHand[4].getFace());

            if(!FHTwoFace[hID].equals(""-1"")){
                isOnePair[hID]=true;
                scores[hID]=20;
            }
            if(!tempFHTwoFace[hID].equals(""-1"") && !FHTwoFace[hID].equals(""-1"")){
                isTwoPair[hID]=true;
                scores[hID]=30;
            }
            if(faceCombo[hID]==5){
                isStraight[hID]=true;
                scores[hID]=40;
            }
            if(suitCombo[hID]==5){
                isFlush[hID]=true;
                scores[hID]=50;
            }
            if (!FHThreeFace[hID].equals(""-1"") && !FHTwoFace[hID].equals(""-1"")) {
                isFullHouse[hID]=true;
                scores[hID]=60;
            }
            hID++;

        }// loop: NThis, NThat





        if(isFullHouse[0]&&isFullHouse[1]){
            if(Integer.parseInt(FHThreeFace[0])>Integer.parseInt(FHThreeFace[1])){
                scores[0]+=6;
            }else if(Integer.parseInt(FHThreeFace[0])<Integer.parseInt(FHThreeFace[1])){
                scores[1]+=6;
            }
        }

        if(isFlush[0]&&isFlush[1]){
            if(Integer.parseInt(NThis[4].getFace())>Integer.parseInt(NThat[4].getFace())){
                scores[0]+=5;
            }else if(Integer.parseInt(NThis[4].getFace())<Integer.parseInt(NThat[4].getFace())){
                scores[1]+=5;
            }
        }


        if(isStraight[0]&&isStraight[1]){
            if(Integer.parseInt(NThis[4].getFace())==14)scores[0]-=3;
            if(Integer.parseInt(NThat[4].getFace())==14)scores[0]-=3;
            if(Integer.parseInt(NThis[0].getFace())>Integer.parseInt(NThat[0].getFace())){
                scores[0]+=3;
            }else if(Integer.parseInt(NThis[0].getFace())<Integer.parseInt(NThat[0].getFace())) {
                scores[1]+=3;
            }
        }

        if(isTwoPair[0] && isTwoPair[1]){
            if(Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[0]+=3;
            }else if (Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[1]+=3;
            }
        }

        if(isOnePair[0] && isOnePair[1]){
            if(Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[0]+=2;
            }else if (Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[1]+=2;
            }
        }


        
        return scores[0]-scores[1];
    }
}

@d8feb1828e1ff5e490c4ce96da220722@"
"b02611002","0","0.3","101264","@3ce5b239922e7b2d05acc91ec1af9ab2@import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards = new Card[5];

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards=cards;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

    // TODO
    public int compareTo(Hand that) {
        // complete this function so the Hand can be sorted according to its cards.


        int[] scores={0,0}; //hand[1] for this, hand[2] for that.

        boolean[] isFullHouse={false,false};
        int FHCounter=0;
        String[] FHThreeFace={""-1"",""-1""};//10 //9
        String[] FHTwoFace={""-1"",""-1""};//4 //A
        String[] tempFHTwoFace={""-1"",""-1""};

        boolean[] isFlush={false,false};
        int suitCombo[]={0,0};

        boolean[] isStraight={false,false};
        int faceCombo[]={0,0};

        boolean[] isTwoPair={false,false};

        boolean[] isOnePair={false,false};
        boolean isFirstCard=true;



        Card[] NThis = this.cards;  //cards in ""numerical"" expression (A->14, J->11, Q->12, K->13)
        Card[] NThat = that.cards;
        for(int i=0;i<NThis.length;i++){

            switch (NThis[i].getFace()){
                case ""A"": NThis[i]=new Card(""14"",NThis[i].getSuit());break;
                case ""J"": NThis[i]=new Card(""11"",NThis[i].getSuit());break;
                case ""Q"": NThis[i]=new Card(""12"",NThis[i].getSuit());break;
                case ""K"": NThis[i]=new Card(""13"",NThis[i].getSuit());break;
            }

            switch (NThat[i].getFace()){
                case ""A"": NThat[i]=new Card(""14"",NThat[i].getSuit());break;
                case ""J"": NThat[i]=new Card(""11"",NThat[i].getSuit());break;
                case ""Q"": NThat[i]=new Card(""12"",NThat[i].getSuit());break;
                case ""K"": NThat[i]=new Card(""13"",NThat[i].getSuit());break;
            }
        }


        Arrays.sort(NThis);
//        //TODO remove
//        System.out.println(""\n*Print NThis:"");
//        for(Card c:NThis){
//            System.out.println(c.getFace()+c.getSuit());
//        }
        Arrays.sort(NThat);
//        //TODO remove
//        System.out.println(""*Print NThat:"");
//        for(Card c:NThat){
//            System.out.println(c.getFace()+c.getSuit());
//        }


        int hID=0;
        Card[] currentHand = NThis;
        for(int i =0;i<2;i++){  // loop: NThis, NThat
            if(hID==1) currentHand=NThat;

            Card previous = new Card(""2"",""Clubs"");
            FHCounter=0;
            suitCombo[hID]=0;
            faceCombo[hID]=0;
            FHThreeFace[hID]=""-1"";
            FHTwoFace[hID]=""-1"";
            tempFHTwoFace[hID]=""-1"";

            for(Card c:currentHand){// loop: card1, card2, card3, card4 ...

                //handle first card case
                if(isFirstCard){
                    FHCounter=1;
                    suitCombo[hID]=1;
                    faceCombo[hID]=1;
                    isFirstCard=false;
                    previous=c;
                    continue;
                }

                // FullHouse counter
                if (previous.getFace() == c.getFace()) FHCounter++;
                else FHCounter = 1;
                if (FHCounter == 3) {
                    FHThreeFace[hID] = c.getFace();
                    FHTwoFace[hID] = tempFHTwoFace[hID];
                } else if (FHCounter == 2) {
                    tempFHTwoFace[hID] = FHTwoFace[hID];
                    FHTwoFace[hID] = c.getFace();
                }

                // Flush counter
                if(previous.getSuit().equals(c.getSuit())){
                    suitCombo[hID]++;
                }

                // Straight counter
                if(Integer.parseInt(c.getFace())-Integer.parseInt(previous.getFace())==1){
                    faceCombo[hID]++;
                }

                previous=c;
            }// loop: card1, card2, card3, card4 ...


            scores[hID]=Integer.parseInt(currentHand[4].getFace());

            if(!FHTwoFace[hID].equals(""-1"")){
                isOnePair[hID]=true;
                scores[hID]=20;
            }
            if(!tempFHTwoFace[hID].equals(""-1"") && !FHTwoFace[hID].equals(""-1"")){
                isTwoPair[hID]=true;
                scores[hID]=30;
            }
            if(faceCombo[hID]==5){
                isStraight[hID]=true;
                scores[hID]=40;
            }
            if(suitCombo[hID]==5){
                isFlush[hID]=true;
                scores[hID]=50;
            }
            if (!FHThreeFace[hID].equals(""-1"") && !FHTwoFace[hID].equals(""-1"")) {
                isFullHouse[hID]=true;
                scores[hID]=60;
            }
            hID++;
            isFirstCard=true;

        }// loop: NThis, NThat







        if(isFullHouse[0]&&isFullHouse[1]){
            if(Integer.parseInt(FHThreeFace[0])>Integer.parseInt(FHThreeFace[1])){
                scores[0]+=6;
            }else if(Integer.parseInt(FHThreeFace[0])<Integer.parseInt(FHThreeFace[1])){
                scores[1]+=6;
            }
        }else if(isFlush[0]&&isFlush[1]){
            if(Integer.parseInt(NThis[4].getFace())>Integer.parseInt(NThat[4].getFace())){
                scores[0]+=5;
            }else if(Integer.parseInt(NThis[4].getFace())<Integer.parseInt(NThat[4].getFace())){
                scores[1]+=5;
            }
        }else if(isStraight[0]&&isStraight[1]){
            if(Integer.parseInt(NThis[4].getFace())==14)scores[0]-=3;
            if(Integer.parseInt(NThat[4].getFace())==14)scores[0]-=3;
            if(Integer.parseInt(NThis[0].getFace())>Integer.parseInt(NThat[0].getFace())){
                scores[0]+=3;
            }else if(Integer.parseInt(NThis[0].getFace())<Integer.parseInt(NThat[0].getFace())) {
                scores[1]+=3;
            }
        }else if(isTwoPair[0] && isTwoPair[1]){
            if(Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[0]+=3;
            }else if (Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[1]+=3;
            }
        }else if(isOnePair[0] && isOnePair[1]){
            if(Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[0]+=2;
            }else if (Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[1]+=2;
            }
        }else if(NThis[4].getFace().equals(NThat[4].getFace())){
            if (NThis[4].compareTo(NThat[4])>0){
                scores[0]++;
            }else if(NThis[4].compareTo(NThat[4])<0){
                scores[1]++;
            }
        }


//        System.out.printf(""*** compareTo return: %d (%d-%d)"",(scores[0]-scores[1]),scores[0],scores[1]);
        return scores[0]-scores[1];
    }
}

@3ce5b239922e7b2d05acc91ec1af9ab2@"
"b01b01039","3","0.0966666666666667","105520","@88a159930bcdfc3ca967ae997d3705cf@import java.util.Arrays;
import java.util.Comparator;
import java.io.FileReader;
import java.io.BufferedReader;

public class Hand implements Comparable<Hand> {
	
	private static final String[] FACE = {""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"", ""A""};
	private static final String[] SUIT = {""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};	
    private static final String[] HAND = {""HC"", ""1P"", ""2P"", ""St"", ""Fl"", ""FH""};
	
	private int[] face;
	private int[] suit;
	// sorted by Card value are recommended but not necessary
    private Card[] cards; 
	private int[]  hand;
	
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        hand = new int[3];
		Arrays.sort(cards);
		this.cards = cards;
		this.face = SF2IF(cards);
		this.suit = SS2IF(cards);
		Hand_D();
    }

    // TODO
    public int compareTo(Hand that) {
        if     (this.hand[0] > that.hand[0]) return  1;
		else if(this.hand[0] < that.hand[0]) return -1;
		else if(this.hand[1] > that.hand[1]) return  1;
		else if(this.hand[1] < that.hand[1]) return -1;
		else if(this.hand[2] > that.hand[2]) return  1;
		else if(this.hand[2] < that.hand[2]) return -1;
		return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
	
	public void get_hand() {
	System.out.printf(""%2s %2s %8s"", HAND[hand[0]], FACE[hand[1]], SUIT[hand[2]]);
		System.out.println();
	}
	
	private int[] SF2IF(Card cards[]){
		int n = cards.length;
		int[] face = new int[n];
		for(int i = 0; i < n; i++){
			for(int j = 0; j < 13; j++){
				if(cards[i].getFace().equals(FACE[j])) face[i] = j;
			}
		}
		return face;
	}
	
	private int[] SS2IF(Card cards[]){
		int n = cards.length;
		int[] suit = new int[n];
		for(int i = 0; i < n; i++){
			for(int j = 0; j < 4; j++){
				if(cards[i].getSuit().equals(SUIT[j])) suit[i] = j;
			}
		}
		return suit;
	}
	
	private int IsFH(){
		if (this.face[0] == this.face[1] && this.face[1] == this.face[2]){
			if  (this.face[3] == this.face[4]) return   0;
			else                               return  -1;
		}else if (this.face[2] == this.face[3] && this.face[3] == this.face[4]){
			if  (this.face[0] == this.face[1]) return   2;
			else                               return  -1;
		}else{
			return -1;
		}
	}
	
	private int IsFl(){
		for(int i=0; i<4; i++){
			if(this.suit[i] != this.suit[i+1]) return -1;
		}
		return 4;
	}
	
	private int IsSt(){
		if(this.face[4] == 12 && this.face[0] == 0){  //2(0) 3(1) 4(2) 5(3) A(12)
			if(this.face[1] == 1 && this.face[2] == 2 && this.face[3] == 3) return  0;
			else                                                            return -1;
		}else{
			for(int i = 1; i < 5; i++){
				if(this.face[i] - this.face[i-1] != 1) break;
				if(i == 4)                             return 4;
			}
		}
		return -1;
	}
	
	private int Is2P(){
		if(this.face[0] == this.face[1]){
			if(this.face[2] == this.face[3]) return 3;
			if(this.face[3] == this.face[4]) return 4;
		}else if(this.face[1] == this.face[2]){
			if(this.face[3] == this.face[4]) return 4;
		}
		return -1;
	}
	
	private int Is1P(){
		if(this.face[0] == this.face[1]) return 1;
		if(this.face[1] == this.face[2]) return 2;
		if(this.face[2] == this.face[3]) return 3;
		if(this.face[3] == this.face[4]) return 4;
		return -1;
	}
	
	public void Hand_D(){
		int i = -1;
		int h = -1;
		if     (IsFH()>=0) {h = 5;i = IsFH();}
		else if(IsFl()>=0) {h = 4;i = IsFl();}
		else if(IsSt()>=0) {h = 3;i = IsSt();}
		else if(Is2P()>=0) {h = 2;i = Is2P();}
		else if(Is1P()>=0) {h = 1;i = Is1P();}
		else               {h = 0;i = 4;}
		this.hand[0] = h;
		this.hand[1] = face[i];
		this.hand[2] = suit[i];
	}
	
	
	public static void main(String[] args) throws Exception{
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            int idx = 0;
			String[] s = br.readLine().split("","");
            int handCount = Integer.parseInt(s[0]);
			int handNum   = Integer.parseInt(s[1]);
            
			Hand[] handArray = new Hand[handCount];
			
            for(String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
				handArray[idx++] = new Hand(cardsArray);
            }

			System.out.println(""Before arrange"");
			for(int i=0; i<handCount; i++){
				System.out.printf(""%2d "",i);
				handArray[i].get_hand();
			}
			
			Arrays.sort(handArray);
			
			System.out.println(""After arrange"");
			for(int i=handCount-1; i>-1; i--){
				handArray[i].get_hand();
			}
		}
    }
}

@88a159930bcdfc3ca967ae997d3705cf@"
"b01b01039","3","0.1","101584","@f89629d2577e23e92ced75d86b1bb24a@import java.util.Arrays;
import java.util.Comparator;
import java.io.FileReader;
import java.io.BufferedReader;

public class Hand implements Comparable<Hand> {
	
	private static final String[] FACE = {""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"", ""A""};
	private static final String[] SUIT = {""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};	
    private static final String[] HAND = {""HC"", ""1P"", ""2P"", ""St"", ""Fl"", ""FH""};
	
	private int[] face;
	private int[] suit;
	// sorted by Card value are recommended but not necessary
    private Card[] cards; 
	private int[]  hand;
	
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        hand = new int[3];
		
		this.cards = cards;
		Arrays.sort(cards);
		/*for(int i = 0; i<5; i++){
			System.out.print(cards[i].getFace() + "" "" + cards[i].getSuit() + "" "");
		}
		System.out.println();
		for(int i = 0; i<5; i++){
			System.out.print(this.cards[i].getFace() + "" "" + this.cards[i].getSuit() + "" "");
		}
		System.out.println();*/
		this.face = SF2IF(cards);
		this.suit = SS2IF(cards);
		Hand_D();
    }

    // TODO
    public int compareTo(Hand that) {
        if     (this.hand[0] > that.hand[0]) return  1;
		else if(this.hand[0] < that.hand[0]) return -1;
		else if(this.hand[1] > that.hand[1]) return  1;
		else if(this.hand[1] < that.hand[1]) return -1;
		else if(this.hand[2] > that.hand[2]) return  1;
		else if(this.hand[2] < that.hand[2]) return -1;
		return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
	
	public void get_hand() {
	System.out.printf(""%2s %2s %8s"", HAND[hand[0]], FACE[hand[1]], SUIT[hand[2]]);
		System.out.println();
	}
	
	private int[] SF2IF(Card cards[]){
		int n = cards.length;
		int[] face = new int[n];
		for(int i = 0; i < n; i++){
			for(int j = 0; j < 13; j++){
				if(cards[i].getFace().equals(FACE[j])) face[i] = j;
			}
		}
		return face;
	}
	
	private int[] SS2IF(Card cards[]){
		int n = cards.length;
		int[] suit = new int[n];
		for(int i = 0; i < n; i++){
			for(int j = 0; j < 4; j++){
				if(cards[i].getSuit().equals(SUIT[j])) suit[i] = j;
			}
		}
		return suit;
	}
	
	private int IsFH(){
		if (this.face[0] == this.face[1] && this.face[1] == this.face[2]){
			if  (this.face[3] == this.face[4]) return   0;
			else                               return  -1;
		}else if (this.face[2] == this.face[3] && this.face[3] == this.face[4]){
			if  (this.face[0] == this.face[1]) return   2;
			else                               return  -1;
		}else{
			return -1;
		}
	}
	
	private int IsFl(){
		for(int i=0; i<4; i++){
			if(this.suit[i] != this.suit[i+1]) return -1;
		}
		return 4;
	}
	
	private int IsSt(){
		if(this.face[4] == 12 && this.face[0] == 0){  //2(0) 3(1) 4(2) 5(3) A(12)
			if(this.face[1] == 1 && this.face[2] == 2 && this.face[3] == 3) return  0;
			else                                                            return -1;
		}else{
			for(int i = 1; i < 5; i++){
				if(this.face[i] - this.face[i-1] != 1) break;
				if(i == 4)                             return 4;
			}
		}
		return -1;
	}
	
	private int Is2P(){
		if(this.face[0] == this.face[1]){
			if(this.face[2] == this.face[3]) return 3;
			if(this.face[3] == this.face[4]) return 4;
		}else if(this.face[1] == this.face[2]){
			if(this.face[3] == this.face[4]) return 4;
		}
		return -1;
	}
	
	private int Is1P(){
		if(this.face[0] == this.face[1]) return 1;
		if(this.face[1] == this.face[2]) return 2;
		if(this.face[2] == this.face[3]) return 3;
		if(this.face[3] == this.face[4]) return 4;
		return -1;
	}
	
	public void Hand_D(){
		int i = -1;
		int h = -1;
		if     (IsFH()>=0) {h = 5;i = IsFH();}
		else if(IsFl()>=0) {h = 4;i = IsFl();}
		else if(IsSt()>=0) {h = 3;i = IsSt();}
		else if(Is2P()>=0) {h = 2;i = Is2P();}
		else if(Is1P()>=0) {h = 1;i = Is1P();}
		else               {h = 0;i = 4;}
		this.hand[0] = h;
		this.hand[1] = face[i];
		this.hand[2] = suit[i];
	}
	
	
	public static void main(String[] args) throws Exception{
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            int idx = 0;
			String[] s = br.readLine().split("","");
            int handCount = Integer.parseInt(s[0]);
			int handNum   = Integer.parseInt(s[1]);
            
			Hand[] handArray = new Hand[handCount];
			
            for(String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
				handArray[idx++] = new Hand(cardsArray);
            }

			System.out.println(""Before arrange"");
			for(int i=0; i<handCount; i++){
				System.out.printf(""%2d "",i);
				handArray[i].get_hand();
			}
			
			Arrays.sort(handArray);
			
			System.out.println(""After arrange"");
			for(int i=handCount-1; i>-1; i--){
				handArray[i].get_hand();
			}
		}
    }
}

@f89629d2577e23e92ced75d86b1bb24a@"
"r04631031","0","0.3","101264","@381ab406504092826f51e1ac2ddfa687@
import java.util.Arrays;
import javax.smartcardio.Card;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    private Object Insertion;
    private String suit;
    private String face;

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
        return;
    }

    // TODO
    public int compareTo(Hand that) {
     // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int num1 = 0;
        int num2 = 0;
        int temp1 = 0;
        int temp2 = 0;
        switch (this.face){
            case ""A"":
                num1=13;
                break;
            case ""K"":
                num1=12;
                break;
            case ""Q"":
                num1=11;
                break;
            case ""J"":
                num1=10;
                break;
            case ""10"":
                num1=9;
                break;
            case ""9"":
                num1=8;
                break;
            case ""8"":
                num1=7;
                break;
            case ""7"":
                num1=6;
                break;
            case ""6"":
                num1=5;
                break;
            case ""5"":
                num1=4;
                break;
            case ""4"":
                num1=3;
                break;
            case ""3"":
                num1=2;
                break;
            case ""2"":
                num1=1;
                break;
        
        }
        switch (that.face){
            case ""A"":
                num2=13;
                break;
            case ""K"":
                num2=12;
                break;
            case ""Q"":
                num2=11;
                break;
            case ""J"":
                num2=10;
                break;
            case ""10"":
                num2=9;
                break;
            case ""9"":
                num2=8;
                break;
            case ""8"":
                num2=7;
                break;
            case ""7"":
                num2=6;
                break;
            case ""6"":
                num2=5;
                break;
            case ""5"":
                num2=4;
                break;
            case ""4"":
                num2=3;
                break;
            case ""3"":
                num2=2;
                break;
            case ""2"":
                num2=1;
                break;
        
        }
        
        switch (this.suit) {
            case ""Spades"":
                temp1 = 4;
                break;
            case ""Hearts"":
                temp1 = 3;
                break;
            case ""Diamonds"":
                temp1 = 2;
                break;
            case ""Clubs"":
                temp1 = 1;
                break;
        }
        switch (that.suit) {
            case ""Spades"":
                temp2 = 4;
                break;
            case ""Hearts"":
                temp2 = 3;
                break;
            case ""Diamonds"":
                temp2 = 2;
                break;
            case ""Clubs"":
                temp2 = 1;
                break;
        }
        if(num1>num2) return 1;
        if(num1<num2) return -1;
        if(temp1>temp2) return 1;
        if(temp1<temp2) return -1;   
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@381ab406504092826f51e1ac2ddfa687@"
"r04631031","0","0","0","@6f37322304d3fdef184dadc9f949beda@

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    private Object Insertion;
    private String suit;
    private String face;

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
        return;
    }

    // TODO
    public int compareTo(Hand that) {
     // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int num1 = 0;
        int num2 = 0;
        int temp1 = 0;
        int temp2 = 0;
        switch (this.face){
            case ""A"":
                num1=13;
                break;
            case ""K"":
                num1=12;
                break;
            case ""Q"":
                num1=11;
                break;
            case ""J"":
                num1=10;
                break;
            case ""10"":
                num1=9;
                break;
            case ""9"":
                num1=8;
                break;
            case ""8"":
                num1=7;
                break;
            case ""7"":
                num1=6;
                break;
            case ""6"":
                num1=5;
                break;
            case ""5"":
                num1=4;
                break;
            case ""4"":
                num1=3;
                break;
            case ""3"":
                num1=2;
                break;
            case ""2"":
                num1=1;
                break;
        
        }
        switch (that.face){
            case ""A"":
                num2=13;
                break;
            case ""K"":
                num2=12;
                break;
            case ""Q"":
                num2=11;
                break;
            case ""J"":
                num2=10;
                break;
            case ""10"":
                num2=9;
                break;
            case ""9"":
                num2=8;
                break;
            case ""8"":
                num2=7;
                break;
            case ""7"":
                num2=6;
                break;
            case ""6"":
                num2=5;
                break;
            case ""5"":
                num2=4;
                break;
            case ""4"":
                num2=3;
                break;
            case ""3"":
                num2=2;
                break;
            case ""2"":
                num2=1;
                break;
        
        }
        
        switch (this.suit) {
            case ""Spades"":
                temp1 = 4;
                break;
            case ""Hearts"":
                temp1 = 3;
                break;
            case ""Diamonds"":
                temp1 = 2;
                break;
            case ""Clubs"":
                temp1 = 1;
                break;
        }
        switch (that.suit) {
            case ""Spades"":
                temp2 = 4;
                break;
            case ""Hearts"":
                temp2 = 3;
                break;
            case ""Diamonds"":
                temp2 = 2;
                break;
            case ""Clubs"":
                temp2 = 1;
                break;
        }
        if(num1>num2) return 1;
        if(num1<num2) return -1;
        if(temp1>temp2) return 1;
        if(temp1<temp2) return -1;   
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@6f37322304d3fdef184dadc9f949beda@"
"r04921012","0","0.4","106352","@bf9474790d7c645a1932bfdffe9c970d@//package handpq;


import handpq.Card;
import java.util.ArrayList;
import java.util.Arrays;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    //private Card[] cards; 
    private Card[] cards ;
    public String name;
    public String type;
    private ArrayList<count> C=new ArrayList<count>();
    private Card great;
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        Arrays.sort(cards);
        this.cards = cards;
        //System.out.println(name+""setting type..."");
        setType();
        great=cards[4];
    }

    // TODO
    public int compareTo(Hand that) {
                String[] typeOrder={"" highcard"", ""pair"", ""2pairs"", ""straight"", ""flush"", ""fullhouse""};
        int thisI=getIndex(typeOrder,this.type);
        int thatI=getIndex(typeOrder,that.type);

            if (thisI>thatI)return 1;
            else if (thisI==thatI){
                if (this.type.equals(""highcard"")||this.type.equals(""flush"")){
                    //if (this.type.equals(""straight"")&&this.cards[4].getFace().equals(""A"")&&this.cards[0].getFace().equals(""5""))
                    return this.cards[4].compareTo(that.cards[4]);
                }
                else if(this.type.equals(""straight"")||this.type.equals(""fullhouse"")||this.type.equals(""pair"")||this.type.equals(""2pairs"")){
                    return this.great.compareTo(that.great);
                }
                else return this.cards[4].compareTo(that.cards[4]);
            }
            
            else return -1;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
    
        public void setType(){
        
        C.add(new count(cards[0]));
        for (int i =1;i<5;i++){//System.out.println(""for looping..."");
            int j =0;
            do{//System.out.println(j);
                if (cards[i].getFace().equals(C.get(j).val.getFace())){
                    C.get(j).N++;
                    if (cards[i].compareTo(C.get(j).val)==1)
                        C.get(j).setVal(cards[i]);
                }
                else{ 
                    if (j==C.size()-1)
                        C.add(new count(cards[i]));}
                j++;
            }while(j<C.size());
        }
        //System.out.println(""C size=""+C.size());
        String[] faceOrder={"" 2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"",""A""};
        if (C.size()==2){
            type=""fullhouse"";
            if (C.get(0).N==3) 
                great=C.get(0).val;
            else
                great=C.get(1).val;
        }
        else if (C.size()==3){
            type=""2pairs"";
            for (int i=0;i<3;i++){
                if (C.get(i).N==2)
                    great=C.get(i).val;
            }
        }
        else if (C.size()==4){
            type=""pair"";
            for (int i=0;i<4;i++){
                if (C.get(i).N==2)
                    great=C.get(i).val;
            }
        }
        else{
            boolean b=true;
            for (int k=0;k<4;k++){
                if (!cards[k].getSuit().equals(cards[k+1].getSuit())){
                    b=false;
                    break;
                }    
            }

            if (b)type=""flush"";
            else if(getIndex(faceOrder,cards[4].getFace())==getIndex(faceOrder,cards[0].getFace())+4){
                type=""straight"";
                if (cards[0].getFace().equals(""5"")&&cards[4].getFace().equals(""A""))
                    great=cards[0];
                else
                    great=cards[4];
            }
            else type=""highcard"";
        }
        
    }
    public int getIndex(String[] ref,String s){
        int I=0;
            for (int i=0;i<ref.length;i++){
                if (ref[i].equals(s))
                    I=i;
            }
            return I;
    }

}
class count{
    public Card val;
    public int N;
    public count(Card val){
        this.val=val;
        this.N=1;
    }
    public void setVal(Card c){
        this.val=c;
    }
}
@bf9474790d7c645a1932bfdffe9c970d@"
"r04921012","0","0.4","106352","@76c9af23eaaf2268ea960099733b0e01@package handpq;

import java.util.ArrayList;
import java.util.Arrays;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    //private Card[] cards; 
    private Card[] cards ;
    public String name;
    public String type;
    private ArrayList<count> C=new ArrayList<count>();
    private Card great;
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        Arrays.sort(cards);
        this.cards = cards;
        //System.out.println(name+""setting type..."");
        setType();
        great=cards[4];
    }

    // TODO
    public int compareTo(Hand that) {
                String[] typeOrder={"" highcard"", ""pair"", ""2pairs"", ""straight"", ""flush"", ""fullhouse""};
        int thisI=getIndex(typeOrder,this.type);
        int thatI=getIndex(typeOrder,that.type);

            if (thisI>thatI)return 1;
            else if (thisI==thatI){
                if (this.type.equals(""highcard"")||this.type.equals(""flush"")){
                    //if (this.type.equals(""straight"")&&this.cards[4].getFace().equals(""A"")&&this.cards[0].getFace().equals(""5""))
                    return this.cards[4].compareTo(that.cards[4]);
                }
                else if(this.type.equals(""straight"")||this.type.equals(""fullhouse"")||this.type.equals(""pair"")||this.type.equals(""2pairs"")){
                    return this.great.compareTo(that.great);
                }
                else return this.cards[4].compareTo(that.cards[4]);
            }
            
            else return -1;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
    
        public void setType(){
        
        C.add(new count(cards[0]));
        for (int i =1;i<5;i++){//System.out.println(""for looping..."");
            int j =0;
            do{//System.out.println(j);
                if (cards[i].getFace().equals(C.get(j).val.getFace())){
                    C.get(j).N++;
                    if (cards[i].compareTo(C.get(j).val)==1)
                        C.get(j).setVal(cards[i]);
                }
                else{ 
                    if (j==C.size()-1)
                        C.add(new count(cards[i]));}
                j++;
            }while(j<C.size());
        }
        //System.out.println(""C size=""+C.size());
        String[] faceOrder={"" 2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"",""A""};
        if (C.size()==2){
            type=""fullhouse"";
            if (C.get(0).N==3) 
                great=C.get(0).val;
            else
                great=C.get(1).val;
        }
        else if (C.size()==3){
            type=""2pairs"";
            for (int i=0;i<3;i++){
                if (C.get(i).N==2)
                    great=C.get(i).val;
            }
        }
        else if (C.size()==4){
            type=""pair"";
            for (int i=0;i<4;i++){
                if (C.get(i).N==2)
                    great=C.get(i).val;
            }
        }
        else{
            boolean b=true;
            for (int k=0;k<4;k++){
                if (!cards[k].getSuit().equals(cards[k+1].getSuit())){
                    b=false;
                    break;
                }    
            }

            if (b)type=""flush"";
            else if(getIndex(faceOrder,cards[4].getFace())==getIndex(faceOrder,cards[0].getFace())+4){
                type=""straight"";
                if (cards[0].getFace().equals(""5"")&&cards[4].getFace().equals(""A""))
                    great=cards[0];
                else
                    great=cards[4];
            }
            else type=""highcard"";
        }
        
    }
    public int getIndex(String[] ref,String s){
        int I=0;
            for (int i=0;i<ref.length;i++){
                if (ref[i].equals(s))
                    I=i;
            }
            return I;
    }

}
class count{
    public Card val;
    public int N;
    public count(Card val){
        this.val=val;
        this.N=1;
    }
    public void setVal(Card c){
        this.val=c;
    }
}
@76c9af23eaaf2268ea960099733b0e01@"
"r04921012","3","0.0933333333333333","105200","@37f8c64400c735468020febb6280353e@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
    }

    
  
  public int[] handcards(Card[] cards){ //�� Value����
        int[] Value = new int[6];
        for (int x =0;x<6;x++){
            Value[x]=0;
        }
        
//        int sameCards=1;
//        int groupRank=0;
        int[] ranks = new int[14];
        for (int x=0; x<=13; x++){
            ranks[x]=0; //zero the contents of the array
       }
// 鈭支�平����蝡漱Player.java嚗ㄐ�銝�Card.java鋆⊿����unction(changeFace)
//        for (int x=0; x<5; x++){ 
//            if (cards[x].getFace().equals(""A""))
//                    ranks[1]++;
//            else
//            ranks[cards[x].changeFace(cards[x])]++;
//        }
          for (int x=0; x<5; x++){
              switch (cards[x].getFace()){  // '': char, """": String 閮���reak;�����銵�銵銵�
                  case(""A""):
                      ranks[1]++;
                      break;
                  case(""J""):
                      ranks[11]++;
                      break;
                  case(""Q""):
                      ranks[12]++;
                      break;
                  case(""K""):
                      ranks[13]++;
                      break;
                  default:
                      //System.out.println(cards[x].getFace());
                      ranks[Integer.parseInt(cards[x].getFace())]++;
              }
          }
        
        
//        for (int x=13; x>=1; x--){
//            if (ranks[x]>sameCards){
//                sameCards=ranks[x]; // ���憭�璅���摮�
//                groupRank=x;
//            }
//        }
        
          //flush
        boolean flush = true;  
        for (int i = 0;i<4;i++){
            if (!cards[i].getSuit().equals(cards[i+1].getSuit()))
                    flush = false;
        }
  
        
        // largeGroupRank, smallGroupRank
        int sameCards=1;
        int sameCards2=1;
        int largeGroupRank=0,smallGroupRank=0;
        for (int x=13; x>=1; x--){
            if (ranks[x]>sameCards)
            {
                if (sameCards!=1){ //if sameCards was not the default(��身) value
                    sameCards2 = sameCards; //霈�sameCards霈活閬��
                    smallGroupRank = largeGroupRank; //霈�laregeGroupRank霈活閬��
                }
                sameCards = ranks[x];
                largeGroupRank = x;
                
            }else if (ranks[x]>sameCards2){ //�2-pair
                sameCards2 = ranks[x];
                smallGroupRank = x;  //甇斗����argeGroupRank��mallGroupRank隤啣之隤啣��
            }
        }
        if (largeGroupRank==1) largeGroupRank=largeGroupRank+13; //霈霈�憭�
        if (smallGroupRank==1) smallGroupRank=smallGroupRank+13; //霈霈�憭�
        
        
        //Straight
        int topStraightValue=0;
        boolean straight=false;     
        for (int x=1; x<=9; x++){
            if (ranks[x]==1 && ranks[x+1]==1 && ranks[x+2]==1 && ranks[x+3]==1 && ranks[x+4]==1){
                straight = true;
                topStraightValue=x+4;
                break;
            }
        }
        if (ranks[10]==1 && ranks[11]==1 && ranks[12]==1 && ranks[13]==1 && ranks[1]==1){
            straight = true;
            topStraightValue=14;
        }

        
         int[] orderedRanks = new int[5];
         int index=0;
         if (ranks[1]==1){ //if ace, run this before because ace is highest card
         orderedRanks[index]=14;
         index++;
         }
         for (int x=13; x>=2; x--){ //敺之�撠
             if (ranks[x]==1){
                 orderedRanks[index]=x;
                 index++;
             }
         }
         
         if ( sameCards==1 ) {
             Value[0]=1;   // no pair
             Value[1]=orderedRanks[0]; //the first determining factor is the highest card,
             Value[2]=orderedRanks[1]; //then the next highest card,
             Value[3]=orderedRanks[2]; //and so on
             Value[4]=orderedRanks[3];
             Value[5]=orderedRanks[4];
         }
         if (sameCards==2 && sameCards2==1) {
             Value[0]=2;  // 1 pair
             Value[1]=largeGroupRank;   //rank of pair
             Value[2]=orderedRanks[0];  //next highest cards.
             Value[3]=orderedRanks[1];
             Value[4]=orderedRanks[2];
         }
         if (sameCards==2 && sameCards2==2) { //甇斗�argeGroup��� = smallGroup���
             Value[0]=3;//two pair
             Value[1]= largeGroupRank>smallGroupRank ? largeGroupRank : smallGroupRank; //rank of greater pair
             Value[2]= largeGroupRank<smallGroupRank ? largeGroupRank : smallGroupRank; //rank of smaller pair
             Value[3]=orderedRanks[0];  //extra card
         }
         if (straight) {
             Value[0]=4; // straight
             Value[1]=topStraightValue;  //if we have two straights, the one with the highest top cards wins

         }
         if (flush) {
             Value[0]=5; // flush
             Value[1]=orderedRanks[0]; //tie determined by ranks of cards
             Value[2]=orderedRanks[1];
             Value[3]=orderedRanks[2];
             Value[4]=orderedRanks[3];
             Value[5]=orderedRanks[4];
         }
         if (sameCards==3 && sameCards2==2)  {
             Value[0]=6;// full house
             Value[1]=largeGroupRank;
             Value[2]=smallGroupRank;
         }
         return Value;
    }
    
    // TODO
    public int compareTo(Hand that) {
        // complete this function so the Player can be sorted according to the cards he/she has.
        // P1,P2 ���this,that��alue��
           int[] P1 = this.handcards(this.cards);
           //System.out.println(P1[0]+"" ""+P1[1]);
           int[] P2 = that.handcards(that.cards);
           //System.out.println(P2[0]+"" ""+P2[1]);
          
           if (P1[0]>P2[0]) return 1;
           else if (P1[0]==P2[0])
               switch(P1[0]){
                   case 1:
                       return P1[1]>P2[1]? 1:-1;
                   case 2:
                       return P1[1]>P2[1]? 1:-1;
                   case 3:
                       return P1[1]>P2[1]? 1:-1;
                   case 4:
                       return P1[1]>P2[1]? 1:-1;
                   case 5:
                       return P1[1]>P2[1]? 1:-1;
                   case 6:
                       return P1[1]>P2[1]? 1:-1;
               }
           else 
               return -1;
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@37f8c64400c735468020febb6280353e@"
"r04921012","3","0.0933333333333333","105536","@8d455da25efa768e9da78b22dc4ab68c@import java.util.ArrayList;
import java.util.Arrays;


public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    //private Card[] cards; 
    private Card[] cards ;
    public String name;
    public String type;
    private ArrayList<count> C=new ArrayList<count>();
    private Card great;
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        Arrays.sort(cards);
        this.cards = cards;
        //System.out.println(name+""setting type..."");
        setType();
        great=cards[4];
    }

    // TODO
    public int compareTo(Hand that) {
                String[] typeOrder={"" highcard"", ""pair"", ""2pairs"", ""straight"", ""flush"", ""fullhouse""};
        int thisI=getIndex(typeOrder,this.type);
        int thatI=getIndex(typeOrder,that.type);

            if (thisI>thatI)return 1;
            else if (thisI==thatI){
                if (this.type.equals(""highcard"")||this.type.equals(""flush"")){
                    //if (this.type.equals(""straight"")&&this.cards[4].getFace().equals(""A"")&&this.cards[0].getFace().equals(""5""))
                    return this.cards[4].compareTo(that.cards[4]);
                }
                else if(this.type.equals(""straight"")||this.type.equals(""fullhouse"")||this.type.equals(""pair"")||this.type.equals(""2pairs"")){
                    return this.great.compareTo(that.great);
                }
                else return this.cards[4].compareTo(that.cards[4]);
            }
            
            else return -1;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
    
        public void setType(){
        
        C.add(new count(cards[0]));
        for (int i =1;i<5;i++){//System.out.println(""for looping..."");
            int j =0;
            do{//System.out.println(j);
                if (cards[i].getFace().equals(C.get(j).val.getFace())){
                    C.get(j).N++;
                    if (cards[i].compareTo(C.get(j).val)==1)
                        C.get(j).setVal(cards[i]);
                }
                else{ 
                    if (j==C.size()-1)
                        C.add(new count(cards[i]));}
                j++;
            }while(j<C.size());
        }
        //System.out.println(""C size=""+C.size());
        String[] faceOrder={"" 2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"",""A""};
        if (C.size()==2){
            type=""fullhouse"";
            if (C.get(0).N==3) 
                great=C.get(0).val;
            else
                great=C.get(1).val;
        }
        else if (C.size()==3){
            type=""2pairs"";
            for (int i=0;i<3;i++){
                if (C.get(i).N==2)
                    great=C.get(i).val;
            }
        }
        else if (C.size()==4){
            type=""pair"";
            for (int i=0;i<4;i++){
                if (C.get(i).N==2)
                    great=C.get(i).val;
            }
        }
        else{
            boolean b=true;
            for (int k=0;k<4;k++){
                if (!cards[k].getSuit().equals(cards[k+1].getSuit())){
                    b=false;
                    break;
                }    
            }

            if (b)type=""flush"";
            else if(getIndex(faceOrder,cards[4].getFace())==getIndex(faceOrder,cards[0].getFace())+4){
                type=""straight"";
                if (cards[0].getFace().equals(""5"")&&cards[4].getFace().equals(""A""))
                    great=cards[0];
                else
                    great=cards[4];
            }
            else type=""highcard"";
        }
        
    }
    public int getIndex(String[] ref,String s){
        int I=0;
            for (int i=0;i<ref.length;i++){
                if (ref[i].equals(s))
                    I=i;
            }
            return I;
    }

}
class count{
    public Card val;
    public int N;
    public count(Card val){
        this.val=val;
        this.N=1;
    }
    public void setVal(Card c){
        this.val=c;
    }
}
@8d455da25efa768e9da78b22dc4ab68c@"
"b02611002","0","0.29","105520","@5506e470321bcdff12e6020e81180177@import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards = new Card[5];

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards=cards;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

    // TODO
    public int compareTo(Hand that) {
        // complete this function so the Hand can be sorted according to its cards.


        int[] scores={0,0}; //hand[1] for this, hand[2] for that.

        boolean[] isFullHouse={false,false};
        int FHCounter=0;
        String[] FHThreeFace={""-1"",""-1""};//10 //9
        String[] FHTwoFace={""-1"",""-1""};//4 //A
        String[] tempFHTwoFace={""-1"",""-1""};

        boolean[] isFlush={false,false};
        int suitCombo[]={0,0};

        boolean[] isStraight={false,false};
        int faceCombo[]={0,0};

        boolean[] isTwoPair={false,false};

        boolean[] isOnePair={false,false};
        boolean isFirstCard=true;



        Card[] NThis = this.cards;  //cards in ""numerical"" expression (A->14, J->11, Q->12, K->13)
        Card[] NThat = that.cards;
        for(int i=0;i<NThis.length;i++){

            switch (NThis[i].getFace()){
                case ""A"": NThis[i]=new Card(""14"",NThis[i].getSuit());break;
                case ""J"": NThis[i]=new Card(""11"",NThis[i].getSuit());break;
                case ""Q"": NThis[i]=new Card(""12"",NThis[i].getSuit());break;
                case ""K"": NThis[i]=new Card(""13"",NThis[i].getSuit());break;
            }

            switch (NThat[i].getFace()){
                case ""A"": NThat[i]=new Card(""14"",NThat[i].getSuit());break;
                case ""J"": NThat[i]=new Card(""11"",NThat[i].getSuit());break;
                case ""Q"": NThat[i]=new Card(""12"",NThat[i].getSuit());break;
                case ""K"": NThat[i]=new Card(""13"",NThat[i].getSuit());break;
            }
        }


        Arrays.sort(NThis);
//        //TODO remove
//        System.out.println(""\n*Print NThis:"");
//        for(Card c:NThis){
//            System.out.println(c.getFace()+c.getSuit());
//        }
        Arrays.sort(NThat);
        //TODO remove
//        System.out.println(""*Print NThat:"");
//        for(Card c:NThat){
//            System.out.println(c.getFace()+c.getSuit());
//        }


        int hID=0;
        Card[] currentHand = NThis;
        for(int i =0;i<2;i++){  // loop: NThis, NThat
            if(hID==1) currentHand=NThat;

            Card previous = new Card(""2"",""Clubs"");
            FHCounter=0;
            suitCombo[hID]=0;
            faceCombo[hID]=0;
            FHThreeFace[hID]=""-1"";
            FHTwoFace[hID]=""-1"";
            tempFHTwoFace[hID]=""-1"";

            for(Card c:currentHand){// loop: card1, card2, card3, card4 ...

                //handle first card case
                if(isFirstCard){
                    FHCounter=1;
                    suitCombo[hID]=1;
                    faceCombo[hID]=1;
                    isFirstCard=false;
                    previous=c;
                    continue;
                }

                // FullHouse counter
                if (previous.getFace() == c.getFace()) FHCounter++;
                else FHCounter = 1;
                if (FHCounter == 3) {
                    FHThreeFace[hID] = c.getFace();
                    FHTwoFace[hID] = tempFHTwoFace[hID];
                } else if (FHCounter == 2) {
                    tempFHTwoFace[hID] = FHTwoFace[hID];
                    FHTwoFace[hID] = c.getFace();
                }

                // Flush counter
                if(previous.getSuit().equals(c.getSuit())){
                    suitCombo[hID]++;
                }

                // Straight counter
                if(Integer.parseInt(c.getFace())-Integer.parseInt(previous.getFace())==1){
                    faceCombo[hID]++;
                }

                previous=c;
            }// loop: card1, card2, card3, card4 ...


            scores[hID]=Integer.parseInt(currentHand[4].getFace());

            if(!FHTwoFace[hID].equals(""-1"")){
                isOnePair[hID]=true;
                scores[hID]=20;
            }
            if(!tempFHTwoFace[hID].equals(""-1"") && !FHTwoFace[hID].equals(""-1"")){
                isTwoPair[hID]=true;
                scores[hID]=30;
            }
            if(faceCombo[hID]==5){
                isStraight[hID]=true;
                scores[hID]=40;
            }
            if(suitCombo[hID]==5){
                isFlush[hID]=true;
                scores[hID]=50;
            }
            if (!FHThreeFace[hID].equals(""-1"") && !FHTwoFace[hID].equals(""-1"")) {
                isFullHouse[hID]=true;
                scores[hID]=60;
            }
            hID++;
            isFirstCard=true;

        }// loop: NThis, NThat







        if(isFullHouse[0]&&isFullHouse[1]){
            if(Integer.parseInt(FHThreeFace[0])>Integer.parseInt(FHThreeFace[1])){
                scores[0]+=6;
            }else if(Integer.parseInt(FHThreeFace[0])<Integer.parseInt(FHThreeFace[1])){
                scores[1]+=6;
            }
        }else if(isFlush[0]&&isFlush[1]){
            if(Integer.parseInt(NThis[4].getFace())>Integer.parseInt(NThat[4].getFace())){
                scores[0]+=5;
            }else if(Integer.parseInt(NThis[4].getFace())<Integer.parseInt(NThat[4].getFace())){
                scores[1]+=5;
            }
        }else if(isStraight[0]&&isStraight[1]){
            if(Integer.parseInt(NThis[4].getFace())==14)scores[0]-=3;
            if(Integer.parseInt(NThat[4].getFace())==14)scores[0]-=3;
            if(Integer.parseInt(NThis[0].getFace())>Integer.parseInt(NThat[0].getFace())){
                scores[0]+=3;
            }else if(Integer.parseInt(NThis[0].getFace())<Integer.parseInt(NThat[0].getFace())) {
                scores[1]+=3;
            }
        }else if(isTwoPair[0] && isTwoPair[1]){
            if(Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[0]+=3;
            }else if (Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[1]+=3;
            }
        }else if(isOnePair[0] && isOnePair[1]){
            if(Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[0]+=2;
            }else if (Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[1]+=2;
            }
        }else if(NThis[4].getFace().equals(NThat[4].getFace())){
            for(int i=4;i>=0;i--) {
                if (NThis[i].compareTo(NThat[i]) > 0) {
                    scores[0]++;
                    break;
                } else if (NThis[i].compareTo(NThat[i]) < 0) {
                    scores[1]++;
                    break;
                }
            }
        }


//        System.out.printf(""\n*** compareTo return: %d (%d-%d)\n\n"",(scores[0]-scores[1]),scores[0],scores[1]);
        return scores[0]-scores[1];
    }
}

@5506e470321bcdff12e6020e81180177@"
"d04631001","3","0.1","105184","@b5a089e23e8c77cbf9151b1fc6b03e47@import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards = cards;
    }

    // TODO
    public int compareTo(Hand that) {
        Arrays.sort(this.cards);
        Arrays.sort(that.cards);
        int this_order = 0;
        int that_order = 0;
        
        int[] this_face = new int[5];
        int[] that_face = new int[5];
        int[] this_suit = new int[5];
        int[] that_suit = new int[5];
        for (int i = 0; i < 5; i++) {
            if (!this.cards[i].getFace().equals(""J"") && !this.cards[i].getFace().equals(""Q"") && !this.cards[i].getFace().equals(""K"") && !this.cards[i].getFace().equals(""A"")) {
                this_face[i] = Integer.parseInt(this.cards[i].getFace());
            } else {
                if (this.cards[i].getFace().equals(""J"")) {
                    this_face[i] = 11;
                }
                if (this.cards[i].getFace().equals(""Q"")) {
                    this_face[i] = 12;
                }
                if (this.cards[i].getFace().equals(""K"")) {
                    this_face[i] = 13;
                }
                if (this.cards[i].getFace().equals(""A"")) {
                    this_face[i] = 14;
                }
            }
            if (!that.cards[i].getFace().equals(""J"") && !that.cards[i].getFace().equals(""Q"") && !that.cards[i].getFace().equals(""K"") && !that.cards[i].getFace().equals(""A"")) {
                that_face[i] = Integer.parseInt(that.cards[i].getFace());
            } else {
                if (that.cards[i].getFace().equals(""J"")) {
                    that_face[i] = 11;
                }
                if (that.cards[i].getFace().equals(""Q"")) {
                    that_face[i] = 12;
                }
                if (that.cards[i].getFace().equals(""K"")) {
                    that_face[i] = 13;
                }
                if (that.cards[i].getFace().equals(""A"")) {
                    that_face[i] = 14;
                }
            }
            if (this.cards[i].getSuit().equals(""Spades"")) {
                this_suit[i] = 4;
            }
            if (this.cards[i].getSuit().equals(""Hearts"")) {
                this_suit[i] = 3;
            }
            if (this.cards[i].getSuit().equals(""Diamonds"")) {
                this_suit[i] = 2;
            }
            if (this.cards[i].getSuit().equals(""Clubs"")) {
                this_suit[i] = 1;
            }
            if (that.cards[i].getSuit().equals(""Spades"")) {
                that_suit[i] = 4;
            }
            if (that.cards[i].getSuit().equals(""Hearts"")) {
                that_suit[i] = 3;
            }
            if (that.cards[i].getSuit().equals(""Diamonds"")) {
                that_suit[i] = 2;
            }
            if (that.cards[i].getSuit().equals(""Clubs"")) {
                that_suit[i] = 1;
            }
        }
        //this.cards, if order = Full house; this_order = 5;
        int this_full_3m = 0;
        int that_full_3m = 0;
        int this_full_3m_suit = 0;
        int that_full_3m_suit = 0;
        int this_full_2m = 0;
        int that_full_2m = 0;
        int this_full_2m_suit = 0;
        int that_full_2m_suit = 0;
        if (this_face[0] == this_face[1] && this_face[1] == this_face[2] && this_face[3] == this_face[4]) {
            this_order = 5;   //3 match: 2 match
            this_full_3m = this_face[2];
            this_full_3m_suit = this_suit[2];
            this_full_2m = this_face[4];
            this_full_2m_suit = this_suit[4];
        }
        if (this_face[0] == this_face[1] && this_face[2] == this_face[3] && this_face[3] == this_face[4]) {
            this_order = 5;   //2 match: 3 match
            this_full_3m = this_face[4];
            this_full_3m_suit = this_suit[4];
            this_full_2m = this_face[1];
            this_full_2m_suit = this_suit[1];
        }
        //that.cards, if order = Full house; that_order = 5;
        if (that_face[0] == that_face[1] && that_face[1] == that_face[2] && that_face[3] == that_face[4]) {
            that_order = 5;   //3 match: 2 match
            that_full_3m = that_face[2];
            that_full_3m_suit = that_suit[2];
            that_full_2m = that_face[4];
            that_full_2m_suit = that_suit[4];
        }
        if (that_face[0] == that_face[1] && that_face[2] == that_face[3] && that_face[3] == that_face[4]) {
            that_order = 5;   //2 match: 3 match
            that_full_3m = that_face[4];
            that_full_3m_suit = that_suit[4];
            that_full_2m = that_face[1];
            that_full_2m_suit = that_suit[1];
        }   // Full house finished
        //this.cards, if order = Flush; this_order = 4;
        if (this.cards[0].getSuit() == this.cards[1].getSuit() && this.cards[1].getSuit() == this.cards[2].getSuit() && this.cards[2].getSuit() == this.cards[3].getSuit() && this.cards[3].getSuit() == this.cards[4].getSuit()) {
            this_order = 4;
        }
        //that.cards, if order = Flush; that_order = 4;
        if (that.cards[0].getSuit() == that.cards[1].getSuit() && that.cards[1].getSuit() == that.cards[2].getSuit() && that.cards[2].getSuit() == that.cards[3].getSuit() && that.cards[3].getSuit() == that.cards[4].getSuit()) {
            that_order = 4;
        }   // Flush finished;
        
        int this_straight = 0;
        int that_straight = 0;
        
        //this.cards, if order = Straight; this_order = 3;
        if (this_face[1] - this_face[0] == 1 && this_face[2] - this_face[1] == 1 && this_face[3] - this_face[2] == 1 && this_face[4] - this_face[3] == 1) {
            this_order = 3;
        }
        if (this.cards[0].getFace().equals(""2"") && this.cards[1].getFace().equals(""3"") && this.cards[2].getFace().equals(""4"")&& this.cards[3].getFace().equals(""5"")&& this.cards[4].getFace().equals(""A"")) {
            this_order = 3;
        }
        //that.cards, if order = Straight; that_order = 3
        if (that_face[1] - that_face[0] == 1 && that_face[2] - that_face[1] == 1 && that_face[3] - that_face[2] == 1 && that_face[4] - that_face[3] == 1) {
            that_order = 3;
        }
        if (that.cards[0].getFace().equals(""2"") && that.cards[1].getFace().equals(""3"") && that.cards[2].getFace().equals(""4"")&& that.cards[3].getFace().equals(""5"")&& that.cards[4].getFace().equals(""A"")) {
            this_order = 3;
        }
        if (this_order == 3){
            if (this.cards[4].getFace().equals(""5"")){
                this_straight = 5;
            } else {
                this_straight = this_face[4];
            }
            if (that.cards[4].getFace().equals(""5"")){
                that_straight = 5;
            } else {
                that_straight = that_face[4];
            }
        }   // Straight finished;
        //this.cards, if order = Two pair; this_order = 2;
        int this_two_2m_hi = 0;
        int this_two_2m_hi_suit = 0;
        int this_two_2m_lo = 0;
        int this_two_2m_lo_suit = 0;
        int this_two_1s = 0;
        int this_two_1s_suit = 0;
        int that_two_2m_hi = 0;
        int that_two_2m_hi_suit = 0;
        int that_two_2m_lo = 0;
        int that_two_2m_lo_suit = 0;
        int that_two_1s = 0;
        int that_two_1s_suit = 0;
        if (this.cards[0].getFace() == this.cards[1].getFace() && this.cards[2].getFace() == this.cards[3].getFace() && this.cards[4].getFace() != this.cards[0].getFace() && this.cards[4].getFace() != this.cards[2].getFace()) {
            this_order = 2;   //2 match: 2 match: 1 single;
            this_two_2m_hi = this_face[3];
            this_two_2m_hi_suit = this_suit[3];
            this_two_2m_lo = this_face[1];
            this_two_2m_lo_suit = this_suit[1];
            this_two_1s = this_face[4];
            this_two_1s_suit = this_suit[4];
        }
        if (this.cards[1].getFace() == this.cards[2].getFace() && this.cards[3].getFace() == this.cards[4].getFace() && this.cards[0].getFace() != this.cards[1].getFace() && this.cards[0].getFace() != this.cards[3].getFace()) {
            this_order = 2;   //1 single: 2 match: 2 match;
            this_two_2m_hi = this_face[4];
            this_two_2m_hi_suit = this_suit[4];
            this_two_2m_lo = this_face[2];
            this_two_2m_lo_suit = this_suit[2];
            this_two_1s = this_face[0];
            this_two_1s_suit = this_suit[0];
        }
        if (this.cards[0].getFace() == this.cards[1].getFace() && this.cards[3].getFace() == this.cards[4].getFace() && this.cards[2].getFace() != this.cards[0].getFace() && this.cards[2].getFace() != this.cards[3].getFace()) {
            this_order = 2;   //2 match: 1 single: 2 match;
            this_two_2m_hi = this_face[4];
            this_two_2m_hi_suit = this_suit[4];
            this_two_2m_lo = this_face[1];
            this_two_2m_lo_suit = this_suit[1];
            this_two_1s = this_face[2];
            this_two_1s_suit = this_suit[2];
        }
        //that hands order = Two pair 2
        if (that.cards[0].getFace() == that.cards[1].getFace() && that.cards[2].getFace() == that.cards[3].getFace() && that.cards[4].getFace() != that.cards[0].getFace() && that.cards[4].getFace() != that.cards[2].getFace()) {
            that_order = 2;   //2 match: 2 match: 1 single;
            that_two_2m_hi = that_face[3];
            that_two_2m_hi_suit = that_suit[3];
            that_two_2m_lo = that_face[1];
            that_two_2m_lo_suit = that_suit[1];
            that_two_1s = that_face[4];
            that_two_1s_suit = that_suit[4];
        }
        if (that.cards[1].getFace() == that.cards[2].getFace() && that.cards[3].getFace() == that.cards[4].getFace() && that.cards[0].getFace() != that.cards[1].getFace() && that.cards[0].getFace() != that.cards[3].getFace()) {
            that_order = 2;   //1 single: 2 match: 2 match;
            that_two_2m_hi = that_face[4];
            that_two_2m_hi_suit = that_suit[4];
            that_two_2m_lo = that_face[2];
            that_two_2m_lo_suit = that_suit[2];
            that_two_1s = that_face[0];
            that_two_1s_suit = that_suit[0];
        }
        if (that.cards[0].getFace() == that.cards[1].getFace() && that.cards[3].getFace() == that.cards[4].getFace() && that.cards[2].getFace() != that.cards[0].getFace() && that.cards[2].getFace() != that.cards[3].getFace()) {
            that_order = 2;   //2 match: 1 single: 2 match;
            that_two_2m_hi = that_face[4];
            that_two_2m_hi_suit = that_suit[4];
            that_two_2m_lo = that_face[1];
            that_two_2m_lo_suit = that_suit[1];
            that_two_1s = that_face[2];
            that_two_1s_suit = that_suit[2];
        }   // Two pair finished;
        //this.cards, if order = One pair; this_order = 1;
        int this_one_m = 0;
        int this_one_m_suit = 0;
        int this_one_s_hi = 0;
        int this_one_s_hi_suit = 0;
        int this_one_s_mi = 0;
        int this_one_s_mi_suit = 0;
        int this_one_s_lo = 0;
        int this_one_s_lo_suit = 0;
        int that_one_m = 0;
        int that_one_m_suit = 0;
        int that_one_s_hi = 0;
        int that_one_s_hi_suit = 0;
        int that_one_s_mi = 0;
        int that_one_s_mi_suit = 0;
        int that_one_s_lo = 0;
        int that_one_s_lo_suit = 0;
        if (this.cards[0].getFace() == this.cards[1].getFace() && this.cards[2].getFace() != this.cards[0].getFace() && this.cards[3].getFace() != this.cards[0].getFace() && this.cards[4].getFace() != this.cards[0].getFace()) {
            this_order = 1;
            this_one_m = this_face[1];
            this_one_m_suit = this_suit[1];
            this_one_s_hi = this_face[4];
            this_one_s_hi_suit = this_suit[4];
            this_one_s_mi = this_face[3];
            this_one_s_mi_suit = this_suit[3];
            this_one_s_lo = this_face[2];
            this_one_s_lo_suit = this_suit[2];
        }
        if (this.cards[1].getFace() == this.cards[2].getFace() && this.cards[0].getFace() != this.cards[1].getFace() && this.cards[3].getFace() != this.cards[1].getFace() && this.cards[4].getFace() != this.cards[1].getFace()) {
            this_order = 1;
            this_one_m = this_face[2];
            this_one_m_suit = this_suit[2];
            this_one_s_hi = this_face[4];
            this_one_s_hi_suit = this_suit[4];
            this_one_s_mi = this_face[3];
            this_one_s_mi_suit = this_suit[3];
            this_one_s_lo = this_face[0];
            this_one_s_lo_suit = this_suit[0];
        }
        if (this.cards[2].getFace() == this.cards[3].getFace() && this.cards[0].getFace() != this.cards[2].getFace() && this.cards[1].getFace() != this.cards[2].getFace() && this.cards[4].getFace() != this.cards[2].getFace()) {
            this_order = 1;
            this_one_m = this_face[3];
            this_one_m_suit = this_suit[3];
            this_one_s_hi = this_face[4];
            this_one_s_hi_suit = this_suit[4];
            this_one_s_mi = this_face[1];
            this_one_s_mi_suit = this_suit[1];
            this_one_s_lo = this_face[0];
            this_one_s_lo_suit = this_suit[0];
        }
        if (this.cards[3].getFace() == this.cards[4].getFace() && this.cards[0].getFace() != this.cards[3].getFace() && this.cards[1].getFace() != this.cards[3].getFace() && this.cards[2].getFace() != this.cards[3].getFace()) {
            this_order = 1;
            this_one_m = this_face[4];
            this_one_m_suit = this_suit[4];
            this_one_s_hi = this_face[2];
            this_one_s_hi_suit = this_suit[2];
            this_one_s_mi = this_face[1];
            this_one_s_mi_suit = this_suit[1];
            this_one_s_lo = this_face[0];
            this_one_s_lo_suit = this_suit[0];
        }
        //that.cards, if order = One pair; that_order = 1;
        if (that.cards[0].getFace() == that.cards[1].getFace() && that.cards[2].getFace() != that.cards[0].getFace() && that.cards[3].getFace() != that.cards[0].getFace() && that.cards[4].getFace() != that.cards[0].getFace()) {
            that_order = 1;
            that_order = 1;
            that_one_m = that_face[1];
            that_one_m_suit = that_suit[1];
            that_one_s_hi = that_face[4];
            that_one_s_hi_suit = that_suit[4];
            that_one_s_mi = that_face[3];
            that_one_s_mi_suit = that_suit[3];
            that_one_s_lo = that_face[2];
            that_one_s_lo_suit = that_suit[2];
        }
        if (that.cards[1].getFace() == that.cards[2].getFace() && that.cards[0].getFace() != that.cards[1].getFace() && that.cards[3].getFace() != that.cards[1].getFace() && that.cards[4].getFace() != that.cards[1].getFace()) {
            that_order = 1;
            that_one_m = that_face[2];
            that_one_m_suit = that_suit[2];
            that_one_s_hi = that_face[4];
            that_one_s_hi_suit = that_suit[4];
            that_one_s_mi = that_face[3];
            that_one_s_mi_suit = that_suit[3];
            that_one_s_lo = that_face[0];
            that_one_s_lo_suit = that_suit[0];
        }
        if (that.cards[2].getFace() == that.cards[3].getFace() && that.cards[0].getFace() != that.cards[2].getFace() && that.cards[1].getFace() != that.cards[2].getFace() && that.cards[4].getFace() != that.cards[2].getFace()) {
            that_order = 1;
            that_one_m = that_face[3];
            that_one_m_suit = that_suit[3];
            that_one_s_hi = that_face[4];
            that_one_s_hi_suit = that_suit[4];
            that_one_s_mi = that_face[1];
            that_one_s_mi_suit = that_suit[1];
            that_one_s_lo = that_face[0];
            that_one_s_lo_suit = that_suit[0];
        }
        if (that.cards[3].getFace() == that.cards[4].getFace() && that.cards[0].getFace() != that.cards[3].getFace() && that.cards[1].getFace() != that.cards[3].getFace() && that.cards[2].getFace() != that.cards[3].getFace()) {
            that_order = 1;
            that_one_m = that_face[4];
            that_one_m_suit = that_suit[4];
            that_one_s_hi = that_face[2];
            that_one_s_hi_suit = that_suit[2];
            that_one_s_mi = that_face[1];
            that_one_s_mi_suit = that_suit[1];
            that_one_s_lo = that_face[0];
            that_one_s_lo_suit = that_suit[0];
        }   // One pair finished;
        if (this_order < that_order) return -1;
        if (this_order > that_order) return 1;
        if (this_order == that_order){
            if (this_order == 5){
                if (this_full_3m < that_full_3m) return -1;
                if (this_full_3m > that_full_3m) return 1;    
                if (this_full_3m == that_full_3m) {
                    if (this_full_3m_suit < that_full_3m_suit) return -1;
                    if (this_full_3m_suit > that_full_3m_suit) return 1;
                    if (this_full_3m_suit == that_full_3m_suit) {
                        if (this_full_2m < that_full_2m) return -1;
                        if (this_full_2m > that_full_2m) return 1;
                        if (this_full_2m == that_full_2m) {
                            if (this_full_2m_suit < that_full_2m_suit) return -1;
                            if (this_full_2m_suit > that_full_2m_suit) return 1;
                        }
                    }
                }
            }
            if (this_order == 4){
                if (this_face[4] < that_face[4]) return -1;
                if (this_face[4] > that_face[4]) return 1;
                if (this_face[4] == that_face[4]) {
                    if (this_face[3] < that_face[3]) return -1;
                    if (this_face[3] > that_face[3]) return 1;
                    if (this_face[3] == that_face[3]) {
                        if (this_face[2] < that_face[2]) return -1;
                        if (this_face[2] > that_face[2]) return 1;
                        if (this_face[2] == that_face[2]) {
                            if (this_face[1] < that_face[1]) return -1;
                            if (this_face[1] > that_face[1]) return 1;
                            if (this_face[1] == that_face[1]) {
                                if (this_face[0] < that_face[0]) return -1;
                                if (this_face[0] > that_face[0]) return 1;
                            }
                        }
                    }
                }
            }
            if (this_order == 3){
                if (this_suit[4] < that_suit[4]) return -1;
                if (this_suit[4] > that_suit[4]) return 1;
                if (this_suit[4] == that_suit[4]) {
                    if (this_suit[3] < that_suit[3]) return -1;
                    if (this_suit[3] > that_suit[3]) return 1;
                    if (this_suit[3] == that_suit[3]) {
                        if (this_suit[2] < that_suit[2]) return -1;
                        if (this_suit[2] > that_suit[2]) return 1;
                        if (this_suit[2] == that_suit[2]) {
                            if (this_suit[1] < that_suit[1]) return -1;
                            if (this_suit[1] > that_suit[1]) return 1;
                            if (this_suit[1] == that_suit[1]) {
                                if (this_suit[0] < that_suit[0]) return -1;
                                if (this_suit[0] > that_suit[0]) return 1;
                            }
                        }
                    }
                }
            }
            if (this_order == 2){
                if (this_two_2m_hi < that_two_2m_hi) return -1;
                if (this_two_2m_hi > that_two_2m_hi) return 1;
                if (this_two_2m_hi == that_two_2m_hi) {
                    if (this_two_2m_hi_suit < that_two_2m_hi_suit) return -1;
                    if (this_two_2m_hi_suit > that_two_2m_hi_suit) return 1;
                    if (this_two_2m_hi_suit == that_two_2m_hi_suit) {
                        if (this_two_2m_lo < that_two_2m_lo) return -1;
                        if (this_two_2m_lo > that_two_2m_lo) return 1;
                        if (this_two_2m_lo == that_two_2m_lo) {
                            if (this_two_2m_lo_suit < that_two_2m_lo_suit) return -1;
                            if (this_two_2m_lo_suit > that_two_2m_lo_suit) return 1;
                            if (this_two_2m_lo_suit == that_two_2m_lo_suit) {
                                if (this_two_1s < that_two_1s) return -1;
                                if (this_two_1s > that_two_1s) return 1;
                                if (this_two_1s == that_two_1s) {
                                    if (this_two_1s_suit < that_two_1s_suit) return -1;
                                    if (this_two_1s_suit > that_two_1s_suit) return 1;
                                }
                            }
                        }
                    }
                }
            }
            if (this_order == 1){
                if (this_one_m < that_one_m) return -1;
                if (this_one_m > that_one_m) return 1;
                if (this_one_m == that_one_m) {
                    if (this_one_m_suit < that_one_m_suit) return -1;
                    if (this_one_m_suit > that_one_m_suit) return 1;
                    if (this_one_m_suit == that_one_m_suit) {
                        if (this_one_s_hi < that_one_s_hi) return -1;
                        if (this_one_s_hi > that_one_s_hi) return 1;
                        if (this_one_s_hi == that_one_s_hi) {
                            if (this_one_s_hi_suit < that_one_s_hi_suit) return -1;
                            if (this_one_s_hi_suit > that_one_s_hi_suit) return 1;
                            if (this_one_s_hi_suit == that_one_s_hi_suit) {
                                if (this_one_s_mi < that_one_s_mi) return -1;
                                if (this_one_s_mi > that_one_s_mi) return 1;
                                if (this_one_s_mi == that_one_s_mi) {
                                    if (this_one_s_mi_suit < that_one_s_mi_suit) return -1;
                                    if (this_one_s_mi_suit > that_one_s_mi_suit) return 1;
                                    if (this_one_s_mi_suit == that_one_s_mi_suit) {
                                        if (this_one_s_lo < that_one_s_lo) return -1;
                                        if (this_one_s_lo > that_one_s_lo) return 1;
                                        if (this_one_s_lo == that_one_s_lo) {
                                            if (this_one_s_lo_suit < that_one_s_lo_suit) return -1;
                                            if (this_one_s_lo_suit > that_one_s_lo_suit) return 1;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (this_order == 0){
                if (this_face[4] < that_face[4]) return -1;
                if (this_face[4] > that_face[4]) return 1;
                if (this_face[4] == that_face[4]) {
                    if (this_suit[4] < that_suit[4]) return -1;
                    if (this_suit[4] > that_suit[4]) return 1;
                    if (this_suit[4] == that_suit[4]) {
                        if (this_face[3] < that_face[3]) return -1;
                        if (this_face[3] > that_face[3]) return 1;
                        if (this_face[3] == that_face[3]) {
                            if (this_suit[3] < that_suit[3]) return -1;
                            if (this_suit[3] > that_suit[3]) return 1;
                            if (this_suit[3] == that_suit[3]) {
                                if (this_face[2] < that_face[2]) return -1;
                                if (this_face[2] > that_face[2]) return 1;
                                if (this_face[2] == that_face[2]) {
                                    if (this_suit[2] < that_suit[2]) return -1;
                                    if (this_suit[2] > that_suit[2]) return 1;
                                    if (this_suit[2] == that_suit[2]) {
                                        if (this_face[1] < that_face[1]) return -1;
                                        if (this_face[1] > that_face[1]) return 1;
                                        if (this_face[1] == that_face[1]) {
                                            if (this_suit[1] < that_suit[1]) return -1;
                                            if (this_suit[1] > that_suit[1]) return 1;
                                            if (this_suit[1] == that_suit[1]) {
                                                if (this_face[0] < that_face[0]) return -1;
                                                if (this_face[0] > that_face[0]) return 1;
                                                if (this_face[0] == that_face[0]) {
                                                    if (this_suit[0] < that_suit[0]) return -1;
                                                    if (this_suit[0] > that_suit[0]) return 1;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@b5a089e23e8c77cbf9151b1fc6b03e47@"
"b02611002","0","0.28","105520","@e3b65c1f54bb7c8bbc5cd71cc707236a@import java.util.Arrays;

public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards = new Card[5];

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards=cards;
        Arrays.sort(cards);
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }

    // TODO
    public int compareTo(Hand that) {
        // complete this function so the Hand can be sorted according to its cards.


        int[] scores={0,0}; //hand[1] for this, hand[2] for that.

        boolean[] isFullHouse={false,false};
        int FHCounter=0;
        String[] FHThreeFace={""-1"",""-1""};//10 //9
        String[] FHTwoFace={""-1"",""-1""};//4 //A
        String[] tempFHTwoFace={""-1"",""-1""};

        boolean[] isFlush={false,false};
        int suitCombo[]={0,0};

        boolean[] isStraight={false,false};
        int faceCombo[]={0,0};

        boolean[] isTwoPair={false,false};

        boolean[] isOnePair={false,false};
        boolean isFirstCard=true;



        Card[] NThis = this.cards;  //cards in ""numerical"" expression (A->14, J->11, Q->12, K->13)
        Card[] NThat = that.cards;
        for(int i=0;i<NThis.length;i++){

            switch (NThis[i].getFace()){
                case ""A"": NThis[i]=new Card(""14"",NThis[i].getSuit());break;
                case ""J"": NThis[i]=new Card(""11"",NThis[i].getSuit());break;
                case ""Q"": NThis[i]=new Card(""12"",NThis[i].getSuit());break;
                case ""K"": NThis[i]=new Card(""13"",NThis[i].getSuit());break;
            }

            switch (NThat[i].getFace()){
                case ""A"": NThat[i]=new Card(""14"",NThat[i].getSuit());break;
                case ""J"": NThat[i]=new Card(""11"",NThat[i].getSuit());break;
                case ""Q"": NThat[i]=new Card(""12"",NThat[i].getSuit());break;
                case ""K"": NThat[i]=new Card(""13"",NThat[i].getSuit());break;
            }
        }


        Arrays.sort(NThis);
//        //TODO remove
//        System.out.println(""\n*Print NThis:"");
//        for(Card c:NThis){
//            System.out.println(c.getFace()+c.getSuit());
//        }
        Arrays.sort(NThat);
        //TODO remove
//        System.out.println(""*Print NThat:"");
//        for(Card c:NThat){
//            System.out.println(c.getFace()+c.getSuit());
//        }


        int hID=0;
        Card[] currentHand = NThis;
        for(int i =0;i<2;i++){  // loop: NThis, NThat
            if(hID==1) currentHand=NThat;

            Card previous = new Card(""2"",""Clubs"");
            FHCounter=0;
            suitCombo[hID]=0;
            faceCombo[hID]=0;
            FHThreeFace[hID]=""-1"";
            FHTwoFace[hID]=""-1"";
            tempFHTwoFace[hID]=""-1"";

            for(Card c:currentHand){// loop: card1, card2, card3, card4 ...

                //handle first card case
                if(isFirstCard){
                    FHCounter=1;
                    suitCombo[hID]=1;
                    faceCombo[hID]=1;
                    isFirstCard=false;
                    previous=c;
                    continue;
                }

                // FullHouse counter
                if (previous.getFace() == c.getFace()) FHCounter++;
                else FHCounter = 1;
                if (FHCounter == 3) {
                    FHThreeFace[hID] = c.getFace();
                    FHTwoFace[hID] = tempFHTwoFace[hID];
                } else if (FHCounter == 2) {
                    tempFHTwoFace[hID] = FHTwoFace[hID];
                    FHTwoFace[hID] = c.getFace();
                }

                // Flush counter
                if(previous.getSuit().equals(c.getSuit())){
                    suitCombo[hID]++;
                }

                // Straight counter
                if(Integer.parseInt(c.getFace())-Integer.parseInt(previous.getFace())==1){
                    faceCombo[hID]++;
                }

                previous=c;
            }// loop: card1, card2, card3, card4 ...


            scores[hID]=Integer.parseInt(currentHand[4].getFace());

            if(!FHTwoFace[hID].equals(""-1"")){
                isOnePair[hID]=true;
                scores[hID]=20;
            }
            if(!tempFHTwoFace[hID].equals(""-1"") && !FHTwoFace[hID].equals(""-1"")){
                isTwoPair[hID]=true;
                scores[hID]=30;
            }
            if(faceCombo[hID]==5){
                isStraight[hID]=true;
                scores[hID]=40;
            }
            if(suitCombo[hID]==5){
                isFlush[hID]=true;
                scores[hID]=50;
            }
            if (!FHThreeFace[hID].equals(""-1"") && !FHTwoFace[hID].equals(""-1"")) {
                isFullHouse[hID]=true;
                scores[hID]=60;
            }
            hID++;
            isFirstCard=true;

        }// loop: NThis, NThat







        if(isFullHouse[0]&&isFullHouse[1]){
            if(Integer.parseInt(FHThreeFace[0])>Integer.parseInt(FHThreeFace[1])){
                scores[0]+=6;
            }else if(Integer.parseInt(FHThreeFace[0])<Integer.parseInt(FHThreeFace[1])){
                scores[1]+=6;
            }
        }else if(isFlush[0]&&isFlush[1]){
            if(Integer.parseInt(NThis[4].getFace())>Integer.parseInt(NThat[4].getFace())){
                scores[0]+=5;
            }else if(Integer.parseInt(NThis[4].getFace())<Integer.parseInt(NThat[4].getFace())){
                scores[1]+=5;
            }
        }else if(isStraight[0]&&isStraight[1]){
            if(Integer.parseInt(NThis[4].getFace())==14)scores[0]-=3;
            if(Integer.parseInt(NThat[4].getFace())==14)scores[0]-=3;
            if(Integer.parseInt(NThis[0].getFace())>Integer.parseInt(NThat[0].getFace())){
                scores[0]+=3;
            }else if(Integer.parseInt(NThis[0].getFace())<Integer.parseInt(NThat[0].getFace())) {
                scores[1]+=3;
            }
        }else if(isTwoPair[0] && isTwoPair[1]){
            if(Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[0]+=3;
            }else if (Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[1]+=3;
            }
        }else if(isOnePair[0] && isOnePair[1]){
            if(Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[0]+=2;
            }else if (Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[1]+=2;
            }
        }else if(NThis[4].getFace().equals(NThat[4].getFace())){
            for(int i=4;i>=0;i--) {
                if (NThis[i].compareTo(NThat[i]) > 0) {
                    scores[0]++;
                    break;
                } else if (NThis[i].compareTo(NThat[i]) < 0) {
                    scores[1]++;
                    break;
                }
            }
        }


//        System.out.printf(""\n*** compareTo return: %d (%d-%d)\n\n"",(scores[0]-scores[1]),scores[0],scores[1]);
        return scores[0]-scores[1];
    }
}

@e3b65c1f54bb7c8bbc5cd71cc707236a@"
"r04631026","3","0.0966666666666667","105872","@c48de25ffb7dcc44379e2b344f982655@public class Hand implements Comparable<Hand> {
     // sorted by Card value are recommended but not necessary
    private Card[] cards=new Card[5]; 
    public int HandOrder,CardOrder;
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards=cards;
        Insertion.sort(this.cards);
        GetOrder();
       }
     // Do not modified this function
    public Card[] getCards() { return this.cards; }
    private int suittointeger (String suit){
         int num=0;
         switch (suit){
             case ""Spades"":
                 num=3;
                 break;
             case ""Hearts"":
                 num=2;
                 break;
             case ""Dimonds"":
                 num=1;
                 break;
             case ""Clubs"":
                 num=0;
                 break;
         }
         return(num);
     }
     private int facetointeger(String face) {
        int num1 = 0;
        switch (face) {
            case ""A"":
                num1 = 13;
                break;
            case ""K"":
                num1 = 12;
                break;
            case ""Q"":
                num1 = 11;
                break;
            case ""J"":
                num1 = 10;
                break;
            case ""10"":
                num1 = 9;
                break;
            case ""9"":
                num1 = 8;
                break;
            case ""8"":
                num1 = 7;
                break;
            case ""7"":
                num1 = 6;
                break;
            case ""6"":
                num1 = 5;
                break;
            case ""5"":
                num1 = 4;
                break;
            case ""4"":
                num1 = 3;
                break;
            case ""3"":
                num1 = 2;
                break;
            case ""2"":
                num1 = 1;
                break;

        }
        return num1;
    }
    private boolean isFullhouse(){
        if(cards[0].getFace().equals(cards[1].getFace()) && cards[1].getFace().equals(cards[2].getFace()) && cards[3].getFace().equals(cards[4].getFace()) && !cards[0].getFace().equals(cards[3].getFace()))
            return (true);
        if (cards[0].getFace().equals(cards[1].getFace()) && !cards[0].getFace().equals(cards[2].getFace()) && cards[2].getFace().equals(cards[3].getFace()) && cards[2].getFace().equals(cards[4].getFace()))
            return (true);
        else
            return (false);
       }
    private boolean isFlush(){
        String temp=cards[0].getSuit();
        int i=0;
        while (i<5 && cards[i].getSuit().equals(temp) )
            i++;
        return(i==5);
    }
    private boolean isStraight(){
        if (cards[0].getFace().equals(""2"") && cards[1].getFace().equals(""3"") && cards[2].getFace().equals(""4"") && cards[3].getFace().equals(""5"") && cards[4].getFace().equals(""A""))
        return (true);
      
        int i=facetointeger(cards[4].getFace());
        int temp=3;
        while (temp>=0 && facetointeger(cards[temp].getFace())==(i-1) ){
            temp--;
            i--;
        }
        return(i==(facetointeger(cards[4].getFace())-4));
    }
    private int PairNumber(){
        QuickFindUF cc=new QuickFindUF(5);
        for (int i=0 ; i<5 ; i++)
            for (int j=0 ; j<5 ; j++)
                if (facetointeger(cards[i].getFace())==facetointeger(cards[j].getFace()))
                    cc.union(i, j);
        if(cc.count()==5)
            return 0;
        else if(cc.count()==4)
            return 1;
        else if(cc.count()==3 && (cc.find(0)==cc.find(2)||cc.find(4)==cc.find(2)||cc.find(1)==cc.find(3)))
            return 1;
        else 
            return 2;
            }
    // TODO
    public void GetOrder(){
        if (isFullhouse()){
            HandOrder=5;
            CardOrder=facetointeger(cards[2].getFace());
         }
        else if (isFlush()){
            HandOrder=4;
            CardOrder=13*suittointeger(cards[4].getSuit())+facetointeger(cards[4].getFace());
        }
        else if (isStraight()){
            HandOrder=3;
            int i;
            if (cards[0].getFace().equals(""2"") && cards[4].getFace().equals(""A""))
                CardOrder=facetointeger(cards[3].getFace())*4+suittointeger(cards[3].getSuit())+1;
            else 
                CardOrder=facetointeger(cards[4].getFace())*4+suittointeger(cards[4].getSuit())+1;
        }
        else if  (PairNumber()==2){
            HandOrder=2;
            if (cards[4].getFace().equals(cards[3].getFace()))
               CardOrder=facetointeger(cards[4].getFace())*4+suittointeger(cards[4].getSuit())+1;
            else
               CardOrder=facetointeger(cards[3].getFace())*4+suittointeger(cards[3].getSuit())+1;
        }
        else if (PairNumber()==1){
            HandOrder=1;
            if (cards[4].getFace().equals(cards[3].getFace()))
                CardOrder=facetointeger(cards[4].getFace())*4+suittointeger(cards[4].getSuit())+1;
            else if (cards[3].getFace().equals(cards[2].getFace()))
                CardOrder=facetointeger(cards[3].getFace())*4+suittointeger(cards[3].getSuit())+1;
            else if (cards[2].getFace().equals(cards[1].getFace()))
                CardOrder=facetointeger(cards[2].getFace())*4+suittointeger(cards[2].getSuit())+1;
            else
                CardOrder=facetointeger(cards[1].getFace())*4+suittointeger(cards[1].getSuit())+1;
        }
        else{
            HandOrder=0;
            CardOrder=facetointeger(cards[4].getFace())*4+suittointeger(cards[4].getSuit())+1;
        }
    } 
    public int compareTo(Hand that) {
        if (this.HandOrder>that.HandOrder) return 1;
        if (this.HandOrder<that.HandOrder) return -1;
        if (this.CardOrder>that.CardOrder) return 1;
        if (this.CardOrder<that.CardOrder) return -1;
        return 0; 
}  
}
@c48de25ffb7dcc44379e2b344f982655@"
"r04631046","3","0.1","101472","@c48de25ffb7dcc44379e2b344f982655@public class Hand implements Comparable<Hand> {
     // sorted by Card value are recommended but not necessary
    private Card[] cards=new Card[5]; 
    public int HandOrder,CardOrder;
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards=cards;
        Insertion.sort(this.cards);
        GetOrder();
       }
     // Do not modified this function
    public Card[] getCards() { return this.cards; }
    private int suittointeger (String suit){
         int num=0;
         switch (suit){
             case ""Spades"":
                 num=3;
                 break;
             case ""Hearts"":
                 num=2;
                 break;
             case ""Dimonds"":
                 num=1;
                 break;
             case ""Clubs"":
                 num=0;
                 break;
         }
         return(num);
     }
     private int facetointeger(String face) {
        int num1 = 0;
        switch (face) {
            case ""A"":
                num1 = 13;
                break;
            case ""K"":
                num1 = 12;
                break;
            case ""Q"":
                num1 = 11;
                break;
            case ""J"":
                num1 = 10;
                break;
            case ""10"":
                num1 = 9;
                break;
            case ""9"":
                num1 = 8;
                break;
            case ""8"":
                num1 = 7;
                break;
            case ""7"":
                num1 = 6;
                break;
            case ""6"":
                num1 = 5;
                break;
            case ""5"":
                num1 = 4;
                break;
            case ""4"":
                num1 = 3;
                break;
            case ""3"":
                num1 = 2;
                break;
            case ""2"":
                num1 = 1;
                break;

        }
        return num1;
    }
    private boolean isFullhouse(){
        if(cards[0].getFace().equals(cards[1].getFace()) && cards[1].getFace().equals(cards[2].getFace()) && cards[3].getFace().equals(cards[4].getFace()) && !cards[0].getFace().equals(cards[3].getFace()))
            return (true);
        if (cards[0].getFace().equals(cards[1].getFace()) && !cards[0].getFace().equals(cards[2].getFace()) && cards[2].getFace().equals(cards[3].getFace()) && cards[2].getFace().equals(cards[4].getFace()))
            return (true);
        else
            return (false);
       }
    private boolean isFlush(){
        String temp=cards[0].getSuit();
        int i=0;
        while (i<5 && cards[i].getSuit().equals(temp) )
            i++;
        return(i==5);
    }
    private boolean isStraight(){
        if (cards[0].getFace().equals(""2"") && cards[1].getFace().equals(""3"") && cards[2].getFace().equals(""4"") && cards[3].getFace().equals(""5"") && cards[4].getFace().equals(""A""))
        return (true);
      
        int i=facetointeger(cards[4].getFace());
        int temp=3;
        while (temp>=0 && facetointeger(cards[temp].getFace())==(i-1) ){
            temp--;
            i--;
        }
        return(i==(facetointeger(cards[4].getFace())-4));
    }
    private int PairNumber(){
        QuickFindUF cc=new QuickFindUF(5);
        for (int i=0 ; i<5 ; i++)
            for (int j=0 ; j<5 ; j++)
                if (facetointeger(cards[i].getFace())==facetointeger(cards[j].getFace()))
                    cc.union(i, j);
        if(cc.count()==5)
            return 0;
        else if(cc.count()==4)
            return 1;
        else if(cc.count()==3 && (cc.find(0)==cc.find(2)||cc.find(4)==cc.find(2)||cc.find(1)==cc.find(3)))
            return 1;
        else 
            return 2;
            }
    // TODO
    public void GetOrder(){
        if (isFullhouse()){
            HandOrder=5;
            CardOrder=facetointeger(cards[2].getFace());
         }
        else if (isFlush()){
            HandOrder=4;
            CardOrder=13*suittointeger(cards[4].getSuit())+facetointeger(cards[4].getFace());
        }
        else if (isStraight()){
            HandOrder=3;
            int i;
            if (cards[0].getFace().equals(""2"") && cards[4].getFace().equals(""A""))
                CardOrder=facetointeger(cards[3].getFace())*4+suittointeger(cards[3].getSuit())+1;
            else 
                CardOrder=facetointeger(cards[4].getFace())*4+suittointeger(cards[4].getSuit())+1;
        }
        else if  (PairNumber()==2){
            HandOrder=2;
            if (cards[4].getFace().equals(cards[3].getFace()))
               CardOrder=facetointeger(cards[4].getFace())*4+suittointeger(cards[4].getSuit())+1;
            else
               CardOrder=facetointeger(cards[3].getFace())*4+suittointeger(cards[3].getSuit())+1;
        }
        else if (PairNumber()==1){
            HandOrder=1;
            if (cards[4].getFace().equals(cards[3].getFace()))
                CardOrder=facetointeger(cards[4].getFace())*4+suittointeger(cards[4].getSuit())+1;
            else if (cards[3].getFace().equals(cards[2].getFace()))
                CardOrder=facetointeger(cards[3].getFace())*4+suittointeger(cards[3].getSuit())+1;
            else if (cards[2].getFace().equals(cards[1].getFace()))
                CardOrder=facetointeger(cards[2].getFace())*4+suittointeger(cards[2].getSuit())+1;
            else
                CardOrder=facetointeger(cards[1].getFace())*4+suittointeger(cards[1].getSuit())+1;
        }
        else{
            HandOrder=0;
            CardOrder=facetointeger(cards[4].getFace())*4+suittointeger(cards[4].getSuit())+1;
        }
    } 
    public int compareTo(Hand that) {
        if (this.HandOrder>that.HandOrder) return 1;
        if (this.HandOrder<that.HandOrder) return -1;
        if (this.CardOrder>that.CardOrder) return 1;
        if (this.CardOrder<that.CardOrder) return -1;
        return 0; 
}  
}
@c48de25ffb7dcc44379e2b344f982655@"
"r04631031","3","0.0966666666666667","105584","@c48de25ffb7dcc44379e2b344f982655@public class Hand implements Comparable<Hand> {
     // sorted by Card value are recommended but not necessary
    private Card[] cards=new Card[5]; 
    public int HandOrder,CardOrder;
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards=cards;
        Insertion.sort(this.cards);
        GetOrder();
       }
     // Do not modified this function
    public Card[] getCards() { return this.cards; }
    private int suittointeger (String suit){
         int num=0;
         switch (suit){
             case ""Spades"":
                 num=3;
                 break;
             case ""Hearts"":
                 num=2;
                 break;
             case ""Dimonds"":
                 num=1;
                 break;
             case ""Clubs"":
                 num=0;
                 break;
         }
         return(num);
     }
     private int facetointeger(String face) {
        int num1 = 0;
        switch (face) {
            case ""A"":
                num1 = 13;
                break;
            case ""K"":
                num1 = 12;
                break;
            case ""Q"":
                num1 = 11;
                break;
            case ""J"":
                num1 = 10;
                break;
            case ""10"":
                num1 = 9;
                break;
            case ""9"":
                num1 = 8;
                break;
            case ""8"":
                num1 = 7;
                break;
            case ""7"":
                num1 = 6;
                break;
            case ""6"":
                num1 = 5;
                break;
            case ""5"":
                num1 = 4;
                break;
            case ""4"":
                num1 = 3;
                break;
            case ""3"":
                num1 = 2;
                break;
            case ""2"":
                num1 = 1;
                break;

        }
        return num1;
    }
    private boolean isFullhouse(){
        if(cards[0].getFace().equals(cards[1].getFace()) && cards[1].getFace().equals(cards[2].getFace()) && cards[3].getFace().equals(cards[4].getFace()) && !cards[0].getFace().equals(cards[3].getFace()))
            return (true);
        if (cards[0].getFace().equals(cards[1].getFace()) && !cards[0].getFace().equals(cards[2].getFace()) && cards[2].getFace().equals(cards[3].getFace()) && cards[2].getFace().equals(cards[4].getFace()))
            return (true);
        else
            return (false);
       }
    private boolean isFlush(){
        String temp=cards[0].getSuit();
        int i=0;
        while (i<5 && cards[i].getSuit().equals(temp) )
            i++;
        return(i==5);
    }
    private boolean isStraight(){
        if (cards[0].getFace().equals(""2"") && cards[1].getFace().equals(""3"") && cards[2].getFace().equals(""4"") && cards[3].getFace().equals(""5"") && cards[4].getFace().equals(""A""))
        return (true);
      
        int i=facetointeger(cards[4].getFace());
        int temp=3;
        while (temp>=0 && facetointeger(cards[temp].getFace())==(i-1) ){
            temp--;
            i--;
        }
        return(i==(facetointeger(cards[4].getFace())-4));
    }
    private int PairNumber(){
        QuickFindUF cc=new QuickFindUF(5);
        for (int i=0 ; i<5 ; i++)
            for (int j=0 ; j<5 ; j++)
                if (facetointeger(cards[i].getFace())==facetointeger(cards[j].getFace()))
                    cc.union(i, j);
        if(cc.count()==5)
            return 0;
        else if(cc.count()==4)
            return 1;
        else if(cc.count()==3 && (cc.find(0)==cc.find(2)||cc.find(4)==cc.find(2)||cc.find(1)==cc.find(3)))
            return 1;
        else 
            return 2;
            }
    // TODO
    public void GetOrder(){
        if (isFullhouse()){
            HandOrder=5;
            CardOrder=facetointeger(cards[2].getFace());
         }
        else if (isFlush()){
            HandOrder=4;
            CardOrder=13*suittointeger(cards[4].getSuit())+facetointeger(cards[4].getFace());
        }
        else if (isStraight()){
            HandOrder=3;
            int i;
            if (cards[0].getFace().equals(""2"") && cards[4].getFace().equals(""A""))
                CardOrder=facetointeger(cards[3].getFace())*4+suittointeger(cards[3].getSuit())+1;
            else 
                CardOrder=facetointeger(cards[4].getFace())*4+suittointeger(cards[4].getSuit())+1;
        }
        else if  (PairNumber()==2){
            HandOrder=2;
            if (cards[4].getFace().equals(cards[3].getFace()))
               CardOrder=facetointeger(cards[4].getFace())*4+suittointeger(cards[4].getSuit())+1;
            else
               CardOrder=facetointeger(cards[3].getFace())*4+suittointeger(cards[3].getSuit())+1;
        }
        else if (PairNumber()==1){
            HandOrder=1;
            if (cards[4].getFace().equals(cards[3].getFace()))
                CardOrder=facetointeger(cards[4].getFace())*4+suittointeger(cards[4].getSuit())+1;
            else if (cards[3].getFace().equals(cards[2].getFace()))
                CardOrder=facetointeger(cards[3].getFace())*4+suittointeger(cards[3].getSuit())+1;
            else if (cards[2].getFace().equals(cards[1].getFace()))
                CardOrder=facetointeger(cards[2].getFace())*4+suittointeger(cards[2].getSuit())+1;
            else
                CardOrder=facetointeger(cards[1].getFace())*4+suittointeger(cards[1].getSuit())+1;
        }
        else{
            HandOrder=0;
            CardOrder=facetointeger(cards[4].getFace())*4+suittointeger(cards[4].getSuit())+1;
        }
    } 
    public int compareTo(Hand that) {
        if (this.HandOrder>that.HandOrder) return 1;
        if (this.HandOrder<that.HandOrder) return -1;
        if (this.CardOrder>that.CardOrder) return 1;
        if (this.CardOrder<that.CardOrder) return -1;
        return 0; 
}  
}
@c48de25ffb7dcc44379e2b344f982655@"
"b02611002","3","0.0933333333333333","105296","@d68c7821ee56c4a9fb1ef2ddeacc889e@//import java.util.*;
//
//public class Hand implements Comparable<Hand> {
//
//    // sorted by Card value are recommended but not necessary
//    private Card[] cards;
//
//    private CardType cardType;
//    public CardQuery cardQuery = new CardQuery();
//    private static final CardTypeOrder CARD_TYPE_ORDER = new CardTypeOrder();
//
//    enum CardType {
//        full_house , flush , straight , two_pair , one_pair , high_card
//    }
//
//
//    // TODO, Judge System will call this constructor once for each hand
//    public Hand(Card[] cards){
//        this.cards = cards;
//        this.setCardType();
//    }
//
//    public CardType getCardType(){
//        return cardType;
//    }
//
//    private void setCardType(){
//        Map<String,Integer> faces = cardQuery.getFaceCount();
//        if (faces.size() == 2) {
//            // (4,1) or (3,2)
//            if (cardQuery.getThrees().size() != 0) {
//                cardType = CardType.full_house;
//                return;
//            }
//            cardType = CardType.high_card;
//        } else if (faces.size() == 3){
//            // (3,1,1) or (2,2,1)
//            if (cardQuery.getPairs().size() != 0) {
//                cardType = CardType.two_pair;
//                return;
//            }
//            cardType = CardType.high_card;
//        } else if (faces.size() == 4){
//            // (2,1,1,1)
//            cardType = CardType.one_pair;
//        } else if (faces.size() == 5){
//            // check for flush
//            if (cardQuery.getSuitSet().size() == 1) {
//                cardType = CardType.flush;
//                return;
//            }
//            // check for straight
//            String[] straights = {""A"",""K"",""Q"",""J"",""10"",""9"",""8"",""7"",""6"",""5"",""4"",""3"",""2"",""A""};
//            Set<String> faceSet = faces.keySet();
//            for(int i = 0; i < straights.length - 5 ; i++){
//                Set<String> straightOne = new HashSet<String>();
//                for(int j = i ; j < i + 5 ; j++){
//                    straightOne.add(straights[j]);
//                }
//                if (faceSet.containsAll(straightOne)) {
//                    cardType = CardType.straight;
//                    return;
//                }
//            }
//            // high card otherwise
//            cardType = CardType.high_card;
//        }
//    }
//
//    // TODO
//    public int compareTo(Hand that) {
//        int result = CARD_TYPE_ORDER.compare(this.getCardType(), that.getCardType());
//        if (result != 0){
//            return result;
//        } else {
//            // broke ties
//            switch (this.getCardType()) {
//                case full_house:
//                    Card c1 = Collections.max(this.cardQuery.getThrees());
//                    Card c2 = Collections.max(that.cardQuery.getThrees());
//                    return c1.compareTo(c2);
//
//                case two_pair:
//                case one_pair:
//                    c1 = Collections.max(this.cardQuery.getPairs());
//                    c2 = Collections.max(that.cardQuery.getPairs());
//                    return c1.compareTo(c2);
//
//                case high_card:
//                case straight:
//                case flush:
//                    c1 = Collections.max(this.cardQuery.getOnes());
//                    c2 = Collections.max(that.cardQuery.getOnes());
//                    return c1.compareTo(c2);
//            }
//        }
//        return 0;
//    }
//
//    // Do not modified this function
//    public Card[] getCards() { return this.cards; }
//
//
//    private static class CardTypeOrder implements Comparator<CardType> {
//        private static List<CardType> order;
//        CardTypeOrder() {
//            CardType[] cardTypes = {
//                    CardType.full_house,
//                    CardType.flush,
//                    CardType.straight,
//                    CardType.two_pair,
//                    CardType.one_pair,
//                    CardType.high_card
//            };
//            order = new ArrayList<CardType>();
//            for (CardType cardType : cardTypes) {
//                order.add(cardType);
//            }
//        }
//
//        @Override
//        public int compare(CardType cardType1, CardType cardType2) {
//            int cardType_1 = order.indexOf(cardType1);
//            int cardType_2 = order.indexOf(cardType2);
//            if (cardType_1 < cardType_2) return 1;
//            else if (cardType_1 > cardType_2) return -1;
//            else return 0;
//        }
//    }
//
//
//    private class CardQuery {
//
//        public Map<String , Integer> getFaceCount(){
//            Map<String,Integer> faces = new HashMap<String,Integer>();
//            for(Card c:cards){
//                if (faces.containsKey(c.getFace()))
//                    faces.put(c.getFace() , faces.get(c.getFace())+1);
//                else
//                    faces.put(c.getFace() , 1);
//            }
//            return faces;
//        }
//
//        public Set<String> getSuitSet(){
//            Set<String> suitSet = new HashSet<String>();
//            for (Card c:cards){
//                suitSet.add(c.getSuit());
//            }
//            return suitSet;
//        }
//
//        public Set<String> getSuitSet(String face){
//            Set<String> suitSet = new HashSet<String>();
//            for (Card c:cards){
//                if (face.equals(c.getFace()))
//                    suitSet.add(c.getSuit());
//            }
//            return suitSet;
//        }
//
//        public Set<Card> getOnes(){
//            Set<Card> ones = new HashSet<Card>();
//            Map<String,Integer> faces = getFaceCount();
//            for (Card c:cards){
//                if (faces.get(c.getFace()) == 1)
//                    ones.add(c);
//            }
//            return ones;
//        }
//
//        public Set<Card> getPairs(){
//            Set<Card> pairs = new HashSet<Card>();
//            Map<String,Integer> faces = getFaceCount();
//            for (Card c:cards){
//                if (faces.get(c.getFace()) == 2)
//                    pairs.add(c);
//            }
//            return pairs;
//        }
//
//        public Set<Card> getThrees(){
//            Set<Card> threes = new HashSet<Card>();
//            Map<String,Integer> faces = getFaceCount();
//            for (Card c:cards){
//                if (faces.get(c.getFace()) == 3)
//                    threes.add(c);
//            }
//            return threes;
//        }
//    }
//
//}
import java.util.Arrays;

public class Hand implements Comparable<Hand> {



    // sorted by Card value are recommended but not necessary
    private Card[] cards = new Card[5];



    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] inputCards){
        this.cards=inputCards;
    }



    // Do not modified this function
    public Card[] getCards() { return this.cards; }



    // TODO
    public int compareTo(Hand that) {
        // complete this function so the Hand can be sorted according to its cards.

//        System.out.println(""***START: ""+this.getCards()[4].getFace());

        int[] scores={0,0}; //hand[1] for this, hand[2] for that.

        boolean[] isFullHouse={false,false};
        int FHCounter=0;
        String[] FHThreeFace={""-1"",""-1""};//10 //9
        String[] FHTwoFace={""-1"",""-1""};//4 //A
        String[] tempFHTwoFace={""-1"",""-1""};

        boolean[] isFlush={false,false};
        int suitCombo[]={0,0};

        boolean[] isStraight={false,false};
        int faceCombo[]={0,0};

        boolean[] isTwoPair={false,false};

        boolean[] isOnePair={false,false};
        boolean isFirstCard=true;



        Card[] NThis = this.cards;  //cards in ""numerical"" expression (A->14, J->11, Q->12, K->13)
        Card[] NThat = that.cards;
        for(int i=0;i<NThis.length;i++){

            switch (NThis[i].getFace()){
                case ""A"": NThis[i]=new Card(""14"",NThis[i].getSuit());break;
                case ""J"": NThis[i]=new Card(""11"",NThis[i].getSuit());break;
                case ""Q"": NThis[i]=new Card(""12"",NThis[i].getSuit());break;
                case ""K"": NThis[i]=new Card(""13"",NThis[i].getSuit());break;
            }

            switch (NThat[i].getFace()){
                case ""A"": NThat[i]=new Card(""14"",NThat[i].getSuit());break;
                case ""J"": NThat[i]=new Card(""11"",NThat[i].getSuit());break;
                case ""Q"": NThat[i]=new Card(""12"",NThat[i].getSuit());break;
                case ""K"": NThat[i]=new Card(""13"",NThat[i].getSuit());break;
            }
        }


        Arrays.sort(NThis);
////        //TODO remove
//        System.out.println(""\n*Print NThis:"");
//        for(Card c:NThis){
//            System.out.println(c.getFace()+c.getSuit());
//        }
        Arrays.sort(NThat);
//        //TODO remove
//        System.out.println(""*Print NThat:"");
//        for(Card c:NThat){
//            System.out.println(c.getFace()+c.getSuit());
//        }


        int hID=0;
        Card[] currentHand = NThis;
        for(int i =0;i<2;i++){  // loop: NThis, NThat
            if(hID==1) currentHand=NThat;

            Card previous = new Card(""2"",""Clubs"");
            FHCounter=0;
            suitCombo[hID]=0;
            faceCombo[hID]=0;
            FHThreeFace[hID]=""-1"";
            FHTwoFace[hID]=""-1"";
            tempFHTwoFace[hID]=""-1"";

            for(Card c:currentHand){// loop: card1, card2, card3, card4 ...

                //handle first card case
                if(isFirstCard){
                    FHCounter=1;
                    suitCombo[hID]=1;
                    faceCombo[hID]=1;
                    isFirstCard=false;
                    previous=c;
                    continue;
                }

                // FullHouse counter
                if (previous.getFace() == c.getFace()) FHCounter++;
                else FHCounter = 1;
                if (FHCounter == 3) {
                    FHThreeFace[hID] = c.getFace();
                    FHTwoFace[hID] = tempFHTwoFace[hID];
                } else if (FHCounter == 2) {
                    tempFHTwoFace[hID] = FHTwoFace[hID];
                    FHTwoFace[hID] = c.getFace();
                }

                // Flush counter
                if(previous.getSuit().equals(c.getSuit())){
                    suitCombo[hID]++;
                }

                // Straight counter
                if(Integer.parseInt(c.getFace())-Integer.parseInt(previous.getFace())==1){
                    faceCombo[hID]++;
                }

                previous=c;
            }// loop: card1, card2, card3, card4 ...


            scores[hID]=Integer.parseInt(currentHand[4].getFace());

            if(!FHTwoFace[hID].equals(""-1"")){
                isOnePair[hID]=true;
                scores[hID]=20;
            }
            if(!tempFHTwoFace[hID].equals(""-1"") && !FHTwoFace[hID].equals(""-1"")){
                isTwoPair[hID]=true;
                scores[hID]=30;
            }
            if(faceCombo[hID]==5){
                isStraight[hID]=true;
                scores[hID]=40;
            }
            if(suitCombo[hID]==5){
                isFlush[hID]=true;
                scores[hID]=50;
            }
            if (!FHThreeFace[hID].equals(""-1"") && !FHTwoFace[hID].equals(""-1"")) {
                isFullHouse[hID]=true;
                scores[hID]=60;
            }
            hID++;
            isFirstCard=true;

        }// loop: NThis, NThat







        if(isFullHouse[0]&&isFullHouse[1]){
            if(Integer.parseInt(FHThreeFace[0])>Integer.parseInt(FHThreeFace[1])){
                scores[0]+=6;
            }else if(Integer.parseInt(FHThreeFace[0])<Integer.parseInt(FHThreeFace[1])){
                scores[1]+=6;
            }
        }else if(isFlush[0]&&isFlush[1]){
            if(Integer.parseInt(NThis[4].getFace())>Integer.parseInt(NThat[4].getFace())){
                scores[0]+=5;
            }else if(Integer.parseInt(NThis[4].getFace())<Integer.parseInt(NThat[4].getFace())){
                scores[1]+=5;
            }
        }else if(isStraight[0]&&isStraight[1]){
            if(Integer.parseInt(NThis[4].getFace())==14)scores[0]-=3;
            if(Integer.parseInt(NThat[4].getFace())==14)scores[0]-=3;
            if(Integer.parseInt(NThis[0].getFace())>Integer.parseInt(NThat[0].getFace())){
                scores[0]+=3;
            }else if(Integer.parseInt(NThis[0].getFace())<Integer.parseInt(NThat[0].getFace())) {
                scores[1]+=3;
            }
        }else if(isTwoPair[0] && isTwoPair[1]){
            if(Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[0]+=3;
            }else if (Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[1]+=3;
            }
        }else if(isOnePair[0] && isOnePair[1]){
            if(Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[0]+=2;
            }else if (Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[1]+=2;
            }
        }else if(NThis[4].getFace().equals(NThat[4].getFace())){
            for(int i=4;i>=0;i--) {
                if (NThis[i].compareTo(NThat[i]) > 0) {
                    scores[0]++;
                    break;
                } else if (NThis[i].compareTo(NThat[i]) < 0) {
                    scores[1]++;
                    break;
                }
            }
        }

//        System.out.println(""***END: ""+this.getCards()[4].getFace());


        for(int i=0;i<NThis.length;i++){

            switch (NThis[i].getFace()){
                case ""14"": NThis[i]=new Card(""A"",NThis[i].getSuit());break;
                case ""11"": NThis[i]=new Card(""J"",NThis[i].getSuit());break;
                case ""12"": NThis[i]=new Card(""Q"",NThis[i].getSuit());break;
                case ""13"": NThis[i]=new Card(""K"",NThis[i].getSuit());break;
            }

            switch (NThat[i].getFace()){
                case ""14"": NThat[i]=new Card(""A"",NThat[i].getSuit());break;
                case ""11"": NThat[i]=new Card(""J"",NThat[i].getSuit());break;
                case ""12"": NThat[i]=new Card(""Q"",NThat[i].getSuit());break;
                case ""13"": NThat[i]=new Card(""K"",NThat[i].getSuit());break;
            }
        }


//        System.out.printf(""\n*** compareTo return: %d (%d-%d)\n\n"",(scores[0]-scores[1]),scores[0],scores[1]);
        return scores[0]-scores[1];
    }
}

@d68c7821ee56c4a9fb1ef2ddeacc889e@"
"r03522831","3","0.0933333333333333","105648","@822202e7642469ac45c40754a41f2e44@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
     private int Judge, index;

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        index = 0;
        this.cards = cards;
        Judge = 1;
        index = 4;
    }

    // TODO
    public void Pairs(){
        int pairsize = 0;
         int ind1 = 0;
         for(int i = 0; i < 5; i++){
                for(int j = i+1; j < 5; j++)
                {
                    if(cards[i].getFace().equals(cards[j].getFace()))
                    {
                        ind1 = i;
                        if(pairsize < 4){
                            pairsize += 1;
                        }
                        if(cards[i].compareTo(cards[ind1]) > 0){                         
                            index = i;
                        }
                        
                    }
                }

        }
         if((pairsize == 1)||(pairsize == 3))
             Judge = 2;
         if((pairsize == 2))
             Judge = 3;
         if(pairsize == 4)
             Judge = 6;
    }
    
    public void Straight(){
        int[] Number = new int[5];
         for (int i = 0; i < 5; i++){ 
             if(cards[i].getFace().equals(""A""))
                 Number[i] = 1;
             else if(cards[i].getFace().equals(""K""))
                 Number[i] = 13;
             else if(cards[i].getFace().equals(""Q""))
                 Number[i] = 12;
             else if(cards[i].getFace().equals(""J""))
                 Number[i] = 11;
             else
                 Number[i] = Integer.parseInt(cards[i].getFace());
         }
         
         if(((Number[4] - Number[0]) == 4)&&(Judge < 5)){
             if((Number[3] - Number[1])==2)
                 if((Number[2]-Number[1])==1)
                    Judge = 4;
                    index = 4;
         }
         if((Number[4] == 1)&&(Judge < 5))
         {
             if(((Number[3]-Number[0]) == 3)&&(Number[3] == 5)){
                 if((Number[2]-Number[1]) == 1)
                    Judge = 4;
//                    special  = 1;
                    index = 3;
             }
             if(((Number[3]-Number[0]) == 3)&&(Number[3] == 13)){
                 if((Number[2]-Number[1]) == 1)
                    Judge = 4;
             }
         }
    }
    
     public void Flush(){
         int count = 1;
         for(int i = 0; i < 4; i++)
             if(cards[i].getSuit().equals(cards[i+1].getSuit()))
                 count += 1;
         if ((count == 5)&&(Judge < 6))
             Judge = 5;
     }
    
    public int compareTo(Hand that) {
       Insertion.sort(this.cards);
        Insertion.sort(that.cards);
//        this.Judge = 1;
//        that.Judge = 1;
//        this.index = 4;
//        that.index = 4;
        this.Pairs();
        this.Flush();
        this.Straight();
        that.Pairs();
        that.Flush();
        that.Straight();
        if (this.Judge > that.Judge)
            return 1;
        else if (this.Judge < that.Judge)
            return -1;
        else
            return (this.cards[this.index].compareTo(that.cards[that.index]));
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}

@822202e7642469ac45c40754a41f2e44@"
"r03631015","3","0.1","101920","@c48de25ffb7dcc44379e2b344f982655@public class Hand implements Comparable<Hand> {
     // sorted by Card value are recommended but not necessary
    private Card[] cards=new Card[5]; 
    public int HandOrder,CardOrder;
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
        this.cards=cards;
        Insertion.sort(this.cards);
        GetOrder();
       }
     // Do not modified this function
    public Card[] getCards() { return this.cards; }
    private int suittointeger (String suit){
         int num=0;
         switch (suit){
             case ""Spades"":
                 num=3;
                 break;
             case ""Hearts"":
                 num=2;
                 break;
             case ""Dimonds"":
                 num=1;
                 break;
             case ""Clubs"":
                 num=0;
                 break;
         }
         return(num);
     }
     private int facetointeger(String face) {
        int num1 = 0;
        switch (face) {
            case ""A"":
                num1 = 13;
                break;
            case ""K"":
                num1 = 12;
                break;
            case ""Q"":
                num1 = 11;
                break;
            case ""J"":
                num1 = 10;
                break;
            case ""10"":
                num1 = 9;
                break;
            case ""9"":
                num1 = 8;
                break;
            case ""8"":
                num1 = 7;
                break;
            case ""7"":
                num1 = 6;
                break;
            case ""6"":
                num1 = 5;
                break;
            case ""5"":
                num1 = 4;
                break;
            case ""4"":
                num1 = 3;
                break;
            case ""3"":
                num1 = 2;
                break;
            case ""2"":
                num1 = 1;
                break;

        }
        return num1;
    }
    private boolean isFullhouse(){
        if(cards[0].getFace().equals(cards[1].getFace()) && cards[1].getFace().equals(cards[2].getFace()) && cards[3].getFace().equals(cards[4].getFace()) && !cards[0].getFace().equals(cards[3].getFace()))
            return (true);
        if (cards[0].getFace().equals(cards[1].getFace()) && !cards[0].getFace().equals(cards[2].getFace()) && cards[2].getFace().equals(cards[3].getFace()) && cards[2].getFace().equals(cards[4].getFace()))
            return (true);
        else
            return (false);
       }
    private boolean isFlush(){
        String temp=cards[0].getSuit();
        int i=0;
        while (i<5 && cards[i].getSuit().equals(temp) )
            i++;
        return(i==5);
    }
    private boolean isStraight(){
        if (cards[0].getFace().equals(""2"") && cards[1].getFace().equals(""3"") && cards[2].getFace().equals(""4"") && cards[3].getFace().equals(""5"") && cards[4].getFace().equals(""A""))
        return (true);
      
        int i=facetointeger(cards[4].getFace());
        int temp=3;
        while (temp>=0 && facetointeger(cards[temp].getFace())==(i-1) ){
            temp--;
            i--;
        }
        return(i==(facetointeger(cards[4].getFace())-4));
    }
    private int PairNumber(){
        QuickFindUF cc=new QuickFindUF(5);
        for (int i=0 ; i<5 ; i++)
            for (int j=0 ; j<5 ; j++)
                if (facetointeger(cards[i].getFace())==facetointeger(cards[j].getFace()))
                    cc.union(i, j);
        if(cc.count()==5)
            return 0;
        else if(cc.count()==4)
            return 1;
        else if(cc.count()==3 && (cc.find(0)==cc.find(2)||cc.find(4)==cc.find(2)||cc.find(1)==cc.find(3)))
            return 1;
        else 
            return 2;
            }
    // TODO
    public void GetOrder(){
        if (isFullhouse()){
            HandOrder=5;
            CardOrder=facetointeger(cards[2].getFace());
         }
        else if (isFlush()){
            HandOrder=4;
            CardOrder=13*suittointeger(cards[4].getSuit())+facetointeger(cards[4].getFace());
        }
        else if (isStraight()){
            HandOrder=3;
            int i;
            if (cards[0].getFace().equals(""2"") && cards[4].getFace().equals(""A""))
                CardOrder=facetointeger(cards[3].getFace())*4+suittointeger(cards[3].getSuit())+1;
            else 
                CardOrder=facetointeger(cards[4].getFace())*4+suittointeger(cards[4].getSuit())+1;
        }
        else if  (PairNumber()==2){
            HandOrder=2;
            if (cards[4].getFace().equals(cards[3].getFace()))
               CardOrder=facetointeger(cards[4].getFace())*4+suittointeger(cards[4].getSuit())+1;
            else
               CardOrder=facetointeger(cards[3].getFace())*4+suittointeger(cards[3].getSuit())+1;
        }
        else if (PairNumber()==1){
            HandOrder=1;
            if (cards[4].getFace().equals(cards[3].getFace()))
                CardOrder=facetointeger(cards[4].getFace())*4+suittointeger(cards[4].getSuit())+1;
            else if (cards[3].getFace().equals(cards[2].getFace()))
                CardOrder=facetointeger(cards[3].getFace())*4+suittointeger(cards[3].getSuit())+1;
            else if (cards[2].getFace().equals(cards[1].getFace()))
                CardOrder=facetointeger(cards[2].getFace())*4+suittointeger(cards[2].getSuit())+1;
            else
                CardOrder=facetointeger(cards[1].getFace())*4+suittointeger(cards[1].getSuit())+1;
        }
        else{
            HandOrder=0;
            CardOrder=facetointeger(cards[4].getFace())*4+suittointeger(cards[4].getSuit())+1;
        }
    } 
    public int compareTo(Hand that) {
        if (this.HandOrder>that.HandOrder) return 1;
        if (this.HandOrder<that.HandOrder) return -1;
        if (this.CardOrder>that.CardOrder) return 1;
        if (this.CardOrder<that.CardOrder) return -1;
        return 0; 
}  
}
@c48de25ffb7dcc44379e2b344f982655@"
"b02611026","0","0","0","@88b6e5cec076e8da98fa75c21f4fd4c0@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
//    private Card[] cards = new Card[5];
    private String face; 
    private String suit;
    
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){        
        for(int i = 0 ; i < cards.length ; i++){
            this.face = cards[i].getFace();
            this.suit = cards[i].getSuit();
        }       
        return;
    }

    // TODO
    public int compareTo(Hand that) {
        that.sort();
        this.sort();
        
        int this_handkind = 0;
        int that_handkind = 0;
        
        int[] onepair_thisans = this.onepair();
        int[] onepair_thatans = that.onepair();

        if (this.fullhouse() > 0) {
            this_handkind = 6;
//            System.out.println(""this fullhous"");
        } else if (this.flush() > 0) {
            this_handkind = 5;
//            System.out.println(""this flush"");
        } else if (this.straight() > 0) {
            this_handkind = 4;
//            System.out.println(""this straight"");
        } else if (this.twopairs() > 0) {
            this_handkind = 3;
//            System.out.println(""this 2pairs"");
        } else if (onepair_thisans[0] > 0) {
            this_handkind = 2;
//            System.out.println(""this 1pair"");
        } else {
            this_handkind = 1;
//            System.out.println(""this highcard"");
        }

        if (that.fullhouse() > 0) {
            that_handkind = 6;
//            System.out.println(""that fullhous"");
        } else if (that.flush() > 0) {
            that_handkind = 5;
//            System.out.println(""that flush"");
        } else if (that.straight() > 0) {
            that_handkind = 4;
//            System.out.println(""that straight"");
        } else if (that.twopairs() > 0) {
            that_handkind = 3;
//            System.out.println(""that 2pairs"");
        } else if (onepair_thatans[0] > 0) {
            that_handkind = 2;
//            System.out.println(""that 1pair"");
        } else {
            that_handkind = 1;
//            System.out.println(""that highcard"");
        }

//        System.out.println(that.flush());
//        System.out.println(that.straight());
//        System.out.println(that_handkind);
//        System.out.println(this.flush());
//        System.out.println(this_handkind);
        if (this_handkind > that_handkind) {
            return +1;
        } else if (this_handkind < that_handkind) {
            return -1;
        } else {
            if (this_handkind == 1) {
                return this.cards[4].compareTo(that.cards[4]);
            }
            if (this_handkind == 2) {
                return this.cards[onepair_thatans[1]].compareTo(that.cards[onepair_thatans[1]]);
            }
            if (this_handkind == 3) {
                return this.cards[3].compareTo(that.cards[3]);
            }
            if (this_handkind == 4) {
                if((this.cards[4].getFace()).equals(""A"") && (that.cards[4].getFace()).equals(""A"")){
                    return this.cards[3].compareTo(that.cards[3]);
                }
                else 
                    return this.cards[4].compareTo(that.cards[4]);
            }
            if (this_handkind == 5) {
                return this.cards[4].compareTo(that.cards[4]);
            }
            else{
                return this.cards[2].compareTo(that.cards[2]);
            }
        }
        
        //return 0;
    }

    private void sort() {
        for (int i = 0; i < 5; i++) {
            for (int j = i; j > 0; j--) {
                if (cards[j].compareTo(cards[j - 1]) < 0) {
                    exch(cards, j, j - 1);
                } else {
                    break;
                }
            }
        }
    }
    
    private static void exch(Comparable[] a, int i, int j) {
        Comparable swap = a[i];
        a[i] = a[j];
        a[j] = swap;
    }
    
    public int fullhouse() {
        if ((cards[0].getFace()).equals(cards[1].getFace()) && (cards[1].getFace()).equals(cards[2].getFace()) && ((cards[3].getFace()).equals(cards[4].getFace()))) {
            return 1;
        } else if ((cards[2].getFace()).equals(cards[3].getFace()) && (cards[3].getFace()).equals(cards[4].getFace()) && ((cards[0].getFace()).equals(cards[1].getFace()))) {
            return 1;
        } else {
            return 0;
        }
    }

    public int flush() {
        for (int i = 0; i < 4; i++) {
            if (!((cards[i].getSuit()).equals(cards[i + 1].getSuit()))) {
                return 0;
            }
        }
        return 1;
    }

    public int straight() {

        for (int i = 0; i < 4; i++) {
            int facenum1 = 0;
            if (cards[i].getFace().equals(""A"")) {
                facenum1 = 14;
            } else if (cards[i].getFace().equals(""J"")) {
                facenum1 = 11;
            } else if (cards[i].getFace().equals(""Q"")) {
                facenum1 = 12;
            } else if (cards[i].getFace().equals(""K"")) {
                facenum1 = 13;
            } else {
                facenum1 = Integer.parseInt(cards[i].getFace());
            }

            int facenum2 = 0;

            if (cards[i + 1].getFace().equals(""A"")) {
                facenum2 = 14;
            } else if (cards[i + 1].getFace().equals(""J"")) {
                facenum2 = 11;
            } else if (cards[i + 1].getFace().equals(""Q"")) {
                facenum2 = 12;
            } else if (cards[i + 1].getFace().equals(""K"")) {
                facenum2 = 13;
            } else {
                facenum2 = Integer.parseInt(cards[i + 1].getFace());
            }
            if (facenum2 != (facenum1 + 1)) {
                if (facenum1 == 5 && facenum2 == 14) {
//                    System.out.println(""---1"");
                    return 1;

                } else {
//                    System.out.println(""---2"");
                    return 0;
                }
            }
        }
//        System.out.println(""---3"");
        return 1;
    }

    public int twopairs() {
        if ((cards[2].getFace()).equals(cards[3].getFace()) && (cards[0].getFace()).equals(cards[1].getFace())) {
            return 1;
        } else if ((cards[1].getFace()).equals(cards[2].getFace()) && (cards[3].getFace()).equals(cards[4].getFace())) {
            return 1;
        } else if ((cards[0].getFace()).equals(cards[1].getFace()) && (cards[3].getFace()).equals(cards[4].getFace())) {
            return 1;
        } else {
            return 0;
        }
    }

    public int[] onepair() {
        int[] ans = new int[2];
        int sum = 0;
        for (int i = 1; i < 5; i++) {
            if ((cards[i - 1].getFace()).equals(cards[i].getFace())) {
                sum++;
                ans[1] = i;
            }
        }

        if (sum == 1) {
            ans[0] = 1;
        } else {
            ans[0] = 0;
        }
        return ans;
    }

    public int highcard() {

        return 0;
    }
    
      // Do not modified this function
    public Card[] getCards() { return this.cards; }
    
}

@88b6e5cec076e8da98fa75c21f4fd4c0@"
"b02611026","0","0","0","@dbb928c3480e509f196e1ab00a7b46ad@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
//    private Card[] cards = new Card[5];
    private String face; 
    private String suit;
    
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){        
        for(int i = 0 ; i < cards.length ; i++){
            this.face = cards[i].getFace();
            this.suit = cards[i].getSuit();
        }       
        return;
    }

    // TODO
    public int compareTo(Hand that) {
        that.sort();
        this.sort();
        
        int this_handkind = 0;
        int that_handkind = 0;
        
        int[] onepair_thisans = this.onepair();
        int[] onepair_thatans = that.onepair();

        if (this.fullhouse() > 0) {
            this_handkind = 6;
//            System.out.println(""this fullhous"");
        } else if (this.flush() > 0) {
            this_handkind = 5;
//            System.out.println(""this flush"");
        } else if (this.straight() > 0) {
            this_handkind = 4;
//            System.out.println(""this straight"");
        } else if (this.twopairs() > 0) {
            this_handkind = 3;
//            System.out.println(""this 2pairs"");
        } else if (onepair_thisans[0] > 0) {
            this_handkind = 2;
//            System.out.println(""this 1pair"");
        } else {
            this_handkind = 1;
//            System.out.println(""this highcard"");
        }

        if (that.fullhouse() > 0) {
            that_handkind = 6;
//            System.out.println(""that fullhous"");
        } else if (that.flush() > 0) {
            that_handkind = 5;
//            System.out.println(""that flush"");
        } else if (that.straight() > 0) {
            that_handkind = 4;
//            System.out.println(""that straight"");
        } else if (that.twopairs() > 0) {
            that_handkind = 3;
//            System.out.println(""that 2pairs"");
        } else if (onepair_thatans[0] > 0) {
            that_handkind = 2;
//            System.out.println(""that 1pair"");
        } else {
            that_handkind = 1;
//            System.out.println(""that highcard"");
        }

//        System.out.println(that.flush());
//        System.out.println(that.straight());
//        System.out.println(that_handkind);
//        System.out.println(this.flush());
//        System.out.println(this_handkind);
        if (this_handkind > that_handkind) {
            return +1;
        } else if (this_handkind < that_handkind) {
            return -1;
        } else {
            if (this_handkind == 1) {
                return this.cards[4].compareTo(that.cards[4]);
            }
            if (this_handkind == 2) {
                return this.cards[onepair_thatans[1]].compareTo(that.cards[onepair_thatans[1]]);
            }
            if (this_handkind == 3) {
                return this.cards[3].compareTo(that.cards[3]);
            }
            if (this_handkind == 4) {
                if((this.cards[4].getFace()).equals(""A"") && (that.cards[4].getFace()).equals(""A"")){
                    return this.cards[3].compareTo(that.cards[3]);
                }
                else 
                    return this.cards[4].compareTo(that.cards[4]);
            }
            if (this_handkind == 5) {
                return this.cards[4].compareTo(that.cards[4]);
            }
            else{
                return this.cards[2].compareTo(that.cards[2]);
            }
        }
        
        //return 0;
    }

    private void sort() {
        for (int i = 0; i < 5; i++) {
            for (int j = i; j > 0; j--) {
                if (cards[j].compareTo(cards[j - 1]) < 0) {
                    exch(cards, j, j - 1);
                } else {
                    break;
                }
            }
        }
    }
    
    private static void exch(Comparable[] a, int i, int j) {
        Comparable swap = a[i];
        a[i] = a[j];
        a[j] = swap;
    }
    
    public int fullhouse() {
        if ((cards[0].getFace()).equals(cards[1].getFace()) && (cards[1].getFace()).equals(cards[2].getFace()) && ((cards[3].getFace()).equals(cards[4].getFace()))) {
            return 1;
        } else if ((cards[2].getFace()).equals(cards[3].getFace()) && (cards[3].getFace()).equals(cards[4].getFace()) && ((cards[0].getFace()).equals(cards[1].getFace()))) {
            return 1;
        } else {
            return 0;
        }
    }

    public int flush() {
        for (int i = 0; i < 4; i++) {
            if (!((cards[i].getSuit()).equals(cards[i + 1].getSuit()))) {
                return 0;
            }
        }
        return 1;
    }

    public int straight() {

        for (int i = 0; i < 4; i++) {
            int facenum1 = 0;
            if (cards[i].getFace().equals(""A"")) {
                facenum1 = 14;
            } else if (cards[i].getFace().equals(""J"")) {
                facenum1 = 11;
            } else if (cards[i].getFace().equals(""Q"")) {
                facenum1 = 12;
            } else if (cards[i].getFace().equals(""K"")) {
                facenum1 = 13;
            } else {
                facenum1 = Integer.parseInt(cards[i].getFace());
            }

            int facenum2 = 0;

            if (cards[i + 1].getFace().equals(""A"")) {
                facenum2 = 14;
            } else if (cards[i + 1].getFace().equals(""J"")) {
                facenum2 = 11;
            } else if (cards[i + 1].getFace().equals(""Q"")) {
                facenum2 = 12;
            } else if (cards[i + 1].getFace().equals(""K"")) {
                facenum2 = 13;
            } else {
                facenum2 = Integer.parseInt(cards[i + 1].getFace());
            }
            if (facenum2 != (facenum1 + 1)) {
                if (facenum1 == 5 && facenum2 == 14) {
//                    System.out.println(""---1"");
                    return 1;

                } else {
//                    System.out.println(""---2"");
                    return 0;
                }
            }
        }
//        System.out.println(""---3"");
        return 1;
    }

    public int twopairs() {
        if ((cards[2].getFace()).equals(cards[3].getFace()) && (cards[0].getFace()).equals(cards[1].getFace())) {
            return 1;
        } else if ((cards[1].getFace()).equals(cards[2].getFace()) && (cards[3].getFace()).equals(cards[4].getFace())) {
            return 1;
        } else if ((cards[0].getFace()).equals(cards[1].getFace()) && (cards[3].getFace()).equals(cards[4].getFace())) {
            return 1;
        } else {
            return 0;
        }
    }

    public int[] onepair() {
        int[] ans = new int[2];
        int sum = 0;
        for (int i = 1; i < 5; i++) {
            if ((cards[i - 1].getFace()).equals(cards[i].getFace())) {
                sum++;
                ans[1] = i;
            }
        }

        if (sum == 1) {
            ans[0] = 1;
        } else {
            ans[0] = 0;
        }
        return ans;
    }

    public int highcard() {

        return 0;
    }
    
      // Do not modified this function
    public Card[] getCards() { return this.cards; }
//    public static void main(String[] args) throws Exception {
//        Card[] testthis = new Card[5];
//        testthis[0] = new Card(""9"", ""Clubs"");
//        testthis[1] = new Card(""J"", ""Diamonds"");
//        testthis[2] = new Card(""10"", ""Diamonds"");
//        testthis[3] = new Card(""K"", ""Diamonds"");
//        testthis[4] = new Card(""Q"", ""Diamonds"");
//
//        Card[] testthat = new Card[5];
//        testthat[0] = new Card(""10"", ""Hearts"");
//        testthat[1] = new Card(""8"", ""Hearts"");
//        testthat[2] = new Card(""9"", ""Hearts"");
//        testthat[3] = new Card(""J"", ""Hearts"");
//        testthat[4] = new Card(""Q"", ""Hearts"");
//
//        Player[] testp = new Player[2];
//        testp[0] = new Player(""a"");
//        testp[1] = new Player(""b"");
//
//        testp[0].setCards(testthis);
//        testp[1].setCards(testthat);
//
//       
//
//        System.out.println(testp[0].compareTo(testp[1]));
//        
//    }
}

@dbb928c3480e509f196e1ab00a7b46ad@"
"b02611026","3","0.0933333333333333","105536","@947b3a0ecbc9e46d1984b31a7284261e@
public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 
    private String face; 
    private String suit;
    
    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){        
        this.cards = cards;
        //this.cards = this.getCards();
//        for(int i = 0 ; i < cards.length ; i++){
//            this.face = cards[i].getFace();
//            this.suit = cards[i].getSuit();
//        }       
        return;
    }

    // TODO
    public int compareTo(Hand that) {
        that.sort();
        this.sort();
        
        int this_handkind = 0;
        int that_handkind = 0;
        
        int[] onepair_thisans = this.onepair();
        int[] onepair_thatans = that.onepair();

        if (this.fullhouse() > 0) {
            this_handkind = 6;
//            System.out.println(""this fullhous"");
        } else if (this.flush() > 0) {
            this_handkind = 5;
//            System.out.println(""this flush"");
        } else if (this.straight() > 0) {
            this_handkind = 4;
//            System.out.println(""this straight"");
        } else if (this.twopairs() > 0) {
            this_handkind = 3;
//            System.out.println(""this 2pairs"");
        } else if (onepair_thisans[0] > 0) {
            this_handkind = 2;
//            System.out.println(""this 1pair"");
        } else {
            this_handkind = 1;
//            System.out.println(""this highcard"");
        }

        if (that.fullhouse() > 0) {
            that_handkind = 6;
//            System.out.println(""that fullhous"");
        } else if (that.flush() > 0) {
            that_handkind = 5;
//            System.out.println(""that flush"");
        } else if (that.straight() > 0) {
            that_handkind = 4;
//            System.out.println(""that straight"");
        } else if (that.twopairs() > 0) {
            that_handkind = 3;
//            System.out.println(""that 2pairs"");
        } else if (onepair_thatans[0] > 0) {
            that_handkind = 2;
//            System.out.println(""that 1pair"");
        } else {
            that_handkind = 1;
//            System.out.println(""that highcard"");
        }

//        System.out.println(that.flush());
//        System.out.println(that.straight());
//        System.out.println(that_handkind);
//        System.out.println(this.flush());
//        System.out.println(this_handkind);
        if (this_handkind > that_handkind) {
            return +1;
        } else if (this_handkind < that_handkind) {
            return -1;
        } else {
            if (this_handkind == 1) {
                return this.cards[4].compareTo(that.cards[4]);
            }
            if (this_handkind == 2) {
                return this.cards[onepair_thatans[1]].compareTo(that.cards[onepair_thatans[1]]);
            }
            if (this_handkind == 3) {
                return this.cards[3].compareTo(that.cards[3]);
            }
            if (this_handkind == 4) {
                if((this.cards[4].getFace()).equals(""A"") && (that.cards[4].getFace()).equals(""A"")){
                    return this.cards[3].compareTo(that.cards[3]);
                }
                else 
                    return this.cards[4].compareTo(that.cards[4]);
            }
            if (this_handkind == 5) {
                return this.cards[4].compareTo(that.cards[4]);
            }
            else{
                return this.cards[2].compareTo(that.cards[2]);
            }
        }
        
        //return 0;
    }

    private void sort() {
        for (int i = 0; i < 5; i++) {
            for (int j = i; j > 0; j--) {
                if (cards[j].compareTo(cards[j - 1]) < 0) {
                    exch(cards, j, j - 1);
                } else {
                    break;
                }
            }
        }
    }
    
    private static void exch(Comparable[] a, int i, int j) {
        Comparable swap = a[i];
        a[i] = a[j];
        a[j] = swap;
    }
    
    public int fullhouse() {
        if ((cards[0].getFace()).equals(cards[1].getFace()) && (cards[1].getFace()).equals(cards[2].getFace()) && ((cards[3].getFace()).equals(cards[4].getFace()))) {
            return 1;
        } else if ((cards[2].getFace()).equals(cards[3].getFace()) && (cards[3].getFace()).equals(cards[4].getFace()) && ((cards[0].getFace()).equals(cards[1].getFace()))) {
            return 1;
        } else {
            return 0;
        }
    }

    public int flush() {
        for (int i = 0; i < 4; i++) {
            if (!((cards[i].getSuit()).equals(cards[i + 1].getSuit()))) {
                return 0;
            }
        }
        return 1;
    }

    public int straight() {

        for (int i = 0; i < 4; i++) {
            int facenum1 = 0;
            if (cards[i].getFace().equals(""A"")) {
                facenum1 = 14;
            } else if (cards[i].getFace().equals(""J"")) {
                facenum1 = 11;
            } else if (cards[i].getFace().equals(""Q"")) {
                facenum1 = 12;
            } else if (cards[i].getFace().equals(""K"")) {
                facenum1 = 13;
            } else {
                facenum1 = Integer.parseInt(cards[i].getFace());
            }

            int facenum2 = 0;

            if (cards[i + 1].getFace().equals(""A"")) {
                facenum2 = 14;
            } else if (cards[i + 1].getFace().equals(""J"")) {
                facenum2 = 11;
            } else if (cards[i + 1].getFace().equals(""Q"")) {
                facenum2 = 12;
            } else if (cards[i + 1].getFace().equals(""K"")) {
                facenum2 = 13;
            } else {
                facenum2 = Integer.parseInt(cards[i + 1].getFace());
            }
            if (facenum2 != (facenum1 + 1)) {
                if (facenum1 == 5 && facenum2 == 14) {
//                    System.out.println(""---1"");
                    return 1;

                } else {
//                    System.out.println(""---2"");
                    return 0;
                }
            }
        }
//        System.out.println(""---3"");
        return 1;
    }

    public int twopairs() {
        if ((cards[2].getFace()).equals(cards[3].getFace()) && (cards[0].getFace()).equals(cards[1].getFace())) {
            return 1;
        } else if ((cards[1].getFace()).equals(cards[2].getFace()) && (cards[3].getFace()).equals(cards[4].getFace())) {
            return 1;
        } else if ((cards[0].getFace()).equals(cards[1].getFace()) && (cards[3].getFace()).equals(cards[4].getFace())) {
            return 1;
        } else {
            return 0;
        }
    }

    public int[] onepair() {
        int[] ans = new int[2];
        int sum = 0;
        for (int i = 1; i < 5; i++) {
            if ((cards[i - 1].getFace()).equals(cards[i].getFace())) {
                sum++;
                ans[1] = i;
            }
        }

        if (sum == 1) {
            ans[0] = 1;
        } else {
            ans[0] = 0;
        }
        return ans;
    }

    public int highcard() {

        return 0;
    }
          // Do not modified this function
    public Card[] getCards() { return this.cards; }
//    public static void main(String[] args) throws Exception {
//        Card[] testthis = new Card[5];
//        testthis[0] = new Card(""9"", ""Clubs"");
//        testthis[1] = new Card(""J"", ""Diamonds"");
//        testthis[2] = new Card(""10"", ""Diamonds"");
//        testthis[3] = new Card(""K"", ""Diamonds"");
//        testthis[4] = new Card(""Q"", ""Diamonds"");
//
//        Card[] testthat = new Card[5];
//        testthat[0] = new Card(""10"", ""Hearts"");
//        testthat[1] = new Card(""8"", ""Hearts"");
//        testthat[2] = new Card(""9"", ""Hearts"");
//        testthat[3] = new Card(""J"", ""Hearts"");
//        testthat[4] = new Card(""Q"", ""Hearts"");
//
//        Hand[] testp = new Hand[2];
//        testp[0] = new Hand(testthat);
//        testp[1] = new Hand(testthis);
//        
//        
//        for(int i = 0 ; i < testthat.length ; i++){
//            System.out.println(testp[0].cards[i].getFace());
//            System.out.println(testp[0].cards[i].getSuit());
//        } 
//        for(int i = 0 ; i < testthat.length ; i++){
//            System.out.println(testp[1].cards[i].getFace());
//            System.out.println(testp[1].cards[i].getSuit());
//        }
////        testp[0].setCards(testthis);
////        testp[1].setCards(testthat);
//        System.out.println(testp[0].compareTo(testp[1]));
//        
//    }
}

@947b3a0ecbc9e46d1984b31a7284261e@"
