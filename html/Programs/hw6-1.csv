"r04945025","5","0.132","111456","@5a87f6bd61ed7f65ef35750aba66596a@import java.util.HashMap;
import java.util.Comparator;

public class Card implements Comparable<Card> {
	private String  face;
	private String  suit;
    private int suit2Int;
    
	public static final Comparator<Card> SUIT_ORDER = new SuitOrder();
	
	public Card(String face, String suit){
            this.face = face;
            this.suit = suit;
            switch (suit){
                case ""Clubs"":
                    this.suit2Int = 0;
                    break;
                case ""Diamonds"":
                    this.suit2Int = 1;
                    break;
                case ""Hearts"":
                    this.suit2Int = 2;
                    break;
                case ""Spades"":
                    this.suit2Int = 3;
                    break;
                default:
                    throw new IllegalArgumentException();
            }
        }
    
    public String getFace(){
        return this.face;
    }
        
    public String getSuit(){
        return this.suit;
    }
    
    public int getSuitInt(){
        return this.suit2Int;
    }
    
    private int face2Int(String face){
        switch(face){
            case ""J"":
                return 11;
            case ""Q"":
                return 12;
            case ""K"":
                return 13;
            case ""A"":
                return 14;
            default:
                return Integer.parseInt(face);
        }
    }
    
    public int compareTo(Card that) {
        String faceA = this.getFace();
        String faceB = that.getFace();
        int a = face2Int(faceA);
        int b = face2Int(faceB);
        if(a > b){
            return +1;
        }
        else if(a == b){
            if(SUIT_ORDER.compare(this, that) == 1){
                return +1;
            }
            else if(SUIT_ORDER.compare(this, that) == 0){
                return 0;
            }
        }
        return -1;
    }
        
    private static class SuitOrder implements Comparator<Card> {
        	
        public int compare(Card c1, Card c2) {
            int a = c1.getSuitInt();
            int b = c2.getSuitInt();
            if(a > b){
                return +1;
            }
            else if(a == b){
                return 0;
            }
            else{
                return -1;
            }
        }
    }
}


@5a87f6bd61ed7f65ef35750aba66596a@"
"r04546032","0","0","0","@5ff3911a37f892d6e836fb737c0c2755@
import java.util.Comparator;

public class Card{

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(this.compareFace(that) == 1)
        {
            return 1;
        }
        else if(this.compareFace(that) == 0)
        {
            if(Card.SUIT_ORDER.compare(this, that) == 1)
            {
                return 1;
            }
            else if(Card.SUIT_ORDER.compare(this, that) == 0)
            {
                return 0;
            }
            else{
                return -1;
            }
        }
        else{
            return -1;
        }
        
    }  
     public int compareFace(Card c)
        {
            int fa = 0,fac = 0;
              switch(c.face)
            {
                case ""A"":
                    fa = 1;
                    break;
                case ""2"":
                    fa = 2;
                    break;
                case ""3"":
                    fa = 3;
                    break;
                case ""4"":
                    fa = 4;
                    break;
                 case ""5"":
                    fa = 5;
                    break;
                case ""6"":
                    fa = 6;
                    break;
                case ""7"":
                    fa = 7;
                    break;
                case ""8"":
                    fa = 8;
                    break;
                 case ""9"":
                    fa = 9;
                    break;
                case ""10"":
                    fa = 10;
                    break;
                case ""J"":
                    fa = 11;
                    break;
                case ""Q"":
                    fa = 12;
                    break;
                case ""K"":
                    fa = 13;
                    break;                   
            }
             switch(this.face)
            {
                case ""A"":
                    fac = 1;
                    break;
                case ""2"":
                    fac = 2;
                    break;
                case ""3"":
                    fac = 3;
                    break;
                case ""4"":
                    fac = 4;
                    break;
                 case ""5"":
                    fac = 5;
                    break;
                case ""6"":
                    fac = 6;
                    break;
                case ""7"":
                    fac = 7;
                    break;
                case ""8"":
                    fac = 8;
                    break;
                 case ""9"":
                    fac = 9;
                    break;
                case ""10"":
                    fac = 10;
                    break;
                case ""J"":
                    fac = 11;
                    break;
                case ""Q"":
                    fac = 12;
                    break;
                case ""K"":
                    fac = 13;
                    break;                   
            }    
        if(fac > fa)
        {
            return 1;
        }
        else if(fac == fa)
        {
            return 0;
        }
        else
        {
            return -1;
        }
    }
    // TODO
    private static class SuitOrder implements Comparator<Card> {
        //if suit of c1 > c2 return 1 equal return 0 else return -1
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int Suit1 = 0;int Suit2 = 0;int outcome = 0;
            switch(c1.suit)
            {
                case ""Spades"":
                    Suit1 = 4;
                    break;
                case ""Hearts"":
                    Suit1 = 3;
                    break;
                case ""Diamonds"":
                    Suit1 = 2;
                    break;
                case ""Clubs"":
                    Suit1 = 1;
                    break;
            }
            switch(c2.suit)
            {
                case ""Spades"":
                    Suit2 = 4;
                    break;
                case ""Hearts"":
                    Suit2 = 3;
                    break;
                case ""Diamonds"":
                    Suit2 = 2;
                    break;
                case ""Clubs"":
                    Suit2 = 1;
                    break;
            }
            if(Suit1 == Suit2)
            {
                outcome = 0;
            }
            else if(Suit1 > Suit2)
            {
                outcome = 1;
            }
            else{
                outcome = -1;
            }
            return outcome;
        }
        
         public boolean equals(Card c)
         {            
           return this.equals(c);
         }
    }   
}

@5ff3911a37f892d6e836fb737c0c2755@"
"r04546032","0","0","0","@973b363322194279a4a633117fd30f48@
import java.util.Comparator;

public class Card{

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        //if suit of c1 > c2 return 1 equal return 0 else return -1
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int Suit1 = 0;int Suit2 = 0;int outcome = 0;
            switch(c1.suit)
            {
                case ""Spades"":
                    Suit1 = 4;
                    break;
                case ""Hearts"":
                    Suit1 = 3;
                    break;
                case ""Diamonds"":
                    Suit1 = 2;
                    break;
                case ""Clubs"":
                    Suit1 = 1;
                    break;
            }
            switch(c2.suit)
            {
                case ""Spades"":
                    Suit2 = 4;
                    break;
                case ""Hearts"":
                    Suit2 = 3;
                    break;
                case ""Diamonds"":
                    Suit2 = 2;
                    break;
                case ""Clubs"":
                    Suit2 = 1;
                    break;
            }
            if(Suit1 == Suit2)
            {
                outcome = 0;
            }
            else if(Suit1 > Suit2)
            {
                outcome = 1;
            }
            else{
                outcome = -1;
            }
                        
            return outcome;
        }
        
        public int compareFace(Card c1, Card c2)
        {
            int fa = 0,fac = 0;
              switch(c1.face)
            {
                case ""A"":
                    fa = 1;
                    break;
                case ""2"":
                    fa = 2;
                    break;
                case ""3"":
                    fa = 3;
                    break;
                case ""4"":
                    fa = 4;
                    break;
                 case ""5"":
                    fa = 5;
                    break;
                case ""6"":
                    fa = 6;
                    break;
                case ""7"":
                    fa = 7;
                    break;
                case ""8"":
                    fa = 8;
                    break;
                 case ""9"":
                    fa = 9;
                    break;
                case ""10"":
                    fa = 10;
                    break;
                case ""J"":
                    fa = 11;
                    break;
                case ""Q"":
                    fa = 12;
                    break;
                case ""K"":
                    fa = 13;
                    break;                   
            }
             switch(c2.face)
            {
                case ""A"":
                    fac = 1;
                    break;
                case ""2"":
                    fac = 2;
                    break;
                case ""3"":
                    fac = 3;
                    break;
                case ""4"":
                    fac = 4;
                    break;
                 case ""5"":
                    fac = 5;
                    break;
                case ""6"":
                    fac = 6;
                    break;
                case ""7"":
                    fac = 7;
                    break;
                case ""8"":
                    fac = 8;
                    break;
                 case ""9"":
                    fac = 9;
                    break;
                case ""10"":
                    fac = 10;
                    break;
                case ""J"":
                    fac = 11;
                    break;
                case ""Q"":
                    fac = 12;
                    break;
                case ""K"":
                    fac = 13;
                    break;                   
            }    
        if(fa > fac)
        {
            return 1;
        }
        else if(fa == fac)
        {
            return 0;
        }
        else
        {
            return -1;
        }
        }
        
         public boolean equals(Card c1,Card c2)
         {            
           return true;
         }
    }   
}


@973b363322194279a4a633117fd30f48@"
"r04546032","0","0","0","@99bf3963141011fd3cb6744dcee1ab57@
import java.util.Comparator;

public class Card{

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(this.compareFace(that) == 1)
        {
            return 1;
        }
        else if(this.compareFace(that) == 0)
        {
            if(Card.SUIT_ORDER.compare(this, that) == 1)
            {
                return 1;
            }
            else if(Card.SUIT_ORDER.compare(this, that) == 0)
            {
                return 0;
            }
            else{
                return -1;
            }
        }
        else{
            return -1;
        }
        
    }  
     public int compareFace(Card c)
        {
            int fa = 0,fac = 0;
              switch(c.face)
            {
                case ""A"":
                    fa = 1;
                    break;
                case ""2"":
                    fa = 2;
                    break;
                case ""3"":
                    fa = 3;
                    break;
                case ""4"":
                    fa = 4;
                    break;
                 case ""5"":
                    fa = 5;
                    break;
                case ""6"":
                    fa = 6;
                    break;
                case ""7"":
                    fa = 7;
                    break;
                case ""8"":
                    fa = 8;
                    break;
                 case ""9"":
                    fa = 9;
                    break;
                case ""10"":
                    fa = 10;
                    break;
                case ""J"":
                    fa = 11;
                    break;
                case ""Q"":
                    fa = 12;
                    break;
                case ""K"":
                    fa = 13;
                    break;                   
            }
             switch(this.face)
            {
                case ""A"":
                    fac = 1;
                    break;
                case ""2"":
                    fac = 2;
                    break;
                case ""3"":
                    fac = 3;
                    break;
                case ""4"":
                    fac = 4;
                    break;
                 case ""5"":
                    fac = 5;
                    break;
                case ""6"":
                    fac = 6;
                    break;
                case ""7"":
                    fac = 7;
                    break;
                case ""8"":
                    fac = 8;
                    break;
                 case ""9"":
                    fac = 9;
                    break;
                case ""10"":
                    fac = 10;
                    break;
                case ""J"":
                    fac = 11;
                    break;
                case ""Q"":
                    fac = 12;
                    break;
                case ""K"":
                    fac = 13;
                    break;                   
            }    
        if(fac > fa)
        {
            return 1;
        }
        else if(fac == fa)
        {
            return 0;
        }
        else
        {
            return -1;
        }
    }
    // TODO
    private static class SuitOrder implements Comparator<Card> {
        //if suit of c1 > c2 return 1 equal return 0 else return -1
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int Suit1 = 0;int Suit2 = 0;int outcome = 0;
            switch(c1.suit)
            {
                case ""Spades"":
                    Suit1 = 4;
                    break;
                case ""Hearts"":
                    Suit1 = 3;
                    break;
                case ""Diamonds"":
                    Suit1 = 2;
                    break;
                case ""Clubs"":
                    Suit1 = 1;
                    break;
            }
            switch(c2.suit)
            {
                case ""Spades"":
                    Suit2 = 4;
                    break;
                case ""Hearts"":
                    Suit2 = 3;
                    break;
                case ""Diamonds"":
                    Suit2 = 2;
                    break;
                case ""Clubs"":
                    Suit2 = 1;
                    break;
            }
            if(Suit1 == Suit2)
            {
                outcome = 0;
            }
            else if(Suit1 > Suit2)
            {
                outcome = 1;
            }
            else{
                outcome = -1;
            }
            return outcome;
        }
        
         public boolean equals(Card c)
         {            
           return this.equals(c);
         }
    }   
    public static void main(String[] args) {
            Card card = new Card(""A"",""Clubs"");
            Card cardb = new Card(""A"",""Spades"");
            System.out.println(card.compareTo(cardb));
            
    }
}


@99bf3963141011fd3cb6744dcee1ab57@"
"r04546032","0","0","0","@94efc9122da7514a846ad70e0f9d649f@
import java.util.Comparator;

public class Card{

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(this.compareFace(that) == 1)
        {
            return 1;
        }
        else if(this.compareFace(that) == 0)
        {
            if(Card.SUIT_ORDER.compare(this, that) == 1)
            {
                return 1;
            }
            else if(Card.SUIT_ORDER.compare(this, that) == 0)
            {
                return 0;
            }
            else{
                return -1;
            }
        }
        else{
            return -1;
        }
        
    }  
     public int compareFace(Card c)
        {
            int fa = 0,fac = 0;
              switch(c.face)
            {
                case ""A"":
                    fa = 1;
                    break;
                case ""2"":
                    fa = 2;
                    break;
                case ""3"":
                    fa = 3;
                    break;
                case ""4"":
                    fa = 4;
                    break;
                 case ""5"":
                    fa = 5;
                    break;
                case ""6"":
                    fa = 6;
                    break;
                case ""7"":
                    fa = 7;
                    break;
                case ""8"":
                    fa = 8;
                    break;
                 case ""9"":
                    fa = 9;
                    break;
                case ""10"":
                    fa = 10;
                    break;
                case ""J"":
                    fa = 11;
                    break;
                case ""Q"":
                    fa = 12;
                    break;
                case ""K"":
                    fa = 13;
                    break;                   
            }
             switch(this.face)
            {
                case ""A"":
                    fac = 1;
                    break;
                case ""2"":
                    fac = 2;
                    break;
                case ""3"":
                    fac = 3;
                    break;
                case ""4"":
                    fac = 4;
                    break;
                 case ""5"":
                    fac = 5;
                    break;
                case ""6"":
                    fac = 6;
                    break;
                case ""7"":
                    fac = 7;
                    break;
                case ""8"":
                    fac = 8;
                    break;
                 case ""9"":
                    fac = 9;
                    break;
                case ""10"":
                    fac = 10;
                    break;
                case ""J"":
                    fac = 11;
                    break;
                case ""Q"":
                    fac = 12;
                    break;
                case ""K"":
                    fac = 13;
                    break;                   
            }    
        if(fac > fa)
        {
            return 1;
        }
        else if(fac == fa)
        {
            return 0;
        }
        else
        {
            return -1;
        }
    }
    // TODO
    private static class SuitOrder implements Comparator<Card> {
        //if suit of c1 > c2 return 1 equal return 0 else return -1
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int Suit1 = 0;int Suit2 = 0;int outcome = 0;
            switch(c1.suit)
            {
                case ""Spades"":
                    Suit1 = 4;
                    break;
                case ""Hearts"":
                    Suit1 = 3;
                    break;
                case ""Diamonds"":
                    Suit1 = 2;
                    break;
                case ""Clubs"":
                    Suit1 = 1;
                    break;
            }
            switch(c2.suit)
            {
                case ""Spades"":
                    Suit2 = 4;
                    break;
                case ""Hearts"":
                    Suit2 = 3;
                    break;
                case ""Diamonds"":
                    Suit2 = 2;
                    break;
                case ""Clubs"":
                    Suit2 = 1;
                    break;
            }
            if(Suit1 == Suit2)
            {
                outcome = 0;
            }
            else if(Suit1 > Suit2)
            {
                outcome = 1;
            }
            else{
                outcome = -1;
            }
            return outcome;
        }
        
         public boolean equals(Card c)
         {            
           return this.equals(c);
         }
    }   
    public static void main(String[] args) {
            Card card = new Card(""A"",""Spades"");
            Card cardb = new Card(""K"",""Spades"");
            System.out.println(card.compareTo(cardb));
            
    }
}


@94efc9122da7514a846ad70e0f9d649f@"
"r04546032","0","0","0","@139ea9d907820c80b0944541addbbd5c@
import java.util.Comparator;

public class Card{

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(this.compareFace(that) == 1)
        {
            return 1;
        }
        else if(this.compareFace(that) == 0)
        {
            if(Card.SUIT_ORDER.compare(this, that) == 1)
            {
                return 1;
            }
            else if(Card.SUIT_ORDER.compare(this, that) == 0)
            {
                return 0;
            }
            else{
                return -1;
            }
        }
        else{
            return -1;
        }
        
    }  
     public int compareFace(Card c)
        {
            int fa = 0,fac = 0;
              switch(c.face)
            {
                case ""A"":
                    fa = 13;
                    break;
                case ""2"":
                    fa = 1;
                    break;
                case ""3"":
                    fa = 2;
                    break;
                case ""4"":
                    fa = 3;
                    break;
                 case ""5"":
                    fa = 4;
                    break;
                case ""6"":
                    fa = 5;
                    break;
                case ""7"":
                    fa = 6;
                    break;
                case ""8"":
                    fa = 7;
                    break;
                 case ""9"":
                    fa = 8;
                    break;
                case ""10"":
                    fa = 9;
                    break;
                case ""J"":
                    fa = 10;
                    break;
                case ""Q"":
                    fa = 11;
                    break;
                case ""K"":
                    fa = 12;
                    break;                   
            }
             switch(this.face)
            {
                case ""A"":
                    fac = 13;
                    break;
                case ""2"":
                    fac = 1;
                    break;
                case ""3"":
                    fac = 2;
                    break;
                case ""4"":
                    fac = 3;
                    break;
                 case ""5"":
                    fac = 4;
                    break;
                case ""6"":
                    fac = 5;
                    break;
                case ""7"":
                    fac = 6;
                    break;
                case ""8"":
                    fac = 7;
                    break;
                 case ""9"":
                    fac = 8;
                    break;
                case ""10"":
                    fac = 9;
                    break;
                case ""J"":
                    fac = 10;
                    break;
                case ""Q"":
                    fac = 11;
                    break;
                case ""K"":
                    fac = 12;
                    break;                   
            }    
        if(fac > fa)
        {
            return 1;
        }
        else if(fac == fa)
        {
            return 0;
        }
        else
        {
            return -1;
        }
    }
    // TODO
    private static class SuitOrder implements Comparator<Card> {
        //if suit of c1 > c2 return 1 equal return 0 else return -1
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int Suit1 = 0;int Suit2 = 0;
            switch(c1.suit)
            {
                case ""Spades"":
                    Suit1 = 4;
                    break;
                case ""Hearts"":
                    Suit1 = 3;
                    break;
                case ""Diamonds"":
                    Suit1 = 2;
                    break;
                case ""Clubs"":
                    Suit1 = 1;
                    break;
            }
            switch(c2.suit)
            {
                case ""Spades"":
                    Suit2 = 4;
                    break;
                case ""Hearts"":
                    Suit2 = 3;
                    break;
                case ""Diamonds"":
                    Suit2 = 2;
                    break;
                case ""Clubs"":
                    Suit2 = 1;
                    break;
            }
            if(Suit1 == Suit2)
            {
                return  0;
            }
            else if(Suit1 > Suit2)
            {
                return  1;
            }
            else{
                return -1;
            }
        
        }
        
         public boolean equals(Card c)
         {            
           return this.equals(c);
         }
    }   
    public static void main(String[] args) {
            Card card = new Card(""A"",""Spades"");
            Card cardb = new Card(""A"",""Clubs"");
            System.out.println(card.compareTo(cardb));
            
    }
}

@139ea9d907820c80b0944541addbbd5c@"
"r04945025","5","0.13","111664","@5a87f6bd61ed7f65ef35750aba66596a@import java.util.HashMap;
import java.util.Comparator;

public class Card implements Comparable<Card> {
	private String  face;
	private String  suit;
    private int suit2Int;
    
	public static final Comparator<Card> SUIT_ORDER = new SuitOrder();
	
	public Card(String face, String suit){
            this.face = face;
            this.suit = suit;
            switch (suit){
                case ""Clubs"":
                    this.suit2Int = 0;
                    break;
                case ""Diamonds"":
                    this.suit2Int = 1;
                    break;
                case ""Hearts"":
                    this.suit2Int = 2;
                    break;
                case ""Spades"":
                    this.suit2Int = 3;
                    break;
                default:
                    throw new IllegalArgumentException();
            }
        }
    
    public String getFace(){
        return this.face;
    }
        
    public String getSuit(){
        return this.suit;
    }
    
    public int getSuitInt(){
        return this.suit2Int;
    }
    
    private int face2Int(String face){
        switch(face){
            case ""J"":
                return 11;
            case ""Q"":
                return 12;
            case ""K"":
                return 13;
            case ""A"":
                return 14;
            default:
                return Integer.parseInt(face);
        }
    }
    
    public int compareTo(Card that) {
        String faceA = this.getFace();
        String faceB = that.getFace();
        int a = face2Int(faceA);
        int b = face2Int(faceB);
        if(a > b){
            return +1;
        }
        else if(a == b){
            if(SUIT_ORDER.compare(this, that) == 1){
                return +1;
            }
            else if(SUIT_ORDER.compare(this, that) == 0){
                return 0;
            }
        }
        return -1;
    }
        
    private static class SuitOrder implements Comparator<Card> {
        	
        public int compare(Card c1, Card c2) {
            int a = c1.getSuitInt();
            int b = c2.getSuitInt();
            if(a > b){
                return +1;
            }
            else if(a == b){
                return 0;
            }
            else{
                return -1;
            }
        }
    }
}


@5a87f6bd61ed7f65ef35750aba66596a@"
"r04945025","5","0.134","108608","@5a87f6bd61ed7f65ef35750aba66596a@import java.util.HashMap;
import java.util.Comparator;

public class Card implements Comparable<Card> {
	private String  face;
	private String  suit;
    private int suit2Int;
    
	public static final Comparator<Card> SUIT_ORDER = new SuitOrder();
	
	public Card(String face, String suit){
            this.face = face;
            this.suit = suit;
            switch (suit){
                case ""Clubs"":
                    this.suit2Int = 0;
                    break;
                case ""Diamonds"":
                    this.suit2Int = 1;
                    break;
                case ""Hearts"":
                    this.suit2Int = 2;
                    break;
                case ""Spades"":
                    this.suit2Int = 3;
                    break;
                default:
                    throw new IllegalArgumentException();
            }
        }
    
    public String getFace(){
        return this.face;
    }
        
    public String getSuit(){
        return this.suit;
    }
    
    public int getSuitInt(){
        return this.suit2Int;
    }
    
    private int face2Int(String face){
        switch(face){
            case ""J"":
                return 11;
            case ""Q"":
                return 12;
            case ""K"":
                return 13;
            case ""A"":
                return 14;
            default:
                return Integer.parseInt(face);
        }
    }
    
    public int compareTo(Card that) {
        String faceA = this.getFace();
        String faceB = that.getFace();
        int a = face2Int(faceA);
        int b = face2Int(faceB);
        if(a > b){
            return +1;
        }
        else if(a == b){
            if(SUIT_ORDER.compare(this, that) == 1){
                return +1;
            }
            else if(SUIT_ORDER.compare(this, that) == 0){
                return 0;
            }
        }
        return -1;
    }
        
    private static class SuitOrder implements Comparator<Card> {
        	
        public int compare(Card c1, Card c2) {
            int a = c1.getSuitInt();
            int b = c2.getSuitInt();
            if(a > b){
                return +1;
            }
            else if(a == b){
                return 0;
            }
            else{
                return -1;
            }
        }
    }
}


@5a87f6bd61ed7f65ef35750aba66596a@"
"r04546032","5","0.128","111728","@3635fbb7ad7a0377a66ad316691212ad@
import java.util.Comparator;

public class Card implements Comparable<Card>{

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(this.compareFace(that) == 1)
        {
            return 1;
        }
        else if(this.compareFace(that) == 0)
        {
            if(Card.SUIT_ORDER.compare(this, that) == 1)
            {
                return 1;
            }
            else if(Card.SUIT_ORDER.compare(this, that) == 0)
            {
                return 0;
            }
            else{
                return -1;
            }
        }
        else{
            return -1;
        }
        
    }  
     public int compareFace(Card c)
        {
            int fa = 0,fac = 0;
              switch(c.face)
            {
                case ""A"":
                    fa = 13;
                    break;
                case ""2"":
                    fa = 1;
                    break;
                case ""3"":
                    fa = 2;
                    break;
                case ""4"":
                    fa = 3;
                    break;
                 case ""5"":
                    fa = 4;
                    break;
                case ""6"":
                    fa = 5;
                    break;
                case ""7"":
                    fa = 6;
                    break;
                case ""8"":
                    fa = 7;
                    break;
                 case ""9"":
                    fa = 8;
                    break;
                case ""10"":
                    fa = 9;
                    break;
                case ""J"":
                    fa = 10;
                    break;
                case ""Q"":
                    fa = 11;
                    break;
                case ""K"":
                    fa = 12;
                    break;                   
            }
             switch(this.face)
            {
                case ""A"":
                    fac = 13;
                    break;
                case ""2"":
                    fac = 1;
                    break;
                case ""3"":
                    fac = 2;
                    break;
                case ""4"":
                    fac = 3;
                    break;
                 case ""5"":
                    fac = 4;
                    break;
                case ""6"":
                    fac = 5;
                    break;
                case ""7"":
                    fac = 6;
                    break;
                case ""8"":
                    fac = 7;
                    break;
                 case ""9"":
                    fac = 8;
                    break;
                case ""10"":
                    fac = 9;
                    break;
                case ""J"":
                    fac = 10;
                    break;
                case ""Q"":
                    fac = 11;
                    break;
                case ""K"":
                    fac = 12;
                    break;                   
            }    
        if(fac > fa)
        {
            return 1;
        }
        else if(fac == fa)
        {
            return 0;
        }
        else
        {
            return -1;
        }
    }
    // TODO
    private static class SuitOrder implements Comparator<Card> {
        //if suit of c1 > c2 return 1 equal return 0 else return -1
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int Suit1 = 0;int Suit2 = 0;
            switch(c1.suit)
            {
                case ""Spades"":
                    Suit1 = 4;
                    break;
                case ""Hearts"":
                    Suit1 = 3;
                    break;
                case ""Diamonds"":
                    Suit1 = 2;
                    break;
                case ""Clubs"":
                    Suit1 = 1;
                    break;
            }
            switch(c2.suit)
            {
                case ""Spades"":
                    Suit2 = 4;
                    break;
                case ""Hearts"":
                    Suit2 = 3;
                    break;
                case ""Diamonds"":
                    Suit2 = 2;
                    break;
                case ""Clubs"":
                    Suit2 = 1;
                    break;
            }
            if(Suit1 == Suit2)
            {
                return  0;
            }
            else if(Suit1 > Suit2)
            {
                return  1;
            }
            else{
                return -1;
            }
        
        }
        
         public boolean equals(Card c)
         {            
           return this.equals(c);
         }
    }   
    public static void main(String[] args) {
            Card card = new Card(""A"",""Spades"");
            Card cardb = new Card(""A"",""Spades"");
            System.out.println(card.compareTo(cardb));
            
    }
}


@3635fbb7ad7a0377a66ad316691212ad@"
"r04447001","0","0.67","108256","@51d0bda7dceef72b1621b83feec7361a@import java.util.Comparator;
public class Card implements Comparable<Card>{

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
        
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        int facevalue1;
        int facevalue2;
        int suitvalue1;
        int suitvalue2;
        if(this.face.equals(""A"")) facevalue1 = 14;
        else if(this.face.equals(""K"")) facevalue1 = 13;
        else if(this.face.equals(""Q"")) facevalue1 = 12;
        else if(this.face.equalsIgnoreCase(""J"")) facevalue1 = 11;
        else facevalue1 = Integer.parseInt(this.face);
        
        if(that.face.equals(""A"")) facevalue2 = 14;
        else if(that.face.equals(""K"")) facevalue2 = 13;
        else if(that.face.equals(""Q"")) facevalue2 = 12;
        else if(that.face.equalsIgnoreCase(""J"")) facevalue2 = 11;       
        else facevalue2 = Integer.parseInt(that.face);
        
        if(this.suit.equalsIgnoreCase(""Spade"")) suitvalue1 = 4;
        else if(this.suit.equalsIgnoreCase(""Hearts"")) suitvalue1 = 3;
        else if(this.suit.equalsIgnoreCase(""Diamonds"")) suitvalue1 = 2;
        else suitvalue1 = 1;
        
        if(that.suit.equalsIgnoreCase(""Spade"")) suitvalue2 = 4;
        else if(that.suit.equalsIgnoreCase(""Hearts"")) suitvalue2 = 3;
        else if(that.suit.equalsIgnoreCase(""Diamonds"")) suitvalue2 = 2;
        else suitvalue2 = 1;        

        if(facevalue1 > facevalue2) return 1;
        if(facevalue1 < facevalue2) return -1;
        if(facevalue1 == facevalue2){
            if(suitvalue1 > suitvalue2) return 1;
            if(suitvalue1 < suitvalue2) return -1;
        }
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            int suitvalue1;
            int suitvalue2;   
        if(c1.suit.equalsIgnoreCase(""Spade"")) suitvalue1 = 4;
        else if(c1.suit.equalsIgnoreCase(""Hearts"")) suitvalue1 = 3;
        else if(c1.suit.equalsIgnoreCase(""Diamonds"")) suitvalue1 = 2;
        else suitvalue1 = 1;
        
        if(c2.suit.equalsIgnoreCase(""Spade"")) suitvalue2 = 4;
        else if(c2.suit.equalsIgnoreCase(""Hearts"")) suitvalue2 = 3;
        else if(c2.suit.equalsIgnoreCase(""Diamonds"")) suitvalue2 = 2;
        else suitvalue2 = 1;
            // complete this function so the Card can be sorted according to the suit
            return suitvalue1 - suitvalue2;
        }
    }   
}

@51d0bda7dceef72b1621b83feec7361a@"
"r04447001","0","0.29","104976","@cb7a679f016e3d809e27c9f91634f523@public class Card implements Comparable<Card>{

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
        
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        int facevalue1;
        int facevalue2;
        int suitvalue1;
        int suitvalue2;
        if(this.face.equalsIgnoreCase(""A"")) facevalue1 = 14;
        else if(this.face.equalsIgnoreCase(""K"")) facevalue1 = 13;
        else if(this.face.equalsIgnoreCase(""Q"")) facevalue1 = 12;
        else if(this.face.equalsIgnoreCase(""J"")) facevalue1 = 11;
        else facevalue1 = Integer.parseInt(this.face);
        
        if(that.face.equalsIgnoreCase(""A"")) facevalue2 = 14;
        else if(that.face.equalsIgnoreCase(""K"")) facevalue2 = 13;
        else if(that.face.equalsIgnoreCase(""Q"")) facevalue2 = 12;
        else if(that.face.equalsIgnoreCase(""J"")) facevalue2 = 11;       
        else facevalue2 = Integer.parseInt(that.face);
        
        if(this.suit.equalsIgnoreCase(""Spade"")) suitvalue1 = 4;
        else if(this.suit.equalsIgnoreCase(""Hearts"")) suitvalue1 = 3;
        else if(this.suit.equalsIgnoreCase(""Diamonds"")) suitvalue1 = 2;
        else suitvalue1 = 1;
        
        if(that.suit.equalsIgnoreCase(""Spade"")) suitvalue2 = 4;
        else if(that.suit.equalsIgnoreCase(""Hearts"")) suitvalue2 = 3;
        else if(that.suit.equalsIgnoreCase(""Diamonds"")) suitvalue2 = 2;
        else suitvalue2 = 1;        

        if(facevalue1 > facevalue2) return 1;
        if(facevalue1 < facevalue2) return -1;
        if(facevalue1 == facevalue2){
            if(suitvalue1 > suitvalue2) return 1;
            if(suitvalue1 < suitvalue2) return -1;
        }
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            int suitvalue1;
            int suitvalue2;   
        if(c1.suit.equalsIgnoreCase(""Spade"")) suitvalue1 = 4;
        else if(c1.suit.equalsIgnoreCase(""Hearts"")) suitvalue1 = 3;
        else if(c1.suit.equalsIgnoreCase(""Diamonds"")) suitvalue1 = 2;
        else suitvalue1 = 1;
        
        if(c2.suit.equalsIgnoreCase(""Spade"")) suitvalue2 = 4;
        else if(c2.suit.equalsIgnoreCase(""Hearts"")) suitvalue2 = 3;
        else if(c2.suit.equalsIgnoreCase(""Diamonds"")) suitvalue2 = 2;
        else suitvalue2 = 1;
            // complete this function so the Card can be sorted according to the suit
            return suitvalue1 - suitvalue2;
        }
    }   
}

@cb7a679f016e3d809e27c9f91634f523@"
"r04447001","0","0.63","111328","@6ed880e5bec61cad760f5480d359c050@import java.util.Comparator;
public class Card implements Comparable<Card>{

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
        
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        int facevalue1;
        int facevalue2;
        int suitvalue1;
        int suitvalue2;
        if(this.face.equalsIgnoreCase(""A"")) facevalue1 = 14;
        else if(this.face.equalsIgnoreCase(""K"")) facevalue1 = 13;
        else if(this.face.equalsIgnoreCase(""Q"")) facevalue1 = 12;
        else if(this.face.equalsIgnoreCase(""J"")) facevalue1 = 11;
        else facevalue1 = Integer.parseInt(this.face);
        
        if(that.face.equalsIgnoreCase(""A"")) facevalue2 = 14;
        else if(that.face.equalsIgnoreCase(""K"")) facevalue2 = 13;
        else if(that.face.equalsIgnoreCase(""Q"")) facevalue2 = 12;
        else if(that.face.equalsIgnoreCase(""J"")) facevalue2 = 11;       
        else facevalue2 = Integer.parseInt(that.face);
        
        if(this.suit.equalsIgnoreCase(""Spade"")) suitvalue1 = 4;
        else if(this.suit.equalsIgnoreCase(""Hearts"")) suitvalue1 = 3;
        else if(this.suit.equalsIgnoreCase(""Diamonds"")) suitvalue1 = 2;
        else suitvalue1 = 1;
        
        if(that.suit.equalsIgnoreCase(""Spade"")) suitvalue2 = 4;
        else if(that.suit.equalsIgnoreCase(""Hearts"")) suitvalue2 = 3;
        else if(that.suit.equalsIgnoreCase(""Diamonds"")) suitvalue2 = 2;
        else suitvalue2 = 1;        

        if(facevalue1 > facevalue2) return 1;
        if(facevalue1 < facevalue2) return -1;
        if(facevalue1 == facevalue2){
            if(suitvalue1 > suitvalue2) return 1;
            if(suitvalue1 < suitvalue2) return -1;
        }
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            int suitvalue1;
            int suitvalue2;   
        if(c1.suit.equalsIgnoreCase(""Spade"")) suitvalue1 = 4;
        else if(c1.suit.equalsIgnoreCase(""Hearts"")) suitvalue1 = 3;
        else if(c1.suit.equalsIgnoreCase(""Diamonds"")) suitvalue1 = 2;
        else suitvalue1 = 1;
        
        if(c2.suit.equalsIgnoreCase(""Spade"")) suitvalue2 = 4;
        else if(c2.suit.equalsIgnoreCase(""Hearts"")) suitvalue2 = 3;
        else if(c2.suit.equalsIgnoreCase(""Diamonds"")) suitvalue2 = 2;
        else suitvalue2 = 1;
            // complete this function so the Card can be sorted according to the suit
            return suitvalue1 - suitvalue2;
        }
    }   
}

@6ed880e5bec61cad760f5480d359c050@"
"r04447001","0","0.64","110816","@5dfeb670817508c490f802142a1ad7fa@import java.util.Comparator;
public class Card implements Comparable<Card>{

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
        
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        int facevalue1;
        int facevalue2;
        int suitvalue1;
        int suitvalue2;
        if(this.face.equalsIgnoreCase(""A"")) facevalue1 = 14;
        else if(this.face.equalsIgnoreCase(""K"")) facevalue1 = 13;
        else if(this.face.equalsIgnoreCase(""Q"")) facevalue1 = 12;
        else if(this.face.equalsIgnoreCase(""J"")) facevalue1 = 11;
        else facevalue1 = Integer.parseInt(this.face);
        
        if(that.face.equalsIgnoreCase(""A"")) facevalue2 = 14;
        else if(that.face.equalsIgnoreCase(""K"")) facevalue2 = 13;
        else if(that.face.equalsIgnoreCase(""Q"")) facevalue2 = 12;
        else if(that.face.equalsIgnoreCase(""J"")) facevalue2 = 11;       
        else facevalue2 = Integer.parseInt(that.face);
        
        if(this.suit.equalsIgnoreCase(""Spade"")) suitvalue1 = 4;
        else if(this.suit.equalsIgnoreCase(""Hearts"")) suitvalue1 = 3;
        else if(this.suit.equalsIgnoreCase(""Diamonds"")) suitvalue1 = 2;
        else suitvalue1 = 1;
        
        if(that.suit.equalsIgnoreCase(""Spade"")) suitvalue2 = 4;
        else if(that.suit.equalsIgnoreCase(""Hearts"")) suitvalue2 = 3;
        else if(that.suit.equalsIgnoreCase(""Diamonds"")) suitvalue2 = 2;
        else suitvalue2 = 1;        

        if(facevalue1 > facevalue2) return 1;
        if(facevalue1 < facevalue2) return -1;
        if(facevalue1 == facevalue2){
            if(suitvalue1 > suitvalue2) return 1;
            if(suitvalue1 < suitvalue2) return -1;
        }
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
        int suitvalue1;
        int suitvalue2;   
        if(c1.suit.equalsIgnoreCase(""Spade"")) suitvalue1 = 4;
        else if(c1.suit.equalsIgnoreCase(""Hearts"")) suitvalue1 = 3;
        else if(c1.suit.equalsIgnoreCase(""Diamonds"")) suitvalue1 = 2;
        else suitvalue1 = 1;
        
        if(c2.suit.equalsIgnoreCase(""Spade"")) suitvalue2 = 4;
        else if(c2.suit.equalsIgnoreCase(""Hearts"")) suitvalue2 = 3;
        else if(c2.suit.equalsIgnoreCase(""Diamonds"")) suitvalue2 = 2;
        else suitvalue2 = 1;
            // complete this function so the Card can be sorted according to the suit
        if(suitvalue1 > suitvalue2) return 1;
        else if(suitvalue1 < suitvalue2) return -1;
        else return 0;
        }
    }
    
}

@5dfeb670817508c490f802142a1ad7fa@"
"r04447001","0","0.64","110976","@d69f838bdbec37de683570b52173a42a@import java.util.Comparator;
public class Card implements Comparable<Card>{

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
        
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        int facevalue1;
        int facevalue2;
        int suitvalue1 = 0;
        int suitvalue2 = 0;
        
        if(this.face.equalsIgnoreCase(""A"")) facevalue1 = 14;
        else if(this.face.equalsIgnoreCase(""K"")) facevalue1 = 13;
        else if(this.face.equalsIgnoreCase(""Q"")) facevalue1 = 12;
        else if(this.face.equalsIgnoreCase(""J"")) facevalue1 = 11;
        else facevalue1 = Integer.parseInt(this.face);
        
        
        if(that.face.equalsIgnoreCase(""A"")) facevalue2 = 14;
        else if(that.face.equalsIgnoreCase(""K"")) facevalue2 = 13;
        else if(that.face.equalsIgnoreCase(""Q"")) facevalue2 = 12;
        else if(that.face.equalsIgnoreCase(""J"")) facevalue2 = 11;       
        else facevalue2 = Integer.parseInt(that.face);
        
        if(this.suit.equalsIgnoreCase(""Spade"")) suitvalue1 = 4;
        else if(this.suit.equalsIgnoreCase(""Hearts"")) suitvalue1 = 3;
        else if(this.suit.equalsIgnoreCase(""Diamonds"")) suitvalue1 = 2;
        else if(this.suit.equalsIgnoreCase(""Clubs"")) suitvalue1 = 1;
        
        if(that.suit.equalsIgnoreCase(""Spade"")) suitvalue2 = 4;
        else if(that.suit.equalsIgnoreCase(""Hearts"")) suitvalue2 = 3;
        else if(that.suit.equalsIgnoreCase(""Diamonds"")) suitvalue2 = 2;
        else if(that.suit.equalsIgnoreCase(""Clubs"")) suitvalue2 = 1;       

        if(facevalue1 > facevalue2) return 1;
        if(facevalue1 < facevalue2) return -1;
        if(facevalue1 == facevalue2){
            if(suitvalue1 > suitvalue2) return 1;
            if(suitvalue1 < suitvalue2) return -1;
        }
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
        int suitvalue1 = 0;
        int suitvalue2 = 0;   
        if(c1.suit.equalsIgnoreCase(""Spade"")) suitvalue1 = 4;
        else if(c1.suit.equalsIgnoreCase(""Hearts"")) suitvalue1 = 3;
        else if(c1.suit.equalsIgnoreCase(""Diamonds"")) suitvalue1 = 2;
        else if(c1.suit.equalsIgnoreCase(""Clubs"")) suitvalue1 = 1;
        
        if(c2.suit.equalsIgnoreCase(""Spade"")) suitvalue2 = 4;
        else if(c2.suit.equalsIgnoreCase(""Hearts"")) suitvalue2 = 3;
        else if(c2.suit.equalsIgnoreCase(""Diamonds"")) suitvalue2 = 2;
        else if(c2.suit.equalsIgnoreCase(""Clubs"")) suitvalue2 = 1;
            // complete this function so the Card can be sorted according to the suit
        if(suitvalue1 > suitvalue2) return 1;
        else if(suitvalue1 < suitvalue2) return -1;
        else return 0;
        }
    }
    
}

@d69f838bdbec37de683570b52173a42a@"
"r04447001","5","0.128","109216","@0eeb40fc6e2051301c40c79a5555adda@import java.util.Comparator;
import java.util.Arrays;
public class Card implements Comparable<Card>{

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
        
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        int facevalue1;
        int facevalue2;
        int suitvalue1 = 0;
        int suitvalue2 = 0;
        
        if(this.face.equalsIgnoreCase(""A"")) facevalue1 = 14;
        else if(this.face.equalsIgnoreCase(""K"")) facevalue1 = 13;
        else if(this.face.equalsIgnoreCase(""Q"")) facevalue1 = 12;
        else if(this.face.equalsIgnoreCase(""J"")) facevalue1 = 11;
        else facevalue1 = Integer.parseInt(this.face);
        
        if(that.face.equalsIgnoreCase(""A"")) facevalue2 = 14;
        else if(that.face.equalsIgnoreCase(""K"")) facevalue2 = 13;
        else if(that.face.equalsIgnoreCase(""Q"")) facevalue2 = 12;
        else if(that.face.equalsIgnoreCase(""J"")) facevalue2 = 11;       
        else facevalue2 = Integer.parseInt(that.face);
        
        if(this.suit.equalsIgnoreCase(""Spades"")) suitvalue1 = 4;
        else if(this.suit.equalsIgnoreCase(""Hearts"")) suitvalue1 = 3;
        else if(this.suit.equalsIgnoreCase(""Diamonds"")) suitvalue1 = 2;
        else if(this.suit.equalsIgnoreCase(""Clubs"")) suitvalue1 = 1;
        
        if(that.suit.equalsIgnoreCase(""Spades"")) suitvalue2 = 4;
        else if(that.suit.equalsIgnoreCase(""Hearts"")) suitvalue2 = 3;
        else if(that.suit.equalsIgnoreCase(""Diamonds"")) suitvalue2 = 2;
        else if(that.suit.equalsIgnoreCase(""Clubs"")) suitvalue2 = 1;       

        if(facevalue1 > facevalue2) return 1;
        if(facevalue1 < facevalue2) return -1;
        if(facevalue1 == facevalue2){
            if(suitvalue1 > suitvalue2) return 1;
            if(suitvalue1 < suitvalue2) return -1;
        }
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
        int suitvalue1 = 0;
        int suitvalue2 = 0;   
        if(c1.suit.equalsIgnoreCase(""Spades"")) suitvalue1 = 4;
        else if(c1.suit.equalsIgnoreCase(""Hearts"")) suitvalue1 = 3;
        else if(c1.suit.equalsIgnoreCase(""Diamonds"")) suitvalue1 = 2;
        else if(c1.suit.equalsIgnoreCase(""Clubs"")) suitvalue1 = 1;
        
        if(c2.suit.equalsIgnoreCase(""Spades"")) suitvalue2 = 4;
        else if(c2.suit.equalsIgnoreCase(""Hearts"")) suitvalue2 = 3;
        else if(c2.suit.equalsIgnoreCase(""Diamonds"")) suitvalue2 = 2;
        else if(c2.suit.equalsIgnoreCase(""Clubs"")) suitvalue2 = 1;
            // complete this function so the Card can be sorted according to the suit
        if(suitvalue1 > suitvalue2) return 1;
        else if(suitvalue1 < suitvalue2) return -1;
        else return 0;
        }
    }

}

@0eeb40fc6e2051301c40c79a5555adda@"
"r04921051","0","0","0","@8545d422579acd7deaee5d0ad8432616@import java.util.Comparator;

public class Card{

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
            if(face2num(this)>face2num(that)) return 1;
            else if(face2num(this)<face2num(that)) return -1;
            else if(suit2num(this)>suit2num(that)) return 1;
            else if(suit2num(this)<suit2num(that)) return -1;
            else return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if(face2num(c1)>face2num(c2)) return 1;
            else if(face2num(c1)<face2num(c2)) return -1;
            else if(suit2num(c1)>suit2num(c2)) return 1;
            else if(suit2num(c1)<suit2num(c2)) return -1;
            else return 0;
        }
                       
    } 

    public static int face2num(Card c){
        switch(c.face){
            case(""A""):
                return 1;
            case(""J""):
                return 11;
            case(""Q""):
                return 12;
            case(""K""):
                return 13;
            default:
                return Integer.parseInt(c.face);
        }
    }
        
    public static int suit2num(Card c){
        switch(c.suit){
            case(""Spades""):
                return 4;
            case(""Hearts""):
                return 3;
            case(""Diamonds""):
                return 2;
            case(""Clubs""):
                return 1;
            default:
                return 0;
        }   
    }    
    
}


@8545d422579acd7deaee5d0ad8432616@"
"r04631034","0","0","0","@6a8cbfbfdb494cf69bab7914127f9550@
import java.util.Comparator;
import java.util.*;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
              HashMap<String,Integer> map =new HashMap<String,Integer>();
              for(int i =2;i<1;i++){
                        map.put(String.valueOf(i),i);
              }
              map.put(""A"",1);
              map.put(""J"",11);
              map.put(""Q"",12);
              map.put(""K"",13);
              map.put(""Clubs"",17);
              map.put(""Hearts"",16);
              map.put(""Diamonds"",15);
              map.put(""Spades"",14);
              
              if(map.get(this.suit)>map.get(that.suit)) return 1;
              if(map.get(this.suit)<map.get(that.suit)) return -1;
              if(map.get(this.face)>map.get(that.face)) return 1;
              if(map.get(this.face)<map.get(that.face)) return -1;
              else return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
                  HashMap<String, Integer> map = new HashMap<String, Integer>();
                  map.put(""Clubs"", 4);
                  map.put(""Hearts"", 3);
                  map.put(""Diamonds"", 2);
                  map.put(""Spades"", 1);

                  int suit_c1 = map.get(c1.suit);
                  int suit_c2 = map.get(c2.suit);                 
                  
                  if(suit_c1<suit_c2) return -1;
                  if(suit_c1>suit_c2)return +1;
                   return 0;
        }
    }   
}

@6a8cbfbfdb494cf69bab7914127f9550@"
"r04631034","0","0","0","@3cb5db4f638b7a14b313938712add652@
import java.util.Comparator;
import java.util.*;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
              HashMap<String,Integer> map =new HashMap<String,Integer>();
              for(int i =2;i<1;i++){
                        map.put(String.valueOf(i),i);
              }
              map.put(""A"",1);
              map.put(""J"",11);
              map.put(""Q"",12);
              map.put(""K"",13);
              map.put(""Spades"",17);
              map.put(""Hearts"",16);
              map.put(""Diamonds"",15);
              map.put(""Clubs"",14);
              
              if(map.get(this.suit)>map.get(that.suit)) return 1;
              if(map.get(this.suit)<map.get(that.suit)) return -1;
              if(map.get(this.face)>map.get(that.face)) return 1;
              if(map.get(this.face)<map.get(that.face)) return -1;
              else return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
                  HashMap<String, Integer> map = new HashMap<String, Integer>();
                  map.put(""Spades"", 4);
                  map.put(""Hearts"", 3);
                  map.put(""Diamonds"", 2);
                  map.put(""Clubs"", 1);

                  int suit_c1 = map.get(c1.suit);
                  int suit_c2 = map.get(c2.suit);                 
                  
                  if(suit_c1<suit_c2) return -1;
                  if(suit_c1>suit_c2)return +1;
                   return 0;
        }
    }   
}


@3cb5db4f638b7a14b313938712add652@"
"r04921051","0","0","0","@b2811cbfb227299365157604d6ac3974@public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
            if(face2num(this)>face2num(that)) return 1;
            else if(face2num(this)<face2num(that)) return -1;
            else if(suit2num(this)>suit2num(that)) return 1;
            else if(suit2num(this)<suit2num(that)) return -1;
            else return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if(face2num(c1)>face2num(c2)) return 1;
            else if(face2num(c1)<face2num(c2)) return -1;
            else if(suit2num(c1)>suit2num(c2)) return 1;
            else if(suit2num(c1)<suit2num(c2)) return -1;
            else return 0;
        }
                       
    } 

    public static int face2num(Card c){
        switch(c.face){
            case(""A""):
                return 1;
            case(""J""):
                return 11;
            case(""Q""):
                return 12;
            case(""K""):
                return 13;
            default:
                return Integer.parseInt(c.face);
        }
    }
        
    public static int suit2num(Card c){
        switch(c.suit){
            case(""Spades""):
                return 4;
            case(""Hearts""):
                return 3;
            case(""Diamonds""):
                return 2;
            case(""Clubs""):
                return 1;
            default:
                return 0;
        }   
    }  
}


@b2811cbfb227299365157604d6ac3974@"
"r04921051","0","0","0","@8a205499e2d552190dd08b46866e2dbf@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(face2num(this)>face2num(that)) return 1;
        else if(face2num(this)<face2num(that)) return -1;
        else if(suit2num(this)>suit2num(that)) return 1;
        else if(suit2num(this)<suit2num(that)) return -1;
        else return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
        else if(face2num(c1)<face2num(c2)) return -1;
        else if(suit2num(c1)>suit2num(c2)) return 1;
        else if(suit2num(c1)<suit2num(c2)) return -1;
        else return 0;
        }
    }
	
    public static int face2num(Card c){
        switch(c.face){
            case(""A""):
                return 1;
            case(""J""):
                return 11;
            case(""Q""):
                return 12;
            case(""K""):
                return 13;
            default:
                return Integer.parseInt(c.face);
        }
    }
        
    public static int suit2num(Card c){
        switch(c.suit){
            case(""Spades""):
                return 4;
            case(""Hearts""):
                return 3;
            case(""Diamonds""):
                return 2;
            case(""Clubs""):
                return 1;
            default:
                return 0;
        }   
    } 
	
}


@8a205499e2d552190dd08b46866e2dbf@"
"r04921051","0","0.66","111600","@c2a8fa1da29ae8c0279e443c5c2c421e@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(face2num(this)>face2num(that)) return 1;
        else if(face2num(this)<face2num(that)) return -1;
        else if(suit2num(this)>suit2num(that)) return 1;
        else if(suit2num(this)<suit2num(that)) return -1;
        else return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
        if(face2num(c1)>face2num(c2)) return 1;			
        else if(face2num(c1)<face2num(c2)) return -1;
        else if(suit2num(c1)>suit2num(c2)) return 1;
        else if(suit2num(c1)<suit2num(c2)) return -1;
        else return 0;
        }
    }
	
    public static int face2num(Card c){
        switch(c.face){
            case(""A""):
                return 1;
            case(""J""):
                return 11;
            case(""Q""):
                return 12;
            case(""K""):
                return 13;
            default:
                return Integer.parseInt(c.face);
        }
    }
        
    public static int suit2num(Card c){
        switch(c.suit){
            case(""Spades""):
                return 4;
            case(""Hearts""):
                return 3;
            case(""Diamonds""):
                return 2;
            case(""Clubs""):
                return 1;
            default:
                return 0;
        }   
    } 
	
}


@c2a8fa1da29ae8c0279e443c5c2c421e@"
"r04921051","0","0.66","111648","@4a24d9c728d2b54b720ae1e1a9ff2fc4@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(face2num(this)>face2num(that)) return -1;
        else if(face2num(this)<face2num(that)) return 1;
        else if(suit2num(this)>suit2num(that)) return -1;
        else if(suit2num(this)<suit2num(that)) return 1;
        else return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
        if(face2num(c1)>face2num(c2)) return -1;			
        else if(face2num(c1)<face2num(c2)) return 1;
        else if(suit2num(c1)>suit2num(c2)) return -1;
        else if(suit2num(c1)<suit2num(c2)) return 1;
        else return 0;
        }
    }
	
    public static int face2num(Card c){
        switch(c.face){
            case(""A""):
                return 1;
            case(""J""):
                return 11;
            case(""Q""):
                return 12;
            case(""K""):
                return 13;
            default:
                return Integer.parseInt(c.face);
        }
    }
        
    public static int suit2num(Card c){
        switch(c.suit){
            case(""Spades""):
                return 4;
            case(""Hearts""):
                return 3;
            case(""Diamonds""):
                return 2;
            case(""Clubs""):
                return 1;
            default:
                return 0;
        }   
    } 
	
}


@4a24d9c728d2b54b720ae1e1a9ff2fc4@"
"r04921051","0","0.64","111696","@c2a8fa1da29ae8c0279e443c5c2c421e@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(face2num(this)>face2num(that)) return 1;
        else if(face2num(this)<face2num(that)) return -1;
        else if(suit2num(this)>suit2num(that)) return 1;
        else if(suit2num(this)<suit2num(that)) return -1;
        else return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
        if(face2num(c1)>face2num(c2)) return 1;			
        else if(face2num(c1)<face2num(c2)) return -1;
        else if(suit2num(c1)>suit2num(c2)) return 1;
        else if(suit2num(c1)<suit2num(c2)) return -1;
        else return 0;
        }
    }
	
    public static int face2num(Card c){
        switch(c.face){
            case(""A""):
                return 1;
            case(""J""):
                return 11;
            case(""Q""):
                return 12;
            case(""K""):
                return 13;
            default:
                return Integer.parseInt(c.face);
        }
    }
        
    public static int suit2num(Card c){
        switch(c.suit){
            case(""Spades""):
                return 4;
            case(""Hearts""):
                return 3;
            case(""Diamonds""):
                return 2;
            case(""Clubs""):
                return 1;
            default:
                return 0;
        }   
    } 
	
}


@c2a8fa1da29ae8c0279e443c5c2c421e@"
"r04921051","0","0.65","111872","@91b5d853839e089c4bb0e048176e3447@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(face2num(this)>face2num(that)) return 1;
        else if(face2num(this)<face2num(that)) return -1;
        else if(suit2num(this)>suit2num(that)) return 1;
        else if(suit2num(this)<suit2num(that)) return -1;
        else return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
        if(suit2num(c1)>suit2num(c2)) return 1;
        else if(suit2num(c1)<suit2num(c2)) return -1;
        else return 0;
        }
    }
	
    public static int face2num(Card c){
        switch(c.face){
            case(""A""):
                return 1;
            case(""J""):
                return 11;
            case(""Q""):
                return 12;
            case(""K""):
                return 13;
            default:
                return Integer.parseInt(c.face);
        }
    }
        
    public static int suit2num(Card c){
        switch(c.suit){
            case(""Spades""):
                return 4;
            case(""Hearts""):
                return 3;
            case(""Diamonds""):
                return 2;
            case(""Clubs""):
                return 1;
            default:
                return 0;
        }   
    } 
	
}


@91b5d853839e089c4bb0e048176e3447@"
"r04921051","0","0.66","111200","@256f3bd1a8cd9b4bfed4518506246d29@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(face2num(this)>face2num(that)) return 1;
        else if(face2num(this)<face2num(that)) return -1;
        else if(suit2num(this)>suit2num(that)) return 1;
        else if(suit2num(this)<suit2num(that)) return -1;
        else return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
        // complete this function so the Card can be sorted according to the suit
        if(suit2num(c1)>suit2num(c2)) return 1;
        else if(suit2num(c1)<suit2num(c2)) return -1;
        else return 0;
        }
    }
	
    public static int face2num(Card c){
        switch(c.face){
            case(""A""):
                return 1;
            case(""J""):
                return 11;
            case(""Q""):
                return 12;
            case(""K""):
                return 13;
            default:
                return Integer.parseInt(c.face);
        }
    }
        
    public static int suit2num(Card c){
        switch(c.suit){
            case(""Spades""):
                return 4;
            case(""Hearts""):
                return 3;
            case(""Diamonds""):
                return 2;
            case(""Clubs""):
                return 1;
            default:
                return 0;
        }   
    } 
	
}


@256f3bd1a8cd9b4bfed4518506246d29@"
"r04921094","0","0","0","@8dcbc26ceb6f4dee74c04f44d1f45021@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return SUIT_ORDER.compare(this, that);
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int c1Face = Integer.parseInt(c1.getFace());
            int c2Face = Integer.parseInt(c2.getFace());
            int c1Suit = suitToInt(c1.getSuit());
            int c2Suit = suitToInt(c2.getSuit());

            if (c1Face < c2Face){
                return -1;
            }
            else if (c1Face > c2Face){
                return 1;
            }
            else{
                if (c1Suit < c2Suit){
                    return -1;
                }
                else if (c1Suit > c2Suit){
                    return 1;
                }
                else{
                    return 0;
                }
            }
        }

        private int suitToInt(String suit){
            switch(suit){
                case ""Spades"": return 3;
                case ""Hearts"": return 2;
                case ""Diamonds"": return 1;
                case ""Clubs"": return 0;
            }
            return 4;
        }
    }   
}

@8dcbc26ceb6f4dee74c04f44d1f45021@"
"r04921094","0","0.64","113616","@d3cb3667f2c9f4b1cd27252e09f1cb9d@import java.util.Comparator;
import java.util.Arrays;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return SUIT_ORDER.compare(this, that);
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int c1Face = faceToInt(c1.getFace());
            int c2Face = faceToInt(c2.getFace());
            int c1Suit = suitToInt(c1.getSuit());
            int c2Suit = suitToInt(c2.getSuit());

            if (c1Face < c2Face){
                return -1;
            }
            else if (c1Face > c2Face){
                return 1;
            }
            else{
                if (c1Suit < c2Suit){
                    return -1;
                }
                else if (c1Suit > c2Suit){
                    return 1;
                }
                else{
                    return 0;
                }
            }
        }

        private int faceToInt(String face){
            try{
                return Integer.parseInt(face);
            }
            catch(Exception e){
                switch(face){
                    case ""A"": return 14;
                    case ""J"": return 11;
                    case ""Q"": return 12;
                    case ""K"": return 13;
                }
            }

            return 0;
        }

        private int suitToInt(String suit){
            switch(suit){
                case ""Spades"": return 3;
                case ""Hearts"": return 2;
                case ""Diamonds"": return 1;
                case ""Clubs"": return 0;
            }
            return 4;
        }
    }   

    public static void main(String[] args) {
        Card[] cards = new Card[2];

        cards[0] = new Card(""A"", ""Spades"");
        cards[1] = new Card(""K"", ""Spades"");
        Arrays.sort(cards);
        System.out.println(cards[0].getFace() + cards[0].getSuit());
    }
}

@d3cb3667f2c9f4b1cd27252e09f1cb9d@"
"r04921094","0","0.47","105264","@d78ad90a69599995817b4bb5dc1e88f1@import java.util.Comparator;
import java.util.Arrays;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return SUIT_ORDER.compare(this, that);
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int c1Face = faceToInt(c1.getFace());
            int c2Face = faceToInt(c2.getFace());
            int c1Suit = suitToInt(c1.getSuit());
            int c2Suit = suitToInt(c2.getSuit());

            if (c1Face < c2Face){
                return -1;
            }
            else if (c1Face > c2Face){
                return 1;
            }
            else{
                if (c1Suit < c2Suit){
                    return -1;
                }
                else if (c1Suit > c2Suit){
                    return 1;
                }
                else{
                    return 0;
                }
            }
        }

        private int faceToInt(String face){
            try{
                return Integer.parseInt(face);
            }
            catch(Exception e){
                switch(face){
                    case ""A"": return 14;
                    case ""K"": return 13;
                    case ""Q"": return 12;
                    case ""J"": return 11;
                }
            }

            return 0;
        }

        private int suitToInt(String suit){
            switch(suit){
                case ""Spades"": return 3;
                case ""Hearts"": return 2;
                case ""Diamonds"": return 1;
                case ""Clubs"": return 0;
            }
            return 4;
        }
    }   

//     public static void main(String[] args) {
//         Card[] cards = new Card[2];

//         cards[0] = new Card(""10"", ""Spades"");
//         cards[1] = new Card(""K"", ""Spades"");
//         Arrays.sort(cards);
//         System.out.println(cards[0].getFace() + cards[0].getSuit());
//     }
// }

@d78ad90a69599995817b4bb5dc1e88f1@"
"r04921094","0","0.67","113632","@79968b1708eb70aa0ad37dc5964abb5b@import java.util.Comparator;
import java.util.Arrays;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return SUIT_ORDER.compare(this, that);
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int c1Face = faceToInt(c1.getFace());
            int c2Face = faceToInt(c2.getFace());
            int c1Suit = suitToInt(c1.getSuit());
            int c2Suit = suitToInt(c2.getSuit());

            if (c1Face < c2Face){
                return -1;
            }
            else if (c1Face > c2Face){
                return 1;
            }
            else{
                if (c1Suit < c2Suit){
                    return -1;
                }
                else if (c1Suit > c2Suit){
                    return 1;
                }
                else{
                    return 0;
                }
            }
        }

        private int faceToInt(String face){
            try{
                return Integer.parseInt(face);
            }
            catch(Exception e){
                switch(face){
                    case ""A"": return 14;
                    case ""K"": return 13;
                    case ""Q"": return 12;
                    case ""J"": return 11;
                }
            }

            return 0;
        }

        private int suitToInt(String suit){
            switch(suit){
                case ""Spades"": return 3;
                case ""Hearts"": return 2;
                case ""Diamonds"": return 1;
                case ""Clubs"": return 0;
            }
            return 4;
        }
    }   

//     public static void main(String[] args) {
//         Card[] cards = new Card[2];

//         cards[0] = new Card(""10"", ""Spades"");
//         cards[1] = new Card(""K"", ""Spades"");
//         Arrays.sort(cards);
//         System.out.println(cards[0].getFace() + cards[0].getSuit());
//     }
}

@79968b1708eb70aa0ad37dc5964abb5b@"
"r04921051","5","0.13","111200","@bb55ac04dcc179a385877fc229b487b5@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(face2num(this)>face2num(that)) return 1;
        else if(face2num(this)<face2num(that)) return -1;
        else if(suit2num(this)>suit2num(that)) return 1;
        else if(suit2num(this)<suit2num(that)) return -1;
        else return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
        // complete this function so the Card can be sorted according to the suit
        if(suit2num(c1)>suit2num(c2)) return 1;
        else if(suit2num(c1)<suit2num(c2)) return -1;
        else return 0;
        }
    }
	
    public static int face2num(Card c){
        switch(c.face){
            case(""A""):
                return 14;
            case(""J""):
                return 11;
            case(""Q""):
                return 12;
            case(""K""):
                return 13;
            default:
                return Integer.parseInt(c.face);
        }
    }
        
    public static int suit2num(Card c){
        switch(c.suit){
            case(""Spades""):
                return 4;
            case(""Hearts""):
                return 3;
            case(""Diamonds""):
                return 2;
            case(""Clubs""):
                return 1;
            default:
                return 0;
        }   
    } 
	
}


@bb55ac04dcc179a385877fc229b487b5@"
"r04921051","5","0.128","111680","@986675d866ece0cd0c51f371c69c5e35@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(face2num(this)>face2num(that)) return 1;
        else if(face2num(this)<face2num(that)) return -1;
        else if(suit2num(this)>suit2num(that)) return 1;
        else if(suit2num(this)<suit2num(that)) return -1;
        else return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
        // complete this function so the Card can be sorted according to the suit
        if(suit2num(c1)>suit2num(c2)) return 1;
        else if(suit2num(c1)<suit2num(c2)) return -1;
        else return 0;
        }
    }
	
    public static int face2num(Card c){
        switch(c.face){
            case(""A""):
                return 13;
            case(""J""):
                return 10;
            case(""Q""):
                return 11;
            case(""K""):
                return 12;
            default:
                return (Integer.parseInt(c.face)-1);
        }
    }
        
    public static int suit2num(Card c){
        switch(c.suit){
            case(""Spades""):
                return 4;
            case(""Hearts""):
                return 3;
            case(""Diamonds""):
                return 2;
            case(""Clubs""):
                return 1;
            default:
                return 0;
        }   
    } 
	
}


@986675d866ece0cd0c51f371c69c5e35@"
"r04921094","0","0.64","110048","@bc2d12345af284b8936f3b0aca5d1973@import java.util.Comparator;
import java.util.Arrays;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return SUIT_ORDER.compare(this, that);
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int c1Face = faceToInt(c1.getFace());
            int c2Face = faceToInt(c2.getFace());
            int c1Suit = suitToInt(c1.getSuit());
            int c2Suit = suitToInt(c2.getSuit());

            if (c1Suit < c2Suit){
                return -1;
            }
            else if (c1Suit > c2Suit){
                return 1;
            }
            else{
                if (c1Face < c2Face){
                    return -1;
                }
                else if (c1Face > c2Face){
                    return 1;
                }
                else{
                    return 0;
                }
            }
        }

        private int faceToInt(String face){
            try{
                return Integer.parseInt(face);
            }
            catch(Exception e){
                switch(face){
                    case ""A"": return 14;
                    case ""K"": return 13;
                    case ""Q"": return 12;
                    case ""J"": return 11;
                }
            }

            return 0;
        }

        private int suitToInt(String suit){
            switch(suit){
                case ""Spades"": return 3;
                case ""Hearts"": return 2;
                case ""Diamonds"": return 1;
                case ""Clubs"": return 0;
            }
            return 4;
        }
    }   

    // public static void main(String[] args) {
    //     Card[] cards = new Card[13];

    //     cards[0] = new Card(""2"", ""Diamonds"");
    //     cards[1] = new Card(""2"", ""Hearts"");
    //     cards[2] = new Card(""2"", ""Clubs"");
    //     cards[3] = new Card(""2"", ""Spades"");
    //     cards[4] = new Card(""9"", ""Hearts"");
    //     cards[5] = new Card(""10"", ""Hearts"");
    //     cards[6] = new Card(""A"", ""Hearts"");
    //     cards[7] = new Card(""J"", ""Hearts"");
    //     cards[8] = new Card(""7"", ""Hearts"");
    //     cards[9] = new Card(""8"", ""Hearts"");
    //     cards[10] = new Card(""5"", ""Hearts"");
    //     cards[11] = new Card(""K"", ""Hearts"");
    //     cards[12] = new Card(""6"", ""Hearts"");

    //     Arrays.sort(cards);
    //     for (int i = 0; i < cards.length; i++){
    //         System.out.println(cards[i].getSuit() + cards[i].getFace());
    //     }
    // }
}

@bc2d12345af284b8936f3b0aca5d1973@"
"r04921094","0","0.66","111536","@88502fb83cbfb72a9a25d1132999ef1d@import java.util.Comparator;
import java.util.Arrays;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return SUIT_ORDER.compare(this, that);
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int c1Face = faceToInt(c1.getFace());
            int c2Face = faceToInt(c2.getFace());
            int c1Suit = suitToInt(c1.getSuit());
            int c2Suit = suitToInt(c2.getSuit());

            if (c1Face < c2Face){
                return 1;
            }
            else if (c1Face > c2Face){
                return -1;
            }
            else{
                if (c1Suit < c2Suit){
                    return 1;
                }
                else if (c1Suit > c2Suit){
                    return -1;
                }
                else{
                    return 0;
                }
            }
        }

        private int faceToInt(String face){
            try{
                return Integer.parseInt(face);
            }
            catch(Exception e){
                switch(face){
                    case ""A"": return 14;
                    case ""K"": return 13;
                    case ""Q"": return 12;
                    case ""J"": return 11;
                }
            }

            return 0;
        }

        private int suitToInt(String suit){
            switch(suit){
                case ""Spades"": return 3;
                case ""Hearts"": return 2;
                case ""Diamonds"": return 1;
                case ""Clubs"": return 0;
            }
            return 4;
        }
    }   

    public static void main(String[] args) {
        Card[] cards = new Card[13];

        cards[0] = new Card(""2"", ""Diamonds"");
        cards[1] = new Card(""2"", ""Hearts"");
        cards[2] = new Card(""2"", ""Clubs"");
        cards[3] = new Card(""2"", ""Spades"");
        cards[4] = new Card(""9"", ""Hearts"");
        cards[5] = new Card(""10"", ""Hearts"");
        cards[6] = new Card(""A"", ""Hearts"");
        cards[7] = new Card(""J"", ""Hearts"");
        cards[8] = new Card(""7"", ""Hearts"");
        cards[9] = new Card(""8"", ""Hearts"");
        cards[10] = new Card(""5"", ""Hearts"");
        cards[11] = new Card(""K"", ""Hearts"");
        cards[12] = new Card(""6"", ""Hearts"");

        Arrays.sort(cards);
        for (int i = 0; i < cards.length; i++){
            System.out.println(cards[i].getSuit() + cards[i].getFace());
        }
    }
}

@88502fb83cbfb72a9a25d1132999ef1d@"
"r04921094","0","0.65","111600","@550b5741acbedd50d88962d3d08ccc8a@import java.util.Comparator;
import java.util.Arrays;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thisFace = faceToInt(this.face);
        int thatFace = faceToInt(that.face);

        if(thisFace < thatFace){
            return -1;
        }
        else if(thisFace > thatFace){
            return 1;
        }
        else{
            return SUIT_ORDER.compare(this, that);
        }
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int c1Suit = suitToInt(c1.getSuit());
            int c2Suit = suitToInt(c2.getSuit());

            if (c1Suit < c2Suit) {
                return 1;
            }
            else if (c1Suit > c2Suit){
                return -1;
            }
            else {
                return 0;
            }
        }
    }

    private static int faceToInt(String face){
        try{
            return Integer.parseInt(face);
        }
        catch(Exception e){
            switch(face){
                case ""A"": return 14;
                case ""K"": return 13;
                case ""Q"": return 12;
                case ""J"": return 11;
            }
        }

        return 0;
    }

    private static int suitToInt(String suit){
        switch(suit){
            case ""Spades"": return 3;
            case ""Hearts"": return 2;
            case ""Diamonds"": return 1;
            case ""Clubs"": return 0;
        }
        return 4;
    }   

    public static void main(String[] args) {
        Card[] cards = new Card[13];

        cards[0] = new Card(""2"", ""Diamonds"");
        cards[1] = new Card(""2"", ""Hearts"");
        cards[2] = new Card(""2"", ""Clubs"");
        cards[3] = new Card(""2"", ""Spades"");
        cards[4] = new Card(""9"", ""Hearts"");
        cards[5] = new Card(""10"", ""Hearts"");
        cards[6] = new Card(""A"", ""Hearts"");
        cards[7] = new Card(""J"", ""Hearts"");
        cards[8] = new Card(""7"", ""Hearts"");
        cards[9] = new Card(""8"", ""Hearts"");
        cards[10] = new Card(""5"", ""Hearts"");
        cards[11] = new Card(""K"", ""Hearts"");
        cards[12] = new Card(""6"", ""Hearts"");

        Arrays.sort(cards);
        for (int i = 0; i < cards.length; i++){
            System.out.println(cards[i].getSuit() + cards[i].getFace());
        }
    }
}

@550b5741acbedd50d88962d3d08ccc8a@"
"r04921094","0","0.66","111600","@25d65af3a406bce45100f5bb5cdf23e4@import java.util.Comparator;
import java.util.Arrays;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thisFace = faceToInt(this.face);
        int thatFace = faceToInt(that.face);

        if(thisFace < thatFace){
            return -1;
        }
        else if(thisFace > thatFace){
            return 1;
        }
        else{
            return SUIT_ORDER.compare(this, that);
        }
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int c1Suit = suitToInt(c1.getSuit());
            int c2Suit = suitToInt(c2.getSuit());

            if (c1Suit < c2Suit) {
                return 1;
            }
            else if (c1Suit > c2Suit){
                return -1;
            }
            else {
                return 0;
            }
        }
    }

    private static int faceToInt(String face){
        try{
            return Integer.parseInt(face);
        }
        catch(Exception e){
            switch(face){
                case ""A"": return 14;
                case ""K"": return 13;
                case ""Q"": return 12;
                case ""J"": return 11;
            }
        }

        return 0;
    }

    private static int suitToInt(String suit){
        switch(suit){
            case ""Spades"": return 3;
            case ""Hearts"": return 2;
            case ""Diamonds"": return 1;
            case ""Clubs"": return 0;
        }
        return 4;
    }   

    // public static void main(String[] args) {
    //     Card[] cards = new Card[13];

    //     cards[0] = new Card(""2"", ""Diamonds"");
    //     cards[1] = new Card(""2"", ""Hearts"");
    //     cards[2] = new Card(""2"", ""Clubs"");
    //     cards[3] = new Card(""2"", ""Spades"");
    //     cards[4] = new Card(""9"", ""Hearts"");
    //     cards[5] = new Card(""10"", ""Hearts"");
    //     cards[6] = new Card(""A"", ""Hearts"");
    //     cards[7] = new Card(""J"", ""Hearts"");
    //     cards[8] = new Card(""7"", ""Hearts"");
    //     cards[9] = new Card(""8"", ""Hearts"");
    //     cards[10] = new Card(""5"", ""Hearts"");
    //     cards[11] = new Card(""K"", ""Hearts"");
    //     cards[12] = new Card(""6"", ""Hearts"");

    //     Arrays.sort(cards);
    //     for (int i = 0; i < cards.length; i++){
    //         System.out.println(cards[i].getSuit() + cards[i].getFace());
    //     }
    // }
}

@25d65af3a406bce45100f5bb5cdf23e4@"
"r04921094","5","0.134","113600","@e8151969036257a2dd955bed49621b32@import java.util.Comparator;
import java.util.Arrays;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thisFace = faceToInt(this.face);
        int thatFace = faceToInt(that.face);

        if(thisFace < thatFace){
            return -1;
        }
        else if(thisFace > thatFace){
            return 1;
        }
        else{
            return SUIT_ORDER.compare(this, that);
        }
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int c1Suit = suitToInt(c1.getSuit());
            int c2Suit = suitToInt(c2.getSuit());

            if (c1Suit < c2Suit) {
                return -1;
            }
            else if (c1Suit > c2Suit){
                return 1;
            }
            else {
                return 0;
            }
        }
    }

    private static int faceToInt(String face){
        try{
            return Integer.parseInt(face);
        }
        catch(Exception e){
            switch(face){
                case ""A"": return 14;
                case ""K"": return 13;
                case ""Q"": return 12;
                case ""J"": return 11;
            }
        }

        return 0;
    }

    private static int suitToInt(String suit){
        switch(suit){
            case ""Spades"": return 3;
            case ""Hearts"": return 2;
            case ""Diamonds"": return 1;
            case ""Clubs"": return 0;
        }
        return 4;
    }   

    // public static void main(String[] args) {
    //     Card[] cards = new Card[13];

    //     cards[0] = new Card(""2"", ""Diamonds"");
    //     cards[1] = new Card(""2"", ""Hearts"");
    //     cards[2] = new Card(""2"", ""Clubs"");
    //     cards[3] = new Card(""2"", ""Spades"");
    //     cards[4] = new Card(""9"", ""Hearts"");
    //     cards[5] = new Card(""10"", ""Hearts"");
    //     cards[6] = new Card(""A"", ""Hearts"");
    //     cards[7] = new Card(""J"", ""Hearts"");
    //     cards[8] = new Card(""7"", ""Hearts"");
    //     cards[9] = new Card(""8"", ""Hearts"");
    //     cards[10] = new Card(""5"", ""Hearts"");
    //     cards[11] = new Card(""K"", ""Hearts"");
    //     cards[12] = new Card(""6"", ""Hearts"");

    //     Arrays.sort(cards);
    //     for (int i = 0; i < cards.length; i++){
    //         System.out.println(cards[i].getSuit() + cards[i].getFace());
    //     }
    // }
}

@e8151969036257a2dd955bed49621b32@"
"r04942099","0","0","0","@532223320f0077b5cb419f38249cfe10@
import java.util.Comparator;



public class Card {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        int num1 = 0;
        int num2 = 0;
        int temp1 = 0;
        int temp2 = 0;
        switch (this.face){
            case ""A"":
                num1=13;
                break;
            case ""K"":
                num1=12;
                break;
            case ""Q"":
                num1=11;
                break;
            case ""J"":
                num1=10;
                break;
            case ""10"":
                num1=9;
                break;
            case ""9"":
                num1=8;
                break;
            case ""8"":
                num1=7;
                break;
            case ""7"":
                num1=6;
                break;
            case ""6"":
                num1=5;
                break;
            case ""5"":
                num1=4;
                break;
            case ""4"":
                num1=3;
                break;
            case ""3"":
                num1=2;
                break;
            case ""2"":
                num1=1;
                break;
        
        }
        switch (that.face){
            case ""A"":
                num2=13;
                break;
            case ""K"":
                num2=12;
                break;
            case ""Q"":
                num2=11;
                break;
            case ""J"":
                num2=10;
                break;
            case ""10"":
                num2=9;
                break;
            case ""9"":
                num2=8;
                break;
            case ""8"":
                num2=7;
                break;
            case ""7"":
                num2=6;
                break;
            case ""6"":
                num2=5;
                break;
            case ""5"":
                num2=4;
                break;
            case ""4"":
                num2=3;
                break;
            case ""3"":
                num2=2;
                break;
            case ""2"":
                num2=1;
                break;
        
        }
        
        
        
        switch (this.suit) {
            case ""Spades"":
                temp1 = 4;
                break;
            case ""Hearts"":
                temp1 = 3;
                break;
            case ""Diamonds"":
                temp1 = 2;
                break;
            case ""Clubs"":
                temp1 = 1;
                break;
        }
        switch (that.suit) {
            case ""Spades"":
                temp2 = 4;
                break;
            case ""Hearts"":
                temp2 = 3;
                break;
            case ""Diamonds"":
                temp2 = 2;
                break;
            case ""Clubs"":
                temp2 = 1;
                break;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(num1>num2) return 1;
        if(num1<num2) return -1;
        if(temp1>temp2) return 1;
        if(temp1<temp2) return -1;   
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int temp1 = 0;
            int temp2 = 0;
            switch (c1.suit) {
                case ""Spades"":
                    temp1 = 4;
                    break;
                case ""Hearts"":
                    temp1 = 3;
                    break;
                case ""Diamonds"":
                    temp1 = 2;
                    break;
                case ""Clubs"":
                    temp1 = 1;
                    break;
            }
            switch (c2.suit) {
                case ""Spades"":
                    temp2 = 4;
                    break;
                case ""Hearts"":
                    temp2 = 3;
                    break;
                case ""Diamonds"":
                    temp2 = 2;
                    break;
                case ""Clubs"":
                    temp2 = 1;
                    break;
            }

            // complete this function so the Card can be sorted according to the suit
            if(temp1>temp2) return 1;
            if(temp1<temp2) return -1;
            return 0;
        }
    }
}

@532223320f0077b5cb419f38249cfe10@"
"r04942099","0","0.134","113600","@b1ac169f2c8772a00a44081718828af5@

public class Card {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        int num1 = 0;
        int num2 = 0;
        int temp1 = 0;
        int temp2 = 0;
        switch (this.face){
            case ""A"":
                num1=13;
                break;
            case ""K"":
                num1=12;
                break;
            case ""Q"":
                num1=11;
                break;
            case ""J"":
                num1=10;
                break;
            case ""10"":
                num1=9;
                break;
            case ""9"":
                num1=8;
                break;
            case ""8"":
                num1=7;
                break;
            case ""7"":
                num1=6;
                break;
            case ""6"":
                num1=5;
                break;
            case ""5"":
                num1=4;
                break;
            case ""4"":
                num1=3;
                break;
            case ""3"":
                num1=2;
                break;
            case ""2"":
                num1=1;
                break;
        
        }
        switch (that.face){
            case ""A"":
                num2=13;
                break;
            case ""K"":
                num2=12;
                break;
            case ""Q"":
                num2=11;
                break;
            case ""J"":
                num2=10;
                break;
            case ""10"":
                num2=9;
                break;
            case ""9"":
                num2=8;
                break;
            case ""8"":
                num2=7;
                break;
            case ""7"":
                num2=6;
                break;
            case ""6"":
                num2=5;
                break;
            case ""5"":
                num2=4;
                break;
            case ""4"":
                num2=3;
                break;
            case ""3"":
                num2=2;
                break;
            case ""2"":
                num2=1;
                break;
        
        }
        
        
        
        switch (this.suit) {
            case ""Spades"":
                temp1 = 4;
                break;
            case ""Hearts"":
                temp1 = 3;
                break;
            case ""Diamonds"":
                temp1 = 2;
                break;
            case ""Clubs"":
                temp1 = 1;
                break;
        }
        switch (that.suit) {
            case ""Spades"":
                temp2 = 4;
                break;
            case ""Hearts"":
                temp2 = 3;
                break;
            case ""Diamonds"":
                temp2 = 2;
                break;
            case ""Clubs"":
                temp2 = 1;
                break;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(num1>num2) return 1;
        if(num1<num2) return -1;
        if(temp1>temp2) return 1;
        if(temp1<temp2) return -1;   
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int temp1 = 0;
            int temp2 = 0;
            switch (c1.suit) {
                case ""Spades"":
                    temp1 = 4;
                    break;
                case ""Hearts"":
                    temp1 = 3;
                    break;
                case ""Diamonds"":
                    temp1 = 2;
                    break;
                case ""Clubs"":
                    temp1 = 1;
                    break;
            }
            switch (c2.suit) {
                case ""Spades"":
                    temp2 = 4;
                    break;
                case ""Hearts"":
                    temp2 = 3;
                    break;
                case ""Diamonds"":
                    temp2 = 2;
                    break;
                case ""Clubs"":
                    temp2 = 1;
                    break;
            }

            // complete this function so the Card can be sorted according to the suit
            if(temp1>temp2) return 1;
            if(temp1<temp2) return -1;
            return 0;
        }
        
           /* public static void main(String[] args) {
        Card test1 = new Card(""2"", ""Spades"");
        Card test2 = new Card(""3"", ""Hearts"");
        
        System.out.println(Card.SUIT_ORDER.compare(test2, test1));
    }*/
    }
}

@b1ac169f2c8772a00a44081718828af5@"
"r04942099","0","0","0","@61eb45d2b986c01bea6b6409b63b8f39@
import java.util.Comparator;



public class Card {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        int num1 = 0;
        int num2 = 0;
        int temp1 = 0;
        int temp2 = 0;
        switch (this.face){
            case ""A"":
                num1=13;
                break;
            case ""K"":
                num1=12;
                break;
            case ""Q"":
                num1=11;
                break;
            case ""J"":
                num1=10;
                break;
            case ""10"":
                num1=9;
                break;
            case ""9"":
                num1=8;
                break;
            case ""8"":
                num1=7;
                break;
            case ""7"":
                num1=6;
                break;
            case ""6"":
                num1=5;
                break;
            case ""5"":
                num1=4;
                break;
            case ""4"":
                num1=3;
                break;
            case ""3"":
                num1=2;
                break;
            case ""2"":
                num1=1;
                break;
        
        }
        switch (that.face){
            case ""A"":
                num2=13;
                break;
            case ""K"":
                num2=12;
                break;
            case ""Q"":
                num2=11;
                break;
            case ""J"":
                num2=10;
                break;
            case ""10"":
                num2=9;
                break;
            case ""9"":
                num2=8;
                break;
            case ""8"":
                num2=7;
                break;
            case ""7"":
                num2=6;
                break;
            case ""6"":
                num2=5;
                break;
            case ""5"":
                num2=4;
                break;
            case ""4"":
                num2=3;
                break;
            case ""3"":
                num2=2;
                break;
            case ""2"":
                num2=1;
                break;
        
        }
        
        
        
        switch (this.suit) {
            case ""Spades"":
                temp1 = 4;
                break;
            case ""Hearts"":
                temp1 = 3;
                break;
            case ""Diamonds"":
                temp1 = 2;
                break;
            case ""Clubs"":
                temp1 = 1;
                break;
        }
        switch (that.suit) {
            case ""Spades"":
                temp2 = 4;
                break;
            case ""Hearts"":
                temp2 = 3;
                break;
            case ""Diamonds"":
                temp2 = 2;
                break;
            case ""Clubs"":
                temp2 = 1;
                break;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(num1>num2) return 1;
        if(num1<num2) return -1;
        if(temp1>temp2) return 1;
        if(temp1<temp2) return -1;   
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int temp1 = 0;
            int temp2 = 0;
            switch (c1.suit) {
                case ""Spades"":
                    temp1 = 4;
                    break;
                case ""Hearts"":
                    temp1 = 3;
                    break;
                case ""Diamonds"":
                    temp1 = 2;
                    break;
                case ""Clubs"":
                    temp1 = 1;
                    break;
            }
            switch (c2.suit) {
                case ""Spades"":
                    temp2 = 4;
                    break;
                case ""Hearts"":
                    temp2 = 3;
                    break;
                case ""Diamonds"":
                    temp2 = 2;
                    break;
                case ""Clubs"":
                    temp2 = 1;
                    break;
            }

            // complete this function so the Card can be sorted according to the suit
            if(temp1>temp2) return 1;
            if(temp1<temp2) return -1;
            return 0;
        }
        
            public static void main(String[] args) {
        Card test1 = new Card(""2"", ""Spades"");
        Card test2 = new Card(""3"", ""Spades"");
        
        System.out.println(Card.SUIT_ORDER.compare(test2, test1));
    }
    }
}

@61eb45d2b986c01bea6b6409b63b8f39@"
"r04942099","0","0","0","@0bd484a149bbd57e83aef86492c3428d@
import java.util.Comparator;



public class Card {

    private final String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private final String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        int num1 = 0;
        int num2 = 0;
        int temp1 = 0;
        int temp2 = 0;
        switch (this.face){
            case ""A"":
                num1=13;
                break;
            case ""K"":
                num1=12;
                break;
            case ""Q"":
                num1=11;
                break;
            case ""J"":
                num1=10;
                break;
            case ""10"":
                num1=9;
                break;
            case ""9"":
                num1=8;
                break;
            case ""8"":
                num1=7;
                break;
            case ""7"":
                num1=6;
                break;
            case ""6"":
                num1=5;
                break;
            case ""5"":
                num1=4;
                break;
            case ""4"":
                num1=3;
                break;
            case ""3"":
                num1=2;
                break;
            case ""2"":
                num1=1;
                break;
        
        }
        switch (that.face){
            case ""A"":
                num2=13;
                break;
            case ""K"":
                num2=12;
                break;
            case ""Q"":
                num2=11;
                break;
            case ""J"":
                num2=10;
                break;
            case ""10"":
                num2=9;
                break;
            case ""9"":
                num2=8;
                break;
            case ""8"":
                num2=7;
                break;
            case ""7"":
                num2=6;
                break;
            case ""6"":
                num2=5;
                break;
            case ""5"":
                num2=4;
                break;
            case ""4"":
                num2=3;
                break;
            case ""3"":
                num2=2;
                break;
            case ""2"":
                num2=1;
                break;
        
        }
        
        
        
        switch (this.suit) {
            case ""Spades"":
                temp1 = 4;
                break;
            case ""Hearts"":
                temp1 = 3;
                break;
            case ""Diamonds"":
                temp1 = 2;
                break;
            case ""Clubs"":
                temp1 = 1;
                break;
        }
        switch (that.suit) {
            case ""Spades"":
                temp2 = 4;
                break;
            case ""Hearts"":
                temp2 = 3;
                break;
            case ""Diamonds"":
                temp2 = 2;
                break;
            case ""Clubs"":
                temp2 = 1;
                break;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(num1>num2) return 1;
        if(num1<num2) return -1;
        if(temp1>temp2) return 1;
        if(temp1<temp2) return -1;   
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int temp1 = 0;
            int temp2 = 0;
            switch (c1.suit) {
                case ""Spades"":
                    temp1 = 4;
                    break;
                case ""Hearts"":
                    temp1 = 3;
                    break;
                case ""Diamonds"":
                    temp1 = 2;
                    break;
                case ""Clubs"":
                    temp1 = 1;
                    break;
            }
            switch (c2.suit) {
                case ""Spades"":
                    temp2 = 4;
                    break;
                case ""Hearts"":
                    temp2 = 3;
                    break;
                case ""Diamonds"":
                    temp2 = 2;
                    break;
                case ""Clubs"":
                    temp2 = 1;
                    break;
            }

            // complete this function so the Card can be sorted according to the suit
            if(temp1>temp2) return 1;
            if(temp1<temp2) return -1;
            return 0;
        }
        
           
    }
    
    public static void main(String[] args) {
        Card test1 = new Card(""2"", ""Spades"");
        Card test2 = new Card(""3"", ""Spades"");
        
        System.out.println(Card.SUIT_ORDER.compare(test2, test1));
}
}

@0bd484a149bbd57e83aef86492c3428d@"
"r04942099","0","0","0","@adcabeb919ce4750c3593caad967e1f4@
import java.util.Comparator;



public class Card {

    private final String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private final String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        int num1 = 0;
        int num2 = 0;
        int temp1 = 0;
        int temp2 = 0;
        switch (this.face){
            case ""A"":
                num1=13;
                break;
            case ""K"":
                num1=12;
                break;
            case ""Q"":
                num1=11;
                break;
            case ""J"":
                num1=10;
                break;
            case ""10"":
                num1=9;
                break;
            case ""9"":
                num1=8;
                break;
            case ""8"":
                num1=7;
                break;
            case ""7"":
                num1=6;
                break;
            case ""6"":
                num1=5;
                break;
            case ""5"":
                num1=4;
                break;
            case ""4"":
                num1=3;
                break;
            case ""3"":
                num1=2;
                break;
            case ""2"":
                num1=1;
                break;
        
        }
        switch (that.face){
            case ""A"":
                num2=13;
                break;
            case ""K"":
                num2=12;
                break;
            case ""Q"":
                num2=11;
                break;
            case ""J"":
                num2=10;
                break;
            case ""10"":
                num2=9;
                break;
            case ""9"":
                num2=8;
                break;
            case ""8"":
                num2=7;
                break;
            case ""7"":
                num2=6;
                break;
            case ""6"":
                num2=5;
                break;
            case ""5"":
                num2=4;
                break;
            case ""4"":
                num2=3;
                break;
            case ""3"":
                num2=2;
                break;
            case ""2"":
                num2=1;
                break;
        
        }
        
        
        
        switch (this.suit) {
            case ""Spades"":
                temp1 = 4;
                break;
            case ""Hearts"":
                temp1 = 3;
                break;
            case ""Diamonds"":
                temp1 = 2;
                break;
            case ""Clubs"":
                temp1 = 1;
                break;
        }
        switch (that.suit) {
            case ""Spades"":
                temp2 = 4;
                break;
            case ""Hearts"":
                temp2 = 3;
                break;
            case ""Diamonds"":
                temp2 = 2;
                break;
            case ""Clubs"":
                temp2 = 1;
                break;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(num1>num2) return -1;
        if(num1<num2) return 1;
        if(temp1>temp2) return -1;
        if(temp1<temp2) return 1;   
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int temp1 = 0;
            int temp2 = 0;
            switch (c1.suit) {
                case ""Spades"":
                    temp1 = 4;
                    break;
                case ""Hearts"":
                    temp1 = 3;
                    break;
                case ""Diamonds"":
                    temp1 = 2;
                    break;
                case ""Clubs"":
                    temp1 = 1;
                    break;
            }
            switch (c2.suit) {
                case ""Spades"":
                    temp2 = 4;
                    break;
                case ""Hearts"":
                    temp2 = 3;
                    break;
                case ""Diamonds"":
                    temp2 = 2;
                    break;
                case ""Clubs"":
                    temp2 = 1;
                    break;
            }

            // complete this function so the Card can be sorted according to the suit
            if(temp1>temp2) return -1;
            if(temp1<temp2) return 1;
            return 0;
        }
        
           
    }
    
    public static void main(String[] args) {
        Card test1 = new Card(""2"", ""Spades"");
        Card test2 = new Card(""3"", ""Spades"");
        
        System.out.println(Card.SUIT_ORDER.compare(test2, test1));
}
}

@adcabeb919ce4750c3593caad967e1f4@"
"r04942099","0","0","0","@0bd484a149bbd57e83aef86492c3428d@
import java.util.Comparator;



public class Card {

    private final String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private final String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        int num1 = 0;
        int num2 = 0;
        int temp1 = 0;
        int temp2 = 0;
        switch (this.face){
            case ""A"":
                num1=13;
                break;
            case ""K"":
                num1=12;
                break;
            case ""Q"":
                num1=11;
                break;
            case ""J"":
                num1=10;
                break;
            case ""10"":
                num1=9;
                break;
            case ""9"":
                num1=8;
                break;
            case ""8"":
                num1=7;
                break;
            case ""7"":
                num1=6;
                break;
            case ""6"":
                num1=5;
                break;
            case ""5"":
                num1=4;
                break;
            case ""4"":
                num1=3;
                break;
            case ""3"":
                num1=2;
                break;
            case ""2"":
                num1=1;
                break;
        
        }
        switch (that.face){
            case ""A"":
                num2=13;
                break;
            case ""K"":
                num2=12;
                break;
            case ""Q"":
                num2=11;
                break;
            case ""J"":
                num2=10;
                break;
            case ""10"":
                num2=9;
                break;
            case ""9"":
                num2=8;
                break;
            case ""8"":
                num2=7;
                break;
            case ""7"":
                num2=6;
                break;
            case ""6"":
                num2=5;
                break;
            case ""5"":
                num2=4;
                break;
            case ""4"":
                num2=3;
                break;
            case ""3"":
                num2=2;
                break;
            case ""2"":
                num2=1;
                break;
        
        }
        
        
        
        switch (this.suit) {
            case ""Spades"":
                temp1 = 4;
                break;
            case ""Hearts"":
                temp1 = 3;
                break;
            case ""Diamonds"":
                temp1 = 2;
                break;
            case ""Clubs"":
                temp1 = 1;
                break;
        }
        switch (that.suit) {
            case ""Spades"":
                temp2 = 4;
                break;
            case ""Hearts"":
                temp2 = 3;
                break;
            case ""Diamonds"":
                temp2 = 2;
                break;
            case ""Clubs"":
                temp2 = 1;
                break;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(num1>num2) return 1;
        if(num1<num2) return -1;
        if(temp1>temp2) return 1;
        if(temp1<temp2) return -1;   
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int temp1 = 0;
            int temp2 = 0;
            switch (c1.suit) {
                case ""Spades"":
                    temp1 = 4;
                    break;
                case ""Hearts"":
                    temp1 = 3;
                    break;
                case ""Diamonds"":
                    temp1 = 2;
                    break;
                case ""Clubs"":
                    temp1 = 1;
                    break;
            }
            switch (c2.suit) {
                case ""Spades"":
                    temp2 = 4;
                    break;
                case ""Hearts"":
                    temp2 = 3;
                    break;
                case ""Diamonds"":
                    temp2 = 2;
                    break;
                case ""Clubs"":
                    temp2 = 1;
                    break;
            }

            // complete this function so the Card can be sorted according to the suit
            if(temp1>temp2) return 1;
            if(temp1<temp2) return -1;
            return 0;
        }
        
           
    }
    
    public static void main(String[] args) {
        Card test1 = new Card(""2"", ""Spades"");
        Card test2 = new Card(""3"", ""Spades"");
        
        System.out.println(Card.SUIT_ORDER.compare(test2, test1));
}
}

@0bd484a149bbd57e83aef86492c3428d@"
"r04942099","5","0.134","108496","@7f77bfa92afd6032d6103122f8988b3c@
import java.util.Comparator;



public class Card implements Comparable<Card> {

    private final String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private final String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        int num1 = 0;
        int num2 = 0;
        int temp1 = 0;
        int temp2 = 0;
        switch (this.face){
            case ""A"":
                num1=13;
                break;
            case ""K"":
                num1=12;
                break;
            case ""Q"":
                num1=11;
                break;
            case ""J"":
                num1=10;
                break;
            case ""10"":
                num1=9;
                break;
            case ""9"":
                num1=8;
                break;
            case ""8"":
                num1=7;
                break;
            case ""7"":
                num1=6;
                break;
            case ""6"":
                num1=5;
                break;
            case ""5"":
                num1=4;
                break;
            case ""4"":
                num1=3;
                break;
            case ""3"":
                num1=2;
                break;
            case ""2"":
                num1=1;
                break;
        
        }
        switch (that.face){
            case ""A"":
                num2=13;
                break;
            case ""K"":
                num2=12;
                break;
            case ""Q"":
                num2=11;
                break;
            case ""J"":
                num2=10;
                break;
            case ""10"":
                num2=9;
                break;
            case ""9"":
                num2=8;
                break;
            case ""8"":
                num2=7;
                break;
            case ""7"":
                num2=6;
                break;
            case ""6"":
                num2=5;
                break;
            case ""5"":
                num2=4;
                break;
            case ""4"":
                num2=3;
                break;
            case ""3"":
                num2=2;
                break;
            case ""2"":
                num2=1;
                break;
        
        }
        
        
        
        switch (this.suit) {
            case ""Spades"":
                temp1 = 4;
                break;
            case ""Hearts"":
                temp1 = 3;
                break;
            case ""Diamonds"":
                temp1 = 2;
                break;
            case ""Clubs"":
                temp1 = 1;
                break;
        }
        switch (that.suit) {
            case ""Spades"":
                temp2 = 4;
                break;
            case ""Hearts"":
                temp2 = 3;
                break;
            case ""Diamonds"":
                temp2 = 2;
                break;
            case ""Clubs"":
                temp2 = 1;
                break;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(num1>num2) return 1;
        if(num1<num2) return -1;
        if(temp1>temp2) return 1;
        if(temp1<temp2) return -1;   
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int temp1 = 0;
            int temp2 = 0;
            switch (c1.suit) {
                case ""Spades"":
                    temp1 = 4;
                    break;
                case ""Hearts"":
                    temp1 = 3;
                    break;
                case ""Diamonds"":
                    temp1 = 2;
                    break;
                case ""Clubs"":
                    temp1 = 1;
                    break;
            }
            switch (c2.suit) {
                case ""Spades"":
                    temp2 = 4;
                    break;
                case ""Hearts"":
                    temp2 = 3;
                    break;
                case ""Diamonds"":
                    temp2 = 2;
                    break;
                case ""Clubs"":
                    temp2 = 1;
                    break;
            }

            // complete this function so the Card can be sorted according to the suit
            if(temp1>temp2) return 1;
            if(temp1<temp2) return -1;
            return 0;
        }
        
           
    }
    
    public static void main(String[] args) {
        Card test1 = new Card(""2"", ""Spades"");
        Card test2 = new Card(""3"", ""Spades"");
        
        System.out.println(Card.SUIT_ORDER.compare(test2, test1));
}
}

@7f77bfa92afd6032d6103122f8988b3c@"
"r02b48003","0","0.52","106576","@ac16d051abf6086f31b572a65c371d0c@import java.awt.Font;
import java.io.File;
import java.util.Arrays;
import java.util.Comparator;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author clint
 */
public class MyConvexHull {
    private static final double radius = 0.01; // point radius for plotting
    
    public static class MyUF extends WeightedQuickUnionUF {
        private final int count; // number of items
        
        public MyUF (int N) {
            /* execute WeightedQuickUnionUF constructor and 
               assign number of items*/
            super(N);
            count = N;
        } // end constructor
        
        public int[] getRoots() {
            /* The function gets all the roots */
            // initialization
            Stack<Integer> rootStack = new Stack<>(); // roots container
            
            // find roots and push to the container
            for (int node = 0; node < count; node++) {
                if (node == find(node)) { // if the root of a node is itself
                    rootStack.push(node);     // push to the container
                } // end if
            } // end loop
            
            // extract the roots from container and return
            int[] roots = stack2array(rootStack);
            return roots;
        } // end func getRoots
        
        public Stack<int[]> getCC() {
            /* get connected components */
            // initialization
            int[] roots = getRoots();           // get all the roots
            Stack<int[]> ccStack = new Stack<>(); // cc container
            
            // each root extract a connected component
            for (int root : roots){
                // loop initialization
                Stack<Integer> cc = new Stack<>();
                
                // element in connected component is connected to the root
                for (int node = 0; node < count; node++) {
                    if (root == find(node)) { cc.push(node); }
                } // end inner loop
                
                // collect each connected component
                ccStack.push(stack2array(cc));
            } // end outer loop
            
            return ccStack;
        } // end func getCC
        
        public int[] stack2array(Stack<Integer> stack){
            /* helper function:
               convert stack into array by popping all items into array */
            // initialization
            int[] arr = new int[stack.size()];
            
            // pop element and collect to an array
            for (int idx = 0; idx < arr.length; idx++) {
                arr[idx] = stack.pop();
            } // end loop
            
            return arr;
        } // end func stack2array
    } // end class myUF
    
    public static Point2D[] idx2points (Point2D[] points, int[] index) {
        /* helper function: 
           input an array of Point2D element and an array of index,
           return an array of Point2D where each element is matched the index 
           of the input array */
        // initialization
        int N = index.length;
        Point2D[] pts = new Point2D[N];
        
        // get the element based on the index array
        for (int i = 0; i < N; i++) {
            int idx = index[i];
            pts[i] = points[idx];
        } // end loop
        
        return pts;
    } // end func idx2point
    
    public static Stack<int[]> distUnionPoints (Point2D[] points, double dist) {
        /* union points and return stack of connected components */
        // initialization
        int N = points.length;
        MyUF uf; 
        
        // double for loop to compare each two points
        uf = new MyUF(N);
        for (int idx1 = 0; idx1 < N; idx1++) {
            for (int idx2 = idx1; idx2 < N; idx2++) {
                // union the points if the distance between points <= distance
                if (points[idx1].distanceTo(points[idx2]) <= dist) {
                    uf.union(idx1, idx2);
                } // end if
            } // end inner loop
        } // end outer loop
        
        return uf.getCC();
    } // end func unionPoints
    
    /**
     * 
     * @param points
     * @return 
     */
    public static int[] ConvexHullVertex(Point2D[] points) {
	// check size
	int N = points.length;  // number of points
	if (N < 3) { return new int[0]; }

	// initialization
        Integer[] vex = new Integer[N]; // vertex: idx of points
	Point2D[] pts = new Point2D[N]; // all points
        
        for (int i = 0; i < N; i++) {
	    vex[i] = i;
	    pts[i] = new Point2D(points[i].x(),
				 points[i].y());
	} // end loop
        
        // initialize index
        Stack<Integer> convex = new Stack<Integer>(); // store index
	convex.push(0);
	convex.push(1);
	convex.push(2);
	
	// show points before sort
	// show(pts, vex);
        // plot(pts, vex);
	
	// sort points by Y axis
	sortByXYaxis(pts, vex);

	// show points before sort
	// show(pts, vex);
        // plot(pts, vex);
	
	// sort points by angle
	sortByAngle(pts, vex);
	
	// show points after sort
	// show(pts, vex);
        // plot(pts, vex);
	// plot(points);
	// plot(pts);
	
	// solve convex hull problem
	//*
	int idx = 2;
	while (true) {
	    
	    if (checkCCW(pts, convex)) {
		// update index
		idx += 1;
		idx %= N;
		
		// if index run through a cycle, break
		if (idx == 1) { break; }

		// push index into stack
		convex.push(idx);
	    } else {
		// skip a index by
		// pop two index & push current index
		convex.pop();
		convex.pop();
		convex.push(idx);
	    } // end if-else
	} // end loop

	// return answer
	int size = convex.size()-1;
        
	int[] ans = new int[size];
        for (int i = 0; i < size; i++) {
            ans[i] = vex[convex.pop()];
        } // end loop
        
	//plot(pts, ans1);
	//StdDraw.show(100);
	//StdDraw.clear();
	//plot(points, ans2);
	//*/
	return ans;
    } // end func ConvexHullVertex
    
    public static boolean checkCCW (Point2D[] points, Stack<Integer> index) {
        /* check whether the top 3 points form a counter clockwise angle */
	// get the top three index of the stack
	int idx3 = index.pop();
	int idx2 = index.pop();
	int idx1 = index.pop();

	// get three corresponding points
	Point2D p1 = points[idx1];
	Point2D p2 = points[idx2];
	Point2D p3 = points[idx3];

	// push back the index
	index.push(idx1);
	index.push(idx2);
	index.push(idx3);

	// return false if clockwise turn; return true otherwise
	//StdOut.println(idx1+"" ""+idx2+"" ""+idx3+"" ""+Point2D.ccw(p1, p2, p3));
	return Point2D.ccw(p1, p2, p3) != -1;
    } // end func checkCCW
    
    /**
     * Helper Function for ConvexHullVertex
     * Apply insertion sort to sort the points by X and Y axis
     * @param points
     * @param vertex
     */
    public static void sortByXYaxis(Point2D[] points, Integer[] vertex) {
        // initialization
	int N = points.length;
        
        // first sort points by X axis
        for (int i = 0; i < N; i++) {
	    for (int j = i;
		 j > 0 && less(Point2D.X_ORDER, points[j], points[j-1]);
		 j--) {
		exch(points, j, j-1);
		exch(vertex, j, j-1);
	    } // end inner loop
	} // end outer loop
        
	// then sort points by Y axis
	for (int i = 0; i < N; i++) {
	    for (int j = i;
		 j > 0 && less(Point2D.Y_ORDER, points[j], points[j-1]);
		 j--) {
		exch(points, j, j-1);
		exch(vertex, j, j-1);
	    } // end inner loop
	} // end outer loop
    } // end class sortByYaxis

    /**
     * Helper Function for ConvexHullVertex
     * Apply insertion sort to sort the points by angle to the reference point
     * The reference point is the first point in the array
     * @param points
     * @param vertex
     */
    public static void sortByAngle(Point2D[] points, Integer[] vertex) {
	// initialization
	int N = points.length;
        Point2D refPoint = points[0];
        Point2D[] pts = new Point2D[N];

	/* first sort points by radius in reversed order
	for (int i = 0; i < N; i++) {
	    for (int j = i;
		 j > 0 && more(Point2D.R_ORDER, points[j], points[j-1]);
		 j--) {
		exch(points, j, j-1);
		exch(vertex, j, j-1);
	    } // end inner loop
	} // end outer loop */
        
	// next shift points so that the reference point is at the origin
        double xi, yi, x0, y0;
	x0 = refPoint.x();
	y0 = refPoint.y();
	for (int i = 0; i < N; i++) {
	    xi = points[i].x();
	    yi = points[i].y();
	    //StdOut.println(xi + "" "" + yi + "" | "" + x0 + "" "" + y0);
	    pts[i] = new Point2D(xi - x0, yi - y0);
        } // end loop
        
        //System.out.println(""Inner:"");
        //show(pts, vertex);
	// then sort points by angle
        for (int i = 0; i < N; i++) {
	    for (int j = i;
		 j > 0 && lessAngle(pts[j], pts[j-1]);
                 //j > 0 && less(refPoint.polarOrder(), points[j], points[j-1]);
		 j--) {
                exch(pts, j, j-1);
		exch(points, j, j-1);
		exch(vertex, j, j-1);
	    } // end inner loop
	} // end outer loop
        
    } // end func sortByAngle
    
    /**
     * @param v
     * @param w
     */
    private static boolean lessAngle (Point2D v, Point2D w) {
	return Double.compare(v.theta(), w.theta()) < 0;
    } // end func less
    
    /**
     * This method compare whether v < w
     * @param v The first object with comparable implemented
     * @param w The second object with comparable implemented
     * @return bool true if v is less than w
     */
    private static boolean less (Comparator c, Object v, Object w) {
	return c.compare(v, w) < 0;
    } // end func less

    /**
     * 
     * @param c
     * @param v
     * @param w
     * @return 
     */
    private static boolean more (Comparator c, Object v, Object w) {
	return c.compare(v, w) > 0;
    } // end func more

    /**
     * This method swap the position of a[idx01] and a[idx02]
     * @param a an array of elements with comparable implemented
     * @param idx01 the first index
     * @param idx02 the second index
     */
    private static void exch (Object[] a, int idx01, int idx02) {
	Object swap = a[idx01];
	a[idx01] = a[idx02];
	a[idx02] = swap;
    } // end func exch
    
    /**
     * 
     * @param points an array of elements with comparable implemented
     * @return
     */
    public static boolean isSortedXYaxis (Point2D[] points){
        for (int idx = 0; idx < points.length-1; idx++) {
            if (points[idx].y() == points[idx+1].y()) {
                if (points[idx].x() > points[idx+1].x()) {
                    return false;
                } // end inner if
            } // end outer if
            
            if (points[idx].y() > points[idx+1].y()) {
                return false;
            } // end if
        } // end loop
        return true;
    } // end func isSortedXYaxis
    
    /**
     * @param points
     * @return 
     */
    public static boolean isSortedAngle(Point2D[] points){
        for (int idx = 0; idx < points.length-1; idx++) {
            if (points[idx].theta() > points[idx+1].theta()) {
                return false;
            } // end if
        } // end loop
        return true;
    } // end func isSortedAngle
    
    /**
     * show the points with point ID
     * @param points
     * @param vertex
     */
    public static void show (Point2D[] points, Integer[] vertex) {
        // initialization
	int N = points.length;
        
        StdOut.println(""ID | X     | Y     | R     | Theta"");
	for (int i = 0; i < N; i++) {
	    StdOut.printf("" %d | %.3f | %.3f | %.3f | %.3f)\n"",
			  vertex[i],
			  points[i].x(),
			  points[i].y(),
                          points[i].r(),
			  points[i].theta());
	} // end loop
	StdOut.println(""------------"");
    } // end func show
    
    public static void plotSet () {
        // set scale
	StdDraw.setXscale(-1.2, 1.2);
	StdDraw.setYscale(-1.2, 1.2);
	
	// set coordinate
	StdDraw.setPenColor(StdDraw.GRAY);
        StdDraw.line(-1.1, 0, 1.1, 0);
	StdDraw.line(0, -1.1, 0, 1.1);
	
	// set Font
        Font font = new Font(""Consolas"", Font.BOLD, 15); 
	StdDraw.setFont(font);
    }
    /**
     * plot the points with point order
     * @param points
     */
    public static void plot (Point2D[] points) {
        plotSet();
        
	// plot each point
        int N = points.length;
	StdDraw.setPenColor(StdDraw.BLACK);
	for (int i = 0; i < N; i++) {
	    int     v = i;
	    Point2D p = points[i];
	    StdDraw.filledCircle(p.x(), p.y(), radius);
	    StdDraw.text(p.x() + 0.03, p.y() + 0.03,
			 """" + v);
	} // end for loop
    } // end func plot
    
    /**
     * plot the points with point ID
     * @param points
     * @param vertex
     */
    public static void plot (Point2D[] points, Integer[] vertex) {
        plotSet();
        
	// plot each point
        int N = points.length;
	StdDraw.setPenColor(StdDraw.BLACK);
	for (int i = 0; i < N; i++) {
	    int     v = vertex[i];
	    Point2D p = points[i];
	    StdDraw.filledCircle(p.x(), p.y(), radius);
	    StdDraw.text(p.x() + 0.03, p.y() + 0.03,
			 """" + v);
	} // end for loop

	// label the first point
	StdDraw.setPenColor(StdDraw.RED);
	StdDraw.filledCircle(points[0].x(), points[0].y(), radius);
    } // end func plotPoint

    /**
     * 
     * @param points
     * @param ans 
     */
    public static void plotConvex (Point2D[] points, int[] ans) {
        plotSet();
	
	// plot each point
        int N = points.length;
	StdDraw.setPenColor(StdDraw.BLACK);
	for (int i = 0; i < N; i++) {
	    int     v = i;
	    Point2D p = points[i];
	    StdDraw.filledCircle(p.x(), p.y(), radius);
	    StdDraw.text(p.x() + 0.03, p.y() + 0.03,
			 """" + v);
	} // end for loop

	// plot lines
	StdOut.println("""");
	StdDraw.setPenColor(StdDraw.BLUE);
	for (int i = 0; i < ans.length; i++) {
	    int     v1 = ans[i];
	    int     v2 = ans[(i+1) % ans.length];
	    Point2D p1 = points[v1];
	    Point2D p2 = points[v2];
	    StdDraw.line(p1.x(), p1.y(), p2.x(), p2.y());
	    //StdOut.println(v1 + "" "" + v2);
	} // end loop

	// label the first point
	// StdDraw.setPenColor(StdDraw.RED);
	// StdDraw.filledCircle(points[0].x(), points[0].y(), radius);
    } // end func plotPoint
    
    public static void main(String[] args) {
        Stack<Point2D> pointStack = new Stack<>();
        File file = new File(args[0]);
        In input = new In(file);
        String line;
        
        // read in the threshold distance
        line = input.readLine();
        Double dist = Double.parseDouble(line);
        
        // read in the number of points
        line = input.readLine();
        Integer N = Integer.parseInt(line);
        
        // check
        StdOut.println(""D: "" + dist + ""\nN: "" + N);
        while (!input.isEmpty()) {
            //double x = StdIn.readDouble();  
            //double y = StdIn.readDouble();           // Read pair to connect.
            //points.push(new Point2D(x, y));
            //StdOut.println(x + "" "" + y);       //   and print connection.
            line = input.readLine();
            String[] pos = line.split("" ""); // position
            Point2D point = new Point2D(
                    Double.parseDouble(pos[0]), 
                    Double.parseDouble(pos[1]));
            pointStack.push(point);
        } // end while loop 
        
        //*
        Point2D[] points = new Point2D[pointStack.size()];
        for (int idx = 0; idx < points.length; idx++) {
            points[idx] = pointStack.pop();
            //StdOut.printf(""%.3f, %.3f\n"", points[idx].x(), points[idx].y());
        } // end loop
        //*/
        //MyConvexHull.plot(points);
        int[] convex = MyConvexHull.ConvexHullVertex(points);
        //MyConvexHull.plotConvex(points, convex);
        System.out.println(Arrays.toString(convex));
    } // end func main
} // end class MyConvexHull

@ac16d051abf6086f31b572a65c371d0c@"
"b02611023","1","0.65","110944","@05951b6a94f9b480de05fda7db75e53f@
import java.util.Comparator;
import java.util.Arrays;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if (this.face.equals(""A"") && that.face.equals(""A"")) {
            if (this.suit.compareTo(that.suit) < 0) {
                return -1;
            } else {
                return +1;
            }
        }
        if (this.face.equals(""A"")) {
            return +1;
        }
        if (that.face.equals(""A"")) {
            return -1;
        } else {
            if (this.face.compareTo(that.face) < 0) {
                return -1;
            }
            if (this.face.compareTo(that.face) > 0) {
                return +1;
            } else {
                if (this.suit.compareTo(that.suit) < 0) {
                    return -1;
                } else {
                    return +1;
                }
            }
        }
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int compare = c1.getSuit().compareTo(c2.getSuit());
            if (compare < 0) {
                return -1;
            } else if (compare > 0) {
                return +1;
            } else {
                return 0;
            }
        }
    }
}

@05951b6a94f9b480de05fda7db75e53f@"
"b02611023","1","0.63","110880","@120a0458704ab963f59d3e4220884df0@
import java.util.Comparator;
import java.util.Arrays;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if (this.face.equals(""A"") && that.face.equals(""A"")) {
            if (this.suit.compareTo(that.suit) < 0) {
                return -1;
            } else {
                return +1;
            }
        }
        else if (this.face.equals(""A"")) {
            return +1;
        }
        else if (that.face.equals(""A"")) {
            return -1;
        } else {
            if (this.face.compareTo(that.face) < 0) {
                return -1;
            }
            if (this.face.compareTo(that.face) > 0) {
                return +1;
            } else {
                if (this.suit.compareTo(that.suit) < 0) {
                    return -1;
                } else {
                    return +1;
                }
            }
        }
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int compare = c1.getSuit().compareTo(c2.getSuit());
            if (compare < 0) {
                return -1;
            } else if (compare > 0) {
                return +1;
            } else {
                return 0;
            }
        }
    }
}

@120a0458704ab963f59d3e4220884df0@"
"r04631034","0","0.67","110864","@7405c4f8624e1b863e6d851a74fc5729@
import java.util.Comparator;
import java.util.*;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
              HashMap<String,Integer> map =new HashMap<String,Integer>();
              for(int i =2;i<11;i++){
                        map.put(String.valueOf(i),i);
              }
              map.put(""A"",14);
              map.put(""J"",11);
              map.put(""Q"",12);
              map.put(""K"",13);
              map.put(""Spades"",18);
              map.put(""Hearts"",17);
              map.put(""Diamonds"",16);
              map.put(""Clubs"",15);
              
              if(map.get(this.suit)>map.get(that.suit)) return +1;
              if(map.get(this.suit)<map.get(that.suit)) return -1;
              if(map.get(this.face)>map.get(that.face)) return +1;
              if(map.get(this.face)<map.get(that.face)) return -1;
              else return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
                  HashMap<String, Integer> map = new HashMap<String, Integer>();
                  map.put(""Spades"", 4);
                  map.put(""Hearts"", 3);
                  map.put(""Diamonds"", 2);
                  map.put(""Clubs"", 1);

                  int suit_c1 = map.get(c1.suit);
                  int suit_c2 = map.get(c2.suit);                 
                  
                  if(suit_c1<suit_c2) return -1;
                  if(suit_c1>suit_c2)return +1;
                   return 0;
        }
    }   
}

@7405c4f8624e1b863e6d851a74fc5729@"
"r04631034","5","0.132","111712","@9cea77909d559ad559be373a11ef539b@
import java.util.Comparator;
import java.util.*;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
              HashMap<String,Integer> map =new HashMap<String,Integer>();
              for(int i =2;i<11;i++){
                        map.put(String.valueOf(i),i);
              }
              map.put(""J"",11);
              map.put(""Q"",12);
              map.put(""K"",13);
              map.put(""A"",14);
              map.put(""Spades"",18);
              map.put(""Hearts"",17);
              map.put(""Diamonds"",16);
              map.put(""Clubs"",15);
              
              if(map.get(this.face)>map.get(that.face)) return +1;
              if(map.get(this.face)<map.get(that.face)) return -1;
              if(map.get(this.suit)>map.get(that.suit)) return +1;
              if(map.get(this.suit)<map.get(that.suit)) return -1;

              else return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
                  HashMap<String, Integer> map = new HashMap<String, Integer>();
                  map.put(""Spades"", 4);
                  map.put(""Hearts"", 3);
                  map.put(""Diamonds"", 2);
                  map.put(""Clubs"", 1);

                  int suit_c1 = map.get(c1.suit);
                  int suit_c2 = map.get(c2.suit);                 
                  
                  if(suit_c1<suit_c2) return -1;
                  else if(suit_c1>suit_c2)return +1;
                  else return 0;
        }
    }   
}

@9cea77909d559ad559be373a11ef539b@"
"r04921094","5","0.128","111584","@ca796c9e975744b8c0feabcd5050cba1@import java.util.Comparator;
import java.util.Arrays;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thisFace = faceToInt(this.face);
        int thatFace = faceToInt(that.face);

        if(thisFace < thatFace){
            return -1;
        }
        else if(thisFace > thatFace){
            return 1;
        }
        else{
            return SUIT_ORDER.compare(this, that);
        }
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int c1Suit = suitToInt(c1.getSuit());
            int c2Suit = suitToInt(c2.getSuit());

            if (c1Suit < c2Suit) {
                return -1;
            }
            else if (c1Suit > c2Suit){
                return 1;
            }
            else {
                return 0;
            }
        }
    }

    public static int faceToInt(String face){
        try{
            return Integer.parseInt(face);
        }
        catch(Exception e){
            switch(face){
                case ""A"": return 14;
                case ""K"": return 13;
                case ""Q"": return 12;
                case ""J"": return 11;
            }
        }

        return 0;
    }

    public static int suitToInt(String suit){
        switch(suit){
            case ""Spades"": return 3;
            case ""Hearts"": return 2;
            case ""Diamonds"": return 1;
            case ""Clubs"": return 0;
        }
        return 4;
    }   

}

@ca796c9e975744b8c0feabcd5050cba1@"
"b02611023","1","0.73","110992","@d7cc960cc83c9c65eeee4b91b91edb01@
import java.util.Comparator;
import java.util.Arrays;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if (this.face.equals(that.face)) {
            if (this.suit.compareTo(that.suit) < 0) {
                return -1;
            } else if (this.suit.compareTo(that.suit) > 0) {
                return +1;
            } else {
                return 0;
            }
        } else if (this.face.equals(""A"")) {
            return +1;
        } else if (that.face.equals(""A"")) {
            return -1;
        } else if (this.face.equals(""Q"")) {
            if (""JQ"".compareTo(that.face) < 0) {
                return -1;
            } else {
                return +1;
            }
        } else if (that.face.equals(""Q"")) {
            if (""JQ"".compareTo(this.face) < 0) {
                return +1;
            } else {
                return -1;
            }
        } else {
            if (this.face.compareTo(that.face) < 0) {
                return -1;
            } else {
                return +1;
            }
        }
    }

// TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int compare = c1.getSuit().compareTo(c2.getSuit());
            if (compare < 0) {
                return -1;
            } else if (compare > 0) {
                return +1;
            } else {
                return 0;
            }
        }
    }
}

@d7cc960cc83c9c65eeee4b91b91edb01@"
"b02611023","0","0.63","110976","@bc104b653f33c973f5429341ecd0013b@
import java.util.Comparator;
import java.util.Arrays;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if (this.face.equals(""A"")) {
            this.face = ""L"";
        }
        if (that.face.equals(""A"")) {
            that.face = ""L"";
        }
        if (this.face.equals(""Q"")) {
            this.face = ""JQ"";
        }
        if (that.face.equals(""Q"")) {
            this.face = ""JQ"";
        }
        if (this.face.compareTo(that.face) < 0) {
            return -1;
        }
        if (this.face.compareTo(that.face) > 0) {
            return +1;
        }
        if (this.suit.compareTo(that.suit) < 0) {
            return -1;
        }
        if (this.suit.compareTo(that.suit) > 0) {
            return +1;
        }
        return 0;
    }

// TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int compare = c1.getSuit().compareTo(c2.getSuit());
            if (compare < 0) {
                return -1;
            } else if (compare > 0) {
                return +1;
            } else {
                return 0;
            }
        }
    }
}

@bc104b653f33c973f5429341ecd0013b@"
"b02611023","0","0.64","110992","@a0e578cd561f1ebce58ad4e87a6ba80f@
import java.util.Comparator;
import java.util.Arrays;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if (this.face.equals(""A"")) {
            this.face = ""L"";
        }
        if (that.face.equals(""A"")) {
            that.face = ""L"";
        }
        if (this.face.equals(""Q"")) {
            this.face = ""JQ"";
        }
        if (that.face.equals(""Q"")) {
            this.face = ""JQ"";
        }
        if (this.face.compareTo(that.face) < 0) {
            return -1;
        }
        if (this.face.compareTo(that.face) > 0) {
            return +1;
        }
        if (this.suit.compareTo(that.suit) < 0) {
            return -1;
        }
        return +1;
    }

// TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int compare = c1.getSuit().compareTo(c2.getSuit());
            if (compare < 0) {
                return -1;
            } else if (compare > 0) {
                return +1;
            } else {
                return 0;
            }
        }
    }
}

@a0e578cd561f1ebce58ad4e87a6ba80f@"
"b02611023","0","0.66","111008","@1995153c62c651b517b71730575c48d8@
import java.util.Comparator;
import java.util.Arrays;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if (this.face.equals(""A"")) {
            this.face = ""L"";
        }
        if (that.face.equals(""A"")) {
            that.face = ""L"";
        }
        if (this.face.equals(""Q"")) {
            this.face = ""JQ"";
        }
        if (that.face.equals(""Q"")) {
            that.face = ""JQ"";
        }
        if (this.face.compareTo(that.face) < 0) {
            return -1;
        }
        if (this.face.compareTo(that.face) > 0) {
            return +1;
        }
        if (this.suit.compareTo(that.suit) < 0) {
            return -1;
        }
        return +1;
    }

// TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int compare = c1.getSuit().compareTo(c2.getSuit());
            if (compare < 0) {
                return -1;
            } else if (compare > 0) {
                return +1;
            } else {
                return 0;
            }
        }
    }
}

@1995153c62c651b517b71730575c48d8@"
"b02611023","0","0.64","110976","@df934640db1bb18d8165615428b33631@
import java.util.Comparator;
import java.util.Arrays;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if (this.face.equals(""A"")) {
            this.face = ""L"";
        }
        if (that.face.equals(""A"")) {
            that.face = ""L"";
        }
        if (this.face.equals(""Q"")) {
            this.face = ""JQ"";
        }
        if (that.face.equals(""Q"")) {
            that.face = ""JQ"";
        }
        if (this.face.compareTo(that.face) < 0) {
            return -1;
        }
        if (this.face.compareTo(that.face) > 0) {
            return +1;
        }
        if (this.suit.compareTo(that.suit) < 0) {
            return -1;
        }
        return +1;
    }

// TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int compare = c1.getSuit().compareTo(c2.getSuit());
            if (compare < 0) {
                return -1;
            }
            if (compare > 0) {
                return +1;
            }
            return 0;
        }
    }
}

@df934640db1bb18d8165615428b33631@"
"r03849033","0","0.1","108016","@1ad7ce7c2dba5ff1f380441ee0ec352a@

import java.util.Arrays;
import java.util.Comparator;





public class MyConvexHull {

    public static void main(String[] args) {
         Point2D[] a = new Point2D[10];
         Point2D[] A = a;
         int N = a.length;
         for (int i = 0; i < N; i++) {
            double x = StdRandom.uniform(10);
            double y = StdRandom.uniform(10);
            a[i] = new Point2D(x, y);
        }
         Arrays.sort(a);
         Point2D p = new Point2D(a[0].x(), a[0].y());
         Arrays.sort(a, p.POLAR_ORDER);
         String[] v = new String[N];
         v[0]="""" + 0;
         v[1]="""" + 1;     
         int num = 2;
         for (int i = 2; i < N; i++) {
             Point2D aa = a[Integer.parseInt(v[num-2])];
             Point2D b = a[Integer.parseInt(v[num-1])];
             Point2D c = a[i];
             double ccw = (b.x()-aa.x())*(c.y()-aa.y()) - (b.y()-aa.y())*(c.x()-aa.x());
             if(ccw > 0){
                 v[num]="""" + i;
                 num++;
             }
         }
         String[] ConvexHullVertex = new String[num];
         int x = 0;        
         for(int i = 0; i < N; i++) {  
             for(int j = 0; j < num; j++) {
                if (A[i].distanceTo(a[Integer.parseInt(v[j])])==0){
                    ConvexHullVertex[x]="""" + i;
                    x++;
                    break;
                }
             }
         }
    }
}

@1ad7ce7c2dba5ff1f380441ee0ec352a@"
"r03849033","0","0.1","108016","@3088f0fc763d720c590dae07c0c36b80@
public class MyConvexHull {

    public static void main(String[] args) {
         Point2D[] a = new Point2D[10];
         Point2D[] A = a;
         int N = a.length;
         for (int i = 0; i < N; i++) {
            double x = StdRandom.uniform(10);
            double y = StdRandom.uniform(10);
            a[i] = new Point2D(x, y);
        }
         Arrays.sort(a);
         Point2D p = new Point2D(a[0].x(), a[0].y());
         Arrays.sort(a, p.POLAR_ORDER);
         String[] v = new String[N];
         v[0]="""" + 0;
         v[1]="""" + 1;     
         int num = 2;
         for (int i = 2; i < N; i++) {
             Point2D aa = a[Integer.parseInt(v[num-2])];
             Point2D b = a[Integer.parseInt(v[num-1])];
             Point2D c = a[i];
             double ccw = (b.x()-aa.x())*(c.y()-aa.y()) - (b.y()-aa.y())*(c.x()-aa.x());
             if(ccw > 0){
                 v[num]="""" + i;
                 num++;
             }
         }
         String[] ConvexHullVertex = new String[num];
         int x = 0;        
         for(int i = 0; i < N; i++) {  
             for(int j = 0; j < num; j++) {
                if (A[i].distanceTo(a[Integer.parseInt(v[j])])==0){
                    ConvexHullVertex[x]="""" + i;
                    x++;
                    break;
                }
             }
         }
    }
}

@3088f0fc763d720c590dae07c0c36b80@"
"b03611023","5","0.13","111168","@27b1e629a82337f120713670e41b63f1@import java.util.Comparator;
import java.util.Arrays;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]       
	private String[] copy = {""0"",""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9"",""10"", ""J"", ""Q"", ""K"", ""A""};
        private String[] Suit = {""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};        
        public static final Comparator<Card> SUIT_ORDER = new SuitOrder();
   
    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
         
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
       
        int a ;
        int b ;
        a = this.findnum();
        b = that.findnum();
        
        if(a>b) 
            return 1;
        else if(a<b)
            return -1;
        else{
            int c;
            c = this.suit.compareTo(that.suit);
            if(c>0)
                return 1;
            else if(c<0)
                return -1;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            int k;
// complete this function so the Card can be sorted according to the suit
            k = c1.suit.compareTo(c2.suit);
            if(k>0)
                return 1;
            if(k<0)
                return -1;
            else
                 return 0;
        }
    }   
    public int findnum(){
        
        for(int j =0;j<16;j++){
            if(this.face.equals(copy[j])){
                return j;
            }
        }
        return -1;
    }
    public int findsuit(){
        for(int j = 0; j<4;j++){
            if(this.suit.equals(Suit[j]))
                return j;
        }
        return -1;
    }
     public static void main(String[] args){
     }
}


@27b1e629a82337f120713670e41b63f1@"
"b02611023","0","0.65","111024","@23d403fc050c17d70bb6dea4b2aa8b0b@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        String thisface = """";
        String thatface = """";
        
        if (this.face.equals(""A"")) {
            thisface = ""L"";
        }
        if (that.face.equals(""A"")) {
            thatface = ""L"";
        }
        if (this.face.equals(""Q"")) {
            thisface = ""JQ"";
        }
        if (that.face.equals(""Q"")) {
            thatface = ""JQ"";
        }
        if (thisface.compareTo(thatface) < 0) {
            return -1;
        }
        if (thisface.compareTo(thatface) > 0) {
            return +1;
        }
        if (this.suit.compareTo(that.suit) < 0) {
            return -1;
        }
        return +1;
    }

// TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int compare = c1.getSuit().compareTo(c2.getSuit());
            if (compare < 0) {
                return -1;
            }
            if (compare > 0) {
                return +1;
            }
            return 0;
        }
    }
}

@23d403fc050c17d70bb6dea4b2aa8b0b@"
"b02611023","1","0.63","110976","@f81056477a09a1ae9b2bd23e250f47d7@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        String thisface = """";
        String thatface = """";

        if (this.face.equals(that.face)) {
            if (this.suit.compareTo(that.suit) < 0) {
                return -1;
            }
            else{
                return +1;
            }
        }

        else if (this.face.equals(""A"")) {
            return +1;
        }
        else if (that.face.equals(""A"")) {
            return -1;
        }
        else if (this.face.equals(""Q"")) {
            thisface = ""JQ"";
            thatface = that.face;
        }
        else if (that.face.equals(""Q"")) {
            thisface = this.face;
            thatface = ""JQ"";
        } else {
            thisface = this.face;
            thatface = that.face;
        }
        if (thisface.compareTo(thatface) < 0) {
            return -1;
        }
        if (thisface.compareTo(thatface) > 0) {
            return +1;
        }
        if (this.suit.compareTo(that.suit) < 0) {
            return -1;
        }
        return +1;
    }

// TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int compare = c1.getSuit().compareTo(c2.getSuit());
            if (compare < 0) {
                return -1;
            }
            if (compare > 0) {
                return +1;
            }
            return 0;
        }
    }
}

@f81056477a09a1ae9b2bd23e250f47d7@"
"b02611023","1","0.65","111344","@ba0035f4ad79e0cf1316005288f47a53@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        String thisface = """";
        String thatface = """";

        if (this.face.equals(that.face)) {
            if (this.suit.compareTo(that.suit) < 0) {
                return -1;
            } else {
                return +1;
            }
        } else if (this.face.equals(""A"")) {
            return +1;
        } else if (that.face.equals(""A"")) {
            return -1;
        } else if (this.face.equals(""Q"")) {
            thisface = ""JQ"";
            thatface = that.face;
        } else if (that.face.equals(""Q"")) {
            thisface = this.face;
            thatface = ""JQ"";
        } else {
            thisface = this.face;
            thatface = that.face;
        }

        if (thisface.compareTo(thatface) < 0) {
            return -1;
        }
        return +1;
    }

// TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int compare = c1.getSuit().compareTo(c2.getSuit());
            if (compare < 0) {
                return -1;
            }
            if (compare > 0) {
                return +1;
            }
            return 0;
        }
    }
}

@ba0035f4ad79e0cf1316005288f47a53@"
"b02611023","5","0.13","111024","@7193ed332ceb96ffcbe738a452cdbd0e@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        String thisface = """";
        String thatface = """";

        if (this.face.equals(that.face)) {
            if (this.suit.compareTo(that.suit) < 0) {
                return -1;
            } else {
                return +1;
            }
        } else if (this.face.equals(""A"")) {
            return +1;
        } else if (that.face.equals(""A"")) {
            return -1;
        } else if (this.face.equals(""Q"")) {
            thisface = ""JQ"";
            thatface = that.face;
        } else if (that.face.equals(""Q"")) {
            thisface = this.face;
            thatface = ""JQ"";
        } 
        else if(this.face.equals(""10"")){
            thisface = ""99"";
            thatface = that.face;
        }
        else if(that.face.equals(""10"")){
            thisface = this.face;
            thatface = ""99"";
        }
        else {
            thisface = this.face;
            thatface = that.face;
        }

        if (thisface.compareTo(thatface) < 0) {
            return -1;
        }
        return +1;

    }

// TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int compare = c1.getSuit().compareTo(c2.getSuit());
            if (compare < 0) {
                return -1;
            }
            if (compare > 0) {
                return +1;
            }
            return 0;
        }
    }
}

@7193ed332ceb96ffcbe738a452cdbd0e@"
"r04921012","0","0.66","110912","@740def1bd22c0f30a4d7d61c7d9c01c0@
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(SUIT_ORDER.compare(this,that)==0){
            String faceOrder=""2345678910JQKA"";
            //String[] faceOrder={"" 2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"",""A""};
            if (faceOrder.indexOf(this.face)>faceOrder.indexOf(that.face))return 1;
            else if (faceOrder.indexOf(this.face)==faceOrder.indexOf(that.face))return 0;
            else return -1;
        }
        else
            return SUIT_ORDER.compare(this,that);
            
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        @Override
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            char ch1=c1.suit.charAt(0);
            char ch2=c2.suit.charAt(0);
            
            if ((int) ch1>(int) ch2)return 1;
            else if ((int) ch1==(int) ch2)return 0;
            else return -1;
            
        }
    }   
}


@740def1bd22c0f30a4d7d61c7d9c01c0@"
"r04921012","0","0.67","108032","@f7e5e08f5da471fcc013a3265ef9acc4@
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(SUIT_ORDER.compare(this,that)==0){
            //String faceOrder=""2345678910JQKA"";
            //if (faceOrder.indexOf(this.face)>faceOrder.indexOf(that.face))return 1;
            //else if (faceOrder.indexOf(this.face)==faceOrder.indexOf(that.face))return 0;
            String[] faceOrder={"" 2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"",""A""};
            int thisI=0;
            int thatI=0;
            for (int i=0;i<13;i++){
                if (faceOrder[i].equals(this.face))
                    thisI=i;
                if (faceOrder[i].equals(that.face))
                    thatI=i;
            }
            if (thisI>thatI)return 1;
            else if (thisI==thatI)return 0;
            else return -1;
        }
        else
            return SUIT_ORDER.compare(this,that);
            
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        @Override
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            char ch1=c1.suit.charAt(0);
            char ch2=c2.suit.charAt(0);
            
            if ((int) ch1>(int) ch2)return 1;
            else if ((int) ch1==(int) ch2)return 0;
            else return -1;
            
        }
    }   
}


@f7e5e08f5da471fcc013a3265ef9acc4@"
"r04921012","5","0.132","110976","@a2e84e3715ca25c089db7d941eaaf5c0@
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        
            //String faceOrder=""2345678910JQKA"";
            //if (faceOrder.indexOf(this.face)>faceOrder.indexOf(that.face))return 1;
            //else if (faceOrder.indexOf(this.face)==faceOrder.indexOf(that.face))return 0;
            String[] faceOrder={"" 2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"",""A""};
            int thisI=0;
            int thatI=0;
            for (int i=0;i<13;i++){
                if (faceOrder[i].equals(this.face))
                    thisI=i;
                if (faceOrder[i].equals(that.face))
                    thatI=i;
            }
            if (thisI>thatI)return 1;
            else if (thisI==thatI){
                return SUIT_ORDER.compare(this,that);
            }
            else return -1;
        
        
            
            
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        @Override
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            char ch1=c1.suit.charAt(0);
            char ch2=c2.suit.charAt(0);
            
            if ((int) ch1>(int) ch2)return 1;
            else if ((int) ch1==(int) ch2)return 0;
            else return -1;
            
        }
    }   
}


@a2e84e3715ca25c089db7d941eaaf5c0@"
"r04921065","5","0.128","111712","@ae2e4e7652417637e2f7b7712415eb5a@
import java.util.Comparator;

public class Card implements Comparable<Card> {


	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }

    Card() {
        throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates.
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    public int changeFace(Card c){
        int value1 = 0;
        switch(c.face){
            case(""A""):
                return 14;
            case(""J""):
                return 11;
            case(""Q""):
                return 12;
            case(""K""):
                return 13;
            default:
                return Integer.parseInt(c.face);
        }      
    }
    
       public int changeSuit(Card c){
        int value2 = 0;
        switch(c.suit){
            case(""Spades""):
                return 4;
            case(""Hearts""):
                return 3;
            case(""Diamonds""):
                return 2;
            case(""Clubs""):
                return 1;
        }      
        return 50;
    }
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int v1 = this.changeFace(this);
        int v2 = that.changeFace(that);
        
        int t1 = this.changeSuit(this);
        int t2 = that.changeSuit(that);
        
        if (v1>v2) return 1;
        if (v1<v2) return -1;
        if (t1>t2) return 1;
        if (t1<t2) return -1;

        return 0;
    }  

    // TODO
    // 有static的function 不用宣告新的物件就可以用了
    private static class SuitOrder implements Comparator<Card> { // 只考慮Suit 花色
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit

        int s1 = c1.changeSuit(c1);
        int s2 = c2.changeSuit(c2);
        
        if (s1>s2) return 1;
        if (s1<s2) return -1;
            
            return 0; //同花色
        }
    }   
}


@ae2e4e7652417637e2f7b7712415eb5a@"
"r03222054","0","0.65","112976","@2280e25efb34e967b8a1a97cd8418cc9@
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) 
    {
        int faceInt = faceToMap(that.face);
        int suitInt = faceToMap(that.suit);
        int thisFaceInt = faceToMap(this.face);
        int thisSuitInt = faceToMap(this.suit);
       
        if (thisFaceInt> faceInt)
            return 1;
        else if (thisFaceInt< faceInt)
            return -1;
        else if (thisSuitInt> suitInt)
            return 1;
        else if (thisSuitInt< suitInt)
            return -1;
        else return 0;
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
    }  
    public static int faceToMap(String faceStr)
    {
        if(isInteger(faceStr))
        {
            int key = Integer.parseInt(faceStr) ;
            return key;
        }
        
        else if (faceStr.equals(""A""))
            return 14;
        else if (faceStr.equals(""K""))
            return 13;
        else if (faceStr.equals(""Q""))
            return 12;
        else if(faceStr.equals(""J""))
            return 11;
            else 
            return 0;
    }
    
        public static int suitToMap(String suitStr)
    {

        if (suitStr.equals(""Spades""))
            return 3;
        else if (suitStr.equals(""Hearts""))
            return 2;
        else if (suitStr.equals(""Diamonds""))
            return 1;
        else if(suitStr.equals(""Clubs""))
            return 0;
            else 
            return 0;
    }
    
    public static boolean isInteger(String s) 
    {
    try { 
        Integer.parseInt(s); 
    } catch(NumberFormatException e) { 
        return false; 
    } catch(NullPointerException e) {
        return false;
    }
    // only got here if we didn't return false
    return true;
}
    

    // TODO
    
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) 
        {
            return suitToMap(c1.suit) - suitToMap(c2.suit); 
            // complete this function so the Card can be sorted according to the suit
          //  return 0;
        }
    }   
}

@2280e25efb34e967b8a1a97cd8418cc9@"
"r03222054","0","0.67","112096","@98335fba92561c02deffb86cf79624e5@
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) 
    {
        int faceInt = faceToMap(that.face);
        int suitInt = faceToMap(that.suit);
        int thisFaceInt = faceToMap(this.face);
        int thisSuitInt = faceToMap(this.suit);
       
        if (thisFaceInt> faceInt)
            return -1;
        else if (thisFaceInt< faceInt)
            return 1;
        else if (thisSuitInt> suitInt)
            return -1;
        else if (thisSuitInt< suitInt)
            return 1;
        else return 0;
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
    }  
    public static int faceToMap(String faceStr)
    {
        if(isInteger(faceStr))
        {
            int key = Integer.parseInt(faceStr) ;
            return key;
        }
        
        else if (faceStr.equals(""A""))
            return 14;
        else if (faceStr.equals(""K""))
            return 13;
        else if (faceStr.equals(""Q""))
            return 12;
        else if(faceStr.equals(""J""))
            return 11;
            else 
            return 0;
    }
    
        public static int suitToMap(String suitStr)
    {

        if (suitStr.equals(""Spades""))
            return 3;
        else if (suitStr.equals(""Hearts""))
            return 2;
        else if (suitStr.equals(""Diamonds""))
            return 1;
        else if(suitStr.equals(""Clubs""))
            return 0;
            else 
            return 0;
    }
    
    public static boolean isInteger(String s) 
    {
    try { 
        Integer.parseInt(s); 
    } catch(NumberFormatException e) { 
        return false; 
    } catch(NullPointerException e) {
        return false;
    }
    // only got here if we didn't return false
    return true;
}
    

    // TODO
    
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) 
        {
            return suitToMap(c1.suit) - suitToMap(c2.suit); 
            // complete this function so the Card can be sorted according to the suit
          //  return 0;
        }
    }   
}

@98335fba92561c02deffb86cf79624e5@"
"r04921104","5","0.128","109856","@308b3787fae085b8dbbd08c3a074cb17@import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
    private int facecode, suitcode;

    private static void setcode(Card c) {
        switch (c.face) {
            case ""A"":
                c.facecode = 14;
                break;
            case ""K"":
                c.facecode = 13;
                break;
            case ""Q"":
                c.facecode = 12;
                break;
            case ""J"":
                c.facecode = 11;
                break;
            default:
                c.facecode = Integer.parseInt(c.face);
        }

        switch (c.suit) {
            case ""Spades"":
                c.suitcode = 4;
                break;
            case ""Hearts"":
                c.suitcode = 3;
                break;
            case ""Diamonds"":
                c.suitcode = 2;
                break;
            case ""Clubs"":
                c.suitcode = 1;
                break;
        }
    }

    public int getfacecode() {
        return this.facecode;
    }

    public int getsuitcode() {
        return this.suitcode;
    }

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
        setcode(this);
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (this.facecode < that.facecode) {
            return -1;
        }
        if (this.facecode > that.facecode) {
            return +1;
        }
        if (this.suitcode < that.suitcode) {
            return -1;
        }
        if (this.suitcode > that.suitcode) {
            return +1;
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit

            if (c1.suitcode < c2.suitcode) {
                return -1;
            }
            if (c1.suitcode > c2.suitcode) {
                return +1;
            }
            return 0;
        }
    }
}
@308b3787fae085b8dbbd08c3a074cb17@"
"b02611016","0","0.088","104336","@c904054fa9bd161f6f03a43cabe927cd@
import java.util.Comparator;
import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Lab304
 */
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(this.face==""A""){this.face=""14"";}
        else if(this.face==""K""){this.face=""13"";}
        else if(this.face==""Q""){this.face=""12"";}
        else if(this.face==""J""){this.face=""11"";}
        
        if(that.face==""A""){that.face=""14"";}
        else if(that.face==""K""){that.face=""13"";}
        else if(that.face==""Q""){that.face=""12"";}
        else if(that.face==""J""){that.face=""11"";}
        
        int this_point=Integer.parseInt(this.face);
        int that_point=Integer.parseInt(that.face);
        
        if(this_point>that_point){return +1;}
        if(this_point<that_point){return -1;}
        if(this_point==that_point){
        int this_suit=0;
        int that_suit=0;
         if(this.suit==""Spades""){this_suit=4;}
        else if(this.suit==""Hearts""){this_suit=3;}
        else if(this.suit==""Diamonds""){this_suit=2;}
        else if(this.suit==""Clubs""){this_suit=1;}
         
         if(that.suit==""Spades""){that_suit=4;}
         else if(that.suit==""Hearts""){that_suit=3;}
         else if(that.suit==""Diamonds""){that_suit=2;}
         else if(that.suit==""Clubs""){that_suit=1;}
         
         if(this_suit>that_suit){return +1;}
         if(this_suit<that_suit){return -1;}
        }
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
        int this_suit=0;
        int that_suit=0;
         if(c1.suit==""Spades""){this_suit=4;}
        else if(c1.suit==""Hearts""){this_suit=3;}
        else if(c1.suit==""Diamonds""){this_suit=2;}
        else if(c1.suit==""Clubs""){this_suit=1;}
         
         if(c2.suit==""Spades""){that_suit=4;}
         else if(c2.suit==""Hearts""){that_suit=3;}
         else if(c2.suit==""Diamonds""){that_suit=2;}
         else if(c2.suit==""Clubs""){that_suit=1;}
         
         if(this_suit>that_suit){return +1;}
         if(this_suit<that_suit){return -1;}
            
            return 0;
        }
    }   
    
    
      public static void main(String[] args) throws Exception{

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
        
            int idx = 0;
            int playerCount = Integer.parseInt(br.readLine());
            Player[] playerArray = new Player[playerCount];

            for(String in = br.readLine(); in != null; in = br.readLine()) {
                String name = in;
                Player player = new Player(name);
                playerArray[idx++] = player;

                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                
                player.setCards(cardsArray);
            }

            Arrays.sort(playerArray);
            System.out.println(playerArray[playerCount-4].getName());
        }
    }
      
}


@c904054fa9bd161f6f03a43cabe927cd@"
"b02611016","0","0","0","@4a48effe383a25a36fab58867ade1f03@
import java.util.Comparator;
import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Lab304
 */
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(this.face==""A""){this.face=""14"";}
        else if(this.face==""K""){this.face=""13"";}
        else if(this.face==""Q""){this.face=""12"";}
        else if(this.face==""J""){this.face=""11"";}
        
        if(that.face==""A""){that.face=""14"";}
        else if(that.face==""K""){that.face=""13"";}
        else if(that.face==""Q""){that.face=""12"";}
        else if(that.face==""J""){that.face=""11"";}
        
        int this_point=Integer.parseInt(this.face);
        int that_point=Integer.parseInt(that.face);
        
        if(this_point>that_point){return +1;}
        if(this_point<that_point){return -1;}
        if(this_point==that_point){
        int this_suit=0;
        int that_suit=0;
         if(this.suit==""Spades""){this_suit=4;}
        else if(this.suit==""Hearts""){this_suit=3;}
        else if(this.suit==""Diamonds""){this_suit=2;}
        else if(this.suit==""Clubs""){this_suit=1;}
         
         if(that.suit==""Spades""){that_suit=4;}
         else if(that.suit==""Hearts""){that_suit=3;}
         else if(that.suit==""Diamonds""){that_suit=2;}
         else if(that.suit==""Clubs""){that_suit=1;}
         
         if(this_suit>that_suit){return +1;}
         if(this_suit<that_suit){return -1;}
        }
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
        int this_suit=0;
        int that_suit=0;
         if(c1.suit==""Spades""){this_suit=4;}
        else if(c1.suit==""Hearts""){this_suit=3;}
        else if(c1.suit==""Diamonds""){this_suit=2;}
        else if(c1.suit==""Clubs""){this_suit=1;}
         
         if(c2.suit==""Spades""){that_suit=4;}
         else if(c2.suit==""Hearts""){that_suit=3;}
         else if(c2.suit==""Diamonds""){that_suit=2;}
         else if(c2.suit==""Clubs""){that_suit=1;}
         
         if(this_suit>that_suit){return +1;}
         if(this_suit<that_suit){return -1;}
            
            return 0;
        }
    }   
    
    
  /*   public static void main(String[] args) throws Exception{

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
        
            int idx = 0;
            int playerCount = Integer.parseInt(br.readLine());
            Player[] playerArray = new Player[playerCount];

            for(String in = br.readLine(); in != null; in = br.readLine()) {
                String name = in;
                Player player = new Player(name);
                playerArray[idx++] = player;

                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                
                player.setCards(cardsArray);
            }

            Arrays.sort(playerArray);
            System.out.println(playerArray[playerCount-4].getName());
        }
    }*/
      
}


@4a48effe383a25a36fab58867ade1f03@"
"b02611016","0","0","0","@2f782664d70549d8e1ef21bcb1913137@
import java.util.Comparator;
import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Lab304
 */
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(this.face==""A""){this.face=""14"";}
        else if(this.face==""K""){this.face=""13"";}
        else if(this.face==""Q""){this.face=""12"";}
        else if(this.face==""J""){this.face=""11"";}
        
        if(that.face==""A""){that.face=""14"";}
        else if(that.face==""K""){that.face=""13"";}
        else if(that.face==""Q""){that.face=""12"";}
        else if(that.face==""J""){that.face=""11"";}
        
        int this_point=Integer.parseInt(this.face);
        int that_point=Integer.parseInt(that.face);
        
        if(this_point>that_point){return +1;}
        if(this_point<that_point){return -1;}
        if(this_point==that_point){
        int this_suit=0;
        int that_suit=0;
         if(this.suit==""Spades""){this_suit=4;}
        else if(this.suit==""Hearts""){this_suit=3;}
        else if(this.suit==""Diamonds""){this_suit=2;}
        else if(this.suit==""Clubs""){this_suit=1;}
         
         if(that.suit==""Spades""){that_suit=4;}
         else if(that.suit==""Hearts""){that_suit=3;}
         else if(that.suit==""Diamonds""){that_suit=2;}
         else if(that.suit==""Clubs""){that_suit=1;}
         
         if(this_suit>that_suit){return +1;}
         if(this_suit<that_suit){return -1;}
        }
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
        int this_suit=0;
        int that_suit=0;
         if(c1.suit==""Spades""){this_suit=4;}
        else if(c1.suit==""Hearts""){this_suit=3;}
        else if(c1.suit==""Diamonds""){this_suit=2;}
        else if(c1.suit==""Clubs""){this_suit=1;}
         
         if(c2.suit==""Spades""){that_suit=4;}
         else if(c2.suit==""Hearts""){that_suit=3;}
         else if(c2.suit==""Diamonds""){that_suit=2;}
         else if(c2.suit==""Clubs""){that_suit=1;}
         
         if(this_suit>that_suit){return +1;}
         if(this_suit<that_suit){return -1;}
            
            return 0;
        }
    }   
    
    
     public static void main(String[] args) throws Exception{

       /* try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
        
            int idx = 0;
            int playerCount = Integer.parseInt(br.readLine());
            Player[] playerArray = new Player[playerCount];

            for(String in = br.readLine(); in != null; in = br.readLine()) {
                String name = in;
                Player player = new Player(name);
                playerArray[idx++] = player;

                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                
                player.setCards(cardsArray);
            }

            Arrays.sort(playerArray);
            System.out.println(playerArray[playerCount-4].getName());
        }*/
    }
      
}


@2f782664d70549d8e1ef21bcb1913137@"
"b02611016","0","0","0","@b67232a233cd4aa8fb3d9a4d9499e3c6@
import java.util.Comparator;
import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Lab304
 */
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int  this_point=0;
        int  that_point=0;
        
        if(this.face==""A""){this_point=14;}
        else if(this.face==""K""){this_point=13;}
        else if(this.face==""Q""){this_point=12;}
        else if(this.face==""J""){this_point=11;}
        
        if(that.face==""A""){that_point=14;}
        else if(that.face==""K""){that_point=13;}
        else if(that.face==""Q""){that_point=12;}
        else if(that.face==""J""){that_point=11;}
        
        else{
         this_point=Integer.parseInt(this.face);
         that_point=Integer.parseInt(that.face);}
        
        if(this_point>that_point){return +1;}
        if(this_point<that_point){return -1;}
        if(this_point==that_point){
        int this_suit=0;
        int that_suit=0;
         if(this.suit==""Spades""){this_suit=4;}
        else if(this.suit==""Hearts""){this_suit=3;}
        else if(this.suit==""Diamonds""){this_suit=2;}
        else if(this.suit==""Clubs""){this_suit=1;}
         
         if(that.suit==""Spades""){that_suit=4;}
         else if(that.suit==""Hearts""){that_suit=3;}
         else if(that.suit==""Diamonds""){that_suit=2;}
         else if(that.suit==""Clubs""){that_suit=1;}
         
         if(this_suit>that_suit){return +1;}
         if(this_suit<that_suit){return -1;}
        }
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
        int this_suit=0;
        int that_suit=0;
         if(c1.suit==""Spades""){this_suit=4;}
        else if(c1.suit==""Hearts""){this_suit=3;}
        else if(c1.suit==""Diamonds""){this_suit=2;}
        else if(c1.suit==""Clubs""){this_suit=1;}
         
         if(c2.suit==""Spades""){that_suit=4;}
         else if(c2.suit==""Hearts""){that_suit=3;}
         else if(c2.suit==""Diamonds""){that_suit=2;}
         else if(c2.suit==""Clubs""){that_suit=1;}
         
         if(this_suit>that_suit){return +1;}
         if(this_suit<that_suit){return -1;}
            
            return 0;
        }
    }   
    
    
     public static void main(String[] args) throws Exception{

       /* try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
        
            int idx = 0;
            int playerCount = Integer.parseInt(br.readLine());
            Player[] playerArray = new Player[playerCount];

            for(String in = br.readLine(); in != null; in = br.readLine()) {
                String name = in;
                Player player = new Player(name);
                playerArray[idx++] = player;

                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                
                player.setCards(cardsArray);
            }

            Arrays.sort(playerArray);
            System.out.println(playerArray[playerCount-4].getName());
        }*/
    }
      
}


@b67232a233cd4aa8fb3d9a4d9499e3c6@"
"b02611016","0","0.64","111024","@7400a5ae9fcbd97fb20310119c31a48c@
import java.util.Comparator;
import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Lab304
 */
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int  this_point=0;
        int  that_point=0;
        
        if(this.face.equals(""A"")){this_point=14;}
        else if(this.face.equals(""K"")){this_point=13;}
        else if(this.face.equals(""Q"")){this_point=12;}
        else if(this.face.equals(""J"")){this_point=11;}
        else{ this_point=Integer.parseInt(this.face);}
        
         if(that.face.equals(""A"")){that_point=14;}
         else if(that.face.equals(""K"")){that_point=13;}
         else if(that.face.equals(""Q"")){that_point=12;}
         else if(that.face.equals(""J"")){that_point=11;}
         else{
         that_point=Integer.parseInt(that.face);}
        
        if(this_point>that_point){return +1;}
        if(this_point<that_point){return -1;}
        if(this_point==that_point){
        int this_suit=0;
        int that_suit=0;
         if(this.suit==""Spades""){this_suit=4;}
        else if(this.suit==""Hearts""){this_suit=3;}
        else if(this.suit==""Diamonds""){this_suit=2;}
        else if(this.suit==""Clubs""){this_suit=1;}
         
         if(that.suit==""Spades""){that_suit=4;}
         else if(that.suit==""Hearts""){that_suit=3;}
         else if(that.suit==""Diamonds""){that_suit=2;}
         else if(that.suit==""Clubs""){that_suit=1;}
         
         if(this_suit>that_suit){return +1;}
         if(this_suit<that_suit){return -1;}
        }
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
        int this_suit=0;
        int that_suit=0;
         if(c1.suit==""Spades""){this_suit=4;}
        else if(c1.suit==""Hearts""){this_suit=3;}
        else if(c1.suit==""Diamonds""){this_suit=2;}
        else if(c1.suit==""Clubs""){this_suit=1;}
         
         if(c2.suit==""Spades""){that_suit=4;}
         else if(c2.suit==""Hearts""){that_suit=3;}
         else if(c2.suit==""Diamonds""){that_suit=2;}
         else if(c2.suit==""Clubs""){that_suit=1;}
         
         if(this_suit>that_suit){return +1;}
         if(this_suit<that_suit){return -1;}
            
            return 0;
        }
    }   
    
    
     public static void main(String[] args) throws Exception{

        /*try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
        
            int idx = 0;
            int playerCount = Integer.parseInt(br.readLine());
            Player[] playerArray = new Player[playerCount];

            for(String in = br.readLine(); in != null; in = br.readLine()) {
                String name = in;
                Player player = new Player(name);
                playerArray[idx++] = player;

                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                
                player.setCards(cardsArray);
              System.out.println( cardsArray[2].compareTo(cardsArray[4]));
            }

            Arrays.sort(playerArray);
            System.out.println(playerArray[playerCount-3].getName());
        }*/
    }
      
}


@7400a5ae9fcbd97fb20310119c31a48c@"
"b01502105","5","0.128","111712","@124c638995de0fca4dc918b903747e20@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
    public int face_int;
    public int suit_int;

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
        
        if(face.equals(""A""))      this.face_int = 14;
        else if(face.equals(""J"")) this.face_int = 11;
        else if(face.equals(""Q"")) this.face_int = 12;
        else if(face.equals(""K"")) this.face_int = 13;
        else this.face_int = Integer.parseInt(face);
        
        switch(suit){
            case ""Clubs"":    this.suit_int = 1; break;
            case ""Diamonds"": this.suit_int = 2; break;    
            case ""Hearts"":   this.suit_int = 3; break;
            case ""Spades"":   this.suit_int = 4; break;
            default: System.out.printf(""suit_input wrong\n"");
        }
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if (this.face_int < that.face_int) return -1;
        if (this.face_int > that.face_int) return +1;
        if (this.suit_int < that.suit_int) return -1;
        if (this.suit_int > that.suit_int) return +1;
        return 0;
    }
    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if (c1.suit_int < c2.suit_int) return -1;
            if (c1.suit_int > c2.suit_int) return +1;
            return 0;
        }
    }
}

@124c638995de0fca4dc918b903747e20@"
"b02611016","5","0.124","110960","@7c2d63c4fa71fd8c80bf3d06dd9a58f6@
import java.util.Comparator;
import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Lab304
 */
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int  this_point=0;
        int  that_point=0;
        
        if(this.face.equals(""A"")){this_point=14;}
        else if(this.face.equals(""K"")){this_point=13;}
        else if(this.face.equals(""Q"")){this_point=12;}
        else if(this.face.equals(""J"")){this_point=11;}
        else{ this_point=Integer.parseInt(this.face);}
        
         if(that.face.equals(""A"")){that_point=14;}
         else if(that.face.equals(""K"")){that_point=13;}
         else if(that.face.equals(""Q"")){that_point=12;}
         else if(that.face.equals(""J"")){that_point=11;}
         else{
         that_point=Integer.parseInt(that.face);}
        
        if(this_point>that_point){return +1;}
        if(this_point<that_point){return -1;}
        if(this_point==that_point){
        int this_suit=0;
        int that_suit=0;
         if(this.suit.equals(""Spades"")){this_suit=4;}
        else if(this.suit.equals(""Hearts"")){this_suit=3;}
        else if(this.suit.equals(""Diamonds"")){this_suit=2;}
        else if(this.suit.equals(""Clubs"")){this_suit=1;}
         
         if(that.suit.equals(""Spades"")){that_suit=4;}
         else if(that.suit.equals(""Hearts"")){that_suit=3;}
         else if(that.suit.equals(""Diamonds"")){that_suit=2;}
         else if(that.suit.equals(""Clubs"")){that_suit=1;}
         
         if(this_suit>that_suit){return +1;}
         if(this_suit<that_suit){return -1;}
        }
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
        int this_suit=0;
        int that_suit=0;
         if(c1.suit.equals(""Spades"")){this_suit=4;}
        else if(c1.suit.equals(""Hearts"")){this_suit=3;}
        else if(c1.suit.equals(""Diamonds"")){this_suit=2;}
        else if(c1.suit.equals(""Clubs"")){this_suit=1;}
         
         if(c2.suit.equals(""Spades"")){that_suit=4;}
         else if(c2.suit.equals(""Hearts"")){that_suit=3;}
         else if(c2.suit.equals(""Diamonds"")){that_suit=2;}
         else if(c2.suit.equals(""Clubs"")){that_suit=1;}
         
         if(this_suit>that_suit){return +1;}
         if(this_suit<that_suit){return -1;}
            
            return 0;
        }
    }   
    
    
     public static void main(String[] args) throws Exception{

     /*   try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
        
            int idx = 0;
            int playerCount = Integer.parseInt(br.readLine());
            Player[] playerArray = new Player[playerCount];

            for(String in = br.readLine(); in != null; in = br.readLine()) {
                String name = in;
                Player player = new Player(name);
                playerArray[idx++] = player;

                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                
                player.setCards(cardsArray);
                // Arrays.sort(cardsArray, cardsArray[2]SuitOrder);
              System.out.println( cardsArray[4].compareTo(cardsArray[3]));
               
            }

            Arrays.sort(playerArray);
            System.out.println(playerArray[playerCount-3].getName());
        }*/
    }
      
}


@7c2d63c4fa71fd8c80bf3d06dd9a58f6@"
"r03723070","5","0.132","110960","@2347c2178e82bacbd6dedd6029f948cb@
import java.util.Comparator;
import java.util.Arrays;

public class Card implements Comparable<Card> {

	private String face; // should be one of should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
        protected int facesize;
        protected int suitsize;
	private String [] Osuit = {""Clubs"",""Diamonds"",""Hearts"",""Spades""};
        private String [] Oface = {""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"",""A""};

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;//give card's face
        this.suit = suit;//give card's number
        for (int i = 0;i<4;i++){
            if(Osuit[i].equals(this.suit)){
                 this.suitsize =i;
            }
        } 
        for (int i = 0;i<13;i++){
            if(Oface[i].equals(this.face)){
                 this.facesize =i;
            }
        }
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        //give the number
        if(this.facesize> that.facesize){
            return 1;
        }
        if(this.facesize< that.facesize){
            return -1;
        }
        else{
            return SUIT_ORDER.compare(this, that);
        }
        // (you must consider both face and suit)
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if(c1.suitsize< c2.suitsize){
                return -1;
            }
            if(c1.suitsize> c2.suitsize){
                return 1;
            }
            else{
                return 0;
            }
        }
    }   
}

@2347c2178e82bacbd6dedd6029f948cb@"
"b02611019","0","0.67","110368","@d60db393368247230808cf1d885fa4db@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        String a = this.face;
        String b = that.face;
        if (a==""Q"") a=""JQ"";
        if (a==""A"") a=""L"";
        if (b==""Q"") b=""JQ"";
        if (b==""A"") b=""L"";
        if (a.compareTo(b)>0)  return 1;
        if (a.compareTo(b)<0) return -1;
        if (a.compareTo(b)==0)  {
            if (this.suit.compareTo(that.suit)>0)   return +1;
            if (this.suit.compareTo(that.suit)<0)    return -1;
            return 0;
        }
                
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if (c1.suit.compareTo(c2.suit)>0)   return +1;
            if (c1.suit.compareTo(c2.suit)<0)    return -1;
            return 0;
        }
    }   
}

@d60db393368247230808cf1d885fa4db@"
"b02611019","0","0.65","110912","@51633e7fc7a35da6b16c5473fdd1aa41@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        String a = this.face;
        String b = that.face;
        if (a==""Q"") a=""JQ"";
        if (a==""A"") a=""L"";
        if (a==""2"") a=""M"";
        if (b==""Q"") b=""JQ"";
        if (b==""A"") b=""L"";
        if (b==""2"") b=""M"";
        if (a.compareTo(b)>0)  return 1;
        if (a.compareTo(b)<0) return -1;
        if (a.compareTo(b)==0)  {
            if (this.suit.compareTo(that.suit)>0)   return +1;
            if (this.suit.compareTo(that.suit)<0)    return -1;
            return 0;
        }
                
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if (c1.suit.compareTo(c2.suit)>0)   return +1;
            if (c1.suit.compareTo(c2.suit)<0)    return -1;
            return 0;
        }
    }   
}

@51633e7fc7a35da6b16c5473fdd1aa41@"
"b02611019","0","0.65","110320","@e6573a20abdafece327dd41fc715d07a@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        String a = this.face;
        String b = that.face;
        if (a==""Q"") a=""JQ"";
        if (a==""A"") a=""L"";
        if (b==""Q"") b=""JQ"";
        if (b==""A"") b=""L"";
        if (a.compareTo(b)>0)  return 1;
        if (a.compareTo(b)<0) return -1;
        if (a.compareTo(b)==0)  {
            if (this.suit.compareTo(that.suit)>0)   return +1;
            if (this.suit.compareTo(that.suit)<0)    return -1;
            return 0;
        }
                
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if (c1.getSuit().compareTo(c2.getSuit())>0)   return +1;
            if (c1.getSuit().compareTo(c2.getSuit())<0)    return -1;
            return 0;
        }
    }   
}

@e6573a20abdafece327dd41fc715d07a@"
"b02611019","0","0.64","107504","@64b605b4a75368299e3d437fa02c2a6b@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        String a = this.face;
        String b = that.face;
        if (a==""Q"") a=""JQ"";
        if (a==""A"") a=""L"";
        if (b==""Q"") b=""JQ"";
        if (b==""A"") b=""L"";
        if (a.compareTo(b)>0)  return 1;
        if (a.compareTo(b)<0) return -1;
        if (a.compareTo(b)==0)  {
            if (this.getSuit().compareTo(that.getSuit())>0)   return +1;
            if (this.getSuit().compareTo(that.getSuit())<0)    return -1;
            return 0;
        }
                
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if (c1.getSuit().compareTo(c2.getSuit())>0)   return +1;
            if (c1.getSuit().compareTo(c2.getSuit())<0)    return -1;
            return 0;
        }
    }   
}

@64b605b4a75368299e3d437fa02c2a6b@"
"b02611019","0","0.64","110960","@df0adc705de8bf6b340e0879824c4673@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        String a = this.face;
        String b = that.face;
        if (a==""Q"") a=""JQ"";
        if (a==""A"") a=""L"";
        if (b==""Q"") b=""JQ"";
        if (b==""A"") b=""L"";
        if (a.compareTo(b)>0)  return 1;
        if (a.compareTo(b)<0) return -1;
        
            if (this.getSuit().compareTo(that.getSuit())>0)   return +1;
            if (this.getSuit().compareTo(that.getSuit())<0)    return -1;
            return 0;
        
         
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if (c1.getSuit().compareTo(c2.getSuit())>0)   return +1;
            if (c1.getSuit().compareTo(c2.getSuit())<0)    return -1;
            return 0;
        }
    }   
}

@df0adc705de8bf6b340e0879824c4673@"
"b02611019","0","0.67","111600","@956405e4399c280cf091b11e91c15485@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
    private int intsuit;
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
        switch (suit) {
            case ""Spades"":
                this.intsuit = 3;
                break;
            case ""Hearts"":
                this.intsuit = 2;
                break;
            case ""Diamonds"":
                this.intsuit = 1;
                break;
            case ""Clubs"":
                this.intsuit = 0;
                break;

        }
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        String a = this.face;
        String b = that.face;
        if (a == ""Q"") {
            a = ""JQ"";
        }
        if (a == ""A"") {
            a = ""L"";
        }
        if (b == ""Q"") {
            b = ""JQ"";
        }
        if (b == ""A"") {
            b = ""L"";
        }
        if (a.compareTo(b) > 0) {
            return 1;
        }
        if (a.compareTo(b) < 0) {
            return -1;
        }
        if (this.getSuit().compareTo(that.getSuit()) > 0) {
            return +1;
        }
        if (this.getSuit().compareTo(that.getSuit()) < 0) {
            return -1;
        }
        return 0;

    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if (c1.getSuit().compareTo(c2.getSuit()) > 0) {
                return +1;
            }
            if (c1.getSuit().compareTo(c2.getSuit()) < 0) {
                return -1;
            }
            return 0;
        }
    }
}

@956405e4399c280cf091b11e91c15485@"
"b02611019","0","0.64","108192","@fc8ab2d146b8f21c2b43584fc1a566bf@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
    private int intsuit;
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
        switch (suit) {
            case ""Spades"":
                this.intsuit = 3;
                break;
            case ""Hearts"":
                this.intsuit = 2;
                break;
            case ""Diamonds"":
                this.intsuit = 1;
                break;
            case ""Clubs"":
                this.intsuit = 0;
                break;

        }
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        String a = this.face;
        String b = that.face;
        if (a == ""Q"") {
            a = ""JQ"";
        }
        if (a == ""A"") {
            a = ""L"";
        }
        if (a == ""10"") {
            a = ""91"";
        }
        if (b == ""Q"") {
            b = ""JQ"";
        }
        if (b == ""A"") {
            b = ""L"";
        }
        if (b == ""10"") {
            b = ""91"";
        }
        if (a.compareTo(b) > 0) {
            return 1;
        }
        if (a.compareTo(b) < 0) {
            return -1;
        }
        if (this.getSuit().compareTo(that.getSuit()) > 0) {
            return +1;
        }
        if (this.getSuit().compareTo(that.getSuit()) < 0) {
            return -1;
        }
        return 0;

    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if (c1.getSuit().compareTo(c2.getSuit()) > 0) {
                return +1;
            }
            if (c1.getSuit().compareTo(c2.getSuit()) < 0) {
                return -1;
            }
            return 0;
        }
    }
}

@fc8ab2d146b8f21c2b43584fc1a566bf@"
"b02611019","2","0.63","111072","@0c7cece1d1f9d14fc81d5022af8b3f12@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
    private int intsuit;
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
//        switch (suit) {
//            case ""Spades"":
//                this.intsuit = 3;
//                break;
//            case ""Hearts"":
//                this.intsuit = 2;
//                break;
//            case ""Diamonds"":
//                this.intsuit = 1;
//                break;
//            case ""Clubs"":
//                this.intsuit = 0;
//                break;
//        }
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        String a = this.face;
        String b = that.face;
        if (a.equals( ""Q"")) {
            a = ""JQ"";
        }
        if (a.equals(""A"")) {
            a = ""L"";
        }
        if (a == ""10"") {
            a = ""99"";
        }
        if (b.equals( ""Q"")) {
            b = ""JQ"";
        }
        if (b.equals(""A"")) {
            b = ""L"";
        }
        if (b.equals( ""10"")) {
            b = ""99"";
        }
        if (a.compareTo(b) > 0) {
            return 1;
        }
        if (a.compareTo(b) < 0) {
            return -1;
        }
        if (this.getSuit().compareTo(that.getSuit()) > 0) {
            return +1;
        }
        if (this.getSuit().compareTo(that.getSuit()) < 0) {
            return -1;
        }
        return 0;

    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if (c1.getSuit().compareTo(c2.getSuit()) > 0) {
                return +1;
            }
            if (c1.getSuit().compareTo(c2.getSuit()) < 0) {
                return -1;
            }
            return 0;
        }
    }
}

@0c7cece1d1f9d14fc81d5022af8b3f12@"
"b02611019","5","0.128","110976","@adccbd5fbbddc9c720a2b2819b9df595@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
    private int intsuit;
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
//        switch (suit) {
//            case ""Spades"":
//                this.intsuit = 3;
//                break;
//            case ""Hearts"":
//                this.intsuit = 2;
//                break;
//            case ""Diamonds"":
//                this.intsuit = 1;
//                break;
//            case ""Clubs"":
//                this.intsuit = 0;
//                break;
//        }
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        String a = this.face;
        String b = that.face;
        if (a.equals( ""Q"")) {
            a = ""JQ"";
        }
        if (a.equals(""A"")) {
            a = ""L"";
        }
        if (a.equals(""10"")) {
            a = ""99"";
        }
        if (b.equals( ""Q"")) {
            b = ""JQ"";
        }
        if (b.equals(""A"")) {
            b = ""L"";
        }
        if (b.equals( ""10"")) {
            b = ""99"";
        }
        if (a.compareTo(b) > 0) {
            return 1;
        }
        if (a.compareTo(b) < 0) {
            return -1;
        }
        if (this.getSuit().compareTo(that.getSuit()) > 0) {
            return +1;
        }
        if (this.getSuit().compareTo(that.getSuit()) < 0) {
            return -1;
        }
        return 0;

    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if (c1.getSuit().compareTo(c2.getSuit()) > 0) {
                return +1;
            }
            if (c1.getSuit().compareTo(c2.getSuit()) < 0) {
                return -1;
            }
            return 0;
        }
    }
}

@adccbd5fbbddc9c720a2b2819b9df595@"
"b02611028","5","0.13","110912","@381bd143489e850e5664ce2ed529372c@
import java.util.Comparator;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Han
 */
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
        
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
         int a=0;
         int b=0;
        if(!this.face.equals(""J"")&&!this.face.equals(""Q"")&&!this.face.equals(""K"")&&!this.face.equals(""A"")){
            a=Integer.parseInt(this.face);
        }
        else{
            if(this.face.equals(""J""))a=11;
            if(this.face.equals(""Q""))a=12;
            if(this.face.equals(""K""))a=13;
            if(this.face.equals(""A""))a=14;
        }
        if(!that.face.equals(""J"")&&!that.face.equals(""Q"")&&!that.face.equals(""K"")&&!that.face.equals(""A"")){
            b=Integer.parseInt(that.face);
        }
        else{
            if(that.face.equals(""J""))b=11;
            if(that.face.equals(""Q""))b=12;
            if(that.face.equals(""K""))b=13;
            if(that.face.equals(""A""))b=14;
        }
        if(a<b)return -1;
        if(a>b)return 1;
        if(a==b){
            int e=0,f=0;
            if (this.suit.equals(""Spades"")){
                e=4;
            }
            if (this.suit.equals(""Hearts"")){
                e=3;
            }
            if (this.suit.equals(""Diamonds"")){
                e=2;
            }
            if (this.suit.equals(""Clubs"")){
                e=1;
            }if (that.suit.equals(""Spades"")){
                f=4;
            }
            if (that.suit.equals(""Hearts"")){
                f=3;
            }
            if (that.suit.equals(""Diamonds"")){
                f=2;
            }
            if (that.suit.equals(""Clubs"")){
                f=1;
            }
            
            // complete this function so the Card can be sorted according to the suit
            if(e>f)return 1;
            if(e<f)return -1;
            return 0;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            int e=0,f=0;
            if (c1.suit.equals(""Spades"")){
                e=4;
            }
            if (c1.suit.equals(""Hearts"")){
                e=3;
            }
            if (c1.suit.equals(""Diamonds"")){
                e=2;
            }
            if (c1.suit.equals(""Clubs"")){
                e=1;
            }if (c2.suit.equals(""Spades"")){
                f=4;
            }
            if (c2.suit.equals(""Hearts"")){
                f=3;
            }
            if (c2.suit.equals(""Diamonds"")){
                f=2;
            }
            if (c2.suit.equals(""Clubs"")){
                f=1;
            }
            
            // complete this function so the Card can be sorted according to the suit
            if(e>f)return 1;
            if(e<f)return -1;
            return 0;
        }
    }   
}


@381bd143489e850e5664ce2ed529372c@"
"r04921115","0","0","0","@563d8cd7136002bdcfbd28ccbc92e2eb@import java.util.*;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
    	if(this.getFace().equals(""A"") & (!that.getFace().equals(""A"")) ){
    		return +1;
    	}else if (this.getFace().equals(""K"") & (!that.getFace().equals(""A"")) & (!that.getFace().equals(""K"")) ){
    		return +1;
    	}else if (this.getFace().equals(""Q"") & (!that.getFace().equals(""A"")) & (!that.getFace().equals(""K"")) & (!that.getFace().equals(""Q"")) ){
    		return +1;
    	}else if (this.getFace().equals(""J"") & (!that.getFace().equals(""A"")) & (!that.getFace().equals(""K"")) & (!that.getFace().equals(""Q"")) & (!that.getFace().equals(""J""))){
    		return +1;
    	}
    	//
    	if(that.getFace().equals(""A"") & (!this.getFace().equals(""A"")) ){
    		return -1;
    	}else if (that.getFace().equals(""K"") & (!this.getFace().equals(""A"")) & (!this.getFace().equals(""K"")) ){
    		return -1;
    	}else if (that.getFace().equals(""Q"") & (!this.getFace().equals(""A"")) & (!this.getFace().equals(""K"")) & (!this.getFace().equals(""Q"")) ){
    		return -1;
    	}else if (that.getFace().equals(""J"") & (!this.getFace().equals(""A"")) & (!this.getFace().equals(""K"")) & (!this.getFace().equals(""Q"")) & (!this.getFace().equals(""J""))){
    		return -1;
    	}
    	//
    	int a = Integer.parseInt(this.getFace());
    	int b = Integer.parseInt(that.getFace());
    	if(a > b){
    		return +1;
    	}else if(a < b){
    		return -1;
    	}else{
	    	if(this.getSuit().equals(""Spades"") & (!that.getSuit().equals(""Spades"")) ){
	    		return +1;
	    	}else if(this.getSuit().equals(""Hearts"") & (!that.getSuit().equals(""Spades"")) & (!that.getSuit().equals(""Hearts"")) ){
	    		return +1;
	    	}else if(this.getSuit().equals(""Diamonds"") & (!that.getSuit().equals(""Spades"")) & (!that.getSuit().equals(""Hearts"")) & (!that.getSuit().equals(""Diamonds"")) ){
	    		return +1;
	    	}else if(this.getSuit().equals(""Clubs"") & (!that.getSuit().equals(""Spades"")) & (!that.getSuit().equals(""Hearts"")) & (!that.getSuit().equals(""Diamonds"")) & (!that.getSuit().equals(""Clubs"")) ){
	    		return +1;
	    	}
	    	//
	    	if(that.getSuit().equals(""Spades"") & (!this.getSuit().equals(""Spades"")) ){
	    		return -1;
	    	}else if(that.getSuit().equals(""Hearts"") & (!this.getSuit().equals(""Spades"")) & (!this.getSuit().equals(""Hearts"")) ){
	    		return -1;
	    	}else if(that.getSuit().equals(""Diamonds"") & (!this.getSuit().equals(""Spades"")) & (!this.getSuit().equals(""Hearts"")) & (!this.getSuit().equals(""Diamonds"")) ){
	    		return -1;
	    	}else if(that.getSuit().equals(""Clubs"") & (!this.getSuit().equals(""Spades"")) & (!this.getSuit().equals(""Hearts"")) & (!this.getSuit().equals(""Diamonds"")) & (!this.getSuit().equals(""Clubs"")) ){
	    		return -1;
	    	}
    	}
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
        	if(c1.getSuit().equals(""Spades"") & (!c2.getSuit().equals(""Spades"")) ){
	    		return +1;
	    	}else if(c1.getSuit().equals(""Hearts"") & (!c2.getSuit().equals(""Spades"")) & (!c2.getSuit().equals(""Hearts"")) ){
	    		return +1;
	    	}else if(c1.getSuit().equals(""Diamonds"") & (!c2.getSuit().equals(""Spades"")) & (!c2.getSuit().equals(""Hearts"")) & (!c2.getSuit().equals(""Diamonds"")) ){
	    		return +1;
	    	}else if(c1.getSuit().equals(""Clubs"") & (!c2.getSuit().equals(""Spades"")) & (!c2.getSuit().equals(""Hearts"")) & (!c2.getSuit().equals(""Diamonds"")) & (!c2.getSuit().equals(""Clubs"")) ){
	    		return +1;
	    	}
        	
        	if(c2.getSuit().equals(""Spades"") & (!c1.getSuit().equals(""Spades"")) ){
	    		return -1;
	    	}else if(c2.getSuit().equals(""Hearts"") & (!c1.getSuit().equals(""Spades"")) & (!c1.getSuit().equals(""Hearts"")) ){
	    		return -1;
	    	}else if(c2.getSuit().equals(""Diamonds"") & (!c1.getSuit().equals(""Spades"")) & (!c1.getSuit().equals(""Hearts"")) & (!c1.getSuit().equals(""Diamonds"")) ){
	    		return -1;
	    	}else if(c2.getSuit().equals(""Clubs"") & (!c1.getSuit().equals(""Spades"")) & (!c1.getSuit().equals(""Hearts"")) & (!c1.getSuit().equals(""Diamonds"")) & (!c1.getSuit().equals(""Clubs"")) ){
	    		return -1;
	    	}
        	
        	return 0;
        }
    }   
}

@563d8cd7136002bdcfbd28ccbc92e2eb@"
"r03525008","5","0.132","108080","@8de57666c8a577f767321fd1557b52c7@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        String face1 = this.getFace();
        String face2 = that.getFace();
        if (face1.equals(face2)) {
            return SUIT_ORDER.compare(this , that);
        } else if (face1.equals(""A"")) {
            return 1;
        } else if (face1.equals(""K"")) {
            if (face2.equals(""A"")) return -1;
            else return 1;
        } else if (face1.equals(""Q"")) {
            if (face2.equals(""A"")) return -1;
            else if (face2.equals(""K"")) return -1;
            else return 1;
        } else if (face1.equals(""J"")) {
            if (face2.equals(""A"")) return -1;
            else if (face2.equals(""K"")) return -1;
            else if (face2.equals(""Q"")) return -1;
            else return 1;
        } else {
            try {
                Integer.parseInt(face2);
            } catch (NumberFormatException e){
                return -1;
            }
            if (Integer.parseInt(face1) > Integer.parseInt(face2)) return 1;
            else return -1;
        }
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {

            // complete this function so the Card can be sorted according to the suit

            String suit1 = c1.getSuit();
            String suit2 = c2.getSuit();
            if (suit1.equals(""Spades"")) {
                if (suit2.equals(""Spades"")) return 0;
                else return 1;
            } else if (suit1.equals(""Hearts"")) {
                if (suit2.equals(""Spades"")) return -1;
                else if (suit2.equals(""Hearts"")) return 0;
                else return 1;
            } else if (suit1.equals(""Diamonds"")) {
                if (suit2.equals(""Clubs"")) return 1;
                else if (suit2.equals(""Diamonds"")) return 0;
                else return -1;
            } else if (suit1.equals(""Clubs"")) {
                if (suit2.equals(""Clubs"")) return 0;
                else return -1;
            }
            return 0;
        }
    }   
}


@8de57666c8a577f767321fd1557b52c7@"
"r04921115","0","0.54","109648","@5af1fc9c666ab8b3f096e3c65802ceba@import java.util.*;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
    	String A = ""14"";
    	String K = ""13""; 
    	String Q = ""12""; 
    	String J = ""11"";
    	
    	
    	if(this.getFace().equals(""A"") & (!that.getFace().equals(""A"")) ){
    		return +1;
    	}else if (this.getFace().equals(""K"") & (!that.getFace().equals(""A"")) & (!that.getFace().equals(""K"")) ){
    		return +1;
    	}else if (this.getFace().equals(""Q"") & (!that.getFace().equals(""A"")) & (!that.getFace().equals(""K"")) & (!that.getFace().equals(""Q"")) ){
    		return +1;
    	}else if (this.getFace().equals(""J"") & (!that.getFace().equals(""A"")) & (!that.getFace().equals(""K"")) & (!that.getFace().equals(""Q"")) & (!that.getFace().equals(""J""))){
    		return +1;
    	}
    	//
    	if(that.getFace().equals(""A"") & (!this.getFace().equals(""A"")) ){
    		return -1;
    	}else if (that.getFace().equals(""K"") & (!this.getFace().equals(""A"")) & (!this.getFace().equals(""K"")) ){
    		return -1;
    	}else if (that.getFace().equals(""Q"") & (!this.getFace().equals(""A"")) & (!this.getFace().equals(""K"")) & (!this.getFace().equals(""Q"")) ){
    		return -1;
    	}else if (that.getFace().equals(""J"") & (!this.getFace().equals(""A"")) & (!this.getFace().equals(""K"")) & (!this.getFace().equals(""Q"")) & (!this.getFace().equals(""J""))){
    		return -1;
    	}
    	//	
    	
    	if(this.getFace().equals(that.getFace())){
	    	if(this.getSuit().equals(""Spades"") & (!that.getSuit().equals(""Spades"")) ){
	    		return +1;
	    	}else if(this.getSuit().equals(""Hearts"") & (!that.getSuit().equals(""Spades"")) & (!that.getSuit().equals(""Hearts"")) ){
	    		return +1;
	    	}else if(this.getSuit().equals(""Diamonds"") & (!that.getSuit().equals(""Spades"")) & (!that.getSuit().equals(""Hearts"")) & (!that.getSuit().equals(""Diamonds"")) ){
	    		return +1;
	    	}else if(this.getSuit().equals(""Clubs"") & (!that.getSuit().equals(""Spades"")) & (!that.getSuit().equals(""Hearts"")) & (!that.getSuit().equals(""Diamonds"")) & (!that.getSuit().equals(""Clubs"")) ){
	    		return +1;
	    	}
	    	//
	    	if(that.getSuit().equals(""Spades"") & (!this.getSuit().equals(""Spades"")) ){
	    		return -1;
	    	}else if(that.getSuit().equals(""Hearts"") & (!this.getSuit().equals(""Spades"")) & (!this.getSuit().equals(""Hearts"")) ){
	    		return -1;
	    	}else if(that.getSuit().equals(""Diamonds"") & (!this.getSuit().equals(""Spades"")) & (!this.getSuit().equals(""Hearts"")) & (!this.getSuit().equals(""Diamonds"")) ){
	    		return -1;
	    	}else if(that.getSuit().equals(""Clubs"") & (!this.getSuit().equals(""Spades"")) & (!this.getSuit().equals(""Hearts"")) & (!this.getSuit().equals(""Diamonds"")) & (!this.getSuit().equals(""Clubs"")) ){
	    		return -1;
	    	}
    	}
    	
    	String sa = this.getFace();
    	String sb = that.getFace();
    	System.out.println(""sa""+sa);
    	System.out.println(""sb""+sb);
    	int a = Integer.parseInt(sa);
    	int b = Integer.parseInt(sb);
    	if(a > b){
    		return +1;
    	}else if(a < b){
    		return -1;
    	}
    	
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
        	if(c1.getSuit().equals(""Spades"") & (!c2.getSuit().equals(""Spades"")) ){
	    		return +1;
	    	}else if(c1.getSuit().equals(""Hearts"") & (!c2.getSuit().equals(""Spades"")) & (!c2.getSuit().equals(""Hearts"")) ){
	    		return +1;
	    	}else if(c1.getSuit().equals(""Diamonds"") & (!c2.getSuit().equals(""Spades"")) & (!c2.getSuit().equals(""Hearts"")) & (!c2.getSuit().equals(""Diamonds"")) ){
	    		return +1;
	    	}else if(c1.getSuit().equals(""Clubs"") & (!c2.getSuit().equals(""Spades"")) & (!c2.getSuit().equals(""Hearts"")) & (!c2.getSuit().equals(""Diamonds"")) & (!c2.getSuit().equals(""Clubs"")) ){
	    		return +1;
	    	}
        	
        	if(c2.getSuit().equals(""Spades"") & (!c1.getSuit().equals(""Spades"")) ){
	    		return -1;
	    	}else if(c2.getSuit().equals(""Hearts"") & (!c1.getSuit().equals(""Spades"")) & (!c1.getSuit().equals(""Hearts"")) ){
	    		return -1;
	    	}else if(c2.getSuit().equals(""Diamonds"") & (!c1.getSuit().equals(""Spades"")) & (!c1.getSuit().equals(""Hearts"")) & (!c1.getSuit().equals(""Diamonds"")) ){
	    		return -1;
	    	}else if(c2.getSuit().equals(""Clubs"") & (!c1.getSuit().equals(""Spades"")) & (!c1.getSuit().equals(""Hearts"")) & (!c1.getSuit().equals(""Diamonds"")) & (!c1.getSuit().equals(""Clubs"")) ){
	    		return -1;
	    	}
        	
        	return 0;
        }
    }   
}

@5af1fc9c666ab8b3f096e3c65802ceba@"
"r04921115","5","0.13","110576","@bb630526200ffe751e99b6b7e99ba503@import java.util.*;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
    	String[] faceString = {""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9"",""10"",""J"",""Q"",""K"",""A""};
    	String[] suitString = {""Clubs"",""Diamonds"",""Hearts"",""Spades""};

    	int faceindex1=0;
    	int faceindex2=0;
    	for(int i = 0; i<faceString.length;i++){
    		if(this.getFace().equals(faceString[i])){
    			faceindex1=i+1;
//    			System.out.println(""this: :""+ this.getFace());
//    			System.out.println(""thisi: :""+ faceindex1);
    		}
    		if(that.getFace().equals(faceString[i])){
    			faceindex2=i+1;
//    			System.out.println(""that: :""+ that.getFace());
//    			System.out.println(""thati: :""+ faceindex2);
    		}
    	}
    	
    	int suitindex1=0;
    	int suitindex2=0;
    	for(int j = 0; j<suitString.length;j++){
    		if(this.getSuit().equals(suitString[j])){
    			suitindex1=j;
//    			System.out.println(""this: :""+ this.getSuit());
//    			System.out.println(""suit1: ""+ suitindex1);
    		}
    		if(that.getSuit().equals(suitString[j])){
    			suitindex2=j;
//    			System.out.println(""that: :""+ that.getSuit());
//    			System.out.println(""suit2: ""+ suitindex2);
    		}
    	}
    	
    	if(faceindex1 > faceindex2){
    		return +1;
    	}else if(faceindex1 < faceindex2){
    		return -1;
    	}
    	
    	if(faceindex1 == faceindex2){
    		if(suitindex1 > suitindex2){
    			return +1;
    		}else if(suitindex1 < suitindex2){
    			return -1;
    		}
    		else{
    			return 0;
    		}
    	}
    	
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
        	String[] suitString = {""Clubs"",""Diamonds"",""Hearts"",""Spades""};
        	int suitindex1=0;
        	int suitindex2=0;
        	for(int j = 0; j<suitString.length;j++){
        		if(c1.getSuit().equals(suitString[j])){
        			suitindex1=j;
//        			System.out.println(""this: :""+ this.getSuit());
//        			System.out.println(""suit1: ""+ suitindex1);
        		}
        		if(c2.getSuit().equals(suitString[j])){
        			suitindex2=j;
//        			System.out.println(""that: :""+ that.getSuit());
//        			System.out.println(""suit2: ""+ suitindex2);
        		}
        	}
    		if(suitindex1 > suitindex2){
    			return +1;
    		}else if(suitindex1 < suitindex2){
    			return -1;
    		}
    		else{
    			return 0;
    		}
        }
    }   
}

@bb630526200ffe751e99b6b7e99ba503@"
"r03525008","0","0.66","111024","@6c4b4f66725d41bcb7648094482fe8f8@import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    private static final Comparator<String> FACE_ORDER = new FaceOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        String face1 = this.getFace();
        String face2 = that.getFace();
        int result = FACE_ORDER.compare(face1 , face2);
        if(result != 0) {
            return result;
        } else {
            return SUIT_ORDER.compare(this , that);
        }
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        private static List<String> order;
        SuitOrder() {
            String[] suits = {""Spades"", ""Hearts"", ""Diamonds"", ""Clubs""};
            order = new ArrayList<String>();
            for (String suit : suits) {
                order.add(suit);
            }
        }

        @Override
        public int compare(Card c1, Card c2) {
            int suit_1 = order.indexOf(c1);
            int suit_2 = order.indexOf(c2);
            if (suit_1 < suit_2) return 1;
            else if (suit_1 > suit_2) return -1;
            else return 0;
        }

    }

    private static class FaceOrder implements Comparator<String> {
        private static List<String> order;
        FaceOrder() {
            String[] faces = {""A"",""K"",""Q"",""J"",""10"",""9"",""8"",""7"",""6"",""5"",""4"",""3"",""2"",""1""};
            order = new ArrayList<String>();
            for (String face : faces) {
                order.add(face);
            }
        }

        @Override
        public int compare(String face1, String face2) {
            int face_1 = order.indexOf(face1);
            int face_2 = order.indexOf(face2);
            if (face_1 < face_2) return 1;
            else if (face_1 > face_2) return -1;
            else return 0;
        }
    }
}


@6c4b4f66725d41bcb7648094482fe8f8@"
"r03525008","5","0.128","111056","@7bd913f9c2de32840544e132fe2c3982@import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    private static final Comparator<Card> FACE_ORDER = new FaceOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        
        int result = FACE_ORDER.compare(this , that);
        if(result != 0) {
            return result;
        } else {
            return SUIT_ORDER.compare(this , that);
        }
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        private static List<String> order;
        SuitOrder() {
            String[] suits = {""Spades"", ""Hearts"", ""Diamonds"", ""Clubs""};
            order = new ArrayList<String>();
            for (String suit : suits) {
                order.add(suit);
            }
        }

        @Override
        public int compare(Card c1, Card c2) {
            int suit_1 = order.indexOf(c1.getSuit());
            int suit_2 = order.indexOf(c2.getSuit());
            if (suit_1 < suit_2) return 1;
            else if (suit_1 > suit_2) return -1;
            else return 0;
        }

    }

    private static class FaceOrder implements Comparator<Card> {
        private static List<String> order;
        FaceOrder() {
            String[] faces = {""A"",""K"",""Q"",""J"",""10"",""9"",""8"",""7"",""6"",""5"",""4"",""3"",""2"",""1""};
            order = new ArrayList<String>();
            for (String face : faces) {
                order.add(face);
            }
        }

        @Override
        public int compare(Card c1, Card c2) {
            int face_1 = order.indexOf(c1.getFace());
            int face_2 = order.indexOf(c2.getFace());
            if (face_1 < face_2) return 1;
            else if (face_1 > face_2) return -1;
            else return 0;
        }
    }
}


@7bd913f9c2de32840544e132fe2c3982@"
"r03945012","5","0.128","110976","@9e840b6d29728c650c37129793757b5c@
import java.util.Comparator;


/**
 * 1042 PDSA
 * hw06_Card
 * @author Robert
 */


public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        String Number = ""2,3,4,5,6,7,8,9,10,J,Q,K,A"";
        String Color = ""Clubs, Diamonds, Hearts, Spades"";
        int face_compare;
        face_compare = Number.indexOf(this.face)-Number.indexOf(that.face);
        if (face_compare>0){
            return 1;
        }
        else if (face_compare<0){
            return -1;
        }
        else{
            int suit_compare;
            suit_compare = Color.indexOf(this.suit)-Color.indexOf(that.suit);
            if (suit_compare>0){
                return 1;
            }
            else if (suit_compare<0){
                return -1;
            }
            else{
                return 0;
            }
        }
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            String Color = ""Clubs, Diamonds, Hearts, Spades"";
            int suit_compare;
            suit_compare = Color.indexOf(c1.suit)-Color.indexOf(c2.suit);
            if (suit_compare>0){
                return 1;
            }
            else if (suit_compare<0){
                return -1;
            }
            else{
                return 0;
            }
        }
    }   
}


@9e840b6d29728c650c37129793757b5c@"
"r04631023","0","0.63","110912","@ddaa63bdc4bd8fe00910b7f09e75b7d6@import java.util.Comparator;



public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
    private String[] checkFace = new String[]{""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"", ""A""} ;
    private String[] checkSuit = new String[]{""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""} ;
    public double point ;
    public double plus ;

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
        for (int i = 0; i < 13; i++){
            if (this.face == checkFace[i]){
                this.point = i ;
                break ;
            }
        }
        for (int i = 0; i < 4; i++){
            if (this.suit == checkSuit[i]){
                this.plus = i/10 ;
                break ;
            }
        }
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        if (this.point+this.plus > that.point+that.plus){
            return 1 ;
        }else{
            return -1 ;
        }
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (c1.plus < c2.plus) {
                return -1 ;
            }else if(c1.plus > c2.plus){
                return 1 ;
            }else{
                return 0 ;
            }
        }
    }
}
@ddaa63bdc4bd8fe00910b7f09e75b7d6@"
"r04631023","0","0.66","110944","@f5c2edf2414a6f80ea8b68c93eb33463@import java.util.Comparator;



public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
    private String[] checkFace = new String[]{""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"", ""A""} ;
    private String[] checkSuit = new String[]{""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""} ;
    public double point ;
    public double plus ;

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
        for (int i = 0; i < 13; i++){
            if (this.face == checkFace[i]){
                this.point = i ;
                break ;
            }
        }
        for (int i = 0; i < 4; i++){
            if (this.suit == checkSuit[i]){
                this.plus = i/10 ;
                break ;
            }
        }
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        if (this.point+this.plus > that.point+that.plus){
            return 1 ;
        }else{
            return -1 ;
        }
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (c1.plus < c2.plus) {
                return 1 ;
            }else if(c1.plus > c2.plus){
                return -1 ;
            }else{
                return 0 ;
            }
        }
    }
}

@f5c2edf2414a6f80ea8b68c93eb33463@"
"r04631023","5","0.126","111040","@01a2625037b7c33d5856e5ad4e26c298@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
    private String[] checkFace = new String[]{""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"", ""A""};
    private String[] checkSuit = new String[]{""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};
    public double point;
    public double plus;

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
        for (int i = 0; i < 13; i++) {
            if (face.compareTo(checkFace[i])== 0) {
                this.point = i;
                break;
            }
        }
        for (int i = 0; i < 4; i++) {
            if (suit.compareTo(checkSuit[i])== 0) {
                this.plus = i;
                this.plus = this.plus /10 ;
                break;
            }
        }
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        if (this.point + this.plus > that.point + that.plus) {
            return 1;
        } else {
            return -1;
        }
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (c1.plus < c2.plus) {
                return -1;
            } else if (c1.plus > c2.plus) {
                return 1;
            } else {
                return 0;
            }
        }
    }
        /*

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(""input.txt""))) {
            Card[] cardsArray = new Card[5];
            String[] cardStr = br.readLine().split("","");
            for (int i = 0; i < 5; i++) {
                String[] sep = cardStr[i].split(""_"");
                Card card = new Card(sep[1], sep[0]);
                cardsArray[i] = card;
            }
            String copy = cardsArray[0].face ;
            System.out.println(cardsArray[0].point);
            System.out.println(cardsArray[0].plus);
        }
    }
    */

}
@01a2625037b7c33d5856e5ad4e26c298@"
"r03849033","0","0.66","110688","@e77e13f14b06c9d76f7ff9afdc3479f7@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        String[] ranks  = { ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"",""A"" };
        String[] suitss = { ""clubs"", ""diamonds"", ""hearts"",""spades"" };
        int thisf=15;
        int thatf=15;
        int thiss=15;
        int thats=15;      
        for (int k = 0; k < 13; k++) {
            if(this.face.equals(ranks[k])){ thisf = k;}
            if(that.face.equals(ranks[k])){ thatf = k;}            
        }
        for (int k = 0; k < 4; k++) {
            if(this.suit.equals(suitss[k])){ thiss = k;}
            if(that.suit.equals(suitss[k])){ thats = k;}    
        }          
        if(thisf > thatf) {return 1;}
        else if(thisf < thatf) {return -1;}
        else if(thiss > thats) {return 1;}        
        else if(thiss < thats) {return -1;}
        return 0;
        
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
        String[] suits = { ""clubs"", ""diamonds"", ""hearts"",""spades"" };
        int c1s=15;
        int c2s=15;  
        for (int k = 0; k < 4; k++) {
            if(c1.getSuit().equals(suits[k])){ c1s = k;}
            if(c2.getSuit().equals(suits[k])){ c2s = k;}        
        }  
        if(c1s>c2s){return 1;}  
        else if(c1s < c2s) {return -1;}        
        return 0;
        }
    }   
}

@e77e13f14b06c9d76f7ff9afdc3479f7@"
"r03849033","0","0.64","111808","@f55f8d70254c359f1e02b508f73fbf7f@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
  
    // TODO

    /**
     *
     * @param that
     * @return
     */
    @Override
    public int compareTo(Card that) {
        String[] ranks  = { ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"",""A"" };
        String[] suitss = { ""clubs"", ""diamonds"", ""hearts"",""spades"" };
        int thisf=15;
        int thatf=15;
        int thiss=15;
        int thats=15;      
        for (int k = 0; k < 13; k++) {
            if(this.face.equals(ranks[k])){ thisf = k;}
            if(that.face.equals(ranks[k])){ thatf = k;}            
        }
        for (int k = 0; k < 4; k++) {
            if(this.suit.equals(suitss[k])){ thiss = k;}
            if(that.suit.equals(suitss[k])){ thats = k;}    
        }          
        if(thisf > thatf) {return 1;}
        else if(thisf < thatf) {return -1;}
        else if(thiss > thats) {return 1;}        
        else if(thiss < thats) {return -1;}
        return 0;
        
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
        String[] suits = { ""clubs"", ""diamonds"", ""hearts"",""spades"" };
        int c1s=15;
        int c2s=15;  
        for (int k = 0; k < 4; k++) {
            if(c1.getSuit().equals(suits[k])){ c1s = k;}
            if(c2.getSuit().equals(suits[k])){ c2s = k;}        
        }  
        if(c1s>c2s){return 1;}  
        else if(c1s < c2s) {return -1;}        
        return 0;
        }
    }   
}

@f55f8d70254c359f1e02b508f73fbf7f@"
"r04525016","5","0.126","110976","@e7846dc063f08198cef6bf35b740a766@import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        int f1 = faceIndex(this.getFace());
        int f2 = faceIndex(that.getFace());

        if (f1 > f2) return 1;
        else if (f1 < f2) return -1;
        else if (f1 == f2) return SUIT_ORDER.compare(this, that);
        return 0;
    }


    public int faceIndex(String f) {
        String[] faces = {""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"", ""A""};
        int face_index = 0;
        while (!f.equals(faces[face_index])) face_index++;
        return face_index;
    }


    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit

            String[] suits = {""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};

            int c1_index = 0;
            while (!c1.getSuit().equals(suits[c1_index])) c1_index++;

            int c2_index = 0;
            while (!c2.getSuit().equals(suits[c2_index])) c2_index++;

            if (c1_index > c2_index) return 1;
            else if (c1_index == c2_index) return 0;
            else if (c1_index < c2_index) return -1;
            return 0;
        }
    }
}
@e7846dc063f08198cef6bf35b740a766@"
"r04631021","0","0.63","110944","@4c5abd9577981f9081b573451701ef28@import java.util.Comparator;
import java.util.Objects;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        Integer[] A_face = new Integer[1] ;
        Integer[] B_face = new Integer[1] ;
        if(this.getFace().equalsIgnoreCase(""A""))
            A_face[0] = 14 ;
        else if(this.getFace().equalsIgnoreCase(""K""))
            A_face[0] = 13 ;
        else if(this.getFace().equalsIgnoreCase(""Q""))
            A_face[0] = 12 ;
        else if(this.getFace().equalsIgnoreCase(""J""))
            A_face[0] = 11 ;
        else 
            A_face[0] = Integer.parseInt(this.getFace());
        
        if(that.getFace().equalsIgnoreCase(""A""))
            B_face[0] = 14 ;
        else if(that.getFace().equalsIgnoreCase(""K""))
            B_face[0] = 13 ;
        else if(that.getFace().equalsIgnoreCase(""Q""))
            B_face[0] = 12 ;
        else if(that.getFace().equalsIgnoreCase(""J""))
            B_face[0] = 11 ;
        else
            B_face[0] = Integer.parseInt(that.getFace());
        
        if(A_face[0]>B_face[0])
            return +1 ;
        else if(A_face[0]<B_face[0])
            return -1 ;
        
        else if(Objects.equals(A_face[0], B_face[0])){
            if(SUIT_ORDER.compare(this,that)==-1)
           return -1 ;
        else if(SUIT_ORDER.compare(this, that)==1)
           return 1 ;
            
        }
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            String a = c1.getSuit();
            String b = c2.getSuit();
            if (a.equalsIgnoreCase(""Spades"")){
               if(b.equalsIgnoreCase(""Spades""))
                   return 0 ;
               else if(b.equalsIgnoreCase(""Hearts""))
                   return +1 ;
               else if(b.equalsIgnoreCase(""Diamonds""))
                   return +1 ;
               else if(b.equalsIgnoreCase(""Clubs""))
                   return +1 ;
             }
            else if (a.equalsIgnoreCase(""Hearts"")){
                if(b.equalsIgnoreCase(""Spades""))
                    return -1 ;
                else if(b.equalsIgnoreCase(""Hearts""))
                    return 0;
                else if(b.equalsIgnoreCase(""Diamonds""))
                    return +1;
                else if(b.equalsIgnoreCase(""Clubs""))
                    return +1;                
            }
            else if(a.equalsIgnoreCase(""Diamonds"")){
                if (b.equalsIgnoreCase(""Spades""))
                    return -1;
                else if(b.equalsIgnoreCase(""Hearts""))
                    return -1;
                else if(b.equalsIgnoreCase(""Diamods""))
                    return 0;
                else if(b.equalsIgnoreCase(""Clubs""))
                    return +1;
            }
            else if(a.equalsIgnoreCase(""Clubs"")){
                if (b.equalsIgnoreCase(""Spades""))
                    return -1;
                else if(b.equalsIgnoreCase(""Hearts""))
                    return -1;
                else if(b.equalsIgnoreCase(""Diamods""))
                    return -1;
                else if(b.equalsIgnoreCase(""Clubs""))
                    return 0;
            }
            return 0;
        }
    }   
}


@4c5abd9577981f9081b573451701ef28@"
"r04631021","0","0.65","111296","@e00813642daf54ca58e8b9e63c8673bd@import java.util.Comparator;
import java.util.Objects;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        Integer[] A_face = new Integer[1] ;
        Integer[] B_face = new Integer[1] ;
        if(this.getFace().equalsIgnoreCase(""A""))
            A_face[0] = 14 ;
        else if(this.getFace().equalsIgnoreCase(""K""))
            A_face[0] = 13 ;
        else if(this.getFace().equalsIgnoreCase(""Q""))
            A_face[0] = 12 ;
        else if(this.getFace().equalsIgnoreCase(""J""))
            A_face[0] = 11 ;
        else 
            A_face[0] = Integer.parseInt(this.getFace());
        
        if(that.getFace().equalsIgnoreCase(""A""))
            B_face[0] = 14 ;
        else if(that.getFace().equalsIgnoreCase(""K""))
            B_face[0] = 13 ;
        else if(that.getFace().equalsIgnoreCase(""Q""))
            B_face[0] = 12 ;
        else if(that.getFace().equalsIgnoreCase(""J""))
            B_face[0] = 11 ;
        else
            B_face[0] = Integer.parseInt(that.getFace());
        
        if(A_face[0]>B_face[0])
            return +1 ;
        else if(A_face[0]<B_face[0])
            return -1 ;
        
        else if(Objects.equals(A_face[0], B_face[0])){
        if(SUIT_ORDER.compare(this,that)==-1)
           return -1 ;
        else if(SUIT_ORDER.compare(this, that)==1)
           return 1 ;
        else 
           return 0;
        }
           return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            String a = c1.getSuit();
            String b = c2.getSuit();
            if (a.equalsIgnoreCase(""Spades"")){
               if(b.equalsIgnoreCase(""Spades""))
                   return 0 ;
               else if(b.equalsIgnoreCase(""Hearts""))
                   return +1 ;
               else if(b.equalsIgnoreCase(""Diamonds""))
                   return +1 ;
               else if(b.equalsIgnoreCase(""Clubs""))
                   return +1 ;
             }
            else if (a.equalsIgnoreCase(""Hearts"")){
                if(b.equalsIgnoreCase(""Spades""))
                    return -1 ;
                else if(b.equalsIgnoreCase(""Hearts""))
                    return 0;
                else if(b.equalsIgnoreCase(""Diamonds""))
                    return +1;
                else if(b.equalsIgnoreCase(""Clubs""))
                    return +1;                
            }
            else if(a.equalsIgnoreCase(""Diamonds"")){
                if (b.equalsIgnoreCase(""Spades""))
                    return -1;
                else if(b.equalsIgnoreCase(""Hearts""))
                    return -1;
                else if(b.equalsIgnoreCase(""Diamods""))
                    return 0;
                else if(b.equalsIgnoreCase(""Clubs""))
                    return +1;
            }
            else if(a.equalsIgnoreCase(""Clubs"")){
                if (b.equalsIgnoreCase(""Spades""))
                    return -1;
                else if(b.equalsIgnoreCase(""Hearts""))
                    return -1;
                else if(b.equalsIgnoreCase(""Diamods""))
                    return -1;
                else if(b.equalsIgnoreCase(""Clubs""))
                    return 0;
            }
            return 0;
        }
    }   
public static void main(String[] args) {
//     Card[] fuck = new Card[2];
//     fuck[0] = new Card(""A"",""Clubs"") ;
//     fuck[1] = new Card(""2"",""Hearts"") ;
//     System.out.println(fuck[1].compareTo(fuck[0]));
//     System.out.println(Card.SUIT_ORDER.compare(fuck[1],fuck[0]));
}

}
@e00813642daf54ca58e8b9e63c8673bd@"
"r03849033","0","0.64","111152","@38d52da72d843d39c62dc59e2992631e@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
  
    // TODO


    public int compareTo(Card that) {
        String[] ranks  = { ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"",""A"" };
        String[] suitss = { ""clubs"", ""diamonds"", ""hearts"",""spades"" };
        int thisf=15;
        int thatf=15;
        int thiss=15;
        int thats=15;      
        for (int k = 0; k < 13; k++) {
            if(this.face.equals(ranks[k])){ thisf = k;}
            if(that.face.equals(ranks[k])){ thatf = k;}            
        }
        for (int k = 0; k < 4; k++) {
            if(this.suit.equals(suitss[k])){ thiss = k;}
            if(that.suit.equals(suitss[k])){ thats = k;}    
        }          
        if(thisf > thatf) {return 1;}
        else if(thisf < thatf) {return -1;}
        else if(thiss > thats) {return 1;}        
        else if(thiss < thats) {return -1;}
        return 0;
        
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
        String[] suits = { ""Clubs"", ""Diamonds"", ""Hearts"",""Spades"" };
        int c1s=15;
        int c2s=15;  
        for (int k = 0; k < 4; k++) {
            if(c1.getSuit().equals(suits[k])){ c1s = k;}
            if(c2.getSuit().equals(suits[k])){ c2s = k;}        
        }  
        if(c1s>c2s){return 1;}  
        else if(c1s < c2s) {return -1;}        
        return 0;
        }
    }   
}

@38d52da72d843d39c62dc59e2992631e@"
"r03849033","5","0.132","111632","@4999b2129f7af095144ea0b8918dbdbe@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
  
    // TODO


    public int compareTo(Card that) {
        String[] ranks  = { ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"",""A"" };
        String[] suitss = { ""Clubs"", ""Diamonds"", ""Hearts"",""Spades"" };
        int thisf=15;
        int thatf=15;
        int thiss=15;
        int thats=15;      
        for (int k = 0; k < 13; k++) {
            if(this.face.equals(ranks[k])){ thisf = k;}
            if(that.face.equals(ranks[k])){ thatf = k;}            
        }
        for (int k = 0; k < 4; k++) {
            if(this.suit.equals(suitss[k])){ thiss = k;}
            if(that.suit.equals(suitss[k])){ thats = k;}    
        }          
        if(thisf > thatf) {return 1;}
        else if(thisf < thatf) {return -1;}
        else if(thiss > thats) {return 1;}        
        else if(thiss < thats) {return -1;}
        return 0;
        
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
        String[] suits = { ""Clubs"", ""Diamonds"", ""Hearts"",""Spades"" };
        int c1s=15;
        int c2s=15;  
        for (int k = 0; k < 4; k++) {
            if(c1.getSuit().equals(suits[k])){ c1s = k;}
            if(c2.getSuit().equals(suits[k])){ c2s = k;}        
        }  
        if(c1s>c2s){return 1;}  
        else if(c1s < c2s) {return -1;}        
        return 0;
        }
    }   
}

@4999b2129f7af095144ea0b8918dbdbe@"
"r04228002","0","0.63","111504","@1cab9d55e14959357db92fcd3d37b3a7@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author Lenovo
 */
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int ff1 = transface(this.face);
        int ff2 = transface(that.face);
        int ss1 = transsuit(this.suit);
        int ss2 = transsuit(that.suit);
        int rr = 0;
        if (ff1 == ff2){
            if (ss1 > ss2){
                rr = 1;
            }
            else{
                rr = -1;
            }
        }
        else if (ff1 > ff2){
            rr = 1;
        }
        else{
            rr = -1;
        }
        return rr;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int ct = c1.compareTo(c2);
            return ct;
        }
    }
    
    private static int transface(String ff){
        int intface = 0;
        if (ff.equals(""2"")){
            intface = 2;
        }
        else if (ff.equals(""3"")){
            intface = 3;
        }
        else if (ff.equals(""4"")){
            intface = 4;
        }
        else if (ff.equals(""5"")){
            intface = 5;
        }
        else if (ff.equals(""6"")){
            intface = 6;
        }
        else if (ff.equals(""7"")){
            intface = 7;
        }
        else if (ff.equals(""8"")){
            intface = 8;
        }
        else if (ff.equals(""9"")){
            intface = 9;
        }
        else if (ff.equals(""10"")){
            intface = 10;
        }
        else if (ff.equals(""J"")){
            intface = 11;
        }
        else if (ff.equals(""Q"")){
            intface = 12;
        }
        else if (ff.equals(""K"")){
            intface = 13;
        }
        else{
            intface = 14;
        }
        return intface;
    }
    
    private static int transsuit(String ss){
        int intsuit = 0;
        if (ss.equals(""Spades"")){
            intsuit = 4;
        }
        else if (ss.equals(""Hearts"")){
            intsuit = 3;
        } 
        else if (ss.equals(""Diamonds"")){
            intsuit = 2;
        }
        else{
            intsuit = 1;
        }
        return intsuit;
    }
    
    public static void main(String[] ars){
        Card[] test = new Card[2];
        test[0] = new Card(""A"",""Clubs"");
        test[1] = new Card(""2"",""Hearts"");
        System.out.println(test[0].compareTo(test[1]));
        System.out.println(Card.SUIT_ORDER.compare(test[0], test[1]));
        
    }
}
@1cab9d55e14959357db92fcd3d37b3a7@"
"r04228002","0","0.66","109792","@9cf6c3d9da9d2483b46fe9daf640ed72@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author Lenovo
 */
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int ff1 = transface(this.face);
        int ff2 = transface(that.face);
        int ss1 = transsuit(this.suit);
        int ss2 = transsuit(that.suit);
        int rr = 0;
        if (ff1 == ff2){
            if (ss1 > ss2){
                rr = 1;
            }
            else{
                rr = -1;
            }
        }
        else if (ff1 > ff2){
            rr = 1;
        }
        else{
            rr = -1;
        }
        return rr;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int ct = c1.compareTo(c2);
            return ct;
        }
    }
    
    private static int transface(String ff){
        int intface = 0;
        if (ff.equals(""2"")){
            intface = 2;
        }
        else if (ff.equals(""3"")){
            intface = 3;
        }
        else if (ff.equals(""4"")){
            intface = 4;
        }
        else if (ff.equals(""5"")){
            intface = 5;
        }
        else if (ff.equals(""6"")){
            intface = 6;
        }
        else if (ff.equals(""7"")){
            intface = 7;
        }
        else if (ff.equals(""8"")){
            intface = 8;
        }
        else if (ff.equals(""9"")){
            intface = 9;
        }
        else if (ff.equals(""10"")){
            intface = 10;
        }
        else if (ff.equals(""J"")){
            intface = 11;
        }
        else if (ff.equals(""Q"")){
            intface = 12;
        }
        else if (ff.equals(""K"")){
            intface = 13;
        }
        else{
            intface = 14;
        }
        return intface;
    }
    
    private static int transsuit(String ss){
        int intsuit = 0;
        if (ss.equals(""Spades"")){
            intsuit = 4;
        }
        else if (ss.equals(""Hearts"")){
            intsuit = 3;
        } 
        else if (ss.equals(""Diamonds"")){
            intsuit = 2;
        }
        else{
            intsuit = 1;
        }
        return intsuit;
    }
    
    /*
    public static void main(String[] ars){
        Card[] test = new Card[2];
        test[0] = new Card(""A"",""Clubs"");
        test[1] = new Card(""2"",""Hearts"");
        System.out.println(test[0].compareTo(test[1]));
        System.out.println(Card.SUIT_ORDER.compare(test[0], test[1]));
        
    }
    */
}
@9cf6c3d9da9d2483b46fe9daf640ed72@"
"r04228002","5","0.124","110912","@74d87b97aecf969a65bb6756f16665fa@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author Lenovo
 */
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int ff1 = transface(this.face);
        int ff2 = transface(that.face);
        int ss1 = transsuit(this.suit);
        int ss2 = transsuit(that.suit);
        int rr = 0;
        if (ff1 == ff2){
            if (ss1 > ss2){
                rr = 1;
            }
            else{
                rr = -1;
            }
        }
        else if (ff1 > ff2){
            rr = 1;
        }
        else{
            rr = -1;
        }
        return rr;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int ss1 = transsuit(c1.suit);
            int ss2 = transsuit(c2.suit);
            int rr = 0;
            if (ss1 > ss2){
                return 1;
            }
            else if(ss1 < ss2){
                return -1;
            }
            else{
                return 0;
            }
        }
    }
    
    private static int transface(String ff){
        int intface = 0;
        if (ff.equals(""2"")){
            intface = 2;
        }
        else if (ff.equals(""3"")){
            intface = 3;
        }
        else if (ff.equals(""4"")){
            intface = 4;
        }
        else if (ff.equals(""5"")){
            intface = 5;
        }
        else if (ff.equals(""6"")){
            intface = 6;
        }
        else if (ff.equals(""7"")){
            intface = 7;
        }
        else if (ff.equals(""8"")){
            intface = 8;
        }
        else if (ff.equals(""9"")){
            intface = 9;
        }
        else if (ff.equals(""10"")){
            intface = 10;
        }
        else if (ff.equals(""J"")){
            intface = 11;
        }
        else if (ff.equals(""Q"")){
            intface = 12;
        }
        else if (ff.equals(""K"")){
            intface = 13;
        }
        else{
            intface = 14;
        }
        return intface;
    }
    
    private static int transsuit(String ss){
        int intsuit = 0;
        if (ss.equals(""Spades"")){
            intsuit = 4;
        }
        else if (ss.equals(""Hearts"")){
            intsuit = 3;
        } 
        else if (ss.equals(""Diamonds"")){
            intsuit = 2;
        }
        else{
            intsuit = 1;
        }
        return intsuit;
    }
    
    
    public static void main(String[] ars){
        Card[] test = new Card[2];
        test[0] = new Card(""A"",""Clubs"");
        test[1] = new Card(""2"",""Hearts"");
        System.out.println(test[0].compareTo(test[1]));
        System.out.println(Card.SUIT_ORDER.compare(test[0], test[1]));
        
    }
    
}
@74d87b97aecf969a65bb6756f16665fa@"
"r04631021","5","0.132","110944","@5268e1e40b1e8b697be4db4b882e2994@import java.util.Comparator;
import java.util.Objects;

public class Card implements Comparable<Card> {

	private final String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private final String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        Integer[] A_face = new Integer[1] ;
        Integer[] B_face = new Integer[1] ;
        if(this.getFace().equalsIgnoreCase(""A""))
            A_face[0] = 14 ;
        else if(this.getFace().equalsIgnoreCase(""K""))
            A_face[0] = 13 ;
        else if(this.getFace().equalsIgnoreCase(""Q""))
            A_face[0] = 12 ;
        else if(this.getFace().equalsIgnoreCase(""J""))
            A_face[0] = 11 ;
        else 
            A_face[0] = Integer.parseInt(this.getFace());
        
        if(that.getFace().equalsIgnoreCase(""A""))
            B_face[0] = 14 ;
        else if(that.getFace().equalsIgnoreCase(""K""))
            B_face[0] = 13 ;
        else if(that.getFace().equalsIgnoreCase(""Q""))
            B_face[0] = 12 ;
        else if(that.getFace().equalsIgnoreCase(""J""))
            B_face[0] = 11 ;
        else
            B_face[0] = Integer.parseInt(that.getFace());
        
        if(A_face[0]>B_face[0])
            return +1 ;
        else if(A_face[0]<B_face[0])
            return -1 ;
        
        else if(Objects.equals(A_face[0], B_face[0])){
        if(SUIT_ORDER.compare(this,that)==-1)
           return -1 ;
        else if(SUIT_ORDER.compare(this, that)==1)
           return +1 ;
        else 
           return 0;
        }
           return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            String a = c1.getSuit();
            String b = c2.getSuit();
            if (a.equalsIgnoreCase(""Spades"")){
               if(b.equalsIgnoreCase(""Spades""))
                   return 0 ;
               else if(b.equalsIgnoreCase(""Hearts""))
                   return +1 ;
               else if(b.equalsIgnoreCase(""Diamonds""))
                   return +1 ;
               else if(b.equalsIgnoreCase(""Clubs""))
                   return +1 ;
             }
            else if (a.equalsIgnoreCase(""Hearts"")){
                if(b.equalsIgnoreCase(""Spades""))
                    return -1 ;
                else if(b.equalsIgnoreCase(""Hearts""))
                    return 0;
                else if(b.equalsIgnoreCase(""Diamonds""))
                    return +1;
                else if(b.equalsIgnoreCase(""Clubs""))
                    return +1;                
            }
            else if(a.equalsIgnoreCase(""Diamonds"")){
                if (b.equalsIgnoreCase(""Spades""))
                    return -1;
                else if(b.equalsIgnoreCase(""Hearts""))
                    return -1;
                else if(b.equalsIgnoreCase(""Diamonds""))
                    return 0;
                else if(b.equalsIgnoreCase(""Clubs""))
                    return +1;
            }
            else if(a.equalsIgnoreCase(""Clubs"")){
                if (b.equalsIgnoreCase(""Spades""))
                    return -1;
                else if(b.equalsIgnoreCase(""Hearts""))
                    return -1;
                else if(b.equalsIgnoreCase(""Diamonds""))
                    return -1;
                else if(b.equalsIgnoreCase(""Clubs""))
                    return 0;
            }
            return 0;
        }
    }   
public static void main(String[] args) {
     Card[] test = new Card[2];
     test[0] = new Card(""10"",""Diamonds"") ;
     test[1] = new Card(""10"",""Hearts"") ;
     System.out.println(test[1].compareTo(test[0]));
     System.out.println(SUIT_ORDER.compare(test[1],test[0]));
}

}
@5268e1e40b1e8b697be4db4b882e2994@"
"r04631006","0","0.63","110992","@e7b8d9bce216d9890034b41c96c83c57@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if (this.face.compareTo(that.face) < 0) {
            return +1;
        }
        if (this.face.compareTo(that.face) > 0) {
            return -1;
        } else if (this.face.compareTo(that.face) == 0) {
            if (this.suit.compareTo(that.suit) < 0) {
                return -1;
            }
            if (this.suit.compareTo(that.suit) > 0) {
                return +1;
            } else {
                return 0;
            }
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (c1.face.compareTo(c2.face) < 0) {
                return +1;
            }
            if (c1.face.compareTo(c2.face) > 0) {
                return -1;
            } else if (c1.face.compareTo(c2.face) == 0) {
                if (c1.suit.compareTo(c2.suit) < 0) {
                    return -1;
                }
                if (c1.suit.compareTo(c2.suit) > 0) {
                    return +1;
                } else {
                    return 0;
                }
            }
            return 0;

        }
    }

    public static void main(String[] args) {
        String a = ""Spades"";
        String b = ""Clubs"";
//        System.out.printf(""%d"",a.compareTo(b));
    }
}
@e7b8d9bce216d9890034b41c96c83c57@"
"r04631006","0","0.67","110928","@a109d1b106e54f049ca4b6e8112a0c08@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if (this.face.compareTo(that.face) < 0) {
            return -1;
        }
        if (this.face.compareTo(that.face) > 0) {
            return +1;
        } else if (this.face.compareTo(that.face) == 0) {
            if (this.suit.compareTo(that.suit) < 0) {
                return -1;
            }
            if (this.suit.compareTo(that.suit) > 0) {
                return +1;
            } else {
                return 0;
            }
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (c1.face.compareTo(c2.face) < 0) {
                return -1;
            }
            if (c1.face.compareTo(c2.face) > 0) {
                return +1;
            } else if (c1.face.compareTo(c2.face) == 0) {
                if (c1.suit.compareTo(c2.suit) < 0) {
                    return -1;
                }
                if (c1.suit.compareTo(c2.suit) > 0) {
                    return +1;
                } else {
                    return 0;
                }
            }
            return 0;

        }
    }

    public static void main(String[] args) {
        Card[] test = new Card[2];
        test[0] = new Card(""10"", ""Diamonds"");
        test[1] = new Card(""10"", ""Hearts"");
//        System.out.printf(""%d"", test[1].compareTo(test[0]));
//        System.out.printf(""%d"", Card.SUIT_ORDER.compare(test[1], test[0]));
    }
}
@a109d1b106e54f049ca4b6e8112a0c08@"
"r03525006","0","0.66","111056","@c416f7250b8c2a016742bee0cfe28f5b@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    public static final Comparator<Card> FACE_ORDER = new FaceOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int ans = FACE_ORDER.compare(this,that);
        if (ans == 1 || ans ==-1) return ans;
        else return  SUIT_ORDER.compare(this , that);
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            String[] suitArray = {""Spades"", ""Hearts"", ""Diamonds"", ""Clubs""};
            int suitC1 = 0;
            int suitC2 = 0;
            for (int i = 0; i < 4; i++) {
                if (c1.getSuit().equals(suitArray[i])) suitC1 = i;
                if (c2.getSuit().equals(suitArray[i])) suitC2 = i;
            }
            if (suitC1 > suitC2) return 1;
            else if (suitC1 < suitC2) return -1;
            else return 0;
        }
    }

    private static class FaceOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the face
            String[] faceArray = {""A"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K""};
            int faceC1 = 0;
            int faceC2 = 0;
            for (int i = 0; i < 13; i++) {
                if (c1.getFace().equals(faceArray[i])) faceC1 = i+1;
                if (c2.getFace().equals(faceArray[i])) faceC2 = i+1;
            }
            if (faceC1 > faceC2) return 1;
            else if (faceC1 < faceC2) return -1;
            else return 0;
        }
    }
}


@c416f7250b8c2a016742bee0cfe28f5b@"
"r03525006","0","0.64","110096","@47e16aae6ce73b0532dec68a2db4e082@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    public static final Comparator<Card> FACE_ORDER = new FaceOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int ans = FACE_ORDER.compare(this,that);
        if (ans == 1 || ans ==-1) return ans;
        else return  SUIT_ORDER.compare(this , that);
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            String[] suitArray = {""Spades"", ""Hearts"", ""Diamonds"", ""Clubs""};
            int suitC1 = 0;
            int suitC2 = 0;
            for (int i = 0; i < 4; i++) {
                if (c1.getSuit().equals(suitArray[i])) suitC1 = i;
                if (c2.getSuit().equals(suitArray[i])) suitC2 = i;
            }
            if (suitC1 > suitC2) return -1;
            else if (suitC1 < suitC2) return 1;
            else return 0;
        }
    }

    private static class FaceOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the face
            String[] faceArray = {""A"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K""};
            int faceC1 = 0;
            int faceC2 = 0;
            for (int i = 0; i < 13; i++) {
                if (c1.getFace().equals(faceArray[i])) faceC1 = i+1;
                if (c2.getFace().equals(faceArray[i])) faceC2 = i+1;
            }
            if (faceC1 > faceC2) return -1;
            else if (faceC1 < faceC2) return 1;
            else return 0;
        }
    }
}


@47e16aae6ce73b0532dec68a2db4e082@"
"r03525006","0","0.66","108608","@9772abdf1c7e3cd6c7d121057c83dea3@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    public static final Comparator<Card> FACE_ORDER = new FaceOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int ans = FACE_ORDER.compare(this,that);
        if (ans == 1 || ans ==-1) return ans;
        else return  SUIT_ORDER.compare(this , that);
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        @Override
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            String[] suitArray = {""Spades"", ""Hearts"", ""Diamonds"", ""Clubs""};
            int suitC1 = 0;
            int suitC2 = 0;
            for (int i = 0; i < 4; i++) {
                if (c1.getSuit().equals(suitArray[i])) suitC1 = i;
                if (c2.getSuit().equals(suitArray[i])) suitC2 = i;
            }
            if (suitC1 > suitC2) return 1;
            else if (suitC1 < suitC2) return -11;
            else return 0;
        }
    }

    private static class FaceOrder implements Comparator<Card> {
        @Override
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the face
            String[] faceArray = {""A"", ""K"", ""Q"", ""J"", ""10"", ""9"", ""8"", ""7"", ""6"", ""5"", ""4"", ""3"", ""2""};
            int faceC1 = 0;
            int faceC2 = 0;
            for (int i = 0; i < 13; i++) {
                if (c1.getFace().equals(faceArray[i])) faceC1 = i+1;
                if (c2.getFace().equals(faceArray[i])) faceC2 = i+1;
            }
            if (faceC1 > faceC2) return 1;
            else if (faceC1 < faceC2) return -1;
            else return 0;
        }
    }
}


@9772abdf1c7e3cd6c7d121057c83dea3@"
"r03525006","5","0.13","108304","@dff65817326a2f716d84c542828f196b@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    public static final Comparator<Card> FACE_ORDER = new FaceOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int ans = FACE_ORDER.compare(this,that);
        if (ans == 1 || ans ==-1) return ans;
        else return  SUIT_ORDER.compare(this , that);
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        @Override
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            String[] suitArray = {""Spades"", ""Hearts"", ""Diamonds"", ""Clubs""};
            int suitC1 = 0;
            int suitC2 = 0;
            for (int i = 0; i < 4; i++) {
                if (c1.getSuit().equals(suitArray[i])) suitC1 = i;
                if (c2.getSuit().equals(suitArray[i])) suitC2 = i;
            }
            if (suitC1 > suitC2) return -1; // c1 < c2
            else if (suitC1 < suitC2) return 1; // c1 > c2
            else return 0;
        }
    }

    private static class FaceOrder implements Comparator<Card> {
        @Override
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the face
            String[] faceArray = {""A"", ""K"", ""Q"", ""J"", ""10"", ""9"", ""8"", ""7"", ""6"", ""5"", ""4"", ""3"", ""2""};
            int faceC1 = 0;
            int faceC2 = 0;
            for (int i = 0; i < 13; i++) {
                if (c1.getFace().equals(faceArray[i])) faceC1 = i+1;
                if (c2.getFace().equals(faceArray[i])) faceC2 = i+1;
            }
            if (faceC1 > faceC2) return -1; // c1 < c2
            else if (faceC1 < faceC2) return 1; // c1 > c2
            else return 0;
        }
    }
}


@dff65817326a2f716d84c542828f196b@"
"r04945021","0","0.67","111328","@419afba6f36c6b3b5fe5c756d1f173c4@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
   public int CardID(String CC) {
 int CardID=0;
       switch(CC){
           case ""A"":
               CardID= 14;
               break;
           case ""K"":
               CardID= 13;
               break;
           case ""Q"":
               CardID= 12;
               break;
           case ""J"":
               CardID= 11;
               break;
           case ""Spades"":
               CardID= 4;
               break;
           case ""Hearts"":
               CardID=3;
               break;
           case ""Diamonds"":
               CardID=2;
               break;
           case ""Clubs"":
               CardID=1;
               break;
           default:
               CardID=Integer.parseInt(CC);
               break;                
       }
       return CardID;   
   }
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int CardSuitThis = CardID(this.suit);
        int CardSuitThat = CardID(that.suit);
        int CardFaceThis = CardID(this.face);
        int CardFaceThat = CardID(that.face);
        if (CardSuitThat > CardSuitThis) {
            return -1;
        } else if (CardSuitThat < CardSuitThis) {
            return 1;
        } else {
            if (CardFaceThat > CardFaceThis) {
                return -1;
            } else if (CardFaceThat < CardFaceThis) {
                return 1;
            } else {
                return 0;
            }
        }
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int CardID(String CC) {
 int CardID=0;
       switch(CC){
           case ""A"":
               CardID= 14;
               break;
           case ""K"":
               CardID= 13;
               break;
           case ""Q"":
               CardID= 12;
               break;
           case ""J"":
               CardID= 11;
               break;
           case ""Spades"":
               CardID= 4;
               break;
           case ""Hearts"":
               CardID=3;
               break;
           case ""Diamonds"":
               CardID=2;
               break;
           case ""Clubs"":
               CardID=1;
               break;
           default:
               CardID=Integer.parseInt(CC);
               break;                
       }
       return CardID;   
   }
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit

            int C1Suit=CardID(c1.suit);
            int C2Suit=CardID(c2.suit);
            if(C1Suit>C2Suit)
                return -1;
            else if (C1Suit<C2Suit)
                return 1;
            else
                    return 0;
        }
    }   
    
//    public static void main(String[] args) {
//        Card[] test = new Card[2];
//        test[0] = new Card(""A"",""Clubs"");
//        test[1] = new Card(""2"",""Hearts"");
//        System.out.println(test[1].compareTo(test[0]));
//        System.out.println(Card.SUIT_ORDER.compare(test[1], test[0]));
//    }
}


@419afba6f36c6b3b5fe5c756d1f173c4@"
"r04945021","0","0.64","111600","@25528ec9a91332faea15f33319dc9324@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
   public int CardID(String CC) {
 int CardID=0;
       switch(CC){
           case ""A"":
               CardID= 14;
               break;
           case ""K"":
               CardID= 13;
               break;
           case ""Q"":
               CardID= 12;
               break;
           case ""J"":
               CardID= 11;
               break;
           case ""Spades"":
               CardID= 4;
               break;
           case ""Hearts"":
               CardID=3;
               break;
           case ""Diamonds"":
               CardID=2;
               break;
           case ""Clubs"":
               CardID=1;
               break;
           default:
               CardID=Integer.parseInt(CC);
               break;                
       }
       return CardID;   
   }
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int CardSuitThis = CardID(this.suit);
        int CardSuitThat = CardID(that.suit);
        int CardFaceThis = CardID(this.face);
        int CardFaceThat = CardID(that.face);
        if (CardSuitThat > CardSuitThis) {
            return -1;
        } else if (CardSuitThat < CardSuitThis) {
            return 1;
        } else {
            if (CardFaceThat > CardFaceThis) {
                return -1;
            } else if (CardFaceThat < CardFaceThis) {
                return 1;
            } else {
                return 0;
            }
        }
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int CardID(String CC) {
 int CardID=0;
       switch(CC){
           case ""A"":
               CardID= 14;
               break;
           case ""K"":
               CardID= 13;
               break;
           case ""Q"":
               CardID= 12;
               break;
           case ""J"":
               CardID= 11;
               break;
           case ""Spades"":
               CardID= 4;
               break;
           case ""Hearts"":
               CardID=3;
               break;
           case ""Diamonds"":
               CardID=2;
               break;
           case ""Clubs"":
               CardID=1;
               break;
           default:
               CardID=Integer.parseInt(CC);
               break;                
       }
       return CardID;   
   }
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit

            int C1Suit=CardID(c1.suit);
            int C2Suit=CardID(c2.suit);
            if(C1Suit>C2Suit)
                return 1;
            else if (C1Suit<C2Suit)
                return -1;
            else
                    return 0;
        }
    }   
    
    public static void main(String[] args) {
        Card[] test = new Card[2];
        test[0] = new Card(""A"",""Clubs"");
        test[1] = new Card(""2"",""Hearts"");
        System.out.println(test[1].compareTo(test[0]));
        System.out.println(Card.SUIT_ORDER.compare(test[1], test[0]));
    }
}


@25528ec9a91332faea15f33319dc9324@"
"r04631006","0","0.67","108784","@5f89c119d6c34fba733965f44647e8ba@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    @Override
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int a;
        int b;
        switch (this.face) {
            case ""A"":
                a = 14;
                break;
            case ""K"":
                a = 13;
                break;
            case ""Q"":
                a = 12;
                break;
            case ""J"":
                a = 11;
                break;
            default:
                a = Integer.parseInt(this.face);
                break;
        }

        switch (that.face) {
            case ""A"":
                b = 14;
                break;
            case ""K"":
                b = 13;
                break;
            case ""Q"":
                b = 12;
                break;
            case ""J"":
                b = 11;
                break;
            default:
                b = Integer.parseInt(that.face);
                break;
        }

        if (a > b) {
            return +1;
        } else if (a < b) {
            return -1;
        } else if (this.face.compareTo(that.face) == 0) {
            if (this.suit.compareTo(that.suit) < 0) {
                return -1;
            }
            if (this.suit.compareTo(that.suit) > 0) {
                return +1;
            } else {
                return 0;
            }
        }

        return 0;
    }
//    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int a;
            int b;
            switch (c1.face) {
                case ""A"":
                    a = 14;
                    break;
                case ""K"":
                    a = 13;
                    break;
                case ""Q"":
                    a = 12;
                    break;
                case ""J"":
                    a = 11;
                    break;
                default:
                    a = Integer.parseInt(c1.face);
                    break;
            }

            switch (c2.face) {
                case ""A"":
                    b = 14;
                    break;
                case ""K"":
                    b = 13;
                    break;
                case ""Q"":
                    b = 12;
                    break;
                case ""J"":
                    b = 11;
                    break;
                default:
                    b = Integer.parseInt(c2.face);
                    break;
            }

            if (a > b) {
                return +1;
            } else if (a < b) {
                return -1;
            } else if (c1.face.compareTo(c2.face) == 0) {
                if (c1.suit.compareTo(c2.suit) < 0) {
                    return -1;
                }
                if (c1.suit.compareTo(c2.suit) > 0) {
                    return +1;
                } else {
                    return 0;
                }
            }

            return 0;
        }
    }
}
@5f89c119d6c34fba733965f44647e8ba@"
"r04631006","0","0.65","111600","@b3861061e4b18a29687bf62038fae1e0@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    @Override
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int a;
        int b;
        switch (this.face) {
            case ""A"":
                a = 14;
                break;
            case ""K"":
                a = 13;
                break;
            case ""Q"":
                a = 12;
                break;
            case ""J"":
                a = 11;
                break;
            default:
                a = Integer.parseInt(this.face);
                break;
        }

        switch (that.face) {
            case ""A"":
                b = 14;
                break;
            case ""K"":
                b = 13;
                break;
            case ""Q"":
                b = 12;
                break;
            case ""J"":
                b = 11;
                break;
            default:
                b = Integer.parseInt(that.face);
                break;
        }

        if (a > b) {
            return +1;
        } else if (a < b) {
            return -1;
        } else if (this.face.compareTo(that.face) == 0) {
            if (this.suit.compareTo(that.suit) < 0) {
                return -1;
            }
            if (this.suit.compareTo(that.suit) > 0) {
                return +1;
            } else {
                return 0;
            }
        }

        return 0;
    }
//    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int a;
            int b;
            switch (c1.face) {
                case ""A"":
                    a = 14;
                    break;
                case ""K"":
                    a = 13;
                    break;
                case ""Q"":
                    a = 12;
                    break;
                case ""J"":
                    a = 11;
                    break;
                default:
                    a = Integer.parseInt(c1.face);
                    break;
            }

            switch (c2.face) {
                case ""A"":
                    b = 14;
                    break;
                case ""K"":
                    b = 13;
                    break;
                case ""Q"":
                    b = 12;
                    break;
                case ""J"":
                    b = 11;
                    break;
                default:
                    b = Integer.parseInt(c2.face);
                    break;
            }

            if (a > b) {
                return +1;
            } else if (a < b) {
                return -1;
            } else if (c1.face.compareTo(c2.face) == 0) {
                if (c1.suit.compareTo(c2.suit) < 0) {
                    return -1;
                }
                if (c1.suit.compareTo(c2.suit) > 0) {
                    return +1;
                } else {
                    return 0;
                }
            }

            return 0;
        }
    }

    public static void main(String[] args) {
    }
}
@b3861061e4b18a29687bf62038fae1e0@"
"r04631006","0","0.66","111600","@1fe6fe2e1e4fdf08e65bf3a7e81ae6ff@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    @Override
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int a;
        int b;
        switch (this.face) {
            case ""A"":
                a = 14;
                break;
            case ""K"":
                a = 13;
                break;
            case ""Q"":
                a = 12;
                break;
            case ""J"":
                a = 11;
                break;
            default:
                a = Integer.parseInt(this.face);
                break;
        }

        switch (that.face) {
            case ""A"":
                b = 14;
                break;
            case ""K"":
                b = 13;
                break;
            case ""Q"":
                b = 12;
                break;
            case ""J"":
                b = 11;
                break;
            default:
                b = Integer.parseInt(that.face);
                break;
        }

        if (a > b) {
            return -1;
        } else if (a < b) {
            return +1;
        } else if (this.face.compareTo(that.face) == 0) {
            if (this.suit.compareTo(that.suit) < 0) {
                return +1;
            }
            if (this.suit.compareTo(that.suit) > 0) {
                return -1;
            } else {
                return 0;
            }
        }

        return 0;
    }
//    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int a;
            int b;
            switch (c1.face) {
                case ""A"":
                    a = 14;
                    break;
                case ""K"":
                    a = 13;
                    break;
                case ""Q"":
                    a = 12;
                    break;
                case ""J"":
                    a = 11;
                    break;
                default:
                    a = Integer.parseInt(c1.face);
                    break;
            }

            switch (c2.face) {
                case ""A"":
                    b = 14;
                    break;
                case ""K"":
                    b = 13;
                    break;
                case ""Q"":
                    b = 12;
                    break;
                case ""J"":
                    b = 11;
                    break;
                default:
                    b = Integer.parseInt(c2.face);
                    break;
            }

            if (a > b) {
                return -1;
            } else if (a < b) {
                return +1;
            } else if (c1.face.compareTo(c2.face) == 0) {
                if (c1.suit.compareTo(c2.suit) < 0) {
                    return +1;
                }
                if (c1.suit.compareTo(c2.suit) > 0) {
                    return -1;
                } else {
                    return 0;
                }
            }

            return 0;
        }
    }

    public static void main(String[] args) {

    }
}
@1fe6fe2e1e4fdf08e65bf3a7e81ae6ff@"
"r04631006","0","0.67","111600","@5b2e291663892bbab75c18f7a30242dd@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    @Override
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int a;
        int b;
        switch (this.face) {
            case ""A"":
                a = 14;
                break;
            case ""K"":
                a = 13;
                break;
            case ""Q"":
                a = 12;
                break;
            case ""J"":
                a = 11;
                break;
            default:
                a = Integer.parseInt(this.face);
                break;
        }

        switch (that.face) {
            case ""A"":
                b = 14;
                break;
            case ""K"":
                b = 13;
                break;
            case ""Q"":
                b = 12;
                break;
            case ""J"":
                b = 11;
                break;
            default:
                b = Integer.parseInt(that.face);
                break;
        }

        if (a > b) {
            return -1;
        } else if (a < b) {
            return +1;
        } else {
            return 0;
        }

    }
//    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {

            if (c1.suit.compareTo(c2.suit) < 0) {
                return +1;
            }
            if (c1.suit.compareTo(c2.suit) > 0) {
                return -1;
            } else {
                return 0;
            }
        }

    }

    public static void main(String[] args) {

    }
}
@5b2e291663892bbab75c18f7a30242dd@"
"r04631006","0","0.65","111680","@2ec095f343bd1c6c288125db669889c7@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; 
    private String suit; 

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();


    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }


    public String getFace() {
        return this.face;
    }

  
    public String getSuit() {
        return this.suit;
    }


    @Override
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int a;
        int b;
        switch (this.face) {
            case ""A"":
                a = 14;
                break;
            case ""K"":
                a = 13;
                break;
            case ""Q"":
                a = 12;
                break;
            case ""J"":
                a = 11;
                break;
            default:
                a = Integer.parseInt(this.face);
                break;
        }

        switch (that.face) {
            case ""A"":
                b = 14;
                break;
            case ""K"":
                b = 13;
                break;
            case ""Q"":
                b = 12;
                break;
            case ""J"":
                b = 11;
                break;
            default:
                b = Integer.parseInt(that.face);
                break;
        }

        if (a > b) {
            return -1;
        } else if (a < b) {
            return +1;
        } else if (this.face.compareTo(that.face) == 0) {
            if (this.suit.compareTo(that.suit) < 0) {
                return +1;
            }
            if (this.suit.compareTo(that.suit) > 0) {
                return -1;
            } else {
                return 0;
            }
        }

        return 0;
    }

    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {

            if (c1.suit.compareTo(c2.suit) < 0) {
                return +1;
            }
            if (c1.suit.compareTo(c2.suit) > 0) {
                return -1;
            } else {
                return 0;
            }
        }
    }

    public static void main(String[] args) {
    }
}

@2ec095f343bd1c6c288125db669889c7@"
"r04631006","5","0.134","110448","@f25cfbd356dad0b538092c0388cd3171@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; 
    private String suit; 

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();


    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }


    public String getFace() {
        return this.face;
    }

  
    public String getSuit() {
        return this.suit;
    }


    @Override
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int a;
        int b;
        switch (this.face) {
            case ""A"":
                a = 14;
                break;
            case ""K"":
                a = 13;
                break;
            case ""Q"":
                a = 12;
                break;
            case ""J"":
                a = 11;
                break;
            default:
                a = Integer.parseInt(this.face);
                break;
        }

        switch (that.face) {
            case ""A"":
                b = 14;
                break;
            case ""K"":
                b = 13;
                break;
            case ""Q"":
                b = 12;
                break;
            case ""J"":
                b = 11;
                break;
            default:
                b = Integer.parseInt(that.face);
                break;
        }

        if (a > b) {
            return +1;
        } else if (a < b) {
            return -1;
        } else if (this.face.compareTo(that.face) == 0) {
            if (this.suit.compareTo(that.suit) < 0) {
                return -1;
            }
            if (this.suit.compareTo(that.suit) > 0) {
                return +1;
            } else {
                return 0;
            }
        }

        return 0;
    }

    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {

            if (c1.suit.compareTo(c2.suit) < 0) {
                return -1;
            }
            if (c1.suit.compareTo(c2.suit) > 0) {
                return +1;
            } else {
                return 0;
            }
        }
    }

    public static void main(String[] args) {

    }
}

@f25cfbd356dad0b538092c0388cd3171@"
"r04945021","0","0.64","108848","@c61450f8507f287bd7f6dc05dece87d7@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
   public int CardID(String CC) {
 int CardID=0;
       switch(CC){
           case ""A"":
               CardID= 14;
               break;
           case ""K"":
               CardID= 13;
               break;
           case ""Q"":
               CardID= 12;
               break;
           case ""J"":
               CardID= 11;
               break;
           case ""Spades"":
               CardID= 4;
               break;
           case ""Hearts"":
               CardID=3;
               break;
           case ""Diamonds"":
               CardID=2;
               break;
           case ""Clubs"":
               CardID=1;
               break;
           default:
               CardID=Integer.parseInt(CC);
               break;                
       }
       return CardID;   
   }
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int CardSuitThis = CardID(this.suit);
        int CardSuitThat = CardID(that.suit);
        int CardFaceThis = CardID(this.face);
        int CardFaceThat = CardID(that.face);
        
        if (CardFaceThat > CardFaceThis) {
            return -1;
        } else if (CardFaceThat < CardFaceThis) {
            return 1;
        } else {
            if (CardSuitThat > CardSuitThis) {
                return -1;
            } else if (CardSuitThat < CardSuitThis) {
                return 1;
            } else {
                return 0;
            }
        }
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int CardI(String CC) {
 int CardID=0;
       switch(CC){
           case ""A"":
               CardID= 14;
               break;
           case ""K"":
               CardID= 13;
               break;
           case ""Q"":
               CardID= 12;
               break;
           case ""J"":
               CardID= 11;
               break;
           case ""Spades"":
               CardID= 4;
               break;
           case ""Hearts"":
               CardID=3;
               break;
           case ""Diamonds"":
               CardID=2;
               break;
           case ""Clubs"":
               CardID=1;
               break;
           default:
               CardID=Integer.parseInt(CC);            
               break;                
       }
       return CardID;   
   }
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit

            int C1Suit=CardI(c1.suit);
            int C2Suit=CardI(c2.suit);
            if(C1Suit>C2Suit)
                return -1;
            else if (C1Suit<C2Suit)
                return 1;
            else
                    return 0;
        }
    }   
    
//    public static void main(String[] args) {
//        Card[] test = new Card[2];
//        test[0] = new Card(""A"",""Clubs"");
//        test[1] = new Card(""A"",""Hearts"");
//        System.out.println(test[1].compareTo(test[0]));
//        System.out.println(Card.SUIT_ORDER.compare(test[1], test[0]));
//    }
}


@c61450f8507f287bd7f6dc05dece87d7@"
"r04945021","5","0.132","111728","@caa557e4d9a8a0e0c0bd559fa3beb8cb@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
   public int CardID(String CC) {
 int CardID=0;
       switch(CC){
           case ""A"":
               CardID= 14;
               break;
           case ""K"":
               CardID= 13;
               break;
           case ""Q"":
               CardID= 12;
               break;
           case ""J"":
               CardID= 11;
               break;
           case ""Spades"":
               CardID= 4;
               break;
           case ""Hearts"":
               CardID=3;
               break;
           case ""Diamonds"":
               CardID=2;
               break;
           case ""Clubs"":
               CardID=1;
               break;
           default:
               CardID=Integer.parseInt(CC);
               break;                
       }
       return CardID;   
   }
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int CardSuitThis = CardID(this.suit);
        int CardSuitThat = CardID(that.suit);
        int CardFaceThis = CardID(this.face);
        int CardFaceThat = CardID(that.face);
        
        if (CardFaceThat > CardFaceThis) {
            return -1;
        } else if (CardFaceThat < CardFaceThis) {
            return 1;
        } else {
            if (CardSuitThat > CardSuitThis) {
                return -1;
            } else if (CardSuitThat < CardSuitThis) {
                return 1;
            } else {
                return 0;
            }
        }
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int CardI(String CC) {
 int CardID=0;
       switch(CC){
           case ""Spades"":
               CardID= 4;
               break;
           case ""Hearts"":
               CardID=3;
               break;
           case ""Diamonds"":
               CardID=2;
               break;
           case ""Clubs"":
               CardID=1;
               break;
           default:            
               break;                
       }
       return CardID;   
   }
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit

            int C1Suit=CardI(c1.suit);
            int C2Suit=CardI(c2.suit);
            if(C1Suit>C2Suit)
                return 1;
            else if (C1Suit<C2Suit)
                return -1;
            else
                    return 0;
        }
    }   
    
//    public static void main(String[] args) {
//        Card[] test = new Card[2];
//        test[0] = new Card(""A"",""Clubs"");
//        test[1] = new Card(""A"",""Hearts"");
//        System.out.println(test[1].compareTo(test[0]));
//        System.out.println(Card.SUIT_ORDER.compare(test[1], test[0]));
//    }
}


@caa557e4d9a8a0e0c0bd559fa3beb8cb@"
"r03228006","0","0","0","@a817a39aaad22e752cd2a9370c230ef4@import java.util.Comparator;


public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thif = Integer.parseInt(this.face);
        int thaf = Integer.parseInt(that.face);
        if (thif > thaf) return 1;
        if (thif < thaf) return -1;
        //在suit_order這個class下做compare這件事
        return SUIT_ORDER.compare(this, that);
        //return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            //someone spades
            if (c1.suit==""Spades""|c2.suit==""Spades"") {
                if (c1.suit==""Spades""&c2.suit!=""Spades"") return 1;
                else if (c1.suit!=""Spades""&c2.suit==""Spades"") return -1;}
            if (c1.suit==""Hearts""|c2.suit==""Hearts"") {
                if (c1.suit==""Hearts""&c2.suit!=""Hearts"") return 1;
                else if (c1.suit!=""Hearts""&c2.suit==""Hearts"") return -1;}
            if (c1.suit==""Diamonds""|c2.suit==""Diamonds"") {
                if(c1.suit==""Diamonds""&c2.suit!=""Diamonds"") return 1;
                else if(c1.suit!=""Diamonds""&c2.suit==""Diamonds"") return -1;
            }
            return 0;
        }
    }   
}

@a817a39aaad22e752cd2a9370c230ef4@"
"r03228006","0","0","0","@1fdb20dae71973ab805cf3aefecce215@import java.util.Comparator;


public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thif = Integer.parseInt(this.face);
        int thaf = Integer.parseInt(that.face);
        if (thif > thaf) return 1;
        if (thif < thaf) return -1;
        //在suit_order這個class下做compare這件事
        //return SUIT_ORDER.compare(this, that);
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            //someone spades
            if (c1.suit==""Spades""|c2.suit==""Spades"") {
                if (c1.suit==""Spades""&c2.suit!=""Spades"") return 1;
                else if (c1.suit!=""Spades""&c2.suit==""Spades"") return -1;}
            if (c1.suit==""Hearts""|c2.suit==""Hearts"") {
                if (c1.suit==""Hearts""&c2.suit!=""Hearts"") return 1;
                else if (c1.suit!=""Hearts""&c2.suit==""Hearts"") return -1;}
            if (c1.suit==""Diamonds""|c2.suit==""Diamonds"") {
                if(c1.suit==""Diamonds""&c2.suit!=""Diamonds"") return 1;
                else if(c1.suit!=""Diamonds""&c2.suit==""Diamonds"") return -1;
            }
            return 0;
        }
    }   
}

@1fdb20dae71973ab805cf3aefecce215@"
"r03228006","0","0","0","@d1692f9dc09b97406f9e41691607ce7d@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Comparator;


public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(this.face==""A"") this.face=""14"";
        if(that.face==""A"") that.face=""14"";
        if(this.face==""K"") this.face=""13"";
        if(that.face==""K"") that.face=""13"";
        if(this.face==""Q"") this.face=""12"";
        if(that.face==""Q"") that.face=""12"";
        if(this.face==""J"") this.face=""11"";
        if(that.face==""J"") that.face=""11"";
        int thif = Integer.parseInt(this.face);
        int thaf = Integer.parseInt(that.face);
        if (thif > thaf) return 1;
        if (thif < thaf) return -1;
        //在suit_order這個class下做compare這件事
        return SUIT_ORDER.compare(this, that);
        //return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            //someone spades
            if (c1.suit==""Spades""|c2.suit==""Spades"") {
                if (c1.suit==""Spades""&c2.suit!=""Spades"") return 1;
                else if (c1.suit!=""Spades""&c2.suit==""Spades"") return -1;}
            if (c1.suit==""Hearts""|c2.suit==""Hearts"") {
                if (c1.suit==""Hearts""&c2.suit!=""Hearts"") return 1;
                else if (c1.suit!=""Hearts""&c2.suit==""Hearts"") return -1;}
            if (c1.suit==""Diamonds""|c2.suit==""Diamonds"") {
                if(c1.suit==""Diamonds""&c2.suit!=""Diamonds"") return 1;
                else if(c1.suit!=""Diamonds""&c2.suit==""Diamonds"") return -1;
            }
            return 0;
        }
    }   
    
        public static void main(String[] args){
        //
           Card[] test = new Card[2];
           test[0]= new Card(""Q"",""Hearts"");
           test[1]= new Card(""K"",""Spades"");        

           System.out.println(test[0].compareTo(test[1]));
}}
@d1692f9dc09b97406f9e41691607ce7d@"
"r03228006","0","0","0","@0990b10802bf513c3b7f5e793c81c969@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(this.face==""A"") this.face=""14"";
        if(that.face==""A"") that.face=""14"";
        if(this.face==""K"") this.face=""13"";
        if(that.face==""K"") that.face=""13"";
        if(this.face==""Q"") this.face=""12"";
        if(that.face==""Q"") that.face=""12"";
        if(this.face==""J"") this.face=""11"";
        if(that.face==""J"") that.face=""11"";
        int thif = Integer.parseInt(this.face);
        int thaf = Integer.parseInt(that.face);
        if (thif > thaf) return 1;
        if (thif < thaf) return -1;
        //在suit_order這個class下做compare這件事
        return SUIT_ORDER.compare(this, that);
        //return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            //someone spades
            if (c1.suit==""Spades""|c2.suit==""Spades"") {
                if (c1.suit==""Spades""&c2.suit!=""Spades"") return 1;
                else if (c1.suit!=""Spades""&c2.suit==""Spades"") return -1;}
            if (c1.suit==""Hearts""|c2.suit==""Hearts"") {
                if (c1.suit==""Hearts""&c2.suit!=""Hearts"") return 1;
                else if (c1.suit!=""Hearts""&c2.suit==""Hearts"") return -1;}
            if (c1.suit==""Diamonds""|c2.suit==""Diamonds"") {
                if(c1.suit==""Diamonds""&c2.suit!=""Diamonds"") return 1;
                else if(c1.suit!=""Diamonds""&c2.suit==""Diamonds"") return -1;
            }
            return 0;
        }
    }   
    
//        public static void main(String[] args){
//        //
//           Card[] test = new Card[2];
//           test[0]= new Card(""Q"",""Hearts"");
//           test[1]= new Card(""K"",""Spades"");        
//
//           System.out.println(test[0].compareTo(test[1]));
//}
}


@0990b10802bf513c3b7f5e793c81c969@"
"r03228006","0","0","0","@ce20cb359c59e43b41e924b3214f20dc@public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(this.face==""A"") this.face=""14"";
        if(that.face==""A"") that.face=""14"";
        if(this.face==""K"") this.face=""13"";
        if(that.face==""K"") that.face=""13"";
        if(this.face==""Q"") this.face=""12"";
        if(that.face==""Q"") that.face=""12"";
        if(this.face==""J"") this.face=""11"";
        if(that.face==""J"") that.face=""11"";
        int thif = Integer.parseInt(this.face);
        int thaf = Integer.parseInt(that.face);
        if (thif > thaf) return 1;
        if (thif < thaf) return -1;
        //在suit_order這個class下做compare這件事
        return SUIT_ORDER.compare(this, that);
        //return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            //someone spades
            if (c1.suit==""Spades""|c2.suit==""Spades"") {
                if (c1.suit==""Spades""&c2.suit!=""Spades"") return 1;
                else if (c1.suit!=""Spades""&c2.suit==""Spades"") return -1;}
            if (c1.suit==""Hearts""|c2.suit==""Hearts"") {
                if (c1.suit==""Hearts""&c2.suit!=""Hearts"") return 1;
                else if (c1.suit!=""Hearts""&c2.suit==""Hearts"") return -1;}
            if (c1.suit==""Diamonds""|c2.suit==""Diamonds"") {
                if(c1.suit==""Diamonds""&c2.suit!=""Diamonds"") return 1;
                else if(c1.suit!=""Diamonds""&c2.suit==""Diamonds"") return -1;
            }
            return 0;
        }
    }   
    
//        public static void main(String[] args){
//        //
//           Card[] test = new Card[2];
//           test[0]= new Card(""Q"",""Hearts"");
//           test[1]= new Card(""K"",""Spades"");        
//
//           System.out.println(test[0].compareTo(test[1]));
//}
}

@ce20cb359c59e43b41e924b3214f20dc@"
"r03228006","0","0","0","@5c6cd836c36e80fb90be31a1da321a57@import java.io.FileReader;
import java.util.Arrays;
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thif = 0;
        int thaf = 0;
        if(this.face==""A"") thif=14;
          else if(this.face==""K"") thif=13;
          else if(this.face==""Q"") thif=12;
          else if(this.face==""J"") thif=11;
          else thif = Integer.parseInt(this.face);
        if(that.face==""A"") thaf=14;
          else if(that.face==""K"") thaf = 13;
          else if(that.face==""Q"") thaf = 12;
          else if(that.face==""J"") thaf = 11;
          else thaf = Integer.parseInt(that.face);
        if (thif > thaf) return 1;
        if (thif < thaf) return -1;
        //在suit_order這個class下做compare這件事
        return SUIT_ORDER.compare(this, that);
        //return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            //someone spades
            if (c1.suit==""Spades""|c2.suit==""Spades"") {
                if (c1.suit==""Spades""&c2.suit!=""Spades"") return 1;
                else if (c1.suit!=""Spades""&c2.suit==""Spades"") return -1;}
            if (c1.suit==""Hearts""|c2.suit==""Hearts"") {
                if (c1.suit==""Hearts""&c2.suit!=""Hearts"") return 1;
                else if (c1.suit!=""Hearts""&c2.suit==""Hearts"") return -1;}
            if (c1.suit==""Diamonds""|c2.suit==""Diamonds"") {
                if(c1.suit==""Diamonds""&c2.suit!=""Diamonds"") return 1;
                else if(c1.suit!=""Diamonds""&c2.suit==""Diamonds"") return -1;
            }
            return 0;
        }
    }   
    
//        public static void main(String[] args){
//        //
//           Card[] test = new Card[2];
//           test[0]= new Card(""Q"",""Hearts"");
//           test[1]= new Card(""4"",""Spades"");        
//           Arrays.sort(test);
//           System.out.println(test[0].face);
//           System.out.println(test[1].face);
//           System.out.println(test[0].compareTo(test[1]));
//}
}
@5c6cd836c36e80fb90be31a1da321a57@"
"r03228006","0","0.66","111024","@ee460cabbf43d21bd042281f2cb992de@import java.io.FileReader;
import java.util.Arrays;
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thif = 0;
        int thaf = 0;
        if(this.face.equals(""A"")) thif=14;
          else if(this.face.equals(""K"")) thif=13;
          else if(this.face.equals(""Q"")) thif=12;
          else if(this.face.equals(""J"")) thif=11;
          else thif = Integer.parseInt(this.face);
        if(that.face.equals(""A"")) thaf=14;
          else if(that.face.equals(""K"")) thaf = 13;
          else if(that.face.equals(""Q"")) thaf = 12;
          else if(that.face.equals(""J"")) thaf = 11;
          else thaf = Integer.parseInt(that.face);
        if (thif > thaf) return 1;
        if (thif < thaf) return -1;
        //在suit_order這個class下做compare這件事
        return SUIT_ORDER.compare(this, that);
        //return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            //someone spades
            if (c1.suit==""Spades""|c2.suit==""Spades"") {
                if (c1.suit==""Spades""&c2.suit!=""Spades"") return 1;
                else if (c1.suit!=""Spades""&c2.suit==""Spades"") return -1;}
            if (c1.suit==""Hearts""|c2.suit==""Hearts"") {
                if (c1.suit==""Hearts""&c2.suit!=""Hearts"") return 1;
                else if (c1.suit!=""Hearts""&c2.suit==""Hearts"") return -1;}
            if (c1.suit==""Diamonds""|c2.suit==""Diamonds"") {
                if(c1.suit==""Diamonds""&c2.suit!=""Diamonds"") return 1;
                else if(c1.suit!=""Diamonds""&c2.suit==""Diamonds"") return -1;
            }
            return 0;
        }
    }   
    
//        public static void main(String[] args){
//        //
//           Card[] test = new Card[2];
//           test[0]= new Card(""Q"",""Hearts"");
//           test[1]= new Card(""4"",""Spades"");        
//           Arrays.sort(test);
//           System.out.println(test[0].face);
//           System.out.println(test[1].face);
//           System.out.println(test[0].compareTo(test[1]));
//}
}

@ee460cabbf43d21bd042281f2cb992de@"
"r03228006","0","0.66","110208","@f0cca36f5e8e6929bb3e5aba094ca503@import java.io.FileReader;
import java.util.Arrays;
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thif = 0;
        int thaf = 0;
        if(this.face.equals(""A"")) thif=14;
          else if(this.face.equals(""K"")) thif=13;
          else if(this.face.equals(""Q"")) thif=12;
          else if(this.face.equals(""J"")) thif=11;
          else thif = Integer.parseInt(this.face);
        if(that.face.equals(""A"")) thaf=14;
          else if(that.face.equals(""K"")) thaf = 13;
          else if(that.face.equals(""Q"")) thaf = 12;
          else if(that.face.equals(""J"")) thaf = 11;
          else thaf = Integer.parseInt(that.face);
        if (thif > thaf) return +1;
        if (thif < thaf) return -1;
        //在suit_order這個class下做compare這件事
        return SUIT_ORDER.compare(this, that);
        //return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            //someone spades
            if (c1.suit==""Spades""|c2.suit==""Spades"") {
                if (c1.suit==""Spades""&c2.suit!=""Spades"") return +1;
                else if (c1.suit!=""Spades""&c2.suit==""Spades"") return -1;}
            if (c1.suit==""Hearts""|c2.suit==""Hearts"") {
                if (c1.suit==""Hearts""&c2.suit!=""Hearts"") return +1;
                else if (c1.suit!=""Hearts""&c2.suit==""Hearts"") return -1;}
            if (c1.suit==""Diamonds""|c2.suit==""Diamonds"") {
                if(c1.suit==""Diamonds""&c2.suit!=""Diamonds"") return +1;
                else if(c1.suit!=""Diamonds""&c2.suit==""Diamonds"") return -1;
            }
            return 0;
        }
    }   
    
//        public static void main(String[] args){
//        //
//           Card[] test = new Card[2];
//           test[0]= new Card(""K"",""Spades"");
//           test[1]= new Card(""K"",""Hearts"");        
//           //Arrays.sort(test);
//           System.out.println(test[0].face);
//           System.out.println(test[1].face);
//           System.out.println(test[0].compareTo(test[1]));
//}
}

@f0cca36f5e8e6929bb3e5aba094ca503@"
"r03228006","0","0.66","110880","@774824980e84f8c56bbe928d2b96e26d@import java.io.FileReader;
import java.util.Arrays;
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thif = 0;
        int thaf = 0;
        if(this.face.equals(""A"")) thif=14;
          else if(this.face.equals(""K"")) thif=13;
          else if(this.face.equals(""Q"")) thif=12;
          else if(this.face.equals(""J"")) thif=11;
          else thif = Integer.parseInt(this.face);
        if(that.face.equals(""A"")) thaf=14;
          else if(that.face.equals(""K"")) thaf = 13;
          else if(that.face.equals(""Q"")) thaf = 12;
          else if(that.face.equals(""J"")) thaf = 11;
          else thaf = Integer.parseInt(that.face);
        if (thif > thaf) return +1;
        if (thif < thaf) return -1;
        //在suit_order這個class下做compare這件事
        return SUIT_ORDER.compare(this, that);
        //return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            //someone spades Diamonds   Spades > Hearts > Diamonds > Clubs
            if (c1.suit==""Spades""|c2.suit==""Spades"") {
                if (c1.suit==""Spades""&c2.suit!=""Spades"") return +1;
                else if (c1.suit!=""Spades""&c2.suit==""Spades"") return -1;}
            else if (c1.suit==""Hearts""|c2.suit==""Hearts"") {
                if (c1.suit==""Hearts""&c2.suit!=""Hearts"") return +1;
                else if (c1.suit!=""Hearts""&c2.suit==""Hearts"") return -1;}
            else if (c1.suit==""Diamonds""|c2.suit==""Diamonds"") {
                if(c1.suit==""Diamonds""&c2.suit!=""Diamonds"") return +1;
                else if(c1.suit!=""Diamonds""&c2.suit==""Diamonds"") return -1;
            }
            return 0;
        }
    }   
//    
//        public static void main(String[] args){
//        //
//           Card[] test = new Card[2];
//           test[0]= new Card(""10"",""Spades"");
//           test[1]= new Card(""Q"",""Clubs"");        
//           //Arrays.sort(test);
//           System.out.println(test[0].face);
//           System.out.println(test[1].face);
//           System.out.println(test[0].compareTo(test[1]));
//}
}

@774824980e84f8c56bbe928d2b96e26d@"
"r03228006","0","0.67","111088","@e07c920994ef8883d0a1a0bcf6a400d3@import java.io.FileReader;
import java.util.Arrays;
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thif = 0;
        int thaf = 0;
        if(this.face.equals(""A"")) thif=14;
          else if(this.face.equals(""K"")) thif=13;
          else if(this.face.equals(""Q"")) thif=12;
          else if(this.face.equals(""J"")) thif=11;
          else thif = Integer.parseInt(this.face);
        if(that.face.equals(""A"")) thaf=14;
          else if(that.face.equals(""K"")) thaf = 13;
          else if(that.face.equals(""Q"")) thaf = 12;
          else if(that.face.equals(""J"")) thaf = 11;
          else thaf = Integer.parseInt(that.face);
        if (thif > thaf) return +1;
        if (thif < thaf) return -1;
        //在suit_order這個class下做compare這件事
        //return SUIT_ORDER.compare(this, that);
        if (thif == thaf) {
            if (this.suit==""Spades""|that.suit==""Spades"") {
                if (this.suit==""Spades""&that.suit!=""Spades"") return +1;
                else if (this.suit!=""Spades""&that.suit==""Spades"") return -1;}
            else if (this.suit==""Hearts""|that.suit==""Hearts"") {
                if (this.suit==""Hearts""&that.suit!=""Hearts"") return +1;
                else if (this.suit!=""Hearts""&that.suit==""Hearts"") return -1;}
            else if (this.suit==""Diamonds""|that.suit==""Diamonds"") {
                if(this.suit==""Diamonds""&that.suit!=""Diamonds"") return +1;
                else if(this.suit!=""Diamonds""&that.suit==""Diamonds"") return -1;
            }
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            //someone spades Diamonds   Spades > Hearts > Diamonds > Clubs
            if (c1.suit==""Spades""|c2.suit==""Spades"") {
                if (c1.suit==""Spades""&c2.suit!=""Spades"") return +1;
                else if (c1.suit!=""Spades""&c2.suit==""Spades"") return -1;}
            else if (c1.suit==""Hearts""|c2.suit==""Hearts"") {
                if (c1.suit==""Hearts""&c2.suit!=""Hearts"") return +1;
                else if (c1.suit!=""Hearts""&c2.suit==""Hearts"") return -1;}
            else if (c1.suit==""Diamonds""|c2.suit==""Diamonds"") {
                if(c1.suit==""Diamonds""&c2.suit!=""Diamonds"") return +1;
                else if(c1.suit!=""Diamonds""&c2.suit==""Diamonds"") return -1;
            }
            return 0;
        }
    }   
//    
//        public static void main(String[] args){
//        //
//           Card[] test = new Card[2];
//           test[0]= new Card(""10"",""Hearts"");
//           test[1]= new Card(""Q"",""Clubs"");        
//           //Arrays.sort(test);
//           System.out.println(test[0].face);
//           System.out.println(test[1].face);
//           System.out.println(test[0].compareTo(test[1]));
//           System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
//}
}

@e07c920994ef8883d0a1a0bcf6a400d3@"
"r03228006","0","0.65","110960","@f3875f11ef6e24b405468c78ae19594d@import java.io.FileReader;
import java.util.Arrays;
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thif = 0;
        int thaf = 0;
        if(this.face.equals(""A"")) thif=14;
          else if(this.face.equals(""K"")) thif=13;
          else if(this.face.equals(""Q"")) thif=12;
          else if(this.face.equals(""J"")) thif=11;
          else thif = Integer.parseInt(this.face);
        if(that.face.equals(""A"")) thaf=14;
          else if(that.face.equals(""K"")) thaf = 13;
          else if(that.face.equals(""Q"")) thaf = 12;
          else if(that.face.equals(""J"")) thaf = 11;
          else thaf = Integer.parseInt(that.face);
        if (thif > thaf) return +1;
        if (thif < thaf) return -1;
        //在suit_order這個class下做compare這件事
        return SUIT_ORDER.compare(this, that);
//        if (thif == thaf) {
//            if (this.suit==""Spades""|that.suit==""Spades"") {
//                if (this.suit==""Spades""&that.suit!=""Spades"") return +1;
//                else if (this.suit!=""Spades""&that.suit==""Spades"") return -1;}
//            else if (this.suit==""Hearts""|that.suit==""Hearts"") {
//                if (this.suit==""Hearts""&that.suit!=""Hearts"") return +1;
//                else if (this.suit!=""Hearts""&that.suit==""Hearts"") return -1;}
//            else if (this.suit==""Diamonds""|that.suit==""Diamonds"") {
//                if(this.suit==""Diamonds""&that.suit!=""Diamonds"") return +1;
//                else if(this.suit!=""Diamonds""&that.suit==""Diamonds"") return -1;
//            }
//        }
        //return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            //someone spades Diamonds   Spades > Hearts > Diamonds > Clubs
            if (c1.suit==""Spades""|c2.suit==""Spades"") {
                if (c1.suit==""Spades""&c2.suit!=""Spades"") {return +1;}
                else if (c1.suit!=""Spades""&c2.suit==""Spades"") {return -1;}}
            else if (c1.suit==""Hearts""|c2.suit==""Hearts"") {
                if (c1.suit==""Hearts""&c2.suit!=""Hearts"") {return +1;}
                else if (c1.suit!=""Hearts""&c2.suit==""Hearts"") {return -1;}}
            else if (c1.suit==""Diamonds""|c2.suit==""Diamonds"") {
                if(c1.suit==""Diamonds""&c2.suit!=""Diamonds"") {return +1;}
                else if(c1.suit!=""Diamonds""&c2.suit==""Diamonds"") {return -1;}}
            return 0;
        } } 
//    
//        public static void main(String[] args){
//        //
//           Card[] test = new Card[4];
//           test[0]= new Card(""3"",""Hearts"");
//           test[1]= new Card(""J"",""Clubs""); 
//           test[2]= new Card(""7"",""Spades"");     
//           test[3]= new Card(""A"",""Diamonds"");     
//           //Arrays.sort(test);
//           //System.out.println(test[0].face);
//           //System.out.println(test[1].face);
//           System.out.println(test[0].compareTo(test[1]));
//           System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
//           System.out.println(test[2].compareTo(test[3]));
//           System.out.println(Card.SUIT_ORDER.compare(test[2],test[3]));
//}
}

@f3875f11ef6e24b405468c78ae19594d@"
"r03228006","0","0.65","111056","@d5115a37f4c17300b9bea8ada3841cfb@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thif = 0;
        int thaf = 0;
        if(this.face.equals(""A"")) thif=14;
          else if(this.face.equals(""K"")) thif=13;
          else if(this.face.equals(""Q"")) thif=12;
          else if(this.face.equals(""J"")) thif=11;
          else thif = Integer.parseInt(this.face);
        if(that.face.equals(""A"")) thaf=14;
          else if(that.face.equals(""K"")) thaf = 13;
          else if(that.face.equals(""Q"")) thaf = 12;
          else if(that.face.equals(""J"")) thaf = 11;
          else thaf = Integer.parseInt(that.face);
        if (thif > thaf) return +1;
        if (thif < thaf) return -1;
        //在suit_order這個class下做compare這件事
        return SUIT_ORDER.compare(this, that);
//        if (thif == thaf) {
//            if (this.suit==""Spades""|that.suit==""Spades"") {
//                if (this.suit==""Spades""&that.suit!=""Spades"") return +1;
//                else if (this.suit!=""Spades""&that.suit==""Spades"") return -1;}
//            else if (this.suit==""Hearts""|that.suit==""Hearts"") {
//                if (this.suit==""Hearts""&that.suit!=""Hearts"") return +1;
//                else if (this.suit!=""Hearts""&that.suit==""Hearts"") return -1;}
//            else if (this.suit==""Diamonds""|that.suit==""Diamonds"") {
//                if(this.suit==""Diamonds""&that.suit!=""Diamonds"") return +1;
//                else if(this.suit!=""Diamonds""&that.suit==""Diamonds"") return -1;
//            }
//        }
        //return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            //someone spades Diamonds   Spades > Hearts > Diamonds > Clubs
            if (c1.suit==""Spades""|c2.suit==""Spades"") {
                if (c1.suit==""Spades""&c2.suit!=""Spades"") {return +1;}
                else if (c1.suit!=""Spades""&c2.suit==""Spades"") {return -1;}}
            else if (c1.suit==""Hearts""|c2.suit==""Hearts"") {
                if (c1.suit==""Hearts""&c2.suit!=""Hearts"") {return +1;}
                else if (c1.suit!=""Hearts""&c2.suit==""Hearts"") {return -1;}}
            else if (c1.suit==""Diamonds""|c2.suit==""Diamonds"") {
                if(c1.suit==""Diamonds""&c2.suit!=""Diamonds"") {return +1;}
                else if(c1.suit!=""Diamonds""&c2.suit==""Diamonds"") {return -1;}}
            return 0;
        } } 
//    
        public static void main(String[] args){
        //
           Card[] test = new Card[4];
           test[0]= new Card(""3"",""Hearts"");
           test[1]= new Card(""J"",""Clubs""); 
           test[2]= new Card(""7"",""Spades"");     
           test[3]= new Card(""A"",""Diamonds"");     
           //Arrays.sort(test);
           //System.out.println(test[0].face);
           //System.out.println(test[1].face);
           System.out.println(test[0].compareTo(test[1]));
           System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
           System.out.println(test[2].compareTo(test[3]));
           System.out.println(Card.SUIT_ORDER.compare(test[2],test[3]));
}
}

@d5115a37f4c17300b9bea8ada3841cfb@"
"r03228006","0","0.67","110656","@4c1d23036ba68ca0e790c597fac9cec9@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thif = 0;
        int thaf = 0;
        if(this.face.equals(""A"")) thif=14;
          else if(this.face.equals(""K"")) thif=13;
          else if(this.face.equals(""Q"")) thif=12;
          else if(this.face.equals(""J"")) thif=11;
          else thif = Integer.parseInt(this.face);
        if(that.getFace().equals(""A"")) thaf=14;
          else if(that.getFace().equals(""K"")) thaf = 13;
          else if(that.getFace().equals(""Q"")) thaf = 12;
          else if(that.getFace().equals(""J"")) thaf = 11;
          else thaf = Integer.parseInt(that.getFace());
        if (thif > thaf) return +1;
        if (thif < thaf) return -1;
        //在suit_order這個class下做compare這件事
        return SUIT_ORDER.compare(this, that);
//        if (thif == thaf) {
//            if (this.suit==""Spades""|that.suit==""Spades"") {
//                if (this.suit==""Spades""&that.suit!=""Spades"") return +1;
//                else if (this.suit!=""Spades""&that.suit==""Spades"") return -1;}
//            else if (this.suit==""Hearts""|that.suit==""Hearts"") {
//                if (this.suit==""Hearts""&that.suit!=""Hearts"") return +1;
//                else if (this.suit!=""Hearts""&that.suit==""Hearts"") return -1;}
//            else if (this.suit==""Diamonds""|that.suit==""Diamonds"") {
//                if(this.suit==""Diamonds""&that.suit!=""Diamonds"") return +1;
//                else if(this.suit!=""Diamonds""&that.suit==""Diamonds"") return -1;
//            }
//        }
        //return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            //someone spades Diamonds   Spades > Hearts > Diamonds > Clubs
            if (c1.getSuit()==""Spades""|c2.getSuit()==""Spades"") {
                if (c1.getSuit()==""Spades""&c2.getSuit()!=""Spades"") {return +1;}
                else if (c1.getSuit()!=""Spades""&c2.getSuit()==""Spades"") {return -1;}}
            else if (c1.getSuit()==""Hearts""|c2.getSuit()==""Hearts"") {
                if (c1.getSuit()==""Hearts""&c2.getSuit()!=""Hearts"") {return +1;}
                else if (c1.getSuit()!=""Hearts""&c2.getSuit()==""Hearts"") {return -1;}}
            else if (c1.getSuit()==""Diamonds""|c2.getSuit()==""Diamonds"") {
                if(c1.getSuit()==""Diamonds""&c2.getSuit()!=""Diamonds"") {return +1;}
                else if(c1.getSuit()!=""Diamonds""&c2.getSuit()==""Diamonds"") {return -1;}}
            return 0;
        } } 
//    
//        public static void main(String[] args){
//        //
//           Card[] test = new Card[4];
//           test[0]= new Card(""3"",""Hearts"");
//           test[1]= new Card(""J"",""Clubs""); 
//           test[2]= new Card(""7"",""Spades"");     
//           test[3]= new Card(""A"",""Diamonds"");     
//           //Arrays.sort(test);
//           //System.out.println(test[0].face);
//           //System.out.println(test[1].face);
//           System.out.println(test[0].compareTo(test[1]));
//           System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
//           System.out.println(test[2].compareTo(test[3]));
//           System.out.println(Card.SUIT_ORDER.compare(test[2],test[3]));
//}
}

@4c1d23036ba68ca0e790c597fac9cec9@"
"r03228006","0","0.63","110944","@eb26b8c6872bcc17e0325804b3afa753@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thif = 0;
        int thaf = 0;
        if(this.getFace().equals(""A"")) thif=14;
          else if(this.getFace().equals(""K"")) thif=13;
          else if(this.getFace().equals(""Q"")) thif=12;
          else if(this.getFace().equals(""J"")) thif=11;
          else thif = Integer.parseInt(this.face);
        if(that.getFace().equals(""A"")) thaf=14;
          else if(that.getFace().equals(""K"")) thaf = 13;
          else if(that.getFace().equals(""Q"")) thaf = 12;
          else if(that.getFace().equals(""J"")) thaf = 11;
          else thaf = Integer.parseInt(that.getFace());
        if (thif > thaf) return +1;
        if (thif < thaf) return -1;
        //在suit_order這個class下做compare這件事
        Card tthis = this;
        return SUIT_ORDER.compare(tthis, that);
//        if (thif == thaf) {
//            if (this.suit==""Spades""|that.suit==""Spades"") {
//                if (this.suit==""Spades""&that.suit!=""Spades"") return +1;
//                else if (this.suit!=""Spades""&that.suit==""Spades"") return -1;}
//            else if (this.suit==""Hearts""|that.suit==""Hearts"") {
//                if (this.suit==""Hearts""&that.suit!=""Hearts"") return +1;
//                else if (this.suit!=""Hearts""&that.suit==""Hearts"") return -1;}
//            else if (this.suit==""Diamonds""|that.suit==""Diamonds"") {
//                if(this.suit==""Diamonds""&that.suit!=""Diamonds"") return +1;
//                else if(this.suit!=""Diamonds""&that.suit==""Diamonds"") return -1;
//            }
//        }
        //return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            //someone spades Diamonds   Spades > Hearts > Diamonds > Clubs
            if (c1.getSuit()==""Spades""|c2.getSuit()==""Spades"") {
                if (c1.getSuit()==""Spades""&c2.getSuit()!=""Spades"") {return +1;}
                else if (c1.getSuit()!=""Spades""&c2.getSuit()==""Spades"") {return -1;}}
            else if (c1.getSuit()==""Hearts""|c2.getSuit()==""Hearts"") {
                if (c1.getSuit()==""Hearts""&c2.getSuit()!=""Hearts"") {return +1;}
                else if (c1.getSuit()!=""Hearts""&c2.getSuit()==""Hearts"") {return -1;}}
            else if (c1.getSuit()==""Diamonds""|c2.getSuit()==""Diamonds"") {
                if(c1.getSuit()==""Diamonds""&c2.getSuit()!=""Diamonds"") {return +1;}
                else if(c1.getSuit()!=""Diamonds""&c2.getSuit()==""Diamonds"") {return -1;}}
            return 0;
        } } 
//    
//        public static void main(String[] args){
//        //
//           Card[] test = new Card[4];
//           test[0]= new Card(""3"",""Hearts"");
//           test[1]= new Card(""J"",""Clubs""); 
//           test[2]= new Card(""7"",""Spades"");     
//           test[3]= new Card(""A"",""Diamonds"");     
//           //Arrays.sort(test);
//           //System.out.println(test[0].face);
//           //System.out.println(test[1].face);
//           System.out.println(test[0].compareTo(test[1]));
//           System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
//           System.out.println(test[2].compareTo(test[3]));
//           System.out.println(Card.SUIT_ORDER.compare(test[2],test[3]));
//}
}
@eb26b8c6872bcc17e0325804b3afa753@"
"r03228006","0","0.64","111024","@49ca73449f4480f4a13892a63223c6d6@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thif = 0;
        int thaf = 0;
        if(this.getFace().equals(""A"")) thif=14;
          else if(this.getFace().equals(""K"")) thif=13;
          else if(this.getFace().equals(""Q"")) thif=12;
          else if(this.getFace().equals(""J"")) thif=11;
          else thif = Integer.parseInt(this.getFace());
        if(that.getFace().equals(""A"")) thaf=14;
          else if(that.getFace().equals(""K"")) thaf = 13;
          else if(that.getFace().equals(""Q"")) thaf = 12;
          else if(that.getFace().equals(""J"")) thaf = 11;
          else thaf = Integer.parseInt(that.getFace());
        if (thif > thaf) return +1;
        if (thif < thaf) return -1;
        //在suit_order這個class下做compare這件事
        Card tthis = this;
        return SUIT_ORDER.compare(tthis, that);
//        if (thif == thaf) {
//            if (this.suit==""Spades""|that.suit==""Spades"") {
//                if (this.suit==""Spades""&that.suit!=""Spades"") return +1;
//                else if (this.suit!=""Spades""&that.suit==""Spades"") return -1;}
//            else if (this.suit==""Hearts""|that.suit==""Hearts"") {
//                if (this.suit==""Hearts""&that.suit!=""Hearts"") return +1;
//                else if (this.suit!=""Hearts""&that.suit==""Hearts"") return -1;}
//            else if (this.suit==""Diamonds""|that.suit==""Diamonds"") {
//                if(this.suit==""Diamonds""&that.suit!=""Diamonds"") return +1;
//                else if(this.suit!=""Diamonds""&that.suit==""Diamonds"") return -1;
//            }
//        }
        //return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            //someone spades Diamonds   Spades > Hearts > Diamonds > Clubs
            if (c1.getSuit()==""Spades""|c2.getSuit()==""Spades"") {
                if (c1.getSuit()==""Spades""&c2.getSuit()!=""Spades"") {return +1;}
                else if (c1.getSuit()!=""Spades""&c2.getSuit()==""Spades"") {return -1;}
                else return 0;}
            else if (c1.getSuit()==""Hearts""|c2.getSuit()==""Hearts"") {
                if (c1.getSuit()==""Hearts""&c2.getSuit()!=""Hearts"") {return +1;}
                else if (c1.getSuit()!=""Hearts""&c2.getSuit()==""Hearts"") {return -1;}
                else return 0;}
            else if (c1.getSuit()==""Diamonds""|c2.getSuit()==""Diamonds"") {
                if(c1.getSuit()==""Diamonds""&c2.getSuit()!=""Diamonds"") {return +1;}
                else if(c1.getSuit()!=""Diamonds""&c2.getSuit()==""Diamonds"") {return -1;}
                else return 0;}
            return 0;
        } } 
//    
        public static void main(String[] args){
        //
           Card[] test = new Card[4];
           test[0]= new Card(""3"",""Hearts"");
           test[1]= new Card(""J"",""Clubs""); 
           test[2]= new Card(""7"",""Spades"");     
           test[3]= new Card(""A"",""Spades"");     
           //Arrays.sort(test);
           System.out.println(test[0].getFace());
           System.out.println(test[1].getSuit());
           System.out.println(test[0].compareTo(test[1]));
           System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
           System.out.println(test[2].compareTo(test[3]));
           System.out.println(Card.SUIT_ORDER.compare(test[2],test[3]));
}
}

@49ca73449f4480f4a13892a63223c6d6@"
"b03611033","5","0.132","110944","@87f461d6b8e95ccaae5922dada0f7cfd@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thisnum = cardface(this.face);
        int thatnum = cardface(that.face);

        if (thisnum > thatnum) {
            return 1;
        } else if (thisnum < thatnum) {
            return -1;
        } else {
            thisnum = cardsuit(this.suit);
            thatnum = cardsuit(that.suit);
            
            if (thisnum > thatnum) {
                return 1;
            } else if (thisnum < thatnum) {
                return -1;
            } else {
                return 0;
            }

        }

    }
    //To change body of generated methods, choose Tools | Templates.
    // TODO

    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit

            int c1num = cardsuit(c1.suit);
            int c2num = cardsuit(c2.suit);
            
            if (c1num > c2num) {
                return 1;
            } else if (c1num < c2num) {
                return -1;
            } else {
                return 0;
            }
            
        }
    }

    private static int cardface(String face) {
        int facenum;

        if (face.equals(""A"")) {
            facenum = 14;
        } else if (face.equals(""J"")) {
            facenum = 11;
        } else if (face.equals(""Q"")) {
            facenum = 12;
        } else if (face.equals(""K"")) {
            facenum = 13;
        } else {
            facenum = Integer.parseInt(face);
        }

        return facenum;
    }

    private static int cardsuit(String suit) {
        int suitnum;

        if (suit.equals(""Spades"")) {
            suitnum = 4;
        } else if (suit.equals(""Hearts"")) {
            suitnum = 3;
        } else if (suit.equals(""Diamonds"")) {
            suitnum = 2;
        } else {
            suitnum = 1;
        }

        return suitnum;
    }
}

@87f461d6b8e95ccaae5922dada0f7cfd@"
"r03228006","0","0.65","110560","@f0cabbfada9929beb7fc58137d2756fc@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thif = 0;
        int thaf = 0;
        if(this.getFace().equals(""A"")) thif=14;
          else if(this.getFace().equals(""K"")) thif=13;
          else if(this.getFace().equals(""Q"")) thif=12;
          else if(this.getFace().equals(""J"")) thif=11;
          else thif = Integer.parseInt(this.getFace());
        if(that.getFace().equals(""A"")) thaf=14;
          else if(that.getFace().equals(""K"")) thaf = 13;
          else if(that.getFace().equals(""Q"")) thaf = 12;
          else if(that.getFace().equals(""J"")) thaf = 11;
          else thaf = Integer.parseInt(that.getFace());
        if (thif > thaf) return +1;
        if (thif < thaf) return -1;
        //在suit_order這個class下做compare這件事
        Card tthis = this;
        return SUIT_ORDER.compare(tthis, that);
//        if (thif == thaf) {
//            if (this.suit==""Spades""|that.suit==""Spades"") {
//                if (this.suit==""Spades""&that.suit!=""Spades"") return +1;
//                else if (this.suit!=""Spades""&that.suit==""Spades"") return -1;}
//            else if (this.suit==""Hearts""|that.suit==""Hearts"") {
//                if (this.suit==""Hearts""&that.suit!=""Hearts"") return +1;
//                else if (this.suit!=""Hearts""&that.suit==""Hearts"") return -1;}
//            else if (this.suit==""Diamonds""|that.suit==""Diamonds"") {
//                if(this.suit==""Diamonds""&that.suit!=""Diamonds"") return +1;
//                else if(this.suit!=""Diamonds""&that.suit==""Diamonds"") return -1;
//            }
//        }
        //return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            //someone spades Diamonds   Spades > Hearts > Diamonds > Clubs
            if (c1.getSuit().equals(""Spades"")|c2.getSuit().equals(""Spades"")) {
                if (c1.getSuit().equals(""Spades"") & !c2.getSuit().equals(""Spades"")) {return +1;}
                else if (!c1.getSuit().equals(""Spades"") & c2.getSuit().equals(""Spades"")) {return -1;}
                else return 0;}
            else if (c1.getSuit().equals(""Hearts"")|c2.getSuit().equals(""Hearts"")) {
                if (c1.getSuit().equals(""Hearts"") & !c2.getSuit().equals(""Hearts"")) {return +1;}
                else if (c1.getSuit().equals(""Hearts"") & c2.getSuit().equals(""Hearts"")) {return -1;}
                else return 0;}
            else if (c1.getSuit().equals(""Diamonds"")|c2.getSuit().equals(""Diamonds"")) {
                if(c1.getSuit().equals(""Diamonds"") & !c2.getSuit().equals(""Diamonds"")) {return +1;}
                else if(!c1.getSuit().equals(""Diamonds"") & c2.getSuit().equals(""Diamonds"")) {return -1;}
                else return 0;}
            return 0;
        } } 
//    
//        public static void main(String[] args){
//        //
//           Card[] test = new Card[4];
//           test[0]= new Card(""3"",""Hearts"");
//           test[1]= new Card(""J"",""Clubs""); 
//           test[2]= new Card(""7"",""Spades"");     
//           test[3]= new Card(""A"",""Spades"");     
//           //Arrays.sort(test);
//           System.out.println(test[0].getFace());
//           System.out.println(test[1].getSuit());
//           System.out.println(test[0].compareTo(test[1]));
//           System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
//           System.out.println(test[2].compareTo(test[3]));
//           System.out.println(Card.SUIT_ORDER.compare(test[2],test[3]));
//}
}
@f0cabbfada9929beb7fc58137d2756fc@"
"r03228006","0","0.64","107552","@d5594d52d5194f235eb3a61240a207f6@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thif = 0;
        int thaf = 0;
        if(this.getFace().equals(""A"")) thif=14;
          else if(this.getFace().equals(""K"")) thif=13;
          else if(this.getFace().equals(""Q"")) thif=12;
          else if(this.getFace().equals(""J"")) thif=11;
          else thif = Integer.parseInt(this.getFace());
        if(that.getFace().equals(""A"")) thaf=14;
          else if(that.getFace().equals(""K"")) thaf = 13;
          else if(that.getFace().equals(""Q"")) thaf = 12;
          else if(that.getFace().equals(""J"")) thaf = 11;
          else thaf = Integer.parseInt(that.getFace());
        if (thif > thaf) return +1;
        if (thif < thaf) return -1;
        //在suit_order這個class下做compare這件事
        Card[] tthis = new Card[1];
        tthis[0] = this;
        return SUIT_ORDER.compare(tthis[0], that);
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            //someone spades Diamonds   Spades > Hearts > Diamonds > Clubs
            if (c1.getSuit().equals(""Spades"")|c2.getSuit().equals(""Spades"")) {
                if (c1.getSuit().equals(""Spades"") & !c2.getSuit().equals(""Spades"")) {return +1;}
                else if (!c1.getSuit().equals(""Spades"") & c2.getSuit().equals(""Spades"")) {return -1;}
            }
            else if (c1.getSuit().equals(""Hearts"")|c2.getSuit().equals(""Hearts"")) {
                if (c1.getSuit().equals(""Hearts"") & !c2.getSuit().equals(""Hearts"")) {return +1;}
                else if (c1.getSuit().equals(""Hearts"") & c2.getSuit().equals(""Hearts"")) {return -1;}
            }
            else if (c1.getSuit().equals(""Diamonds"")|c2.getSuit().equals(""Diamonds"")) {
                if(c1.getSuit().equals(""Diamonds"") & !c2.getSuit().equals(""Diamonds"")) {return +1;}
                else if(!c1.getSuit().equals(""Diamonds"") & c2.getSuit().equals(""Diamonds"")) {return -1;}
            }
            return 0;
        } } 
//    
//        public static void main(String[] args){
//        //
//           Card[] test = new Card[4];
//           test[0]= new Card(""3"",""Hearts"");
//           test[1]= new Card(""J"",""Clubs""); 
//           test[2]= new Card(""7"",""Spades"");     
//           test[3]= new Card(""A"",""Spades"");     
//           //Arrays.sort(test);
//           System.out.println(test[0].getFace());
//           System.out.println(test[1].getSuit());
//           System.out.println(test[0].compareTo(test[1]));
//           System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
//           System.out.println(test[2].compareTo(test[3]));
//           System.out.println(Card.SUIT_ORDER.compare(test[2],test[3]));
//}
}

@d5594d52d5194f235eb3a61240a207f6@"
"r03228006","0","0.65","110944","@4f330ccee526cea60b7173434ad7984f@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thif = 0;
        int thaf = 0;
        if(this.getFace().equals(""A"")) thif=14;
        else if(this.getFace().equals(""K"")) thif=13;
        else if(this.getFace().equals(""Q"")) thif=12;
        else if(this.getFace().equals(""J"")) thif=11;
        else thif = Integer.parseInt(this.getFace());
        
        if(that.getFace().equals(""A"")) thaf=14;
        else if(that.getFace().equals(""K"")) thaf = 13;
        else if(that.getFace().equals(""Q"")) thaf = 12;
        else if(that.getFace().equals(""J"")) thaf = 11;
        else thaf = Integer.parseInt(that.getFace());
        if (thif > thaf) return +1;
        if (thif < thaf) return -1;
        //在suit_order這個class下做compare這件事
        //Card[] tthis = new Card[1];
        //tthis[0] = this;
        return SUIT_ORDER.compare(this, that);    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if (c1.getSuit().equals(""Spades"")|c2.getSuit().equals(""Spades"")) {
                if (c1.getSuit().equals(""Spades"") & !c2.getSuit().equals(""Spades"")) {return +1;}
                else if (!c1.getSuit().equals(""Spades"") & c2.getSuit().equals(""Spades"")) {return -1;}
            }
            else if (c1.getSuit().equals(""Hearts"")|c2.getSuit().equals(""Hearts"")) {
                if (c1.getSuit().equals(""Hearts"") & !c2.getSuit().equals(""Hearts"")) {return +1;}
                else if (c1.getSuit().equals(""Hearts"") & c2.getSuit().equals(""Hearts"")) {return -1;}
            }
            else if (c1.getSuit().equals(""Diamonds"")|c2.getSuit().equals(""Diamonds"")) {
                if(c1.getSuit().equals(""Diamonds"") & !c2.getSuit().equals(""Diamonds"")) {return +1;}
                else if(!c1.getSuit().equals(""Diamonds"") & c2.getSuit().equals(""Diamonds"")) {return -1;}
            }
            return 0;        }}

//    
//        public static void main(String[] args){
//        //
//           Card[] test = new Card[4];
//           test[0]= new Card(""3"",""Hearts"");
//           test[1]= new Card(""J"",""Clubs""); 
//           test[2]= new Card(""7"",""Spades"");     
//           test[3]= new Card(""A"",""Spades"");     
//           //Arrays.sort(test);
//           //System.out.println(test[0].getFace());
//           //System.out.println(test[1].getSuit());
//           System.out.println(test[0].compareTo(test[1]));
//           System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
//           System.out.println(test[2].compareTo(test[3]));
//           System.out.println(Card.SUIT_ORDER.compare(test[2],test[3]));
//}
}

@4f330ccee526cea60b7173434ad7984f@"
"r03228006","0","0.68","110880","@e065ec843fa40a4fd7d8dfdf88d8b700@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thif = 0;
        int thaf = 0;
        if(this.getFace().equals(""A"")) {thif=14;}
        else if(this.getFace().equals(""K"")) {thif=13;}
        else if(this.getFace().equals(""Q"")) {thif=12;}
        else if(this.getFace().equals(""J"")) {thif=11;}
        else {thif = Integer.parseInt(this.getFace());}
        
        if(that.getFace().equals(""A"")) {thaf=14;}
        else if(that.getFace().equals(""K"")) {thaf = 13;}
        else if(that.getFace().equals(""Q"")) {thaf = 12;}
        else if(that.getFace().equals(""J"")) {thaf = 11;}
        else {thaf = Integer.parseInt(that.getFace());}
        if (thif > thaf) {return +1;}
        if (thif < thaf) {return -1;}
        //在suit_order這個class下做compare這件事
        //Card[] tthis = new Card[1];
        //tthis[0] = this;
        return SUIT_ORDER.compare(this, that);    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if (c1.getSuit().equals(""Spades"")||c2.getSuit().equals(""Spades"")) {
                if (c1.getSuit().equals(""Spades"") && !c2.getSuit().equals(""Spades"")) {return +1;}
                else if (!c1.getSuit().equals(""Spades"") && c2.getSuit().equals(""Spades"")) {return -1;}
            }
            else if (c1.getSuit().equals(""Hearts"")||c2.getSuit().equals(""Hearts"")) {
                if (c1.getSuit().equals(""Hearts"") && !c2.getSuit().equals(""Hearts"")) {return +1;}
                else if (c1.getSuit().equals(""Hearts"") && c2.getSuit().equals(""Hearts"")) {return -1;}
            }
            else if (c1.getSuit().equals(""Diamonds"")||c2.getSuit().equals(""Diamonds"")) {
                if(c1.getSuit().equals(""Diamonds"") && !c2.getSuit().equals(""Diamonds"")) {return +1;}
                else if(!c1.getSuit().equals(""Diamonds"") && c2.getSuit().equals(""Diamonds"")) {return -1;}
            }
            return 0;        }}

//    
//        public static void main(String[] args){
//        //
//           Card[] test = new Card[4];
//           test[0]= new Card(""3"",""Hearts"");
//           test[1]= new Card(""J"",""Clubs""); 
//           test[2]= new Card(""7"",""Spades"");     
//           test[3]= new Card(""A"",""Spades"");     
//           //Arrays.sort(test);
//           //System.out.println(test[0].getFace());
//           //System.out.println(test[1].getSuit());
//           System.out.println(test[0].compareTo(test[1]));
//           System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
//           System.out.println(test[2].compareTo(test[3]));
//           System.out.println(Card.SUIT_ORDER.compare(test[2],test[3]));
//}
}

@e065ec843fa40a4fd7d8dfdf88d8b700@"
"r03228006","0","0.65","110928","@2ca8b7d47420baa33dac59350a6ee9b6@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thif = 0;
        int thaf = 0;
        if(this.getFace().equals(""A"")) {thif=14;}
        else if(this.getFace().equals(""K"")) {thif=13;}
        else if(this.getFace().equals(""Q"")) {thif=12;}
        else if(this.getFace().equals(""J"")) {thif=11;}
        else {thif = Integer.parseInt(this.getFace());}
        
        if(that.getFace().equals(""A"")) {thaf=14;}
        else if(that.getFace().equals(""K"")) {thaf = 13;}
        else if(that.getFace().equals(""Q"")) {thaf = 12;}
        else if(that.getFace().equals(""J"")) {thaf = 11;}
        else {thaf = Integer.parseInt(that.getFace());}
        if (thif > thaf) {return +1;}
        if (thif < thaf) {return -1;}
        //在suit_order這個class下做compare這件事
        //Card[] tthis = new Card[1];
        //tthis[0] = this;
        return SUIT_ORDER.compare(this, that);    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if (c1.getSuit().equals(""Spades"")||c2.getSuit().equals(""Spades"")) {
                if (c1.getSuit().equals(""Spades"") && !c2.getSuit().equals(""Spades"")) {return +1;}
                else if (!c1.getSuit().equals(""Spades"") && c2.getSuit().equals(""Spades"")) {return -1;}
            }
            else if (c1.getSuit().equals(""Hearts"")||c2.getSuit().equals(""Hearts"")) {
                if (c1.getSuit().equals(""Hearts"") && !c2.getSuit().equals(""Hearts"")) {return +1;}
                else if (c1.getSuit().equals(""Hearts"") && c2.getSuit().equals(""Hearts"")) {return -1;}
            }
            else if (c1.getSuit().equals(""Diamonds"")||c2.getSuit().equals(""Diamonds"")) {
                if(c1.getSuit().equals(""Diamonds"") && !c2.getSuit().equals(""Diamonds"")) {return +1;}
                else if(!c1.getSuit().equals(""Diamonds"") && c2.getSuit().equals(""Diamonds"")) {return -1;}
            }
            return 0;        }}

//    
        public static void main(String[] args){
        //
           Card[] test = new Card[4];
           test[0]= new Card(""3"",""Hearts"");
           test[1]= new Card(""J"",""Clubs""); 
           //test[2]= new Card(""7"",""Spades"");     
           //test[3]= new Card(""A"",""Spades"");     
           //Arrays.sort(test);
           //System.out.println(test[0].getFace());
           //System.out.println(test[1].getSuit());
           System.out.println(test[0].compareTo(test[1]));
           System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
           //System.out.println(test[2].compareTo(test[3]));
           //System.out.println(Card.SUIT_ORDER.compare(test[2],test[3]));
}
}

@2ca8b7d47420baa33dac59350a6ee9b6@"
"r03228006","0","0.66","110944","@3193db9ce4cca9372ee18da7b753250a@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thif = 0;
        int thaf = 0;
        if(this.getFace().equals(""A"")) {thif=14;}
        else if(this.getFace().equals(""K"")) {thif=13;}
        else if(this.getFace().equals(""Q"")) {thif=12;}
        else if(this.getFace().equals(""J"")) {thif=11;}
        else {thif = Integer.parseInt(this.getFace());}
        
        if(that.getFace().equals(""A"")) {thaf=14;}
        else if(that.getFace().equals(""K"")) {thaf = 13;}
        else if(that.getFace().equals(""Q"")) {thaf = 12;}
        else if(that.getFace().equals(""J"")) {thaf = 11;}
        else {thaf = Integer.parseInt(that.getFace());}
        if (thif > thaf) {return +1;}
        if (thif < thaf) {return -1;}
        //在suit_order這個class下做compare這件事
        //Card[] tthis = new Card[1];
        //tthis[0] = this;
        return SUIT_ORDER.compare(this, that);    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if (c1.getSuit().equals(""Spades"")||c2.getSuit().equals(""Spades"")) {
                if (c1.getSuit().equals(""Spades"") && !c2.getSuit().equals(""Spades"")) {return +1;}
                else if (!c1.getSuit().equals(""Spades"") && c2.getSuit().equals(""Spades"")) {return -1;}
                else {return 0;}
            }
            else if (c1.getSuit().equals(""Hearts"")||c2.getSuit().equals(""Hearts"")) {
                if (c1.getSuit().equals(""Hearts"") && !c2.getSuit().equals(""Hearts"")) {return +1;}
                else if (c1.getSuit().equals(""Hearts"") && c2.getSuit().equals(""Hearts"")) {return -1;}
                else {return 0;}
            }
            else if (c1.getSuit().equals(""Diamonds"")||c2.getSuit().equals(""Diamonds"")) {
                if(c1.getSuit().equals(""Diamonds"") && !c2.getSuit().equals(""Diamonds"")) {return +1;}
                else if(!c1.getSuit().equals(""Diamonds"") && c2.getSuit().equals(""Diamonds"")) {return -1;}
                else {return 0;}
            }
            return 0;        }}

//    
        public static void main(String[] args){
        //
           Card[] test = new Card[4];
           test[0]= new Card(""3"",""Hearts"");
           test[1]= new Card(""J"",""Clubs""); 
           //test[2]= new Card(""7"",""Spades"");     
           //test[3]= new Card(""A"",""Spades"");     
           //Arrays.sort(test);
           //System.out.println(test[0].getFace());
           //System.out.println(test[1].getSuit());
           System.out.println(test[0].compareTo(test[1]));
           System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
           //System.out.println(test[2].compareTo(test[3]));
           //System.out.println(Card.SUIT_ORDER.compare(test[2],test[3]));
}
}

@3193db9ce4cca9372ee18da7b753250a@"
"r03525008","0","0","0","@7c83876785791c0d5bb1b043a73bda63@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int x=get_facevalue(this.face);
        int y=get_facevalue(that.suit);
        if(x>y){return 1;}
        else if(x<y){return -1;}
        else{return SUIT_ORDER.compare(this,that) ;}

    }
    private int get_facevalue(String face ){
        if(face.equals(""A"")){return 14;}
        else if(face.equals(""K"")){return 13;}
        else if(face.equals(""Q"")){return 12;}
        else if(face.equals(""J"")){return 11;}
        else {return Integer.parseInt(face);}
    }


    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int x=get_suitvalue(c1.suit);
            int y=get_suitvalue(c2.suit);
            if(x>y){return 1;}
            else if(x<y){return -1;}
            else{return 0;}

        }
        private int get_suitvalue(String suit){
            if(suit.equals(""Spades"")){return 4;}
            else if(suit.equals(""Hearts"")){return 3;}
            else if(suit.equals(""Diamonds"")){return 2;}
            else {return 1;}
        }
    }   
}


@7c83876785791c0d5bb1b043a73bda63@"
"b03611033","5","0.132","111520","@3ccea7728b21b1bd253d55f7365a46a2@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thisnum = cardface(this.face);
        int thatnum = cardface(that.face);

        if (thisnum > thatnum) {
            return 1;
        } else if (thisnum < thatnum) {
            return -1;
        } else {
            thisnum = cardsuit(this.suit);
            thatnum = cardsuit(that.suit);
            
            if (thisnum > thatnum) {
                return 1;
            } else if (thisnum < thatnum) {
                return -1;
            } else {
                return 0;
            }

        }

    }
    //To change body of generated methods, choose Tools | Templates.
    // TODO

    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit

            int c1num = cardsuit(c1.suit);
            int c2num = cardsuit(c2.suit);
            
            if (c1num > c2num) {
                return 1;
            } else if (c1num < c2num) {
                return -1;
            } else {
                return 0;
            }
            
        }
    }

    private static int cardface(String face) {
        int facenum;

        switch (face) {
            case ""A"":
                facenum = 14;
                break;
            case ""J"":
                facenum = 11;
                break;
            case ""Q"":
                facenum = 12;
                break;
            case ""K"":
                facenum = 13;
                break;
            default:
                facenum = Integer.parseInt(face);
                break;
        }

        return facenum;
    }

    private static int cardsuit(String suit) {
        int suitnum;

        switch (suit) {
            case ""Spades"":
                suitnum = 4;
                break;
            case ""Hearts"":
                suitnum = 3;
                break;
            case ""Diamonds"":
                suitnum = 2;
                break;
            default:
                suitnum = 1;
                break;
        }

        return suitnum;
    }
}

@3ccea7728b21b1bd253d55f7365a46a2@"
"r03525008","5","0.132","111008","@d807f0d272a1e6074584669b418aa7c9@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int x=get_facevalue(this.face);
        int y=get_facevalue(that.face);
        if(x>y){return 1;}
        else if(x<y){return -1;}
        else{return SUIT_ORDER.compare(this,that) ;}

    }
    private int get_facevalue(String face ){
        if(face.equals(""A"")){return 14;}
        else if(face.equals(""K"")){return 13;}
        else if(face.equals(""Q"")){return 12;}
        else if(face.equals(""J"")){return 11;}
        else {return Integer.parseInt(face);}
    }


    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int x=get_suitvalue(c1.suit);
            int y=get_suitvalue(c2.suit);
            if(x>y){return 1;}
            else if(x<y){return -1;}
            else{return 0;}

        }
        private int get_suitvalue(String suit){
            if(suit.equals(""Spades"")){return 4;}
            else if(suit.equals(""Hearts"")){return 3;}
            else if(suit.equals(""Diamonds"")){return 2;}
            else {return 1;}
        }
    }   
}


@d807f0d272a1e6074584669b418aa7c9@"
"r03525008","5","0.13","110976","@d807f0d272a1e6074584669b418aa7c9@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int x=get_facevalue(this.face);
        int y=get_facevalue(that.face);
        if(x>y){return 1;}
        else if(x<y){return -1;}
        else{return SUIT_ORDER.compare(this,that) ;}

    }
    private int get_facevalue(String face ){
        if(face.equals(""A"")){return 14;}
        else if(face.equals(""K"")){return 13;}
        else if(face.equals(""Q"")){return 12;}
        else if(face.equals(""J"")){return 11;}
        else {return Integer.parseInt(face);}
    }


    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int x=get_suitvalue(c1.suit);
            int y=get_suitvalue(c2.suit);
            if(x>y){return 1;}
            else if(x<y){return -1;}
            else{return 0;}

        }
        private int get_suitvalue(String suit){
            if(suit.equals(""Spades"")){return 4;}
            else if(suit.equals(""Hearts"")){return 3;}
            else if(suit.equals(""Diamonds"")){return 2;}
            else {return 1;}
        }
    }   
}


@d807f0d272a1e6074584669b418aa7c9@"
"b01703032","5","0.13","110912","@7d7927b14af1ad08bf050561839dcd4e@import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class Card implements Comparable<Card> {

	private String face; 
	private String suit; 
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    private static final Comparator<Card> FACE_ORDER = new FaceOrder();


    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
   
    public String getFace(){
        return this.face;
    }
    
    public String getSuit(){
        return this.suit;
    }   
    

    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        int result = FACE_ORDER.compare(this , that);
        if(result != 0) {
            return result;
        } else {
            return SUIT_ORDER.compare(this , that);
        }
    }


    private static class SuitOrder implements Comparator<Card> {

        private static List<String> order;
        SuitOrder() {
            String[] suits = {""Spades"", ""Hearts"", ""Diamonds"", ""Clubs""};
            order = new ArrayList<String>();
            for (String suit : suits) {
                order.add(suit);
            }
        }
        @Override
        public int compare(Card c1, Card c2) {
            int suit_1 = order.indexOf(c1.getSuit());
            int suit_2 = order.indexOf(c2.getSuit());
            if (suit_1 < suit_2) return 1;
            else if (suit_1 > suit_2) return -1;
            else return 0;
        }


    }

    private static class FaceOrder implements Comparator<Card> {
        private static List<String> order;
        FaceOrder() {
            String[] faces = {""A"",""K"",""Q"",""J"",""10"",""9"",""8"",""7"",""6"",""5"",""4"",""3"",""2"",""1""};
            order = new ArrayList<String>();
            for (String face : faces) {
                order.add(face);
            }
        }

        @Override
        public int compare(Card c1, Card c2) {
            int face_1 = order.indexOf(c1.getFace());
            int face_2 = order.indexOf(c2.getFace());
            if (face_1 < face_2) return 1;
            else if (face_1 > face_2) return -1;
            else return 0;
        }
    }
}

@7d7927b14af1ad08bf050561839dcd4e@"
"r03228006","0","0.66","109152","@8753239b24e701fc1db07fca7301c969@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thif = 0;
        int thaf = 0;
        if(this.getFace().equals(""A"")) {thif=14;}
        else if(this.getFace().equals(""K"")) {thif=13;}
        else if(this.getFace().equals(""Q"")) {thif=12;}
        else if(this.getFace().equals(""J"")) {thif=11;}
        else {thif = Integer.parseInt(this.getFace());}
        
        if(that.getFace().equals(""A"")) {thaf=14;}
        else if(that.getFace().equals(""K"")) {thaf = 13;}
        else if(that.getFace().equals(""Q"")) {thaf = 12;}
        else if(that.getFace().equals(""J"")) {thaf = 11;}
        else {thaf = Integer.parseInt(that.getFace());}
        if (thif > thaf) {return +1;}
        else if (thif < thaf) {return -1;}
        //在suit_order這個class下做compare這件事
        //Card[] tthis = new Card[1];
        //tthis[0] = this;
        else return SUIT_ORDER.compare(this, that);    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if (c1.getSuit().equals(""Spades"")||c2.getSuit().equals(""Spades"")) {
                if (c1.getSuit().equals(""Spades"") && !c2.getSuit().equals(""Spades"")) {return +1;}
                else if (!c1.getSuit().equals(""Spades"") && c2.getSuit().equals(""Spades"")) {return -1;}
                else {return 0;}
            }
            else if (c1.getSuit().equals(""Hearts"")||c2.getSuit().equals(""Hearts"")) {
                if (c1.getSuit().equals(""Hearts"") && !c2.getSuit().equals(""Hearts"")) {return +1;}
                else if (c1.getSuit().equals(""Hearts"") && c2.getSuit().equals(""Hearts"")) {return -1;}
                else {return 0;}
            }
            else if (c1.getSuit().equals(""Diamonds"")||c2.getSuit().equals(""Diamonds"")) {
                if(c1.getSuit().equals(""Diamonds"") && !c2.getSuit().equals(""Diamonds"")) {return +1;}
                else if(!c1.getSuit().equals(""Diamonds"") && c2.getSuit().equals(""Diamonds"")) {return -1;}
                else {return 0;}
            }
            return 0;        }}

//    
        public static void main(String[] args){
        //
           Card[] test = new Card[4];
           test[0]= new Card(""2"",""Hearts"");
           test[1]= new Card(""2"",""Spades""); 
           //test[2]= new Card(""7"",""Spades"");     
           //test[3]= new Card(""A"",""Spades"");     
           //Arrays.sort(test);
           //System.out.println(test[0].getFace());
           //System.out.println(test[1].getSuit());
           System.out.println(test[0].compareTo(test[1]));
           System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
           //System.out.println(test[2].compareTo(test[3]));
           //System.out.println(Card.SUIT_ORDER.compare(test[2],test[3]));
}
}

@8753239b24e701fc1db07fca7301c969@"
"r03228006","0","0.65","111024","@a13840e9c451d8ef9a40b5fa0a783447@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thif ;
        int thaf ;
        if(this.getFace().equals(""A"")) {thif=14;}
        else if(this.getFace().equals(""K"")) {thif=13;}
        else if(this.getFace().equals(""Q"")) {thif=12;}
        else if(this.getFace().equals(""J"")) {thif=11;}
        else {thif = Integer.parseInt(this.getFace());}
        
        if(that.getFace().equals(""A"")) {thaf=14;}
        else if(that.getFace().equals(""K"")) {thaf = 13;}
        else if(that.getFace().equals(""Q"")) {thaf = 12;}
        else if(that.getFace().equals(""J"")) {thaf = 11;}
        else {thaf = Integer.parseInt(that.getFace());}
        if (thif > thaf) {return +1;}
        else if (thif < thaf) {return -1;}
        //在suit_order這個class下做compare這件事
        //Card[] tthis = new Card[1];
        //tthis[0] = this;
        else return SUIT_ORDER.compare(this, that);    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if (c1.getSuit().equals(""Spades"")||c2.getSuit().equals(""Spades"")) {
                if (c1.getSuit().equals(""Spades"") && !c2.getSuit().equals(""Spades"")) {return +1;}
                else if (!c1.getSuit().equals(""Spades"") && c2.getSuit().equals(""Spades"")) {return -1;}
                else {return 0;}
            }
            else if (c1.getSuit().equals(""Hearts"")||c2.getSuit().equals(""Hearts"")) {
                if (c1.getSuit().equals(""Hearts"") && !c2.getSuit().equals(""Hearts"")) {return +1;}
                else if (c1.getSuit().equals(""Hearts"") && c2.getSuit().equals(""Hearts"")) {return -1;}
                else {return 0;}
            }
            else if (c1.getSuit().equals(""Diamonds"")||c2.getSuit().equals(""Diamonds"")) {
                if(c1.getSuit().equals(""Diamonds"") && !c2.getSuit().equals(""Diamonds"")) {return +1;}
                else if(!c1.getSuit().equals(""Diamonds"") && c2.getSuit().equals(""Diamonds"")) {return -1;}
                else {return 0;}
            }
            return 0;        }}

//    
        public static void main(String[] args){
        //
           Card[] test = new Card[4];
           test[0]= new Card(""2"",""Hearts"");
           test[1]= new Card(""2"",""Spades""); 
           //test[2]= new Card(""7"",""Spades"");     
           //test[3]= new Card(""A"",""Spades"");     
           //Arrays.sort(test);
           //System.out.println(test[0].getFace());
           //System.out.println(test[1].getSuit());
           System.out.println(test[0].compareTo(test[1]));
           System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
           //System.out.println(test[2].compareTo(test[3]));
           //System.out.println(Card.SUIT_ORDER.compare(test[2],test[3]));
}
}

@a13840e9c451d8ef9a40b5fa0a783447@"
"r03228006","5","0.132","110960","@c491ae19b360deeecc9ca742bf150a65@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thif ;
        int thaf ;
        if(this.getFace().equals(""A"")) {thif = 14;}
        else if(this.getFace().equals(""K"")) {thif = 13;}
        else if(this.getFace().equals(""Q"")) {thif = 12;}
        else if(this.getFace().equals(""J"")) {thif = 11;}
        else {thif = Integer.parseInt(this.getFace());}
        
        if(that.getFace().equals(""A"")) {thaf = 14;}
        else if(that.getFace().equals(""K"")) {thaf = 13;}
        else if(that.getFace().equals(""Q"")) {thaf = 12;}
        else if(that.getFace().equals(""J"")) {thaf = 11;}
        else {thaf = Integer.parseInt(that.getFace());}
        if (thif > thaf) {return +1;}
        else if (thif < thaf) {return -1;}
        //在suit_order這個class下做compare這件事
        //Card[] tthis = new Card[1];
        //tthis[0] = this;
        else return SUIT_ORDER.compare(this, that);    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if (c1.getSuit().equals(""Spades"")||c2.getSuit().equals(""Spades"")) {
                if (c1.getSuit().equals(""Spades"") && !c2.getSuit().equals(""Spades"")) {return +1;}
                else if (!c1.getSuit().equals(""Spades"") && c2.getSuit().equals(""Spades"")) {return -1;}
                else {return 0;}
            }
            else if (c1.getSuit().equals(""Hearts"")||c2.getSuit().equals(""Hearts"")) {
                if (c1.getSuit().equals(""Hearts"") && !c2.getSuit().equals(""Hearts"")) {return +1;}
                else if (!c1.getSuit().equals(""Hearts"") && c2.getSuit().equals(""Hearts"")) {return -1;}
                else {return 0;}
            }
            else if (c1.getSuit().equals(""Diamonds"")||c2.getSuit().equals(""Diamonds"")) {
                if(c1.getSuit().equals(""Diamonds"") && !c2.getSuit().equals(""Diamonds"")) {return +1;}
                else if(!c1.getSuit().equals(""Diamonds"") && c2.getSuit().equals(""Diamonds"")) {return -1;}
                else {return 0;}
            }
            return 0;        }}

//    
        public static void main(String[] args){
        //
           Card[] test = new Card[4];
           test[0]= new Card(""2"",""Hearts"");
           test[1]= new Card(""2"",""Spades""); 
           //test[2]= new Card(""7"",""Spades"");     
           //test[3]= new Card(""A"",""Spades"");     
           //Arrays.sort(test);
           //System.out.println(test[0].getFace());
           //System.out.println(test[1].getSuit());
           System.out.println(test[0].compareTo(test[1]));
           System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
           //System.out.println(test[2].compareTo(test[3]));
           //System.out.println(Card.SUIT_ORDER.compare(test[2],test[3]));
}
}

@c491ae19b360deeecc9ca742bf150a65@"
"b02611012","0","0","0","@7aea51f815bfdeeb3e22ea9f29b442df@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thisf = 0;
        int thiss = 0;
        int thatf = 0;
        int thats = 0;
        if (this.face == ""A"") {
            thisf = 14;
        } else if (this.face == ""J"") {
            thisf = 11;
        } else if (this.face == ""Q"") {
            thisf = 12;
        } else if (this.face == ""K"") {
            thisf = 13;
        } else {
            thisf = Integer.parseInt(this.face);
        }
        if (that.face == ""A"") {
            thatf = 14;
        } else if (that.face == ""J"") {
            thatf = 11;
        } else if (that.face == ""Q"") {
            thatf = 12;
        } else if (that.face == ""K"") {
            thatf = 13;
        } else {
            thatf = Integer.parseInt(that.face);
            thatf = 4;
        }
        if (this.suit == ""Spades"") {
            thiss = 4;
        } else if (this.suit == ""Hearts"") {
            thiss = 3;
        } else if (this.suit == ""Diamonds"") {
            thiss = 2;
        } else if (this.suit == ""Clubs"") {
            thiss = 1;
        }
        if (that.suit == ""Spades"") {
            thats = 4;
        } else if (that.suit == ""Hearts"") {
            thats = 3;
        } else if (that.suit == ""Diamonds"") {
            thats = 2;
        } else if (that.suit == ""Clubs"") {
            thats = 1;
        }

        if (thisf < thatf) {
            return -1;
        }
        if (thisf > thatf) {
            return +1;
        }
        if (thiss < thats) {
            return -1;
        }
        if (thiss > thats) {
            return +1;
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int thiss = 0;
            int thats = 0;
            if (c1.suit == ""Spades"") {
                thiss = 4;
            } else if (c1.suit == ""Hearts"") {
                thiss = 3;
            } else if (c1.suit == ""Diamonds"") {
                thiss = 2;
            } else if (c1.suit == ""Clubs"") {
                thiss = 1;
            }
            if (c2.suit == ""Spades"") {
                thats = 4;
            } else if (c2.suit == ""Hearts"") {
                thats = 3;
            } else if (c2.suit == ""Diamonds"") {
                thats = 2;
            } else if (c2.suit == ""Clubs"") {
                thats = 1;
            }
            if (thiss < thats) {
                return -1;
            }
            if (thiss > thats) {
                return +1;
            }
            return 0;
        }
    }
}

@7aea51f815bfdeeb3e22ea9f29b442df@"
"b02611012","0","0","0","@2cd38420ccfa1a3001d1b3cc2efb6600@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thisf = 0;
        int thiss = 0;
        int thatf = 0;
        int thats = 0;
        if (this.face == ""A"") {
            thisf = 14;
        } else if (this.face == ""J"") {
            thisf = 11;
        } else if (this.face == ""Q"") {
            thisf = 12;
        } else if (this.face == ""K"") {
            thisf = 13;
        } else {
            thisf = Integer.parseInt(this.face);
        }
        if (that.face == ""A"") {
            thatf = 14;
        } else if (that.face == ""J"") {
            thatf = 11;
        } else if (that.face == ""Q"") {
            thatf = 12;
        } else if (that.face == ""K"") {
            thatf = 13;
        } else {
            thatf = Integer.parseInt(that.face);
            thatf = 4;
        }
        if (this.suit == ""Spades"") {
            thiss = 4;
        } else if (this.suit == ""Hearts"") {
            thiss = 3;
        } else if (this.suit == ""Diamonds"") {
            thiss = 2;
        } else if (this.suit == ""Clubs"") {
            thiss = 1;
        }
        if (that.suit == ""Spades"") {
            thats = 4;
        } else if (that.suit == ""Hearts"") {
            thats = 3;
        } else if (that.suit == ""Diamonds"") {
            thats = 2;
        } else if (that.suit == ""Clubs"") {
            thats = 1;
        }

        if (thisf < thatf) {
            return -1;
        }
        if (thisf > thatf) {
            return +1;
        }
        if (thiss < thats) {
            return -1;
        }
        if (thiss > thats) {
            return +1;
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int thiss = 0;
            int thats = 0;
            if (c1.suit == ""Spades"") {
                thiss = 4;
            } else if (c1.suit == ""Hearts"") {
                thiss = 3;
            } else if (c1.suit == ""Diamonds"") {
                thiss = 2;
            } else if (c1.suit == ""Clubs"") {
                thiss = 1;
            }
            if (c2.suit == ""Spades"") {
                thats = 4;
            } else if (c2.suit == ""Hearts"") {
                thats = 3;
            } else if (c2.suit == ""Diamonds"") {
                thats = 2;
            } else if (c2.suit == ""Clubs"") {
                thats = 1;
            }
            if (thiss < thats) {
                return -1;
            }
            if (thiss > thats) {
                return +1;
            }
            return 0;
        }
    }
    public static void main(String[] args) {
        Card[] test = new Card[2];
        test[0] = new Card(""A"",""Clubs"");
        test[1] = new Card(""A"",""Hearts"");
        //System.out.println(test[1].compareTo(test[0]));
        //System.out.println(Card.SUIT_ORDER.compare(test[1], test[0]));
    }
}

@2cd38420ccfa1a3001d1b3cc2efb6600@"
"b02611012","0","0","0","@105988ee752a3ed1abea2168fa0ad8e5@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thisf = 0;
        int thiss = 0;
        int thatf = 0;
        int thats = 0;
        if (this.face == ""A"") {
            thisf = 14;
        } else if (this.face == ""J"") {
            thisf = 11;
        } else if (this.face == ""Q"") {
            thisf = 12;
        } else if (this.face == ""K"") {
            thisf = 13;
        } else {
            thisf = Integer.parseInt(this.face);
        }
        if (that.face == ""A"") {
            thatf = 14;
        } else if (that.face == ""J"") {
            thatf = 11;
        } else if (that.face == ""Q"") {
            thatf = 12;
        } else if (that.face == ""K"") {
            thatf = 13;
        } else {
            thatf = Integer.parseInt(that.face);
            thatf = 4;
        }
        if (this.suit == ""Spades"") {
            thiss = 4;
        } else if (this.suit == ""Hearts"") {
            thiss = 3;
        } else if (this.suit == ""Diamonds"") {
            thiss = 2;
        } else if (this.suit == ""Clubs"") {
            thiss = 1;
        }
        if (that.suit == ""Spades"") {
            thats = 4;
        } else if (that.suit == ""Hearts"") {
            thats = 3;
        } else if (that.suit == ""Diamonds"") {
            thats = 2;
        } else if (that.suit == ""Clubs"") {
            thats = 1;
        }

        if (thisf < thatf) {
            return -1;
        }
        if (thisf > thatf) {
            return +1;
        }
        if (thiss < thats) {
            return -1;
        }
        if (thiss > thats) {
            return +1;
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int thiss = 0;
            int thats = 0;
            if (c1.suit == ""Spades"") {
                thiss = 4;
            } else if (c1.suit == ""Hearts"") {
                thiss = 3;
            } else if (c1.suit == ""Diamonds"") {
                thiss = 2;
            } else if (c1.suit == ""Clubs"") {
                thiss = 1;
            }
            if (c2.suit == ""Spades"") {
                thats = 4;
            } else if (c2.suit == ""Hearts"") {
                thats = 3;
            } else if (c2.suit == ""Diamonds"") {
                thats = 2;
            } else if (c2.suit == ""Clubs"") {
                thats = 1;
            }
            if (thiss < thats) {
                return -1;
            }
            if (thiss > thats) {
                return +1;
            }
            return 0;
        }
    }
//    public static void main(String[] args) {
//        Card[] test = new Card[2];
//        test[0] = new Card(""A"",""Clubs"");
//        test[1] = new Card(""K"",""Hearts"");
//        System.out.println(test[1].compareTo(test[0]));
//        System.out.println(Card.SUIT_ORDER.compare(test[1], test[0]));
//    }
}

@105988ee752a3ed1abea2168fa0ad8e5@"
"b02611012","0","0","0","@648df28cb62e899b426faa356de842a8@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thisf = 0;
        int thiss = 0;
        int thatf = 0;
        int thats = 0;
        if (this.getFace() == ""A"") {
            thisf = 14;
        } else if (this.getFace() == ""J"") {
            thisf = 11;
        } else if (this.getFace() == ""Q"") {
            thisf = 12;
        } else if (this.getFace() == ""K"") {
            thisf = 13;
        } else {
            thisf = Integer.parseInt(this.getFace());
        }
        if (that.getFace() == ""A"") {
            thatf = 14;
        } else if (that.getFace() == ""J"") {
            thatf = 11;
        } else if (that.getFace() == ""Q"") {
            thatf = 12;
        } else if (that.getFace() == ""K"") {
            thatf = 13;
        } else {
            thatf = Integer.parseInt(that.getFace());
            thatf = 4;
        }
        if (this.getSuit() == ""Spades"") {
            thiss = 4;
        } else if (this.getSuit() == ""Hearts"") {
            thiss = 3;
        } else if (this.getSuit() == ""Diamonds"") {
            thiss = 2;
        } else if (this.getSuit() == ""Clubs"") {
            thiss = 1;
        }
        if (that.getSuit() == ""Spades"") {
            thats = 4;
        } else if (that.getSuit() == ""Hearts"") {
            thats = 3;
        } else if (that.getSuit() == ""Diamonds"") {
            thats = 2;
        } else if (that.getSuit() == ""Clubs"") {
            thats = 1;
        }

        if (thisf < thatf) {
            return -1;
        }
        if (thisf > thatf) {
            return +1;
        }
        if (thiss < thats) {
            return -1;
        }
        if (thiss > thats) {
            return +1;
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int thiss = 0;
            int thats = 0;
            if (c1.getSuit() == ""Spades"") {
                thiss = 4;
            } else if (c1.getSuit() == ""Hearts"") {
                thiss = 3;
            } else if (c1.getSuit() == ""Diamonds"") {
                thiss = 2;
            } else if (c1.getSuit() == ""Clubs"") {
                thiss = 1;
            }
            if (c2.getSuit() == ""Spades"") {
                thats = 4;
            } else if (c2.getSuit() == ""Hearts"") {
                thats = 3;
            } else if (c2.getSuit() == ""Diamonds"") {
                thats = 2;
            } else if (c2.getSuit() == ""Clubs"") {
                thats = 1;
            }
            if (thiss < thats) {
                return -1;
            }
            if (thiss > thats) {
                return +1;
            }
            return 0;
        }
    }
//    public static void main(String[] args) {
//        Card[] test = new Card[2];
//        test[0] = new Card(""A"",""Clubs"");
//        test[1] = new Card(""K"",""Hearts"");
//        System.out.println(test[1].compareTo(test[0]));
//        System.out.println(Card.SUIT_ORDER.compare(test[1], test[0]));
//    }
}

@648df28cb62e899b426faa356de842a8@"
"b02611012","0","0.66","110560","@7ab964f7e6113d283327f5452f669cbb@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thisf = 0;
        int thiss = 0;
        int thatf = 0;
        int thats = 0;
        if (this.getFace().equals(""A"") ) {
            thisf = 14;
        } else if (this.getFace().equals(""J"")) {
            thisf = 11;
        } else if (this.getFace().equals(""Q"")) {
            thisf = 12;
        } else if (this.getFace().equals(""K"")) {
            thisf = 13;
        } else {
            thisf = Integer.parseInt(this.getFace());
        }
        if (that.getFace().equals(""A"")) {
            thatf = 14;
        } else if (that.getFace().equals(""J"")) {
            thatf = 11;
        } else if (that.getFace().equals(""Q"")) {
            thatf = 12;
        } else if (that.getFace().equals(""K"")) {
            thatf = 13;
        } else {
            thatf = Integer.parseInt(that.getFace());
            thatf = 4;
        }
        if (this.getSuit().equals(""Spades"")) {
            thiss = 4;
        } else if (this.getSuit().equals(""Hearts"")) {
            thiss = 3;
        } else if (this.getSuit().equals(""Diamonds"")) {
            thiss = 2;
        } else if (this.getSuit().equals(""Clubs"")) {
            thiss = 1;
        }
        if (that.getSuit().equals(""Spades"")) {
            thats = 4;
        } else if (that.getSuit().equals(""Hearts"")) {
            thats = 3;
        } else if (that.getSuit().equals(""Diamonds"")) {
            thats = 2;
        } else if (that.getSuit().equals(""Clubs"")) {
            thats = 1;
        }

        if (thisf < thatf) {
            return -1;
        }
        if (thisf > thatf) {
            return +1;
        }
        if (thiss < thats) {
            return -1;
        }
        if (thiss > thats) {
            return +1;
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int thiss = 0;
            int thats = 0;
            if (c1.getSuit().equals(""Spades"")) {
                thiss = 4;
            } else if (c1.getSuit().equals(""Hearts"")) {
                thiss = 3;
            } else if (c1.getSuit().equals(""Diamonds"")) {
                thiss = 2;
            } else if (c1.getSuit().equals(""Clubs"")) {
                thiss = 1;
            }
            if (c2.getSuit().equals(""Spades"")) {
                thats = 4;
            } else if (c2.getSuit().equals(""Hearts"")) {
                thats = 3;
            } else if (c2.getSuit().equals(""Diamonds"")) {
                thats = 2;
            } else if (c2.getSuit().equals(""Clubs"")) {
                thats = 1;
            }
            if (thiss < thats) {
                return -1;
            }
            if (thiss > thats) {
                return +1;
            }
            return 0;
        }
    }
//    public static void main(String[] args) {
//        Card[] test = new Card[2];
//        test[0] = new Card(""A"",""Clubs"");
//        test[1] = new Card(""K"",""Hearts"");
//        System.out.println(test[1].compareTo(test[0]));
//        System.out.println(Card.SUIT_ORDER.compare(test[1], test[0]));
//    }
}

@7ab964f7e6113d283327f5452f669cbb@"
"b02611012","0","0.66","111120","@1b7bd32754672b8505eb35c56a59791e@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thisf = 0;
        int thiss = 0;
        int thatf = 0;
        int thats = 0;
        if (this.getFace().equals(""A"") ) {
            thisf = 14;
        } else if (this.getFace().equals(""J"")) {
            thisf = 11;
        } else if (this.getFace().equals(""Q"")) {
            thisf = 12;
        } else if (this.getFace().equals(""K"")) {
            thisf = 13;
        } else {
            thisf = Integer.parseInt(this.getFace());
        }
        if (that.getFace().equals(""A"")) {
            thatf = 14;
        } else if (that.getFace().equals(""J"")) {
            thatf = 11;
        } else if (that.getFace().equals(""Q"")) {
            thatf = 12;
        } else if (that.getFace().equals(""K"")) {
            thatf = 13;
        } else {
            thatf = Integer.parseInt(that.getFace());
            thatf = 4;
        }
        if (this.getSuit().equals(""Spades"")) {
            thiss = 4;
        } else if (this.getSuit().equals(""Hearts"")) {
            thiss = 3;
        } else if (this.getSuit().equals(""Diamonds"")) {
            thiss = 2;
        } else if (this.getSuit().equals(""Clubs"")) {
            thiss = 1;
        }
        if (that.getSuit().equals(""Spades"")) {
            thats = 4;
        } else if (that.getSuit().equals(""Hearts"")) {
            thats = 3;
        } else if (that.getSuit().equals(""Diamonds"")) {
            thats = 2;
        } else if (that.getSuit().equals(""Clubs"")) {
            thats = 1;
        }

        if (thisf < thatf) {
            return -1;
        }
        if (thisf > thatf) {
            return +1;
        }
        if (thiss < thats) {
            return -1;
        }
        if (thiss > thats) {
            return +1;
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int thiss = 0;
            int thats = 0;
            if (c1.getSuit().equals(""Spades"")) {
                thiss = 4;
            } else if (c1.getSuit().equals(""Hearts"")) {
                thiss = 3;
            } else if (c1.getSuit().equals(""Diamonds"")) {
                thiss = 2;
            } else if (c1.getSuit().equals(""Clubs"")) {
                thiss = 1;
            }
            if (c2.getSuit().equals(""Spades"")) {
                thats = 4;
            } else if (c2.getSuit().equals(""Hearts"")) {
                thats = 3;
            } else if (c2.getSuit().equals(""Diamonds"")) {
                thats = 2;
            } else if (c2.getSuit().equals(""Clubs"")) {
                thats = 1;
            }
            if (thiss > thats) {
                return -1;
            }
            if (thiss < thats) {
                return +1;
            }
            return 0;
        }
    }
//    public static void main(String[] args) {
//        Card[] test = new Card[2];
//        test[0] = new Card(""A"",""Clubs"");
//        test[1] = new Card(""K"",""Hearts"");
//        System.out.println(test[1].compareTo(test[0]));
//        System.out.println(Card.SUIT_ORDER.compare(test[1], test[0]));
//    }
}

@1b7bd32754672b8505eb35c56a59791e@"
"b02611012","0","0.63","110912","@f3697a3fc7fd525b9fdbb1d7355c002d@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thisf = 0;
        int thiss = 0;
        int thatf = 0;
        int thats = 0;
        if (this.getFace().equals(""A"") ) {
            thisf = 14;
        } else if (this.getFace().equals(""J"")) {
            thisf = 11;
        } else if (this.getFace().equals(""Q"")) {
            thisf = 12;
        } else if (this.getFace().equals(""K"")) {
            thisf = 13;
        } else {
            thisf = Integer.parseInt(this.getFace());
        }
        if (that.getFace().equals(""A"")) {
            thatf = 14;
        } else if (that.getFace().equals(""J"")) {
            thatf = 11;
        } else if (that.getFace().equals(""Q"")) {
            thatf = 12;
        } else if (that.getFace().equals(""K"")) {
            thatf = 13;
        } else {
            thatf = Integer.parseInt(that.getFace());
            thatf = 4;
        }
        if (this.getSuit().equals(""Spades"")) {
            thiss = 4;
        } else if (this.getSuit().equals(""Hearts"")) {
            thiss = 3;
        } else if (this.getSuit().equals(""Diamonds"")) {
            thiss = 2;
        } else if (this.getSuit().equals(""Clubs"")) {
            thiss = 1;
        }
        if (that.getSuit().equals(""Spades"")) {
            thats = 4;
        } else if (that.getSuit().equals(""Hearts"")) {
            thats = 3;
        } else if (that.getSuit().equals(""Diamonds"")) {
            thats = 2;
        } else if (that.getSuit().equals(""Clubs"")) {
            thats = 1;
        }

        if (thisf < thatf) {
            return -1;
        }
        if (thisf > thatf) {
            return +1;
        }
        if (thiss < thats) {
            return -1;
        }
        if (thiss > thats) {
            return +1;
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int thiss = 0;
            int thats = 0;
            if (c1.getSuit().equals(""Spades"")) {
                thiss = 4;
            } else if (c1.getSuit().equals(""Hearts"")) {
                thiss = 3;
            } else if (c1.getSuit().equals(""Diamonds"")) {
                thiss = 2;
            } else if (c1.getSuit().equals(""Clubs"")) {
                thiss = 1;
            }
            if (c2.getSuit().equals(""Spades"")) {
                thats = 4;
            } else if (c2.getSuit().equals(""Hearts"")) {
                thats = 3;
            } else if (c2.getSuit().equals(""Diamonds"")) {
                thats = 2;
            } else if (c2.getSuit().equals(""Clubs"")) {
                thats = 1;
            }
            if (thiss > thats) {
                return +1;
            }
            if (thiss < thats) {
                return -1;
            }
            return 0;
        }
    }
//    public static void main(String[] args) {
//        Card[] test = new Card[2];
//        test[0] = new Card(""A"",""Diamonds"");
//        test[1] = new Card(""K"",""Hearts"");
//        System.out.println(test[1].compareTo(test[0]));
//        System.out.println(Card.SUIT_ORDER.compare(test[1], test[0]));
//    }
}

@f3697a3fc7fd525b9fdbb1d7355c002d@"
"b02611012","0","0.66","109824","@045a9ddc4ac7c381f05af833b1ea972f@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thisf = 0;
        int thiss = 0;
        int thatf = 0;
        int thats = 0;
        if (this.face.equals(""A"") ) {
            thisf = 14;
        } else if (this.face.equals(""J"")) {
            thisf = 11;
        } else if (this.face.equals(""Q"")) {
            thisf = 12;
        } else if (this.face.equals(""K"")) {
            thisf = 13;
        } else {
            thisf = Integer.parseInt(this.face);
        }
        if (that.face.equals(""A"")) {
            thatf = 14;
        } else if (that.face.equals(""J"")) {
            thatf = 11;
        } else if (that.face.equals(""Q"")) {
            thatf = 12;
        } else if (that.face.equals(""K"")) {
            thatf = 13;
        } else {
            thatf = Integer.parseInt(that.face);
            thatf = 4;
        }
        if (this.suit.equals(""Spades"")) {
            thiss = 4;
        } else if (this.suit.equals(""Hearts"")) {
            thiss = 3;
        } else if (this.suit.equals(""Diamonds"")) {
            thiss = 2;
        } else if (this.suit.equals(""Clubs"")) {
            thiss = 1;
        }
        if (that.suit.equals(""Spades"")) {
            thats = 4;
        } else if (that.suit.equals(""Hearts"")) {
            thats = 3;
        } else if (that.suit.equals(""Diamonds"")) {
            thats = 2;
        } else if (that.suit.equals(""Clubs"")) {
            thats = 1;
        }

        if (thisf < thatf) {
            return -1;
        }
        if (thisf > thatf) {
            return +1;
        }
        if (thiss < thats) {
            return -1;
        }
        if (thiss > thats) {
            return +1;
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int thiss = 0;
            int thats = 0;
            if (c1.suit.equals(""Spades"")) {
                thiss = 4;
            } else if (c1.suit.equals(""Hearts"")) {
                thiss = 3;
            } else if (c1.suit.equals(""Diamonds"")) {
                thiss = 2;
            } else if (c1.suit.equals(""Clubs"")) {
                thiss = 1;
            }
            if (c2.suit.equals(""Spades"")) {
                thats = 4;
            } else if (c2.suit.equals(""Hearts"")) {
                thats = 3;
            } else if (c2.suit.equals(""Diamonds"")) {
                thats = 2;
            } else if (c2.suit.equals(""Clubs"")) {
                thats = 1;
            }
            if (thiss > thats) {
                return +1;
            }
            if (thiss < thats) {
                return -1;
            }
            return 0;
        }
    }
//    public static void main(String[] args) {
//        Card[] test = new Card[2];
//        test[0] = new Card(""A"",""Clubs"");
//        test[1] = new Card(""K"",""Hearts"");
//        System.out.println(test[1].compareTo(test[0]));
//        System.out.println(Card.SUIT_ORDER.compare(test[1], test[0]));
//    }
}

@045a9ddc4ac7c381f05af833b1ea972f@"
"b02611012","0","0.65","108800","@06d3782135f457545d05df729c43e40e@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thisf = 0;
        int thiss = 0;
        int thatf = 0;
        int thats = 0;
        if (this.face.equals(""A"") ) {
            thisf = 14;
        } else if (this.face.equals(""J"")) {
            thisf = 11;
        } else if (this.face.equals(""Q"")) {
            thisf = 12;
        } else if (this.face.equals(""K"")) {
            thisf = 13;
        } else {
            thisf = Integer.parseInt(this.face);
        }
        if (that.face.equals(""A"")) {
            thatf = 14;
        } else if (that.face.equals(""J"")) {
            thatf = 11;
        } else if (that.face.equals(""Q"")) {
            thatf = 12;
        } else if (that.face.equals(""K"")) {
            thatf = 13;
        } else {
            thatf = Integer.parseInt(that.face);
            thatf = 4;
        }
        if (this.suit.equals(""Spades"")) {
            thiss = 4;
        } else if (this.suit.equals(""Hearts"")) {
            thiss = 3;
        } else if (this.suit.equals(""Diamonds"")) {
            thiss = 2;
        } else if (this.suit.equals(""Clubs"")) {
            thiss = 1;
        }
        if (that.suit.equals(""Spades"")) {
            thats = 4;
        } else if (that.suit.equals(""Hearts"")) {
            thats = 3;
        } else if (that.suit.equals(""Diamonds"")) {
            thats = 2;
        } else if (that.suit.equals(""Clubs"")) {
            thats = 1;
        }

        if (thisf < thatf) {
            return +1;
        }
        if (thisf > thatf) {
            return -1;
        }
        if (thiss < thats) {
            return +1;
        }
        if (thiss > thats) {
            return -1;
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int thiss = 0;
            int thats = 0;
            if (c1.suit.equals(""Spades"")) {
                thiss = 4;
            } else if (c1.suit.equals(""Hearts"")) {
                thiss = 3;
            } else if (c1.suit.equals(""Diamonds"")) {
                thiss = 2;
            } else if (c1.suit.equals(""Clubs"")) {
                thiss = 1;
            }
            if (c2.suit.equals(""Spades"")) {
                thats = 4;
            } else if (c2.suit.equals(""Hearts"")) {
                thats = 3;
            } else if (c2.suit.equals(""Diamonds"")) {
                thats = 2;
            } else if (c2.suit.equals(""Clubs"")) {
                thats = 1;
            }
            if (thiss > thats) {
                return -1;
            }
            if (thiss < thats) {
                return +1;
            }
            return 0;
        }
    }
//    public static void main(String[] args) {
//        Card[] test = new Card[2];
//        test[0] = new Card(""A"",""Clubs"");
//        test[1] = new Card(""K"",""Hearts"");
//        System.out.println(test[1].compareTo(test[0]));
//        System.out.println(Card.SUIT_ORDER.compare(test[1], test[0]));
//    }
}

@06d3782135f457545d05df729c43e40e@"
"b02611012","0","0.65","111152","@0925265c7207f3df072a96a618e431f6@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thisf = 0;
        int thiss = 0;
        int thatf = 0;
        int thats = 0;
        if (this.face.equals(""A"") ) {
            thisf = 14;
        } else if (this.face.equals(""J"")) {
            thisf = 11;
        } else if (this.face.equals(""Q"")) {
            thisf = 12;
        } else if (this.face.equals(""K"")) {
            thisf = 13;
        } else {
            thisf = Integer.parseInt(this.face);
        }
        if (that.face.equals(""A"")) {
            thatf = 14;
        } else if (that.face.equals(""J"")) {
            thatf = 11;
        } else if (that.face.equals(""Q"")) {
            thatf = 12;
        } else if (that.face.equals(""K"")) {
            thatf = 13;
        } else {
            thatf = Integer.parseInt(that.face);
            thatf = 4;
        }
        if (this.suit.equals(""Spades"")) {
            thiss = 4;
        } else if (this.suit.equals(""Hearts"")) {
            thiss = 3;
        } else if (this.suit.equals(""Diamonds"")) {
            thiss = 2;
        } else if (this.suit.equals(""Clubs"")) {
            thiss = 1;
        }
        if (that.suit.equals(""Spades"")) {
            thats = 4;
        } else if (that.suit.equals(""Hearts"")) {
            thats = 3;
        } else if (that.suit.equals(""Diamonds"")) {
            thats = 2;
        } else if (that.suit.equals(""Clubs"")) {
            thats = 1;
        }

        if (thisf < thatf) {
            return -1;
        }
        if (thisf > thatf) {
            return +1;
        }
        if (thiss < thats) {
            return -1;
        }
        if (thiss > thats) {
            return +1;
        }
        return 1;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int thiss = 0;
            int thats = 0;
            if (c1.suit.equals(""Spades"")) {
                thiss = 4;
            } else if (c1.suit.equals(""Hearts"")) {
                thiss = 3;
            } else if (c1.suit.equals(""Diamonds"")) {
                thiss = 2;
            } else if (c1.suit.equals(""Clubs"")) {
                thiss = 1;
            }
            if (c2.suit.equals(""Spades"")) {
                thats = 4;
            } else if (c2.suit.equals(""Hearts"")) {
                thats = 3;
            } else if (c2.suit.equals(""Diamonds"")) {
                thats = 2;
            } else if (c2.suit.equals(""Clubs"")) {
                thats = 1;
            }
            if (thiss > thats) {
                return +1;
            }
            if (thiss < thats) {
                return -1;
            }
            return 1;
        }
    }
//    public static void main(String[] args) {
//        Card[] test = new Card[2];
//        test[0] = new Card(""A"",""Clubs"");
//        test[1] = new Card(""K"",""Hearts"");
//        System.out.println(test[1].compareTo(test[0]));
//        System.out.println(Card.SUIT_ORDER.compare(test[1], test[0]));
//    }
}

@0925265c7207f3df072a96a618e431f6@"
"b02611012","0","0.65","110912","@cb1a51ca3f5802a7c5c2940e29f17d38@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thisf = 0;
        int thiss = 0;
        int thatf = 0;
        int thats = 0;
        if (this.face.equals(""A"") ) {
            thisf = 14;
        } else if (this.face.equals(""J"")) {
            thisf = 11;
        } else if (this.face.equals(""Q"")) {
            thisf = 12;
        } else if (this.face.equals(""K"")) {
            thisf = 13;
        } else {
            thisf = Integer.parseInt(this.face);
        }
        if (that.face.equals(""A"")) {
            thatf = 14;
        } else if (that.face.equals(""J"")) {
            thatf = 11;
        } else if (that.face.equals(""Q"")) {
            thatf = 12;
        } else if (that.face.equals(""K"")) {
            thatf = 13;
        } else {
            thatf = Integer.parseInt(that.face);
            thatf = 4;
        }
        if (this.suit.equals(""Spades"")) {
            thiss = 4;
        } else if (this.suit.equals(""Hearts"")) {
            thiss = 3;
        } else if (this.suit.equals(""Diamonds"")) {
            thiss = 2;
        } else if (this.suit.equals(""Clubs"")) {
            thiss = 1;
        }
        if (that.suit.equals(""Spades"")) {
            thats = 4;
        } else if (that.suit.equals(""Hearts"")) {
            thats = 3;
        } else if (that.suit.equals(""Diamonds"")) {
            thats = 2;
        } else if (that.suit.equals(""Clubs"")) {
            thats = 1;
        }

        if (thisf < thatf) {
            return -1;
        }
        if (thisf > thatf) {
            return +1;
        }
        if (thiss < thats) {
            return -1;
        }
        if (thiss > thats) {
            return +1;
        }
        return 1;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int thiss = 0;
            int thats = 0;
            if (c1.suit.equals(""Spades"")) {
                thiss = 4;
            } else if (c1.suit.equals(""Hearts"")) {
                thiss = 3;
            } else if (c1.suit.equals(""Diamonds"")) {
                thiss = 2;
            } else if (c1.suit.equals(""Clubs"")) {
                thiss = 1;
            }
            if (c2.suit.equals(""Spades"")) {
                thats = 4;
            } else if (c2.suit.equals(""Hearts"")) {
                thats = 3;
            } else if (c2.suit.equals(""Diamonds"")) {
                thats = 2;
            } else if (c2.suit.equals(""Clubs"")) {
                thats = 1;
            }
            if (thiss > thats) {
                return +1;
            }
            if (thiss < thats) {
                return -1;
            }
            return 0;
        }
    }
//    public static void main(String[] args) {
//        Card[] test = new Card[2];
//        test[0] = new Card(""A"",""Clubs"");
//        test[1] = new Card(""K"",""Hearts"");
//        System.out.println(test[1].compareTo(test[0]));
//        System.out.println(Card.SUIT_ORDER.compare(test[1], test[0]));
//    }
}

@cb1a51ca3f5802a7c5c2940e29f17d38@"
"b02611012","0","0.63","111072","@199b27cec9fb145cb80b06d8772f39ef@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thisf = 0;
        int thiss = 0;
        int thatf = 0;
        int thats = 0;
        if (this.face.equals(""A"") ) {
            thisf = 14;
        } else if (this.face.equals(""J"")) {
            thisf = 11;
        } else if (this.face.equals(""Q"")) {
            thisf = 12;
        } else if (this.face.equals(""K"")) {
            thisf = 13;
        } else {
            thisf = Integer.parseInt(this.face);
        }
        if (that.face.equals(""A"")) {
            thatf = 14;
        } else if (that.face.equals(""J"")) {
            thatf = 11;
        } else if (that.face.equals(""Q"")) {
            thatf = 12;
        } else if (that.face.equals(""K"")) {
            thatf = 13;
        } else {
            thatf = Integer.parseInt(that.face);
            thatf = 4;
        }
        if (this.suit.equals(""Spades"")) {
            thiss = 4;
        } else if (this.suit.equals(""Hearts"")) {
            thiss = 3;
        } else if (this.suit.equals(""Diamonds"")) {
            thiss = 2;
        } else if (this.suit.equals(""Clubs"")) {
            thiss = 1;
        }
        if (that.suit.equals(""Spades"")) {
            thats = 4;
        } else if (that.suit.equals(""Hearts"")) {
            thats = 3;
        } else if (that.suit.equals(""Diamonds"")) {
            thats = 2;
        } else if (that.suit.equals(""Clubs"")) {
            thats = 1;
        }

        if (thisf < thatf) {
            return -1;
        }
        if (thisf > thatf) {
            return +1;
        }
        if (thiss < thats) {
            return -1;
        }
        if (thiss > thats) {
            return +1;
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int thiss = 0;
            int thats = 0;
            if (c1.suit.equals(""Spades"")) {
                thiss = 4;
            } else if (c1.suit.equals(""Hearts"")) {
                thiss = 3;
            } else if (c1.suit.equals(""Diamonds"")) {
                thiss = 2;
            } else if (c1.suit.equals(""Clubs"")) {
                thiss = 1;
            }
            if (c2.suit.equals(""Spades"")) {
                thats = 4;
            } else if (c2.suit.equals(""Hearts"")) {
                thats = 3;
            } else if (c2.suit.equals(""Diamonds"")) {
                thats = 2;
            } else if (c2.suit.equals(""Clubs"")) {
                thats = 1;
            }
            if (c1.suit.compareTo(c2.suit) > 0) {
                return +1;
            }
            if (c1.suit.compareTo(c2.suit) < 0) {
                return -1;
            }
            return 0;
        }
    }
    public static void main(String[] args) {
        Card[] test = new Card[2];
        test[0] = new Card(""A"",""Clubs"");
        test[1] = new Card(""K"",""Hearts"");
        System.out.println(test[1].compareTo(test[0]));
        System.out.println(Card.SUIT_ORDER.compare(test[1], test[0]));
    }
}

@199b27cec9fb145cb80b06d8772f39ef@"
"b02611012","0","0.65","110944","@be027a991bcec985257db9ba255aac9e@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thisf = 0;
        int thiss = 0;
        int thatf = 0;
        int thats = 0;
        if (this.face.equals(""A"") ) {
            thisf = 14;
        } else if (this.face.equals(""J"")) {
            thisf = 11;
        } else if (this.face.equals(""Q"")) {
            thisf = 12;
        } else if (this.face.equals(""K"")) {
            thisf = 13;
        } else {
            thisf = Integer.parseInt(this.face);
        }
        if (that.face.equals(""A"")) {
            thatf = 14;
        } else if (that.face.equals(""J"")) {
            thatf = 11;
        } else if (that.face.equals(""Q"")) {
            thatf = 12;
        } else if (that.face.equals(""K"")) {
            thatf = 13;
        } else {
            thatf = Integer.parseInt(that.face);
            thatf = 4;
        }
        if (this.suit.equals(""Spades"")) {
            thiss = 4;
        } else if (this.suit.equals(""Hearts"")) {
            thiss = 3;
        } else if (this.suit.equals(""Diamonds"")) {
            thiss = 2;
        } else {
            thiss = 1;
        }
        if (that.suit.equals(""Spades"")) {
            thats = 4;
        } else if (that.suit.equals(""Hearts"")) {
            thats = 3;
        } else if (that.suit.equals(""Diamonds"")) {
            thats = 2;
        } else {
            thats = 1;
        }

        if (thisf < thatf) {
            return -1;
        }
        if (thisf > thatf) {
            return +1;
        }
        if (thiss < thats) {
            return -1;
        }
        if (thiss > thats) {
            return +1;
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int thiss = 0;
            int thats = 0;
            if (c1.suit.equals(""Spades"")) {
                thiss = 4;
            } else if (c1.suit.equals(""Hearts"")) {
                thiss = 3;
            } else if (c1.suit.equals(""Diamonds"")) {
                thiss = 2;
            } else {
                thiss = 1;
            }
            if (c2.suit.equals(""Spades"")) {
                thats = 4;
            } else if (c2.suit.equals(""Hearts"")) {
                thats = 3;
            } else if (c2.suit.equals(""Diamonds"")) {
                thats = 2;
            } else {
                thats = 1;
            }
            if (c1.suit.compareTo(c2.suit) > 0) {
                return +1;
            }
            if (c1.suit.compareTo(c2.suit) < 0) {
                return -1;
            }
            return 0;
        }
    }
//    public static void main(String[] args) {
//        Card[] test = new Card[2];
//        test[0] = new Card(""A"",""Clubs"");
//        test[1] = new Card(""K"",""Hearts"");
//        System.out.println(test[1].compareTo(test[0]));
//        System.out.println(Card.SUIT_ORDER.compare(test[1], test[0]));
//    }
}

@be027a991bcec985257db9ba255aac9e@"
"b02611012","0","0.65","110960","@2f2f4e51bc6eed0ba8d78d5eb6a8bc7a@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thisf = 0;
        int thiss = 0;
        int thatf = 0;
        int thats = 0;
        if (this.face.equals(""A"") ) {
            thisf = 14;
        } else if (this.face.equals(""J"")) {
            thisf = 11;
        } else if (this.face.equals(""Q"")) {
            thisf = 12;
        } else if (this.face.equals(""K"")) {
            thisf = 13;
        } else {
            thisf = Integer.parseInt(this.face);
        }
        if (that.face.equals(""A"")) {
            thatf = 14;
        } else if (that.face.equals(""J"")) {
            thatf = 11;
        } else if (that.face.equals(""Q"")) {
            thatf = 12;
        } else if (that.face.equals(""K"")) {
            thatf = 13;
        } else {
            thatf = Integer.parseInt(that.face);
            thatf = 4;
        }
        if (this.suit.equals(""Spades"")) {
            thiss = 4;
        } else if (this.suit.equals(""Hearts"")) {
            thiss = 3;
        } else if (this.suit.equals(""Diamonds"")) {
            thiss = 2;
        } else if (this.suit.equals(""Clubs"")) {
            thiss = 1;
        }
        if (that.suit.equals(""Spades"")) {
            thats = 4;
        } else if (that.suit.equals(""Hearts"")) {
            thats = 3;
        } else if (that.suit.equals(""Diamonds"")) {
            thats = 2;
        } else if (that.suit.equals(""Clubs"")) {
            thats = 1;
        }

        if (thisf < thatf) {
            return -1;
        }
        if (thisf > thatf) {
            return +1;
        }
        if (thiss < thats) {
            return -1;
        }
        if (thiss > thats) {
            return +1;
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
//            int thiss = 0;
//            int thats = 0;
//            if (c1.getSuit().equals(""Spades"")) {
//                thiss = 4;
//            } else if (c1.getSuit().equals(""Hearts"")) {
//                thiss = 3;
//            } else if (c1.getSuit().equals(""Diamonds"")) {
//                thiss = 2;
//            } else if (c1.getSuit().equals(""Clubs"")) {
//                thiss = 1;
//            }
//            if (c2.getSuit().equals(""Spades"")) {
//                thats = 4;
//            } else if (c2.getSuit().equals(""Hearts"")) {
//                thats = 3;
//            } else if (c2.getSuit().equals(""Diamonds"")) {
//                thats = 2;
//            } else if (c2.getSuit().equals(""Clubs"")) {
//                thats = 1;
//            }
            if (c1.getSuit().compareTo(c2.getSuit()) > 0) {
                return +1;
            }
            if (c1.getSuit().compareTo(c2.getSuit()) < 0) {
                return -1;
            }
            return 0;
        }
    }
//    public static void main(String[] args) {
//        Card[] test = new Card[2];
//        test[0] = new Card(""A"",""Clubs"");
//        test[1] = new Card(""K"",""Hearts"");
//        System.out.println(test[1].compareTo(test[0]));
//        System.out.println(Card.SUIT_ORDER.compare(test[1], test[0]));
//    }
}

@2f2f4e51bc6eed0ba8d78d5eb6a8bc7a@"
"b03611035","0","0.65","110944","@8175b683fecead8a03e9c22934e96f35@import java.util.Arrays;
import java.util.Comparator;
public class Card implements Comparable<Card> {
    
    public void main(){
        Card gg=new Card(""A"",""Spades"");
    }
    
    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {//前<後-1 前>後1 
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        //先檢查face再檢查suit
        //先把face換成int
        int thisface;
        int thatface;
        if(this.face.equals(""A"")) thisface=14;
        else if(this.face.equals(""J"")) thisface=11;
        else if(this.face.equals(""Q"")) thisface=12;
        else if(this.face.equals(""K"")) thisface=13;
        else thisface=Integer.parseInt(this.face);
        if(that.face.equals(""A"")) thatface=14;
        else if(that.face.equals(""J"")) thatface=11;
        else if(that.face.equals(""Q"")) thatface=12;
        else if(that.face.equals(""K"")) thatface=13;
        else thatface=Integer.parseInt(that.face);
        //檢查face
        if(thisface>thatface) return 1;
        else if(thisface<thatface) return -1;
        else{//檢查suit            
            int face1 = 0;
            int face2 = 0;
            Card c1=this;
            Card c2=that;
            if(""Spades"".equals(c1.suit))face1=4;
            else if(""Hearts"".equals(c1.suit))face1=3;
            else if(""Diamonds"".equals(c1.suit))face1=2;
            else if(""Clubs"".equals(c1.suit))face1=1;
            if(""Spades"".equals(c2.suit))face2=4;
            else if(""Hearts"".equals(c2.suit))face2=3;
            else if(""Diamonds"".equals(c2.suit))face2=2;
            else if(""Clubs"".equals(c2.suit))face2=1;
            if(face1>face2)return 1;
            else if(face1<face2)return 0;
            else return 0;
        }
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int face1 = 0;
            int face2 = 0;
            if(""Spades"".equals(c1.suit))face1=4;
            else if(""Hearts"".equals(c1.suit))face1=3;
            else if(""Diamonds"".equals(c1.suit))face1=2;
            else if(""Clubs"".equals(c1.suit))face1=1;
            if(""Spades"".equals(c2.suit))face2=4;
            else if(""Hearts"".equals(c2.suit))face2=3;
            else if(""Diamonds"".equals(c2.suit))face2=2;
            else if(""Clubs"".equals(c2.suit))face2=1;
            if(face1>face2)return 1;
            else if(face1<face2)return 0;
            else return 0;
        }
    }   
}

@8175b683fecead8a03e9c22934e96f35@"
"b03611035","5","0.132","111008","@2fda838e28d189faae64784e0e86cdee@import java.util.Arrays;
import java.util.Comparator;
public class Card implements Comparable<Card> {
    
    public void main(){
        Card gg=new Card(""A"",""Spades"");
    }
    
    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {//前<後-1 前>後1 
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        //先檢查face再檢查suit
        //先把face換成int
        int thisface;
        int thatface;
        if(this.face.equals(""A"")) thisface=14;
        else if(this.face.equals(""J"")) thisface=11;
        else if(this.face.equals(""Q"")) thisface=12;
        else if(this.face.equals(""K"")) thisface=13;
        else thisface=Integer.parseInt(this.face);
        if(that.face.equals(""A"")) thatface=14;
        else if(that.face.equals(""J"")) thatface=11;
        else if(that.face.equals(""Q"")) thatface=12;
        else if(that.face.equals(""K"")) thatface=13;
        else thatface=Integer.parseInt(that.face);
        //檢查face
        if(thisface>thatface) return 1;
        else if(thisface<thatface) return -1;
        else{//檢查suit            
            int face1 = 0;
            int face2 = 0;
            Card c1=this;
            Card c2=that;
            if(""Spades"".equals(c1.suit))face1=4;
            else if(""Hearts"".equals(c1.suit))face1=3;
            else if(""Diamonds"".equals(c1.suit))face1=2;
            else if(""Clubs"".equals(c1.suit))face1=1;
            if(""Spades"".equals(c2.suit))face2=4;
            else if(""Hearts"".equals(c2.suit))face2=3;
            else if(""Diamonds"".equals(c2.suit))face2=2;
            else if(""Clubs"".equals(c2.suit))face2=1;
            if(face1>face2)return 1;
            else if(face1<face2)return -1;
            else return 0;
        }
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int face1 = 0;
            int face2 = 0;
            if(""Spades"".equals(c1.suit))face1=4;
            else if(""Hearts"".equals(c1.suit))face1=3;
            else if(""Diamonds"".equals(c1.suit))face1=2;
            else if(""Clubs"".equals(c1.suit))face1=1;
            if(""Spades"".equals(c2.suit))face2=4;
            else if(""Hearts"".equals(c2.suit))face2=3;
            else if(""Diamonds"".equals(c2.suit))face2=2;
            else if(""Clubs"".equals(c2.suit))face2=1;
            if(face1>face2)return 1;
            else if(face1<face2)return -1;
            else return 0;
        }
    }   
}

@2fda838e28d189faae64784e0e86cdee@"
"b99611017","0","0.62","111088","@46f2fd2fa028349029203caddac87582@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    public int evalueIt(Card c){
    
        int value=0;
        if(c.suit==""Spades"")
        {
            value+=39;
        }
        else if(c.suit==""Hearts"")
        {
            value+=26;
        }
        else if(c.suit==""Diamonds"")
        {
            value+=13;
        }
        else if(c.suit==""Clubs"")
        {
            value+=0;
        }
        if(c.face==""2"")
        {
            value+=12;
        }
        else if(c.face==""A"")
        {
            value+=11;
        }
        else if(c.face==""K"")
        {
            value+=10;
        }
        else if(c.face==""Q"")
        {
            value+=9;
        }
        else if(c.face==""J"")
        {
            value+=8;
        }
        else if(c.face==""10"")
        {
            value+=7;
        }
        else if(c.face==""9"")
        {
            value+=6;
        }
        else if(c.face==""8"")
        {
            value+=5;
        }
        else if(c.face==""7"")
        {
            value+=4;
        }
        else if(c.face==""6"")
        {
            value+=3;
        }
        else if(c.face==""5"")
        {
            value+=2;
        }
        else if(c.face==""4"")
        {
            value+=1;
        }
        else if(c.face==""3"")
        {
            value+=0;
        }
        return value;
    }
    // TODO
    public int compareTo(Card that) {

    
        int v1=evalueIt(this);
        int v2=evalueIt(that);
        if(v1>v2)
            return 1;
        if(v1<v2)
            return -1;
        else
        return 0;
        
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int score1 = 0;
            int score2 = 0;
            if (c1.suit == ""Spades"") {
                score1 = 4;
            } else if (c1.suit == ""Hearts"") {
                score1 = 3;
            } else if (c1.suit == ""Diamonds"") {
                score1 = 2;
            } else if (c1.suit == ""Clubs"") {
                score1 = 1;
            }
            if (c2.suit == ""Spades"") {
                score2 = 4;
            } else if (c2.suit == ""Hearts"") {
                score2 = 3;
            } else if (c2.suit == ""Diamonds"") {
                score2 = 2;
            } else if (c2.suit == ""Clubs"") {
                score2 = 1;
            }
            if (score1 > score2) {
                return 1;
            } else if (score1 < score2) {
                return -1;
            } else {
                return 0;
            }
        }
    }
}

@46f2fd2fa028349029203caddac87582@"
"b99611017","0","0.64","110944","@00fc50c2fb1325e6b2325f45d2846d42@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    public int evalueIt(Card c){
    
        int value=0;
       
        if(c.face==""2"")
        {
            value+=12;
        }
        else if(c.face==""A"")
        {
            value+=11;
        }
        else if(c.face==""K"")
        {
            value+=10;
        }
        else if(c.face==""Q"")
        {
            value+=9;
        }
        else if(c.face==""J"")
        {
            value+=8;
        }
        else if(c.face==""10"")
        {
            value+=7;
        }
        else if(c.face==""9"")
        {
            value+=6;
        }
        else if(c.face==""8"")
        {
            value+=5;
        }
        else if(c.face==""7"")
        {
            value+=4;
        }
        else if(c.face==""6"")
        {
            value+=3;
        }
        else if(c.face==""5"")
        {
            value+=2;
        }
        else if(c.face==""4"")
        {
            value+=1;
        }
        else if(c.face==""3"")
        {
            value+=0;
        }
        return value;
    }
    public int feat(Card c){
        int value=0;
        if(c.suit==""Spades"")
        {
            value+=39;
        }
        else if(c.suit==""Hearts"")
        {
            value+=26;
        }
        else if(c.suit==""Diamonds"")
        {
            value+=13;
        }
        else if(c.suit==""Clubs"")
        {
            value+=0;
        }
        return value;
    }
    // TODO
    public int compareTo(Card that) {

    
        int v1=evalueIt(this);
        int v2=evalueIt(that);
        int f1=feat(this);
        int f2=feat(that);
        if(v1>v2)
            return 1;
        if(v1<v2)
            return -1;
        if(v1==v1&&f1>f2)
            return 1;
        if(v1==v1&&f1<f2)
            return -1;
        else
        return 0;
        
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int score1 = 0;
            int score2 = 0;
            if (c1.suit == ""Spades"") {
                score1 = 4;
            } else if (c1.suit == ""Hearts"") {
                score1 = 3;
            } else if (c1.suit == ""Diamonds"") {
                score1 = 2;
            } else if (c1.suit == ""Clubs"") {
                score1 = 1;
            }
            if (c2.suit == ""Spades"") {
                score2 = 4;
            } else if (c2.suit == ""Hearts"") {
                score2 = 3;
            } else if (c2.suit == ""Diamonds"") {
                score2 = 2;
            } else if (c2.suit == ""Clubs"") {
                score2 = 1;
            }
            if (score1 > score2) {
                return 1;
            } else if (score1 < score2) {
                return -1;
            } else {
                return 0;
            }
        }
    }
}

@00fc50c2fb1325e6b2325f45d2846d42@"
"b99611017","0","0.65","110928","@d4e9d0b7cbc0650d75c1eedfdd07e4b3@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    public int evalueIt(Card c){
    
        int value=0;
       
        if(c.face==""2"")
        {
            value+=12;
        }
        else if(c.face==""A"")
        {
            value+=11;
        }
        else if(c.face==""K"")
        {
            value+=10;
        }
        else if(c.face==""Q"")
        {
            value+=9;
        }
        else if(c.face==""J"")
        {
            value+=8;
        }
        else if(c.face==""10"")
        {
            value+=7;
        }
        else if(c.face==""9"")
        {
            value+=6;
        }
        else if(c.face==""8"")
        {
            value+=5;
        }
        else if(c.face==""7"")
        {
            value+=4;
        }
        else if(c.face==""6"")
        {
            value+=3;
        }
        else if(c.face==""5"")
        {
            value+=2;
        }
        else if(c.face==""4"")
        {
            value+=1;
        }
        else if(c.face==""3"")
        {
            value+=0;
        }
        return value;
    }
    public int feat(Card c){
        int value=0;
        if(c.suit==""Spades"")
        {
            value+=39;
        }
        else if(c.suit==""Hearts"")
        {
            value+=26;
        }
        else if(c.suit==""Diamonds"")
        {
            value+=13;
        }
        else if(c.suit==""Clubs"")
        {
            value+=0;
        }
        return value;
    }
    // TODO
    public int compareTo(Card that) {

    
        int v1=evalueIt(this);
        int v2=evalueIt(that);
        int f1=feat(this);
        int f2=feat(that);
        if(v1>v2)
            return 1;
        if(v1<v2)
            return -1;
        if(v1==v2&&f1>f2)
            return 1;
        if(v1==v2&&f1<f2)
            return -1;
        else
        return 0;
        
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int score1 = 0;
            int score2 = 0;
            if (c1.suit == ""Spades"") {
                score1 = 4;
            } else if (c1.suit == ""Hearts"") {
                score1 = 3;
            } else if (c1.suit == ""Diamonds"") {
                score1 = 2;
            } else if (c1.suit == ""Clubs"") {
                score1 = 1;
            }
            if (c2.suit == ""Spades"") {
                score2 = 4;
            } else if (c2.suit == ""Hearts"") {
                score2 = 3;
            } else if (c2.suit == ""Diamonds"") {
                score2 = 2;
            } else if (c2.suit == ""Clubs"") {
                score2 = 1;
            }
            if (score1 > score2) {
                return 1;
            } else if (score1 < score2) {
                return -1;
            } else {
                return 0;
            }
        }
    }
}

@d4e9d0b7cbc0650d75c1eedfdd07e4b3@"
"b99611017","0","0.63","111024","@682dbffcede828bdc38c4dc421e0f84d@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    public int evalueIt(Card c){
    
        int value=0;
       
        if(c.face==""2"")
        {
            value+=12;
        }
        else if(c.face==""A"")
        {
            value+=11;
        }
        else if(c.face==""K"")
        {
            value+=10;
        }
        else if(c.face==""Q"")
        {
            value+=9;
        }
        else if(c.face==""J"")
        {
            value+=8;
        }
        else if(c.face==""10"")
        {
            value+=7;
        }
        else if(c.face==""9"")
        {
            value+=6;
        }
        else if(c.face==""8"")
        {
            value+=5;
        }
        else if(c.face==""7"")
        {
            value+=4;
        }
        else if(c.face==""6"")
        {
            value+=3;
        }
        else if(c.face==""5"")
        {
            value+=2;
        }
        else if(c.face==""4"")
        {
            value+=1;
        }
        else if(c.face==""3"")
        {
            value+=0;
        }
        return value;
    }
    public int feat(Card c){
        int value=0;
        if(c.suit==""Spades"")
        {
            value+=39;
        }
        else if(c.suit==""Hearts"")
        {
            value+=26;
        }
        else if(c.suit==""Diamonds"")
        {
            value+=13;
        }
        else if(c.suit==""Clubs"")
        {
            value+=0;
        }
        return value;
    }
    // TODO
    public int compareTo(Card that) {

    
        int v1=evalueIt(this);
        int v2=evalueIt(that);
        int f1=feat(this);
        int f2=feat(that);
        int ans=0;
        if(v1>v2)
            ans= 1;
        if(v1<v2)
            ans= -1;
        if(v1==v2&&f1>f2)
            ans= 1;
        if(v1==v2&&f1<f2)
            ans= -1;
        else 
            ans=0;
        return ans;
        
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int score1 = 0;
            int score2 = 0;
            if (c1.suit == ""Spades"") {
                score1 = 4;
            } else if (c1.suit == ""Hearts"") {
                score1 = 3;
            } else if (c1.suit == ""Diamonds"") {
                score1 = 2;
            } else if (c1.suit == ""Clubs"") {
                score1 = 1;
            }
            if (c2.suit == ""Spades"") {
                score2 = 4;
            } else if (c2.suit == ""Hearts"") {
                score2 = 3;
            } else if (c2.suit == ""Diamonds"") {
                score2 = 2;
            } else if (c2.suit == ""Clubs"") {
                score2 = 1;
            }
            if (score1 > score2) {
                return 1;
            } else if (score1 < score2) {
                return -1;
            } else {
                return 0;
            }
        }
    }
}

@682dbffcede828bdc38c4dc421e0f84d@"
"r04546014","0","0.63","109696","@43aed1001810822464945a3b2f9eee68@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        //先比數字再比花色
        if (this.face.equals(""A"")) {
            if (that.face.equals(""A"")) {//如果雙方都是A
                if (this.suit.equals(""Spades"")) {
                    return 1;//我方為黑桃，則一定贏
                } else if (that.suit.equals(""Spades"")) {
                    return -1;//對方是黑桃，則一定輸
                } else if (this.suit.equals(""Hearts"")) {
                    return 1;//對方不是黑桃，則我方紅心一定贏
                } else if (that.suit.equals(""Hearts"")) {
                    return -1;//雙方都不是黑桃，則對方紅心一定贏
                } else if (this.suit.equals(""Diamonds"")) {
                    return 1;//雙方都不是黑桃或紅心，則我方磚塊一定贏
                } else if (that.suit.equals(""Diamonds"")) {
                    return -1;//雙方都不是黑桃或紅心，則對方磚塊一定贏
                } else {
                    return 1;
                }
            }
            else return 1;//只有我是A，我贏
        }
        if (that.face.equals(""A"")) {
            return -1;//已經確定我不是A，所以一定是對手贏
        }
        if(that.face.equals(""K"")) that.face=""13"";
        else if(that.face.equals(""Q"")) that.face=""12"";
        else if(that.face.equals(""J"")) that.face=""11"";
        if(this.face.equals(""K"")) this.face=""13"";
        else if(this.face.equals(""Q"")) this.face=""12"";
        else if(this.face.equals(""J"")) this.face=""11"";
        
        if (Integer.valueOf(this.face) > Integer.valueOf(that.face)) {
            return 1;//數字大贏
        } else if (Integer.valueOf(this.face) < Integer.valueOf(that.face)) {
            return -1;//數字小輸
        } else if (this.suit.equals(""Spades"")) {
            return 1;//我方為黑桃，則一定贏
        } else if (that.suit.equals(""Spades"")) {
            return -1;//對方是黑桃，則一定輸
        } else if (this.suit.equals(""Hearts"")) {
            return 1;//對方不是黑桃，則我方紅心一定贏
        } else if (that.suit.equals(""Hearts"")) {
            return -1;//雙方都不是黑桃，則對方紅心一定贏
        } else if (this.suit.equals(""Diamonds"")) {
            return 1;//雙方都不是黑桃或紅心，則我方磚塊一定贏
        } else if (that.suit.equals(""Diamonds"")) {
            return -1;//雙方都不是黑桃或紅心，則對方磚塊一定贏            
        } // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        else {
            return 0;
        }
    }

    public boolean suitCompare(Card[] card){//檢查兩張卡片的花色是否相同(同花)
        int count=0;
        for(int i=0;i<card.length;i++){
            if(this.suit.equals(card[i].suit)) count++;
        }
        if(count==card.length)
            return true;
        else return false;
    }
    
    public static int howManyPair(Card[] card){//檢查排中有幾對相同的排(這裡用一個特別得方法，看一下card[i].face.equals(card[i+1].face)，三個equals代表蘆，兩個代表2pair，一個代表1pair
        int count=0;
        for(int i=0;i<card.length-1;i++){
            if(card[i].face.equals(card[i+1].face))
                count++;
        }
        if(count==3) return 6;//FullHouse
        if(count==2) return 3;//2pair
        if(count==1) return 2;//1pair
        else return 0;//雜牌
    }
    
    public static boolean stright(Card[] card){//判斷是否為順子
        boolean strightOrNot=true;
        if(card[card.length-1].face.equals(""A"")){//數列中有A的情況
            for(int i=0;i<card.length;i++){//判斷是否有A23456或者10JQKA的情況
                if(card[i].face.equals(String.valueOf(i+2))||card[i].face.endsWith(String.valueOf(i+10))) strightOrNot=true;
                else strightOrNot=false;
            }            
        }
        else {//數列中沒有A的情況
            for(int i=0;i<card.length-1;i++){//若數列中後面檢前面都是1，代表這是順子，若有一個沒有則不是
                if(Integer.valueOf(card[i+1].face)-Integer.valueOf(card[i].face)!=1) strightOrNot=false;
            }            
        }
        return strightOrNot;
    }
    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {            
            int a1 = 0, a2 = 0;
            if (c1.suit.equals(""Spades"")) {
                a1 = 4;
            } else if (c1.suit.equals(""Hearts"")) {
                a1 = 3;
            } else if (c1.suit.equals(""Diamonds"")) {
                a1 = 2;
            } else if (c1.suit.equals(""Clubs"")) {
                a1 = 1;
            }
            if (c2.suit.equals(""Spades"")) {
                a2 = 4;
            } else if (c2.suit.equals(""Hearts"")) {
                a2 = 3;
            } else if (c2.suit.equals(""Diamonds"")) {
                a2 = 2;
            } else if (c2.suit.equals(""Clubs"")) {
                a2 = 1;
            }
            //比較花色
            if (a1 > a2) {
                return 1;
            } else if (a1 < a2) {
                return -1;
            } else {
               return 0;
            }
            // complete this function so the Card can be sorted according to the suit            
        }
    }
}

@43aed1001810822464945a3b2f9eee68@"
"b99611017","0","0.64","111056","@8ae09e90b06a8912037ec101a027e10a@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    public int evalueIt(Card c){
    
        int value=0;
       
        if(c.face==""2"")
        {
            value+=12;
        }
        else if(c.face==""A"")
        {
            value+=11;
        }
        else if(c.face==""K"")
        {
            value+=10;
        }
        else if(c.face==""Q"")
        {
            value+=9;
        }
        else if(c.face==""J"")
        {
            value+=8;
        }
        else if(c.face==""10"")
        {
            value+=7;
        }
        else if(c.face==""9"")
        {
            value+=6;
        }
        else if(c.face==""8"")
        {
            value+=5;
        }
        else if(c.face==""7"")
        {
            value+=4;
        }
        else if(c.face==""6"")
        {
            value+=3;
        }
        else if(c.face==""5"")
        {
            value+=2;
        }
        else if(c.face==""4"")
        {
            value+=1;
        }
        else if(c.face==""3"")
        {
            value+=0;
        }
        return value;
    }
    public int feat(Card c){
        int value=0;
        if(c.suit==""Spades"")
        {
            value+=39;
        }
        else if(c.suit==""Hearts"")
        {
            value+=26;
        }
        else if(c.suit==""Diamonds"")
        {
            value+=13;
        }
        else if(c.suit==""Clubs"")
        {
            value+=0;
        }
        return value;
    }
    // TODO
    public int compareTo(Card that) {

    
        int v1=evalueIt(this);
        int v2=evalueIt(that);
        int f1=feat(this);
        int f2=feat(that);
        int ans=0;
        if(v1>v2)
            ans= 1;
        if(v1<v2)
            ans= -1;
        if(v1==v2&&f1>f2)
            ans= 1;
        if(v1==v2&&f1<f2)
            ans= -1;
        
        return ans;
        
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int score1 = 0;
            int score2 = 0;
            if (c1.suit == ""Spades"") {
                score1 = 4;
            } else if (c1.suit == ""Hearts"") {
                score1 = 3;
            } else if (c1.suit == ""Diamonds"") {
                score1 = 2;
            } else if (c1.suit == ""Clubs"") {
                score1 = 1;
            }
            if (c2.suit == ""Spades"") {
                score2 = 4;
            } else if (c2.suit == ""Hearts"") {
                score2 = 3;
            } else if (c2.suit == ""Diamonds"") {
                score2 = 2;
            } else if (c2.suit == ""Clubs"") {
                score2 = 1;
            }
            if (score1 > score2) {
                return 1;
            } else if (score1 < score2) {
                return -1;
            } else {
                return 0;
            }
        }
    }
}

@8ae09e90b06a8912037ec101a027e10a@"
"b99611017","0","0.64","108096","@64fccb237866a8ccd93f8c8e1b3dfe9c@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    public int evalueIt(Card c){
    
        int value=0;
       
        if(c.face==""2"")
        {
            value+=12;
        }
        else if(c.face==""A"")
        {
            value+=11;
        }
        else if(c.face==""K"")
        {
            value+=10;
        }
        else if(c.face==""Q"")
        {
            value+=9;
        }
        else if(c.face==""J"")
        {
            value+=8;
        }
        else if(c.face==""10"")
        {
            value+=7;
        }
        else if(c.face==""9"")
        {
            value+=6;
        }
        else if(c.face==""8"")
        {
            value+=5;
        }
        else if(c.face==""7"")
        {
            value+=4;
        }
        else if(c.face==""6"")
        {
            value+=3;
        }
        else if(c.face==""5"")
        {
            value+=2;
        }
        else if(c.face==""4"")
        {
            value+=1;
        }
        else if(c.face==""3"")
        {
            value+=0;
        }
        return value;
    }
    public int feat(Card c){
        int value=0;
        if(c.suit==""Spades"")
        {
            value+=39;
        }
        else if(c.suit==""Hearts"")
        {
            value+=26;
        }
        else if(c.suit==""Diamonds"")
        {
            value+=13;
        }
        else if(c.suit==""Clubs"")
        {
            value+=0;
        }
        return value;
    }
    // TODO
    public int compareTo(Card that) {

    
        int v1=evalueIt(this);
        int v2=evalueIt(that);
        int f1=feat(this);
        int f2=feat(that);
        int ans=0;
        if(v1>v2&&((f1>f2)||(f1<f2)||(f1==f2)))
            ans= 1;
        if(v1<v2&&((f1>f2)||(f1<f2)||(f1==f2)))
            ans= -1;
        if(v1==v2&&f1>f2)
            ans= 1;
        if(v1==v2&&f1<f2)
            ans= -1;
        if(v1==v2&&f1==f2)
            ans=0;
        return ans;
        
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int score1 = 0;
            int score2 = 0;
            if (c1.suit == ""Spades"") {
                score1 = 4;
            } else if (c1.suit == ""Hearts"") {
                score1 = 3;
            } else if (c1.suit == ""Diamonds"") {
                score1 = 2;
            } else if (c1.suit == ""Clubs"") {
                score1 = 1;
            }
            if (c2.suit == ""Spades"") {
                score2 = 4;
            } else if (c2.suit == ""Hearts"") {
                score2 = 3;
            } else if (c2.suit == ""Diamonds"") {
                score2 = 2;
            } else if (c2.suit == ""Clubs"") {
                score2 = 1;
            }
            if (score1 > score2) {
                return 1;
            } else if (score1 < score2) {
                return -1;
            } else {
                return 0;
            }
        }
    }
}

@64fccb237866a8ccd93f8c8e1b3dfe9c@"
"r04546014","0","0.63","111024","@fe8493ca0954afc4960e3add95ca7ed0@public class Player implements Comparable<Player>{ 

    private Card[] cards = new Card[5];
    private String name;
     
    // DO NOT MODIFY THIS
    public Player(String name) {
        this.name = name;
    }
     
    // DO NOT MODIFY THIS
    public String getName() {
        return this.name;
     }
     
    // DO NOT MODIFY THIS
    public void setCards(Card[] cards) {
        this.cards = cards;
    }
     
    // TODO 
    public int compareTo(Player that) {
        // complete this function so the Player can be sorted according to the cards he/she has.
        Arrays.sort(this.cards);
        Arrays.sort(that.cards);
        int thisCardCombination=this.cardsConbination(this.cards);
        int thatCardCombination=that.cardsConbination(that.cards);
        if(thisCardCombination>thatCardCombination) return 1;
        if(thisCardCombination<thatCardCombination) return -1;
        else{
            return 0;
        }
    }
    public int cardsConbination(Card[] card){
            if(card[0].suitCompare(card)) return 5;//同花
            if(Card.stright(card)) return 4;//順子
            else return Card.howManyPair(card);//蘆、2pairs、1pair、雜牌
    }

}
@fe8493ca0954afc4960e3add95ca7ed0@"
"b99611017","0","0.64","111088","@031971412e8479364e9e90f3406a11d4@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    public int evalueIt(Card c){
    
        int value=0;
       
        if(c.face==""2"")
        {
            value+=12;
        }
        else if(c.face==""A"")
        {
            value+=11;
        }
        else if(c.face==""K"")
        {
            value+=10;
        }
        else if(c.face==""Q"")
        {
            value+=9;
        }
        else if(c.face==""J"")
        {
            value+=8;
        }
        else if(c.face==""10"")
        {
            value+=7;
        }
        else if(c.face==""9"")
        {
            value+=6;
        }
        else if(c.face==""8"")
        {
            value+=5;
        }
        else if(c.face==""7"")
        {
            value+=4;
        }
        else if(c.face==""6"")
        {
            value+=3;
        }
        else if(c.face==""5"")
        {
            value+=2;
        }
        else if(c.face==""4"")
        {
            value+=1;
        }
        else if(c.face==""3"")
        {
            value+=0;
        }
        if(c.suit==""Spades"")
        {
            value=value*4+3;
        }
        else if(c.suit==""Hearts"")
        {
            value=value*4+2;
        }
        else if(c.suit==""Diamonds"")
        {
            value=value*4+1;
        }
        else if(c.suit==""Clubs"")
        {
            value=value*4;
        }
        return value;
    }
 
    // TODO
    public int compareTo(Card that) {

    
        int v1=evalueIt(this);
        int v2=evalueIt(that);
 
        int ans=0;
        if(v1>v2)
            ans= 1;
        if(v1<v2)
            ans= -1;
        
        if(v1==v2)
            ans=0;
        return ans;
        
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int score1 = 0;
            int score2 = 0;
            if (c1.suit == ""Spades"") {
                score1 = 4;
            } else if (c1.suit == ""Hearts"") {
                score1 = 3;
            } else if (c1.suit == ""Diamonds"") {
                score1 = 2;
            } else if (c1.suit == ""Clubs"") {
                score1 = 1;
            }
            if (c2.suit == ""Spades"") {
                score2 = 4;
            } else if (c2.suit == ""Hearts"") {
                score2 = 3;
            } else if (c2.suit == ""Diamonds"") {
                score2 = 2;
            } else if (c2.suit == ""Clubs"") {
                score2 = 1;
            }
            if (score1 > score2) {
                return 1;
            } else if (score1 < score2) {
                return -1;
            } else {
                return 0;
            }
        }
    }
}

@031971412e8479364e9e90f3406a11d4@"
"b99611017","0","0.66","110960","@0bb5ba4db72de906d6a76718d620cbfa@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    public int evalueIt(Card c){
    
        int value=0;
       
        if(c.face==""A"")
        {
            value+=12;
        }
        else if(c.face==""K"")
        {
            value+=11;
        }
        else if(c.face==""Q"")
        {
            value+=10;
        }
        else if(c.face==""J"")
        {
            value+=9;
        }
        else if(c.face==""10"")
        {
            value+=8;
        }
        else if(c.face==""9"")
        {
            value+=7;
        }
        else if(c.face==""8"")
        {
            value+=6;
        }
        else if(c.face==""7"")
        {
            value+=5;
        }
        else if(c.face==""6"")
        {
            value+=4;
        }
        else if(c.face==""5"")
        {
            value+=3;
        }
        else if(c.face==""4"")
        {
            value+=2;
        }
        else if(c.face==""3"")
        {
            value+=1;
        }
        else if(c.face==""2"")
        {
            value+=0;
        }
        if(c.suit==""Spades"")
        {
            value=value*4+3;
        }
        else if(c.suit==""Hearts"")
        {
            value=value*4+2;
        }
        else if(c.suit==""Diamonds"")
        {
            value=value*4+1;
        }
        else if(c.suit==""Clubs"")
        {
            value=value*4;
        }
        return value;
    }
 
    // TODO
    public int compareTo(Card that) {

    
        int v1=evalueIt(this);
        int v2=evalueIt(that);
 
        int ans=0;
        if(v1>v2)
            ans= 1;
        if(v1<v2)
            ans= -1;
        
        if(v1==v2)
            ans=0;
        return ans;
        
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int score1 = 0;
            int score2 = 0;
            if (c1.suit == ""Spades"") {
                score1 = 4;
            } else if (c1.suit == ""Hearts"") {
                score1 = 3;
            } else if (c1.suit == ""Diamonds"") {
                score1 = 2;
            } else if (c1.suit == ""Clubs"") {
                score1 = 1;
            }
            if (c2.suit == ""Spades"") {
                score2 = 4;
            } else if (c2.suit == ""Hearts"") {
                score2 = 3;
            } else if (c2.suit == ""Diamonds"") {
                score2 = 2;
            } else if (c2.suit == ""Clubs"") {
                score2 = 1;
            }
            if (score1 > score2) {
                return 1;
            } else if (score1 < score2) {
                return -1;
            } else {
                return 0;
            }
        }
    }
}

@0bb5ba4db72de906d6a76718d620cbfa@"
"b03611011","0","0","0","@fd9183919371a72115796117d7be377a@
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS

    /**
     *
     * @param face
     * @param suit
     */
        public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        int i=Integer.parseInt(that.face);
        String j=that.suit;
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            
            return 0;
        }
    }   
}


@fd9183919371a72115796117d7be377a@"
"b03611011","0","0","0","@fd9183919371a72115796117d7be377a@
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS

    /**
     *
     * @param face
     * @param suit
     */
        public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        int i=Integer.parseInt(that.face);
        String j=that.suit;
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            
            return 0;
        }
    }   
}


@fd9183919371a72115796117d7be377a@"
"b99611017","0","0.64","111152","@aa1a4ded1ec7fd26c56df5eccb821433@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    public int evalueIt(Card c){
    
        int value=0;
       
        if(c.face==""A"")
        {
            value+=12;
        }
        else if(c.face==""K"")
        {
            value+=11;
        }
        else if(c.face==""Q"")
        {
            value+=10;
        }
        else if(c.face==""J"")
        {
            value+=9;
        }
        else if(c.face==""10"")
        {
            value+=8;
        }
        else if(c.face==""9"")
        {
            value+=7;
        }
        else if(c.face==""8"")
        {
            value+=6;
        }
        else if(c.face==""7"")
        {
            value+=5;
        }
        else if(c.face==""6"")
        {
            value+=4;
        }
        else if(c.face==""5"")
        {
            value+=3;
        }
        else if(c.face==""4"")
        {
            value+=2;
        }
        else if(c.face==""3"")
        {
            value+=1;
        }
        else if(c.face==""2"")
        {
            value+=0;
        }
        if(c.suit==""Spades"")
        {
            value=value*4+3;
        }
        else if(c.suit==""Hearts"")
        {
            value=value*4+2;
        }
        else if(c.suit==""Diamonds"")
        {
            value=value*4+1;
        }
        else if(c.suit==""Clubs"")
        {
            value=value*4;
        }
        return value;
    }
 
    // TODO
    public int compareTo(Card that) {

    
        int v1=evalueIt(this);
        int v2=evalueIt(that);
 
        int ans=0;
        if(v1>v2)
            ans= -1;
        if(v1<v2)
            ans= 1;
        
        if(v1==v2)
            ans=0;
        return ans;
        
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int score1 = 0;
            int score2 = 0;
            if (c1.suit == ""Spades"") {
                score1 = 4;
            } else if (c1.suit == ""Hearts"") {
                score1 = 3;
            } else if (c1.suit == ""Diamonds"") {
                score1 = 2;
            } else if (c1.suit == ""Clubs"") {
                score1 = 1;
            }
            if (c2.suit == ""Spades"") {
                score2 = 4;
            } else if (c2.suit == ""Hearts"") {
                score2 = 3;
            } else if (c2.suit == ""Diamonds"") {
                score2 = 2;
            } else if (c2.suit == ""Clubs"") {
                score2 = 1;
            }
            if (score1 > score2) {
                return -1;
            } else if (score1 < score2) {
                return 1;
            } else {
                return 0;
            }
        }
    }
}

@aa1a4ded1ec7fd26c56df5eccb821433@"
"b03611011","0","0","0","@9bac24575a72ad932cb5aa12b8542eb4@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    @Override
    public int compareTo(Card that) {
        int i, j;
        switch (this.face) {
            case ""A"":
                i = 1;
                break;
            case ""J"":
                i = 11;
                break;
            case ""Q"":
                i = 12;
                break;
            case ""K"":
                i = 13;
                break;
            default:
                i = Integer.parseInt(this.face);
        }
        switch (that.face) {
            case ""A"":
                j = 1;
                break;
            case ""J"":
                j = 11;
                break;
            case ""Q"":
                j = 12;
                break;
            case ""K"":
                j = 13;
                break;
            default:
                j = Integer.parseInt(this.face);
        }
        if (i < j) {
            return -1;
        }
        if (i > j) {
            return 1;
        }
        switch (this.suit) {
            case ""Spades"":
                i = 4;
                break;
            case ""Hearts"":
                i = 3;
                break;
            case ""Diamonds"":
                i = 2;
                break;
            case ""Clubs"":
                i = 1;
                break;
            default:
                return 0;
        }
        switch (that.suit) {
            case ""Spades"":
                j = 4;
                break;
            case ""Hearts"":
                j = 3;
                break;
            case ""Diamonds"":
                j = 2;
                break;
            case ""Clubs"":
                j = 1;
                break;
            default:
                return 0;
        }
        if (i < j) {
            return -1;
        }
        if (i > j) {
            return 1;
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        @Override
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int i, j;
            switch (c1.suit) {
                case ""Spades"":
                    i = 4;
                    break;
                case ""Hearts"":
                    i = 3;
                    break;
                case ""Diamonds"":
                    i = 2;
                    break;
                case ""Clubs"":
                    i = 1;
                    break;
                default:
                    return 0;
            }
            switch (c2.suit) {
                case ""Spades"":
                    j = 4;
                    break;
                case ""Hearts"":
                    j = 3;
                    break;
                case ""Diamonds"":
                    j = 2;
                    break;
                case ""Clubs"":
                    j = 1;
                    break;
                default:
                    return 0;
            }
            if (i < j) {
                return -1;
            }
            if (i > j) {
                return 1;
            }
            return 0;
        }
    }
}


@9bac24575a72ad932cb5aa12b8542eb4@"
"b03611011","0","0.66","111664","@ce2989f91492abd42095ab786636e52e@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    @Override
    public int compareTo(Card that) {
        int i, j;
        switch (this.face) {
            case ""A"":
                i = 1;
                break;
            case ""J"":
                i = 11;
                break;
            case ""Q"":
                i = 12;
                break;
            case ""K"":
                i = 13;
                break;
            default:
                i = Integer.parseInt(this.face);
        }
        switch (that.face) {
            case ""A"":
                j = 1;
                break;
            case ""J"":
                j = 11;
                break;
            case ""Q"":
                j = 12;
                break;
            case ""K"":
                j = 13;
                break;
            default:
                j = Integer.parseInt(that.face);
        }
        if (i < j) {
            return -1;
        }
        if (i > j) {
            return 1;
        }
        switch (this.suit) {
            case ""Spades"":
                i = 4;
                break;
            case ""Hearts"":
                i = 3;
                break;
            case ""Diamonds"":
                i = 2;
                break;
            case ""Clubs"":
                i = 1;
                break;
            default:
                return 0;
        }
        switch (that.suit) {
            case ""Spades"":
                j = 4;
                break;
            case ""Hearts"":
                j = 3;
                break;
            case ""Diamonds"":
                j = 2;
                break;
            case ""Clubs"":
                j = 1;
                break;
            default:
                return 0;
        }
        if (i < j) {
            return -1;
        }
        if (i > j) {
            return 1;
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        @Override
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int i, j;
            switch (c1.suit) {
                case ""Spades"":
                    i = 4;
                    break;
                case ""Hearts"":
                    i = 3;
                    break;
                case ""Diamonds"":
                    i = 2;
                    break;
                case ""Clubs"":
                    i = 1;
                    break;
                default:
                    return 0;
            }
            switch (c2.suit) {
                case ""Spades"":
                    j = 4;
                    break;
                case ""Hearts"":
                    j = 3;
                    break;
                case ""Diamonds"":
                    j = 2;
                    break;
                case ""Clubs"":
                    j = 1;
                    break;
                default:
                    return 0;
            }
            if (i < j) {
                return -1;
            }
            if (i > j) {
                return 1;
            }
            return 0;
        }
    }
}


@ce2989f91492abd42095ab786636e52e@"
"b03611011","0","0.65","111616","@a0f6ba90cebf4bf8c028d81ac98e0434@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    @Override
    public int compareTo(Card that) {
        int i, j;
        switch (this.face) {
            case ""A"":
                i = 1;
                break;
            case ""J"":
                i = 11;
                break;
            case ""Q"":
                i = 12;
                break;
            case ""K"":
                i = 13;
                break;
            default:
                i = Integer.parseInt(this.face);
        }
        switch (that.face) {
            case ""A"":
                j = 1;
                break;
            case ""J"":
                j = 11;
                break;
            case ""Q"":
                j = 12;
                break;
            case ""K"":
                j = 13;
                break;
            default:
                j = Integer.parseInt(that.face);
        }
        if (i < j) {
            return 1;
        }
        if (i > j) {
            return -1;
        }
        switch (this.suit) {
            case ""Spades"":
                i = 4;
                break;
            case ""Hearts"":
                i = 3;
                break;
            case ""Diamonds"":
                i = 2;
                break;
            case ""Clubs"":
                i = 1;
                break;
            default:
                return 0;
        }
        switch (that.suit) {
            case ""Spades"":
                j = 4;
                break;
            case ""Hearts"":
                j = 3;
                break;
            case ""Diamonds"":
                j = 2;
                break;
            case ""Clubs"":
                j = 1;
                break;
            default:
                return 0;
        }
        if (i < j) {
            return 1;
        }
        if (i > j) {
            return -1;
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        @Override
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int i, j;
            switch (c1.suit) {
                case ""Spades"":
                    i = 4;
                    break;
                case ""Hearts"":
                    i = 3;
                    break;
                case ""Diamonds"":
                    i = 2;
                    break;
                case ""Clubs"":
                    i = 1;
                    break;
                default:
                    return 0;
            }
            switch (c2.suit) {
                case ""Spades"":
                    j = 4;
                    break;
                case ""Hearts"":
                    j = 3;
                    break;
                case ""Diamonds"":
                    j = 2;
                    break;
                case ""Clubs"":
                    j = 1;
                    break;
                default:
                    return 0;
            }
            if (i < j) {
                return -1;
            }
            if (i > j) {
                return 1;
            }
            return 0;
        }
    }
}


@a0f6ba90cebf4bf8c028d81ac98e0434@"
"b03611011","0","0.64","111696","@07ca095239285468c66fd9f9387662a2@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }
        public Comparator<Card> suitOrder() {
        return new SuitOrder();
    }

    // TODO
    @Override
    public int compareTo(Card that) {
        int i, j;
        switch (this.face) {
            case ""A"":
                i = 1;
                break;
            case ""J"":
                i = 11;
                break;
            case ""Q"":
                i = 12;
                break;
            case ""K"":
                i = 13;
                break;
            default:
                i = Integer.parseInt(this.face);
        }
        switch (that.face) {
            case ""A"":
                j = 1;
                break;
            case ""J"":
                j = 11;
                break;
            case ""Q"":
                j = 12;
                break;
            case ""K"":
                j = 13;
                break;
            default:
                j = Integer.parseInt(that.face);
        }
        if (i < j) {
            return -1;
        }
        if (i > j) {
            return 1;
        }
        switch (this.suit) {
            case ""Spades"":
                i = 4;
                break;
            case ""Hearts"":
                i = 3;
                break;
            case ""Diamonds"":
                i = 2;
                break;
            case ""Clubs"":
                i = 1;
                break;
            default:
                return 0;
        }
        switch (that.suit) {
            case ""Spades"":
                j = 4;
                break;
            case ""Hearts"":
                j = 3;
                break;
            case ""Diamonds"":
                j = 2;
                break;
            case ""Clubs"":
                j = 1;
                break;
            default:
                return 0;
        }
        if (i < j) {
            return -1;
        }
        if (i > j) {
            return 1;
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        @Override
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int i, j;
            switch (c1.suit) {
                case ""Spades"":
                    i = 1;
                    break;
                case ""Hearts"":
                    i = 2;
                    break;
                case ""Diamonds"":
                    i = 3;
                    break;
                case ""Clubs"":
                    i = 4;
                    break;
                default:
                    return 0;
            }
            switch (c2.suit) {
                case ""Spades"":
                    j = 1;
                    break;
                case ""Hearts"":
                    j = 2;
                    break;
                case ""Diamonds"":
                    j = 3;
                    break;
                case ""Clubs"":
                    j = 4;
                    break;
                default:
                    return 0;
            }
            if (i < j) {
                return -1;
            }
            if (i > j) {
                return 1;
            }
            return 0;
        }
    }
}


@07ca095239285468c66fd9f9387662a2@"
"b03611011","0","0.65","111600","@0cf167bfbae205cf39db839c04866606@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }
        public Comparator<Card> suitOrder() {
        return new SuitOrder();
    }

    // TODO
    @Override
    public int compareTo(Card that) {
        int i, j;
        switch (this.face) {
            case ""A"":
                i = 1;
                break;
            case ""J"":
                i = 11;
                break;
            case ""Q"":
                i = 12;
                break;
            case ""K"":
                i = 13;
                break;
            default:
                i = Integer.parseInt(this.face);
        }
        switch (that.face) {
            case ""A"":
                j = 1;
                break;
            case ""J"":
                j = 11;
                break;
            case ""Q"":
                j = 12;
                break;
            case ""K"":
                j = 13;
                break;
            default:
                j = Integer.parseInt(that.face);
        }
        if (i < j) {
            return -1;
        }
        if (i > j) {
            return 1;
        }
        switch (this.suit) {
            case ""Spades"":
                i = 1;
                break;
            case ""Hearts"":
                i = 2;
                break;
            case ""Diamonds"":
                i = 3;
                break;
            case ""Clubs"":
                i = 4;
                break;
            default:
                return 0;
        }
        switch (that.suit) {
            case ""Spades"":
                j = 1;
                break;
            case ""Hearts"":
                j = 2;
                break;
            case ""Diamonds"":
                j = 3;
                break;
            case ""Clubs"":
                j = 4;
                break;
            default:
                return 0;
        }
        if (i < j) {
            return -1;
        }
        if (i > j) {
            return 1;
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        @Override
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int i, j;
            switch (c1.suit) {
                case ""Spades"":
                    i = 1;
                    break;
                case ""Hearts"":
                    i = 2;
                    break;
                case ""Diamonds"":
                    i = 3;
                    break;
                case ""Clubs"":
                    i = 4;
                    break;
                default:
                    return 0;
            }
            switch (c2.suit) {
                case ""Spades"":
                    j = 1;
                    break;
                case ""Hearts"":
                    j = 2;
                    break;
                case ""Diamonds"":
                    j = 3;
                    break;
                case ""Clubs"":
                    j = 4;
                    break;
                default:
                    return 0;
            }
            if (i < j) {
                return -1;
            }
            if (i > j) {
                return 1;
            }
            return 0;
        }
    }
}


@0cf167bfbae205cf39db839c04866606@"
"b03611011","0","0.65","110240","@e0149401c0d262fa70024f47b8c8c5c4@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }
        public Comparator<Card> suitOrder() {
        return new SuitOrder();
    }

    // TODO
    @Override
    public int compareTo(Card that) {
        int i, o;
        switch (this.face) {
            case ""A"":
                i = 1;
                break;
            case ""J"":
                i = 11;
                break;
            case ""Q"":
                i = 12;
                break;
            case ""K"":
                i = 13;
                break;
            default:
                i = Integer.parseInt(this.face);
        }
        switch (that.face) {
            case ""A"":
                o = 1;
                break;
            case ""J"":
                o = 11;
                break;
            case ""Q"":
                o = 12;
                break;
            case ""K"":
                o = 13;
                break;
            default:
                o = Integer.parseInt(that.face);
        }
        if (i < o) {
            return -1;
        }
        if (i > o) {
            return 1;
        }
        switch (this.suit) {
            case ""Spades"":
                i = 1;
                break;
            case ""Hearts"":
                i = 2;
                break;
            case ""Diamonds"":
                i = 3;
                break;
            case ""Clubs"":
                i = 4;
                break;
            default:
                return 0;
        }
        switch (that.suit) {
            case ""Spades"":
                o = 1;
                break;
            case ""Hearts"":
                o = 2;
                break;
            case ""Diamonds"":
                o = 3;
                break;
            case ""Clubs"":
                o = 4;
                break;
            default:
                return 0;
        }
        if (i < o) {
            return -1;
        }
        if (i > o) {
            return 1;
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        @Override
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int i, j;
            switch (c1.suit) {
                case ""Spades"":
                    i = 1;
                    break;
                case ""Hearts"":
                    i = 2;
                    break;
                case ""Diamonds"":
                    i = 3;
                    break;
                case ""Clubs"":
                    i = 4;
                    break;
                default:
                    return 0;
            }
            switch (c2.suit) {
                case ""Spades"":
                    j = 1;
                    break;
                case ""Hearts"":
                    j = 2;
                    break;
                case ""Diamonds"":
                    j = 3;
                    break;
                case ""Clubs"":
                    j = 4;
                    break;
                default:
                    return 0;
            }
            if (i < j) {
                return -1;
            }
            if (i > j) {
                return 1;
            }
            return 0;
        }
    }
}


@e0149401c0d262fa70024f47b8c8c5c4@"
"b03611011","0","0.65","108736","@62c482d39d9a7adebae93d394dfc9b20@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }
        public Comparator<Card> suitOrder() {
        return new SuitOrder();
    }

    // TODO
    @Override
    public int compareTo(Card that) {
        int i, o;
        switch (this.face) {
            case ""A"":
                i = 14;
                break;
            case ""J"":
                i = 11;
                break;
            case ""Q"":
                i = 12;
                break;
            case ""K"":
                i = 13;
                break;
            default:
                i = Integer.parseInt(this.face);
        }
        switch (that.face) {
            case ""A"":
                o = 14;
                break;
            case ""J"":
                o = 11;
                break;
            case ""Q"":
                o = 12;
                break;
            case ""K"":
                o = 13;
                break;
            default:
                o = Integer.parseInt(that.face);
        }
        if (i < o) {
            return -1;
        }
        if (i > o) {
            return 1;
        }
        switch (this.suit) {
            case ""Spades"":
                i = 1;
                break;
            case ""Hearts"":
                i = 2;
                break;
            case ""Diamonds"":
                i = 3;
                break;
            case ""Clubs"":
                i = 4;
                break;
            default:
                return 0;
        }
        switch (that.suit) {
            case ""Spades"":
                o = 1;
                break;
            case ""Hearts"":
                o = 2;
                break;
            case ""Diamonds"":
                o = 3;
                break;
            case ""Clubs"":
                o = 4;
                break;
            default:
                return 0;
        }
        if (i < o) {
            return -1;
        }
        if (i > o) {
            return 1;
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        @Override
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int i, j;
            switch (c1.suit) {
                case ""Spades"":
                    i = 1;
                    break;
                case ""Hearts"":
                    i = 2;
                    break;
                case ""Diamonds"":
                    i = 3;
                    break;
                case ""Clubs"":
                    i = 4;
                    break;
                default:
                    return 0;
            }
            switch (c2.suit) {
                case ""Spades"":
                    j = 1;
                    break;
                case ""Hearts"":
                    j = 2;
                    break;
                case ""Diamonds"":
                    j = 3;
                    break;
                case ""Clubs"":
                    j = 4;
                    break;
                default:
                    return 0;
            }
            if (i < j) {
                return -1;
            }
            if (i > j) {
                return 1;
            }
            return 0;
        }
    }
}


@62c482d39d9a7adebae93d394dfc9b20@"
"b03611011","5","0.132","111600","@59c641e26f2c1d18436900e2af03d7a8@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }
        public Comparator<Card> suitOrder() {
        return new SuitOrder();
    }

    // TODO
    @Override
    public int compareTo(Card that) {
        int i, o;
        switch (this.face) {
            case ""A"":
                i = 14;
                break;
            case ""J"":
                i = 11;
                break;
            case ""Q"":
                i = 12;
                break;
            case ""K"":
                i = 13;
                break;
            default:
                i = Integer.parseInt(this.face);
        }
        switch (that.face) {
            case ""A"":
                o = 14;
                break;
            case ""J"":
                o = 11;
                break;
            case ""Q"":
                o = 12;
                break;
            case ""K"":
                o = 13;
                break;
            default:
                o = Integer.parseInt(that.face);
        }
        if (i < o) {
            return -1;
        }
        if (i > o) {
            return 1;
        }
        switch (this.suit) {
            case ""Spades"":
                i = 4;
                break;
            case ""Hearts"":
                i = 3;
                break;
            case ""Diamonds"":
                i = 2;
                break;
            case ""Clubs"":
                i = 1;
                break;
            default:
                return 0;
        }
        switch (that.suit) {
            case ""Spades"":
                o = 4;
                break;
            case ""Hearts"":
                o = 3;
                break;
            case ""Diamonds"":
                o = 2;
                break;
            case ""Clubs"":
                o = 1;
                break;
            default:
                return 0;
        }
        if (i < o) {
            return -1;
        }
        if (i > o) {
            return 1;
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        @Override
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int i, j;
            switch (c1.suit) {
                case ""Spades"":
                    i = 4;
                    break;
                case ""Hearts"":
                    i = 3;
                    break;
                case ""Diamonds"":
                    i = 2;
                    break;
                case ""Clubs"":
                    i = 1;
                    break;
                default:
                    return 0;
            }
            switch (c2.suit) {
                case ""Spades"":
                    j = 4;
                    break;
                case ""Hearts"":
                    j = 3;
                    break;
                case ""Diamonds"":
                    j = 2;
                    break;
                case ""Clubs"":
                    j = 1;
                    break;
                default:
                    return 0;
            }
            if (i < j) {
                return -1;
            }
            if (i > j) {
                return 1;
            }
            return 0;
        }
    }
}


@59c641e26f2c1d18436900e2af03d7a8@"
"r04546014","0","0.65","108432","@491018eb943ac04300ffa6b17ee2c2ee@import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        //先比數字再比花色
        if (this.face.equals(""A"")) {
            if (that.face.equals(""A"")) {//如果雙方都是A
                if (this.suit.equals(""Spades"")) {
                    return 1;//我方為黑桃，則一定贏
                } else if (that.suit.equals(""Spades"")) {
                    return -1;//對方是黑桃，則一定輸
                } else if (this.suit.equals(""Hearts"")) {
                    return 1;//對方不是黑桃，則我方紅心一定贏
                } else if (that.suit.equals(""Hearts"")) {
                    return -1;//雙方都不是黑桃，則對方紅心一定贏
                } else if (this.suit.equals(""Diamonds"")) {
                    return 1;//雙方都不是黑桃或紅心，則我方磚塊一定贏
                } else if (that.suit.equals(""Diamonds"")) {
                    return -1;//雙方都不是黑桃或紅心，則對方磚塊一定贏
                } else {
                    return 1;
                }
            }
            else return 1;//只有我是A，我贏
        }
        if (that.face.equals(""A"")) {
            return -1;//已經確定我不是A，所以一定是對手贏
        }
        if(that.face.equals(""K"")) that.face=""13"";
        else if(that.face.equals(""Q"")) that.face=""12"";
        else if(that.face.equals(""J"")) that.face=""11"";
        if(this.face.equals(""K"")) this.face=""13"";
        else if(this.face.equals(""Q"")) this.face=""12"";
        else if(this.face.equals(""J"")) this.face=""11"";
        
        if (Integer.valueOf(this.face) > Integer.valueOf(that.face)) {
            return 1;//數字大贏
        } else if (Integer.valueOf(this.face) < Integer.valueOf(that.face)) {
            return -1;//數字小輸
        } else if (this.suit.equals(""Spades"")) {
            return 1;//我方為黑桃，則一定贏
        } else if (that.suit.equals(""Spades"")) {
            return -1;//對方是黑桃，則一定輸
        } else if (this.suit.equals(""Hearts"")) {
            return 1;//對方不是黑桃，則我方紅心一定贏
        } else if (that.suit.equals(""Hearts"")) {
            return -1;//雙方都不是黑桃，則對方紅心一定贏
        } else if (this.suit.equals(""Diamonds"")) {
            return 1;//雙方都不是黑桃或紅心，則我方磚塊一定贏
        } else if (that.suit.equals(""Diamonds"")) {
            return -1;//雙方都不是黑桃或紅心，則對方磚塊一定贏            
        } // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        else {
            return 0;
        }
    }

    public boolean suitCompare(Card[] card){//檢查兩張卡片的花色是否相同(同花)
        int count=0;
        for(int i=0;i<card.length;i++){
            if(this.suit.equals(card[i].suit)) count++;
        }
        if(count==card.length)
            return true;
        else return false;
    }
    
    public static int howManyPair(Card[] card){//檢查排中有幾對相同的排(這裡用一個特別得方法，看一下card[i].face.equals(card[i+1].face)，三個equals代表蘆，兩個代表2pair，一個代表1pair
        int count=0;
        for(int i=0;i<card.length-1;i++){
            if(card[i].face.equals(card[i+1].face))
                count++;
        }
        if(count==3) return 6;//FullHouse
        if(count==2) return 3;//2pair
        if(count==1) return 2;//1pair
        else return 0;//雜牌
    }
    
    public static boolean stright(Card[] card){//判斷是否為順子
        boolean strightOrNot=true;
        if(card[card.length-1].face.equals(""A"")){//數列中有A的情況
            for(int i=0;i<card.length;i++){//判斷是否有A23456或者10JQKA的情況
                if(card[i].face.equals(String.valueOf(i+2))||card[i].face.endsWith(String.valueOf(i+10))) strightOrNot=true;
                else strightOrNot=false;
            }            
        }
        else {//數列中沒有A的情況
            for(int i=0;i<card.length-1;i++){//若數列中後面檢前面都是1，代表這是順子，若有一個沒有則不是
                if(Integer.valueOf(card[i+1].face)-Integer.valueOf(card[i].face)!=1) strightOrNot=false;
            }            
        }
        return strightOrNot;
    }
    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {            
            int a1 = 0, a2 = 0;
            if (c1.suit.equals(""Spades"")) {
                a1 = 4;
            } else if (c1.suit.equals(""Hearts"")) {
                a1 = 3;
            } else if (c1.suit.equals(""Diamonds"")) {
                a1 = 2;
            } else if (c1.suit.equals(""Clubs"")) {
                a1 = 1;
            }
            if (c2.suit.equals(""Spades"")) {
                a2 = 4;
            } else if (c2.suit.equals(""Hearts"")) {
                a2 = 3;
            } else if (c2.suit.equals(""Diamonds"")) {
                a2 = 2;
            } else if (c2.suit.equals(""Clubs"")) {
                a2 = 1;
            }
            //比較花色
            if (a1 > a2) {
                return 1;
            } else if (a1 < a2) {
                return -1;
            } else {
               return 0;
            }
            // complete this function so the Card can be sorted according to the suit            
        }
    }
}

@491018eb943ac04300ffa6b17ee2c2ee@"
"r04546014","0","0.66","111056","@2bd5e6753ddc1e24fcc6c0946232f769@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        //先比數字再比花色
        if (this.face.equals(""A"")) {
            if (that.face.equals(""A"")) {//如果雙方都是A
                return Card.SUIT_ORDER.compare(this, that);
            } //                if (this.suit.equals(""Spades"")) {
            //                    return 1;//我方為黑桃，則一定贏
            //                } else if (that.suit.equals(""Spades"")) {
            //                    return -1;//對方是黑桃，則一定輸
            //                } else if (this.suit.equals(""Hearts"")) {
            //                    return 1;//對方不是黑桃，則我方紅心一定贏
            //                } else if (that.suit.equals(""Hearts"")) {
            //                    return -1;//雙方都不是黑桃，則對方紅心一定贏
            //                } else if (this.suit.equals(""Diamonds"")) {
            //                    return 1;//雙方都不是黑桃或紅心，則我方磚塊一定贏
            //                } else if (that.suit.equals(""Diamonds"")) {
            //                    return -1;//雙方都不是黑桃或紅心，則對方磚塊一定贏
            //                } else {
            //                    return 1;
            //                }
            else {
                return 1;//只有我是A，我贏
            }
        }
        if (that.face.equals(""A"")) {
            return -1;//已經確定我不是A，所以一定是對手贏
        }
        if (that.face.equals(""K"")) {
            that.face = ""13"";
        } else if (that.face.equals(""Q"")) {
            that.face = ""12"";
        } else if (that.face.equals(""J"")) {
            that.face = ""11"";
        }
        if (this.face.equals(""K"")) {
            this.face = ""13"";
        } else if (this.face.equals(""Q"")) {
            this.face = ""12"";
        } else if (this.face.equals(""J"")) {
            this.face = ""11"";
        }

        if (Integer.valueOf(this.face) > Integer.valueOf(that.face)) {
            return 1;//數字大贏
        } else if (Integer.valueOf(this.face) < Integer.valueOf(that.face)) {
            return -1;//數字小輸
        } else {
            return Card.SUIT_ORDER.compare(this, that);
//        } 
//        else if (this.suit.equals(""Spades"")) {
//            return 1;//我方為黑桃，則一定贏
//        } else if (that.suit.equals(""Spades"")) {
//            return -1;//對方是黑桃，則一定輸
//        } else if (this.suit.equals(""Hearts"")) {
//            return 1;//對方不是黑桃，則我方紅心一定贏
//        } else if (that.suit.equals(""Hearts"")) {
//            return -1;//雙方都不是黑桃，則對方紅心一定贏
//        } else if (this.suit.equals(""Diamonds"")) {
//            return 1;//雙方都不是黑桃或紅心，則我方磚塊一定贏
//        } else if (that.suit.equals(""Diamonds"")) {
//            return -1;//雙方都不是黑桃或紅心，則對方磚塊一定贏            
//        } // complete this function so the Card can be sorted
//        // (you must consider both face and suit)
//        else {
//            return 0;
//        }
        }
    }

    public boolean suitCompare(Card[] card) {//檢查兩張卡片的花色是否相同(同花)
        int count = 0;
        for (int i = 0; i < card.length; i++) {
            if (this.suit.equals(card[i].suit)) {
                count++;
            }
        }
        if (count == card.length) {
            return true;
        } else {
            return false;
        }
    }

    public static int howManyPair(Card[] card) {//檢查排中有幾對相同的排(這裡用一個特別得方法，看一下card[i].face.equals(card[i+1].face)，三個equals代表蘆，兩個代表2pair，一個代表1pair
        int count = 0;
        for (int i = 0; i < card.length - 1; i++) {
            if (card[i].face.equals(card[i + 1].face)) {
                count++;
            }
        }
        if (count == 3) {
            return 6;//FullHouse
        }
        if (count == 2) {
            return 3;//2pair
        }
        if (count == 1) {
            return 2;//1pair
        } else {
            return 0;//雜牌
        }
    }

    public static boolean stright(Card[] card) {//判斷是否為順子
        boolean strightOrNot = true;
        if (card[card.length - 1].face.equals(""A"")) {//數列中有A的情況
            for (int i = 0; i < card.length; i++) {//判斷是否有A23456或者10JQKA的情況
                if (card[i].face.equals(String.valueOf(i + 2)) || card[i].face.endsWith(String.valueOf(i + 10))) {
                    strightOrNot = true;
                } else {
                    strightOrNot = false;
                }
            }
        } else {//數列中沒有A的情況
            for (int i = 0; i < card.length - 1; i++) {//若數列中後面檢前面都是1，代表這是順子，若有一個沒有則不是
                if (Integer.valueOf(card[i + 1].face) - Integer.valueOf(card[i].face) != 1) {
                    strightOrNot = false;
                }
            }
        }
        return strightOrNot;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int a1 = 0, a2 = 0;
            if (c1.suit.equals(""Spades"")) {
                a1 = 4;
            } else if (c1.suit.equals(""Hearts"")) {
                a1 = 3;
            } else if (c1.suit.equals(""Diamonds"")) {
                a1 = 2;
            } else if (c1.suit.equals(""Clubs"")) {
                a1 = 1;
            }
            if (c2.suit.equals(""Spades"")) {
                a2 = 4;
            } else if (c2.suit.equals(""Hearts"")) {
                a2 = 3;
            } else if (c2.suit.equals(""Diamonds"")) {
                a2 = 2;
            } else if (c2.suit.equals(""Clubs"")) {
                a2 = 1;
            }
            //比較花色
            if (a1 > a2) {
                return 1;
            } else if (a1 < a2) {
                return -1;
            } else {
                return 0;
            }
            // complete this function so the Card can be sorted according to the suit            
        }
    }
}

@2bd5e6753ddc1e24fcc6c0946232f769@"
"r04546014","5","0.128","111024","@47ef2480ec157db92baffd6aefa7967f@import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        //先比數字再比花色
        if (this.face.equals(""A"")) {
            if (that.face.equals(""A"")) {//如果雙方都是A
                return Card.SUIT_ORDER.compare(this, that);
            } 
            else {
                return 1;//只有我是A，我贏
            }
        }
        if (that.face.equals(""A"")) {
            return -1;//已經確定我不是A，所以一定是對手贏
        }
        if(this.compareFace()>that.compareFace()) return 1;
        if(this.compareFace()<that.compareFace()) return -1;
        else{
            return Card.SUIT_ORDER.compare(this, that);
        }        
    }

    public int compareFace(){//比數字
        if(this.face.equals(""K"")) return 13;
        if(this.face.equals(""Q"")) return 12;
        if(this.face.equals(""J"")) return 11;
        else return Integer.valueOf(this.face);
    }
    public boolean suitCompare(Card[] card) {//檢查兩張卡片的花色是否相同(同花)
        int count = 0;
        for (int i = 0; i < card.length; i++) {
            if (this.suit.equals(card[i].suit)) {
                count++;
            }
        }
        if (count == card.length) {
            return true;
        } else {
            return false;
        }
    }

    public static int howManyPair(Card[] card) {//檢查排中有幾對相同的排(這裡用一個特別得方法，看一下card[i].face.equals(card[i+1].face)，三個equals代表蘆，兩個代表2pair，一個代表1pair
        int count = 0;
        for (int i = 0; i < card.length - 1; i++) {
            if (card[i].face.equals(card[i + 1].face)) {
                count++;
            }
        }
        if (count == 3) {
            return 6;//FullHouse
        }
        if (count == 2) {
            return 3;//2pair
        }
        if (count == 1) {
            return 2;//1pair
        } else {
            return 0;//雜牌
        }
    }

    public static boolean stright(Card[] card) {//判斷是否為順子
        boolean strightOrNot = true;
        if (card[card.length - 1].face.equals(""A"")) {//數列中有A的情況
            for (int i = 0; i < card.length; i++) {//判斷是否有A23456或者10JQKA的情況
                if (card[i].face.equals(String.valueOf(i + 2)) || card[i].face.endsWith(String.valueOf(i + 10))) {
                    strightOrNot = true;
                } else {
                    strightOrNot = false;
                }
            }
        } else {//數列中沒有A的情況
            for (int i = 0; i < card.length - 1; i++) {//若數列中後面檢前面都是1，代表這是順子，若有一個沒有則不是
                if (Integer.valueOf(card[i + 1].face) - Integer.valueOf(card[i].face) != 1) {
                    strightOrNot = false;
                }
            }
        }
        return strightOrNot;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int a1 = 0, a2 = 0;
            if (c1.suit.equals(""Spades"")) {
                a1 = 4;
            } else if (c1.suit.equals(""Hearts"")) {
                a1 = 3;
            } else if (c1.suit.equals(""Diamonds"")) {
                a1 = 2;
            } else if (c1.suit.equals(""Clubs"")) {
                a1 = 1;
            }
            if (c2.suit.equals(""Spades"")) {
                a2 = 4;
            } else if (c2.suit.equals(""Hearts"")) {
                a2 = 3;
            } else if (c2.suit.equals(""Diamonds"")) {
                a2 = 2;
            } else if (c2.suit.equals(""Clubs"")) {
                a2 = 1;
            }
            //比較花色
            if (a1 > a2) {
                return 1;
            } else if (a1 < a2) {
                return -1;
            } else {
                return 0;
            }
            // complete this function so the Card can be sorted according to the suit            
        }
    }
}

@47ef2480ec157db92baffd6aefa7967f@"
"b02611019","5","0.128","110960","@adccbd5fbbddc9c720a2b2819b9df595@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
    private int intsuit;
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
//        switch (suit) {
//            case ""Spades"":
//                this.intsuit = 3;
//                break;
//            case ""Hearts"":
//                this.intsuit = 2;
//                break;
//            case ""Diamonds"":
//                this.intsuit = 1;
//                break;
//            case ""Clubs"":
//                this.intsuit = 0;
//                break;
//        }
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        String a = this.face;
        String b = that.face;
        if (a.equals( ""Q"")) {
            a = ""JQ"";
        }
        if (a.equals(""A"")) {
            a = ""L"";
        }
        if (a.equals(""10"")) {
            a = ""99"";
        }
        if (b.equals( ""Q"")) {
            b = ""JQ"";
        }
        if (b.equals(""A"")) {
            b = ""L"";
        }
        if (b.equals( ""10"")) {
            b = ""99"";
        }
        if (a.compareTo(b) > 0) {
            return 1;
        }
        if (a.compareTo(b) < 0) {
            return -1;
        }
        if (this.getSuit().compareTo(that.getSuit()) > 0) {
            return +1;
        }
        if (this.getSuit().compareTo(that.getSuit()) < 0) {
            return -1;
        }
        return 0;

    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if (c1.getSuit().compareTo(c2.getSuit()) > 0) {
                return +1;
            }
            if (c1.getSuit().compareTo(c2.getSuit()) < 0) {
                return -1;
            }
            return 0;
        }
    }
}

@adccbd5fbbddc9c720a2b2819b9df595@"
"r04945009","5","0.126","111824","@c1f15b625365a186d3723c37c1402462@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    public int face2int() {
        if(this.face.equals(""A"")) return 14;
        if(this.face.equals(""K"")) return 13;
        if(this.face.equals(""Q"")) return 12;
        if(this.face.equals(""J"")) return 11;
        if(this.face.equals(""10"")) return 10;
        if(this.face.equals(""9"")) return 9;
        if(this.face.equals(""8"")) return 8;
        if(this.face.equals(""7"")) return 7;
        if(this.face.equals(""6"")) return 6;
        if(this.face.equals(""5"")) return 5;
        if(this.face.equals(""4"")) return 4;
        if(this.face.equals(""3"")) return 3;
        if(this.face.equals(""2"")) return 2;
        return 0;
    }
    
    public int suit2int() {
        if(this.suit.equals(""Spades"")) return 4;
        if(this.suit.equals(""Hearts"")) return 3;
        if(this.suit.equals(""Diamonds"")) return 2;
        if(this.suit.equals(""Clubs"")) return 1;
        return 0;
    }
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int face1 = this.face2int();
        int face2 = that.face2int();
        int suit1 = this.suit2int();
        int suit2 = that.suit2int();
        if (face1 < face2) return -1;
        if (face1 > face2) return +1;
        if (suit1 < suit2) return -1;
        if (suit1 > suit2) return +1;
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int suit1 = c1.suit2int();
            int suit2 = c2.suit2int();
            if (suit1 < suit2) return -1;
            if (suit1 > suit2) return +1;
            return 0;
        }
    }   
}

@c1f15b625365a186d3723c37c1402462@"
"b01b01039","0","0.65","110912","@f7de7097eec6c967ba17cb7da4d78df5@import java.util.Arrays;
import java.util.Comparator;

public class Card implements Comparable<Card> {
	private static final String[] SUIT = {""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};
	private static final String[] FACE = {""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"", ""A""};
	
	
	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();
		
    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
		int c1_face = 0;
		int c2_face = 0;
		for(int i = 0; i < FACE.length; i++){
			if(this.face.equals(FACE[i])) c1_face = i;
			if(this.face.equals(FACE[i])) c2_face = i;
		}
		int c1_suit = 0;
		int c2_suit = 0;
		for(int i = 0; i < SUIT.length; i++){
			String s1 = this.face;
			String s2 = that.face;
			if(s1.equals(SUIT[i])) c1_suit = i;
			if(s2.equals(SUIT[i])) c2_suit = i;
		}
		
		if (c1_face > c2_face)      return  1;
		else if (c1_face < c2_face) return -1;
        else if (c1_suit > c2_suit) return  1;
		else if (c1_suit < c2_suit) return -1;
		else                        return  0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            int c1_suit = 0 ;
			int c2_suit = 0;
			for(int i = 0; i < SUIT.length; i++){
				String s1 = c1.face;
				String s2 = c2.face;
				if(s1.equals(SUIT[i])) c1_suit = i;
				if(s2.equals(SUIT[i])) c2_suit = i;
			}
			if(c1_suit > c2_suit)      return  1;
			else if(c1_suit < c2_suit) return -1;
			else                       return  0;
        }
    }   
	
	public void main(){
		System.out.println(""OK"");
	}
}


@f7de7097eec6c967ba17cb7da4d78df5@"
"b01b01039","0","0.66","111024","@f81689f46f46d48a3e9d1e245cf8837d@import java.util.Arrays;
import java.util.Comparator;

public class Card implements Comparable<Card> {
	private static final String[] SUIT = {""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};
	private static final String[] FACE = {""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"", ""A""};
	
	
	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();
		
    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
		int c1_face = 0;
		int c2_face = 0;
		for(int i = 0; i < FACE.length; i++){
			if(this.face.equals(FACE[i])) c1_face = i;
			if(this.face.equals(FACE[i])) c2_face = i;
		}
		int c1_suit = 0;
		int c2_suit = 0;
		for(int i = 0; i < SUIT.length; i++){
			String s1 = this.face;
			String s2 = that.face;
			if(s1.equals(SUIT[i])) c1_suit = i;
			if(s2.equals(SUIT[i])) c2_suit = i;
		}
		
		if (c1_face > c2_face)      return -1;
		else if (c1_face < c2_face) return  1;
        else if (c1_suit > c2_suit) return -1;
		else if (c1_suit < c2_suit) return  1;
		else                        return  0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            int c1_suit = 0 ;
			int c2_suit = 0;
			for(int i = 0; i < SUIT.length; i++){
				String s1 = c1.face;
				String s2 = c2.face;
				if(s1.equals(SUIT[i])) c1_suit = i;
				if(s2.equals(SUIT[i])) c2_suit = i;
			}
			if(c1_suit > c2_suit)      return -1;
			else if(c1_suit < c2_suit) return  1;
			else                       return  0;
        }
    }   
	
	public void main(){
		System.out.println(""OK"");
	}
}


@f81689f46f46d48a3e9d1e245cf8837d@"
"b01b01039","0","0.66","110992","@b3eabf5410811251c60414cc324cd298@import java.util.Arrays;
import java.util.Comparator;

public class Card implements Comparable<Card> {
	private static final String[] SUIT = {""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};
	private static final String[] FACE = {""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"", ""A""};
	
	
	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();
		
    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
		int c1_face = 0;
		int c2_face = 0;
		for(int i = 0; i < FACE.length; i++){
			String s1 = this.face;
			String s2 = that.face;
			if(s1.equals(FACE[i])) c1_face = i;
			if(s2.equals(FACE[i])) c2_face = i;
		}
		
		int c1_suit = 0;
		int c2_suit = 0;
		for(int i = 0; i < SUIT.length; i++){
			String s1 = this.suit;
			String s2 = that.suit;
			if(s1.equals(SUIT[i])) c1_suit = i;
			if(s2.equals(SUIT[i])) c2_suit = i;
		}
		
		if (c1_face > c2_face)      return -1;
		else if (c1_face < c2_face) return  1;
        else if (c1_suit > c2_suit) return -1;
		else if (c1_suit < c2_suit) return  1;
		else                        return  0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            int c1_suit = 0 ;
			int c2_suit = 0;
			for(int i = 0; i < SUIT.length; i++){
				String s1 = c1.suit;
				String s2 = c2.suit;
				if(s1.equals(SUIT[i])) c1_suit = i;
				if(s2.equals(SUIT[i])) c2_suit = i;
			}
			if(c1_suit > c2_suit)      return -1;
			else if(c1_suit < c2_suit) return  1;
			else                       return  0;
        }
    }   
	
	private static void cards_print(Card[] cards){
		int n = cards.length;
		for(int i = 0; i < n; i++){
			System.out.printf(""Face : %s Suit : %s\n"", cards[i].getFace(), cards[i].getSuit());
		}
	}
	
	public static void main(String[] args){
		Card[] cards = new Card[5];
		String[] Face = {""Clubs"", ""Clubs"", ""Spades"", ""Hearts"", ""Diamonds""};
		String[] Suit = {""2"",""3"",""5"",""5"",""A""};
		int n = Face.length;
		for(int i=0; i<n; i++){
			Card c = new Card(Suit[i], Face[i]);
			cards[i] = c;
		}
		
		System.out.println(""Original"");
		cards_print(cards);
		System.out.println(""Sorted"");
		Arrays.sort(cards);
		cards_print(cards);
		System.out.println(""Sorted"");
		Arrays.sort(cards, cards[0].SUIT_ORDER);
		cards_print(cards);
	}
}


@b3eabf5410811251c60414cc324cd298@"
"b01b01039","5","0.132","111744","@668f0f9f387b075a90649f82e8563ec0@import java.util.Arrays;
import java.util.Comparator;

public class Card implements Comparable<Card> {
	private static final String[] SUIT = {""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};
	private static final String[] FACE = {""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"", ""J"", ""Q"", ""K"", ""A""};
	
	
	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();
		
    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
		int c1_face = 0;
		int c2_face = 0;
		for(int i = 0; i < FACE.length; i++){
			String s1 = this.face;
			String s2 = that.face;
			if(s1.equals(FACE[i])) c1_face = i;
			if(s2.equals(FACE[i])) c2_face = i;
		}
		
		int c1_suit = 0;
		int c2_suit = 0;
		for(int i = 0; i < SUIT.length; i++){
			String s1 = this.suit;
			String s2 = that.suit;
			if(s1.equals(SUIT[i])) c1_suit = i;
			if(s2.equals(SUIT[i])) c2_suit = i;
		}
		
		if (c1_face > c2_face)      return  1;
		else if (c1_face < c2_face) return -1;
        else if (c1_suit > c2_suit) return  1;
		else if (c1_suit < c2_suit) return -1;
		else                        return  0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            int c1_suit = 0 ;
			int c2_suit = 0;
			for(int i = 0; i < SUIT.length; i++){
				String s1 = c1.suit;
				String s2 = c2.suit;
				if(s1.equals(SUIT[i])) c1_suit = i;
				if(s2.equals(SUIT[i])) c2_suit = i;
			}
			if(c1_suit > c2_suit)      return  1;
			else if(c1_suit < c2_suit) return -1;
			else                       return  0;
        }
    }   
	
	private static void cards_print(Card[] cards){
		int n = cards.length;
		for(int i = 0; i < n; i++){
			System.out.printf(""Face : %s Suit : %s\n"", cards[i].getFace(), cards[i].getSuit());
		}
	}
	
	public static void main(String[] args){
		Card[] cards = new Card[5];
		String[] Face = {""Clubs"", ""Clubs"", ""Spades"", ""Hearts"", ""Diamonds""};
		String[] Suit = {""2"",""3"",""5"",""5"",""A""};
		int n = Face.length;
		for(int i=0; i<n; i++){
			Card c = new Card(Suit[i], Face[i]);
			cards[i] = c;
		}
		
		System.out.println(""Original"");
		cards_print(cards);
		System.out.println(""Sorted"");
		Arrays.sort(cards);
		cards_print(cards);
		System.out.println(""Sorted"");
		Arrays.sort(cards, cards[0].SUIT_ORDER);
		cards_print(cards);
	}
}


@668f0f9f387b075a90649f82e8563ec0@"
"r04921028","0","0.64","110960","@92f611884b066fe4da77c48c58a05478@import java.util.Comparator;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author DANNY
 */



public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        int pf[];
        pf = new int[2];
        
        String hold[];
        hold = new String[2];
        
        hold[0] = this.getFace();
        hold[1] = that.getFace();
        
        for(int i=0;i<2;i++){
            if( hold[i]==""A"")
                pf[i] = 13;
            else if(hold[i]==""2"")
                pf[i] = 1;
            else if(hold[i]==""3"")
                pf[i] = 2;
            else if(hold[i]==""4"")
                pf[i] = 3;
            else if(hold[i]==""5"")
                pf[i] = 4;
            else if(hold[i]==""6"")
                pf[i] = 5;
            else if(hold[i]==""7"")
                pf[i] = 6;
            else if(hold[i]==""8"")
                pf[i] = 7;
            else if(hold[i]==""9"")
                pf[i] = 8;
            else if(hold[i]==""10"")
                pf[i] = 9;
            else if(hold[i]==""J"")
                pf[i] = 10;
            else if(hold[i]==""Q"")
                pf[i] = 11;
            else if(hold[i]==""K"")
                pf[i] = 12; 
        }
        if(pf[0]>pf[1])
                return 1;
        else if(pf[0]<pf[1])
                return -1; 
        else if(pf[0]==pf[1]&&Card.SUIT_ORDER.compare(this,that)==1)
                return 1; 
        else if(pf[0]==pf[1]&&Card.SUIT_ORDER.compare(this,that)==-1)
                return -1;
        else 
            return 0;
        // (you must consider both face and suit)
    }  
     

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
        int p[];
        p = new int[2];
        
        if(c1.getSuit()==""Spades"")
            p[0] = 4;
        else if(c1.getSuit()==""Hearts"")
            p[0] = 3;
        else if(c1.getSuit()==""Diamonds "")
            p[0] = 2;
        else if(c1.getSuit()==""Clubs"")
            p[0] = 1;
        
        if(c2.getSuit()==""Spades"")
            p[1] = 4;
        else if(c2.getSuit()==""Hearts"")
            p[1] = 3;
        else if(c2.getSuit()==""Diamonds "")
            p[1] = 2;
        else if(c2.getSuit()==""Clubs"")
            p[1] = 1;

        if(p[0]>p[1])
            return 1;
        else if(p[0]<p[1])
            return -1;
        else 
            return 0;
        }
    }   

}


   

@92f611884b066fe4da77c48c58a05478@"
"b02611026","0","0","0","@d605ff9e94ed3e87a37b5f4d5738d640@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        
        if (that.face == ""A"") {
            that.face = String.valueOf(14);
            //that_facenum = Integer.parseInt(that.face);
        }
        if (that.face == ""J"") {
            that.face = String.valueOf(11);
            //that_facenum = Integer.parseInt(that.face);
        }
        if (that.face == ""Q"") {
            that.face = String.valueOf(12);
            //that_facenum = Integer.parseInt(that.face);
        }
        if (that.face == ""K"") {
            that.face = String.valueOf(13);
            //that_facenum = Integer.parseInt(that.face);
        }
        if (this.face == ""A"") {
            this.face = String.valueOf(14);
            //this_facenum = Integer.parseInt(that.face);
        }
        if (this.face == ""J"") {
            this.face = String.valueOf(11);
            //this_facenum = Integer.parseInt(that.face);
        }
        if (this.face == ""Q"") {
            this.face = String.valueOf(12);
            //this_facenum = Integer.parseInt(that.face);
        }
        if (this.face == ""K"") {
            this.face = String.valueOf(13);
            //this_facenum = Integer.parseInt(that.face);
        }
        int that_facenum = Integer.parseInt(that.face);
        int this_facenum = Integer.parseInt(this.face);
        
//        System.out.println(""that.face : "" + that_facenum);
//        System.out.println(""this.face : "" + this_facenum);
        
        if (this_facenum < that_facenum) {
//            System.out.println("" < : "" + ""-1"");
            return -1;
        } else if (this_facenum > that_facenum) {
//            System.out.println("" > : "" + ""+1"");
            return +1;
        } else {
            if (SUIT_ORDER.compare(this, that) == 1) {
                return +1;
            } else if (SUIT_ORDER.compare(this, that) == -1) {
                return -1;
            } else {
                return 0;
            }
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)       
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            String[] suitsort = new String[4];
            suitsort[3] = ""Spades"";
            suitsort[2] = ""Hearts"";
            suitsort[1] = ""Diamonds"";
            suitsort[0] = ""Clubs"";

            int c1_tag = 0;
            int c2_tag = 0;
            
//            System.out.println(""c1.suit："" + c1.suit);
            
            for (int i = 0; i < 4; i++) {
                if (c1.suit.equals(suitsort[i])) {
//                    System.out.println(""suitsort："" + suitsort[i]);
                    c1_tag = i;
                    break;
                }
            }
//            System.out.println(""c1_tag : "" + c1_tag);
            
//            System.out.println(""c2.suit："" + c2.suit);
            for (int i = 0; i < 4; i++) {
                if (c2.suit.equals(suitsort[i])) {
//                    System.out.println(""suitsort："" + suitsort[i]);
                    c2_tag = i;
                    break;
                }
            }
//            System.out.println(""c2_tag : ""  + c2_tag);
            
            if (c1_tag > c2_tag) {
                return +1;
            } else if (c1_tag < c2_tag) {
                return -1;
            } else {
                return 0;
            }

            // complete this function so the Card can be sorted according to the suit
        }
    }
//    public static void main(String[] args) throws Exception{
//        Card[] test = new Card[2];
//        test[0] = new Card(""A"", ""Clubs"");
//        test[1] = new Card(""2"", ""Hearts"");
////        System.out.println(test[1].compareTo(test[0]));
////        System.out.println(Card.SUIT_ORDER.compare(test[1], test[0]));
//    }
}

@d605ff9e94ed3e87a37b5f4d5738d640@"
"b02611026","0","0.094","104624","@2e8324bed3a36434b2d46dd4ba33d0a4@


public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        
        if (that.face == ""A"") {
            that.face = String.valueOf(14);
            //that_facenum = Integer.parseInt(that.face);
        }
        if (that.face == ""J"") {
            that.face = String.valueOf(11);
            //that_facenum = Integer.parseInt(that.face);
        }
        if (that.face == ""Q"") {
            that.face = String.valueOf(12);
            //that_facenum = Integer.parseInt(that.face);
        }
        if (that.face == ""K"") {
            that.face = String.valueOf(13);
            //that_facenum = Integer.parseInt(that.face);
        }
        if (this.face == ""A"") {
            this.face = String.valueOf(14);
            //this_facenum = Integer.parseInt(that.face);
        }
        if (this.face == ""J"") {
            this.face = String.valueOf(11);
            //this_facenum = Integer.parseInt(that.face);
        }
        if (this.face == ""Q"") {
            this.face = String.valueOf(12);
            //this_facenum = Integer.parseInt(that.face);
        }
        if (this.face == ""K"") {
            this.face = String.valueOf(13);
            //this_facenum = Integer.parseInt(that.face);
        }
        int that_facenum = Integer.parseInt(that.face);
        int this_facenum = Integer.parseInt(this.face);
        
//        System.out.println(""that.face : "" + that_facenum);
//        System.out.println(""this.face : "" + this_facenum);
        
        if (this_facenum < that_facenum) {
//            System.out.println("" < : "" + ""-1"");
            return -1;
        } else if (this_facenum > that_facenum) {
//            System.out.println("" > : "" + ""+1"");
            return +1;
        } else {
            if (SUIT_ORDER.compare(this, that) == 1) {
                return +1;
            } else if (SUIT_ORDER.compare(this, that) == -1) {
                return -1;
            } else {
                return 0;
            }
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)       
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            String[] suitsort = new String[4];
            suitsort[3] = ""Spades"";
            suitsort[2] = ""Hearts"";
            suitsort[1] = ""Diamonds"";
            suitsort[0] = ""Clubs"";

            int c1_tag = 0;
            int c2_tag = 0;
            
//            System.out.println(""c1.suit："" + c1.suit);
            
            for (int i = 0; i < 4; i++) {
                if (c1.suit.equals(suitsort[i])) {
//                    System.out.println(""suitsort："" + suitsort[i]);
                    c1_tag = i;
                    break;
                }
            }
//            System.out.println(""c1_tag : "" + c1_tag);
            
//            System.out.println(""c2.suit："" + c2.suit);
            for (int i = 0; i < 4; i++) {
                if (c2.suit.equals(suitsort[i])) {
//                    System.out.println(""suitsort："" + suitsort[i]);
                    c2_tag = i;
                    break;
                }
            }
//            System.out.println(""c2_tag : ""  + c2_tag);
            
            if (c1_tag > c2_tag) {
                return +1;
            } else if (c1_tag < c2_tag) {
                return -1;
            } else {
                return 0;
            }

            // complete this function so the Card can be sorted according to the suit
        }
    }
//    public static void main(String[] args) throws Exception{
//        Card[] test = new Card[2];
//        test[0] = new Card(""A"", ""Clubs"");
//        test[1] = new Card(""2"", ""Hearts"");
////        System.out.println(test[1].compareTo(test[0]));
////        System.out.println(Card.SUIT_ORDER.compare(test[1], test[0]));
//    }
}

@2e8324bed3a36434b2d46dd4ba33d0a4@"
"b02611026","0","0","0","@d605ff9e94ed3e87a37b5f4d5738d640@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        
        if (that.face == ""A"") {
            that.face = String.valueOf(14);
            //that_facenum = Integer.parseInt(that.face);
        }
        if (that.face == ""J"") {
            that.face = String.valueOf(11);
            //that_facenum = Integer.parseInt(that.face);
        }
        if (that.face == ""Q"") {
            that.face = String.valueOf(12);
            //that_facenum = Integer.parseInt(that.face);
        }
        if (that.face == ""K"") {
            that.face = String.valueOf(13);
            //that_facenum = Integer.parseInt(that.face);
        }
        if (this.face == ""A"") {
            this.face = String.valueOf(14);
            //this_facenum = Integer.parseInt(that.face);
        }
        if (this.face == ""J"") {
            this.face = String.valueOf(11);
            //this_facenum = Integer.parseInt(that.face);
        }
        if (this.face == ""Q"") {
            this.face = String.valueOf(12);
            //this_facenum = Integer.parseInt(that.face);
        }
        if (this.face == ""K"") {
            this.face = String.valueOf(13);
            //this_facenum = Integer.parseInt(that.face);
        }
        int that_facenum = Integer.parseInt(that.face);
        int this_facenum = Integer.parseInt(this.face);
        
//        System.out.println(""that.face : "" + that_facenum);
//        System.out.println(""this.face : "" + this_facenum);
        
        if (this_facenum < that_facenum) {
//            System.out.println("" < : "" + ""-1"");
            return -1;
        } else if (this_facenum > that_facenum) {
//            System.out.println("" > : "" + ""+1"");
            return +1;
        } else {
            if (SUIT_ORDER.compare(this, that) == 1) {
                return +1;
            } else if (SUIT_ORDER.compare(this, that) == -1) {
                return -1;
            } else {
                return 0;
            }
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)       
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            String[] suitsort = new String[4];
            suitsort[3] = ""Spades"";
            suitsort[2] = ""Hearts"";
            suitsort[1] = ""Diamonds"";
            suitsort[0] = ""Clubs"";

            int c1_tag = 0;
            int c2_tag = 0;
            
//            System.out.println(""c1.suit："" + c1.suit);
            
            for (int i = 0; i < 4; i++) {
                if (c1.suit.equals(suitsort[i])) {
//                    System.out.println(""suitsort："" + suitsort[i]);
                    c1_tag = i;
                    break;
                }
            }
//            System.out.println(""c1_tag : "" + c1_tag);
            
//            System.out.println(""c2.suit："" + c2.suit);
            for (int i = 0; i < 4; i++) {
                if (c2.suit.equals(suitsort[i])) {
//                    System.out.println(""suitsort："" + suitsort[i]);
                    c2_tag = i;
                    break;
                }
            }
//            System.out.println(""c2_tag : ""  + c2_tag);
            
            if (c1_tag > c2_tag) {
                return +1;
            } else if (c1_tag < c2_tag) {
                return -1;
            } else {
                return 0;
            }

            // complete this function so the Card can be sorted according to the suit
        }
    }
//    public static void main(String[] args) throws Exception{
//        Card[] test = new Card[2];
//        test[0] = new Card(""A"", ""Clubs"");
//        test[1] = new Card(""2"", ""Hearts"");
////        System.out.println(test[1].compareTo(test[0]));
////        System.out.println(Card.SUIT_ORDER.compare(test[1], test[0]));
//    }
}

@d605ff9e94ed3e87a37b5f4d5738d640@"
"b03611011","5","0.136","111584","@161f736b00063333e7262e0a813bff85@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();
    public static final Comparator<Card> face_ORDER = new facesuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    @Override
    public int compareTo(Card that) {
        int i, o;
        switch (this.face) {
            case ""A"":
                i = 14;
                break;
            case ""J"":
                i = 11;
                break;
            case ""Q"":
                i = 12;
                break;
            case ""K"":
                i = 13;
                break;
            default:
                i = Integer.parseInt(this.face);
        }
        switch (that.face) {
            case ""A"":
                o = 14;
                break;
            case ""J"":
                o = 11;
                break;
            case ""Q"":
                o = 12;
                break;
            case ""K"":
                o = 13;
                break;
            default:
                o = Integer.parseInt(that.face);
        }
        if (i < o) {
            return -1;
        }
        if (i > o) {
            return 1;
        }
        switch (this.suit) {
            case ""Spades"":
                i = 4;
                break;
            case ""Hearts"":
                i = 3;
                break;
            case ""Diamonds"":
                i = 2;
                break;
            case ""Clubs"":
                i = 1;
                break;
            default:
                return 0;
        }
        switch (that.suit) {
            case ""Spades"":
                o = 4;
                break;
            case ""Hearts"":
                o = 3;
                break;
            case ""Diamonds"":
                o = 2;
                break;
            case ""Clubs"":
                o = 1;
                break;
            default:
                return 0;
        }
        if (i < o) {
            return -1;
        }
        if (i > o) {
            return 1;
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        @Override
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int i, j;
            switch (c1.suit) {
                case ""Spades"":
                    i = 4;
                    break;
                case ""Hearts"":
                    i = 3;
                    break;
                case ""Diamonds"":
                    i = 2;
                    break;
                case ""Clubs"":
                    i = 1;
                    break;
                default:
                    return 0;
            }
            switch (c2.suit) {
                case ""Spades"":
                    j = 4;
                    break;
                case ""Hearts"":
                    j = 3;
                    break;
                case ""Diamonds"":
                    j = 2;
                    break;
                case ""Clubs"":
                    j = 1;
                    break;
                default:
                    return 0;
            }
            if (i < j) {
                return -1;
            }
            if (i > j) {
                return 1;
            }
            return 0;
        }
    }

    private static class facesuitOrder implements Comparator<Card> {

        @Override
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            return c1.compareTo(c2);
        }

    }
}

@161f736b00063333e7262e0a813bff85@"
"r04921028","0","0.64","109488","@b78398664e353e1e1e0ef80521f249f1@
import java.util.Comparator;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author DANNY
 */



public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        int pf[];
        pf = new int[2];
        
        String hold[];
        hold = new String[2];
        
        hold[0] = this.getFace();
        hold[1] = that.getFace();
        
        for(int i=0;i<2;i++){
            if( hold[i]==""A"")
                pf[i] = 13;
            else if(hold[i]==""2"")
                pf[i] = 1;
            else if(hold[i]==""3"")
                pf[i] = 2;
            else if(hold[i]==""4"")
                pf[i] = 3;
            else if(hold[i]==""5"")
                pf[i] = 4;
            else if(hold[i]==""6"")
                pf[i] = 5;
            else if(hold[i]==""7"")
                pf[i] = 6;
            else if(hold[i]==""8"")
                pf[i] = 7;
            else if(hold[i]==""9"")
                pf[i] = 8;
            else if(hold[i]==""10"")
                pf[i] = 9;
            else if(hold[i]==""J"")
                pf[i] = 10;
            else if(hold[i]==""Q"")
                pf[i] = 11;
            else if(hold[i]==""K"")
                pf[i] = 12; 
        }
        if(pf[0]>pf[1])
                return 1;
        else if(pf[0]<pf[1])
                return -1; 
        else if(pf[0]==pf[1]&&Card.SUIT_ORDER.compare(this,that)==1)
                return 1; 
        else if(pf[0]==pf[1]&&Card.SUIT_ORDER.compare(this,that)==-1)
                return -1;
        else 
                return 0; 
        
        // (you must consider both face and suit)
    }  
     

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
        int p[];
        p = new int[2];
        
        if(c1.getSuit()==""Spades"")
            p[0] = 4;
        else if(c1.getSuit()==""Hearts"")
            p[0] = 3;
        else if(c1.getSuit()==""Diamonds"")
            p[0] = 2;
        else if(c1.getSuit()==""Clubs"")
            p[0] = 1;
        
        if(c2.getSuit()==""Spades"")
            p[1] = 4;
        else if(c2.getSuit()==""Hearts"")
            p[1] = 3;
        else if(c2.getSuit()==""Diamonds"")
            p[1] = 2;
        else if(c2.getSuit()==""Clubs"")
            p[1] = 1;

        if(p[0]>p[1])
            return 1;
        else if(p[0]<p[1])
            return -1;
        else 
            return 0;
        }
    }   

}


   

@b78398664e353e1e1e0ef80521f249f1@"
"r04921028","0","0.65","111088","@46a13d4156f96f7a34119327a75bff7d@import java.util.Comparator;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author DANNY
 */



public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        int pf[];
        pf = new int[2];
        
        String hold[];
        hold = new String[2];
        
        hold[0] = this.getFace();
        hold[1] = that.getFace();
        
        for(int i=0;i<2;i++){
            if( hold[i]==""A"")
                pf[i] = 13;
            else if(hold[i]==""2"")
                pf[i] = 1;
            else if(hold[i]==""3"")
                pf[i] = 2;
            else if(hold[i]==""4"")
                pf[i] = 3;
            else if(hold[i]==""5"")
                pf[i] = 4;
            else if(hold[i]==""6"")
                pf[i] = 5;
            else if(hold[i]==""7"")
                pf[i] = 6;
            else if(hold[i]==""8"")
                pf[i] = 7;
            else if(hold[i]==""9"")
                pf[i] = 8;
            else if(hold[i]==""10"")
                pf[i] = 9;
            else if(hold[i]==""J"")
                pf[i] = 10;
            else if(hold[i]==""Q"")
                pf[i] = 11;
            else if(hold[i]==""K"")
                pf[i] = 12; 
        }
        if(pf[0]>pf[1])
                return 1;
        else if(pf[0]<pf[1])
                return -1; 
        else if(pf[0]==pf[1]&&Card.SUIT_ORDER.compare(this,that)==1)
                return 1; 
        else if(pf[0]==pf[1]&&Card.SUIT_ORDER.compare(this,that)==-1)
                return -1;
        else 
                return 0; 
        
        // (you must consider both face and suit)
    }  
     

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
        int p[];
        p = new int[2];
        
        if(c1.getSuit()==""Spades"")
            p[0] = 4;
        else if(c1.getSuit()==""Hearts"")
            p[0] = 3;
        else if(c1.getSuit()==""Diamonds"")
            p[0] = 2;
        else if(c1.getSuit()==""Clubs"")
            p[0] = 1;
        
        if(c2.getSuit()==""Spades"")
            p[1] = 4;
        else if(c2.getSuit()==""Hearts"")
            p[1] = 3;
        else if(c2.getSuit()==""Diamonds"")
            p[1] = 2;
        else if(c2.getSuit()==""Clubs"")
            p[1] = 1;

        if(p[0]>p[1])
            return 1;
        else if(p[0]<p[1])
            return -1;
        else 
            return 0;
        }
    }   

}


   

@46a13d4156f96f7a34119327a75bff7d@"
"b03611041","0","0.66","110912","@6acac6379f9348ec1ef6eb0c0da7087a@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
    private String iFace1;
    private String iFace2;

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return Card.SUIT_ORDER.compare(this,that);
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            if(c1.face==""A"")c1.iFace1=""14"";
            else if(c1.face==""J"")c1.iFace1=""11"";
            else if (c1.face==""Q"")c1.iFace1=""12"";
            else if (c1.face==""K"")c1.iFace1=""13"";
            else c1.iFace1=c1.face;

            if(c2.face==""A"")c2.iFace1=""14"";
            else if(c2.face==""J"")c2.iFace1=""11"";
            else if (c2.face==""Q"")c2.iFace1=""12"";
            else if (c2.face==""K"")c2.iFace1=""13"";
            else c2.iFace1=c2.face;

            if(c1.face.compareTo(c2.face)>0){
                return 1;
            }else if(c1.face.compareTo(c2.face)==0){
                if(c1.suit.compareTo(c2.suit)>0){
                    return 1;
                }else if (c1.suit.compareTo(c2.suit)==0)return 0;
                else return -1;
            }else return -1;

            // complete this function so the Card can be sorted according to the suit
        }
    }   
}

@6acac6379f9348ec1ef6eb0c0da7087a@"
"r04921028","0","0.65","111104","@e33c1f7da7e44d4add5ab4b1f7ccaf4d@import java.util.Comparator;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author DANNY
 */



public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        int pf[];
        pf = new int[2];
        
        String hold[];
        hold = new String[2];
        
        hold[0] = this.getFace();
        hold[1] = that.getFace();
        
        for(int i=0;i<2;i++){
            if( hold[i]==""A"")
                pf[i] = 13;
            else if(hold[i]==""2"")
                pf[i] = 1;
            else if(hold[i]==""3"")
                pf[i] = 2;
            else if(hold[i]==""4"")
                pf[i] = 3;
            else if(hold[i]==""5"")
                pf[i] = 4;
            else if(hold[i]==""6"")
                pf[i] = 5;
            else if(hold[i]==""7"")
                pf[i] = 6;
            else if(hold[i]==""8"")
                pf[i] = 7;
            else if(hold[i]==""9"")
                pf[i] = 8;
            else if(hold[i]==""10"")
                pf[i] = 9;
            else if(hold[i]==""J"")
                pf[i] = 10;
            else if(hold[i]==""Q"")
                pf[i] = 11;
            else if(hold[i]==""K"")
                pf[i] = 12; 
        }
        
        if(pf[0]>pf[1])
                return 1;
        else if(pf[0]<pf[1])
                return -1; 
        else if(pf[0]==pf[1]&&Card.SUIT_ORDER.compare(this,that)==1)
                return 1; 
        else if(pf[0]==pf[1]&&Card.SUIT_ORDER.compare(this,that)==-1)
                return -1;
        else 
                return 0; 
        // (you must consider both face and suit)
    }  
     

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
        int pf1[];
        pf1 = new int[2];
        
        String hold1[];
        hold1 = new String[2];
        
        hold1[0] = c1.getSuit();
        hold1[1] = c2.getSuit();
        
        for(int i=0;i<2;i++){
            if(hold1[i]==""Spades"")
                pf1[i] = 4;
            else if(hold1[i]==""Hearts"")
                pf1[i] = 3;
            else if(hold1[i]==""Diamonds"")
                pf1[i] = 2;
            else if(hold1[i]==""Clubs"")
                pf1[i] = 1;
        }
        
        if(pf1[0]>pf1[1])
            return 1;
        else if(pf1[0]<pf1[1])
            return -1;
        else 
            return 0;
        }
    }   

}


   

@e33c1f7da7e44d4add5ab4b1f7ccaf4d@"
"b03611041","0","0.65","111200","@52b134f7cdff9106f344ad6f79c729d4@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return Card.SUIT_ORDER.compare(this,that);
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        private String iFace1;
        private String iFace2;
        public int compare(Card c1, Card c2) {
            if(c1.face==""A"")iFace1=""14"";
            else if(c1.face==""J"")iFace1=""11"";
            else if (c1.face==""Q"")iFace1=""12"";
            else if (c1.face==""K"")iFace1=""13"";
            else iFace1=c1.face;

            if(c2.face==""A"")iFace2=""14"";
            else if(c2.face==""J"")iFace2=""11"";
            else if (c2.face==""Q"")iFace2=""12"";
            else if (c2.face==""K"")iFace2=""13"";
            else iFace2=c2.face;

            if(iFace1.compareTo(iFace2)>0){
                return 1;
            }else if(iFace1.compareTo(iFace2)==0){
                if(c1.suit.compareTo(c2.suit)>0){
                    return 1;
                }else if (c1.suit.compareTo(c2.suit)==0)return 0;
                else return -1;
            }else return -1;

            // complete this function so the Card can be sorted according to the suit
        }
    }   
}

@52b134f7cdff9106f344ad6f79c729d4@"
"b03611041","0","0.65","111056","@9492768ff7da77a48af756ce21c7a2e4@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return Card.SUIT_ORDER.compare(this,that);
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        private String iFace1;
        private String iFace2;
        public int compare(Card c1, Card c2) {
            if(c1.face.equals(""A""))iFace1=""14"";
            else if(c1.face.equals(""J""))iFace1=""11"";
            else if (c1.face.equals(""Q""))iFace1=""12"";
            else if (c1.face.equals(""K""))iFace1=""13"";
            else iFace1=c1.face;

            if(c2.face.equals(""A""))iFace2=""14"";
            else if(c2.face.equals(""J""))iFace2=""11"";
            else if (c2.face.equals(""Q""))iFace2=""12"";
            else if (c2.face.equals(""K""))iFace2=""13"";
            else iFace2=c2.face;

            if(iFace1.compareTo(iFace2)>0){
                return 1;
            }else if(iFace1.compareTo(iFace2)==0){
                if(c1.suit.compareTo(c2.suit)>0){
                    return 1;
                }else if (c1.suit.compareTo(c2.suit)==0)return 0;
                else return -1;
            }else return -1;

            // complete this function so the Card can be sorted according to the suit
        }
    }   
}

@9492768ff7da77a48af756ce21c7a2e4@"
"b03611041","0","0.67","111232","@6e767ae6814d05b14b620cb6dddffc45@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return Card.SUIT_ORDER.compare(this,that);
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        private int iFace1;
        private int iFace2;
        public int compare(Card c1, Card c2) {
            if(c1.face.equals(""A""))iFace1=14;
            else if(c1.face.equals(""J""))iFace1=11;
            else if (c1.face.equals(""Q""))iFace1=12;
            else if (c1.face.equals(""K""))iFace1=13;
            else iFace1=Integer.parseInt(c1.face);

            if(c2.face.equals(""A""))iFace2=14;
            else if(c2.face.equals(""J""))iFace2=11;
            else if (c2.face.equals(""Q""))iFace2=12;
            else if (c2.face.equals(""K""))iFace2=13;
            else iFace2=Integer.parseInt(c2.face);

            if(iFace1>iFace2){
                return 1;
            }else if(iFace1==iFace2){
                if(c1.suit.compareTo(c2.suit)>0){
                    return 1;
                }else if (c1.suit.compareTo(c2.suit)==0){
                    return 0;
                }
                else{
                    return -1;
                }
            }else {
                return -1;
            }

            // complete this function so the Card can be sorted according to the suit
        }
    }   
}

@6e767ae6814d05b14b620cb6dddffc45@"
"b03611041","0","0.65","110944","@6e767ae6814d05b14b620cb6dddffc45@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return Card.SUIT_ORDER.compare(this,that);
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        private int iFace1;
        private int iFace2;
        public int compare(Card c1, Card c2) {
            if(c1.face.equals(""A""))iFace1=14;
            else if(c1.face.equals(""J""))iFace1=11;
            else if (c1.face.equals(""Q""))iFace1=12;
            else if (c1.face.equals(""K""))iFace1=13;
            else iFace1=Integer.parseInt(c1.face);

            if(c2.face.equals(""A""))iFace2=14;
            else if(c2.face.equals(""J""))iFace2=11;
            else if (c2.face.equals(""Q""))iFace2=12;
            else if (c2.face.equals(""K""))iFace2=13;
            else iFace2=Integer.parseInt(c2.face);

            if(iFace1>iFace2){
                return 1;
            }else if(iFace1==iFace2){
                if(c1.suit.compareTo(c2.suit)>0){
                    return 1;
                }else if (c1.suit.compareTo(c2.suit)==0){
                    return 0;
                }
                else{
                    return -1;
                }
            }else {
                return -1;
            }

            // complete this function so the Card can be sorted according to the suit
        }
    }   
}

@6e767ae6814d05b14b620cb6dddffc45@"
"b02611012","5","0.132","111024","@b19caff6825eda58e19d060556a85d7c@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thisf = 0;
        int thiss = 0;
        int thatf = 0;
        int thats = 0;
        if (this.face.equals(""A"") ) {
            thisf = 14;
        } else if (this.face.equals(""J"")) {
            thisf = 11;
        } else if (this.face.equals(""Q"")) {
            thisf = 12;
        } else if (this.face.equals(""K"")) {
            thisf = 13;
        } else {
            thisf = Integer.parseInt(this.face);
        }
        if (that.face.equals(""A"")) {
            thatf = 14;
        } else if (that.face.equals(""J"")) {
            thatf = 11;
        } else if (that.face.equals(""Q"")) {
            thatf = 12;
        } else if (that.face.equals(""K"")) {
            thatf = 13;
        } else {
            thatf = Integer.parseInt(that.face);
        }
        if (this.suit.equals(""Spades"")) {
            thiss = 4;
        } else if (this.suit.equals(""Hearts"")) {
            thiss = 3;
        } else if (this.suit.equals(""Diamonds"")) {
            thiss = 2;
        } else if (this.suit.equals(""Clubs"")) {
            thiss = 1;
        }
        if (that.suit.equals(""Spades"")) {
            thats = 4;
        } else if (that.suit.equals(""Hearts"")) {
            thats = 3;
        } else if (that.suit.equals(""Diamonds"")) {
            thats = 2;
        } else if (that.suit.equals(""Clubs"")) {
            thats = 1;
        }

        if (thisf < thatf) {
            return -1;
        }
        if (thisf > thatf) {
            return +1;
        }
        if (thiss < thats) {
            return -1;
        }
        if (thiss > thats) {
            return +1;
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
//            int thiss = 0;
//            int thats = 0;
//            if (c1.getSuit().equals(""Spades"")) {
//                thiss = 4;
//            } else if (c1.getSuit().equals(""Hearts"")) {
//                thiss = 3;
//            } else if (c1.getSuit().equals(""Diamonds"")) {
//                thiss = 2;
//            } else if (c1.getSuit().equals(""Clubs"")) {
//                thiss = 1;
//            }
//            if (c2.getSuit().equals(""Spades"")) {
//                thats = 4;
//            } else if (c2.getSuit().equals(""Hearts"")) {
//                thats = 3;
//            } else if (c2.getSuit().equals(""Diamonds"")) {
//                thats = 2;
//            } else if (c2.getSuit().equals(""Clubs"")) {
//                thats = 1;
//            }
            if (c1.getSuit().compareTo(c2.getSuit()) > 0) {
                return +1;
            }
            if (c1.getSuit().compareTo(c2.getSuit()) < 0) {
                return -1;
            }
            return 0;
        }
    }
//    public static void main(String[] args) {
//        Card[] test = new Card[2];
//        test[0] = new Card(""A"",""Clubs"");
//        test[1] = new Card(""K"",""Hearts"");
//        System.out.println(test[1].compareTo(test[0]));
//        System.out.println(Card.SUIT_ORDER.compare(test[1], test[0]));
//    }
}

@b19caff6825eda58e19d060556a85d7c@"
"r04921028","5","0.13","110896","@d670e53c8529d075663556a06e8cfbb2@import java.util.Comparator;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author DANNY
 */



public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        int pf[];
        pf = new int[2];
        
        String hold[];
        hold = new String[2];
        
        hold[0] = this.getFace();
        hold[1] = that.getFace();
        
        for(int i=0;i<2;i++){
            
            if(hold[i].equals(""2""))
                pf[i] = 1;
            else if(hold[i].equals(""3""))
                pf[i] = 2;
            else if(hold[i].equals(""4""))
                pf[i] = 3;
            else if(hold[i].equals(""5""))
                pf[i] = 4;
            else if(hold[i].equals(""6""))
                pf[i] = 5;
            else if(hold[i].equals(""7""))
                pf[i] = 6;
            else if(hold[i].equals(""8""))
                pf[i] = 7;
            else if(hold[i].equals(""9""))
                pf[i] = 8;
            else if(hold[i].equals(""10""))
                pf[i] = 9;
            else if(hold[i].equals(""J""))
                pf[i] = 10;
            else if(hold[i].equals(""Q""))
                pf[i] = 11;
            else if(hold[i].equals(""K""))
                pf[i] = 12; 
            else if(hold[i].equals(""A""))
                pf[i] = 13; 
        }
        
        if(pf[0]>pf[1])
                return 1;
        else if(pf[0]<pf[1])
                return -1; 
        else if(pf[0]==pf[1]&&Card.SUIT_ORDER.compare(this,that)==1)
                return 1; 
        else if(pf[0]==pf[1]&&Card.SUIT_ORDER.compare(this,that)==-1)
                return -1;
        else 
                return 0; 
        // (you must consider both face and suit)
    }  
     

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
        int pf1[];
        pf1 = new int[2];
        
        String hold1[];
        hold1 = new String[2];
        
        hold1[0] = c1.getSuit();
        hold1[1] = c2.getSuit();
        
        for(int i=0;i<2;i++){
            if(hold1[i].equals(""Spades""))
                pf1[i] = 4;
            else if(hold1[i].equals(""Hearts""))
                pf1[i] = 3;
            else if(hold1[i].equals(""Diamonds""))
                pf1[i] = 2;
            else if(hold1[i].equals(""Clubs""))
                pf1[i] = 1;
        }
        
        if(pf1[0]>pf1[1])
            return 1;
        else if(pf1[0]<pf1[1])
            return -1;
        else 
            return 0;
        }
    }   

}


   

@d670e53c8529d075663556a06e8cfbb2@"
"r04631036","0","0.66","111088","@04ef8cf640bb318eddbda33868f3bfa3@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        if(getfacerank(this)<getfacerank(that))
            return 1;
        if(getfacerank(this)>getfacerank(that))
            return -1;
        if(getfacerank(this)==getfacerank(that)){
            if(getsuitrank(this)>getsuitrank(that))
                return -1;
            else if(getsuitrank(that)>getsuitrank(this))
                return 1;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return 0;
    }
    private int getsuitrank(Card c){
        if(c.getSuit()==""Spades"")
            return 1;
        if(c.getSuit()==""Hearts"")
            return 2;
        if(c.getSuit()==""Diamonds"")
            return 3;
        if(c.getSuit()==""Clubs"")
            return 4;
        return 0;
    }
    private int getfacerank(Card c){
        if(c.getFace()==""A"")
            return 1;
        if(c.getFace()==""K"")
            return 2;
        if(c.getFace()==""Q"")
            return 3;
        if(c.getFace()==""J"")
            return 4;
        if(c.getFace()==""10"")
            return 5;
        if(c.getFace()==""9"")
            return 6;
        if(c.getFace()==""8"")
            return 7;
        if(c.getFace()==""7"")
            return 8;
        if(c.getFace()==""6"")
            return 9;
        if(c.getFace()==""5"")
            return 10;
        if(c.getFace()==""4"")
            return 11;
        if(c.getFace()==""3"")
            return 12;
        if(c.getFace()==""2"")
            return 13;
        
        return 0;
    }
    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            if(c1.getSuit()==c2.getSuit())
                return 0;
            else if(c1.getSuit()==""Spades""&&c1.getFace()!=c2.getSuit())
                return 1;
            else if(c1.getSuit()==""Clubs""&&c1.getSuit()!=c2.getSuit())
                return -1;
            else if(c1.getSuit()==""Hearts""&&(c2.getSuit()==""Diamonds""||c2.getSuit()==""clubs""))
                return 1;
            else if(c1.getSuit()==""Diamonds""&&c2.getSuit()==""Clubs"")
                return 1;
            else if(c1.getSuit()==""Hearts""&&c2.getSuit()==""Spades"")
                return -1;
            else if(c1.getSuit()==""Diamonds""&&(c2.getSuit()==""Spades""||c2.getSuit()==""Hearts""))
                return -1;
            // complete this function so the Card can be sorted according to the suit
           return 0;
        }
    }   
}


@04ef8cf640bb318eddbda33868f3bfa3@"
"b03704074","5","0.134","110912","@0b0a1bb6a7a8ee87639503aad4db53f2@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int c1face=-1;//隨便給個初始值而已
        int c2face=-1;
        if(this.face.equals(""A""))      c1face = 14;
        else if(this.face.equals(""K"")) c1face = 13;
        else if(this.face.equals(""Q"")) c1face = 12;
        else if(this.face.equals(""J"")) c1face = 11;
        else if(this.face.equals(""10""))c1face = 10;
        else if(this.face.equals(""9"")) c1face = 9;
        else if(this.face.equals(""8"")) c1face = 8;
        else if(this.face.equals(""7"")) c1face = 7;
        else if(this.face.equals(""6"")) c1face = 6;
        else if(this.face.equals(""5"")) c1face = 5;
        else if(this.face.equals(""4"")) c1face = 4;
        else if(this.face.equals(""3"")) c1face = 3;
        else if(this.face.equals(""2"")) c1face = 2;
        if(that.face.equals(""A""))      c2face = 14;
        else if(that.face.equals(""K"")) c2face = 13;
        else if(that.face.equals(""Q"")) c2face = 12;
        else if(that.face.equals(""J"")) c2face = 11;
        else if(that.face.equals(""10""))c2face = 10;
        else if(that.face.equals(""9"")) c2face = 9;
        else if(that.face.equals(""8"")) c2face = 8;
        else if(that.face.equals(""7"")) c2face = 7;
        else if(that.face.equals(""6"")) c2face = 6;
        else if(that.face.equals(""5"")) c2face = 5;
        else if(that.face.equals(""4"")) c2face = 4;
        else if(that.face.equals(""3"")) c2face = 3;
        else if(that.face.equals(""2"")) c2face = 2;
        if(c1face<c2face)return -1;
        if(c1face>c2face)return +1;
        //c1face == c2face點數一樣的情況
        return this.suit.compareTo(that.suit);        
        
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            String c1suit = ((Card)c1).getSuit();
            String c2suit = ((Card)c2).getSuit();
            return c1suit.compareTo(c2suit);//依照花色排序
        }
    }   
    
    public static void main(String[] args){
        Card[] test = new Card[2];
        test[0] = new Card(""A"",""Clubs"");
        test[1] = new Card(""2"",""Hearts"");
        System.out.println(test[1].compareTo(test[0]));
        System.out.println(Card.SUIT_ORDER.compare(test[1], test[0]));
        
        
        
}
}

@0b0a1bb6a7a8ee87639503aad4db53f2@"
"r04631036","0","0.66","110576","@4ba6ace83a791ea9395d62d17a221b0c@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        if(getfacerank(this)<getfacerank(that))
            return 1;
        if(getfacerank(this)>getfacerank(that))
            return -1;
        
        if(getfacerank(this)==getfacerank(that))
        {
            if(getsuitrank(this)>getsuitrank(that))
                return -1;
            else if(getsuitrank(that)>getsuitrank(this))
                return 1;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return 0;
    }
    private int getsuitrank(Card c){
        if(c.getSuit()==""Spades"")
            return 1;
        else if(c.getSuit()==""Hearts"")
            return 2;
        else if(c.getSuit()==""Diamonds"")
            return 3;
        else if(c.getSuit()==""Clubs"")
            return 4;
        return 0;
    }
    private int getfacerank(Card c){
        if(c.getFace()==""A"")
            return 1;
        if(c.getFace()==""K"")
            return 2;
        if(c.getFace()==""Q"")
            return 3;
        if(c.getFace()==""J"")
            return 4;
        if(c.getFace()==""10"")
            return 5;
        if(c.getFace()==""9"")
            return 6;
        if(c.getFace()==""8"")
            return 7;
        if(c.getFace()==""7"")
            return 8;
        if(c.getFace()==""6"")
            return 9;
        if(c.getFace()==""5"")
            return 10;
        if(c.getFace()==""4"")
            return 11;
        if(c.getFace()==""3"")
            return 12;
        if(c.getFace()==""2"")
            return 13;
        
        return 0;
    }
    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            if(c1.getSuit()==c2.getSuit())
                return 0;
            else if(c1.getSuit()==""Spades""&&c1.getFace()!=c2.getSuit())
                return 1;
            else if(c1.getSuit()==""Clubs""&&c1.getSuit()!=c2.getSuit())
                return -1;
            else if(c1.getSuit()==""Hearts""&&(c2.getSuit()==""Diamonds""||c2.getSuit()==""clubs""))
                return 1;
            else if(c1.getSuit()==""Diamonds""&&c2.getSuit()==""Clubs"")
                return 1;
            else if(c1.getSuit()==""Hearts""&&c2.getSuit()==""Spades"")
                return -1;
            else if(c1.getSuit()==""Diamonds""&&(c2.getSuit()==""Spades""||c2.getSuit()==""Hearts""))
                return -1;
            // complete this function so the Card can be sorted according to the suit
           return 0;
        }
    }   
}


@4ba6ace83a791ea9395d62d17a221b0c@"
"r04631036","0","0.67","109088","@a2d09fbcb0e1de44c575ad489ca29b8f@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        if(getfacerank(this)<getfacerank(that))
            return 1;
        if(getfacerank(this)>getfacerank(that))
            return -1;
        
        if(getfacerank(this)==getfacerank(that))
        {
            if(getsuitrank(this)<getsuitrank(that))
                return 1;
            else
                return -1;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return 0;
    }
    private int getsuitrank(Card c){
        if(c.getSuit()==""Spades"")
            return 1;
        else if(c.getSuit()==""Hearts"")
            return 2;
        else if(c.getSuit()==""Diamonds"")
            return 3;
        else if(c.getSuit()==""Clubs"")
            return 4;
        return 0;
    }
    private int getfacerank(Card c){
        if(c.getFace()==""A"")
            return 1;
        if(c.getFace()==""K"")
            return 2;
        if(c.getFace()==""Q"")
            return 3;
        if(c.getFace()==""J"")
            return 4;
        if(c.getFace()==""10"")
            return 5;
        if(c.getFace()==""9"")
            return 6;
        if(c.getFace()==""8"")
            return 7;
        if(c.getFace()==""7"")
            return 8;
        if(c.getFace()==""6"")
            return 9;
        if(c.getFace()==""5"")
            return 10;
        if(c.getFace()==""4"")
            return 11;
        if(c.getFace()==""3"")
            return 12;
        if(c.getFace()==""2"")
            return 13;
        
        return 0;
    }
    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            if(c1.getSuit()==c2.getSuit())
                return 0;
            else if(c1.getSuit()==""Spades""&&c1.getFace()!=c2.getSuit())
                return 1;
            else if(c1.getSuit()==""Clubs""&&c1.getSuit()!=c2.getSuit())
                return -1;
            else if(c1.getSuit()==""Hearts""&&(c2.getSuit()==""Diamonds""||c2.getSuit()==""Clubs""))
                return 1;
            else if(c1.getSuit()==""Diamonds""&&c2.getSuit()==""Clubs"")
                return 1;
            else if(c1.getSuit()==""Hearts""&&c2.getSuit()==""Spades"")
                return -1;
            else if(c1.getSuit()==""Diamonds""&&(c2.getSuit()==""Spades""||c2.getSuit()==""Hearts""))
                return -1;
            // complete this function so the Card can be sorted according to the suit
           return 0;
        }
    }   
}


@a2d09fbcb0e1de44c575ad489ca29b8f@"
"r04631036","0","0.64","110960","@02cbaa905d126d2443295c83c2170dfb@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        if(getfacerank(this)<getfacerank(that))
            return 1;
        else if(getfacerank(this)>getfacerank(that))
            return -1;
        
        else if(getfacerank(this)==getfacerank(that))
        {
            if(getsuitrank(this)<getsuitrank(that))
                return 1;
            else
                return -1;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return 0;
    }
    private int getsuitrank(Card c){
        if(c.getSuit()==""Spades"")
            return 1;
        else if(c.getSuit()==""Hearts"")
            return 2;
        else if(c.getSuit()==""Diamonds"")
            return 3;
        else if(c.getSuit()==""Clubs"")
            return 4;
        
        
        
        return 0;
    }
    private int getfacerank(Card c){
        if(c.getFace()==""A"")
            return 1;
        if(c.getFace()==""K"")
            return 2;
        if(c.getFace()==""Q"")
            return 3;
        if(c.getFace()==""J"")
            return 4;
        if(c.getFace()==""10"")
            return 5;
        if(c.getFace()==""9"")
            return 6;
        if(c.getFace()==""8"")
            return 7;
        if(c.getFace()==""7"")
            return 8;
        if(c.getFace()==""6"")
            return 9;
        if(c.getFace()==""5"")
            return 10;
        if(c.getFace()==""4"")
            return 11;
        if(c.getFace()==""3"")
            return 12;
        if(c.getFace()==""2"")
            return 13;
        
        return 0;
    }
    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            if(c1.getSuit()==c2.getSuit())
                return 0;
            else if(c1.getSuit()==""Spades""&&c1.getSuit()!=c2.getSuit())
                return 1;
            else if(c1.getSuit()==""Clubs""&&c1.getSuit()!=c2.getSuit())
                return -1;
            else if(c1.getSuit()==""Hearts""&&(c2.getSuit()==""Diamonds""||c2.getSuit()==""Clubs""))
                return 1;
            else if(c1.getSuit()==""Diamonds""&&c2.getSuit()==""Clubs"")
                return 1;
            else if(c1.getSuit()==""Hearts""&&c2.getSuit()==""Spades"")
                return -1;
            else if(c1.getSuit()==""Diamonds""&&(c2.getSuit()==""Spades""||c2.getSuit()==""Hearts""))
                return -1;
            // complete this function so the Card can be sorted according to the suit
           return 0;
        }
    }   
}


@02cbaa905d126d2443295c83c2170dfb@"
"r04631036","0","0.66","110960","@d80180256a4568bd227880dd303b5817@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        if(this.getfacerank(this)<that.getfacerank(that))
            return 1;
        else if(this.getfacerank(this)>that.getfacerank(that))
            return -1;
        
        else if(this.getfacerank(this)==that.getfacerank(that))
        {
            if(this.getsuitrank(this)<that.getsuitrank(that))
                return 1;
            else
                return -1;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return 0;
    }
    private int getsuitrank(Card c){
        if(c.getSuit()==""Spades"")
            return 1;
        else if(c.getSuit()==""Hearts"")
            return 2;
        else if(c.getSuit()==""Diamonds"")
            return 3;
        else if(c.getSuit()==""Clubs"")
            return 4;
        
        
        
        return 0;
    }
    private int getfacerank(Card c){
        if(c.getFace()==""A"")
            return 1;
        else if(c.getFace()==""K"")
            return 2;
        else if(c.getFace()==""Q"")
            return 3;
        else if(c.getFace()==""J"")
            return 4;
        else if(c.getFace()==""10"")
            return 5;
        else if(c.getFace()==""9"")
            return 6;
        else if(c.getFace()==""8"")
            return 7;
        else if(c.getFace()==""7"")
            return 8;
        else if(c.getFace()==""6"")
            return 9;
        else if(c.getFace()==""5"")
            return 10;
        else if(c.getFace()==""4"")
            return 11;
        else if(c.getFace()==""3"")
            return 12;
        else if(c.getFace()==""2"")
            return 13;
        
        return 0;
    }
    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            if(c1.getSuit()==c2.getSuit())
                return 0;
            else if(c1.getSuit()==""Spades""&&c1.getSuit()!=c2.getSuit())
                return 1;
            else if(c1.getSuit()==""Clubs""&&c1.getSuit()!=c2.getSuit())
                return -1;
            else if(c1.getSuit()==""Hearts""&&(c2.getSuit()==""Diamonds""||c2.getSuit()==""Clubs""))
                return 1;
            else if(c1.getSuit()==""Diamonds""&&c2.getSuit()==""Clubs"")
                return 1;
            else if(c1.getSuit()==""Hearts""&&c2.getSuit()==""Spades"")
                return -1;
            else if(c1.getSuit()==""Diamonds""&&(c2.getSuit()==""Spades""||c2.getSuit()==""Hearts""))
                return -1;
            // complete this function so the Card can be sorted according to the suit
           return 0;
        }
    }   
}


@d80180256a4568bd227880dd303b5817@"
"r04631036","5","0.13","113584","@fa39142d2f32813f5855683e3600ba2d@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        if(this.getfacerank(this)<that.getfacerank(that))
            return 1;
        else if(this.getfacerank(this)>that.getfacerank(that))
            return -1;
        
        else if(this.getfacerank(this)==that.getfacerank(that))
        {
            if(this.getsuitrank(this)<that.getsuitrank(that))
                return 1;
            else
                return -1;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return 0;
    }
    private int getsuitrank(Card c){
        if(c.getSuit().equalsIgnoreCase(""Spades""))
            return 1;
        else if(c.getSuit().equalsIgnoreCase(""Hearts""))
            return 2;
        else if(c.getSuit().equalsIgnoreCase(""Diamonds""))
            return 3;
        else if(c.getSuit().equalsIgnoreCase(""Clubs""))
            return 4;
        
        
        
        return 0;
    }
    private int getfacerank(Card c){
        if(c.getFace().equalsIgnoreCase(""A""))
            return 1;
        else if(c.getFace().equalsIgnoreCase(""K""))
            return 2;
        else if(c.getFace().equalsIgnoreCase(""Q""))
            return 3;
        else if(c.getFace().equalsIgnoreCase(""J""))
            return 4;
        else if(c.getFace().equalsIgnoreCase(""10""))
            return 5;
        else if(c.getFace().equalsIgnoreCase(""9""))
            return 6;
        else if(c.getFace().equalsIgnoreCase(""8""))
            return 7;
        else if(c.getFace().equalsIgnoreCase(""7""))
            return 8;
        else if(c.getFace().equalsIgnoreCase(""6""))
            return 9;
        else if(c.getFace().equalsIgnoreCase(""5""))
            return 10;
        else if(c.getFace().equalsIgnoreCase(""4""))
            return 11;
        else if(c.getFace().equalsIgnoreCase(""3""))
            return 12;
        else if(c.getFace().equalsIgnoreCase(""2""))
            return 13;
        
        return 0;
    }
    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            if(c1.getSuit().equalsIgnoreCase(c2.getSuit()))
                return 0;
            else if(c1.getSuit().equalsIgnoreCase(""Spades"")&&!c1.getSuit().equalsIgnoreCase(c2.getSuit()))
                return 1;
            else if(c1.getSuit().equalsIgnoreCase(""Clubs"")&&!c1.getSuit().equalsIgnoreCase(c2.getSuit()))
                return -1;
            else if(c1.getSuit().equalsIgnoreCase(""Hearts"")&&(c2.getSuit().equalsIgnoreCase(""Diamonds"")||c2.getSuit().equalsIgnoreCase(""Clubs"")))
                return 1;
            else if(c1.getSuit().equalsIgnoreCase(""Hearts"")&&c2.getSuit().equalsIgnoreCase(""Spades""))
                return -1;
            else if(c1.getSuit().equalsIgnoreCase(""Diamonds"")&&c2.getSuit().equalsIgnoreCase(""Clubs""))
                return 1;
            else if(c1.getSuit().equalsIgnoreCase(""Diamonds"")&&(c2.getSuit().equalsIgnoreCase(""Spades"")||c2.getSuit().equalsIgnoreCase(""Hearts"")))
                return -1;
            // complete this function so the Card can be sorted according to the suit
           return 0;
        }
    }   
}


@fa39142d2f32813f5855683e3600ba2d@"
"f02631008","0","0","0","@7a8d0739211d653ea468648d3719630d@public class Card {
    
	private final String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private final String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        Integer[] A_face = new Integer[1] ;
        Integer[] B_face = new Integer[1] ;
        if(this.getFace().equalsIgnoreCase(""A""))
            A_face[0] = 14 ;
        else if(this.getFace().equalsIgnoreCase(""K""))
            A_face[0] = 13 ;
        else if(this.getFace().equalsIgnoreCase(""Q""))
            A_face[0] = 12 ;
        else if(this.getFace().equalsIgnoreCase(""J""))
            A_face[0] = 11 ;
        else 
            A_face[0] = Integer.parseInt(this.getFace());
        
        if(that.getFace().equalsIgnoreCase(""A""))
            B_face[0] = 14 ;
        else if(that.getFace().equalsIgnoreCase(""K""))
            B_face[0] = 13 ;
        else if(that.getFace().equalsIgnoreCase(""Q""))
            B_face[0] = 12 ;
        else if(that.getFace().equalsIgnoreCase(""J""))
            B_face[0] = 11 ;
        else
            B_face[0] = Integer.parseInt(that.getFace());
        
        if(A_face[0] > B_face[0])
            return +1 ;
        else if(A_face[0] < B_face[0])
            return -1 ;
        
        else if(Objects.equals(A_face[0], B_face[0])){
        if(SUIT_ORDER.compare(this,that) == -1)
           return -1 ;
        else if(SUIT_ORDER.compare(this, that) == 1)
           return +1 ;
        else 
           return 0;
        }
           return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            String a = c1.getSuit();
            String b = c2.getSuit();
            if (a.equalsIgnoreCase(""Spades"")){
               if(b.equalsIgnoreCase(""Spades""))
                   return 0 ;
               else if(b.equalsIgnoreCase(""Hearts""))
                   return +1 ;
               else if(b.equalsIgnoreCase(""Diamonds""))
                   return +1 ;
               else if(b.equalsIgnoreCase(""Clubs""))
                   return +1 ;
             }
            else if (a.equalsIgnoreCase(""Hearts"")){
                if(b.equalsIgnoreCase(""Spades""))
                    return -1 ;
                else if(b.equalsIgnoreCase(""Hearts""))
                    return 0;
                else if(b.equalsIgnoreCase(""Diamonds""))
                    return +1;
                else if(b.equalsIgnoreCase(""Clubs""))
                    return +1;                
            }
            else if(a.equalsIgnoreCase(""Diamonds"")){
                if (b.equalsIgnoreCase(""Spades""))
                    return -1;
                else if(b.equalsIgnoreCase(""Hearts""))
                    return -1;
                else if(b.equalsIgnoreCase(""Diamonds""))
                    return 0;
                else if(b.equalsIgnoreCase(""Clubs""))
                    return +1;
            }
            else if(a.equalsIgnoreCase(""Clubs"")){
                if (b.equalsIgnoreCase(""Spades""))
                    return -1;
                else if(b.equalsIgnoreCase(""Hearts""))
                    return -1;
                else if(b.equalsIgnoreCase(""Diamonds""))
                    return -1;
                else if(b.equalsIgnoreCase(""Clubs""))
                    return 0;
            }
            return 0;
        }
    }   

    /*public static void main(String[] args) {
        Card[] test = new Card[2];
        test[0] = new Card(""10"",""Diamonds"") ;
        test[1] = new Card(""10"",""Hearts"") ;
        System.out.println(test[1].compareTo(test[0]));
        System.out.println(SUIT_ORDER.compare(test[1],test[0]));
    }*/
    
}

@7a8d0739211d653ea468648d3719630d@"
"f02631008","0","0","0","@8e1d0547899888721df219643447582f@public class Card {
    
	private final String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private final String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        Integer[] A_face = new Integer[1] ;
        Integer[] B_face = new Integer[1] ;
        if(this.getFace().equalsIgnoreCase(""A""))
            A_face[0] = 14 ;
        else if(this.getFace().equalsIgnoreCase(""K""))
            A_face[0] = 13 ;
        else if(this.getFace().equalsIgnoreCase(""Q""))
            A_face[0] = 12 ;
        else if(this.getFace().equalsIgnoreCase(""J""))
            A_face[0] = 11 ;
        else 
            A_face[0] = Integer.parseInt(this.getFace());
        
        if(that.getFace().equalsIgnoreCase(""A""))
            B_face[0] = 14 ;
        else if(that.getFace().equalsIgnoreCase(""K""))
            B_face[0] = 13 ;
        else if(that.getFace().equalsIgnoreCase(""Q""))
            B_face[0] = 12 ;
        else if(that.getFace().equalsIgnoreCase(""J""))
            B_face[0] = 11 ;
        else
            B_face[0] = Integer.parseInt(that.getFace());
        
        if(A_face[0] > B_face[0])
            return +1 ;
        else if(A_face[0] < B_face[0])
            return -1 ;
        
        else if(Objects.equals(A_face[0], B_face[0])){
        if(SUIT_ORDER.compare(this,that) == -1)
           return -1 ;
        else if(SUIT_ORDER.compare(this, that) == 1)
           return +1 ;
        else 
           return 0;
        }
           return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            String a = c1.getSuit();
            String b = c2.getSuit();
            if (a.equalsIgnoreCase(""Spades"")){
               if(b.equalsIgnoreCase(""Spades""))
                   return 0 ;
               else if(b.equalsIgnoreCase(""Hearts""))
                   return +1 ;
               else if(b.equalsIgnoreCase(""Diamonds""))
                   return +1 ;
               else if(b.equalsIgnoreCase(""Clubs""))
                   return +1 ;
             }
            else if (a.equalsIgnoreCase(""Hearts"")){
                if(b.equalsIgnoreCase(""Spades""))
                    return -1 ;
                else if(b.equalsIgnoreCase(""Hearts""))
                    return 0;
                else if(b.equalsIgnoreCase(""Diamonds""))
                    return +1;
                else if(b.equalsIgnoreCase(""Clubs""))
                    return +1;                
            }
            else if(a.equalsIgnoreCase(""Diamonds"")){
                if (b.equalsIgnoreCase(""Spades""))
                    return -1;
                else if(b.equalsIgnoreCase(""Hearts""))
                    return -1;
                else if(b.equalsIgnoreCase(""Diamonds""))
                    return 0;
                else if(b.equalsIgnoreCase(""Clubs""))
                    return +1;
            }
            else if(a.equalsIgnoreCase(""Clubs"")){
                if (b.equalsIgnoreCase(""Spades""))
                    return -1;
                else if(b.equalsIgnoreCase(""Hearts""))
                    return -1;
                else if(b.equalsIgnoreCase(""Diamonds""))
                    return -1;
                else if(b.equalsIgnoreCase(""Clubs""))
                    return 0;
            }
            return 0;
        }
    }   

    /*public static void main(String[] args) {
        Card[] test = new Card[2];
        test[0] = new Card(""10"",""Diamonds"") ;
        test[1] = new Card(""10"",""Hearts"") ;
        System.out.println(test[1].compareTo(test[0]));
        System.out.println(SUIT_ORDER.compare(test[1],test[0]));
    }*/
    
}
@8e1d0547899888721df219643447582f@"
"f02631008","0","0","0","@35f0228a10f429ff12124a44afca518e@
import java.util.Comparator;
import java.util.Objects;
/**
 *
 * @author philip
 */
public class Card {
    
	private final String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private final String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        Integer[] A_face = new Integer[1] ;
        Integer[] B_face = new Integer[1] ;
        if(this.getFace().equalsIgnoreCase(""A""))
            A_face[0] = 14 ;
        else if(this.getFace().equalsIgnoreCase(""K""))
            A_face[0] = 13 ;
        else if(this.getFace().equalsIgnoreCase(""Q""))
            A_face[0] = 12 ;
        else if(this.getFace().equalsIgnoreCase(""J""))
            A_face[0] = 11 ;
        else 
            A_face[0] = Integer.parseInt(this.getFace());
        
        if(that.getFace().equalsIgnoreCase(""A""))
            B_face[0] = 14 ;
        else if(that.getFace().equalsIgnoreCase(""K""))
            B_face[0] = 13 ;
        else if(that.getFace().equalsIgnoreCase(""Q""))
            B_face[0] = 12 ;
        else if(that.getFace().equalsIgnoreCase(""J""))
            B_face[0] = 11 ;
        else
            B_face[0] = Integer.parseInt(that.getFace());
        
        if(A_face[0] > B_face[0])
            return +1 ;
        else if(A_face[0] < B_face[0])
            return -1 ;
        
        else if(Objects.equals(A_face[0], B_face[0])){
        if(SUIT_ORDER.compare(this,that) == -1)
           return -1 ;
        else if(SUIT_ORDER.compare(this, that) == 1)
           return +1 ;
        else 
           return 0;
        }
           return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            String a = c1.getSuit();
            String b = c2.getSuit();
            if (a.equalsIgnoreCase(""Spades"")){
               if(b.equalsIgnoreCase(""Spades""))
                   return 0 ;
               else if(b.equalsIgnoreCase(""Hearts""))
                   return +1 ;
               else if(b.equalsIgnoreCase(""Diamonds""))
                   return +1 ;
               else if(b.equalsIgnoreCase(""Clubs""))
                   return +1 ;
             }
            else if (a.equalsIgnoreCase(""Hearts"")){
                if(b.equalsIgnoreCase(""Spades""))
                    return -1 ;
                else if(b.equalsIgnoreCase(""Hearts""))
                    return 0;
                else if(b.equalsIgnoreCase(""Diamonds""))
                    return +1;
                else if(b.equalsIgnoreCase(""Clubs""))
                    return +1;                
            }
            else if(a.equalsIgnoreCase(""Diamonds"")){
                if (b.equalsIgnoreCase(""Spades""))
                    return -1;
                else if(b.equalsIgnoreCase(""Hearts""))
                    return -1;
                else if(b.equalsIgnoreCase(""Diamonds""))
                    return 0;
                else if(b.equalsIgnoreCase(""Clubs""))
                    return +1;
            }
            else if(a.equalsIgnoreCase(""Clubs"")){
                if (b.equalsIgnoreCase(""Spades""))
                    return -1;
                else if(b.equalsIgnoreCase(""Hearts""))
                    return -1;
                else if(b.equalsIgnoreCase(""Diamonds""))
                    return -1;
                else if(b.equalsIgnoreCase(""Clubs""))
                    return 0;
            }
            return 0;
        }
    }   

    /*public static void main(String[] args) {
        Card[] test = new Card[2];
        test[0] = new Card(""10"",""Diamonds"") ;
        test[1] = new Card(""10"",""Hearts"") ;
        System.out.println(test[1].compareTo(test[0]));
        System.out.println(SUIT_ORDER.compare(test[1],test[0]));
    }*/
    
}

@35f0228a10f429ff12124a44afca518e@"
"f02631008","0","0.45","105264","@2de3dcae9b7cda33b9516897d9198c58@public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        Integer[] A_face = new Integer[1] ;
        Integer[] B_face = new Integer[1] ;
        if(this.getFace().equalsIgnoreCase(""A""))
            A_face[0] = 14 ;
        else if(this.getFace().equalsIgnoreCase(""K""))
            A_face[0] = 13 ;
        else if(this.getFace().equalsIgnoreCase(""Q""))
            A_face[0] = 12 ;
        else if(this.getFace().equalsIgnoreCase(""J""))
            A_face[0] = 11 ;
        else 
            A_face[0] = Integer.parseInt(this.getFace());
        
        if(that.getFace().equalsIgnoreCase(""A""))
            B_face[0] = 14 ;
        else if(that.getFace().equalsIgnoreCase(""K""))
            B_face[0] = 13 ;
        else if(that.getFace().equalsIgnoreCase(""Q""))
            B_face[0] = 12 ;
        else if(that.getFace().equalsIgnoreCase(""J""))
            B_face[0] = 11 ;
        else
            B_face[0] = Integer.parseInt(that.getFace());
        
        if(A_face[0] > B_face[0])
            return +1 ;
        else if(A_face[0] < B_face[0])
            return -1 ;
        
        else if(Objects.equals(A_face[0], B_face[0])){
        if(SUIT_ORDER.compare(this,that) == -1)
           return -1 ;
        else if(SUIT_ORDER.compare(this, that) == 1)
           return +1 ;
        else 
           return 0;
        }
	   return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            String a = c1.getSuit();
            String b = c2.getSuit();
            if (a.equalsIgnoreCase(""Spades"")){
               if(b.equalsIgnoreCase(""Spades""))
                   return 0 ;
               else if(b.equalsIgnoreCase(""Hearts""))
                   return +1 ;
               else if(b.equalsIgnoreCase(""Diamonds""))
                   return +1 ;
               else if(b.equalsIgnoreCase(""Clubs""))
                   return +1 ;
             }
            else if (a.equalsIgnoreCase(""Hearts"")){
                if(b.equalsIgnoreCase(""Spades""))
                    return -1 ;
                else if(b.equalsIgnoreCase(""Hearts""))
                    return 0;
                else if(b.equalsIgnoreCase(""Diamonds""))
                    return +1;
                else if(b.equalsIgnoreCase(""Clubs""))
                    return +1;                
            }
            else if(a.equalsIgnoreCase(""Diamonds"")){
                if (b.equalsIgnoreCase(""Spades""))
                    return -1;
                else if(b.equalsIgnoreCase(""Hearts""))
                    return -1;
                else if(b.equalsIgnoreCase(""Diamonds""))
                    return 0;
                else if(b.equalsIgnoreCase(""Clubs""))
                    return +1;
            }
            else if(a.equalsIgnoreCase(""Clubs"")){
                if (b.equalsIgnoreCase(""Spades""))
                    return -1;
                else if(b.equalsIgnoreCase(""Hearts""))
                    return -1;
                else if(b.equalsIgnoreCase(""Diamonds""))
                    return -1;
                else if(b.equalsIgnoreCase(""Clubs""))
                    return 0;
            }
            return 0;
        }
    }   
}


@2de3dcae9b7cda33b9516897d9198c58@"
"f02631008","5","0.13","110960","@4799a7ad559ec6e129b5c4a34f8b0426@import java.util.Comparator;
import java.util.Objects;

public class Card implements Comparable<Card> {

	private final String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private final String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        Integer[] A_face = new Integer[1] ;
        Integer[] B_face = new Integer[1] ;
        if(this.getFace().equalsIgnoreCase(""A""))
            A_face[0] = 14 ;
        else if(this.getFace().equalsIgnoreCase(""K""))
            A_face[0] = 13 ;
        else if(this.getFace().equalsIgnoreCase(""Q""))
            A_face[0] = 12 ;
        else if(this.getFace().equalsIgnoreCase(""J""))
            A_face[0] = 11 ;
        else 
            A_face[0] = Integer.parseInt(this.getFace());
        
        if(that.getFace().equalsIgnoreCase(""A""))
            B_face[0] = 14 ;
        else if(that.getFace().equalsIgnoreCase(""K""))
            B_face[0] = 13 ;
        else if(that.getFace().equalsIgnoreCase(""Q""))
            B_face[0] = 12 ;
        else if(that.getFace().equalsIgnoreCase(""J""))
            B_face[0] = 11 ;
        else
            B_face[0] = Integer.parseInt(that.getFace());
        
        if(A_face[0]>B_face[0])
            return +1 ;
        else if(A_face[0]<B_face[0])
            return -1 ;
        
        else if(Objects.equals(A_face[0], B_face[0])){
        if(SUIT_ORDER.compare(this,that)==-1)
           return -1 ;
        else if(SUIT_ORDER.compare(this, that)==1)
           return +1 ;
        else 
           return 0;
        }
           return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            String a = c1.getSuit();
            String b = c2.getSuit();
            if (a.equalsIgnoreCase(""Spades"")){
               if(b.equalsIgnoreCase(""Spades""))
                   return 0 ;
               else if(b.equalsIgnoreCase(""Hearts""))
                   return +1 ;
               else if(b.equalsIgnoreCase(""Diamonds""))
                   return +1 ;
               else if(b.equalsIgnoreCase(""Clubs""))
                   return +1 ;
             }
            else if (a.equalsIgnoreCase(""Hearts"")){
                if(b.equalsIgnoreCase(""Spades""))
                    return -1 ;
                else if(b.equalsIgnoreCase(""Hearts""))
                    return 0;
                else if(b.equalsIgnoreCase(""Diamonds""))
                    return +1;
                else if(b.equalsIgnoreCase(""Clubs""))
                    return +1;                
            }
            else if(a.equalsIgnoreCase(""Diamonds"")){
                if (b.equalsIgnoreCase(""Spades""))
                    return -1;
                else if(b.equalsIgnoreCase(""Hearts""))
                    return -1;
                else if(b.equalsIgnoreCase(""Diamonds""))
                    return 0;
                else if(b.equalsIgnoreCase(""Clubs""))
                    return +1;
            }
            else if(a.equalsIgnoreCase(""Clubs"")){
                if (b.equalsIgnoreCase(""Spades""))
                    return -1;
                else if(b.equalsIgnoreCase(""Hearts""))
                    return -1;
                else if(b.equalsIgnoreCase(""Diamonds""))
                    return -1;
                else if(b.equalsIgnoreCase(""Clubs""))
                    return 0;
            }
            return 0;
        }
    }   
//public static void main(String[] args) {
//     Card[] test = new Card[2];
//     test[0] = new Card(""10"",""Diamonds"") ;
//     test[1] = new Card(""10"",""Hearts"") ;
//     System.out.println(test[1].compareTo(test[0]));
//     System.out.println(SUIT_ORDER.compare(test[1],test[0]));
//}

}
@4799a7ad559ec6e129b5c4a34f8b0426@"
"b99611017","0","0.66","110960","@0bb5ba4db72de906d6a76718d620cbfa@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    public int evalueIt(Card c){
    
        int value=0;
       
        if(c.face==""A"")
        {
            value+=12;
        }
        else if(c.face==""K"")
        {
            value+=11;
        }
        else if(c.face==""Q"")
        {
            value+=10;
        }
        else if(c.face==""J"")
        {
            value+=9;
        }
        else if(c.face==""10"")
        {
            value+=8;
        }
        else if(c.face==""9"")
        {
            value+=7;
        }
        else if(c.face==""8"")
        {
            value+=6;
        }
        else if(c.face==""7"")
        {
            value+=5;
        }
        else if(c.face==""6"")
        {
            value+=4;
        }
        else if(c.face==""5"")
        {
            value+=3;
        }
        else if(c.face==""4"")
        {
            value+=2;
        }
        else if(c.face==""3"")
        {
            value+=1;
        }
        else if(c.face==""2"")
        {
            value+=0;
        }
        if(c.suit==""Spades"")
        {
            value=value*4+3;
        }
        else if(c.suit==""Hearts"")
        {
            value=value*4+2;
        }
        else if(c.suit==""Diamonds"")
        {
            value=value*4+1;
        }
        else if(c.suit==""Clubs"")
        {
            value=value*4;
        }
        return value;
    }
 
    // TODO
    public int compareTo(Card that) {

    
        int v1=evalueIt(this);
        int v2=evalueIt(that);
 
        int ans=0;
        if(v1>v2)
            ans= 1;
        if(v1<v2)
            ans= -1;
        
        if(v1==v2)
            ans=0;
        return ans;
        
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int score1 = 0;
            int score2 = 0;
            if (c1.suit == ""Spades"") {
                score1 = 4;
            } else if (c1.suit == ""Hearts"") {
                score1 = 3;
            } else if (c1.suit == ""Diamonds"") {
                score1 = 2;
            } else if (c1.suit == ""Clubs"") {
                score1 = 1;
            }
            if (c2.suit == ""Spades"") {
                score2 = 4;
            } else if (c2.suit == ""Hearts"") {
                score2 = 3;
            } else if (c2.suit == ""Diamonds"") {
                score2 = 2;
            } else if (c2.suit == ""Clubs"") {
                score2 = 1;
            }
            if (score1 > score2) {
                return 1;
            } else if (score1 < score2) {
                return -1;
            } else {
                return 0;
            }
        }
    }
}

@0bb5ba4db72de906d6a76718d620cbfa@"
"b99611017","5","0.128","112144","@06d27118297a42b82f2aa7a8790d7539@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    public int evalueIt(Card c){
    
        int value=0;
       
        if(""A"".equals(c.face))
        {
            value+=12;
        }
        else if(""K"".equals(c.face))
        {
            value+=11;
        }
        else if(""Q"".equals(c.face))
        {
            value+=10;
        }
        else if(""J"".equals(c.face))
        {
            value+=9;
        }
        else if(""10"".equals(c.face))
        {
            value+=8;
        }
        else if(""9"".equals(c.face))
        {
            value+=7;
        }
        else if(""8"".equals(c.face))
        {
            value+=6;
        }
        else if(""7"".equals(c.face))
        {
            value+=5;
        }
        else if(""6"".equals(c.face))
        {
            value+=4;
        }
        else if(""5"".equals(c.face))
        {
            value+=3;
        }
        else if(""4"".equals(c.face))
        {
            value+=2;
        }
        else if(""3"".equals(c.face))
        {
            value+=1;
        }
        else if(""2"".equals(c.face))
        {
            value+=0;
        }
        if(""Spades"".equals(c.suit))
        {
            value=value*4+3;
        }
        else if(""Hearts"".equals(c.suit))
        {
            value=value*4+2;
        }
        else if(""Diamonds"".equals(c.suit))
        {
            value=value*4+1;
        }
        else if(""Clubs"".equals(c.suit))
        {
            value=value*4;
        }
        return value;
    }
 
    // TODO
    @Override
    public int compareTo(Card that) {

    
        int v1=evalueIt(this);
        int v2=evalueIt(that);
 
        int ans=0;
        if(v1>v2)
            ans= 1;
        if(v1<v2)
            ans= -1;
        
        if(v1==v2)
            ans=0;
        return ans;
        
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int score1 = 0;
            int score2 = 0;
            if (""Spades"".equals(c1.suit)) {
                score1 = 4;
            } else if (""Hearts"".equals(c1.suit)) {
                score1 = 3;
            } else if (""Diamonds"".equals(c1.suit)) {
                score1 = 2;
            } else if (""Clubs"".equals(c1.suit)) {
                score1 = 1;
            }
            if (""Spades"".equals(c2.suit)) {
                score2 = 4;
            } else if (""Hearts"".equals(c2.suit)) {
                score2 = 3;
            } else if (""Diamonds"".equals(c2.suit)) {
                score2 = 2;
            } else if (""Clubs"".equals(c2.suit)) {
                score2 = 1;
            }
            if (score1 > score2) {
                return 1;
            } else if (score1 < score2) {
                return -1;
            } else {
                return 0;
            }
        }
    }
}

@06d27118297a42b82f2aa7a8790d7539@"
"b02611026","0","0","0","@57d1bc8f169d2013ecb29bba6df5a07d@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        
        if (that.face == ""A"") {
            that.face = String.valueOf(14);
        }
        if (that.face == ""J"") {
            that.face = String.valueOf(11);
        }
        if (that.face == ""Q"") {
            that.face = String.valueOf(12);
        }
        if (that.face == ""K"") {
            that.face = String.valueOf(13);
        }
        if (this.face == ""A"") {
            this.face = String.valueOf(14);
        }
        if (this.face == ""J"") {
            this.face = String.valueOf(11);
        }
        if (this.face == ""Q"") {
            this.face = String.valueOf(12);
        }
        if (this.face == ""K"") {
            this.face = String.valueOf(13);
        }
        
        int that_facenum = Integer.parseInt(that.face);
        int this_facenum = Integer.parseInt(this.face);
        
//        System.out.println(""that.face : "" + that_facenum);
//        System.out.println(""this.face : "" + this_facenum);
        
        if (this_facenum < that_facenum) {
//            System.out.println("" < : "" + ""-1"");
            return -1;
        } else if (this_facenum > that_facenum) {
//            System.out.println("" > : "" + ""+1"");
            return +1;
        } else {
            if (SUIT_ORDER.compare(this, that) == 1) {
                return +1;
            } else if (SUIT_ORDER.compare(this, that) == -1) {
                return -1;
            } else {
                return 0;
            }
        }
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            String[] suitsort = new String[4];
            suitsort[3] = ""Spades"";
            suitsort[2] = ""Hearts"";
            suitsort[1] = ""Diamonds"";
            suitsort[0] = ""Clubs"";

            int c1_tag = 0;
            int c2_tag = 0;
            
//            System.out.println(""c1.suit："" + c1.suit);
            
            for (int i = 0; i < 4; i++) {
                if (c1.suit.equals(suitsort[i])) {
//                    System.out.println(""suitsort："" + suitsort[i]);
                    c1_tag = i;
                    break;
                }
            }
//            System.out.println(""c1_tag : "" + c1_tag);
            
//            System.out.println(""c2.suit："" + c2.suit);
            for (int i = 0; i < 4; i++) {
                if (c2.suit.equals(suitsort[i])) {
//                    System.out.println(""suitsort："" + suitsort[i]);
                    c2_tag = i;
                    break;
                }
            }
//            System.out.println(""c2_tag : ""  + c2_tag);
            
            if (c1_tag > c2_tag) {
                return +1;
            } else if (c1_tag < c2_tag) {
                return -1;
            } else {
                return 0;
            }

        }
    }
//    public static void main(String[] args) throws Exception{
//        Card[] test = new Card[4];
//        test[0] = new Card(""10"", ""Hearts"");
//        test[1] = new Card(""10"", ""Clubs"");
//        System.out.println(test[0].compareTo(test[1]));
//        System.out.println(Card.SUIT_ORDER.compare(test[0], test[1]));
//        test[2] = new Card(""7"", ""Spades"");
//        test[3] = new Card(""A"", ""Diamonds"");
//        System.out.println(test[2].compareTo(test[3]));
//        System.out.println(Card.SUIT_ORDER.compare(test[2], test[3]));
//    }
}

@57d1bc8f169d2013ecb29bba6df5a07d@"
"b02611026","0","0.46","108272","@0b68a20a5f66d7f8cb4434fe03b59c36@public class Player implements Comparable<Player>{ 

    private Card[] cards = new Card[5];
    private String name;
     
    // DO NOT MODIFY THIS
    public Player(String name) {
        this.name = name;
    }
     
    // DO NOT MODIFY THIS
    public String getName() {
        return this.name;
     }
     
    // DO NOT MODIFY THIS
    public void setCards(Card[] cards) {
        this.cards = cards;
    }
     
    // TODO 
    public int compareTo(Player that) {
        
        // complete this function so the Player can be sorted according to the cards he/she has.
        return 0;
    }
}


@0b68a20a5f66d7f8cb4434fe03b59c36@"
"r04631004","5","0.126","111616","@2c59a22c672ef93cfbe278b98d19b078@import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int this_order = 0;
        int that_order = 0;
        switch (this.face) {
            case ""A"":
                this_order = 13;
                break;
            case ""2"":
                this_order = 1;
                break;
            case ""3"":
                this_order = 2;
                break;
            case ""4"":
                this_order = 3;
                break;
            case ""5"":
                this_order = 4;
                break;
            case ""6"":
                this_order = 5;
                break;
            case ""7"":
                this_order = 6;
                break;
            case ""8"":
                this_order = 7;
                break;
            case ""9"":
                this_order = 8;
                break;
            case ""10"":
                this_order = 9;
                break;
            case ""J"":
                this_order = 10;
                break;
            case ""Q"":
                this_order = 11;
                break;
            case ""K"":
                this_order = 12;
                break;
        }
        switch (that.face) {
            case ""A"":
                that_order = 13;
                break;
            case ""2"":
                that_order = 1;
                break;
            case ""3"":
                that_order = 2;
                break;
            case ""4"":
                that_order = 3;
                break;
            case ""5"":
                that_order = 4;
                break;
            case ""6"":
                that_order = 5;
                break;
            case ""7"":
                that_order = 6;
                break;
            case ""8"":
                that_order = 7;
                break;
            case ""9"":
                that_order = 8;
                break;
            case ""10"":
                that_order = 9;
                break;
            case ""J"":
                that_order = 10;
                break;
            case ""Q"":
                that_order = 11;
                break;
            case ""K"":
                that_order = 12;
                break;
        }
        if (this_order > that_order) {
            return 1;
        } else if (this_order < that_order) {
            return -1;
        } else {
            if (Card.SUIT_ORDER.compare(this, that) == 1) {
                return 1;
            } else {
                return -1;
            }
        }
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int c1_order = 0;
            int c2_order = 0;
            switch (c1.suit) {
                case ""Spades"":
                    c1_order = 4;
                    break;
                case ""Hearts"":
                    c1_order = 3;
                    break;
                case ""Diamonds"":
                    c1_order = 2;
                    break;
                case ""Clubs"":
                    c1_order = 1;
                    break;
            }
            switch (c2.suit) {
                case ""Spades"":
                    c2_order = 4;
                    break;
                case ""Hearts"":
                    c2_order = 3;
                    break;
                case ""Diamonds"":
                    c2_order = 2;
                    break;
                case ""Clubs"":
                    c2_order = 1;
                    break;
            }
            if (c1_order > c2_order) {
                return 1;
            } else if (c1_order < c2_order) {
                return -1;
            } else {
                return 0;
            }
        }
    }
}
@2c59a22c672ef93cfbe278b98d19b078@"
"r02b48003","5","0.13","111584","@902782ca3360ab3cf70b72a0a6f544a8@
import java.util.Comparator;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author clint
 */
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        Integer thisFace = this.mapFace(true);
        Integer thisSuit = this.mapSuit();
        Integer thatFace = that.mapFace(true);
        Integer thatSuit = that.mapSuit();
        
        int compareFace = thisFace.compareTo(thatFace);
        int compareSuit = thisSuit.compareTo(thatSuit);
        
        // compare two card
        if (compareFace != 0) {
            // if two card have diff faces (numbers), compare the face
            return compareFace;
        } else {
            // if two card have same faces (numbers), compare the suit
            return compareSuit;
        } // end if-else
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        @Override
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            Integer c1Suit = c1.mapSuit();
            Integer c2Suit = c2.mapSuit();
            
            return c1Suit.compareTo(c2Suit);
        }
    }
    
    // my implementation
    /**
     * method: mapFace
     * convert the face into integer and return
     * note that A can be 1 or 14
     * @param isAce
     * @return integer
     */
    public Integer mapFace(boolean isAce) {
        // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
        String cardFace = getFace();
            switch (cardFace) {
                case ""A"": if (isAce) return 14;
                          else       return 1;
                case ""K"": return 13;
                case ""Q"": return 12;
                case ""J"": return 11;
                default:
                    return Integer.valueOf(cardFace); // end if-else
            }
    } // end func mapFace
    
    /**
     * method: mapSuit
     * return integer that corresponds to the suit
     * rules Spades > Hearts > Diamonds > Clubs
     * @return 
     */
    public Integer mapSuit() {
        String cardSuit;
        cardSuit = getSuit();
            switch (cardSuit) {
                case ""Spades"":   return 4; // Spades
                case ""Hearts"":   return 3; // Hearts
                case ""Diamonds"": return 2; // Diamonds
                default:         return 1; // Clubs
            }
    } // end func mapFace
}

@902782ca3360ab3cf70b72a0a6f544a8@"
"b02611026","0","0","0","@45b44ff9a67df15eb6f4005a7fdb9947@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        int that_facenum = 0;
        int this_facenum = 0;
        
        if (that.face == ""A"") {
            that_facenum = 14;
        }
        else if (that.face == ""J"") {
            that_facenum = 11;
        }
        else if (that.face == ""Q"") {
            that_facenum = 12;
        }
        else if (that.face == ""K"") {
            that_facenum = 13;
        }
        else 
            that_facenum = Integer.parseInt(that.face);
        
        if (this.face == ""A"") {
            this_facenum = 14;
        }
        else if (this.face == ""J"") {
            this_facenum = 11;
        }
        else if (this.face == ""Q"") {
            this_facenum = 12;
        }
        else if (this.face == ""K"") {
            this_facenum = 13;
        }
        else 
            this_facenum = Integer.parseInt(this.face);
        
        
//        System.out.println(""that.face : "" + that_facenum);
//        System.out.println(""this.face : "" + this_facenum);
        
        if (this_facenum < that_facenum) {
//            System.out.println("" < : "" + ""-1"");
            return -1;
        } else if (this_facenum > that_facenum) {
//            System.out.println("" > : "" + ""+1"");
            return +1;
        } else {
            if (SUIT_ORDER.compare(this, that) == 1) {
                return +1;
            } else if (SUIT_ORDER.compare(this, that) == -1) {
                return -1;
            } else {
                return 0;
            }
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            String[] suitsort = new String[4];
            suitsort[3] = ""Spades"";
            suitsort[2] = ""Hearts"";
            suitsort[1] = ""Diamonds"";
            suitsort[0] = ""Clubs"";

            int c1_tag = 0;
            int c2_tag = 0;
            
//            System.out.println(""c1.suit："" + c1.suit);
            
            for (int i = 0; i < 4; i++) {
                if (c1.suit.equals(suitsort[i])) {
//                    System.out.println(""suitsort："" + suitsort[i]);
                    c1_tag = i;
                    break;
                }
            }
//            System.out.println(""c1_tag : "" + c1_tag);
            
//            System.out.println(""c2.suit："" + c2.suit);
            for (int i = 0; i < 4; i++) {
                if (c2.suit.equals(suitsort[i])) {
//                    System.out.println(""suitsort："" + suitsort[i]);
                    c2_tag = i;
                    break;
                }
            }
//            System.out.println(""c2_tag : ""  + c2_tag);
            
            if (c1_tag > c2_tag) {
                return +1;
            } else if (c1_tag < c2_tag) {
                return -1;
            } else {
                return 0;
            }

        }
    }
//    public static void main(String[] args) throws Exception{
//        Card[] test = new Card[5];
//        test[0] = new Card(""A"", ""Hearts"");
//        test[1] = new Card(""A"", ""Clubs"");
//        System.out.println(test[0].compareTo(test[1]));
//        System.out.println(Card.SUIT_ORDER.compare(test[0], test[1]));
//        test[2] = new Card(""7"", ""Spades"");
//        test[3] = new Card(""A"", ""Diamonds"");
//        test[4] = new Card(""J"", ""Diamonds"");
//        System.out.println(test[2].compareTo(test[3]));
//        System.out.println(Card.SUIT_ORDER.compare(test[2], test[3]));
//        System.out.println(test[0].compareTo(test[1]));
//        
//    }
}

@45b44ff9a67df15eb6f4005a7fdb9947@"
"b02611026","0","0","0","@b204cc2650b9edadff70d741ee357225@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        int that_facenum = 0;
        int this_facenum = 0;
        
        if (that.face == ""A"") {
            that_facenum = 14;
        }
        else if (that.face == ""J"") {
            that_facenum = 11;
        }
        else if (that.face == ""Q"") {
            that_facenum = 12;
        }
        else if (that.face == ""K"") {
            that_facenum = 13;
        }
        else 
            that_facenum = Integer.parseInt(that.face);
        
        if (this.face == ""A"") {
            this_facenum = 14;
        }
        else if (this.face == ""J"") {
            this_facenum = 11;
        }
        else if (this.face == ""Q"") {
            this_facenum = 12;
        }
        else if (this.face == ""K"") {
            this_facenum = 13;
        }
        else 
            this_facenum = Integer.parseInt(this.face);
                
        if (this_facenum < that_facenum) {
            return -1;
        } else if (this_facenum > that_facenum) {
            return +1;
        } else {
            if (SUIT_ORDER.compare(this, that) == 1) {
                return +1;
            } else if (SUIT_ORDER.compare(this, that) == -1) {
                return -1;
            } else {
                return 0;
            }
        }
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            String[] suitsort = new String[4];
            suitsort[3] = ""Spades"";
            suitsort[2] = ""Hearts"";
            suitsort[1] = ""Diamonds"";
            suitsort[0] = ""Clubs"";

            int c1_tag = 0;
            int c2_tag = 0;
            
            for (int i = 0; i < 4; i++) {
                if (c1.suit.equals(suitsort[i])) {
                    c1_tag = i;
                    break;
                }
            }
            for (int i = 0; i < 4; i++) {
                if (c2.suit.equals(suitsort[i])) {
                    c2_tag = i;
                    break;
                }
            }
            
            if (c1_tag > c2_tag) {
                return +1;
            } else if (c1_tag < c2_tag) {
                return -1;
            } else {
                return 0;
            }

        }
    }
}

@b204cc2650b9edadff70d741ee357225@"
"b02611026","5","0.126","110752","@36cefc86569bae37f525b9c78eafbb52@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        int that_facenum = 0;
        int this_facenum = 0;
        
        if (that.face.equals(""A"")) {
            that_facenum = 14;
        }
        else if (that.face.equals(""J"")) {
            that_facenum = 11;
        }
        else if (that.face.equals(""Q"")) {
            that_facenum = 12;
        }
        else if (that.face.equals(""K"")) {
            that_facenum = 13;
        }
        else 
            that_facenum = Integer.parseInt(that.face);
        
        if (this.face.equals(""A"")) {
            this_facenum = 14;
        }
        else if (this.face.equals(""J"")) {
            this_facenum = 11;
        }
        else if (this.face.equals(""Q"")) {
            this_facenum = 12;
        }
        else if (this.face.equals(""K"")) {
            this_facenum = 13;
        }
        else 
            this_facenum = Integer.parseInt(this.face);
        
        
//        System.out.println(""that.face : "" + that_facenum);
//        System.out.println(""this.face : "" + this_facenum);
        
        if (this_facenum < that_facenum) {
//            System.out.println("" < : "" + ""-1"");
            return -1;
        } else if (this_facenum > that_facenum) {
//            System.out.println("" > : "" + ""+1"");
            return +1;
        } else {
            if (SUIT_ORDER.compare(this, that) == 1) {
                return +1;
            } else if (SUIT_ORDER.compare(this, that) == -1) {
                return -1;
            } else {
                return 0;
            }
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            String[] suitsort = new String[4];
            suitsort[3] = ""Spades"";
            suitsort[2] = ""Hearts"";
            suitsort[1] = ""Diamonds"";
            suitsort[0] = ""Clubs"";

            int c1_tag = 0;
            int c2_tag = 0;
            
//            System.out.println(""c1.suit："" + c1.suit);
            
            for (int i = 0; i < 4; i++) {
                if (c1.suit.equals(suitsort[i])) {
//                    System.out.println(""suitsort："" + suitsort[i]);
                    c1_tag = i;
                    break;
                }
            }
//            System.out.println(""c1_tag : "" + c1_tag);
            
//            System.out.println(""c2.suit："" + c2.suit);
            for (int i = 0; i < 4; i++) {
                if (c2.suit.equals(suitsort[i])) {
//                    System.out.println(""suitsort："" + suitsort[i]);
                    c2_tag = i;
                    break;
                }
            }
//            System.out.println(""c2_tag : ""  + c2_tag);
            
            if (c1_tag > c2_tag) {
                return +1;
            } else if (c1_tag < c2_tag) {
                return -1;
            } else {
                return 0;
            }

        }
    }
//    public static void main(String[] args) throws Exception{
//        Card[] test = new Card[5];
//        test[0] = new Card(""A"", ""Hearts"");
//        test[1] = new Card(""A"", ""Clubs"");
//        System.out.println(test[0].compareTo(test[1]));
//        System.out.println(Card.SUIT_ORDER.compare(test[0], test[1]));
//        test[2] = new Card(""7"", ""Spades"");
//        test[3] = new Card(""A"", ""Diamonds"");
//        test[4] = new Card(""J"", ""Diamonds"");
//        System.out.println(test[2].compareTo(test[3]));
//        System.out.println(Card.SUIT_ORDER.compare(test[2], test[3]));
//        System.out.println(test[0].compareTo(test[1]));
//        
//    }
}

@36cefc86569bae37f525b9c78eafbb52@"
"r04945008","0","0.66","111600","@635b042cfb7b39819c062825ba828601@import java.util.Comparator; 
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        switch(this.face){
            case ""A"":
                switch(that.face){
                    case ""A"": return (this.SUIT_ORDER.compare(this,that));
                    default: return 1;
                }
            case ""K"":
                switch(that.face){
                    case ""A"": return -1;
                    case ""K"": return (this.SUIT_ORDER.compare(this,that));
                    default: return 1;
                }
            case ""Q"":
                switch(that.face){
                    case ""A"": return -1;
                    case ""K"": return -1;
                    case ""Q"": return (this.SUIT_ORDER.compare(this,that));
                    default: return 1;
                }
            case ""J"":
                switch(that.face){
                    case ""A"": return -1;
                    case ""K"": return -1;
                    case ""Q"": return -1;
                    case ""J"": return (this.SUIT_ORDER.compare(this,that));
                    default: return 1;
                }
            default:
                switch(that.face){
                    case ""A"": return -1;
                    case ""K"": return -1;
                    case ""Q"": return -1;
                    case ""J"": return -1;
                    default: 
                        if(Integer.parseInt(this.face)<Integer.parseInt(that.face))return -1;
                        else if(Integer.parseInt(this.face)==Integer.parseInt(that.face))return (this.SUIT_ORDER.compare(this,that));
                        else return 1;
                }
        }
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if(c1.suit==c2.suit){
                return 0;              
            }
            else{
                if(c1.suit==""Spades""){
                    return 1;
                }
                else if(c1.suit==""Hearts"" && c2.suit!=""Spades""){
                    return 1;
                }
                else if(c1.suit==""Diamonds"" && (c2.suit!=""Spades"" || c2.suit!=""Hearts"")){
                    return 1;
                }
                else return -1;
            }
        }
    }   
    public static void main(String[] args){
        Card[] test= new Card[2];
        test[0] = new Card(""A"",""Clubs"");
        test[1] = new Card(""2"",""Hearts"");
        System.out.println(test[0].compareTo(test[1]));
        System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
    }
}
@635b042cfb7b39819c062825ba828601@"
"r04945008","0","0.65","111632","@e955b16c3146f7562902c1a47675ec21@import java.util.Comparator; 
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        switch(this.face){
            case ""A"":
                switch(that.face){
                    case ""A"": return (this.SUIT_ORDER.compare(this,that));
                    default: return -1;
                }
            case ""K"":
                switch(that.face){
                    case ""A"": return 1;
                    case ""K"": return (this.SUIT_ORDER.compare(this,that));
                    default: return -1;
                }
            case ""Q"":
                switch(that.face){
                    case ""A"": return 1;
                    case ""K"": return 1;
                    case ""Q"": return (this.SUIT_ORDER.compare(this,that));
                    default: return -1;
                }
            case ""J"":
                switch(that.face){
                    case ""A"": return 1;
                    case ""K"": return 1;
                    case ""Q"": return 1;
                    case ""J"": return (this.SUIT_ORDER.compare(this,that));
                    default: return -1;
                }
            default:
                switch(that.face){
                    case ""A"": return 1;
                    case ""K"": return 1;
                    case ""Q"": return 1;
                    case ""J"": return 1;
                    default: 
                        if(Integer.parseInt(this.face)<Integer.parseInt(that.face))return 1;
                        else if(Integer.parseInt(this.face)==Integer.parseInt(that.face))return (this.SUIT_ORDER.compare(this,that));
                        else return -1;
                }
        }
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if(c1.suit==c2.suit){
                return 0;              
            }
            else{
                if(c1.suit==""Spades""){
                    return -1;
                }
                else if(c1.suit==""Hearts"" && c2.suit!=""Spades""){
                    return -1;
                }
                else if(c1.suit==""Diamonds"" && (c2.suit!=""Spades"" || c2.suit!=""Hearts"")){
                    return -1;
                }
                else return 1;
            }
        }
    }   
    public static void main(String[] args){
        Card[] test= new Card[2];
        test[0] = new Card(""A"",""Clubs"");
        test[1] = new Card(""6"",""Hearts"");
        System.out.println(test[0].compareTo(test[1]));
        System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
    }
}
@e955b16c3146f7562902c1a47675ec21@"
"r04945008","0","0.65","111232","@e35a48b7a3087e3df900a3a10e32db63@import java.util.Comparator; 
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        switch(this.face){
            case ""A"":
                switch(that.face){
                    case ""A"": return (this.SUIT_ORDER.compare(this,that));
                    default: return 1;
                }
            case ""K"":
                switch(that.face){
                    case ""A"": return -1;
                    case ""K"": return (this.SUIT_ORDER.compare(this,that));
                    default: return 1;
                }
            case ""Q"":
                switch(that.face){
                    case ""A"": return -1;
                    case ""K"": return -1;
                    case ""Q"": return (this.SUIT_ORDER.compare(this,that));
                    default: return 1;
                }
            case ""J"":
                switch(that.face){
                    case ""A"": return -1;
                    case ""K"": return -1;
                    case ""Q"": return -1;
                    case ""J"": return (this.SUIT_ORDER.compare(this,that));
                    default: return 1;
                }
            default:
                switch(that.face){
                    case ""A"": return -1;
                    case ""K"": return -1;
                    case ""Q"": return -1;
                    case ""J"": return -1;
                    default: 
                        if(Integer.parseInt(this.face)<Integer.parseInt(that.face))return -1;
                        else if(Integer.parseInt(this.face)==Integer.parseInt(that.face))return (this.SUIT_ORDER.compare(this,that));
                        else return 1;
                }
        }
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if(c1.suit==c2.suit){
                return 0;              
            }
            else{
                if(c1.suit==""Spades""){
                    return 1;
                }
                else if(c1.suit==""Hearts"" && c2.suit!=""Spades""){
                    return 1;
                }
                else if(c1.suit==""Diamonds"" && (c2.suit!=""Spades"" || c2.suit!=""Hearts"")){
                    return 1;
                }
                else return -1;
            }
        }
    }   
//    public static void main(String[] args){
//        Card[] test= new Card[2];
//        test[0] = new Card(""4"",""Clubs"");
//        test[1] = new Card(""4"",""Hearts"");
//        System.out.println(test[0].compareTo(test[1]));
//        System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
//    }
}
@e35a48b7a3087e3df900a3a10e32db63@"
"r04945008","0","0.65","111536","@7cf46c5c9b0a38cf46b066ca49dd2ab7@import java.util.Comparator; 
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        switch(this.face){
            case ""A"":
                switch(that.face){
                    case ""A"": return (this.SUIT_ORDER.compare(this,that));
                    default: return 1;
                }
            case ""K"":
                switch(that.face){
                    case ""A"": return -1;
                    case ""K"": return (this.SUIT_ORDER.compare(this,that));
                    default: return 1;
                }
            case ""Q"":
                switch(that.face){
                    case ""A"": return -1;
                    case ""K"": return -1;
                    case ""Q"": return (this.SUIT_ORDER.compare(this,that));
                    default: return 1;
                }
            case ""J"":
                switch(that.face){
                    case ""A"": return -1;
                    case ""K"": return -1;
                    case ""Q"": return -1;
                    case ""J"": return (this.SUIT_ORDER.compare(this,that));
                    default: return 1;
                }
            default:
                switch(that.face){
                    case ""A"": return -1;
                    case ""K"": return -1;
                    case ""Q"": return -1;
                    case ""J"": return -1;
                    default: 
                        if(Integer.parseInt(this.face)<Integer.parseInt(that.face))return -1;
                        else if(Integer.parseInt(this.face)==Integer.parseInt(that.face))return (this.SUIT_ORDER.compare(this,that));
                        else return 1;
                }
        }
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if(c1.suit==c2.suit){
                return 0;              
            }
            else{
                if(c1.suit==""Spades""){
                    return 1;
                }
                else if(c1.suit==""Hearts"" && c2.suit!=""Spades""){
                    return 1;
                }
                else if(c1.suit==""Diamonds"" && (c2.suit!=""Spades"" && c2.suit!=""Hearts"")){
                    return 1;
                }
                else return -1;
            }
        }
    }   
    public static void main(String[] args){
        Card[] test= new Card[2];
        test[0] = new Card(""3"",""Diamonds"");
        test[1] = new Card(""10"",""Spades"");
        System.out.println(test[0].compareTo(test[1]));
        System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
    }
}
@7cf46c5c9b0a38cf46b066ca49dd2ab7@"
"r04522627","5","0.128","110928","@779207e98ffdfe5a0c190dc649da2385@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int v1 = 0, v2 = 0;
        //<face to value>
        //c1
        if(tryParseInt(this.face))
        {
            v1 = Integer.parseInt(this.face);
        }
        else if(this.face.equals(""A""))
        {
            v1 = 14;
        }
        else if(this.face.equals(""K""))
        {
            v1 = 13;
        }
        else if(this.face.equals(""Q""))
        {
            v1 = 12;
        }
        else if(this.face.equals(""J""))
        {
            v1 = 11;
        }
        //c2
        if(tryParseInt(that.face))
        {
            v2 = Integer.parseInt(that.face);
        }
        else if(that.face.equals(""A""))
        {
            v2 = 14;
        }
        else if(that.face.equals(""K""))
        {
            v2 = 13;
        }
        else if(that.face.equals(""Q""))
        {
            v2 = 12;
        }
        else if(that.face.equals(""J""))
        {
            v2 = 11;
        }
        
        
        
        
        if(v1 > v2)
        {
            return 1;
        }
        else if(v1 < v2)
        {
            return -1;
        }
        else
        {
            return Card.SUIT_ORDER.compare(this, that);
        }
    }
    
    boolean tryParseInt(String value) {  
     try {  
         Integer.parseInt(value);  
         return true;  
      } catch (NumberFormatException e) {  
         return false;  
      }  
}

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int v1 = 0, v2 = 0;
            //c1
            if(c1.suit.equals(""Spades""))
            {
                v1 = 4;
            }
            else if(c1.suit.equals(""Hearts""))
            {
                v1 = 3;
            }
            else if(c1.suit.equals(""Diamonds""))
            {
                v1 = 2;
            }
            else if(c1.suit.equals(""Clubs""))
            {
                v1 = 1;
            }
            //c2
            if(c2.suit.equals(""Spades""))
            {
                v2 = 4;
            }
            else if(c2.suit.equals(""Hearts""))
            {
                v2 = 3;
            }
            else if(c2.suit.equals(""Diamonds""))
            {
                v2 = 2;
            }
            else if(c2.suit.equals(""Clubs""))
            {
                v2 = 1;
            }
            
            if(v1 > v2)
            {
                return 1;
            }
            else if(v1 < v2)
            {
                return -1;
            }
            else
            {
                return 0;
            }
            
        }
    }
    
    /*public static void main(String[] args) {
        // TODO code application logic here
        Card c1 = new Card(""A"",""Spades"");
        Card c2 = new Card(""A"",""Hearts"");
        
        System.out.println(c1.compareTo(c2));
    }
    */
}


@779207e98ffdfe5a0c190dc649da2385@"
"r04945008","0","0.67","111168","@1b47d60fc7dc2feb753ba1a7f1144caa@import java.util.Comparator; 
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }
    
    public int getValue(){
        int a=0;
        switch(this.suit){
            case ""Spades"":a=4;
            case ""Hearts"":a=3;
            case ""Diamonds"":a=2;
            default:a=1;
        }
        return a;
    }
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        switch(this.face){
            case ""A"":
                switch(that.face){
                    case ""A"": return (this.SUIT_ORDER.compare(this,that));
                    default: return 1;
                }
            case ""K"":
                switch(that.face){
                    case ""A"": return -1;
                    case ""K"": return (this.SUIT_ORDER.compare(this,that));
                    default: return 1;
                }
            case ""Q"":
                switch(that.face){
                    case ""A"": return -1;
                    case ""K"": return -1;
                    case ""Q"": return (this.SUIT_ORDER.compare(this,that));
                    default: return 1;
                }
            case ""J"":
                switch(that.face){
                    case ""A"": return -1;
                    case ""K"": return -1;
                    case ""Q"": return -1;
                    case ""J"": return (this.SUIT_ORDER.compare(this,that));
                    default: return 1;
                }
            default:
                switch(that.face){
                    case ""A"": return -1;
                    case ""K"": return -1;
                    case ""Q"": return -1;
                    case ""J"": return -1;
                    default: 
                        if(Integer.parseInt(this.face)<Integer.parseInt(that.face))return -1;
                        else if(Integer.parseInt(this.face)==Integer.parseInt(that.face))return (this.SUIT_ORDER.compare(this,that));
                        else return 1;
                }
        }
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if(c1.getValue() == c2.getValue()) return 0;
            else if(c1.getValue() < c2.getValue()) return -1;
            else return 1;
        }
    }   
    public static void main(String[] args){
        Card[] test= new Card[2];
        test[0] = new Card(""A"",""Spades"");
        test[1] = new Card(""2"",""Clubs"");
        System.out.println(test[0].getValue());
        System.out.println(test[1].getValue());
        System.out.println(test[0].compareTo(test[1]));
        System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
    }
}
@1b47d60fc7dc2feb753ba1a7f1144caa@"
"r04945022","5","0.13","111024","@ff33e1ae66a80aac34eab3169a5bcda1@import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

/**
 *
 * @author Daniel
 */
public class Card implements Comparable<Card> {

	private String face; // 13 of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // 4 suits [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    private static final Comparator<Card> FACE_ORDER = new FaceOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        // compare faces first if r=0 then compare suits 
        int result = FACE_ORDER.compare(this , that);
        if(result != 0) {
            return result;
        } else {
            return SUIT_ORDER.compare(this , that);
        }
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        private static List<String> orders;
        SuitOrder() {
            String[] suits = {""Spades"", ""Hearts"", ""Diamonds"", ""Clubs""};
            orders = new ArrayList<String>();
            for (String suit : suits) {
                orders.add(suit);
            }
        }

        @Override
        public int compare(Card c1, Card c2) {
            int suitc1 = orders.indexOf(c1.getSuit());
            int suitc2 = orders.indexOf(c2.getSuit());
            if (suitc1 < suitc2) return 1;
            else if (suitc1 > suitc2) return -1;
            else return 0;
        }

    }

    private static class FaceOrder implements Comparator<Card> {
        private static List<String> orders;
        FaceOrder() {
            String[] faces = {""A"",""K"",""Q"",""J"",""10"",""9"",""8"",""7"",""6"",""5"",""4"",""3"",""2""};
            orders = new ArrayList<String>();
            for (String face : faces) {
                orders.add(face);
            }
        }

        @Override
        public int compare(Card c1, Card c2) {
            int facec1 = orders.indexOf(c1.getFace());
            int facec2 = orders.indexOf(c2.getFace());
            if (facec1 < facec2) return 1;
            else if (facec1 > facec2) return -1;
            else return 0;
        }
    }
}
@ff33e1ae66a80aac34eab3169a5bcda1@"
"b03106003","0","0.62","111728","@544b431a7880589a5afbfd6b2fa02dd8@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
        public int number;
        public int suitOrder;
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
        switch (face){
            case""A"":
                this.number = 14;
                break;
            case""2"":
                this.number = 2;
                break;            
            case""3"":
                this.number = 3;
                break;                
            case""4"":
                this.number = 4;
                break;        
            case""5"":
                this.number = 5;
                break; 
            case""6"":
                this.number = 6;
                break;
            case""7"":
                this.number = 7;
                break;
            case""8"":
                this.number = 8;
                break;
            case""9"":
                this.number = 9;
                break;
            case""10"":
                this.number = 10;
                break;
            case""J"":
                this.number = 11;
                break;
            case""Q"":
                this.number = 12;
                break;
            case""K"":
                this.number = 13;
                break;                
        }
        switch(suit){
            case""Spades"":
                this.suitOrder = 4;
                break;
            case""Hearts"":
                this.suitOrder = 3;
                break;
            case""Diamonds"":
                this.suitOrder = 2;
                break;
            case""Clubs"":
                this.suitOrder = 1;
                break;                
                
    }
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int ans = 0;
            if(this.number < that.number){
                ans = -1;
            }else if(this.number > that.number){
                ans = 1;
            }else{
            if(this.suitOrder < that.suitOrder){
                ans = -1;
            }else if(this.suitOrder > that.suitOrder){
                ans = 1;
            }
            }
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int ans = 0;
            if(c1.suitOrder < c2.suitOrder){
                ans = -1;
            }else if(c1.suitOrder > c2.suitOrder){
                ans = 1;
            }
            return ans;
        }
    }   
}

@544b431a7880589a5afbfd6b2fa02dd8@"
"r04945008","0","0.64","111552","@f1b5f9abcb573deb975cf46f66557111@import java.util.Comparator; 
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }
    
    public int getValue(){
        int a=0;
        if(this.suit == ""Spades"") return a=4;
        else if(this.suit == ""Hearts"") return a=3;
        else if(this.suit == ""Diamonds"") return a=2;
        else return a=1;
    }
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        switch(this.face){
            case ""A"":
                switch(that.face){
                    case ""A"": return (this.SUIT_ORDER.compare(this,that));
                    default: return 1;
                }
            case ""K"":
                switch(that.face){
                    case ""A"": return -1;
                    case ""K"": return (this.SUIT_ORDER.compare(this,that));
                    default: return 1;
                }
            case ""Q"":
                switch(that.face){
                    case ""A"": return -1;
                    case ""K"": return -1;
                    case ""Q"": return (this.SUIT_ORDER.compare(this,that));
                    default: return 1;
                }
            case ""J"":
                switch(that.face){
                    case ""A"": return -1;
                    case ""K"": return -1;
                    case ""Q"": return -1;
                    case ""J"": return (this.SUIT_ORDER.compare(this,that));
                    default: return 1;
                }
            default:
                switch(that.face){
                    case ""A"": return -1;
                    case ""K"": return -1;
                    case ""Q"": return -1;
                    case ""J"": return -1;
                    default: 
                        if(Integer.parseInt(this.face)<Integer.parseInt(that.face))return -1;
                        else if(Integer.parseInt(this.face)==Integer.parseInt(that.face))return (this.SUIT_ORDER.compare(this,that));
                        else return 1;
                }
        }
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if(c1.getValue() == c2.getValue()) return 0;
            else if(c1.getValue() < c2.getValue()) return -1;
            else return 1;
        }
    }   
    public static void main(String[] args){
        Card[] test= new Card[2];
        test[0] = new Card(""A"",""Clubs"");
        test[1] = new Card(""2"",""Hearts"");
        System.out.println(test[0].compareTo(test[1]));
        System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
    }
}
@f1b5f9abcb573deb975cf46f66557111@"
"b03106003","0","0.66","111792","@cbeadaa7e38a5e761cfea08085d61d48@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
        public int number;
        public int suitOrder;
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
        switch (face){
            case""A"":
                this.number = 14;
                break;
            case""2"":
                this.number = 2;
                break;            
            case""3"":
                this.number = 3;
                break;                
            case""4"":
                this.number = 4;
                break;        
            case""5"":
                this.number = 5;
                break; 
            case""6"":
                this.number = 6;
                break;
            case""7"":
                this.number = 7;
                break;
            case""8"":
                this.number = 8;
                break;
            case""9"":
                this.number = 9;
                break;
            case""10"":
                this.number = 10;
                break;
            case""J"":
                this.number = 11;
                break;
            case""Q"":
                this.number = 12;
                break;
            case""K"":
                this.number = 13;
                break;                
        }
        switch(suit){
            case""Spades"":
                this.suitOrder = 4;
                break;
            case""Hearts"":
                this.suitOrder = 3;
                break;
            case""Diamonds"":
                this.suitOrder = 2;
                break;
            case""Clubs"":
                this.suitOrder = 1;
                break;                
                
    }
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int ans = 0;
            if(this.number < that.number){
                ans = 1;
            }else if(this.number > that.number){
                ans = -1;
            }else{
            if(this.suitOrder < that.suitOrder){
                ans = 1;
            }else if(this.suitOrder > that.suitOrder){
                ans = -1;
            }
            }
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int ans = 0;
            if(c1.suitOrder < c2.suitOrder){
                ans = 1;
            }else if(c1.suitOrder > c2.suitOrder){
                ans = -1;
            }
            return ans;
        }
    }   
}

@cbeadaa7e38a5e761cfea08085d61d48@"
"b03106003","0","0.65","111520","@53be6608ac6ab9218dfbc5d254002ab1@
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
        public int number;
        public int suitOrder;
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;       
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    private void init(){
     switch (face){
            case""A"":
                this.number = 14;
                break;
            case""2"":
                this.number = 2;
                break;            
            case""3"":
                this.number = 3;
                break;                
            case""4"":
                this.number = 4;
                break;        
            case""5"":
                this.number = 5;
                break; 
            case""6"":
                this.number = 6;
                break;
            case""7"":
                this.number = 7;
                break;
            case""8"":
                this.number = 8;
                break;
            case""9"":
                this.number = 9;
                break;
            case""10"":
                this.number = 10;
                break;
            case""J"":
                this.number = 11;
                break;
            case""Q"":
                this.number = 12;
                break;
            case""K"":
                this.number = 13;
                break;                
        }
        switch(suit){
            case""Spades"":
                this.suitOrder = 4;
                break;
            case""Hearts"":
                this.suitOrder = 3;
                break;
            case""Diamonds"":
                this.suitOrder = 2;
                break;
            case""Clubs"":
                this.suitOrder = 1;
                break;                
                
    }
    
    
    }
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        init();
        int ans = 0;
            if(this.number < that.number){
                ans = -1;
            }else if(this.number > that.number){
                ans = 1;
            }else{
            if(this.suitOrder < that.suitOrder){
                ans = -1;
            }else if(this.suitOrder > that.suitOrder){
                ans = 1;
            }
            }
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            c1.init();
            c2.init();
            int ans = 0;
            if(c1.suitOrder < c2.suitOrder){
                ans = -1;
            }else if(c1.suitOrder > c2.suitOrder){
                ans = 1;
            }
            return ans;
        }
    }   
}

@53be6608ac6ab9218dfbc5d254002ab1@"
"b03106003","0","0.66","111648","@d9597943af736d9910faad902465d009@
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
        public int number;
        public int suitOrder;
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;       
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    private void init(){
     switch (face){
            case""A"":
                this.number = 14;
                break;
            case""2"":
                this.number = 2;
                break;            
            case""3"":
                this.number = 3;
                break;                
            case""4"":
                this.number = 4;
                break;        
            case""5"":
                this.number = 5;
                break; 
            case""6"":
                this.number = 6;
                break;
            case""7"":
                this.number = 7;
                break;
            case""8"":
                this.number = 8;
                break;
            case""9"":
                this.number = 9;
                break;
            case""10"":
                this.number = 10;
                break;
            case""J"":
                this.number = 11;
                break;
            case""Q"":
                this.number = 12;
                break;
            case""K"":
                this.number = 13;
                break;                
        }
        switch(suit){
            case""Spades"":
                this.suitOrder = 4;
                break;
            case""Hearts"":
                this.suitOrder = 3;
                break;
            case""Diamonds"":
                this.suitOrder = 2;
                break;
            case""Clubs"":
                this.suitOrder = 1;
                break;                
                
    }
    
    
    }
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        init();
        int ans = 0;
            if(this.number < that.number){
                ans = -1;
            }else if(this.number > that.number){
                ans = 1;
            }else{
            if(this.suitOrder < that.suitOrder){
                ans = -1;
            }else if(this.suitOrder > that.suitOrder){
                ans = 1;
            }
            }
        return ans;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            c1.init();
            c2.init();
            int ans = 0;
            if(c1.suitOrder < c2.suitOrder){
                ans = -1;
            }else if(c1.suitOrder > c2.suitOrder){
                ans = 1;
            }
            return ans;
        }
    }   
}

@d9597943af736d9910faad902465d009@"
"b03106003","0","0.66","111568","@1c042264290c7fb96492b022d3af4908@
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
        public int number;
        public int suitOrder;
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit; 
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    private void init(){
     switch (face){
            case""A"":
                this.number = 14;
                break;
            case""2"":
                this.number = 2;
                break;            
            case""3"":
                this.number = 3;
                break;                
            case""4"":
                this.number = 4;
                break;        
            case""5"":
                this.number = 5;
                break; 
            case""6"":
                this.number = 6;
                break;
            case""7"":
                this.number = 7;
                break;
            case""8"":
                this.number = 8;
                break;
            case""9"":
                this.number = 9;
                break;
            case""10"":
                this.number = 10;
                break;
            case""J"":
                this.number = 11;
                break;
            case""Q"":
                this.number = 12;
                break;
            case""K"":
                this.number = 13;
                break;
                default:
                System.out.println(""Wrong!"");
                break;
        }
        switch(suit){
            case""Spades"":
                this.suitOrder = 4;
                break;
            case""Hearts"":
                this.suitOrder = 3;
                break;
            case""Diamonds"":
                this.suitOrder = 2;
                break;
            case""Clubs"":
                this.suitOrder = 1;
                break;
            default:
                System.out.println(""Wrong!"");
                break;
                
    }
    
    
    }
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        init();
        int ans = 0;
            if(this.number < that.number){
                ans = 1;
            }else if(this.number > that.number){
                ans = -1;
            }else{
                if(this.suitOrder < that.suitOrder){
                    ans = 1;
                }else if(this.suitOrder > that.suitOrder){
                    ans = -1;
                }
            }
        return ans;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            c1.init();
            c2.init();
            int ans = 0;
            if(c1.suitOrder < c2.suitOrder){
                ans = 1;
            }else if(c1.suitOrder > c2.suitOrder){
                ans = -1;
            }
            return ans;
        }
    }   
}

@1c042264290c7fb96492b022d3af4908@"
"r04945008","0","0.66","111056","@cce17b85bc5d4f2a66c6590802122816@import java.util.Comparator; 
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }
    
    public int getValue(){
        int a=0;
        if(this.suit == ""Spades"") return a=4;
        else if(this.suit == ""Hearts"") return a=3;
        else if(this.suit == ""Diamonds"") return a=2;
        else return a=1;
    }
    public int getValue2(){
        int a=0;
        if(this.face == ""A"") return a=13;
        else if(this.face == ""K"") return a=12;
        else if(this.face == ""Q"") return a=11;
        else if(this.face == ""J"") return a=10;
        else if(this.face == ""10"") return a=9;
        else if(this.face == ""9"") return a=8;
        else if(this.face == ""8"") return a=7;
        else if(this.face == ""7"") return a=6;
        else if(this.face == ""6"") return a=5;
        else if(this.face == ""5"") return a=4;
        else if(this.face == ""4"") return a=3;
        else if(this.face == ""3"") return a=2;
        else return a=1;
    }
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(this.getValue2()>that.getValue2()) return 1;
        else if(this.getValue2()<that.getValue2()) return -1;
        else if(this.getValue()>that.getValue()) return 1;
        else return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if(c1.getValue() == c2.getValue()) return 0;
            else if(c1.getValue() < c2.getValue()) return -1;
            else return 1;
        }
    }   
    public static void main(String[] args){
        Card[] test= new Card[2];
        test[0] = new Card(""5"",""Clubs"");
        test[1] = new Card(""3"",""Hearts"");
        System.out.println(test[0].compareTo(test[1]));
        System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
    }
}
@cce17b85bc5d4f2a66c6590802122816@"
"r04945008","0","0.65","110912","@ffb37bccfb65c675053b83343642930e@import java.util.Comparator; 
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }
    
    public int getValue(){
        int a=0;
        if(this.suit == ""Spades"") return a=4;
        else if(this.suit == ""Hearts"") return a=3;
        else if(this.suit == ""Diamonds"") return a=2;
        else return a=1;
    }
    public int getValue2(){
        int a=0;
        if(this.face == ""A"") return a=13;
        else if(this.face == ""K"") return a=12;
        else if(this.face == ""Q"") return a=11;
        else if(this.face == ""J"") return a=10;
        else if(this.face == ""10"") return a=9;
        else if(this.face == ""9"") return a=8;
        else if(this.face == ""8"") return a=7;
        else if(this.face == ""7"") return a=6;
        else if(this.face == ""6"") return a=5;
        else if(this.face == ""5"") return a=4;
        else if(this.face == ""4"") return a=3;
        else if(this.face == ""3"") return a=2;
        else return a=1;
    }
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(this.getValue2()>that.getValue2()) return 1;
        else if(this.getValue2()<that.getValue2()) return -1;
        else if(this.getValue()>that.getValue()) return 1;
        else return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if(c1.getValue() == c2.getValue()) return 0;
            else if(c1.getValue() < c2.getValue()) return -1;
            else return 1;
        }
    }   
//    public static void main(String[] args){
//        Card[] test= new Card[2];
//        test[0] = new Card(""5"",""Clubs"");
//        test[1] = new Card(""3"",""Hearts"");
//        System.out.println(test[0].compareTo(test[1]));
//        System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
//    }
}
@ffb37bccfb65c675053b83343642930e@"
"r04945008","0","0.63","110960","@51f54d0e6c9b8bf0fc47f4c5dd628f97@import java.util.Comparator; 
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }
    
    public int getValue(){
        int a=0;
        if(this.suit == ""Spades"") return a=4;
        else if(this.suit == ""Hearts"") return a=3;
        else if(this.suit == ""Diamonds"") return a=2;
        else return a=1;
    }
    public int getValue2(){
        int a=0;
        if(this.face == ""A"") return a=13;
        else if(this.face == ""K"") return a=12;
        else if(this.face == ""Q"") return a=11;
        else if(this.face == ""J"") return a=10;
        else if(this.face == ""10"") return a=9;
        else if(this.face == ""9"") return a=8;
        else if(this.face == ""8"") return a=7;
        else if(this.face == ""7"") return a=6;
        else if(this.face == ""6"") return a=5;
        else if(this.face == ""5"") return a=4;
        else if(this.face == ""4"") return a=3;
        else if(this.face == ""3"") return a=2;
        else return a=1;
    }
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(this.getValue2()>that.getValue2()) return -1;
        else if(this.getValue2()<that.getValue2()) return 1;
        else if(this.getValue()>that.getValue()) return -1;
        else return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if(c1.getValue() == c2.getValue()) return 0;
            else if(c1.getValue() < c2.getValue()) return 1;
            else return -1;
        }
    }   
    public static void main(String[] args){
        Card[] test= new Card[2];
        test[0] = new Card(""2"",""Spades"");
        test[1] = new Card(""3"",""Clubss"");
        System.out.println(test[0].compareTo(test[1]));
        System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
    }
}
@51f54d0e6c9b8bf0fc47f4c5dd628f97@"
"r04945008","0","0.64","110992","@c08dc2be0a181986dd36343103114884@import java.util.Comparator; 
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }
    
    public int getValue(){
        int a=0;
        if(this.suit == ""Spades"") return a=4;
        else if(this.suit == ""Hearts"") return a=3;
        else if(this.suit == ""Diamonds"") return a=2;
        else return a=1;
    }
    public int getValue2(){
        int a=0;
        if(this.face == ""A"") return a=13;
        else if(this.face == ""K"") return a=12;
        else if(this.face == ""Q"") return a=11;
        else if(this.face == ""J"") return a=10;
        else if(this.face == ""10"") return a=9;
        else if(this.face == ""9"") return a=8;
        else if(this.face == ""8"") return a=7;
        else if(this.face == ""7"") return a=6;
        else if(this.face == ""6"") return a=5;
        else if(this.face == ""5"") return a=4;
        else if(this.face == ""4"") return a=3;
        else if(this.face == ""3"") return a=2;
        else return a=1;
    }
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(this.getValue2()>that.getValue2()) return 1;
        else if(this.getValue2()<that.getValue2()) return -1;
        else if(this.getValue()>that.getValue()) return 1;
        else return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if(c1.getValue() == c2.getValue()) return 0;
            else if(c1.getValue() < c2.getValue()) return -1;
            else return 1;
        }
    }   
    public static void main(String[] args){
        Card[] test= new Card[2];
        test[0] = new Card(""2"",""Spades"");
        test[1] = new Card(""3"",""Clubss"");
        System.out.println(test[0].compareTo(test[1]));
        System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
    }
}
@c08dc2be0a181986dd36343103114884@"
"b03106003","5","0.13","112144","@422db811c4e5f45f38ba6ac42a82c6f7@
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
        public int number;
        public int suitOrder;
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();
    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit; 
    }     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    private void init(){
     switch (face){
            case""A"":
                this.number = 14;
                break;
            case""2"":
                this.number = 2;
                break;            
            case""3"":
                this.number = 3;
                break;                
            case""4"":
                this.number = 4;
                break;        
            case""5"":
                this.number = 5;
                break; 
            case""6"":
                this.number = 6;
                break;
            case""7"":
                this.number = 7;
                break;
            case""8"":
                this.number = 8;
                break;
            case""9"":
                this.number = 9;
                break;
            case""10"":
                this.number = 10;
                break;
            case""J"":
                this.number = 11;
                break;
            case""Q"":
                this.number = 12;
                break;
            case""K"":
                this.number = 13;
                break;
                default:
                System.out.println(""Wrong!"");
                break;
        }
        switch(suit){
            case""Spades"":
                this.suitOrder = 4;
                break;
            case""Hearts"":
                this.suitOrder = 3;
                break;
            case""Diamonds"":
                this.suitOrder = 2;
                break;
            case""Clubs"":
                this.suitOrder = 1;
                break;
            default:
                System.out.println(""Wrong!"");
                break;
                
    }
    
    
    }
    
    static private int getsuitorder(String s){
        int flag = 0;
        switch(s){
            case""Spades"":
                flag = 4;
                break;
            case""Hearts"":
                flag = 3;
                break;
            case""Diamonds"":
                flag = 2;
                break;
            case""Clubs"":
                flag = 1;
                break;
            default:
                System.out.println(""Wrong!"");
                break;
        }
        return flag;
    }
    static private int getnumber(String s){
        int flag = 0;
        switch (s){
            case""A"":
                flag = 14;
                break;
            case""2"":
                flag = 2;
                break;            
            case""3"":
                flag = 3;
                break;                
            case""4"":
                flag = 4;
                break;        
            case""5"":
                flag = 5;
                break; 
            case""6"":
                flag = 6;
                break;
            case""7"":
                flag = 7;
                break;
            case""8"":
                flag = 8;
                break;
            case""9"":
                flag = 9;
                break;
            case""10"":
                flag = 10;
                break;
            case""J"":
                flag = 11;
                break;
            case""Q"":
                flag = 12;
                break;
            case""K"":
                flag = 13;
                break;
                default:
                System.out.println(""Wrong!"");
                break;
        }
        return flag;
    
    }
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        init();
        int ans = 0;
            if(getnumber(this.getFace()) < getnumber(that.getFace())){
                ans = -1;
            }else if(getnumber(this.getFace()) > getnumber(that.getFace())){
                ans = 1;
            }else if (getnumber(this.getFace()) == getnumber(that.getFace())){
               if(getsuitorder(this.getSuit()) < getsuitorder(that.getSuit())){
                    ans = -1;
                }else if(getsuitorder(this.getSuit()) > getsuitorder(that.getSuit())){
                    ans = 1;
                }else if(getsuitorder(this.getSuit()) == getsuitorder(that.getSuit())){
                    ans = 0;
                }
            }
        return ans;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            c1.init();
            c2.init();
            int ans = 0;
            if(getsuitorder(c1.suit) < getsuitorder(c2.suit)){
                ans = -1;
            }else if(getsuitorder(c1.suit) > getsuitorder(c2.suit)){
                ans = 1;
            }else if(getsuitorder(c1.suit) == getsuitorder(c2.suit)){
                ans = 0;
            }
            return ans;
        }
    }   
}

@422db811c4e5f45f38ba6ac42a82c6f7@"
"r04945008","0","0.65","110992","@421a282c22a3cd3e49b2358121c2b896@import java.util.Comparator; 
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }
    
    public int getValue(){
        int a=0;
        if(this.suit == ""Spades"") return a=4;
        else if(this.suit == ""Hearts"") return a=3;
        else if(this.suit == ""Diamonds"") return a=2;
        else return a=1;
    }
    public int getValue2(){
        int a=0;
        if(this.face == ""A"") return a=13;
        else if(this.face == ""K"") return a=12;
        else if(this.face == ""Q"") return a=11;
        else if(this.face == ""J"") return a=10;
        else if(this.face == ""10"") return a=9;
        else if(this.face == ""9"") return a=8;
        else if(this.face == ""8"") return a=7;
        else if(this.face == ""7"") return a=6;
        else if(this.face == ""6"") return a=5;
        else if(this.face == ""5"") return a=4;
        else if(this.face == ""4"") return a=3;
        else if(this.face == ""3"") return a=2;
        else return a=1;
    }
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(this.getValue2()>that.getValue2()) return +1;
        else if(this.getValue2()<that.getValue2()) return -1;
        else if(this.getValue()>that.getValue()) return +1;
        else return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if(c1.getValue() == c2.getValue()) return 0;
            else if(c1.getValue() < c2.getValue()) return -1;
            else return +1;
        }
    }   
    public static void main(String[] args){
        Card[] test= new Card[2];
        test[0] = new Card(""3"",""Hearts"");
        test[1] = new Card(""2"",""Spades"");
        System.out.println(test[0].compareTo(test[1]));
        System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
    }
}
@421a282c22a3cd3e49b2358121c2b896@"
"b02611002","0","0.65","110880","@8ce2269636142b0e826b3f2584f94a2d@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        int i=0;
        int[] f={0,0},s={0,0};
        for(Card c=this;c!=that;c=that){
            switch (c.getFace()){
                case ""A"":f[i]=14;break;
                case ""J"":f[i]=11;break;
                case ""Q"":f[i]=12;break;
                case ""K"":f[i]=13;break;
                default:f[i]=Integer.parseInt(c.getFace());
            }
            switch (c.getSuit()){
                case ""Spades"":s[i]=99;break;
                case ""Hearts"":s[i]=98;break;
                case ""Diamonds"":s[i]=97;break;
                case ""Clubs"":s[i]=96;break;
            }
            i++;
        }
        if(f[0]!=f[1]){
            return f[0]-f[1];
        }else return s[0]-s[1];
    }

    SuitOrder c = new SuitOrder();

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit

            int i=0;
            int[] f={0,0},s={0,0};
            for(Card c=c1;c!=c2;c=c2){
                switch (c.getFace()){
                    case ""A"":f[i]=14;break;
                    case ""J"":f[i]=11;break;
                    case ""Q"":f[i]=12;break;
                    case ""K"":f[i]=13;break;
                    default:f[i]=Integer.parseInt(c.getFace());
                }
                switch (c.getSuit()){
                    case ""Spades"":s[i]=99;break;
                    case ""Hearts"":s[i]=98;break;
                    case ""Diamonds"":s[i]=97;break;
                    case ""Clubs"":s[i]=96;break;
                }
                i++;
            }
            return s[0]-s[1];

        }
    }   
}

@8ce2269636142b0e826b3f2584f94a2d@"
"b02611002","0","0.65","111776","@0a1227de3bfcb7351d6b3ee87d95e20a@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        int i=0;
        int[] f={0,0},s={0,0};
        for(Card c=this;c!=that;c=that){
            switch (c.getFace()){
                case ""A"":f[i]=14;break;
                case ""J"":f[i]=11;break;
                case ""Q"":f[i]=12;break;
                case ""K"":f[i]=13;break;
                default:f[i]=Integer.parseInt(c.getFace());
            }
            switch (c.getSuit()){
                case ""Spades"":s[i]=99;break;
                case ""Hearts"":s[i]=98;break;
                case ""Diamonds"":s[i]=97;break;
                case ""Clubs"":s[i]=96;break;
            }
            i++;
        }

        if(f[0]>f[1]){
            return 1;
        }else if(f[0]<f[1]){
            return -1;
        }else if(s[0]>s[1]){
            return 1;
        }else if(s[0]<s[1]){
            return -1;
        }else {
            return 0;
        }
    }

    SuitOrder c = new SuitOrder();

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit

            int i=0;
            int[] f={0,0},s={0,0};
            for(Card c=c1;c!=c2;c=c2){
                switch (c.getFace()){
                    case ""A"":f[i]=14;break;
                    case ""J"":f[i]=11;break;
                    case ""Q"":f[i]=12;break;
                    case ""K"":f[i]=13;break;
                    default:f[i]=Integer.parseInt(c.getFace());
                }
                switch (c.getSuit()){
                    case ""Spades"":s[i]=99;break;
                    case ""Hearts"":s[i]=98;break;
                    case ""Diamonds"":s[i]=97;break;
                    case ""Clubs"":s[i]=96;break;
                }
                i++;
            }
            return s[0]-s[1];

        }
    }   
}

@0a1227de3bfcb7351d6b3ee87d95e20a@"
"b02611002","5","0.13","111632","@105983d3d39c274737b9ee2b273771ea@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        int i=0;
        int[] f={0,0},s={0,0};
        for(Card c=this;i<2;c=that){
            switch (c.getFace()){
                case ""A"":f[i]=14;break;
                case ""J"":f[i]=11;break;
                case ""Q"":f[i]=12;break;
                case ""K"":f[i]=13;break;
                default:f[i]=Integer.parseInt(c.getFace());
            }
            switch (c.getSuit()){
                case ""Spades"":s[i]=99;break;
                case ""Hearts"":s[i]=98;break;
                case ""Diamonds"":s[i]=97;break;
                case ""Clubs"":s[i]=96;break;
            }
            i++;
        }

        if(f[0]>f[1]){
            return 1;
        }else if(f[0]<f[1]){
            return -1;
        }else if(s[0]>s[1]){
            return 1;
        }else if(s[0]<s[1]){
            return -1;
        }else {
            return 0;
        }
    }

    SuitOrder c = new SuitOrder();

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit

            int i=0;
            int[] s={0,0};
            for(Card c=c1;i<2;c=c2){
                switch (c.getSuit()){
                    case ""Spades"":s[i]=99;break;
                    case ""Hearts"":s[i]=98;break;
                    case ""Diamonds"":s[i]=97;break;
                    case ""Clubs"":s[i]=96;break;
                }
                i++;
            }
            return s[0]-s[1];

        }
    }   
}

@105983d3d39c274737b9ee2b273771ea@"
"r04945008","0","0.65","110976","@7dd0234e541c3626f5d506b4fb9e810e@import java.util.Comparator; 
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }
    
    public int getValue(){
        int a=0;
        if(this.suit == ""Spades"") return a=4;
        if(this.suit == ""Hearts"") return a=3;
        if(this.suit == ""Diamonds"") return a=2;
        if(this.suit == ""Clubs"") return a=1;
        else return a=0;
    }
    public int getValue2(){
        int a=0;
        if(this.face == ""A"") return a=13;
        if(this.face == ""K"") return a=12;
        if(this.face == ""Q"") return a=11;
        if(this.face == ""J"") return a=10;
        if(this.face == ""10"") return a=9;
        if(this.face == ""9"") return a=8;
        if(this.face == ""8"") return a=7;
        if(this.face == ""7"") return a=6;
        if(this.face == ""6"") return a=5;
        if(this.face == ""5"") return a=4;
        if(this.face == ""4"") return a=3;
        if(this.face == ""3"") return a=2;
        if(this.face == ""2"") return a=1;
        else return a=0;
    }
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int a,b;
        a=this.getValue2();
        b=that.getValue2();
        if(a>b) return +1;
        else if(a<b) return -1;
        else if(this.getValue()>that.getValue()) return +1;
        else return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if(c1.getValue() == c2.getValue()) return 0;
            else if(c1.getValue() < c2.getValue()) return -1;
            else return +1;
        }
    }   
    public static void main(String[] args){
        Card[] test= new Card[2];
        test[0] = new Card(""5"",""Hearts"");
        test[1] = new Card(""8"",""Spades"");
        System.out.println(test[0].compareTo(test[1]));
        System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
    }
}
@7dd0234e541c3626f5d506b4fb9e810e@"
"r04945008","0","0.64","111072","@8e89941d9364177f4a27d51efe31d079@import java.util.Comparator; 
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }
    
    public int getValue(){
        int a=0;
        if(this.suit == ""Spades"") return a=4;
        if(this.suit == ""Hearts"") return a=3;
        if(this.suit == ""Diamonds"") return a=2;
        if(this.suit == ""Clubs"") return a=1;
        return a=0;
    }
    public int getValue2(){
        int a=0;
        if(this.face == ""A"") return a=13;
        if(this.face == ""K"") return a=12;
        if(this.face == ""Q"") return a=11;
        if(this.face == ""J"") return a=10;
        if(this.face == ""10"") return a=9;
        if(this.face == ""9"") return a=8;
        if(this.face == ""8"") return a=7;
        if(this.face == ""7"") return a=6;
        if(this.face == ""6"") return a=5;
        if(this.face == ""5"") return a=4;
        if(this.face == ""4"") return a=3;
        if(this.face == ""3"") return a=2;
        if(this.face == ""2"") return a=1;
        return a=0;
    }
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int a,b;
        a=this.getValue2();
        b=that.getValue2();
        if(a>b) return +1;
        else if(a<b) return -1;
        else if(this.getValue()>that.getValue()) return +1;
        else return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if(c1.getValue() == c2.getValue()) return 0;
            else if(c1.getValue() < c2.getValue()) return -1;
            else return +1;
        }
    }   
    public static void main(String[] args){
        Card[] test= new Card[2];
        test[0] = new Card(""5"",""Hearts"");
        test[1] = new Card(""8"",""Spades"");
        System.out.println(test[0].compareTo(test[1]));
        System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
    }
}
@8e89941d9364177f4a27d51efe31d079@"
"r04945008","0","0.66","110960","@75da2a20de45e26bd6d321760a4c8d01@import java.util.Comparator; 
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }
    
    public int getValue(){
        int a=0;
        if(this.suit == ""Spades"") return a=4;
        if(this.suit == ""Hearts"") return a=3;
        if(this.suit == ""Diamonds"") return a=2;
        if(this.suit == ""Clubs"") return a=1;
        return a=0;
    }
    public int getValue2(){
        int a=0;
        if(this.face == ""A"") return a=13;
        if(this.face == ""K"") return a=12;
        if(this.face == ""Q"") return a=11;
        if(this.face == ""J"") return a=10;
        if(this.face == ""10"") return a=9;
        if(this.face == ""9"") return a=8;
        if(this.face == ""8"") return a=7;
        if(this.face == ""7"") return a=6;
        if(this.face == ""6"") return a=5;
        if(this.face == ""5"") return a=4;
        if(this.face == ""4"") return a=3;
        if(this.face == ""3"") return a=2;
        if(this.face == ""2"") return a=1;
        return a=0;
    }
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int a,b;
        a=this.getValue2();
        b=that.getValue2();
        if(a>b) return +1;
        else if(a<b) return -1;
        else if(this.getValue()>that.getValue()) return +1;
        else return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int a,b;
            a=c1.getValue();
            b=c2.getValue();
            if(a == b) return 0;
            else if(a < b) return -1;
            else return +1;
        }
    }   
    public static void main(String[] args){
        Card[] test= new Card[2];
        test[0] = new Card(""5"",""Hearts"");
        test[1] = new Card(""8"",""Spades"");
        System.out.println(test[0].compareTo(test[1]));
        System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
    }
}
@75da2a20de45e26bd6d321760a4c8d01@"
"r04945008","0","0.66","109568","@031ff441be38434084ce75f54598499a@import java.util.Comparator; 
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }
    
    public int getValue(){
        int a=0;
        if(this.suit == ""Spades"") return a=4;
        if(this.suit == ""Hearts"") return a=3;
        if(this.suit == ""Diamonds"") return a=2;
        if(this.suit == ""Clubs"") return a=1;
        return a=0;
    }
    public int getValue2(){
        int a=0;
        if(this.face == ""A"") return a=13;
        if(this.face == ""K"") return a=12;
        if(this.face == ""Q"") return a=11;
        if(this.face == ""J"") return a=10;
        if(this.face == ""10"") return a=9;
        if(this.face == ""9"") return a=8;
        if(this.face == ""8"") return a=7;
        if(this.face == ""7"") return a=6;
        if(this.face == ""6"") return a=5;
        if(this.face == ""5"") return a=4;
        if(this.face == ""4"") return a=3;
        if(this.face == ""3"") return a=2;
        if(this.face == ""2"") return a=1;
        return a=0;
    }
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int a,b;
        a=this.getValue2();
        b=that.getValue2();
        if(a>b) return +1;
        if(a<b) return -1;
        if(this.getValue()>that.getValue()) return +1;
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int a,b;
            a=c1.getValue();
            b=c2.getValue();
            if(a == b) return 0;
            if(a < b) return -1;
            return +1;
        }
    }   
    public static void main(String[] args){
        Card[] test= new Card[2];
        test[0] = new Card(""A"",""Spades"");
        test[1] = new Card(""8"",""Spades"");
        System.out.println(test[0].compareTo(test[1]));
        System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
    }
}
@031ff441be38434084ce75f54598499a@"
"r04945008","0","0.66","110944","@f9cff5fbbeb794d90d7ea73e1501f499@import java.util.Comparator; 
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }
    
    public int getValue(){
        int a=0;
        if(this.suit == ""Spades"") return a=4;
        if(this.suit == ""Hearts"") return a=3;
        if(this.suit == ""Diamonds"") return a=2;
        if(this.suit == ""Clubs"") return a=1;
        return a=0;
    }
    public int getValue2(){
        int a=0;
        if(this.face == ""A"") return a=13;
        if(this.face == ""K"") return a=12;
        if(this.face == ""Q"") return a=11;
        if(this.face == ""J"") return a=10;
        if(this.face == ""10"") return a=9;
        if(this.face == ""9"") return a=8;
        if(this.face == ""8"") return a=7;
        if(this.face == ""7"") return a=6;
        if(this.face == ""6"") return a=5;
        if(this.face == ""5"") return a=4;
        if(this.face == ""4"") return a=3;
        if(this.face == ""3"") return a=2;
        if(this.face == ""2"") return a=1;
        return a=0;
    }
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int a,b,c,d;
            a=this.getValue();
            b=that.getValue();
            c=this.getValue2();
            d=that.getValue2();
            if(a<b) return -1;
            if(a>b) return +1;
            if(c<d) return -1;
            if(c>d) return +1;
            return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int a,b;
            a=c1.getValue();
            b=c2.getValue();
            if(a<b) return -1;
            if(a>b) return +1;
            return 0;
        }
    }   
    public static void main(String[] args){
        Card[] test= new Card[2];
        test[0] = new Card(""A"",""Spades"");
        test[1] = new Card(""8"",""Spades"");
        System.out.println(test[0].compareTo(test[1]));
        System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
    }
}
@f9cff5fbbeb794d90d7ea73e1501f499@"
"r04945008","5","0.132","112240","@9a7091532c6f2327546bf6814eaab70e@import java.util.Comparator;
public class Card implements Comparable<Card> {
	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();
    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    public int face2int() {
        if (this.face.equals(""A"")) return 14;
        if (this.face.equals(""K"")) return 13;
        if (this.face.equals(""Q"")) return 12;
        if (this.face.equals(""J"")) return 11;
        if (this.face.equals(""10"")) return 10;
        if (this.face.equals(""9"")) return 9;
        if (this.face.equals(""8"")) return 8;
        if (this.face.equals(""7"")) return 7;
        if (this.face.equals(""6"")) return 6;
        if (this.face.equals(""5"")) return 5;
        if (this.face.equals(""4"")) return 4;
        if (this.face.equals(""3"")) return 3;
        if (this.face.equals(""2"")) return 2;
        return 0;
    }
    
    public int suit2int() {
        if (this.suit.equals(""Spades"")) return 4;
        if (this.suit.equals(""Hearts"")) return 3;
        if (this.suit.equals(""Diamonds"")) return 2;
        if (this.suit.equals(""Clubs"")) return 1;
        return 0;
    }
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int face1 = this.face2int();
        int face2 = that.face2int();
        int suit1 = this.suit2int();
        int suit2 = that.suit2int();
        if (face1 < face2) return -1;
        if (face1 > face2) return +1;
        if (suit1 < suit2) return -1;
        if (suit1 > suit2) return +1;
        return 0;
    }  
    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int suit1 = c1.suit2int();
            int suit2 = c2.suit2int();
            if (suit1 < suit2) return -1;
            if (suit1 > suit2) return +1;
            return 0;
        }
    }   
    public static void main(String[] args){
        Card[] test= new Card[2];
        test[0] = new Card(""A"",""Spades"");
        test[1] = new Card(""8"",""Spades"");
        System.out.println(test[0].compareTo(test[1]));
        System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
    }
}
    

@9a7091532c6f2327546bf6814eaab70e@"
"r04945008","0","0.63","108144","@372353ddb355a0503c43ea7b6db70db2@import java.util.Comparator; 
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }
    
    public int getValue(){
        int a=0;
        if(this.suit == ""Spades"") return a=4;
        if(this.suit == ""Hearts"") return a=3;
        if(this.suit == ""Diamonds"") return a=2;
        if(this.suit == ""Clubs"") return a=1;
        return a=0;
    }
    public int getValue2(){
        int a=0;
        if(this.face == ""A"") return a=13;
        if(this.face == ""K"") return a=12;
        if(this.face == ""Q"") return a=11;
        if(this.face == ""J"") return a=10;
        if(this.face == ""10"") return a=9;
        if(this.face == ""9"") return a=8;
        if(this.face == ""8"") return a=7;
        if(this.face == ""7"") return a=6;
        if(this.face == ""6"") return a=5;
        if(this.face == ""5"") return a=4;
        if(this.face == ""4"") return a=3;
        if(this.face == ""3"") return a=2;
        if(this.face == ""2"") return a=1;
        return a=0;
    }
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int a,b,c,d;
            a=this.getValue2();
            b=that.getValue2();
            c=this.getValue();
            d=that.getValue();
            if(a<b) return -1;
            if(a>b) return +1;
            if(c<d) return -1;
            if(c>d) return +1;
            return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int a,b;
            a=c1.getValue();
            b=c2.getValue();
            if(a<b) return -1;
            if(a>b) return +1;
            return 0;
        }
    }   
    public static void main(String[] args){
        Card[] test= new Card[2];
        test[0] = new Card(""A"",""Spades"");
        test[1] = new Card(""8"",""Spades"");
        System.out.println(test[0].compareTo(test[1]));
        System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
    }
}
@372353ddb355a0503c43ea7b6db70db2@"
"r04945008","5","0.132","110592","@0f06b41baf88cef371b2e07ab61291ac@import java.util.Comparator; 
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }
    
    public int getValue(){
        int a=0;
        if(this.suit.equals(""Spades"")) return a=4;
        if(this.suit.equals(""Hearts"")) return a=3;
        if(this.suit.equals(""Diamonds"")) return a=2;
        if(this.suit.equals(""Clubs"")) return a=1;
        return a=0;
    }
    public int getValue2(){
        int a=0;
        if(this.face.equals(""A"")) return a=13;
        if(this.face.equals(""K"")) return a=12;
        if(this.face.equals(""Q"")) return a=11;
        if(this.face.equals(""J"")) return a=10;
        if(this.face.equals(""10"")) return a=9;
        if(this.face.equals(""9"")) return a=8;
        if(this.face.equals(""8"")) return a=7;
        if(this.face.equals(""7"")) return a=6;
        if(this.face.equals(""6"")) return a=5;
        if(this.face.equals(""5"")) return a=4;
        if(this.face.equals(""4"")) return a=3;
        if(this.face.equals(""3"")) return a=2;
        if(this.face.equals(""2"")) return a=1;
        return a=0;
    }
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int a,b,c,d;
            a=this.getValue2();
            b=that.getValue2();
            c=this.getValue();
            d=that.getValue();
            if(a<b) return -1;
            if(a>b) return +1;
            if(c<d) return -1;
            if(c>d) return +1;
            return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int a,b;
            a=c1.getValue();
            b=c2.getValue();
            if(a<b) return -1;
            if(a>b) return +1;
            return 0;
        }
    }   
    public static void main(String[] args){
        Card[] test= new Card[2];
        test[0] = new Card(""A"",""Spades"");
        test[1] = new Card(""8"",""Spades"");
        System.out.println(test[0].compareTo(test[1]));
        System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));
    }
}
@0f06b41baf88cef371b2e07ab61291ac@"
"r04631013","0","0.71","111728","@3312a89c26f1bafca9db752ea9abd1c1@import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int a = 0;
        int b = 0;
        int ind_a = 0;
        int ind_b = 0;

        String d = new String(""2 3 4 5 6 7 8 9 10 J Q K A"");
        String[] dArray = d.split("" "");

        switch (this.suit) {
            case ""Spades"": {
                a = 4;
                break;
            }
            case ""Hearts"": {
                a = 3;
                break;
            }
            case ""Dimonds"": {
                a = 2;
                break;
            }
            case ""Clubs"": {
                a = 1;
                break;
            }
        }
        System.out.printf(""%s\n "", this, suit);
        if (that.suit == ""Spades"") {
            b = 4;
        } else if (that.suit == ""Hearts"") {
            b = 3;
        } else if (that.suit == ""Dimonds"") {
            b = 2;
        } else if (that.suit == ""Clubs"") {
            b = 1;
        }
        if (a < b) {
            return -1;
        } else if (a > b) {
            return 1;
        } else {

            for (int i = 0; i < dArray.length; i++) {
                if (dArray[i].equals(this.face)) {
                    ind_a = i;
                    break;
                }
            }
            for (int i = 0; i < dArray.length; i++) {
                if (dArray[i].equals(that.face)) {
                    ind_b = i;
                    break;
                }
            }
            if (ind_a < ind_b) {
                return -1;
            }
            if (ind_a > ind_b) {
                return 1;
            } else {
                return 0;
            }

        }

    }

// TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int ind_a = 0;
            int ind_b = 0;

            String d = new String(""Clubs Dimonds Hearts Spades"");
            String[] dArray = d.split("" "");
            for (int i = 0; i < dArray.length; i++) {
                if (dArray[i].equals(c1.suit)) {
                    ind_a = i;
                    break;
                }
            }
//            System.out.printf(""%d\n "", ind_a);
            for (int i = 0; i < dArray.length; i++) {
                if (dArray[i].equals(c2.suit)) {
                    ind_b = i;
                    break;
                }
            }
            if (ind_a < ind_b) {
                return -1;
            }
            if (ind_a > ind_b) {
                return 1;
            } else {
                return 0;
            }

        }
    }

    public static void main(String[] args) {
        String mm = """";
        Card trysee = new Card(""3"", ""Hearts"");
        Card tryha = new Card(""3"", ""Clubs"");

        System.out.print(Card.SUIT_ORDER.compare(trysee, tryha));
    }
}

@3312a89c26f1bafca9db752ea9abd1c1@"
"r04631013","0","0.67","111616","@ea6157a2256377cc0646a33ff9c32569@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int a = 0;
        int b = 0;
        int ind_a = 0;
        int ind_b = 0;

        String d = new String(""2 3 4 5 6 7 8 9 10 J Q K A"");
        String[] dArray = d.split("" "");

        switch (this.suit) {
            case ""Spades"": {
                a = 4;
                break;
            }
            case ""Hearts"": {
                a = 3;
                break;
            }
            case ""Diamonds"": {
                a = 2;
                break;
            }
            case ""Clubs"": {
                a = 1;
                break;
            }
        }
        System.out.printf(""%s\n "", this, suit);
        if (that.suit == ""Spades"") {
            b = 4;
        } else if (that.suit == ""Hearts"") {
            b = 3;
        } else if (that.suit == ""Diamonds"") {
            b = 2;
        } else if (that.suit == ""Clubs"") {
            b = 1;
        }
        if (a < b) {
            return -1;
        } else if (a > b) {
            return 1;
        } else {

            for (int i = 0; i < dArray.length; i++) {
                if (dArray[i].equals(this.face)) {
                    ind_a = i;
                    break;
                }
            }
            for (int i = 0; i < dArray.length; i++) {
                if (dArray[i].equals(that.face)) {
                    ind_b = i;
                    break;
                }
            }
            if (ind_a < ind_b) {
                return -1;
            }
            if (ind_a > ind_b) {
                return 1;
            } else {
                return 0;
            }

        }

    }

// TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int ind_a = 0;
            int ind_b = 0;

            String d = new String(""Clubs Diamonds Hearts Spades"");
            String[] dArray = d.split("" "");
            for (int i = 0; i < dArray.length; i++) {
                if (dArray[i].equals(c1.suit)) {
                    ind_a = i;
                    break;
                }
            }
//            System.out.printf(""%d\n "", ind_a);
            for (int i = 0; i < dArray.length; i++) {
                if (dArray[i].equals(c2.suit)) {
                    ind_b = i;
                    break;
                }
            }
            if (ind_a < ind_b) {
                return -1;
            }
            if (ind_a > ind_b) {
                return 1;
            } else {
                return 0;
            }

        }
    }


}
@ea6157a2256377cc0646a33ff9c32569@"
"r04631013","0","0.68","111984","@5308c3102583688808cb902db96e477c@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int a = 0;
        int b = 0;
        int ind_a = 0;
        int ind_b = 0;

        String d = new String(""2 3 4 5 6 7 8 9 10 J Q K A"");
        String[] dArray = d.split("" "");
        for (int i = 0; i < dArray.length; i++) {
            if (dArray[i].equals(this.face)) {
                ind_a = i;
                break;
            }
        }
        for (int i = 0; i < dArray.length; i++) {
            if (dArray[i].equals(that.face)) {
                ind_b = i;
                break;
            }
        }
        if (ind_a < ind_b) {
            return -1;
        }
        if (ind_a > ind_b) {
            return 1;
        } else {
            switch (this.suit) {
                case ""Spades"": {
                    a = 4;
                    break;
                }
                case ""Hearts"": {
                    a = 3;
                    break;
                }
                case ""Diamonds"": {
                    a = 2;
                    break;
                }
                case ""Clubs"": {
                    a = 1;
                    break;
                }
            }
            System.out.printf(""%s\n "", this, suit);
            if (that.suit == ""Spades"") {
                b = 4;
            } else if (that.suit == ""Hearts"") {
                b = 3;
            } else if (that.suit == ""Diamonds"") {
                b = 2;
            } else if (that.suit == ""Clubs"") {
                b = 1;
            }
            if (a < b) {
                return -1;
            }
            if (a > b) {
                return 1;
            } else {
                return 0;
            }
        }

    }

// TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int ind_a = 0;
            int ind_b = 0;

            String d = new String(""Clubs Diamonds Hearts Spades"");
            String[] dArray = d.split("" "");
            for (int i = 0; i < dArray.length; i++) {
                if (dArray[i].equals(c1.suit)) {
                    ind_a = i;
                    break;
                }
            }
//            System.out.printf(""%d\n "", ind_a);
            for (int i = 0; i < dArray.length; i++) {
                if (dArray[i].equals(c2.suit)) {
                    ind_b = i;
                    break;
                }
            }
            if (ind_a < ind_b) {
                return -1;
            }
            if (ind_a > ind_b) {
                return 1;
            } else {
                return 0;
            }

        }
    }

    public static void main(String[] args) {
        String mm = """";
        Card trysee = new Card(""2"", ""Hearts"");
        Card tryha = new Card(""3"", ""Clubs"");

//        System.out.print(Card.SUIT_ORDER.compare(trysee, tryha));
        System.out.print(trysee.compareTo(tryha));
    }
}

@5308c3102583688808cb902db96e477c@"
"r04631013","0","0.67","116992","@3ba9f80c21762dfe8b779658b567723c@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int a = 0;
        int b = 0;
        int ind_a = 0;
        int ind_b = 0;

        String d = new String(""2 3 4 5 6 7 8 9 10 J Q K A"");
        String[] dArray = d.split("" "");
        for (int i = 0; i < dArray.length; i++) {
            if (dArray[i].equals(this.face)) {
                ind_a = i;
                break;
            }
        }
        for (int i = 0; i < dArray.length; i++) {
            if (dArray[i].equals(that.face)) {
                ind_b = i;
                break;
            }
        }
        if (ind_a < ind_b) {
            return -1;
        }
        if (ind_a > ind_b) {
            return 1;
        } else {
            switch (this.suit) {
                case ""Spades"": {
                    a = 4;
                    break;
                }
                case ""Hearts"": {
                    a = 3;
                    break;
                }
                case ""Diamonds"": {
                    a = 2;
                    break;
                }
                case ""Clubs"": {
                    a = 1;
                    break;
                }
            }

            if (that.suit == ""Spades"") {
                b = 4;
            } else if (that.suit == ""Hearts"") {
                b = 3;
            } else if (that.suit == ""Diamonds"") {
                b = 2;
            } else if (that.suit == ""Clubs"") {
                b = 1;
            }
            if (a < b) {
                return -1;
            }
            if (a > b) {
                return 1;
            } else {
                return 0;
            }

        }

    }

// TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int ind_a = 0;
            int ind_b = 0;

            String d = new String(""Clubs Diamonds Hearts Spades"");
            String[] dArray = d.split("" "");
            for (int i = 0; i < dArray.length; i++) {
                if (dArray[i].equals(c1.suit)) {
                    ind_a = i;
                    break;
                }
            }
//            System.out.printf(""%d\n "", ind_a);
            for (int i = 0; i < dArray.length; i++) {
                if (dArray[i].equals(c2.suit)) {
                    ind_b = i;
                    break;
                }
            }
            if (ind_a < ind_b) {
                return -1;
            }
            if (ind_a > ind_b) {
                return 1;
            } else {
                return 0;
            }

        }
    }

    public static void main(String[] args) {
        String mm = """";
        Card trysee = new Card(""5"", ""Spades"");
        Card tryha = new Card(""5"", ""Spades"");

//        System.out.print(Card.SUIT_ORDER.compare(trysee, tryha));
        System.out.print(trysee.compareTo(tryha));
    }
}
@3ba9f80c21762dfe8b779658b567723c@"
"r04631013","0","0.67","112624","@412b7e14809ee92f7255096fc3648dd6@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int a = 0;
        int b = 0;
        int ind_a = 0;
        int ind_b = 0;

        String d = ""2 3 4 5 6 7 8 9 10 J Q K A"";
        String[] dArray = d.split("" "");
        for (int i = 0; i < dArray.length; i++) {
            if (dArray[i].equals(this.face)) {
                ind_a = i;
                break;
            }
        }
        for (int i = 0; i < dArray.length; i++) {
            if (dArray[i].equals(that.face)) {
                ind_b = i;
                break;
            }
        }
        if (ind_a < ind_b) {
            return -1;
        }
        if (ind_a > ind_b) {
            return 1;
        } else {
            switch (this.suit) {
                case ""Spades"": {
                    a = 4;
                    break;
                }
                case ""Hearts"": {
                    a = 3;
                    break;
                }
                case ""Diamonds"": {
                    a = 2;
                    break;
                }
                case ""Clubs"": {
                    a = 1;
                    break;
                }
            }

            if (that.suit == ""Spades"") {
                b = 4;
            } else if (that.suit == ""Hearts"") {
                b = 3;
            } else if (that.suit == ""Diamonds"") {
                b = 2;
            } else if (that.suit == ""Clubs"") {
                b = 1;
            }
            if (a < b) {
                return -1;
            }
            if (a > b) {
                return 1;
            } else {
                return 0;
            }

        }

    }

// TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int ind_a = 0;
            int ind_b = 0;

            String d = new String(""Clubs Diamonds Hearts Spades"");
            String[] dArray = d.split("" "");
            for (int i = 0; i < dArray.length; i++) {
                if (dArray[i].equals(c1.suit)) {
                    ind_a = i;
                    break;
                }
            }

            for (int i = 0; i < dArray.length; i++) {
                if (dArray[i].equals(c2.suit)) {
                    ind_b = i;
                    break;
                }
            }
            if (ind_a < ind_b) {
                return -1;
            }
            if (ind_a > ind_b) {
                return 1;
            } else {
                return 0;
            }

        }
    }


}
@412b7e14809ee92f7255096fc3648dd6@"
"r04631013","0","0.68","113488","@5a216e48cfbcf42f3a40acae85ada460@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int a = 0;
        int b = 0;
        int ind_a = 0;
        int ind_b = 0;

        String d = ""2 3 4 5 6 7 8 9 10 J Q K A"";
        String[] dArray = d.split("" "");
        for (int i = 0; i < dArray.length; i++) {
            if (dArray[i].equals(this.face)) {
                ind_a = i;
                break;
            }
        }
        for (int i = 0; i < dArray.length; i++) {
            if (dArray[i].equals(that.face)) {
                ind_b = i;
                break;
            }
        }
        if (ind_a < ind_b) {
            return -1;
        } else if (ind_a > ind_b) {
            return 1;
        } else {
            switch (this.suit) {
                case ""Spades"": {
                    a = 4;
                    break;
                }
                case ""Hearts"": {
                    a = 3;
                    break;
                }
                case ""Diamonds"": {
                    a = 2;
                    break;
                }
                case ""Clubs"": {
                    a = 1;
                    break;
                }
            }

            if (that.suit == ""Spades"") {
                b = 4;
            } else if (that.suit == ""Hearts"") {
                b = 3;
            } else if (that.suit == ""Diamonds"") {
                b = 2;
            } else if (that.suit == ""Clubs"") {
                b = 1;
            }
            if (a < b) {
                return -1;
            } else if (a > b) {
                return 1;
            } else {
                return 0;
            }

        }

    }

// TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int ind_a = 0;
            int ind_b = 0;

            String d = new String(""Clubs Diamonds Hearts Spades"");
            String[] dArray = d.split("" "");
            for (int i = 0; i < dArray.length; i++) {
                if (dArray[i].equals(c1.suit)) {
                    ind_a = i;
                    break;
                }
            }
//            System.out.printf(""%d\n "", ind_a);
            for (int i = 0; i < dArray.length; i++) {
                if (dArray[i].equals(c2.suit)) {
                    ind_b = i;
                    break;
                }
            }
            if (ind_a < ind_b) {
                return -1;
            } else if (ind_a > ind_b) {
                return 1;
            } else {
                return 0;
            }

        }
    }

}

@5a216e48cfbcf42f3a40acae85ada460@"
"r04631013","0","0.68","113392","@9589b9ac24338a8690097cc54a7c5573@import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; 
    private String suit; 

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }


    public String getFace() {
        return this.face;
    }

  
    public String getSuit() {
        return this.suit;
    }

 
    public int compareTo(Card that) {
        
        int a = 0;
        int b = 0;
        int ind_a = 0;
        int ind_b = 0;

        String d = ""2 3 4 5 6 7 8 9 10 J Q K A"";
        String[] dArray = d.split("" "");
        for (int i = 0; i < dArray.length; i++) {
            if (dArray[i].equals(this.face)) {
                ind_a = i;
                break;
            }
        }
        for (int i = 0; i < dArray.length; i++) {
            if (dArray[i].equals(that.face)) {
                ind_b = i;
                break;
            }
        }
        if (ind_a < ind_b) {
            return -1;
        } else if (ind_a > ind_b) {
            return 1;
        } else {
            switch (this.suit) {
                case ""Spades"": {
                    a = 4;
                    break;
                }
                case ""Hearts"": {
                    a = 3;
                    break;
                }
                case ""Diamonds"": {
                    a = 2;
                    break;
                }
                case ""Clubs"": {
                    a = 1;
                    break;
                }
            }

            if (that.suit == ""Spades"") {
                b = 4;
            } else if (that.suit == ""Hearts"") {
                b = 3;
            } else if (that.suit == ""Diamonds"") {
                b = 2;
            } else if (that.suit == ""Clubs"") {
                b = 1;
            }
            if (a < b) {
                return -1;
            } else if (a > b) {
                return 1;
            } else {
                return 0;
            }

        }

    }


    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
           
            int ind_a = 0;
            int ind_b = 0;

            String d = new String(""Clubs Diamonds Hearts Spades"");
            String[] dArray = d.split("" "");
            for (int i = 0; i < dArray.length; i++) {
                if (dArray[i].equals(c1.suit)) {
                    ind_a = i;
                    break;
                }
            }

            for (int i = 0; i < dArray.length; i++) {
                if (dArray[i].equals(c2.suit)) {
                    ind_b = i;
                    break;
                }
            }
            if (ind_a < ind_b) {
                return -1;
            } else if (ind_a > ind_b) {
                return 1;
            } else {
                return 0;
            }

        }
    }


}

@9589b9ac24338a8690097cc54a7c5573@"
"r04631013","5","0.132","112880","@aec6e5e35d8f42b4b9bfcd90dcffa629@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS
    public String getSuit() {
        return this.suit;
    }

    // TODO
    @Override
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int a = 0;
        int b = 0;
        int ind_a = 0;
        int ind_b = 0;

        String d = ""2 3 4 5 6 7 8 9 10 J Q K A"";
        String[] dArray = d.split("" "");
        for (int i = 0; i < dArray.length; i++) {
            if (dArray[i].equals(this.face)) {
                ind_a = i;
                break;
            }
        }
        for (int i = 0; i < dArray.length; i++) {
            if (dArray[i].equals(that.face)) {
                ind_b = i;
                break;
            }
        }
        if (ind_a < ind_b) {
            return -1;
        } else if (ind_a > ind_b) {
            return 1;
        } else {
            switch (this.suit) {
                case ""Spades"": {
                    a = 4;
                    break;
                }
                case ""Hearts"": {
                    a = 3;
                    break;
                }
                case ""Diamonds"": {
                    a = 2;
                    break;
                }
                case ""Clubs"": {
                    a = 1;
                    break;
                }
            }

            switch (that.suit) {
                case ""Spades"":
                    b = 4;
                    break;
                case ""Hearts"":
                    b = 3;
                    break;
                case ""Diamonds"":
                    b = 2;
                    break;
                case ""Clubs"":
                    b = 1;
                    break;
            }
            if (a < b) {
                return -1;
            } else if (a > b) {
                return 1;
            } else {
                return 0;
            }

        }

    }

// TODO
    private static class SuitOrder implements Comparator<Card> {

        @Override
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int ind_a = 0;
            int ind_b = 0;

            String d = ""Clubs Diamonds Hearts Spades"";
            String[] dArray = d.split("" "");
            for (int i = 0; i < dArray.length; i++) {
                if (dArray[i].equals(c1.suit)) {
                    ind_a = i;
                    break;
                }
            }
//            System.out.printf(""%d\n "", ind_a);
            for (int i = 0; i < dArray.length; i++) {
                if (dArray[i].equals(c2.suit)) {
                    ind_b = i;
                    break;
                }
            }
            if (ind_a < ind_b) {
                return -1;
            } else if (ind_a > ind_b) {
                return 1;
            } else {
                return 0;
            }

        }
    }


}

@aec6e5e35d8f42b4b9bfcd90dcffa629@"
"r04921105","0","0.65","111616","@8b53c782485787bb530100a97b34aad4@
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(suittonum(this)>suittonum(that))
            return 1;
        
        else if(suittonum(this)<suittonum(that))
            return -1;
        
        else if(facetonum(this)>facetonum(that))
            return 1;
        
        else if(facetonum(this)<facetonum(that))
            return -1;
        else 
            return 0;
          
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if(suittonum(c1)>suittonum(c2))
            return 1;
        
        else if(suittonum(c1)<suittonum(c2))
            return -1; 
        else
            return 0;
        }
    }
    private static int suittonum(Card c){
        switch(c.suit){
        case(""Spades ""):
            return 4;
        case(""Hearts""):
            return 3;
        case(""Diamonds ""):
            return 2;
        case(""Clubs""):
            return 1;
        default:
            return 0;
        
        }   
    }
    private static int facetonum(Card c){
        switch(c.face){
            case(""A""):
              return 14;
            case(""K""):
                return 13;
            case(""Q""):
                return 12;
            case(""J""):
                return 11;
            default:
                return Integer.parseInt(c.face);
                                      
        }
    }
    

    
}


@8b53c782485787bb530100a97b34aad4@"
"r04921105","0","0.62","111584","@73f50c1babf5ddcc31a6eda98d48d386@
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(facetonum(this)>facetonum(that))
            return 1;
        
        else if(facetonum(this)<facetonum(that))
            return -1;
        
        else if(suittonum(this)>suittonum(that))
            return 1;
        
        else if(suittonum(this)<suittonum(that))
            return -1;
        else 
            return 0;
          
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if(suittonum(c1)>suittonum(c2))
            return 1;
        
        else if(suittonum(c1)<suittonum(c2))
            return -1; 
        else
            return 0;
        }
    }
    private static int suittonum(Card c){
        switch(c.suit){
        case(""Spades ""):
            return 4;
        case(""Hearts""):
            return 3;
        case(""Diamonds ""):
            return 2;
        case(""Clubs""):
            return 1;
        default:
            return 0;
        
        }   
    }
    private static int facetonum(Card c){
        switch(c.face){
            case(""A""):
              return 14;
            case(""K""):
                return 13;
            case(""Q""):
                return 12;
            case(""J""):
                return 11;
            default:
                return Integer.parseInt(c.face);
                                      
        }
    }
    

    
}


@73f50c1babf5ddcc31a6eda98d48d386@"
"b03611015","0","0","0","@db7532b85f620c3376af1042487a50bf@
import java.util.Comparator;




public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        
        if(that.face == ""A"")
            that.face = ""14"";
        if(that.face == ""J"")
            that.face = ""11"";
        if(that.face == ""Q"")
            that.face = ""12"";
        if(that.face == ""K"")
            that.face = ""13"";
        if(that.suit == ""Spades"")
            that.suit =  ""0.4"";
        if(that.suit == ""Hearts"")
            that.suit = ""3"";
        if(that.suit == ""Diamonds"")
            that.suit = ""2"";
        if(that.suit == ""Clubs"")
            that.suit = ""1"";
        if(this.face==""A"")
            this.face = ""14"";
        if(this.face==""K"")
            this.face = ""13"";
        if(this.face==""Q"")
            this.face = ""12"";
        if(this.face==""J"")
            this.face = ""11"";
        if(this.face==""Spades"")
            this.face = ""0.4"";
        if(this.face==""Hearts"")
            this.face = ""0.3"";
        if(this.face==""Diamonds"")
            this.face = ""0.2"";
        if(this.face==""Clubs"")
            this.face = ""0.1"";
        
        if(Integer.parseInt(this.face+this.suit)>Integer.parseInt(that.face+that.suit))
            return 1;
        if(Integer.parseInt(this.face+this.suit)==Integer.parseInt(that.face+that.suit))
            return 0;
         if(Integer.parseInt(this.face+this.suit)<Integer.parseInt(that.face+that.suit))
            return -1;
        
         return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
           if(c1.suit==""Spades"")
               c1.suit=""4"";
           if(c1.suit==""Hearts"")
               c1.suit=""3"";
           if(c1.suit==""Diamonds"")
               c1.suit=""2"";
           if(c1.suit==""Clubs"")
               c1.suit=""1"";
           if(c2.suit==""Spades"")
               c2.suit=""4"";
           if(c2.suit==""Hearts"")
               c2.suit=""3"";
           if(c2.suit==""Diamonds"")
               c2.suit=""2"";
           if(c1.suit==""Clubs"")
               c2.suit=""1"";
           if(Integer.parseInt(c1.suit)>Integer.parseInt(c2.suit))
               return 1;
           if(Integer.parseInt(c1.suit)==Integer.parseInt(c2.suit))
               return 0;
           if(Integer.parseInt(c1.suit)<Integer.parseInt(c2.suit))
               return -1;
           
           return 0;
        }
    }   
}

@db7532b85f620c3376af1042487a50bf@"
"b03611015","0","0","0","@0d8d17f34549cb1b79cdee6c194bb0f0@



public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        
        if(that.face == ""A"")
            that.face = ""14"";
        if(that.face == ""J"")
            that.face = ""11"";
        if(that.face == ""Q"")
            that.face = ""12"";
        if(that.face == ""K"")
            that.face = ""13"";
        if(that.suit == ""Spades"")
            that.suit =  ""0.4"";
        if(that.suit == ""Hearts"")
            that.suit = ""3"";
        if(that.suit == ""Diamonds"")
            that.suit = ""2"";
        if(that.suit == ""Clubs"")
            that.suit = ""1"";
        if(this.face==""A"")
            this.face = ""14"";
        if(this.face==""K"")
            this.face = ""13"";
        if(this.face==""Q"")
            this.face = ""12"";
        if(this.face==""J"")
            this.face = ""11"";
        if(this.face==""Spades"")
            this.face = ""0.4"";
        if(this.face==""Hearts"")
            this.face = ""0.3"";
        if(this.face==""Diamonds"")
            this.face = ""0.2"";
        if(this.face==""Clubs"")
            this.face = ""0.1"";
        
        if(Integer.parseInt(this.face+this.suit)>Integer.parseInt(that.face+that.suit))
            return 1;
        if(Integer.parseInt(this.face+this.suit)==Integer.parseInt(that.face+that.suit))
            return 0;
         if(Integer.parseInt(this.face+this.suit)<Integer.parseInt(that.face+that.suit))
            return -1;
        
         return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
           if(c1.suit==""Spades"")
               c1.suit=""4"";
           if(c1.suit==""Hearts"")
               c1.suit=""3"";
           if(c1.suit==""Diamonds"")
               c1.suit=""2"";
           if(c1.suit==""Clubs"")
               c1.suit=""1"";
           if(c2.suit==""Spades"")
               c2.suit=""4"";
           if(c2.suit==""Hearts"")
               c2.suit=""3"";
           if(c2.suit==""Diamonds"")
               c2.suit=""2"";
           if(c1.suit==""Clubs"")
               c2.suit=""1"";
           if(Integer.parseInt(c1.suit)>Integer.parseInt(c2.suit))
               return 1;
           if(Integer.parseInt(c1.suit)==Integer.parseInt(c2.suit))
               return 0;
           if(Integer.parseInt(c1.suit)<Integer.parseInt(c2.suit))
               return -1;
           
           return 0;
        }
    }   
}

@0d8d17f34549cb1b79cdee6c194bb0f0@"
"b03611015","0","0.35","105264","@c140a17b68b0c95a4d66f853384f89dd@
import java.util.Comparator;




public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        
        if(that.face == ""A"")
            that.face = ""14"";
        if(that.face == ""J"")
            that.face = ""11"";
        if(that.face == ""Q"")
            that.face = ""12"";
        if(that.face == ""K"")
            that.face = ""13"";
        if(that.suit == ""Spades"")
            that.suit =  ""0.4"";
        if(that.suit == ""Hearts"")
            that.suit = ""3"";
        if(that.suit == ""Diamonds"")
            that.suit = ""2"";
        if(that.suit == ""Clubs"")
            that.suit = ""1"";
        if(this.face==""A"")
            this.face = ""14"";
        if(this.face==""K"")
            this.face = ""13"";
        if(this.face==""Q"")
            this.face = ""12"";
        if(this.face==""J"")
            this.face = ""11"";
        if(this.face==""Spades"")
            this.face = ""0.4"";
        if(this.face==""Hearts"")
            this.face = ""0.3"";
        if(this.face==""Diamonds"")
            this.face = ""0.2"";
        if(this.face==""Clubs"")
            this.face = ""0.1"";
        
        if(Integer.parseInt(this.face+this.suit)>Integer.parseInt(that.face+that.suit))
            return 1;
        if(Integer.parseInt(this.face+this.suit)==Integer.parseInt(that.face+that.suit))
            return 0;
         if(Integer.parseInt(this.face+this.suit)<Integer.parseInt(that.face+that.suit))
            return -1;
        
     
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
           if(c1.suit==""Spades"")
               c1.suit=""4"";
           if(c1.suit==""Hearts"")
               c1.suit=""3"";
           if(c1.suit==""Diamonds"")
               c1.suit=""2"";
           if(c1.suit==""Clubs"")
               c1.suit=""1"";
           if(c2.suit==""Spades"")
               c2.suit=""4"";
           if(c2.suit==""Hearts"")
               c2.suit=""3"";
           if(c2.suit==""Diamonds"")
               c2.suit=""2"";
           if(c1.suit==""Clubs"")
               c2.suit=""1"";
           if(Integer.parseInt(c1.suit)>Integer.parseInt(c2.suit))
               return 1;
           if(Integer.parseInt(c1.suit)==Integer.parseInt(c2.suit))
               return 0;
           if(Integer.parseInt(c1.suit)<Integer.parseInt(c2.suit))
               return -1;
           
         
        }
    }   
}

@c140a17b68b0c95a4d66f853384f89dd@"
"b03611015","0","0","0","@1a421f0326826578c2ea05a6fc0728c2@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (that.face == ""A"") {
            that.face = ""14"";
        }
        if (that.face == ""J"") {
            that.face = ""11"";
        }
        if (that.face == ""Q"") {
            that.face = ""12"";
        }
        if (that.face == ""K"") {
            that.face = ""13"";
        }
        if (that.suit == ""Spades"") {
            that.suit = ""0.4"";
        }
        if (that.suit == ""Hearts"") {
            that.suit = ""3"";
        }
        if (that.suit == ""Diamonds"") {
            that.suit = ""2"";
        }
        if (that.suit == ""Clubs"") {
            that.suit = ""1"";
        }
        if (this.face == ""A"") {
            this.face = ""14"";
        }
        if (this.face == ""K"") {
            this.face = ""13"";
        }
        if (this.face == ""Q"") {
            this.face = ""12"";
        }
        if (this.face == ""J"") {
            this.face = ""11"";
        }
        if (this.face == ""Spades"") {
            this.face = ""0.4"";
        }
        if (this.face == ""Hearts"") {
            this.face = ""0.3"";
        }
        if (this.face == ""Diamonds"") {
            this.face = ""0.2"";
        }
        if (this.face == ""Clubs"") {
            this.face = ""0.1"";
        }

        if (Double.parseDouble(this.face + this.suit) > Double.parseDouble(that.face + that.suit)) {
            return 1;
        }
        if (Double.parseDouble(this.face + this.suit) == Double.parseDouble(that.face + that.suit)) {
            return 0;
        }
        if (Double.parseDouble(this.face + this.suit) < Double.parseDouble(that.face + that.suit)) {
            return -1;
        }

        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (c1.suit == ""Spades"") {
                c1.suit = ""4"";
            }
            if (c1.suit == ""Hearts"") {
                c1.suit = ""3"";
            }
            if (c1.suit == ""Diamonds"") {
                c1.suit = ""2"";
            }
            if (c1.suit == ""Clubs"") {
                c1.suit = ""1"";
            }
            if (c2.suit == ""Spades"") {
                c2.suit = ""4"";
            }
            if (c2.suit == ""Hearts"") {
                c2.suit = ""3"";
            }
            if (c2.suit == ""Diamonds"") {
                c2.suit = ""2"";
            }
            if (c1.suit == ""Clubs"") {
                c2.suit = ""1"";
            }
            if (Double.parseDouble(c1.suit) > Double.parseDouble(c2.suit)) {
                return 1;
            }
            if (Double.parseDouble(c1.suit) ==Double.parseDouble(c2.suit)) {
                return 0;
            }
            if (Double.parseDouble(c1.suit) < Double.parseDouble(c2.suit)) {
                return -1;
            }

            return 0;
        }
    }
}

@1a421f0326826578c2ea05a6fc0728c2@"
"b03611015","0","0","0","@23b6b81f99981c2e3db5a6d4eccca029@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (that.face == ""A"") {
            that.face = ""14"";
        }
        if (that.face == ""J"") {
            that.face = ""11"";
        }
        if (that.face == ""Q"") {
            that.face = ""12"";
        }
        if (that.face == ""K"") {
            that.face = ""13"";
        }
        if (that.suit == ""Spades"") {
            that.suit = ""0.4"";
        }
        if (that.suit == ""Hearts"") {
            that.suit = ""0.3"";
        }
        if (that.suit == ""Diamonds"") {
            that.suit = ""0.2"";
        }
        if (that.suit == ""Clubs"") {
            that.suit = ""01"";
        }
        if (this.face == ""A"") {
            this.face = ""14"";
        }
        if (this.face == ""K"") {
            this.face = ""13"";
        }
        if (this.face == ""Q"") {
            this.face = ""12"";
        }
        if (this.face == ""J"") {
            this.face = ""11"";
        }
        if (this.suit == ""Spades"") {
            this.suit = ""0.4"";
        }
        if (this.suit == ""Hearts"") {
            this.suit = ""0.3"";
        }
        if (this.suit == ""Diamonds"") {
            this.suit = ""0.2"";
        }
        if (this.suit == ""Clubs"") {
            this.suit = ""0.1"";
        }

        if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )<(Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return -1;
        }

        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (c1.suit == ""Spades"") {
                c1.suit = ""4"";
            }
            if (c1.suit == ""Hearts"") {
                c1.suit = ""3"";
            }
            if (c1.suit == ""Diamonds"") {
                c1.suit = ""2"";
            }
            if (c1.suit == ""Clubs"") {
                c1.suit = ""1"";
            }
            if (c2.suit == ""Spades"") {
                c2.suit = ""4"";
            }
            if (c2.suit == ""Hearts"") {
                c2.suit = ""3"";
            }
            if (c2.suit == ""Diamonds"") {
                c2.suit = ""2"";
            }
            if (c1.suit == ""Clubs"") {
                c2.suit = ""1"";
            }
            if (Double.parseDouble(c1.suit) > Double.parseDouble(c2.suit)) {
                return 1;
            }
            if (Double.parseDouble(c1.suit) ==Double.parseDouble(c2.suit)) {
                return 0;
            }
            if (Double.parseDouble(c1.suit) < Double.parseDouble(c2.suit)) {
                return -1;
            }

            return 0;
        }
    }
}
//    public static void main(String[] args) throws Exception {
//      
//       Card A = new Card(""2"",""Diamonds"");
//       Card B = new Card(""3"",""Spades"");
//       
//       System.out.println(A.compareTo(B));
//       
//            
//    }
//    
//}
    

@23b6b81f99981c2e3db5a6d4eccca029@"
"b03611015","0","0","0","@6d1749664658e1cb45712f8d3c44eb44@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (that.face == ""A"") {
            that.face = ""14"";
        }
        if (that.face == ""J"") {
            that.face = ""11"";
        }
        if (that.face == ""Q"") {
            that.face = ""12"";
        }
        if (that.face == ""K"") {
            that.face = ""13"";
        }
        if (that.suit == ""Spades"") {
            that.suit = ""0.4"";
        }
        if (that.suit == ""Hearts"") {
            that.suit = ""0.3"";
        }
        if (that.suit == ""Diamonds"") {
            that.suit = ""0.2"";
        }
        if (that.suit == ""Clubs"") {
            that.suit = ""01"";
        }
        if (this.face == ""A"") {
            this.face = ""14"";
        }
        if (this.face == ""K"") {
            this.face = ""13"";
        }
        if (this.face == ""Q"") {
            this.face = ""12"";
        }
        if (this.face == ""J"") {
            this.face = ""11"";
        }
        if (this.suit == ""Spades"") {
            this.suit = ""0.4"";
        }
        if (this.suit == ""Hearts"") {
            this.suit = ""0.3"";
        }
        if (this.suit == ""Diamonds"") {
            this.suit = ""0.2"";
        }
        if (this.suit == ""Clubs"") {
            this.suit = ""0.1"";
        }

        if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )<(Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return -1;
        }

        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (c1.suit == ""Spades"") {
                c1.suit = ""4"";
            }
            if (c1.suit == ""Hearts"") {
                c1.suit = ""3"";
            }
            if (c1.suit == ""Diamonds"") {
                c1.suit = ""2"";
            }
            if (c1.suit == ""Clubs"") {
                c1.suit = ""1"";
            }
            if (c2.suit == ""Spades"") {
                c2.suit = ""4"";
            }
            if (c2.suit == ""Hearts"") {
                c2.suit = ""3"";
            }
            if (c2.suit == ""Diamonds"") {
                c2.suit = ""2"";
            }
            if (c1.suit == ""Clubs"") {
                c2.suit = ""1"";
            }
            if (Double.parseDouble(c1.suit) > Double.parseDouble(c2.suit)) {
                return 1;
            }
            if (Double.parseDouble(c1.suit) ==Double.parseDouble(c2.suit)) {
                return 0;
            }
            if (Double.parseDouble(c1.suit) < Double.parseDouble(c2.suit)) {
                return -1;
            }

            return 0;
        }
    }
    public static void main(String[] args) throws Exception {
      
      
       
            
    }
    
}
    

@6d1749664658e1cb45712f8d3c44eb44@"
"r04921105","5","0.128","111520","@8bc4fbb79e54cf9f5fc99ef4f19e7d9f@
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(facetonum(this)>facetonum(that))
            return 1;
        
        else if(facetonum(this)<facetonum(that))
            return -1;
        
        else if(suittonum(this)>suittonum(that))
            return 1;
        
        else if(suittonum(this)<suittonum(that))
            return -1;
        else 
            return 0;
          
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            //System.out.printf(""(%d,%d)"",suittonum(c1),suittonum(c2));          
            // complete this function so the Card can be sorted according to the suit
            if(suittonum(c1)>suittonum(c2))               
            return 1;       
        else if(suittonum(c1)<suittonum(c2))
            return -1; 
        else
            return 0;
        }
    }
    private static int suittonum(Card c){
        switch(c.suit){
        case(""Spades""):
            return 4;
        case(""Hearts""):
            return 3;
        case(""Diamonds""):
            return 2;
        case(""Clubs""):
            return 1;
        default:
            return 0;
        
        }   
    }
    private static int facetonum(Card c){
        switch(c.face){
            case(""A""):
              return 14;
            case(""K""):
                return 13;
            case(""Q""):
                return 12;
            case(""J""):
                return 11;
            default:
                return Integer.parseInt(c.face);
                                      
        }
    }
    

    
}


@8bc4fbb79e54cf9f5fc99ef4f19e7d9f@"
"r04522616","0","0","0","@c21bd7b0cb2fa9b98cd3056456bfa5e4@//import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        int thisFaceNumber=0;
        int thatFaceNumber=0;
        //
        int thisSuitNumber=0;
        int thatSuitNumber=0;        
        //
        if(this.face.equals(""A""))thisFaceNumber=14;
        if(this.face.equals(""K""))thisFaceNumber=13;
        if(this.face.equals(""Q""))thisFaceNumber=12;
        if(this.face.equals(""J""))thisFaceNumber=11;
        if(this.face.equals(""10""))thisFaceNumber=10;
        if(this.face.equals(""9""))thisFaceNumber=9;
        if(this.face.equals(""8""))thisFaceNumber=8;
        if(this.face.equals(""7""))thisFaceNumber=7;
        if(this.face.equals(""6""))thisFaceNumber=6;
        if(this.face.equals(""5""))thisFaceNumber=5;
        if(this.face.equals(""4""))thisFaceNumber=4;
        if(this.face.equals(""3""))thisFaceNumber=3;
        if(this.face.equals(""2""))thisFaceNumber=2;
        //
        if(that.face.equals(""A""))thatFaceNumber=14;
        if(that.face.equals(""K""))thatFaceNumber=13;
        if(that.face.equals(""Q""))thatFaceNumber=12;
        if(that.face.equals(""J""))thatFaceNumber=11;
        if(that.face.equals(""10""))thatFaceNumber=10;
        if(that.face.equals(""9""))thatFaceNumber=9;
        if(that.face.equals(""8""))thatFaceNumber=8;
        if(that.face.equals(""7""))thatFaceNumber=7;
        if(that.face.equals(""6""))thatFaceNumber=6;
        if(that.face.equals(""5""))thatFaceNumber=5;
        if(that.face.equals(""4""))thatFaceNumber=4;
        if(that.face.equals(""3""))thatFaceNumber=3;
        if(that.face.equals(""2""))thatFaceNumber=2;
        //
        if(this.suit.equals(""Spades""))thisSuitNumber=3;
        if(this.suit.equals(""Hearts""))thisSuitNumber=2;
        if(this.suit.equals(""Diamonds""))thisSuitNumber=1;
        if(this.suit.equals(""Clubs""))thisSuitNumber=0;
        //
        if(that.suit.equals(""Spades""))thatSuitNumber=3;
        if(that.suit.equals(""Hearts""))thatSuitNumber=2;
        if(that.suit.equals(""Diamonds""))thatSuitNumber=1;
        if(that.suit.equals(""Clubs""))thatSuitNumber=0;
        
        if(thisFaceNumber>thatFaceNumber)return 1;
        else if(thisFaceNumber<thatFaceNumber)return -1;
        else 
        {
            if(thisSuitNumber>thatSuitNumber)return 1;
            else if(thisSuitNumber<thatSuitNumber)return -1;
        }        
        
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            int thisSuitNumber=0;
            int thatSuitNumber=0;        
            //
            if(c1.suit.equals(""Spades""))thisSuitNumber=3;
            if(c1.suit.equals(""Hearts""))thisSuitNumber=2;
            if(c1.suit.equals(""Diamonds""))thisSuitNumber=1;
            if(c1.suit.equals(""Clubs""))thisSuitNumber=0;
            //
            if(c2.suit.equals(""Spades""))thatSuitNumber=3;
            if(c2.suit.equals(""Hearts""))thatSuitNumber=2;
            if(c2.suit.equals(""Diamonds""))thatSuitNumber=1;
            if(c2.suit.equals(""Clubs""))thatSuitNumber=0;
            //
            if(thisSuitNumber>thatSuitNumber)return 1;
            else if(thisSuitNumber<thatSuitNumber)return -1;
            else return 0;
            // complete this function so the Card can be sorted according to the suit
            
        }
    }   
}


@c21bd7b0cb2fa9b98cd3056456bfa5e4@"
"r04522616","5","0.132","111728","@f03410b6abc7494467ec75394db83aa6@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        int thisFaceNumber=0;
        int thatFaceNumber=0;
        //
        int thisSuitNumber=0;
        int thatSuitNumber=0;        
        //
        if(this.face.equals(""A""))thisFaceNumber=14;
        if(this.face.equals(""K""))thisFaceNumber=13;
        if(this.face.equals(""Q""))thisFaceNumber=12;
        if(this.face.equals(""J""))thisFaceNumber=11;
        if(this.face.equals(""10""))thisFaceNumber=10;
        if(this.face.equals(""9""))thisFaceNumber=9;
        if(this.face.equals(""8""))thisFaceNumber=8;
        if(this.face.equals(""7""))thisFaceNumber=7;
        if(this.face.equals(""6""))thisFaceNumber=6;
        if(this.face.equals(""5""))thisFaceNumber=5;
        if(this.face.equals(""4""))thisFaceNumber=4;
        if(this.face.equals(""3""))thisFaceNumber=3;
        if(this.face.equals(""2""))thisFaceNumber=2;
        //
        if(that.face.equals(""A""))thatFaceNumber=14;
        if(that.face.equals(""K""))thatFaceNumber=13;
        if(that.face.equals(""Q""))thatFaceNumber=12;
        if(that.face.equals(""J""))thatFaceNumber=11;
        if(that.face.equals(""10""))thatFaceNumber=10;
        if(that.face.equals(""9""))thatFaceNumber=9;
        if(that.face.equals(""8""))thatFaceNumber=8;
        if(that.face.equals(""7""))thatFaceNumber=7;
        if(that.face.equals(""6""))thatFaceNumber=6;
        if(that.face.equals(""5""))thatFaceNumber=5;
        if(that.face.equals(""4""))thatFaceNumber=4;
        if(that.face.equals(""3""))thatFaceNumber=3;
        if(that.face.equals(""2""))thatFaceNumber=2;
        //
        if(this.suit.equals(""Spades""))thisSuitNumber=3;
        if(this.suit.equals(""Hearts""))thisSuitNumber=2;
        if(this.suit.equals(""Diamonds""))thisSuitNumber=1;
        if(this.suit.equals(""Clubs""))thisSuitNumber=0;
        //
        if(that.suit.equals(""Spades""))thatSuitNumber=3;
        if(that.suit.equals(""Hearts""))thatSuitNumber=2;
        if(that.suit.equals(""Diamonds""))thatSuitNumber=1;
        if(that.suit.equals(""Clubs""))thatSuitNumber=0;
        
        if(thisFaceNumber>thatFaceNumber)return 1;
        else if(thisFaceNumber<thatFaceNumber)return -1;
        else 
        {
            if(thisSuitNumber>thatSuitNumber)return 1;
            else if(thisSuitNumber<thatSuitNumber)return -1;
        }        
        
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            int thisSuitNumber=0;
            int thatSuitNumber=0;        
            //
            if(c1.suit.equals(""Spades""))thisSuitNumber=3;
            if(c1.suit.equals(""Hearts""))thisSuitNumber=2;
            if(c1.suit.equals(""Diamonds""))thisSuitNumber=1;
            if(c1.suit.equals(""Clubs""))thisSuitNumber=0;
            //
            if(c2.suit.equals(""Spades""))thatSuitNumber=3;
            if(c2.suit.equals(""Hearts""))thatSuitNumber=2;
            if(c2.suit.equals(""Diamonds""))thatSuitNumber=1;
            if(c2.suit.equals(""Clubs""))thatSuitNumber=0;
            //
            if(thisSuitNumber>thatSuitNumber)return 1;
            else if(thisSuitNumber<thatSuitNumber)return -1;
            else return 0;
            // complete this function so the Card can be sorted according to the suit
            
        }
    }   
}


@f03410b6abc7494467ec75394db83aa6@"
"b03611015","0","0","0","@e76a2a1c14eb93ea837c54ff947654b4@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (that.face == ""A"") {
            that.face = ""14"";
        }
        if (that.face == ""J"") {
            that.face = ""11"";
        }
        if (that.face == ""Q"") {
            that.face = ""12"";
        }
        if (that.face == ""K"") {
            that.face = ""13"";
        }
        if (that.suit == ""Spades"") {
            that.suit = ""0.4"";
        }
        if (that.suit == ""Hearts"") {
            that.suit = ""0.3"";
        }
        if (that.suit == ""Diamonds"") {
            that.suit = ""0.2"";
        }
        if (that.suit == ""Clubs"") {
            that.suit = ""01"";
        }
        if (this.face == ""A"") {
            this.face = ""14"";
        }
        if (this.face == ""K"") {
            this.face = ""13"";
        }
        if (this.face == ""Q"") {
            this.face = ""12"";
        }
        if (this.face == ""J"") {
            this.face = ""11"";
        }
        if (this.suit == ""Spades"") {
            this.suit = ""0.4"";
        }
        if (this.suit == ""Hearts"") {
            this.suit = ""0.3"";
        }
        if (this.suit == ""Diamonds"") {
            this.suit = ""0.2"";
        }
        if (this.suit == ""Clubs"") {
            this.suit = ""0.1"";
        }

        if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )<(Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return -1;
        }

        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (c1.suit == ""Spades"") {
                c1.suit = ""4"";
            }
            if (c1.suit == ""Hearts"") {
                c1.suit = ""3"";
            }
            if (c1.suit == ""Diamonds"") {
                c1.suit = ""2"";
            }
            if (c1.suit == ""Clubs"") {
                c1.suit = ""1"";
            }
            if (c2.suit == ""Spades"") {
                c2.suit = ""4"";
            }
            if (c2.suit == ""Hearts"") {
                c2.suit = ""3"";
            }
            if (c2.suit == ""Diamonds"") {
                c2.suit = ""2"";
            }
            if (c1.suit == ""Clubs"") {
                c2.suit = ""1"";
            }
            if (Integer.parseInt(c1.suit) > Integer.parseInt(c2.suit)) {
                return 1;
            }
            if (Integer.parseInt(c1.suit) ==Integer.parseInt(c2.suit)) {
                return 0;
            }
            if (Integer.parseInt(c1.suit) < Integer.parseInt(c2.suit)) {
                return -1;
            }

            return 0;
        }
    }
    public static void main(String[] args) throws Exception {
      
       Card A = new Card(""2"",""Diamonds"");
       Card B = new Card(""3"",""Spades"");
       
       System.out.println(Card.SUIT_ORDER.compare(A,B));
       
            
    }
    
}
    

@e76a2a1c14eb93ea837c54ff947654b4@"
"b03611015","0","0","0","@72d935cfafc9a8c9d267748e9f487fb5@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (that.face == ""A"") {
            that.face = ""14"";
        }
        if (that.face == ""J"") {
            that.face = ""11"";
        }
        if (that.face == ""Q"") {
            that.face = ""12"";
        }
        if (that.face == ""K"") {
            that.face = ""13"";
        }
        if (that.suit == ""Spades"") {
            that.suit = ""0.4"";
        }
        if (that.suit == ""Hearts"") {
            that.suit = ""0.3"";
        }
        if (that.suit == ""Diamonds"") {
            that.suit = ""0.2"";
        }
        if (that.suit == ""Clubs"") {
            that.suit = ""01"";
        }
        if (this.face == ""A"") {
            this.face = ""14"";
        }
        if (this.face == ""K"") {
            this.face = ""13"";
        }
        if (this.face == ""Q"") {
            this.face = ""12"";
        }
        if (this.face == ""J"") {
            this.face = ""11"";
        }
        if (this.suit == ""Spades"") {
            this.suit = ""0.4"";
        }
        if (this.suit == ""Hearts"") {
            this.suit = ""0.3"";
        }
        if (this.suit == ""Diamonds"") {
            this.suit = ""0.2"";
        }
        if (this.suit == ""Clubs"") {
            this.suit = ""0.1"";
        }

        if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )<(Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return -1;
        }

        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (c1.suit == ""Spades"") {
                c1.suit = ""4"";
            }
            if (c1.suit == ""Hearts"") {
                c1.suit = ""3"";
            }
            if (c1.suit == ""Diamonds"") {
                c1.suit = ""2"";
            }
            if (c1.suit == ""Clubs"") {
                c1.suit = ""1"";
            }
            if (c2.suit == ""Spades"") {
                c2.suit = ""4"";
            }
            if (c2.suit == ""Hearts"") {
                c2.suit = ""3"";
            }
            if (c2.suit == ""Diamonds"") {
                c2.suit = ""2"";
            }
            if (c2.suit == ""Clubs"") {
                c2.suit = ""1"";
            }
            if (Integer.parseInt(c1.suit) > Integer.parseInt(c2.suit)) {
                return 1;
            }
            if (Integer.parseInt(c1.suit) ==Integer.parseInt(c2.suit)) {
                return 0;
            }
            if (Integer.parseInt(c1.suit) < Integer.parseInt(c2.suit)) {
                return -1;
            }

            return 0;
        }
    }
    public static void main(String[] args) throws Exception {
      
       Card A = new Card(""2"",""Diamonds"");
       Card B = new Card(""3"",""Spades"");
       
       System.out.println(Card.SUIT_ORDER.compare(A,B));
       
            
    }
    
}
    

@72d935cfafc9a8c9d267748e9f487fb5@"
"b03611015","0","0","0","@0ea9915183e305ee6196b2deebffc0e7@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (that.face == ""A"") {
            that.face = ""14"";
        }
        if (that.face == ""J"") {
            that.face = ""11"";
        }
        if (that.face == ""Q"") {
            that.face = ""12"";
        }
        if (that.face == ""K"") {
            that.face = ""13"";
        }
        if (that.suit == ""Spades"") {
            that.suit = ""0.4"";
        }
        if (that.suit == ""Hearts"") {
            that.suit = ""0.3"";
        }
        if (that.suit == ""Diamonds"") {
            that.suit = ""0.2"";
        }
        if (that.suit == ""Clubs"") {
            that.suit = ""01"";
        }
        if (this.face == ""A"") {
            this.face = ""14"";
        }
        if (this.face == ""K"") {
            this.face = ""13"";
        }
        if (this.face == ""Q"") {
            this.face = ""12"";
        }
        if (this.face == ""J"") {
            this.face = ""11"";
        }
        if (this.suit == ""Spades"") {
            this.suit = ""0.4"";
        }
        if (this.suit == ""Hearts"") {
            this.suit = ""0.3"";
        }
        if (this.suit == ""Diamonds"") {
            this.suit = ""0.2"";
        }
        if (this.suit == ""Clubs"") {
            this.suit = ""0.1"";
        }

        if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )<(Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return -1;
        }

        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (c1.suit == ""Spades"") {
                c1.suit = ""4"";
            }
            if (c1.suit == ""Hearts"") {
                c1.suit = ""3"";
            }
            if (c1.suit == ""Diamonds"") {
                c1.suit = ""2"";
            }
            if (c1.suit == ""Clubs"") {
                c1.suit = ""1"";
            }
            if (c2.suit == ""Spades"") {
                c2.suit = ""4"";
            }
            if (c2.suit == ""Hearts"") {
                c2.suit = ""3"";
            }
            if (c2.suit == ""Diamonds"") {
                c2.suit = ""2"";
            }
            if (c2.suit == ""Clubs"") {
                c2.suit = ""1"";
            }
            if (Integer.parseInt(c1.suit) > Integer.parseInt(c2.suit)) {
                return 1;
            }
            if (Integer.parseInt(c1.suit) ==Integer.parseInt(c2.suit)) {
                return 0;
            }
            if (Integer.parseInt(c1.suit) < Integer.parseInt(c2.suit)) {
                return -1;
            }

            return 0;
        }
    }
   
@0ea9915183e305ee6196b2deebffc0e7@"
"b03611015","0","0","0","@e2eb8e8794ca06337b449d68f96a73e2@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (that.face == ""A"") {
            that.face = ""14"";
        }
        if (that.face == ""J"") {
            that.face = ""11"";
        }
        if (that.face == ""Q"") {
            that.face = ""12"";
        }
        if (that.face == ""K"") {
            that.face = ""13"";
        }
        if (that.suit == ""Spades"") {
            that.suit = ""0.4"";
        }
        if (that.suit == ""Hearts"") {
            that.suit = ""0.3"";
        }
        if (that.suit == ""Diamonds"") {
            that.suit = ""0.2"";
        }
        if (that.suit == ""Clubs"") {
            that.suit = ""01"";
        }
        if (this.face == ""A"") {
            this.face = ""14"";
        }
        if (this.face == ""K"") {
            this.face = ""13"";
        }
        if (this.face == ""Q"") {
            this.face = ""12"";
        }
        if (this.face == ""J"") {
            this.face = ""11"";
        }
        if (this.suit == ""Spades"") {
            this.suit = ""0.4"";
        }
        if (this.suit == ""Hearts"") {
            this.suit = ""0.3"";
        }
        if (this.suit == ""Diamonds"") {
            this.suit = ""0.2"";
        }
        if (this.suit == ""Clubs"") {
            this.suit = ""0.1"";
        }

        if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )<(Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return -1;
        }

        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (c1.suit == ""Spades"") {
                c1.suit = ""4"";
            }
            if (c1.suit == ""Hearts"") {
                c1.suit = ""3"";
            }
            if (c1.suit == ""Diamonds"") {
                c1.suit = ""2"";
            }
            if (c1.suit == ""Clubs"") {
                c1.suit = ""1"";
            }
            if (c2.suit == ""Spades"") {
                c2.suit = ""4"";
            }
            if (c2.suit == ""Hearts"") {
                c2.suit = ""3"";
            }
            if (c2.suit == ""Diamonds"") {
                c2.suit = ""2"";
            }
            if (c2.suit == ""Clubs"") {
                c2.suit = ""1"";
            }
            if (Integer.parseInt(c1.suit) > Integer.parseInt(c2.suit)) {
                return 1;
            }
            if (Integer.parseInt(c1.suit) ==Integer.parseInt(c2.suit)) {
                return 0;
            }
            if (Integer.parseInt(c1.suit) < Integer.parseInt(c2.suit)) {
                return -1;
            }

            return 0;
        }
    }
//    public static void main(String[] args) throws Exception {
//      
//       Card A = new Card(""2"",""Diamonds"");
//       Card B = new Card(""3"",""Spades"");
//       
//       System.out.println(Card.SUIT_ORDER.compare(A,B));
//       
//            
//    }
    
}
    

@e2eb8e8794ca06337b449d68f96a73e2@"
"r03222054","0","0.65","113056","@2280e25efb34e967b8a1a97cd8418cc9@
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) 
    {
        int faceInt = faceToMap(that.face);
        int suitInt = faceToMap(that.suit);
        int thisFaceInt = faceToMap(this.face);
        int thisSuitInt = faceToMap(this.suit);
       
        if (thisFaceInt> faceInt)
            return 1;
        else if (thisFaceInt< faceInt)
            return -1;
        else if (thisSuitInt> suitInt)
            return 1;
        else if (thisSuitInt< suitInt)
            return -1;
        else return 0;
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
    }  
    public static int faceToMap(String faceStr)
    {
        if(isInteger(faceStr))
        {
            int key = Integer.parseInt(faceStr) ;
            return key;
        }
        
        else if (faceStr.equals(""A""))
            return 14;
        else if (faceStr.equals(""K""))
            return 13;
        else if (faceStr.equals(""Q""))
            return 12;
        else if(faceStr.equals(""J""))
            return 11;
            else 
            return 0;
    }
    
        public static int suitToMap(String suitStr)
    {

        if (suitStr.equals(""Spades""))
            return 3;
        else if (suitStr.equals(""Hearts""))
            return 2;
        else if (suitStr.equals(""Diamonds""))
            return 1;
        else if(suitStr.equals(""Clubs""))
            return 0;
            else 
            return 0;
    }
    
    public static boolean isInteger(String s) 
    {
    try { 
        Integer.parseInt(s); 
    } catch(NumberFormatException e) { 
        return false; 
    } catch(NullPointerException e) {
        return false;
    }
    // only got here if we didn't return false
    return true;
}
    

    // TODO
    
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) 
        {
            return suitToMap(c1.suit) - suitToMap(c2.suit); 
            // complete this function so the Card can be sorted according to the suit
          //  return 0;
        }
    }   
}

@2280e25efb34e967b8a1a97cd8418cc9@"
"r03222054","0","0.66","112928","@2a8cf47348cee31a202a615406532d48@
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) 
    {
        int faceInt = faceToMap(that.face);
        int suitInt = faceToMap(that.suit);
        int thisFaceInt = faceToMap(this.face);
        int thisSuitInt = faceToMap(this.suit);
       
        if (thisFaceInt> faceInt)
            return 1;
        else if (thisFaceInt< faceInt)
            return -1;
        else if (thisSuitInt> suitInt)
            return 1;
        else if (thisSuitInt< suitInt)
            return -1;
        else return 0;
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
    }  
    public static int faceToMap(String faceStr)
    {
        if(isInteger(faceStr))
        {
            int key = Integer.parseInt(faceStr) ;
            return key;
        }
        
        else if (faceStr.equals(""A""))
            return 14;
        else if (faceStr.equals(""K""))
            return 13;
        else if (faceStr.equals(""Q""))
            return 12;
        else if(faceStr.equals(""J""))
            return 11;
            else 
            return 0;
    }
    
        public static int suitToMap(String suitStr)
    {

        if (suitStr.equals(""Spades""))
            return 3;
        else if (suitStr.equals(""Hearts""))
            return 2;
        else if (suitStr.equals(""Diamonds""))
            return 1;
        else if(suitStr.equals(""Clubs""))
            return 0;
            else 
            return 0;
    }
    
    public static boolean isInteger(String s) 
    {
    try { 
        Integer.parseInt(s); 
    } catch(NumberFormatException e) { 
        return false; 
    } catch(NullPointerException e) {
        return false;
    }
    // only got here if we didn't return false
    return true;
}
    

    // TODO
    
    private static class SuitOrder implements Comparator<Card> {
        @Override
        public int compare(Card c1, Card c2) 
        {
            return suitToMap(c1.suit) - suitToMap(c2.suit); 
            // complete this function so the Card can be sorted according to the suit
          //  return 0;
        }
    }   
}

@2a8cf47348cee31a202a615406532d48@"
"r03222054","0","0.67","112976","@eee62d78b0ffc2e59bb51d061a2d2979@
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) 
    {
        int faceInt = faceToMap(that.face);
        int suitInt = faceToMap(that.suit);
        int thisFaceInt = faceToMap(this.face);
        int thisSuitInt = faceToMap(this.suit);
       
        if (thisFaceInt> faceInt)
            return 1;
        else if (thisFaceInt< faceInt)
            return -1;
        else if (thisSuitInt> suitInt)
            return 1;
        else if (thisSuitInt< suitInt)
            return -1;
        else return 0;
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
    }  
    public static int faceToMap(String faceStr)
    {
        if(isInteger(faceStr))
        {
            int key = Integer.parseInt(faceStr) ;
            return key;
        }
        
        else if (faceStr.equals(""A""))
            return 14;
        else if (faceStr.equals(""K""))
            return 13;
        else if (faceStr.equals(""Q""))
            return 12;
        else if(faceStr.equals(""J""))
            return 11;
            else 
            return 0;
    }
    

    public static boolean isInteger(String s) 
    {
    try { 
        Integer.parseInt(s); 
    } catch(NumberFormatException e) { 
        return false; 
    } catch(NullPointerException e) {
        return false;
    }
    // only got here if we didn't return false
    return true;
}
    

    // TODO
    
    private static class SuitOrder implements Comparator<Card> {
        @Override
        public int compare(Card c1, Card c2) 
        {
            int num1 = 0, num2 = 0;
        String suitStr = c1.getSuit();
        if (suitStr.equals(""Spades""))
            num1=  3;
        else if (suitStr.equals(""Hearts""))
            num1 =2;
        else if (suitStr.equals(""Diamonds""))
            num1=1;
        else if(suitStr.equals(""Clubs""))
            num1 = 0;
        
          String suitStr2 = c2.getSuit();
        if (suitStr2.equals(""Spades""))
            num2=  3;
        else if (suitStr2.equals(""Hearts""))
            num2 =2;
        else if (suitStr2.equals(""Diamonds""))
            num2=1;
        else if(suitStr2.equals(""Clubs""))
            num2 = 0;

            return num1 - num2;
            // complete this function so the Card can be sorted according to the suit
          //  return 0;
        }
    }   
}

@eee62d78b0ffc2e59bb51d061a2d2979@"
"r03222054","0","0.65","111008","@b0144e81131227b4e7f5880d871151f5@
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) 
    {
        int faceInt = faceToMap(that.getFace());
        int suitInt = faceToMap(that.getSuit());
        int thisFaceInt = faceToMap(this.getFace());
        int thisSuitInt = faceToMap(this.getSuit());
       
        if (thisFaceInt> faceInt)
            return 1;
        else if (thisFaceInt< faceInt)
            return -1;
        else if (thisSuitInt> suitInt)
            return 1;
        else if (thisSuitInt< suitInt)
            return -1;
        else return 0;
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
    }  
    public static int faceToMap(String faceStr)
    {
        if(isInteger(faceStr))
        {
            int key = Integer.parseInt(faceStr) ;
            return key;
        }
        
        else if (faceStr.equals(""A""))
            return 14;
        else if (faceStr.equals(""K""))
            return 13;
        else if (faceStr.equals(""Q""))
            return 12;
        else if(faceStr.equals(""J""))
            return 11;
            else 
            return 0;
    }
    

    public static boolean isInteger(String s) 
    {
    try { 
        Integer.parseInt(s); 
    } catch(NumberFormatException e) { 
        return false; 
    } catch(NullPointerException e) {
        return false;
    }
    // only got here if we didn't return false
    return true;
}
    

    // TODO
    
    private static class SuitOrder implements Comparator<Card> {
        @Override
        public int compare(Card c1, Card c2) 
        {
            int num1 = 0, num2 = 0;
        String suitStr = c1.getSuit();
        if (suitStr.equals(""Spades""))
            num1=  3;
        else if (suitStr.equals(""Hearts""))
            num1 =2;
        else if (suitStr.equals(""Diamonds""))
            num1=1;
        else if(suitStr.equals(""Clubs""))
            num1 = 0;
        
          String suitStr2 = c2.getSuit();
        if (suitStr2.equals(""Spades""))
            num2=  3;
        else if (suitStr2.equals(""Hearts""))
            num2 =2;
        else if (suitStr2.equals(""Diamonds""))
            num2=1;
        else if(suitStr2.equals(""Clubs""))
            num2 = 0;

            return num1 - num2;
            // complete this function so the Card can be sorted according to the suit
          //  return 0;
        }
    }   
}

@b0144e81131227b4e7f5880d871151f5@"
"r03222054","0","0.46","105248","@1d9e53398f82f5a3462b92168a100e09@
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) 
    {
        int faceInt1 = 0;// faceToMap(that.getFace());
        int faceInt2 = 0;
        String thisFace = this.getFace();
        String thatFace = that.getFace();
        
        if(thisFace.equals(""2""))
            faceInt1 = 2;
        if(thisFace.equals(""3""))
            faceInt1 = 3;
        if(thisFace.equals(""4""))
            faceInt1 = 4;
        if(thisFace.equals(""5""))
            faceInt1 = 5;
        if(thisFace.equals(""6""))
            faceInt1 = 6;
        if(thisFace.equals(""7""))
            faceInt1 = 7;
        if(thisFace.equals(""8""))
            faceInt1 = 8;
        if(thisFace.equals(""9""))
            faceInt1 = 9;
        if(thisFace.equals(""10""))
            faceInt1 = 10;
        if(thisFace.equals(""J""))
            faceInt1 = 11;
        if(thisFace.equals(""Q""))
            faceInt1 = 12;
        if(thisFace.equals(""K""))
            faceInt1 = 13;
        if(thisFace.equals(""A""))
            faceInt1 = 14;

              
        if(thatFace.equals(""2""))
            faceInt2 = 2;
        if(thatFace.equals(""3""))
            faceInt2 = 3;
        if(thatFace.equals(""4""))
            faceInt2 = 4;
        if(thatFace.equals(""5""))
            faceInt2 = 5;
        if(thatFace.equals(""6""))
            faceInt2 = 6;
        if(thatFace.equals(""7""))
            faceInt2 = 7;
        if(thatFace.equals(""8""))
            faceInt2 = 8;
        if(thatFace.equals(""9""))
            faceInt2 = 9;
        if(thatFace.equals(""10""))
            faceInt2 = 10;
        if(thatFace.equals(""J""))
            faceInt2 = 11;
        if(thatFace.equals(""Q""))
            faceInt2 = 12;
        if(thatFace.equals(""K""))
            faceInt2 = 13;
        if(thatFace.equals(""A""))
            faceInt2 = 14;
        

       
        if (faceInt1> faceInt2)
            return 1;
        else if (faceInt1< faceInt2)
            return -1;
        else if (SuitOrder.compare(this, that))
            return 1;
        else 
            return -1;
       // else return 0;
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
    }  

    


    // TODO
    
    private static class SuitOrder implements Comparator<Card> {
        @Override
        public int compare(Card c1, Card c2) 
        {
            int num1 = 0, num2 = 0;
        String suitStr = c1.getSuit();
        if (suitStr.equals(""Spades""))
            num1=  3;
        else if (suitStr.equals(""Hearts""))
            num1 =2;
        else if (suitStr.equals(""Diamonds""))
            num1=1;
        else if(suitStr.equals(""Clubs""))
            num1 = 0;
        
          String suitStr2 = c2.getSuit();
        if (suitStr2.equals(""Spades""))
            num2=  3;
        else if (suitStr2.equals(""Hearts""))
            num2 =2;
        else if (suitStr2.equals(""Diamonds""))
            num2=1;
        else if(suitStr2.equals(""Clubs""))
            num2 = 0;

            return num1 - num2;
            // complete this function so the Card can be sorted according to the suit
          //  return 0;
        }
    }   
}

@1d9e53398f82f5a3462b92168a100e09@"
"r03222054","0","0.46","105248","@e1e68773ed7aa71bc64618250634169f@
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) 
    {
        int faceInt1 = 0;// faceToMap(that.getFace());
        int faceInt2 = 0;
        String thisFace = this.getFace();
        String thatFace = that.getFace();
        
        if(thisFace.equals(""2""))
            faceInt1 = 2;
        if(thisFace.equals(""3""))
            faceInt1 = 3;
        if(thisFace.equals(""4""))
            faceInt1 = 4;
        if(thisFace.equals(""5""))
            faceInt1 = 5;
        if(thisFace.equals(""6""))
            faceInt1 = 6;
        if(thisFace.equals(""7""))
            faceInt1 = 7;
        if(thisFace.equals(""8""))
            faceInt1 = 8;
        if(thisFace.equals(""9""))
            faceInt1 = 9;
        if(thisFace.equals(""10""))
            faceInt1 = 10;
        if(thisFace.equals(""J""))
            faceInt1 = 11;
        if(thisFace.equals(""Q""))
            faceInt1 = 12;
        if(thisFace.equals(""K""))
            faceInt1 = 13;
        if(thisFace.equals(""A""))
            faceInt1 = 14;

              
        if(thatFace.equals(""2""))
            faceInt2 = 2;
        if(thatFace.equals(""3""))
            faceInt2 = 3;
        if(thatFace.equals(""4""))
            faceInt2 = 4;
        if(thatFace.equals(""5""))
            faceInt2 = 5;
        if(thatFace.equals(""6""))
            faceInt2 = 6;
        if(thatFace.equals(""7""))
            faceInt2 = 7;
        if(thatFace.equals(""8""))
            faceInt2 = 8;
        if(thatFace.equals(""9""))
            faceInt2 = 9;
        if(thatFace.equals(""10""))
            faceInt2 = 10;
        if(thatFace.equals(""J""))
            faceInt2 = 11;
        if(thatFace.equals(""Q""))
            faceInt2 = 12;
        if(thatFace.equals(""K""))
            faceInt2 = 13;
        if(thatFace.equals(""A""))
            faceInt2 = 14;
        

       
        if (faceInt1> faceInt2)
            return 1;
        else if (faceInt1< faceInt2)
            return -1;
        else 
            return SuiitOrder.compare(this, that);

       // else return 0;
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
    }  

    


    // TODO
    
    private static class SuitOrder implements Comparator<Card> {
        @Override
        public int compare(Card c1, Card c2) 
        {
            int num1 = 0, num2 = 0;
        String suitStr = c1.getSuit();
        if (suitStr.equals(""Spades""))
            num1=  3;
        else if (suitStr.equals(""Hearts""))
            num1 =2;
        else if (suitStr.equals(""Diamonds""))
            num1=1;
        else if(suitStr.equals(""Clubs""))
            num1 = 0;
        
          String suitStr2 = c2.getSuit();
        if (suitStr2.equals(""Spades""))
            num2=  3;
        else if (suitStr2.equals(""Hearts""))
            num2 =2;
        else if (suitStr2.equals(""Diamonds""))
            num2=1;
        else if(suitStr2.equals(""Clubs""))
            num2 = 0;

            return num1 - num2;
            // complete this function so the Card can be sorted according to the suit
          //  return 0;
        }
    }   
}

@e1e68773ed7aa71bc64618250634169f@"
"r03222054","0","0.46","105248","@10173da0add96df440f84335f4ce69ac@
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) 
    {
        int faceInt1 = 0;// faceToMap(that.getFace());
        int faceInt2 = 0;
        String thisFace = this.getFace();
        String thatFace = that.getFace();
        
        if(thisFace.equals(""2""))
            faceInt1 = 2;
        if(thisFace.equals(""3""))
            faceInt1 = 3;
        if(thisFace.equals(""4""))
            faceInt1 = 4;
        if(thisFace.equals(""5""))
            faceInt1 = 5;
        if(thisFace.equals(""6""))
            faceInt1 = 6;
        if(thisFace.equals(""7""))
            faceInt1 = 7;
        if(thisFace.equals(""8""))
            faceInt1 = 8;
        if(thisFace.equals(""9""))
            faceInt1 = 9;
        if(thisFace.equals(""10""))
            faceInt1 = 10;
        if(thisFace.equals(""J""))
            faceInt1 = 11;
        if(thisFace.equals(""Q""))
            faceInt1 = 12;
        if(thisFace.equals(""K""))
            faceInt1 = 13;
        if(thisFace.equals(""A""))
            faceInt1 = 14;

              
        if(thatFace.equals(""2""))
            faceInt2 = 2;
        if(thatFace.equals(""3""))
            faceInt2 = 3;
        if(thatFace.equals(""4""))
            faceInt2 = 4;
        if(thatFace.equals(""5""))
            faceInt2 = 5;
        if(thatFace.equals(""6""))
            faceInt2 = 6;
        if(thatFace.equals(""7""))
            faceInt2 = 7;
        if(thatFace.equals(""8""))
            faceInt2 = 8;
        if(thatFace.equals(""9""))
            faceInt2 = 9;
        if(thatFace.equals(""10""))
            faceInt2 = 10;
        if(thatFace.equals(""J""))
            faceInt2 = 11;
        if(thatFace.equals(""Q""))
            faceInt2 = 12;
        if(thatFace.equals(""K""))
            faceInt2 = 13;
        if(thatFace.equals(""A""))
            faceInt2 = 14;
        

       
        if (faceInt1> faceInt2)
            return 1;
        else if (faceInt1< faceInt2)
            return -1;
        else 
            return SuitOrder.compare(this, that);

       // else return 0;
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
    }  

    


    // TODO
    
    private static class SuitOrder implements Comparator<Card> {
        @Override
        public int compare(Card c1, Card c2) 
        {
            int num1 = 0, num2 = 0;
        String suitStr = c1.getSuit();
        if (suitStr.equals(""Spades""))
            num1=  3;
        else if (suitStr.equals(""Hearts""))
            num1 =2;
        else if (suitStr.equals(""Diamonds""))
            num1=1;
        else if(suitStr.equals(""Clubs""))
            num1 = 0;
        
          String suitStr2 = c2.getSuit();
        if (suitStr2.equals(""Spades""))
            num2=  3;
        else if (suitStr2.equals(""Hearts""))
            num2 =2;
        else if (suitStr2.equals(""Diamonds""))
            num2=1;
        else if(suitStr2.equals(""Clubs""))
            num2 = 0;

            return num1 - num2;
            // complete this function so the Card can be sorted according to the suit
          //  return 0;
        }
    }   
}

@10173da0add96df440f84335f4ce69ac@"
"r03222054","5","0.128","110976","@1eeba5f06ba73d0bd35c949c2a6c6c86@
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) 
    {
        int faceInt1 = 0;// faceToMap(that.getFace());
        int faceInt2 = 0;
        String thisFace = this.getFace();
        String thatFace = that.getFace();
        
        if(thisFace.equals(""2""))
            faceInt1 = 2;
        if(thisFace.equals(""3""))
            faceInt1 = 3;
        if(thisFace.equals(""4""))
            faceInt1 = 4;
        if(thisFace.equals(""5""))
            faceInt1 = 5;
        if(thisFace.equals(""6""))
            faceInt1 = 6;
        if(thisFace.equals(""7""))
            faceInt1 = 7;
        if(thisFace.equals(""8""))
            faceInt1 = 8;
        if(thisFace.equals(""9""))
            faceInt1 = 9;
        if(thisFace.equals(""10""))
            faceInt1 = 10;
        if(thisFace.equals(""J""))
            faceInt1 = 11;
        if(thisFace.equals(""Q""))
            faceInt1 = 12;
        if(thisFace.equals(""K""))
            faceInt1 = 13;
        if(thisFace.equals(""A""))
            faceInt1 = 14;

              
        if(thatFace.equals(""2""))
            faceInt2 = 2;
        if(thatFace.equals(""3""))
            faceInt2 = 3;
        if(thatFace.equals(""4""))
            faceInt2 = 4;
        if(thatFace.equals(""5""))
            faceInt2 = 5;
        if(thatFace.equals(""6""))
            faceInt2 = 6;
        if(thatFace.equals(""7""))
            faceInt2 = 7;
        if(thatFace.equals(""8""))
            faceInt2 = 8;
        if(thatFace.equals(""9""))
            faceInt2 = 9;
        if(thatFace.equals(""10""))
            faceInt2 = 10;
        if(thatFace.equals(""J""))
            faceInt2 = 11;
        if(thatFace.equals(""Q""))
            faceInt2 = 12;
        if(thatFace.equals(""K""))
            faceInt2 = 13;
        if(thatFace.equals(""A""))
            faceInt2 = 14;
        

       
        if (faceInt1> faceInt2)
            return 1;
        else if (faceInt1< faceInt2)
            return -1;
        else 
            return SUIT_ORDER.compare(this, that);

       // else return 0;
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
    }  

    


    // TODO
    
    private static class SuitOrder implements Comparator<Card> {
        @Override
        public int compare(Card c1, Card c2) 
        {
            int num1 = 0, num2 = 0;
        String suitStr = c1.getSuit();
        if (suitStr.equals(""Spades""))
            num1=  3;
        else if (suitStr.equals(""Hearts""))
            num1 =2;
        else if (suitStr.equals(""Diamonds""))
            num1=1;
        else if(suitStr.equals(""Clubs""))
            num1 = 0;
        
          String suitStr2 = c2.getSuit();
        if (suitStr2.equals(""Spades""))
            num2=  3;
        else if (suitStr2.equals(""Hearts""))
            num2 =2;
        else if (suitStr2.equals(""Diamonds""))
            num2=1;
        else if(suitStr2.equals(""Clubs""))
            num2 = 0;

            return num1 - num2;
            // complete this function so the Card can be sorted according to the suit
          //  return 0;
        }
    }   
}

@1eeba5f06ba73d0bd35c949c2a6c6c86@"
"r03522826","2","0.66","108208","@6d913ca48802b3a3705763aac29e42f7@
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	private int Num;
        
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();
    
    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
        if(this.face.equals(""A""))
            this.Num = 1;
        else if(this.face.equals(""K""))
             this.Num = 13;
        else if (this.face.equals(""Q""))
            this.Num = 12;
        else if(this.face.equals(""J""))
            this.Num = 11;
        else
            this.Num = Integer.parseInt(this.face);
    }
     
    public Integer getNumber(){
        return Num;
    }
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(this.Num == 1){
            if(that.Num == 1)
                return Card.SUIT_ORDER.compare(this, that);
            else
                return 1;
        }
        else if(this.Num > that.Num)
            return 1;
        else if(this.Num < that.Num)
            return -1;
        else
        {
           return Card.SUIT_ORDER.compare(this, that);
        }
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if (c1.suit.equals(""Clubs"")){
                if(c2.suit.equals(""Clubs""))
                    return 0;
                else
                    return -1;
            }
            else if (c1.suit.equals(""Diamonds"")){
                if(c2.suit.equals(""Clubs""))
                    return 1;
                else if(c2.suit.equals(""Diamonds""))
                    return 0;
                else 
                    return -1;
            }
            else if(c1.suit.equals(""Hearts"")){
                if(c2.suit.equals(""Spades""))
                    return -1;
                else if(c2.suit.equals(""Hearts""))
                    return 0;
                else
                    return 1;
            }
            else{
                if(c2.suit.equals(""Spades""))
                    return 0;
                else
                    return 1;
            }
        }
    }
}

@6d913ca48802b3a3705763aac29e42f7@"
"d04631001","0","0","0","@7b6d4d1953aa6e6c71ddf1c7c1020a3e@
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        int this_face = 0;
        int that_face = 0;
        int this_suit = 0;
        int that_suit = 0;
        if (this.face.equals(""A"")) this_face = 14;
        if (that.face.equals(""A"")) that_face = 14;
        if (this.face.equals(""J"")) this_face = 11;
        if (that.face.equals(""J"")) that_face = 11;
        if (this.face.equals(""Q"")) this_face = 12;
        if (that.face.equals(""Q"")) that_face = 12;
        if (this.face.equals(""K"")) this_face = 13;
        if (that.face.equals(""K"")) that_face = 13;
        else {
            this_face = Integer.parseInt(this.face);
            that_face = Integer.parseInt(that.face);
        }
        if (this.suit.equals(""Spades"")) this_suit = 4;
        if (that.suit.equals(""Spades"")) that_suit = 4;
        if (this.suit.equals(""Hearts"")) this_suit = 3;
        if (that.suit.equals(""Hearts"")) that_suit = 3;
        if (this.suit.equals(""Diamonds"")) this_suit = 2;
        if (that.suit.equals(""Diamonds"")) that_suit = 2;
        if (this.suit.equals(""Clubs"")) this_suit = 1;
        if (that.suit.equals(""Clubs"")) that_suit = 1;
        
        if (this_face < that_face) return -1;
        if (this_face > that_face) return +1;
        if (this_face == that_face){
            if (this_suit < that_suit) return -1;
            if (this_suit > that_suit) return +1;
            return 0;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            int c1_suit = 0;
            int c2_suit = 0;
            if (c1.suit.equals(""Spades"")) c1_suit = 4;
            if (c2.suit.equals(""Spades"")) c1_suit = 4;
            if (c1.suit.equals(""Hearts"")) c1_suit = 3;
            if (c2.suit.equals(""Hearts"")) c1_suit = 3;
            if (c1.suit.equals(""Diamonds"")) c1_suit = 2;
            if (c2.suit.equals(""Diamonds"")) c1_suit = 2;
            if (c1.suit.equals(""Clubs"")) c1_suit = 1;
            if (c2.suit.equals(""Clubs"")) c1_suit = 1;
            if (c1_suit < c2_suit) return -1;
            if (c1_suit > c2_suit) return +1;
            // complete this function so the Card can be sorted according to the suit
            return 0;
        }
    }   
}

@7b6d4d1953aa6e6c71ddf1c7c1020a3e@"
"d04631001","0","0","0","@45902907013eede8cd3d7feb15eb8fe1@
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
        @Override
    public int compareTo(Card that) {
        int this_face = 0;
        int that_face = 0;
        int this_suit = 0;
        int that_suit = 0;
        if (this.face.equals(""A"")) this_face = 14;
        if (that.face.equals(""A"")) that_face = 14;
        if (this.face.equals(""J"")) this_face = 11;
        if (that.face.equals(""J"")) that_face = 11;
        if (this.face.equals(""Q"")) this_face = 12;
        if (that.face.equals(""Q"")) that_face = 12;
        if (this.face.equals(""K"")) this_face = 13;
        if (that.face.equals(""K"")) that_face = 13;
        else {
            this_face = Integer.parseInt(this.face);
            that_face = Integer.parseInt(that.face);
        }
        if (this.suit.equals(""Spades"")) this_suit = 4;
        if (that.suit.equals(""Spades"")) that_suit = 4;
        if (this.suit.equals(""Hearts"")) this_suit = 3;
        if (that.suit.equals(""Hearts"")) that_suit = 3;
        if (this.suit.equals(""Diamonds"")) this_suit = 2;
        if (that.suit.equals(""Diamonds"")) that_suit = 2;
        if (this.suit.equals(""Clubs"")) this_suit = 1;
        if (that.suit.equals(""Clubs"")) that_suit = 1;
        
        if (this_face < that_face) return -1;
        if (this_face > that_face) return +1;
        if (this_face == that_face){
            if (this_suit < that_suit) return -1;
            if (this_suit > that_suit) return +1;
            return 0;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            int c1_suit = 0;
            int c2_suit = 0;
            if (c1.suit.equals(""Spades"")) c1_suit = 4;
            if (c2.suit.equals(""Spades"")) c1_suit = 4;
            if (c1.suit.equals(""Hearts"")) c1_suit = 3;
            if (c2.suit.equals(""Hearts"")) c1_suit = 3;
            if (c1.suit.equals(""Diamonds"")) c1_suit = 2;
            if (c2.suit.equals(""Diamonds"")) c1_suit = 2;
            if (c1.suit.equals(""Clubs"")) c1_suit = 1;
            if (c2.suit.equals(""Clubs"")) c1_suit = 1;
            if (c1_suit < c2_suit) return -1;
            if (c1_suit > c2_suit) return +1;
            // complete this function so the Card can be sorted according to the suit
            return 0;
        }
    }   
}

@45902907013eede8cd3d7feb15eb8fe1@"
"b03611015","0","0","0","@19f0d1c610748ca27f36f1c4ab8f7ff1@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (that.face == ""A"") {
            that.face = ""14"";
        }
        if (that.face == ""J"") {
            that.face = ""11"";
        }
        if (that.face == ""Q"") {
            that.face = ""12"";
        }
        if (that.face == ""K"") {
            that.face = ""13"";
        }
        if (that.suit == ""Spades"") {
            that.suit = ""0.4"";
        }
        if (that.suit == ""Hearts"") {
            that.suit = ""0.3"";
        }
        if (that.suit == ""Diamonds"") {
            that.suit = ""0.2"";
        }
        if (that.suit == ""Clubs"") {
            that.suit = ""0.1"";
        }
        if (this.face == ""A"") {
            this.face = ""14"";
        }
        if (this.face == ""K"") {
            this.face = ""13"";
        }
        if (this.face == ""Q"") {
            this.face = ""12"";
        }
        if (this.face == ""J"") {
            this.face = ""11"";
        }
        if (this.suit == ""Spades"") {
            this.suit = ""0.4"";
        }
        if (this.suit == ""Hearts"") {
            this.suit = ""0.3"";
        }
        if (this.suit == ""Diamonds"") {
            this.suit = ""0.2"";
        }
        if (this.suit == ""Clubs"") {
            this.suit = ""0.1"";
        }

        if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )<(Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return -1;
        }

        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (c1.suit == ""Spades"") {
                c1.suit = ""4"";
            }
            if (c1.suit == ""Hearts"") {
                c1.suit = ""3"";
            }
            if (c1.suit == ""Diamonds"") {
                c1.suit = ""2"";
            }
            if (c1.suit == ""Clubs"") {
                c1.suit = ""1"";
            }
            if (c2.suit == ""Spades"") {
                c2.suit = ""4"";
            }
            if (c2.suit == ""Hearts"") {
                c2.suit = ""3"";
            }
            if (c2.suit == ""Diamonds"") {
                c2.suit = ""2"";
            }
            if (c2.suit == ""Clubs"") {
                c2.suit = ""1"";
            }
            if (Integer.parseInt(c1.suit) > Integer.parseInt(c2.suit)) {
                return 1;
            }
            if (Integer.parseInt(c1.suit) ==Integer.parseInt(c2.suit)) {
                return 0;
            }
            if (Integer.parseInt(c1.suit) < Integer.parseInt(c2.suit)) {
                return -1;
            }

            return 0;
        }
    }
//    public static void main(String[] args) throws Exception {
//      
//       Card A = new Card(""2"",""Diamonds"");
//       Card B = new Card(""3"",""Spades"");
//       
//       System.out.println(Card.SUIT_ORDER.compare(A,B));
//       
//            
//    }
    
}
    

@19f0d1c610748ca27f36f1c4ab8f7ff1@"
"b03611015","0","0","0","@2452ec5d33a93f5d734cba357be56821@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (that.face == ""A"") {
            that.face = ""14"";
        }
        if (that.face == ""J"") {
            that.face = ""11"";
        }
        if (that.face == ""Q"") {
            that.face = ""12"";
        }
        if (that.face == ""K"") {
            that.face = ""13"";
        }
        if (that.suit == ""Spades"") {
            that.suit = ""0.4"";
        }
        if (that.suit == ""Hearts"") {
            that.suit = ""0.3"";
        }
        if (that.suit == ""Diamonds"") {
            that.suit = ""0.2"";
        }
        if (that.suit == ""Clubs"") {
            that.suit = ""0.1"";
        }
        if (this.face == ""A"") {
            this.face = ""14"";
        }
        if (this.face == ""K"") {
            this.face = ""13"";
        }
        if (this.face == ""Q"") {
            this.face = ""12"";
        }
        if (this.face == ""J"") {
            this.face = ""11"";
        }
        if (this.suit == ""Spades"") {
            this.suit = ""0.4"";
        }
        if (this.suit == ""Hearts"") {
            this.suit = ""0.3"";
        }
        if (this.suit == ""Diamonds"") {
            this.suit = ""0.2"";
        }
        if (this.suit == ""Clubs"") {
            this.suit = ""0.1"";
        }

        if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )<(Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return -1;
        }

        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (c1.suit == ""Spades"") {
                c1.suit = ""0.4"";
            }
            if (c1.suit == ""Hearts"") {
                c1.suit = ""0.3"";
            }
            if (c1.suit == ""Diamonds"") {
                c1.suit = ""0.2"";
            }
            if (c1.suit == ""Clubs"") {
                c1.suit = ""0.1"";
            }
            if (c2.suit == ""Spades"") {
                c2.suit = ""0.4"";
            }
            if (c2.suit == ""Hearts"") {
                c2.suit = ""0.3"";
            }
            if (c2.suit == ""Diamonds"") {
                c2.suit = ""0.2"";
            }
            if (c2.suit == ""Clubs"") {
                c2.suit = ""0.1"";
            }
            if (Double.parseDouble(c1.suit) > Double.parseDouble(c2.suit)) {
                return 1;
            }
            if (Double.parseDouble(c1.suit) ==Double.parseDouble(c2.suit)) {
                return 0;
            }
            if (Double.parseDouble(c1.suit) < Double.parseDouble(c2.suit)) {
                return -1;
            }

            return 0;
        }
    }
//    public static void main(String[] args) throws Exception {
//      
//       Card A = new Card(""2"",""Diamonds"");
//       Card B = new Card(""3"",""Spades"");
//       
//       System.out.println(Card.SUIT_ORDER.compare(A,B));
//       
//            
//    }
    
}
    

@2452ec5d33a93f5d734cba357be56821@"
"b03611015","0","0","0","@136bb808ce03f778851b9dd3b006164a@
public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (that.face == ""A"") {
            that.face = ""14"";
        }
        if (that.face == ""J"") {
            that.face = ""11"";
        }
        if (that.face == ""Q"") {
            that.face = ""12"";
        }
        if (that.face == ""K"") {
            that.face = ""13"";
        }
        if (that.suit == ""Spades"") {
            that.suit = ""0.4"";
        }
        if (that.suit == ""Hearts"") {
            that.suit = ""0.3"";
        }
        if (that.suit == ""Diamonds"") {
            that.suit = ""0.2"";
        }
        if (that.suit == ""Clubs"") {
            that.suit = ""0.1"";
        }
        if (this.face == ""A"") {
            this.face = ""14"";
        }
        if (this.face == ""K"") {
            this.face = ""13"";
        }
        if (this.face == ""Q"") {
            this.face = ""12"";
        }
        if (this.face == ""J"") {
            this.face = ""11"";
        }
        if (this.suit == ""Spades"") {
            this.suit = ""0.4"";
        }
        if (this.suit == ""Hearts"") {
            this.suit = ""0.3"";
        }
        if (this.suit == ""Diamonds"") {
            this.suit = ""0.2"";
        }
        if (this.suit == ""Clubs"") {
            this.suit = ""0.1"";
        }

        if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )<(Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return -1;
        }

        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (c1.suit == ""Spades"") {
                c1.suit = ""0.4"";
            }
            if (c1.suit == ""Hearts"") {
                c1.suit = ""0.3"";
            }
            if (c1.suit == ""Diamonds"") {
                c1.suit = ""0.2"";
            }
            if (c1.suit == ""Clubs"") {
                c1.suit = ""0.1"";
            }
            if (c2.suit == ""Spades"") {
                c2.suit = ""0.4"";
            }
            if (c2.suit == ""Hearts"") {
                c2.suit = ""0.3"";
            }
            if (c2.suit == ""Diamonds"") {
                c2.suit = ""0.2"";
            }
            if (c2.suit == ""Clubs"") {
                c2.suit = ""0.1"";
            }
            if (Double.parseDouble(c1.suit) > Double.parseDouble(c2.suit)) {
                return 1;
            }
            if (Double.parseDouble(c1.suit) ==Double.parseDouble(c2.suit)) {
                return 0;
            }
            if (Double.parseDouble(c1.suit) < Double.parseDouble(c2.suit)) {
                return -1;
            }

            return 0;
        }
    }
//    public static void main(String[] args) throws Exception {
//      
//       Card A = new Card(""2"",""Diamonds"");
//       Card B = new Card(""3"",""Spades"");
//       
//       System.out.println(Card.SUIT_ORDER.compare(A,B));
//       
//            
//    }
    
}
    

@136bb808ce03f778851b9dd3b006164a@"
"b03611015","0","0","0","@26897e931d9407913861ec47a8c5b70a@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (that.face == ""A"") {
            that.face = ""14"";
        }
        if (that.face == ""J"") {
            that.face = ""11"";
        }
        if (that.face == ""Q"") {
            that.face = ""12"";
        }
        if (that.face == ""K"") {
            that.face = ""13"";
        }
        if (that.suit == ""Spades"") {
            that.suit = ""0.4"";
        }
        if (that.suit == ""Hearts"") {
            that.suit = ""0.3"";
        }
        if (that.suit == ""Diamonds"") {
            that.suit = ""0.2"";
        }
        if (that.suit == ""Clubs"") {
            that.suit = ""0.1"";
        }
        if (this.face == ""A"") {
            this.face = ""14"";
        }
        if (this.face == ""K"") {
            this.face = ""13"";
        }
        if (this.face == ""Q"") {
            this.face = ""12"";
        }
        if (this.face == ""J"") {
            this.face = ""11"";
        }
        if (this.suit == ""Spades"") {
            this.suit = ""0.4"";
        }
        if (this.suit == ""Hearts"") {
            this.suit = ""0.3"";
        }
        if (this.suit == ""Diamonds"") {
            this.suit = ""0.2"";
        }
        if (this.suit == ""Clubs"") {
            this.suit = ""0.1"";
        }

        if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )<(Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return -1;
        }

        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (c1.suit == ""Spades"") {
                c1.suit = ""0.4"";
            }
            if (c1.suit == ""Hearts"") {
                c1.suit = ""0.3"";
            }
            if (c1.suit == ""Diamonds"") {
                c1.suit = ""0.2"";
            }
            if (c1.suit == ""Clubs"") {
                c1.suit = ""0.1"";
            }
            if (c2.suit == ""Spades"") {
                c2.suit = ""0.4"";
            }
            if (c2.suit == ""Hearts"") {
                c2.suit = ""0.3"";
            }
            if (c2.suit == ""Diamonds"") {
                c2.suit = ""0.2"";
            }
            if (c2.suit == ""Clubs"") {
                c2.suit = ""0.1"";
            }
            if (Double.parseDouble(c1.suit) > Double.parseDouble(c2.suit)) {
                return 1;
            }
            if (Double.parseDouble(c1.suit) ==Double.parseDouble(c2.suit)) {
                return 0;
            }
            if (Double.parseDouble(c1.suit) < Double.parseDouble(c2.suit)) {
                return -1;
            }

            return 0;
        }
    }
//    public static void main(String[] args) throws Exception {
//      
//       Card A = new Card(""2"",""Diamonds"");
//       Card B = new Card(""3"",""Spades"");
//       
//       System.out.println(Card.SUIT_ORDER.compare(A,B));
//       
//            
//    }
    
}
    

@26897e931d9407913861ec47a8c5b70a@"
"b03611015","0","0","0","@26897e931d9407913861ec47a8c5b70a@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (that.face == ""A"") {
            that.face = ""14"";
        }
        if (that.face == ""J"") {
            that.face = ""11"";
        }
        if (that.face == ""Q"") {
            that.face = ""12"";
        }
        if (that.face == ""K"") {
            that.face = ""13"";
        }
        if (that.suit == ""Spades"") {
            that.suit = ""0.4"";
        }
        if (that.suit == ""Hearts"") {
            that.suit = ""0.3"";
        }
        if (that.suit == ""Diamonds"") {
            that.suit = ""0.2"";
        }
        if (that.suit == ""Clubs"") {
            that.suit = ""0.1"";
        }
        if (this.face == ""A"") {
            this.face = ""14"";
        }
        if (this.face == ""K"") {
            this.face = ""13"";
        }
        if (this.face == ""Q"") {
            this.face = ""12"";
        }
        if (this.face == ""J"") {
            this.face = ""11"";
        }
        if (this.suit == ""Spades"") {
            this.suit = ""0.4"";
        }
        if (this.suit == ""Hearts"") {
            this.suit = ""0.3"";
        }
        if (this.suit == ""Diamonds"") {
            this.suit = ""0.2"";
        }
        if (this.suit == ""Clubs"") {
            this.suit = ""0.1"";
        }

        if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )<(Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return -1;
        }

        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (c1.suit == ""Spades"") {
                c1.suit = ""0.4"";
            }
            if (c1.suit == ""Hearts"") {
                c1.suit = ""0.3"";
            }
            if (c1.suit == ""Diamonds"") {
                c1.suit = ""0.2"";
            }
            if (c1.suit == ""Clubs"") {
                c1.suit = ""0.1"";
            }
            if (c2.suit == ""Spades"") {
                c2.suit = ""0.4"";
            }
            if (c2.suit == ""Hearts"") {
                c2.suit = ""0.3"";
            }
            if (c2.suit == ""Diamonds"") {
                c2.suit = ""0.2"";
            }
            if (c2.suit == ""Clubs"") {
                c2.suit = ""0.1"";
            }
            if (Double.parseDouble(c1.suit) > Double.parseDouble(c2.suit)) {
                return 1;
            }
            if (Double.parseDouble(c1.suit) ==Double.parseDouble(c2.suit)) {
                return 0;
            }
            if (Double.parseDouble(c1.suit) < Double.parseDouble(c2.suit)) {
                return -1;
            }

            return 0;
        }
    }
//    public static void main(String[] args) throws Exception {
//      
//       Card A = new Card(""2"",""Diamonds"");
//       Card B = new Card(""3"",""Spades"");
//       
//       System.out.println(Card.SUIT_ORDER.compare(A,B));
//       
//            
//    }
    
}
    

@26897e931d9407913861ec47a8c5b70a@"
"b03611033","0","0","0","@d539b502414278da99b355eae17cd15f@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (that.face == ""A"") {
            that.face = ""14"";
        }
        if (that.face == ""J"") {
            that.face = ""11"";
        }
        if (that.face == ""Q"") {
            that.face = ""12"";
        }
        if (that.face == ""K"") {
            that.face = ""13"";
        }
        if (that.suit == ""Spades"") {
            that.suit = ""0.4"";
        }
        if (that.suit == ""Hearts"") {
            that.suit = ""0.3"";
        }
        if (that.suit == ""Diamonds"") {
            that.suit = ""0.2"";
        }
        if (that.suit == ""Clubs"") {
            that.suit = ""01"";
        }
        if (this.face == ""A"") {
            this.face = ""14"";
        }
        if (this.face == ""K"") {
            this.face = ""13"";
        }
        if (this.face == ""Q"") {
            this.face = ""12"";
        }
        if (this.face == ""J"") {
            this.face = ""11"";
        }
        if (this.suit == ""Spades"") {
            this.suit = ""0.4"";
        }
        if (this.suit == ""Hearts"") {
            this.suit = ""0.3"";
        }
        if (this.suit == ""Diamonds"") {
            this.suit = ""0.2"";
        }
        if (this.suit == ""Clubs"") {
            this.suit = ""0.1"";
        }

        if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )<(Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return -1;
        }

        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (c1.suit == ""Spades"") {
                c1.suit = ""4"";
            }
            if (c1.suit == ""Hearts"") {
                c1.suit = ""3"";
            }
            if (c1.suit == ""Diamonds"") {
                c1.suit = ""2"";
            }
            if (c1.suit == ""Clubs"") {
                c1.suit = ""1"";
            }
            if (c2.suit == ""Spades"") {
                c2.suit = ""4"";
            }
            if (c2.suit == ""Hearts"") {
                c2.suit = ""3"";
            }
            if (c2.suit == ""Diamonds"") {
                c2.suit = ""2"";
            }
            if (c2.suit == ""Clubs"") {
                c2.suit = ""1"";
            }
            if (Integer.parseInt(c1.suit) > Integer.parseInt(c2.suit)) {
                return 1;
            }
            if (Integer.parseInt(c1.suit) ==Integer.parseInt(c2.suit)) {
                return 0;
            }
            if (Integer.parseInt(c1.suit) < Integer.parseInt(c2.suit)) {
                return -1;
            }

            return 0;
        }
    }
//    public static void main(String[] args) throws Exception {
//      
//       Card A = new Card(""2"",""Diamonds"");
//       Card B = new Card(""3"",""Spades"");
//       
//       System.out.println(Card.SUIT_ORDER.compare(A,B));
//       
//            
//    }
    
}
@d539b502414278da99b355eae17cd15f@"
"b03611015","0","0.67","114704","@befacf5b48b99f4cec1c69b09dce53bd@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (""A"".equals(that.face)) {
            that.face = ""14"";
        }
        if (""J"".equals(that.face)) {
            that.face = ""11"";
        }
        if (""Q"".equals(that.face)) {
            that.face = ""12"";
        }
        if (""K"".equals(that.face)) {
            that.face = ""13"";
        }
        if (""Spades"".equals(that.suit)) {
            that.suit = ""0.4"";
        }
        if (""Hearts"".equals(that.suit)) {
            that.suit = ""0.3"";
        }
        if (""Diamonds"".equals(that.suit)) {
            that.suit = ""0.2"";
        }
        if (""Clubs"".equals(that.suit)) {
            that.suit = ""0.1"";
        }
        if (""A"".equals(this.face)) {
            this.face = ""14"";
        }
        if (""K"".equals(this.face)) {
            this.face = ""13"";
        }
        if (""Q"".equals(this.face)) {
            this.face = ""12"";
        }
        if (""J"".equals(this.face)) {
            this.face = ""11"";
        }
        if (""Spades"".equals(this.suit)) {
            this.suit = ""0.4"";
        }
        if (""Hearts"".equals(this.suit)) {
            this.suit = ""0.3"";
        }
        if (""Diamonds"".equals(this.suit)) {
            this.suit = ""0.2"";
        }
        if (""Clubs"".equals(this.suit)) {
            this.suit = ""0.1"";
        }

        if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )<(Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return -1;
        }

        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (""Spades"".equals(c1.suit)) {
                c1.suit = ""0.4"";
            }
            if (""Hearts"".equals(c1.suit)) {
                c1.suit = ""0.3"";
            }
            if (""Diamonds"".equals(c1.suit)) {
                c1.suit = ""0.2"";
            }
            if (""Clubs"".equals(c1.suit)) {
                c1.suit = ""0.1"";
            }
            if (""Spades"".equals(c2.suit)) {
                c2.suit = ""0.4"";
            }
            if (""Hearts"".equals(c2.suit)) {
                c2.suit = ""0.3"";
            }
            if (""Diamonds"".equals(c2.suit)) {
                c2.suit = ""0.2"";
            }
            if (""Clubs"".equals(c2.suit)) {
                c2.suit = ""0.1"";
            }
            if (Double.parseDouble(c1.suit) > Double.parseDouble(c2.suit)) {
                return 1;
            }
            if (Double.parseDouble(c1.suit) ==Double.parseDouble(c2.suit)) {
                return 0;
            }
            if (Double.parseDouble(c1.suit) < Double.parseDouble(c2.suit)) {
                return -1;
            }

            return 0;
        }
    }
//    public static void main(String[] args) throws Exception {
//      
//       Card A = new Card(""2"",""Diamonds"");
//       Card B = new Card(""3"",""Spades"");
//       
//       System.out.println(Card.SUIT_ORDER.compare(A,B));
//       
//            
//    }
    
}
    

@befacf5b48b99f4cec1c69b09dce53bd@"
"b03611033","0","0","0","@64f22ab79208a9f2d48a32b7bd8544be@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (that.face == ""A"") {
            that.face = ""14"";
        }
        if (that.face == ""J"") {
            that.face = ""11"";
        }
        if (that.face == ""Q"") {
            that.face = ""12"";
        }
        if (that.face == ""K"") {
            that.face = ""13"";
        }
        if (that.suit == ""Spades"") {
            that.suit = ""0.4"";
        }
        if (that.suit == ""Hearts"") {
            that.suit = ""0.3"";
        }
        if (that.suit == ""Diamonds"") {
            that.suit = ""0.2"";
        }
        if (that.suit == ""Clubs"") {
            that.suit = ""01"";
        }
        if (this.face == ""A"") {
            this.face = ""14"";
        }
        if (this.face == ""K"") {
            this.face = ""13"";
        }
        if (this.face == ""Q"") {
            this.face = ""12"";
        }
        if (this.face == ""J"") {
            this.face = ""11"";
        }
        if (this.suit == ""Spades"") {
            this.suit = ""0.4"";
        }
        if (this.suit == ""Hearts"") {
            this.suit = ""0.3"";
        }
        if (this.suit == ""Diamonds"") {
            this.suit = ""0.2"";
        }
        if (this.suit == ""Clubs"") {
            this.suit = ""0.1"";
        }

        if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )<(Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return -1;
        }

        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (c1.suit == ""Spades"") {
                c1.suit = ""0.4"";
            }
            if (c1.suit == ""Hearts"") {
                c1.suit = ""0.3"";
            }
            if (c1.suit == ""Diamonds"") {
                c1.suit = ""0.2"";
            }
            if (c1.suit == ""Clubs"") {
                c1.suit = ""0.1"";
            }
            if (c2.suit == ""Spades"") {
                c2.suit = ""0.4"";
            }
            if (c2.suit == ""Hearts"") {
                c2.suit = ""0.3"";
            }
            if (c2.suit == ""Diamonds"") {
                c2.suit = ""0.2"";
            }
            if (c2.suit == ""Clubs"") {
                c2.suit = ""0.1"";
            }
            if (Double.parseDouble(c1.suit) > Double.parseDouble(c2.suit)) {
                return 1;
            }
            if (Double.parseDouble(c1.suit) ==Double.parseDouble(c2.suit)) {
                return 0;
            }
            if (Double.parseDouble(c1.suit) < Double.parseDouble(c2.suit)) {
                return -1;
            }

            return 0;
        }
    }
//    public static void main(String[] args) throws Exception {
//      
//       Card A = new Card(""2"",""Diamonds"");
//       Card B = new Card(""3"",""Spades"");
//       
//       System.out.println(Card.SUIT_ORDER.compare(A,B));
//       
//            
//    }
    
}
@64f22ab79208a9f2d48a32b7bd8544be@"
"b03611015","0","0.65","114176","@0addb5dacc7d94ee3a41c92a9ecb3b9c@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (""A"".equals(that.face)) {
            that.face = ""14"";
        }
        if (""J"".equals(that.face)) {
            that.face = ""11"";
        }
        if (""Q"".equals(that.face)) {
            that.face = ""12"";
        }
        if (""K"".equals(that.face)) {
            that.face = ""13"";
        }
        if (""Spades"".equals(that.suit)) {
            that.suit = ""0.4"";
        }
        if (""Hearts"".equals(that.suit)) {
            that.suit = ""0.3"";
        }
        if (""Diamonds"".equals(that.suit)) {
            that.suit = ""0.2"";
        }
        if (""Clubs"".equals(that.suit)) {
            that.suit = ""0.1"";
        }
        if (""A"".equals(this.face)) {
            this.face = ""14"";
        }
        if (""K"".equals(this.face)) {
            this.face = ""13"";
        }
        if (""Q"".equals(this.face)) {
            this.face = ""12"";
        }
        if (""J"".equals(this.face)) {
            this.face = ""11"";
        }
        if (""Spades"".equals(this.suit)) {
            this.suit = ""0.4"";
        }
        if (""Hearts"".equals(this.suit)) {
            this.suit = ""0.3"";
        }
        if (""Diamonds"".equals(this.suit)) {
            this.suit = ""0.2"";
        }
        if (""Clubs"".equals(this.suit)) {
            this.suit = ""0.1"";
        }

        if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )<(Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return -1;
        }

        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (""Spades"".equals(c1.suit)) {
                c1.suit = ""0.4"";
            }
            if (""Hearts"".equals(c1.suit)) {
                c1.suit = ""0.3"";
            }
            if (""Diamonds"".equals(c1.suit)) {
                c1.suit = ""0.2"";
            }
            if (""Clubs"".equals(c1.suit)) {
                c1.suit = ""0.1"";
            }
            if (""Spades"".equals(c2.suit)) {
                c2.suit = ""0.4"";
            }
            if (""Hearts"".equals(c2.suit)) {
                c2.suit = ""0.3"";
            }
            if (""Diamonds"".equals(c2.suit)) {
                c2.suit = ""0.2"";
            }
            if (""Clubs"".equals(c2.suit)) {
                c2.suit = ""0.1"";
            }
            if (Double.parseDouble(c1.suit) > Double.parseDouble(c2.suit)) {
                return 1;
            }
            if (Double.parseDouble(c1.suit) ==Double.parseDouble(c2.suit)) {
                return 0;
            }
            if (Double.parseDouble(c1.suit) < Double.parseDouble(c2.suit)) {
                return -1;
            }

            return 0;
        }
    }

    
}
    

@0addb5dacc7d94ee3a41c92a9ecb3b9c@"
"b03611015","0","0.69","114784","@3f55254d29c646ba1b09f0bf4c14c093@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (""A"".equals(that.face)) {
            that.face = ""14"";
        }
        else if (""J"".equals(that.face)) {
            that.face = ""11"";
        }
        else if (""Q"".equals(that.face)) {
            that.face = ""12"";
        }
        else if (""K"".equals(that.face)) {
            that.face = ""13"";
        }
        if (""Spades"".equals(that.suit)) {
            that.suit = ""0.4"";
        }
        else if (""Hearts"".equals(that.suit)) {
            that.suit = ""0.3"";
        }
        else if (""Diamonds"".equals(that.suit)) {
            that.suit = ""0.2"";
        }
        else if (""Clubs"".equals(that.suit)) {
            that.suit = ""0.1"";
        }
        if (""A"".equals(this.face)) {
            this.face = ""14"";
        }
        else if (""K"".equals(this.face)) {
            this.face = ""13"";
        }
        else if (""Q"".equals(this.face)) {
            this.face = ""12"";
        }
        else if (""J"".equals(this.face)) {
            this.face = ""11"";
        }
        if (""Spades"".equals(this.suit)) {
            this.suit = ""0.4"";
        }
        else if (""Hearts"".equals(this.suit)) {
            this.suit = ""0.3"";
        }
        else if (""Diamonds"".equals(this.suit)) {
            this.suit = ""0.2"";
        }
        else if (""Clubs"".equals(this.suit)) {
            this.suit = ""0.1"";
        }

        if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }
        else if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }
        else if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )<(Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return -1;
        }

        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (""Spades"".equals(c1.suit)) {
                c1.suit = ""0.4"";
            }
            else if (""Hearts"".equals(c1.suit)) {
                c1.suit = ""0.3"";
            }
            else if (""Diamonds"".equals(c1.suit)) {
                c1.suit = ""0.2"";
            }
            else if (""Clubs"".equals(c1.suit)) {
                c1.suit = ""0.1"";
            }
           if (""Spades"".equals(c2.suit)) {
                c2.suit = ""0.4"";
            }
           else if (""Hearts"".equals(c2.suit)) {
                c2.suit = ""0.3"";
            }
           else if (""Diamonds"".equals(c2.suit)) {
                c2.suit = ""0.2"";
            }
           else if (""Clubs"".equals(c2.suit)) {
                c2.suit = ""0.1"";
            }
            if (Double.parseDouble(c1.suit) > Double.parseDouble(c2.suit)) {
                return 1;
            }
            else if (Double.parseDouble(c1.suit) ==Double.parseDouble(c2.suit)) {
                return 0;
            }
            else if (Double.parseDouble(c1.suit) < Double.parseDouble(c2.suit)) {
                return -1;
            }

            return 0;
        }
    }
//    public static void main(String[] args) throws Exception {
//      
//       Card A = new Card(""2"",""Diamonds"");
//       Card B = new Card(""3"",""Spades"");
//       
//       System.out.println(Card.SUIT_ORDER.compare(A,B));
//       
//            
//    }
    
}
    

@3f55254d29c646ba1b09f0bf4c14c093@"
"b03611033","0","0.66","114736","@ca9bcb4b525ff909af1a6d0c67491a60@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (""A"".equals(that.face)) {
            that.face = ""14"";
        }
        if (""J"".equals(that.face)) {
            that.face = ""11"";
        }
        if (""Q"".equals(that.face)) {
            that.face = ""12"";
        }
        if (""K"".equals(that.face)) {
            that.face = ""13"";
        }
        if (""Spades"".equals(that.suit)) {
            that.suit = ""0.4"";
        }
        if (""Hearts"".equals(that.suit)) {
            that.suit = ""0.3"";
        }
        if (""Diamonds"".equals(that.suit)) {
            that.suit = ""0.2"";
        }
        if (""Clubs"".equals(that.suit)) {
            that.suit = ""01"";
        }
        if (""A"".equals(this.face)) {
            this.face = ""14"";
        }
        if (""K"".equals(this.face)) {
            this.face = ""13"";
        }
        if (""Q"".equals(this.face)) {
            this.face = ""12"";
        }
        if (""J"".equals(this.face)) {
            this.face = ""11"";
        }
        if (""Spades"".equals(this.suit)) {
            this.suit = ""0.4"";
        }
        if (""Hearts"".equals(this.suit)) {
            this.suit = ""0.3"";
        }
        if (""Diamonds"".equals(this.suit)) {
            this.suit = ""0.2"";
        }
        if (""Clubs"".equals(this.suit)) {
            this.suit = ""0.1"";
        }

        if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )<(Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return -1;
        }

        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (""Spades"".equals(c1.suit)) {
                c1.suit = ""0.4"";
            }
            if (""Hearts"".equals(c1.suit)) {
                c1.suit = ""0.3"";
            }
            if (""Diamonds"".equals(c1.suit)) {
                c1.suit = ""0.2"";
            }
            if (""Clubs"".equals(c1.suit)) {
                c1.suit = ""0.1"";
            }
            if (""Spades"".equals(c2.suit)) {
                c2.suit = ""0.4"";
            }
            if (""Hearts"".equals(c2.suit)) {
                c2.suit = ""0.3"";
            }
            if (""Diamonds"".equals(c2.suit)) {
                c2.suit = ""0.2"";
            }
            if (""Clubs"".equals(c2.suit)) {
                c2.suit = ""0.1"";
            }
            if (Double.parseDouble(c1.suit) > Double.parseDouble(c2.suit)) {
                return 1;
            }
            if (Double.parseDouble(c1.suit) ==Double.parseDouble(c2.suit)) {
                return 0;
            }
            if (Double.parseDouble(c1.suit) < Double.parseDouble(c2.suit)) {
                return -1;
            }

            return 0;
        }
    }
//    public static void main(String[] args) throws Exception {
//      
//       Card A = new Card(""2"",""Diamonds"");
//       Card B = new Card(""3"",""Spades"");
//       
//       System.out.println(Card.SUIT_ORDER.compare(A,B));
//       
//            
//    }
    
}
@ca9bcb4b525ff909af1a6d0c67491a60@"
"r04921074","5","0.128","111664","@e5ffaf012ff3eea18d949dc038bd1bff@
import java.util.Comparator;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author USER
 */
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS   
    public String getSuit(){
        return this.suit;
    }   
    
    public int FacetoINT(String a){
        int facepoint = 0;
        if(a.equals(""A""))facepoint = 130;
        else if(a.equals(""2""))facepoint = 10;
        else if(a.equals(""3""))facepoint = 20;
        else if(a.equals(""4""))facepoint = 30;
        else if(a.equals(""5""))facepoint = 40;
        else if(a.equals(""6""))facepoint = 50;
        else if(a.equals(""7""))facepoint = 60;
        else if(a.equals(""8""))facepoint = 70;
        else if(a.equals(""9""))facepoint = 80;
        else if(a.equals(""10""))facepoint = 90;
        else if(a.equals(""J""))facepoint = 100;
        else if(a.equals(""Q""))facepoint = 110;
        else if(a.equals(""K""))facepoint = 120;
        return facepoint;
    } 
        public int SuittoINT(String b){
        int suitpoint = 0;
        if(b.equals(""Clubs""))suitpoint=1;
        else if(b.equals(""Diamonds""))suitpoint=2;
        else if(b.equals(""Hearts""))suitpoint=3;
        else if(b.equals(""Spades""))suitpoint=4;
        return suitpoint;
    } 
            
    
    // TODO
    public int compareTo(Card that) {
        
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        
        if(FacetoINT(this.getFace())+SuittoINT(this.getSuit()) > FacetoINT(that.getFace())+SuittoINT(that.getSuit())){
            return +1;
        }
        else if(FacetoINT(this.getFace())+SuittoINT(this.getSuit()) < FacetoINT(that.getFace())+SuittoINT(that.getSuit())){
            return -1;
        }
        else return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            int suitpoint = 0;
            int a =0;
            int b =0;
            switch (c1.getSuit()) {
                case ""Clubs"":
                    a=1;
                    break;
                case ""Diamonds"":
                    a=2;
                    break;
                case ""Hearts"":
                    a=3;
                    break;
                case ""Spades"":
                    a=4;
                    break;
                default:
                    break;
            }
            switch (c2.getSuit()) {
                case ""Clubs"":
                    b=1;
                    break;
                case ""Diamonds"":
                    b=2;
                    break;
                case ""Hearts"":
                    b=3;
                    break;
                case ""Spades"":
                    b=4;
                    break;
                default:
                    break;
            }
            
            if(a>b)return+1;
            else if(a<b)return-1;
            // complete this function so the Card can be sorted according to the suit
            else return 0;
        }
    }   
}


@e5ffaf012ff3eea18d949dc038bd1bff@"
"d04631001","0","0","0","@45902907013eede8cd3d7feb15eb8fe1@
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
        @Override
    public int compareTo(Card that) {
        int this_face = 0;
        int that_face = 0;
        int this_suit = 0;
        int that_suit = 0;
        if (this.face.equals(""A"")) this_face = 14;
        if (that.face.equals(""A"")) that_face = 14;
        if (this.face.equals(""J"")) this_face = 11;
        if (that.face.equals(""J"")) that_face = 11;
        if (this.face.equals(""Q"")) this_face = 12;
        if (that.face.equals(""Q"")) that_face = 12;
        if (this.face.equals(""K"")) this_face = 13;
        if (that.face.equals(""K"")) that_face = 13;
        else {
            this_face = Integer.parseInt(this.face);
            that_face = Integer.parseInt(that.face);
        }
        if (this.suit.equals(""Spades"")) this_suit = 4;
        if (that.suit.equals(""Spades"")) that_suit = 4;
        if (this.suit.equals(""Hearts"")) this_suit = 3;
        if (that.suit.equals(""Hearts"")) that_suit = 3;
        if (this.suit.equals(""Diamonds"")) this_suit = 2;
        if (that.suit.equals(""Diamonds"")) that_suit = 2;
        if (this.suit.equals(""Clubs"")) this_suit = 1;
        if (that.suit.equals(""Clubs"")) that_suit = 1;
        
        if (this_face < that_face) return -1;
        if (this_face > that_face) return +1;
        if (this_face == that_face){
            if (this_suit < that_suit) return -1;
            if (this_suit > that_suit) return +1;
            return 0;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            int c1_suit = 0;
            int c2_suit = 0;
            if (c1.suit.equals(""Spades"")) c1_suit = 4;
            if (c2.suit.equals(""Spades"")) c1_suit = 4;
            if (c1.suit.equals(""Hearts"")) c1_suit = 3;
            if (c2.suit.equals(""Hearts"")) c1_suit = 3;
            if (c1.suit.equals(""Diamonds"")) c1_suit = 2;
            if (c2.suit.equals(""Diamonds"")) c1_suit = 2;
            if (c1.suit.equals(""Clubs"")) c1_suit = 1;
            if (c2.suit.equals(""Clubs"")) c1_suit = 1;
            if (c1_suit < c2_suit) return -1;
            if (c1_suit > c2_suit) return +1;
            // complete this function so the Card can be sorted according to the suit
            return 0;
        }
    }   
}

@45902907013eede8cd3d7feb15eb8fe1@"
"b03611015","0","0.53","114640","@0deba1994284d1f0e658e6f26a2df369@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (""A"".equals(that.face)) {
            that.face = ""14"";
        }
        else if (""J"".equals(that.face)) {
            that.face = ""11"";
        }
        else if (""Q"".equals(that.face)) {
            that.face = ""12"";
        }
        else if (""K"".equals(that.face)) {
            that.face = ""13"";
        }
        else if (""Spades"".equals(that.suit)) {
            that.suit = ""0.4"";
        }
        else if (""Hearts"".equals(that.suit)) {
            that.suit = ""0.3"";
        }
        else if (""Diamonds"".equals(that.suit)) {
            that.suit = ""0.2"";
        }
        else if (""Clubs"".equals(that.suit)) {
            that.suit = ""0.1"";
        }
        else if (""A"".equals(this.face)) {
            this.face = ""14"";
        }
        else if (""K"".equals(this.face)) {
            this.face = ""13"";
        }
        else if (""Q"".equals(this.face)) {
            this.face = ""12"";
        }
        else if (""J"".equals(this.face)) {
            this.face = ""11"";
        }
        else if (""Spades"".equals(this.suit)) {
            this.suit = ""0.4"";
        }
        else if (""Hearts"".equals(this.suit)) {
            this.suit = ""0.3"";
        }
        else if (""Diamonds"".equals(this.suit)) {
            this.suit = ""0.2"";
        }
        else if (""Clubs"".equals(this.suit)) {
            this.suit = ""0.1"";
        }

        else if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }
        else if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }
        else if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )<(Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return -1;
        }

        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (""Spades"".equals(c1.suit)) {
                c1.suit = ""0.4"";
            }
            else if (""Hearts"".equals(c1.suit)) {
                c1.suit = ""0.3"";
            }
            else if (""Diamonds"".equals(c1.suit)) {
                c1.suit = ""0.2"";
            }
            else if (""Clubs"".equals(c1.suit)) {
                c1.suit = ""0.1"";
            }
            else if (""Spades"".equals(c2.suit)) {
                c2.suit = ""0.4"";
            }
           else if (""Hearts"".equals(c2.suit)) {
                c2.suit = ""0.3"";
            }
           else if (""Diamonds"".equals(c2.suit)) {
                c2.suit = ""0.2"";
            }
           else if (""Clubs"".equals(c2.suit)) {
                c2.suit = ""0.1"";
            }
           else if (Double.parseDouble(c1.suit) > Double.parseDouble(c2.suit)) {
                return 1;
            }
            else if (Double.parseDouble(c1.suit) ==Double.parseDouble(c2.suit)) {
                return 0;
            }
            else if (Double.parseDouble(c1.suit) < Double.parseDouble(c2.suit)) {
                return -1;
            }

            return 0;
        }
    }
//    public static void main(String[] args) throws Exception {
//      
//       Card A = new Card(""2"",""Diamonds"");
//       Card B = new Card(""2"",""Diamonds"");
//       
//       System.out.println(B.compareTo(A));
//       
//            
//    }
    
}
    

@0deba1994284d1f0e658e6f26a2df369@"
"b03611033","0","0.7","112640","@7a54e8f124145e1499aa397e938ea428@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (""A"".equals(that.face)) {
            that.face = ""14"";
        }
        else if (""J"".equals(that.face)) {
            that.face = ""11"";
        }
        else if (""Q"".equals(that.face)) {
            that.face = ""12"";
        }
        else if (""K"".equals(that.face)) {
            that.face = ""13"";
        }
        else{}
        if (""Spades"".equals(that.suit)) {
            that.suit = ""0.4"";
        }
        else if (""Hearts"".equals(that.suit)) {
            that.suit = ""0.3"";
        }
        else if (""Diamonds"".equals(that.suit)) {
            that.suit = ""0.2"";
        }
        else {
            that.suit = ""0.1"";
        }
        if (""A"".equals(this.face)) {
            this.face = ""14"";
        }
        else if (""K"".equals(this.face)) {
            this.face = ""13"";
        }
        else if (""Q"".equals(this.face)) {
            this.face = ""12"";
        }
        else if (""J"".equals(this.face)) {
            this.face = ""11"";
        }
        else{}
        if (""Spades"".equals(this.suit)) {
            this.suit = ""0.4"";
        }
        else if (""Hearts"".equals(this.suit)) {
            this.suit = ""0.3"";
        }
        else if (""Diamonds"".equals(this.suit)) {
            this.suit = ""0.2"";
        }
        else {
            this.suit = ""0.1"";
        }

        if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }
         else if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }
         else {
            return -1;
        }

    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (""Spades"".equals(c1.suit)) {
                c1.suit = ""0.4"";
            }
            else if (""Hearts"".equals(c1.suit)) {
                c1.suit = ""0.3"";
            }
            else if (""Diamonds"".equals(c1.suit)) {
                c1.suit = ""0.2"";
            }
            else{
                c1.suit = ""0.1"";
            }
            if (""Spades"".equals(c2.suit)) {
                c2.suit = ""0.4"";
            }
            else if (""Hearts"".equals(c2.suit)) {
                c2.suit = ""0.3"";
            }
            else if (""Diamonds"".equals(c2.suit)) {
                c2.suit = ""0.2"";
            }
            else{
                c2.suit = ""0.1"";
            }
            if (Double.parseDouble(c1.suit) > Double.parseDouble(c2.suit)) {
                return 1;
            }
            else if (Double.parseDouble(c1.suit) ==Double.parseDouble(c2.suit)) {
                return 0;
            }
            else {
                return -1;
            }

            
        }
    }
//    public static void main(String[] args) throws Exception {
//      
//       Card A = new Card(""2"",""Diamonds"");
//       Card B = new Card(""3"",""Spades"");
//       
//       System.out.println(Card.SUIT_ORDER.compare(A,B));
//       
//            
//    }
    
}
@7a54e8f124145e1499aa397e938ea428@"
"b03611015","0","0.66","114448","@f1192d4f37a1cfc91f01d2c9770e6c6b@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (""A"".equals(that.face)) {
            that.face = ""14"";
        }
        if (""J"".equals(that.face)) {
            that.face = ""11"";
        }
        if (""Q"".equals(that.face)) {
            that.face = ""12"";
        }
        if (""K"".equals(that.face)) {
            that.face = ""13"";
        }
        if (""Spades"".equals(that.suit)) {
            that.suit = ""0.4"";
        }
        if (""Hearts"".equals(that.suit)) {
            that.suit = ""0.3"";
        }
        if (""Diamonds"".equals(that.suit)) {
            that.suit = ""0.2"";
        }
        if (""Clubs"".equals(that.suit)) {
            that.suit = ""0.1"";
        }
        if (""A"".equals(this.face)) {
            this.face = ""14"";
        }
        if (""K"".equals(this.face)) {
            this.face = ""13"";
        }
        if (""Q"".equals(this.face)) {
            this.face = ""12"";
        }
        if (""J"".equals(this.face)) {
            this.face = ""11"";
        }
        if (""Spades"".equals(this.suit)) {
            this.suit = ""0.4"";
        }
        if (""Hearts"".equals(this.suit)) {
            this.suit = ""0.3"";
        }
        if (""Diamonds"".equals(this.suit)) {
            this.suit = ""0.2"";
        }
        if (""Clubs"".equals(this.suit)) {
            this.suit = ""0.1"";
        }

        if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )<(Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return -1;
        }

        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (""Spades"".equals(c1.suit)) {
                c1.suit = ""0.4"";
            }
            if (""Hearts"".equals(c1.suit)) {
                c1.suit = ""0.3"";
            }
            if (""Diamonds"".equals(c1.suit)) {
                c1.suit = ""0.2"";
            }
            if (""Clubs"".equals(c1.suit)) {
                c1.suit = ""0.1"";
            }
            if (""Spades"".equals(c2.suit)) {
                c2.suit = ""0.4"";
            }
            if (c2.suit == ""Hearts"") {
                c2.suit = ""0.3"";
            }
            if (c2.suit == ""Diamonds"") {
                c2.suit = ""0.2"";
            }
            if (c2.suit == ""Clubs"") {
                c2.suit = ""0.1"";
            }
            if (Double.parseDouble(c1.suit) > Double.parseDouble(c2.suit)) {
                return 1;
            }
            if (Double.parseDouble(c1.suit) ==Double.parseDouble(c2.suit)) {
                return 0;
            }
            if (Double.parseDouble(c1.suit) < Double.parseDouble(c2.suit)) {
                return -1;
            }

            return 0;
        }
    }
//    public static void main(String[] args) throws Exception {
//      
//       Card A = new Card(""2"",""Diamonds"");
//       Card B = new Card(""3"",""Spades"");
//       
//       System.out.println(Card.SUIT_ORDER.compare(A,B));
//       
//            
//    }
    
}
    

@f1192d4f37a1cfc91f01d2c9770e6c6b@"
"b03611015","0","0.66","114816","@befacf5b48b99f4cec1c69b09dce53bd@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (""A"".equals(that.face)) {
            that.face = ""14"";
        }
        if (""J"".equals(that.face)) {
            that.face = ""11"";
        }
        if (""Q"".equals(that.face)) {
            that.face = ""12"";
        }
        if (""K"".equals(that.face)) {
            that.face = ""13"";
        }
        if (""Spades"".equals(that.suit)) {
            that.suit = ""0.4"";
        }
        if (""Hearts"".equals(that.suit)) {
            that.suit = ""0.3"";
        }
        if (""Diamonds"".equals(that.suit)) {
            that.suit = ""0.2"";
        }
        if (""Clubs"".equals(that.suit)) {
            that.suit = ""0.1"";
        }
        if (""A"".equals(this.face)) {
            this.face = ""14"";
        }
        if (""K"".equals(this.face)) {
            this.face = ""13"";
        }
        if (""Q"".equals(this.face)) {
            this.face = ""12"";
        }
        if (""J"".equals(this.face)) {
            this.face = ""11"";
        }
        if (""Spades"".equals(this.suit)) {
            this.suit = ""0.4"";
        }
        if (""Hearts"".equals(this.suit)) {
            this.suit = ""0.3"";
        }
        if (""Diamonds"".equals(this.suit)) {
            this.suit = ""0.2"";
        }
        if (""Clubs"".equals(this.suit)) {
            this.suit = ""0.1"";
        }

        if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )<(Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return -1;
        }

        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (""Spades"".equals(c1.suit)) {
                c1.suit = ""0.4"";
            }
            if (""Hearts"".equals(c1.suit)) {
                c1.suit = ""0.3"";
            }
            if (""Diamonds"".equals(c1.suit)) {
                c1.suit = ""0.2"";
            }
            if (""Clubs"".equals(c1.suit)) {
                c1.suit = ""0.1"";
            }
            if (""Spades"".equals(c2.suit)) {
                c2.suit = ""0.4"";
            }
            if (""Hearts"".equals(c2.suit)) {
                c2.suit = ""0.3"";
            }
            if (""Diamonds"".equals(c2.suit)) {
                c2.suit = ""0.2"";
            }
            if (""Clubs"".equals(c2.suit)) {
                c2.suit = ""0.1"";
            }
            if (Double.parseDouble(c1.suit) > Double.parseDouble(c2.suit)) {
                return 1;
            }
            if (Double.parseDouble(c1.suit) ==Double.parseDouble(c2.suit)) {
                return 0;
            }
            if (Double.parseDouble(c1.suit) < Double.parseDouble(c2.suit)) {
                return -1;
            }

            return 0;
        }
    }
//    public static void main(String[] args) throws Exception {
//      
//       Card A = new Card(""2"",""Diamonds"");
//       Card B = new Card(""3"",""Spades"");
//       
//       System.out.println(Card.SUIT_ORDER.compare(A,B));
//       
//            
//    }
    
}
    

@befacf5b48b99f4cec1c69b09dce53bd@"
"b03611033","0","0.71","114800","@ab741ce472fa722c2da2f4ed4adb8090@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (""A"".equals(that.face)) {
            that.face = ""14"";
        }
        else if (""J"".equals(that.face)) {
            that.face = ""11"";
        }
        else if (""Q"".equals(that.face)) {
            that.face = ""12"";
        }
        else if (""K"".equals(that.face)) {
            that.face = ""13"";
        }
        else{}
        if (""Spades"".equals(that.suit)) {
            that.suit = ""0.4"";
        }
        else if (""Hearts"".equals(that.suit)) {
            that.suit = ""0.3"";
        }
        else if (""Diamonds"".equals(that.suit)) {
            that.suit = ""0.2"";
        }
        else {
            that.suit = ""0.1"";
        }
        if (""A"".equals(this.face)) {
            this.face = ""14"";
        }
        else if (""K"".equals(this.face)) {
            this.face = ""13"";
        }
        else if (""Q"".equals(this.face)) {
            this.face = ""12"";
        }
        else if (""J"".equals(this.face)) {
            this.face = ""11"";
        }
        else{}
        if (""Spades"".equals(this.suit)) {
            this.suit = ""0.4"";
        }
        else if (""Hearts"".equals(this.suit)) {
            this.suit = ""0.3"";
        }
        else if (""Diamonds"".equals(this.suit)) {
            this.suit = ""0.2"";
        }
        else {
            this.suit = ""0.1"";
        }

        if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }
         else if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }
         else {
            return -1;
        }

    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (""Spades"".equals(c1.suit)) {
                c1.suit = ""0.4"";
            }
            else if (""Hearts"".equals(c1.suit)) {
                c1.suit = ""0.3"";
            }
            else if (""Diamonds"".equals(c1.suit)) {
                c1.suit = ""0.2"";
            }
            else if(""Clubs"".equals(c1.suit)){
                c1.suit = ""0.1"";
            }
            if (""Spades"".equals(c2.suit)) {
                c2.suit = ""0.4"";
            }
            else if (""Hearts"".equals(c2.suit)) {
                c2.suit = ""0.3"";
            }
            else if (""Diamonds"".equals(c2.suit)) {
                c2.suit = ""0.2"";
            }
            else if (""Clubs"".equals(c2.suit)){
                c2.suit = ""0.1"";
            }
            if (Double.parseDouble(c1.suit) > Double.parseDouble(c2.suit)) {
                return 1;
            }
            else if (Double.parseDouble(c1.suit) ==Double.parseDouble(c2.suit)) {
                return 0;
            }
            else {
                return -1;
            }

            
        }
    }
    
    
}
@ab741ce472fa722c2da2f4ed4adb8090@"
"b03611003","0","0","0","@c8a5d78fa646c9db9d57c3eedf18b3f7@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        int thisface = toface(this);
        int thatface = toface(that);
        int thissuit = tosuit(this);
        int thatsuit = tosuit(that);

        if (thisface > thatface) {
            return 1;
        } else if (thisface == thatface) {
            if (thissuit > thatsuit) {
                return 1;
            } else {
                return -1;
            }
        } else {
            return -1;
        }

    }

    public static int toface(Card A) {
        if (A.face == ""A"") {
            return 14;
        } else if (A.face == ""J"") {
            return 11;
        } else if (A.face == ""Q"") {
            return 12;
        } else if (A.face == ""K"") {
            return 13;
        } else {
            return Integer.parseInt(A.face);
        }
    }

//    4 3 2 1 黑陶、紅心、方塊、梅花
    public static int tosuit(Card A) {
        if (A.suit == ""Spades"") {
            return 4;
        } else if (A.suit == ""Hearts"") {
            return 3;
        } else if (A.suit == ""Diamonds"") {
            return 2;
        } else {
            return 1;
        }
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int thissuit = tosuit(c1);
            int thatsuit = tosuit(c2);

            if (thissuit > thatsuit) {
                return 1;
            } else if (thissuit == thatsuit) {
                return 0;
            } else {
                return -1;
            }
        }
    }
}

@c8a5d78fa646c9db9d57c3eedf18b3f7@"
"b03611003","0","0.66","114816","@50a15c08adf501c4d1cd70fed65e8fbd@

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        int thisface = toface(this);
        int thatface = toface(that);
        int thissuit = tosuit(this);
        int thatsuit = tosuit(that);

        if (thisface > thatface) {
            return 1;
        } else if (thisface == thatface) {
            if (thissuit > thatsuit) {
                return 1;
            } else {
                return -1;
            }
        } else {
            return -1;
        }

    }

    public static int toface(Card A) {
        if (A.face == ""A"") {
            return 14;
        } else if (A.face == ""J"") {
            return 11;
        } else if (A.face == ""Q"") {
            return 12;
        } else if (A.face == ""K"") {
            return 13;
        } else {
            return Integer.parseInt(A.face);
        }
    }

//    4 3 2 1 黑陶、紅心、方塊、梅花
    public static int tosuit(Card A) {
        if (A.suit == ""Spades"") {
            return 4;
        } else if (A.suit == ""Hearts"") {
            return 3;
        } else if (A.suit == ""Diamonds"") {
            return 2;
        } else {
            return 1;
        }
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int thissuit = tosuit(c1);
            int thatsuit = tosuit(c2);

            if (thissuit > thatsuit) {
                return 1;
            } else if (thissuit == thatsuit) {
                return 0;
            } else {
                return -1;
            }
        }
    }
}

@50a15c08adf501c4d1cd70fed65e8fbd@"
"d04631001","0","0","0","@82f6549583e85858294d2f8b81e57862@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    @Override
    public int compareTo(Card that) {
        int this_face = 0;
        int that_face = 0;
        int this_suit = 0;
        int that_suit = 0;
        if (this.face.equals(""A"")) {
            this_face = 14;
        }
        if (that.face.equals(""A"")) {
            that_face = 14;
        }
        if (this.face.equals(""J"")) {
            this_face = 11;
        }
        if (that.face.equals(""J"")) {
            that_face = 11;
        }
        if (this.face.equals(""Q"")) {
            this_face = 12;
        }
        if (that.face.equals(""Q"")) {
            that_face = 12;
        }
        if (this.face.equals(""K"")) {
            this_face = 13;
        }
        if (that.face.equals(""K"")) {
            that_face = 13;
        } else {
            this_face = Integer.parseInt(this.face);
            that_face = Integer.parseInt(that.face);
        }
        if (this.suit.equals(""Spades"")) {
            this_suit = 4;
        }
        if (that.suit.equals(""Spades"")) {
            that_suit = 4;
        }
        if (this.suit.equals(""Hearts"")) {
            this_suit = 3;
        }
        if (that.suit.equals(""Hearts"")) {
            that_suit = 3;
        }
        if (this.suit.equals(""Diamonds"")) {
            this_suit = 2;
        }
        if (that.suit.equals(""Diamonds"")) {
            that_suit = 2;
        }
        if (this.suit.equals(""Clubs"")) {
            this_suit = 1;
        }
        if (that.suit.equals(""Clubs"")) {
            that_suit = 1;
        }

        if (this_face < that_face) {
            return -1;
        }
        if (this_face > that_face) {
            return +1;
        }
        if (this_face == that_face) {
            if (this_suit < that_suit) {
                return -1;
            }
            if (this_suit > that_suit) {
                return +1;
            }
            return 0;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int c1_suit = 0;
            int c2_suit = 0;
            if (c1.suit.equals(""Spades"")) {
                c1_suit = 4;
            }
            if (c2.suit.equals(""Spades"")) {
                c1_suit = 4;
            }
            if (c1.suit.equals(""Hearts"")) {
                c1_suit = 3;
            }
            if (c2.suit.equals(""Hearts"")) {
                c1_suit = 3;
            }
            if (c1.suit.equals(""Diamonds"")) {
                c1_suit = 2;
            }
            if (c2.suit.equals(""Diamonds"")) {
                c1_suit = 2;
            }
            if (c1.suit.equals(""Clubs"")) {
                c1_suit = 1;
            }
            if (c2.suit.equals(""Clubs"")) {
                c1_suit = 1;
            }
            if (c1_suit < c2_suit) {
                return -1;
            }
            if (c1_suit > c2_suit) {
                return +1;
            }
            // complete this function so the Card can be sorted according to the suit
            return 0;
        }
    }
}

@82f6549583e85858294d2f8b81e57862@"
"b03611033","0","0.68","113968","@158e81e9d223971e9bed23d25f1ed205@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (that.face.equals(""A"")) {
            that.face = ""14"";
        }
        else if (that.face.equals(""J"")) {
            that.face = ""11"";
        }
        else if (that.face.equals(""Q"")) {
            that.face = ""12"";
        }
        else if (that.face.equals(""K"")) {
            that.face = ""13"";
        }
        else{}
        if (that.suit.equals(""Spades"")) {
            that.suit = ""0.4"";
        }
        else if (that.suit.equals(""Hearts"")) {
            that.suit = ""0.3"";
        }
        else if (that.suit.equals(""Diamonds"")) {
            that.suit = ""0.2"";
        }
        else {
            that.suit = ""0.1"";
        }
        if (this.face.equals(""A"")) {
            this.face = ""14"";
        }
        else if (this.face.equals(""K"")) {
            this.face = ""13"";
        }
        else if (this.face.equals(""Q"")) {
            this.face = ""12"";
        }
        else if (this.face.equals(""J"")) {
            this.face = ""11"";
        }
        else{}
        if (this.suit.equals(""Spades"")) {
            this.suit = ""0.4"";
        }
        else if (this.suit.equals(""Hearts"")) {
            this.suit = ""0.3"";
        }
        else if (this.suit.equals(""Diamonds"")) {
            this.suit = ""0.2"";
        }
        else {
            this.suit = ""0.1"";
        }

        if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }
         else if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }
         else {
            return -1;
        }

    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (c1.suit.equals(""Spades"")) {
                c1.suit = ""0.4"";
            }
            else if (c1.suit.equals(""Hearts"")) {
                c1.suit = ""0.3"";
            }
            else if (c1.suit.equals(""Diamonds"")) {
                c1.suit = ""0.2"";
            }
            else if(c1.suit.equals(""Clubs"")){
                c1.suit = ""0.1"";
            }
            if (c1.suit.equals(""Spades"")) {
                c2.suit = ""0.4"";
            }
            else if (c1.suit.equals(""Hearts"")) {
                c2.suit = ""0.3"";
            }
            else if (c1.suit.equals(""Diamonds"")) {
                c2.suit = ""0.2"";
            }
            else if (c1.suit.equals(""Clubs"")){
                c2.suit = ""0.1"";
            }
            if (Double.parseDouble(c1.suit) > Double.parseDouble(c2.suit)) {
                return 1;
            }
            else if (Double.parseDouble(c1.suit) == Double.parseDouble(c2.suit)) {
                return 0;
            }
            else {
                return -1;
            }

        }
    }
     
}
@158e81e9d223971e9bed23d25f1ed205@"
"b03611003","0","0.64","114800","@db7fe0554ae125cfe5604904910ce690@import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (""A"".equals(that.face)) {
            that.face = ""14"";
        }
        if (""J"".equals(that.face)) {
            that.face = ""11"";
        }
        if (""Q"".equals(that.face)) {
            that.face = ""12"";
        }
        if (""K"".equals(that.face)) {
            that.face = ""13"";
        }
        if (""Spades"".equals(that.suit)) {
            that.suit = ""0.4"";
        }
        if (""Hearts"".equals(that.suit)) {
            that.suit = ""0.3"";
        }
        if (""Diamonds"".equals(that.suit)) {
            that.suit = ""0.2"";
        }
        if (""Clubs"".equals(that.suit)) {
            that.suit = ""0.1"";
        }
        if (""A"".equals(this.face)) {
            this.face = ""14"";
        }
        if (""K"".equals(this.face)) {
            this.face = ""13"";
        }
        if (""Q"".equals(this.face)) {
            this.face = ""12"";
        }
        if (""J"".equals(this.face)) {
            this.face = ""11"";
        }
        if (""Spades"".equals(this.suit)) {
            this.suit = ""0.4"";
        }
        if (""Hearts"".equals(this.suit)) {
            this.suit = ""0.3"";
        }
        if (""Diamonds"".equals(this.suit)) {
            this.suit = ""0.2"";
        }
        if (""Clubs"".equals(this.suit)) {
            this.suit = ""0.1"";
        }

        if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )<(Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return -1;
        }

        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (""Spades"".equals(c1.suit)) {
                c1.suit = ""0.4"";
            }
            if (""Hearts"".equals(c1.suit)) {
                c1.suit = ""0.3"";
            }
            if (""Diamonds"".equals(c1.suit)) {
                c1.suit = ""0.2"";
            }
            if (""Clubs"".equals(c1.suit)) {
                c1.suit = ""0.1"";
            }
            if (""Spades"".equals(c2.suit)) {
                c2.suit = ""0.4"";
            }
            if (""Hearts"".equals(c2.suit)) {
                c2.suit = ""0.3"";
            }
            if (""Diamonds"".equals(c2.suit)) {
                c2.suit = ""0.2"";
            }
            if (""Clubs"".equals(c2.suit)) {
                c2.suit = ""0.1"";
            }
            if (Double.parseDouble(c1.suit) > Double.parseDouble(c2.suit)) {
                return 1;
            }
            if (Double.parseDouble(c1.suit) ==Double.parseDouble(c2.suit)) {
                return 0;
            }
            if (Double.parseDouble(c1.suit) < Double.parseDouble(c2.suit)) {
                return -1;
            }

            return 0;
        }
    }
    public static void main(String[] args) throws Exception {
      
       Card A = new Card(""A"",""Diamonds"");
       Card B = new Card(""10"",""Spades"");
       
       System.out.println(B.compareTo(A));
       
            
    }
    
}
@db7fe0554ae125cfe5604904910ce690@"
"b03611015","0","0.64","114800","@348bb422f75e600d8f7f8f3111123036@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (""A"".equals(that.face)) {
            that.face = ""14"";
        }
        if (""J"".equals(that.face)) {
            that.face = ""11"";
        }
        if (""Q"".equals(that.face)) {
            that.face = ""12"";
        }
        if (""K"".equals(that.face)) {
            that.face = ""13"";
        }
        if (""Spades"".equals(that.suit)) {
            that.suit = ""0.4"";
        }
        if (""Hearts"".equals(that.suit)) {
            that.suit = ""0.3"";
        }
        if (""Diamonds"".equals(that.suit)) {
            that.suit = ""0.2"";
        }
        if (""Clubs"".equals(that.suit)) {
            that.suit = ""0.1"";
        }
        if (""A"".equals(this.face)) {
            this.face = ""14"";
        }
        if (""K"".equals(this.face)) {
            this.face = ""13"";
        }
        if (""Q"".equals(this.face)) {
            this.face = ""12"";
        }
        if (""J"".equals(this.face)) {
            this.face = ""11"";
        }
        if (""Spades"".equals(this.suit)) {
            this.suit = ""0.4"";
        }
        if (""Hearts"".equals(this.suit)) {
            this.suit = ""0.3"";
        }
        if (""Diamonds"".equals(this.suit)) {
            this.suit = ""0.2"";
        }
        if (""Clubs"".equals(this.suit)) {
            this.suit = ""0.1"";
        }

        if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )<(Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return -1;
        }

       
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (""Spades"".equals(c1.suit)) {
                c1.suit = ""0.4"";
            }
            if (""Hearts"".equals(c1.suit)) {
                c1.suit = ""0.3"";
            }
            if (""Diamonds"".equals(c1.suit)) {
                c1.suit = ""0.2"";
            }
            if (""Clubs"".equals(c1.suit)) {
                c1.suit = ""0.1"";
            }
            if (""Spades"".equals(c2.suit)) {
                c2.suit = ""0.4"";
            }
            if (""Hearts"".equals(c2.suit)) {
                c2.suit = ""0.3"";
            }
            if (""Diamonds"".equals(c2.suit)) {
                c2.suit = ""0.2"";
            }
            if (""Clubs"".equals(c2.suit)) {
                c2.suit = ""0.1"";
            }
            if (Double.parseDouble(c1.suit) > Double.parseDouble(c2.suit)) {
                return 1;
            }
            if (Double.parseDouble(c1.suit) ==Double.parseDouble(c2.suit)) {
                return 0;
            }
            if (Double.parseDouble(c1.suit) < Double.parseDouble(c2.suit)) {
                return -1;
            }

            
        }
    }
    public static void main(String[] args) throws Exception {
      
       Card A = new Card(""A"",""Diamonds"");
       Card B = new Card(""10"",""Spades"");
       
       System.out.println(B.compareTo(A));
       
            
    }
    
}
    

@348bb422f75e600d8f7f8f3111123036@"
"b03611003","0","0","0","@10771902a0305c4f393757697839abff@import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (""A"".equals(that.face)) {
            that.face = ""14"";
        }
        if (""J"".equals(that.face)) {
            that.face = ""11"";
        }
        if (""Q"".equals(that.face)) {
            that.face = ""12"";
        }
        if (""K"".equals(that.face)) {
            that.face = ""13"";
        }
        if (""Spades"".equals(that.suit)) {
            that.suit = ""0.4"";
        }
        if (""Hearts"".equals(that.suit)) {
            that.suit = ""0.3"";
        }
        if (""Diamonds"".equals(that.suit)) {
            that.suit = ""0.2"";
        }
        if (""Clubs"".equals(that.suit)) {
            that.suit = ""0.1"";
        }
        if (""A"".equals(this.face)) {
            this.face = ""14"";
        }
        if (""K"".equals(this.face)) {
            this.face = ""13"";
        }
        if (""Q"".equals(this.face)) {
            this.face = ""12"";
        }
        if (""J"".equals(this.face)) {
            this.face = ""11"";
        }
        if (""Spades"".equals(this.suit)) {
            this.suit = ""0.4"";
        }
        if (""Hearts"".equals(this.suit)) {
            this.suit = ""0.3"";
        }
        if (""Diamonds"".equals(this.suit)) {
            this.suit = ""0.2"";
        }
        if (""Clubs"".equals(this.suit)) {
            this.suit = ""0.1"";
        }

        if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }
         if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )<(Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return -1;
        }

        return void;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (""Spades"".equals(c1.suit)) {
                c1.suit = ""0.4"";
            }
            if (""Hearts"".equals(c1.suit)) {
                c1.suit = ""0.3"";
            }
            if (""Diamonds"".equals(c1.suit)) {
                c1.suit = ""0.2"";
            }
            if (""Clubs"".equals(c1.suit)) {
                c1.suit = ""0.1"";
            }
            if (""Spades"".equals(c2.suit)) {
                c2.suit = ""0.4"";
            }
            if (""Hearts"".equals(c2.suit)) {
                c2.suit = ""0.3"";
            }
            if (""Diamonds"".equals(c2.suit)) {
                c2.suit = ""0.2"";
            }
            if (""Clubs"".equals(c2.suit)) {
                c2.suit = ""0.1"";
            }
            if (Double.parseDouble(c1.suit) > Double.parseDouble(c2.suit)) {
                return 1;
            }
            if (Double.parseDouble(c1.suit) ==Double.parseDouble(c2.suit)) {
                return 0;
            }
            if (Double.parseDouble(c1.suit) < Double.parseDouble(c2.suit)) {
                return -1;
            }

            return void;
        }
    }
    public static void main(String[] args) throws Exception {
      
       Card A = new Card(""A"",""Diamonds"");
       Card B = new Card(""10"",""Spades"");
       
       System.out.println(B.compareTo(A));
       
            
    }
    
}
@10771902a0305c4f393757697839abff@"
"b03611003","0","0.66","113632","@810fdf74e4ed615c008388f2fa5383bb@import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (""A"".equals(that.face)) {
            that.face = ""14"";
        }
        if (""J"".equals(that.face)) {
            that.face = ""11"";
        }
        if (""Q"".equals(that.face)) {
            that.face = ""12"";
        }
        if (""K"".equals(that.face)) {
            that.face = ""13"";
        }
        if (""Spades"".equals(that.suit)) {
            that.suit = ""0.4"";
        }
        if (""Hearts"".equals(that.suit)) {
            that.suit = ""0.3"";
        }
        if (""Diamonds"".equals(that.suit)) {
            that.suit = ""0.2"";
        }
        if (""Clubs"".equals(that.suit)) {
            that.suit = ""0.1"";
        }
        if (""A"".equals(this.face)) {
            this.face = ""14"";
        }
        if (""K"".equals(this.face)) {
            this.face = ""13"";
        }
        if (""Q"".equals(this.face)) {
            this.face = ""12"";
        }
        if (""J"".equals(this.face)) {
            this.face = ""11"";
        }
        if (""Spades"".equals(this.suit)) {
            this.suit = ""0.4"";
        }
        if (""Hearts"".equals(this.suit)) {
            this.suit = ""0.3"";
        }
        if (""Diamonds"".equals(this.suit)) {
            this.suit = ""0.2"";
        }
        if (""Clubs"".equals(this.suit)) {
            this.suit = ""0.1"";
        }

        if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }else if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }else{
            return -1;
        }

        
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (""Spades"".equals(c1.suit)) {
                c1.suit = ""0.4"";
            }
            if (""Hearts"".equals(c1.suit)) {
                c1.suit = ""0.3"";
            }
            if (""Diamonds"".equals(c1.suit)) {
                c1.suit = ""0.2"";
            }
            if (""Clubs"".equals(c1.suit)) {
                c1.suit = ""0.1"";
            }
            if (""Spades"".equals(c2.suit)) {
                c2.suit = ""0.4"";
            }
            if (""Hearts"".equals(c2.suit)) {
                c2.suit = ""0.3"";
            }
            if (""Diamonds"".equals(c2.suit)) {
                c2.suit = ""0.2"";
            }
            if (""Clubs"".equals(c2.suit)) {
                c2.suit = ""0.1"";
            }
            if (Double.parseDouble(c1.suit) > Double.parseDouble(c2.suit)) {
                return 1;
            }else if (Double.parseDouble(c1.suit) ==Double.parseDouble(c2.suit)) {
                return 0;
            }else
             {
                return -1;
            }

            
        }
    }
    public static void main(String[] args) throws Exception {
      
       Card A = new Card(""A"",""Diamonds"");
       Card B = new Card(""10"",""Spades"");
       
       System.out.println(B.compareTo(A));
       
            
    }
    
}
@810fdf74e4ed615c008388f2fa5383bb@"
"b03611015","0","0","0","@31be41f32d705d7d46b99b86025d353c@import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        int thisface = toface(this);
        int thatface = toface(that);
        int thissuit = tosuit(this);
        int thatsuit = tosuit(that);

        if (thisface > thatface) {
            return 1;
        } else if (thisface == thatface) {
            if (thissuit > thatsuit) {
                return 1;
            } else {
                return -1;
            }
        } else {
            return -1;
        }

    }

    public static int toface(Card A) {
        if (A.face == ""A"") {
            return 14;
        } else if (A.face == ""J"") {
            return 11;
        } else if (A.face == ""Q"") {
            return 12;
        } else if (A.face == ""K"") {
            return 13;
        } else {
            return Integer.parseInt(A.face);
        }
    }

//    4 3 2 1 黑陶、紅心、方塊、梅花
    public static int tosuit(Card A) {
        if (A.suit == ""Spades"") {
            return 4;
        } else if (A.suit == ""Hearts"") {
            return 3;
        } else if (A.suit == ""Diamonds"") {
            return 2;
        } else {
            return 1;
        }
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int thissuit = tosuit(c1);
            int thatsuit = tosuit(c2);

            if (thissuit > thatsuit) {
                return 1;
            } else if (thissuit == thatsuit) {
                return 0;
            } else {
                return -1;
            }
        }
    }

    
}
@31be41f32d705d7d46b99b86025d353c@"
"b02611028","0","0","0","@9e7f2cfd1053a021a7cc8d6f223a1cc2@
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
        @Override
    public int compareTo(Card that) {
        int this_face = 0;
        int that_face = 0;
        int this_suit = 0;
        int that_suit = 0;
        if (this.face.equals(""A"")) this_face = 14;
        if (that.face.equals(""A"")) that_face = 14;
        if (this.face.equals(""J"")) this_face = 11;
        if (that.face.equals(""J"")) that_face = 11;
        if (this.face.equals(""Q"")) this_face = 12;
        if (that.face.equals(""Q"")) that_face = 12;
        if (this.face.equals(""K"")) this_face = 13;
        if (that.face.equals(""K"")) that_face = 13;
        else {
            this_face = Integer.parseInt(this.face);
            that_face = Integer.parseInt(that.face);
        }
        if (this.suit.equals(""Spades"")) this_suit = 4;
        if (that.suit.equals(""Spades"")) that_suit = 4;
        if (this.suit.equals(""Hearts"")) this_suit = 3;
        if (that.suit.equals(""Hearts"")) that_suit = 3;
        if (this.suit.equals(""Diamonds"")) this_suit = 2;
        if (that.suit.equals(""Diamonds"")) that_suit = 2;
        if (this.suit.equals(""Clubs"")) this_suit = 1;
        if (that.suit.equals(""Clubs"")) that_suit = 1;
        
        if (this_face < that_face) return -1;
        if (this_face > that_face) return +1;
        if (this_face == that_face){
            if (this_suit < that_suit) return -1;
            if (this_suit > that_suit) return +1;
            return 0;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            int c1_suit = 0;
            int c2_suit = 0;
            if (c1.suit.equals(""Spades"")) c1_suit = 4;
            if (c2.suit.equals(""Spades"")) c1_suit = 4;
            if (c1.suit.equals(""Hearts"")) c1_suit = 3;
            if (c2.suit.equals(""Hearts"")) c1_suit = 3;
            if (c1.suit.equals(""Diamonds"")) c1_suit = 2;
            if (c2.suit.equals(""Diamonds"")) c1_suit = 2;
            if (c1.suit.equals(""Clubs"")) c1_suit = 1;
            if (c2.suit.equals(""Clubs"")) c1_suit = 1;
            if (c1_suit < c2_suit) return -1;
            if (c1_suit > c2_suit) return +1;
            // complete this function so the Card can be sorted according to the suit
            return 0;
        }
    }   
}


@9e7f2cfd1053a021a7cc8d6f223a1cc2@"
"b03611015","0","0","0","@918ffbcb28d72271908c4bff7e408516@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (""A"".equals(that.face)) {
            that.face = ""14"";
        }
        if (""J"".equals(that.face)) {
            that.face = ""11"";
        }
        if (""Q"".equals(that.face)) {
            that.face = ""12"";
        }
        if (""K"".equals(that.face)) {
            that.face = ""13"";
        }
        if (""Spades"".equals(that.suit)) {
            that.suit = ""0.4"";
        }
        if (""Hearts"".equals(that.suit)) {
            that.suit = ""0.3"";
        }
        if (""Diamonds"".equals(that.suit)) {
            that.suit = ""0.2"";
        }
        if (""Clubs"".equals(that.suit)) {
            that.suit = ""0.1"";
        }
        if (""A"".equals(this.face)) {
            this.face = ""14"";
        }
        if (""K"".equals(this.face)) {
            this.face = ""13"";
        }
        if (""Q"".equals(this.face)) {
            this.face = ""12"";
        }
        if (""J"".equals(this.face)) {
            this.face = ""11"";
        }
        if (""Spades"".equals(this.suit)) {
            this.suit = ""0.4"";
        }
        if (""Hearts"".equals(this.suit)) {
            this.suit = ""0.3"";
        }
        if (""Diamonds"".equals(this.suit)) {
            this.suit = ""0.2"";
        }
        if (""Clubs"".equals(this.suit)) {
            this.suit = ""0.1"";
        }

        if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }
         else if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }
         else 
            return -1;
        }

    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (""Spades"".equals(c1.suit)) {
                c1.suit = ""0.4"";
            }
            if (""Hearts"".equals(c1.suit)) {
                c1.suit = ""0.3"";
            }
            if (""Diamonds"".equals(c1.suit)) {
                c1.suit = ""0.2"";
            }
            if (""Clubs"".equals(c1.suit)) {
                c1.suit = ""0.1"";
            }
            if (""Spades"".equals(c2.suit)) {
                c2.suit = ""0.4"";
            }
            if (""Hearts"".equals(c2.suit)) {
                c2.suit = ""0.3"";
            }
            if (""Diamonds"".equals(c2.suit)) {
                c2.suit = ""0.2"";
            }
            if (""Clubs"".equals(c2.suit)) {
                c2.suit = ""0.1"";
            }
            if (Double.parseDouble(c1.suit) > Double.parseDouble(c2.suit)) {
                return 1;
            }
            else if (Double.parseDouble(c1.suit) ==Double.parseDouble(c2.suit)) {
                return 0;
            }
            else 
                return -1;
            }

        }
    }
//    public static void main(String[] args) throws Exception {
//      
//       Card A = new Card(""2"",""Diamonds"");
//       Card B = new Card(""3"",""Spades"");
//       
//       System.out.println(Card.SUIT_ORDER.compare(A,B));
//       
//            
//    }
    
}
    


back return to list
@918ffbcb28d72271908c4bff7e408516@"
"b02611028","0","0","0","@8ee211051d8f8af4ad345256fcc9d5bf@
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
        
    public int compareTo(Card that) {
        int this_face = 0;
        int that_face = 0;
        int this_suit = 0;
        int that_suit = 0;
        if (this.face.equals(""A"")) this_face = 14;
        if (that.face.equals(""A"")) that_face = 14;
        if (this.face.equals(""J"")) this_face = 11;
        if (that.face.equals(""J"")) that_face = 11;
        if (this.face.equals(""Q"")) this_face = 12;
        if (that.face.equals(""Q"")) that_face = 12;
        if (this.face.equals(""K"")) this_face = 13;
        if (that.face.equals(""K"")) that_face = 13;
        else {
            this_face = Integer.parseInt(this.face);
            that_face = Integer.parseInt(that.face);
        }
        if (this.suit.equals(""Spades"")) this_suit = 4;
        if (that.suit.equals(""Spades"")) that_suit = 4;
        if (this.suit.equals(""Hearts"")) this_suit = 3;
        if (that.suit.equals(""Hearts"")) that_suit = 3;
        if (this.suit.equals(""Diamonds"")) this_suit = 2;
        if (that.suit.equals(""Diamonds"")) that_suit = 2;
        if (this.suit.equals(""Clubs"")) this_suit = 1;
        if (that.suit.equals(""Clubs"")) that_suit = 1;
        
        if (this_face < that_face) return -1;
        if (this_face > that_face) return +1;
        if (this_face == that_face){
            if (this_suit < that_suit) return -1;
            if (this_suit > that_suit) return +1;
            return 0;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            int c1_suit = 0;
            int c2_suit = 0;
            if (c1.suit.equals(""Spades"")) c1_suit = 4;
            if (c2.suit.equals(""Spades"")) c1_suit = 4;
            if (c1.suit.equals(""Hearts"")) c1_suit = 3;
            if (c2.suit.equals(""Hearts"")) c1_suit = 3;
            if (c1.suit.equals(""Diamonds"")) c1_suit = 2;
            if (c2.suit.equals(""Diamonds"")) c1_suit = 2;
            if (c1.suit.equals(""Clubs"")) c1_suit = 1;
            if (c2.suit.equals(""Clubs"")) c1_suit = 1;
            if (c1_suit < c2_suit) return -1;
            if (c1_suit > c2_suit) return +1;
            // complete this function so the Card can be sorted according to the suit
            return 0;
        }
    }   
}


@8ee211051d8f8af4ad345256fcc9d5bf@"
"b03611015","0","0.66","115456","@1872ae1c8c3e7974c45bf5e725872675@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (""A"".equals(that.face)) {
            that.face = ""14"";
        }
        if (""J"".equals(that.face)) {
            that.face = ""11"";
        }
        if (""Q"".equals(that.face)) {
            that.face = ""12"";
        }
        if (""K"".equals(that.face)) {
            that.face = ""13"";
        }
        if (""Spades"".equals(that.suit)) {
            that.suit = ""0.4"";
        }
        if (""Hearts"".equals(that.suit)) {
            that.suit = ""0.3"";
        }
        if (""Diamonds"".equals(that.suit)) {
            that.suit = ""0.2"";
        }
        if (""Clubs"".equals(that.suit)) {
            that.suit = ""0.1"";
        }
        if (""A"".equals(this.face)) {
            this.face = ""14"";
        }
        if (""K"".equals(this.face)) {
            this.face = ""13"";
        }
        if (""Q"".equals(this.face)) {
            this.face = ""12"";
        }
        if (""J"".equals(this.face)) {
            this.face = ""11"";
        }
        if (""Spades"".equals(this.suit)) {
            this.suit = ""0.4"";
        }
        if (""Hearts"".equals(this.suit)) {
            this.suit = ""0.3"";
        }
        if (""Diamonds"".equals(this.suit)) {
            this.suit = ""0.2"";
        }
        if (""Clubs"".equals(this.suit)) {
            this.suit = ""0.1"";
        }

        if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )> (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 1;
        }
        else if ((Double.parseDouble(this.face) + Double.parseDouble(this.suit) )== (Double.parseDouble(that.face) + Double.parseDouble(that.suit) )) {
            return 0;
        }
        else
            return -1;
        

        
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            if (""Spades"".equals(c1.suit)) {
                c1.suit = ""0.4"";
            }
            if (""Hearts"".equals(c1.suit)) {
                c1.suit = ""0.3"";
            }
            if (""Diamonds"".equals(c1.suit)) {
                c1.suit = ""0.2"";
            }
            if (""Clubs"".equals(c1.suit)) {
                c1.suit = ""0.1"";
            }
            if (""Spades"".equals(c2.suit)) {
                c2.suit = ""0.4"";
            }
            if (""Hearts"".equals(c2.suit)) {
                c2.suit = ""0.3"";
            }
            if (""Diamonds"".equals(c2.suit)) {
                c2.suit = ""0.2"";
            }
            if (""Clubs"".equals(c2.suit)) {
                c2.suit = ""0.1"";
            }
            if (Double.parseDouble(c1.suit) > Double.parseDouble(c2.suit)) {
                return 1;
            }
            else if(Double.parseDouble(c1.suit) ==Double.parseDouble(c2.suit)) {
                return 0;
            }
            else
                return -1;
            

           
        }
    }

    
}
    


@1872ae1c8c3e7974c45bf5e725872675@"
"b03611015","5","0.13","111008","@f3dacb817f06e76fa1ab16666e46bc17@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int thisface = face(this);
        int thatface = face(that);
        double thissuit = suit(this);
        double thatsuit = suit(that);
        
        if((thisface+thissuit)>(thatface+thatsuit))
            return 1;
        else if((thisface+thissuit)==(thatface+thatsuit))
            return 0;
        else
            return -1;
       
    }

    public static int face(Card that) {
        if (""A"".equals(that.face)) {
            return 14;
        } else if (""J"".equals(that.face)) {
            return 11;
        } else if (""Q"".equals(that.face)) {
            return 12;
        } else if (""K"".equals(that.face)) {
            return 13;
        } else {
            return Integer.parseInt(that.face);
        }

    }

    public static double suit(Card A) {
        if (""Spades"".equals(A.suit)) {
            return 0.4;
        } else if (""Hearts"".equals(A.suit)) {
            return 0.3;
        } else if (""Diamonds"".equals(A.suit)) {
            return 0.2;
        } else {
            return 0.1;
        }
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
          double C1 =suit(c1);
          double C2 =suit(c2);
          
          if(C1>C2)
              return 1;
          else if(C1==C2)
              return 0;
          else
              return -1;
        }
    }

//    public static void main(String[] args) throws Exception {
//
//        Card A = new Card(""A"", ""Diamonds"");
//        Card B = new Card(""A"", ""Spades"");
//
//        System.out.println(Card.SUIT_ORDER.compare(A,B));
//
//    }

}

@f3dacb817f06e76fa1ab16666e46bc17@"
"d04631001","0","0.65","109760","@fdb46bfd60736e187d021486b7b55b32@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    @Override
    public int compareTo(Card that) {
        int this_face = 0;
        int that_face = 0;
        int this_suit = 0;
        int that_suit = 0;
        if (this.face.equals(""A"")) {
            this_face = 14;
        }
        if (that.face.equals(""A"")) {
            that_face = 14;
        }
        if (this.face.equals(""J"")) {
            this_face = 11;
        }
        if (that.face.equals(""J"")) {
            that_face = 11;
        }
        if (this.face.equals(""Q"")) {
            this_face = 12;
        }
        if (that.face.equals(""Q"")) {
            that_face = 12;
        }
        if (this.face.equals(""K"")) {
            this_face = 13;
        }
        if (that.face.equals(""K"")) {
            that_face = 13;
        }
        if (this.face.equals(""2"")) {
            this_face = 2;
        }
        if (that.face.equals(""2"")) {
            that_face = 2;
        }
        if (this.face.equals(""3"")) {
            this_face = 3;
        }
        if (that.face.equals(""3"")) {
            that_face = 3;
        }
        if (this.face.equals(""4"")) {
            this_face = 4;
        }
        if (that.face.equals(""4"")) {
            that_face = 4;
        }
        if (this.face.equals(""5"")) {
            this_face = 5;
        }
        if (that.face.equals(""5"")) {
            that_face = 5;
        }
        if (this.face.equals(""6"")) {
            this_face = 6;
        }
        if (that.face.equals(""6"")) {
            that_face = 6;
        }
        if (this.face.equals(""7"")) {
            this_face = 7;
        }
        if (that.face.equals(""7"")) {
            that_face = 7;
        }
        if (this.face.equals(""8"")) {
            this_face = 8;
        }
        if (that.face.equals(""8"")) {
            that_face = 8;
        }
        if (this.face.equals(""9"")) {
            this_face = 9;
        }
        if (that.face.equals(""9"")) {
            that_face = 9;
        }
        if (this.face.equals(""10"")) {
            this_face = 10;
        }
        if (that.face.equals(""10"")) {
            that_face = 10;
        }
        if (this.suit.equals(""Spades"")) {
            this_suit = 4;
        }
        if (that.suit.equals(""Spades"")) {
            that_suit = 4;
        }
        if (this.suit.equals(""Hearts"")) {
            this_suit = 3;
        }
        if (that.suit.equals(""Hearts"")) {
            that_suit = 3;
        }
        if (this.suit.equals(""Diamonds"")) {
            this_suit = 2;
        }
        if (that.suit.equals(""Diamonds"")) {
            that_suit = 2;
        }
        if (this.suit.equals(""Clubs"")) {
            this_suit = 1;
        }
        if (that.suit.equals(""Clubs"")) {
            that_suit = 1;
        }

        if (this_face < that_face) {
            return -1;
        }
        if (this_face > that_face) {
            return +1;
        }
        if (this_face == that_face) {
            if (this_suit < that_suit) {
                return -1;
            }
            if (this_suit > that_suit) {
                return +1;
            }
            return 0;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int c1_suit = 0;
            int c2_suit = 0;
            if (c1.suit.equals(""Spades"")) {
                c1_suit = 4;
            }
            if (c2.suit.equals(""Spades"")) {
                c1_suit = 4;
            }
            if (c1.suit.equals(""Hearts"")) {
                c1_suit = 3;
            }
            if (c2.suit.equals(""Hearts"")) {
                c1_suit = 3;
            }
            if (c1.suit.equals(""Diamonds"")) {
                c1_suit = 2;
            }
            if (c2.suit.equals(""Diamonds"")) {
                c1_suit = 2;
            }
            if (c1.suit.equals(""Clubs"")) {
                c1_suit = 1;
            }
            if (c2.suit.equals(""Clubs"")) {
                c1_suit = 1;
            }
            if (c1_suit < c2_suit) {
                return -1;
            }
            if (c1_suit > c2_suit) {
                return +1;
            }
            // complete this function so the Card can be sorted according to the suit
            return 0;
        }
    }
}

@fdb46bfd60736e187d021486b7b55b32@"
"d04631001","0","0.64","111088","@7c38ecae0c7675560a4e9873173cad6b@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    @Override
    public int compareTo(Card that) {
        int this_face = 0;
        int that_face = 0;
        int this_suit = 0;
        int that_suit = 0;
        if (this.face.equals(""A"")) {
            this_face = 14;
        }
        if (that.face.equals(""A"")) {
            that_face = 14;
        }
        if (this.face.equals(""J"")) {
            this_face = 11;
        }
        if (that.face.equals(""J"")) {
            that_face = 11;
        }
        if (this.face.equals(""Q"")) {
            this_face = 12;
        }
        if (that.face.equals(""Q"")) {
            that_face = 12;
        }
        if (this.face.equals(""K"")) {
            this_face = 13;
        }
        if (that.face.equals(""K"")) {
            that_face = 13;
        }
        if (this.face.equals(""2"")) {
            this_face = 2;
        }
        if (that.face.equals(""2"")) {
            that_face = 2;
        }
        if (this.face.equals(""3"")) {
            this_face = 3;
        }
        if (that.face.equals(""3"")) {
            that_face = 3;
        }
        if (this.face.equals(""4"")) {
            this_face = 4;
        }
        if (that.face.equals(""4"")) {
            that_face = 4;
        }
        if (this.face.equals(""5"")) {
            this_face = 5;
        }
        if (that.face.equals(""5"")) {
            that_face = 5;
        }
        if (this.face.equals(""6"")) {
            this_face = 6;
        }
        if (that.face.equals(""6"")) {
            that_face = 6;
        }
        if (this.face.equals(""7"")) {
            this_face = 7;
        }
        if (that.face.equals(""7"")) {
            that_face = 7;
        }
        if (this.face.equals(""8"")) {
            this_face = 8;
        }
        if (that.face.equals(""8"")) {
            that_face = 8;
        }
        if (this.face.equals(""9"")) {
            this_face = 9;
        }
        if (that.face.equals(""9"")) {
            that_face = 9;
        }
        if (this.face.equals(""10"")) {
            this_face = 10;
        }
        if (that.face.equals(""10"")) {
            that_face = 10;
        }
        if (this.suit.equals(""Spades"")) {
            this_suit = 4;
        }
        if (that.suit.equals(""Spades"")) {
            that_suit = 4;
        }
        if (this.suit.equals(""Hearts"")) {
            this_suit = 3;
        }
        if (that.suit.equals(""Hearts"")) {
            that_suit = 3;
        }
        if (this.suit.equals(""Diamonds"")) {
            this_suit = 2;
        }
        if (that.suit.equals(""Diamonds"")) {
            that_suit = 2;
        }
        if (this.suit.equals(""Clubs"")) {
            this_suit = 1;
        }
        if (that.suit.equals(""Clubs"")) {
            that_suit = 1;
        }

        if (this_face < that_face) {
            return -1;
        }
        if (this_face > that_face) {
            return 1;
        }
        if (this_face == that_face) {
            if (this_suit < that_suit) {
                return -1;
            }
            if (this_suit > that_suit) {
                return 1;
            }
            return 0;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int c1_suit = 0;
            int c2_suit = 0;
            if (c1.suit.equals(""Spades"")) {
                c1_suit = 4;
            }
            if (c2.suit.equals(""Spades"")) {
                c1_suit = 4;
            }
            if (c1.suit.equals(""Hearts"")) {
                c1_suit = 3;
            }
            if (c2.suit.equals(""Hearts"")) {
                c1_suit = 3;
            }
            if (c1.suit.equals(""Diamonds"")) {
                c1_suit = 2;
            }
            if (c2.suit.equals(""Diamonds"")) {
                c1_suit = 2;
            }
            if (c1.suit.equals(""Clubs"")) {
                c1_suit = 1;
            }
            if (c2.suit.equals(""Clubs"")) {
                c1_suit = 1;
            }
            if (c1_suit < c2_suit) {
                return -1;
            }
            if (c1_suit > c2_suit) {
                return 1;
            }
            // complete this function so the Card can be sorted according to the suit
            return 0;
        }
    }
}

@7c38ecae0c7675560a4e9873173cad6b@"
"d04631001","0","0.65","110992","@242b68d0b9f5f798b82db9a9d199e3f7@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    //@Override
    public int compareTo(Card that) {
        int this_face = 0;
        int that_face = 0;
        int this_suit = 0;
        int that_suit = 0;
        if (this.face.equals(""A"")) {
            this_face = 14;
        }
        if (that.face.equals(""A"")) {
            that_face = 14;
        }
        if (this.face.equals(""J"")) {
            this_face = 11;
        }
        if (that.face.equals(""J"")) {
            that_face = 11;
        }
        if (this.face.equals(""Q"")) {
            this_face = 12;
        }
        if (that.face.equals(""Q"")) {
            that_face = 12;
        }
        if (this.face.equals(""K"")) {
            this_face = 13;
        }
        if (that.face.equals(""K"")) {
            that_face = 13;
        }
        if (this.face.equals(""2"")) {
            this_face = 2;
        }
        if (that.face.equals(""2"")) {
            that_face = 2;
        }
        if (this.face.equals(""3"")) {
            this_face = 3;
        }
        if (that.face.equals(""3"")) {
            that_face = 3;
        }
        if (this.face.equals(""4"")) {
            this_face = 4;
        }
        if (that.face.equals(""4"")) {
            that_face = 4;
        }
        if (this.face.equals(""5"")) {
            this_face = 5;
        }
        if (that.face.equals(""5"")) {
            that_face = 5;
        }
        if (this.face.equals(""6"")) {
            this_face = 6;
        }
        if (that.face.equals(""6"")) {
            that_face = 6;
        }
        if (this.face.equals(""7"")) {
            this_face = 7;
        }
        if (that.face.equals(""7"")) {
            that_face = 7;
        }
        if (this.face.equals(""8"")) {
            this_face = 8;
        }
        if (that.face.equals(""8"")) {
            that_face = 8;
        }
        if (this.face.equals(""9"")) {
            this_face = 9;
        }
        if (that.face.equals(""9"")) {
            that_face = 9;
        }
        if (this.face.equals(""10"")) {
            this_face = 10;
        }
        if (that.face.equals(""10"")) {
            that_face = 10;
        }
        if (this.suit.equals(""Spades"")) {
            this_suit = 4;
        }
        if (that.suit.equals(""Spades"")) {
            that_suit = 4;
        }
        if (this.suit.equals(""Hearts"")) {
            this_suit = 3;
        }
        if (that.suit.equals(""Hearts"")) {
            that_suit = 3;
        }
        if (this.suit.equals(""Diamonds"")) {
            this_suit = 2;
        }
        if (that.suit.equals(""Diamonds"")) {
            that_suit = 2;
        }
        if (this.suit.equals(""Clubs"")) {
            this_suit = 1;
        }
        if (that.suit.equals(""Clubs"")) {
            that_suit = 1;
        }

        if (this_face < that_face) {
            return -1;
        }
        if (this_face > that_face) {
            return 1;
        }
        if (this_face == that_face) {
            if (this_suit < that_suit) {
                return -1;
            }
            if (this_suit > that_suit) {
                return 1;
            }
            return 0;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int c1_suit = 0;
            int c2_suit = 0;
            if (c1.suit.equals(""Spades"")) {
                c1_suit = 4;
            }
            if (c2.suit.equals(""Spades"")) {
                c1_suit = 4;
            }
            if (c1.suit.equals(""Hearts"")) {
                c1_suit = 3;
            }
            if (c2.suit.equals(""Hearts"")) {
                c1_suit = 3;
            }
            if (c1.suit.equals(""Diamonds"")) {
                c1_suit = 2;
            }
            if (c2.suit.equals(""Diamonds"")) {
                c1_suit = 2;
            }
            if (c1.suit.equals(""Clubs"")) {
                c1_suit = 1;
            }
            if (c2.suit.equals(""Clubs"")) {
                c1_suit = 1;
            }
            if (c1_suit < c2_suit) {
                return -1;
            }
            if (c1_suit > c2_suit) {
                return 1;
            }
            // complete this function so the Card can be sorted according to the suit
            return 0;
        }
    }
}

@242b68d0b9f5f798b82db9a9d199e3f7@"
"d04631001","5","0.13","111760","@b54a0984ee91f285b8d8d26e706a011b@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    //@Override
    public int compareTo(Card that) {
        int this_face = 0;
        int that_face = 0;
        int this_suit = 0;
        int that_suit = 0;
        if (this.face.equals(""A"")) {
            this_face = 14;
        }
        if (that.face.equals(""A"")) {
            that_face = 14;
        }
        if (this.face.equals(""J"")) {
            this_face = 11;
        }
        if (that.face.equals(""J"")) {
            that_face = 11;
        }
        if (this.face.equals(""Q"")) {
            this_face = 12;
        }
        if (that.face.equals(""Q"")) {
            that_face = 12;
        }
        if (this.face.equals(""K"")) {
            this_face = 13;
        }
        if (that.face.equals(""K"")) {
            that_face = 13;
        }
        if (this.face.equals(""2"")) {
            this_face = 2;
        }
        if (that.face.equals(""2"")) {
            that_face = 2;
        }
        if (this.face.equals(""3"")) {
            this_face = 3;
        }
        if (that.face.equals(""3"")) {
            that_face = 3;
        }
        if (this.face.equals(""4"")) {
            this_face = 4;
        }
        if (that.face.equals(""4"")) {
            that_face = 4;
        }
        if (this.face.equals(""5"")) {
            this_face = 5;
        }
        if (that.face.equals(""5"")) {
            that_face = 5;
        }
        if (this.face.equals(""6"")) {
            this_face = 6;
        }
        if (that.face.equals(""6"")) {
            that_face = 6;
        }
        if (this.face.equals(""7"")) {
            this_face = 7;
        }
        if (that.face.equals(""7"")) {
            that_face = 7;
        }
        if (this.face.equals(""8"")) {
            this_face = 8;
        }
        if (that.face.equals(""8"")) {
            that_face = 8;
        }
        if (this.face.equals(""9"")) {
            this_face = 9;
        }
        if (that.face.equals(""9"")) {
            that_face = 9;
        }
        if (this.face.equals(""10"")) {
            this_face = 10;
        }
        if (that.face.equals(""10"")) {
            that_face = 10;
        }
        if (this.suit.equals(""Spades"")) {
            this_suit = 4;
        }
        if (that.suit.equals(""Spades"")) {
            that_suit = 4;
        }
        if (this.suit.equals(""Hearts"")) {
            this_suit = 3;
        }
        if (that.suit.equals(""Hearts"")) {
            that_suit = 3;
        }
        if (this.suit.equals(""Diamonds"")) {
            this_suit = 2;
        }
        if (that.suit.equals(""Diamonds"")) {
            that_suit = 2;
        }
        if (this.suit.equals(""Clubs"")) {
            this_suit = 1;
        }
        if (that.suit.equals(""Clubs"")) {
            that_suit = 1;
        }

        if (this_face < that_face) {
            return -1;
        }
        if (this_face > that_face) {
            return 1;
        }
        if (this_face == that_face) {
            if (this_suit < that_suit) {
                return -1;
            }
            if (this_suit > that_suit) {
                return 1;
            }
            return 0;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int c1_suit = 0;
            int c2_suit = 0;
            if (c1.suit.equals(""Spades"")) {
                c1_suit = 4;
            }
            if (c2.suit.equals(""Spades"")) {
                c2_suit = 4;
            }
            if (c1.suit.equals(""Hearts"")) {
                c1_suit = 3;
            }
            if (c2.suit.equals(""Hearts"")) {
                c2_suit = 3;
            }
            if (c1.suit.equals(""Diamonds"")) {
                c1_suit = 2;
            }
            if (c2.suit.equals(""Diamonds"")) {
                c2_suit = 2;
            }
            if (c1.suit.equals(""Clubs"")) {
                c1_suit = 1;
            }
            if (c2.suit.equals(""Clubs"")) {
                c2_suit = 1;
            }
            if (c1_suit < c2_suit) {
                return -1;
            }
            if (c1_suit > c2_suit) {
                return 1;
            }
            // complete this function so the Card can be sorted according to the suit
            return 0;
        }
    }
}

@b54a0984ee91f285b8d8d26e706a011b@"
"b03611003","0","0","0","@75f2ecc659803a162f9ea0895dce49c3@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        int thisface = toface(this);
        int thatface = toface(that);
        int thissuit = tosuit(this);
        int thatsuit = tosuit(that);

        if (thisface > thatface) {
            return 1;
        } else if (thisface == thatface) {
            if (thissuit > thatsuit) {
                return 1;
            } else if(thissuit == thatsuit){
                return 0;
            }else{
                return -1;
            }
        } else {
            return -1;
        }

    }

    public static int toface(Card A) {
        if (A.face == ""A"") {
            return 14;
        } else if (A.face == ""J"") {
            return 11;
        } else if (A.face == ""Q"") {
            return 12;
        } else if (A.face == ""K"") {
            return 13;
        } else {
            return Integer.parseInt(A.face);
        }
    }

//    4 3 2 1 黑陶、紅心、方塊、梅花
    public static int tosuit(Card A) {
        if (A.suit == ""Spades"") {
            return 4;
        } else if (A.suit == ""Hearts"") {
            return 3;
        } else if (A.suit == ""Diamonds"") {
            return 2;
        } else {
            return 1;
        }
    }

//     TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int thissuit = tosuit(c1);
            int thatsuit = tosuit(c2);

            if (thissuit > thatsuit) {
                return 1;
            } else if (thissuit == thatsuit) {
                return 0;
            } else {
                return -1;
            }
            
        }
    }

   
}

@75f2ecc659803a162f9ea0895dce49c3@"
"b03611003","0","0.13","111760","@439db1fc1f6051a51abc4a08a121d32e@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
//    public String getFace() {
//        return this.face;
//    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        int thisface = toface(this);
        int thatface = toface(that);
        int thissuit = tosuit(this);
        int thatsuit = tosuit(that);

        if (thisface > thatface) {
            return 1;
        } else if (thisface == thatface) {
            if (thissuit > thatsuit) {
                return 1;
            } else if(thissuit == thatsuit){
                return 0;
            }else{
                return -1;
            }
        } else {
            return -1;
        }

    }

    private static int toface(Card A) {
        if (A.face == ""A"") {
            return 14;
        } else if (A.face == ""J"") {
            return 11;
        } else if (A.face == ""Q"") {
            return 12;
        } else if (A.face == ""K"") {
            return 13;
        } else {
            return Integer.parseInt(A.face);
        }
    }

//    4 3 2 1 黑陶、紅心、方塊、梅花
    private static int tosuit(Card A) {
        if (A.suit == ""Spades"") {
            return 4;
        } else if (A.suit == ""Hearts"") {
            return 3;
        } else if (A.suit == ""Diamonds"") {
            return 2;
        } else {
            return 1;
        }
    }

//     TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int thissuit = tosuit(c1);
            int thatsuit = tosuit(c2);

            if (thissuit > thatsuit) {
                return 1;
            } else if (thissuit == thatsuit) {
                return 0;
            } else {
                return -1;
            }
            
        }
    }

   
}

@439db1fc1f6051a51abc4a08a121d32e@"
"b03611003","0","0.13","111760","@2a82df1bee3de31294a465d8cf0c6f84@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

//        int thisface = toface(this);
//        int thatface = toface(that);
//        int thissuit = tosuit(this);
//        int thatsuit = tosuit(that);
//
//        if (thisface > thatface) {
//            return 1;
//        } else if (thisface == thatface) {
//            if (thissuit > thatsuit) {
//                return 1;
//            } else if(thissuit == thatsuit){
//                return 0;
//            }else{
//                return -1;
//            }
//        } else {
//            return -1;
//        }

    }

    private static int toface(Card A) {
        if (A.face == ""A"") {
            return 14;
        } else if (A.face == ""J"") {
            return 11;
        } else if (A.face == ""Q"") {
            return 12;
        } else if (A.face == ""K"") {
            return 13;
        } else {
            return Integer.parseInt(A.face);
        }
    }

//    4 3 2 1 黑陶、紅心、方塊、梅花
    private static int tosuit(Card A) {
        if (A.suit == ""Spades"") {
            return 4;
        } else if (A.suit == ""Hearts"") {
            return 3;
        } else if (A.suit == ""Diamonds"") {
            return 2;
        } else {
            return 1;
        }
    }

//     TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int thissuit = tosuit(c1);
            int thatsuit = tosuit(c2);

            if (thissuit > thatsuit) {
                return 1;
            } else if (thissuit == thatsuit) {
                return 0;
            } else {
                return -1;
            }
            
        }
    }

   
}

@2a82df1bee3de31294a465d8cf0c6f84@"
"b03611003","0","0.45","105344","@bd77ab1a45e63b46e7f112dfc890bab1@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

//     DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

//        int thisface = toface(this);
//        int thatface = toface(that);
//        int thissuit = tosuit(this);
//        int thatsuit = tosuit(that);
//
//        if (thisface > thatface) {
//            return 1;
//        } else if (thisface == thatface) {
//            if (thissuit > thatsuit) {
//                return 1;
//            } else if(thissuit == thatsuit){
//                return 0;
//            }else{
//                return -1;
//            }
//        } else {
//            return -1;
//        }

    }

    private static int toface(Card A) {
        if (A.face == ""A"") {
            return 14;
        } else if (A.face == ""J"") {
            return 11;
        } else if (A.face == ""Q"") {
            return 12;
        } else if (A.face == ""K"") {
            return 13;
        } else {
            return Integer.parseInt(A.face);
        }
    }

//    4 3 2 1 黑陶、紅心、方塊、梅花
    private static int tosuit(Card A) {
        if (A.suit == ""Spades"") {
            return 4;
        } else if (A.suit == ""Hearts"") {
            return 3;
        } else if (A.suit == ""Diamonds"") {
            return 2;
        } else {
            return 1;
        }
    }

//     TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int thissuit = tosuit(c1);
            int thatsuit = tosuit(c2);

            if (thissuit > thatsuit) {
                return 1;
            } else if (thissuit == thatsuit) {
                return 0;
            } else {
                return -1;
            }
            
        }
    }

   
}

@bd77ab1a45e63b46e7f112dfc890bab1@"
"b03611003","0","0.64","110848","@577f7d703fe33c10ee8609260a260c6d@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

//     DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

//        int thisface = toface(this);
//        int thatface = toface(that);
//        int thissuit = tosuit(this);
//        int thatsuit = tosuit(that);
//
//        if (thisface > thatface) {
//            return 1;
//        } else if (thisface == thatface) {
//            if (thissuit > thatsuit) {
//                return 1;
//            } else if(thissuit == thatsuit){
//                return 0;
//            }else{
//                return -1;
//            }
//        } else {
//            return -1;
//        }
        return 0;
    }

    private static int toface(Card A) {
        if (A.face == ""A"") {
            return 14;
        } else if (A.face == ""J"") {
            return 11;
        } else if (A.face == ""Q"") {
            return 12;
        } else if (A.face == ""K"") {
            return 13;
        } else {
            return Integer.parseInt(A.face);
        }
    }

//    4 3 2 1 黑陶、紅心、方塊、梅花
    private static int tosuit(Card A) {
        if (A.suit == ""Spades"") {
            return 4;
        } else if (A.suit == ""Hearts"") {
            return 3;
        } else if (A.suit == ""Diamonds"") {
            return 2;
        } else {
            return 1;
        }
    }

//     TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int thissuit = tosuit(c1);
            int thatsuit = tosuit(c2);

            if (thissuit > thatsuit) {
                return 1;
            } else if (thissuit == thatsuit) {
                return 0;
            } else {
                return -1;
            }
            
        }
    }

   
}

@577f7d703fe33c10ee8609260a260c6d@"
"b03611003","0","0","0","@73d320af0f3ec4cdd8d207ad592acfdd@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

//     DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        int thisface = toface(this);
//        int thatface = toface(that);
//        int thissuit = tosuit(this);
//        int thatsuit = tosuit(that);
//
//        if (thisface > thatface) {
//            return 1;
//        } else if (thisface == thatface) {
//            if (thissuit > thatsuit) {
//                return 1;
//            } else if(thissuit == thatsuit){
//                return 0;
//            }else{
//                return -1;
//            }
//        } else {
//            return -1;
//        }
       return 0;
    }

    private static int toface(Card A) {
        if (A.face == ""A"") {
            return 14;
        } else if (A.face == ""J"") {
            return 11;
        } else if (A.face == ""Q"") {
            return 12;
        } else if (A.face == ""K"") {
            return 13;
        } else {
            return Integer.parseInt(A.face);
        }
    }

//    4 3 2 1 黑陶、紅心、方塊、梅花
    private static int tosuit(Card A) {
        if (A.suit == ""Spades"") {
            return 4;
        } else if (A.suit == ""Hearts"") {
            return 3;
        } else if (A.suit == ""Diamonds"") {
            return 2;
        } else {
            return 1;
        }
    }

//     TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int thissuit = tosuit(c1);
            int thatsuit = tosuit(c2);

            if (thissuit > thatsuit) {
                return 1;
            } else if (thissuit == thatsuit) {
                return 0;
            } else {
                return -1;
            }
            
        }
    }

   
}

@73d320af0f3ec4cdd8d207ad592acfdd@"
"b03611003","0","0","0","@40041294a13a41c2308f77c46dab41b3@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

//     DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        int thisface = toface(this);
//        int thatface = toface(that);
//        int thissuit = tosuit(this);
//        int thatsuit = tosuit(that);
//
//        if (thisface > thatface) {
//            return 1;
//        } else if (thisface == thatface) {
//            if (thissuit > thatsuit) {
//                return 1;
//            } else if(thissuit == thatsuit){
//                return 0;
//            }else{
//                return -1;
//            }
//        } else {
//            return -1;
//        }
       return 0;
    }

    private static int toface(Card A) {
//        if (A.face == ""A"") {
//            return 14;
//        } else if (A.face == ""J"") {
//            return 11;
//        } else if (A.face == ""Q"") {
//            return 12;
//        } else if (A.face == ""K"") {
//            return 13;
//        } else {
            return Integer.parseInt(A.face);
//        }
    }

//    4 3 2 1 黑陶、紅心、方塊、梅花
    private static int tosuit(Card A) {
        if (A.suit == ""Spades"") {
            return 4;
        } else if (A.suit == ""Hearts"") {
            return 3;
        } else if (A.suit == ""Diamonds"") {
            return 2;
        } else {
            return 1;
        }
    }

//     TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int thissuit = tosuit(c1);
            int thatsuit = tosuit(c2);

            if (thissuit > thatsuit) {
                return 1;
            } else if (thissuit == thatsuit) {
                return 0;
            } else {
                return -1;
            }
            
        }
    }

   
}

@40041294a13a41c2308f77c46dab41b3@"
"b03611003","0","0.64","111136","@a432e8e7faa4ef589f34c3b4d9bef6ca@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

//     DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        int thisface = toface(this);
//        int thatface = toface(that);
//        int thissuit = tosuit(this);
//        int thatsuit = tosuit(that);
//
//        if (thisface > thatface) {
//            return 1;
//        } else if (thisface == thatface) {
//            if (thissuit > thatsuit) {
//                return 1;
//            } else if(thissuit == thatsuit){
//                return 0;
//            }else{
//                return -1;
//            }
//        } else {
//            return -1;
//        }
       return 0;
    }

    private static int toface(Card A) {
//        if (A.face == ""A"") {
//            return 14;
//        } else if (A.face == ""J"") {
//            return 11;
//        } else if (A.face == ""Q"") {
//            return 12;
//        } else if (A.face == ""K"") {
//            return 13;
//        } else {
//            return Integer.parseInt(A.face);
//        }
        return 0;
    }

//    4 3 2 1 黑陶、紅心、方塊、梅花
    private static int tosuit(Card A) {
        if (A.suit == ""Spades"") {
            return 4;
        } else if (A.suit == ""Hearts"") {
            return 3;
        } else if (A.suit == ""Diamonds"") {
            return 2;
        } else {
            return 1;
        }
    }

//     TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int thissuit = tosuit(c1);
            int thatsuit = tosuit(c2);

            if (thissuit > thatsuit) {
                return 1;
            } else if (thissuit == thatsuit) {
                return 0;
            } else {
                return -1;
            }
            
        }
    }

   
}

@a432e8e7faa4ef589f34c3b4d9bef6ca@"
"b03611003","0","0.64","110880","@d08f45b807deab1777b15c9e3bbad37e@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

//     DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        int thisface = toface(this);
//        int thatface = toface(that);
//        int thissuit = tosuit(this);
//        int thatsuit = tosuit(that);
//
//        if (thisface > thatface) {
//            return 1;
//        } else if (thisface == thatface) {
//            if (thissuit > thatsuit) {
//                return 1;
//            } else if(thissuit == thatsuit){
//                return 0;
//            }else{
//                return -1;
//            }
//        } else {
//            return -1;
//        }
       return thisface;
    }

    private static int toface(Card A) {
        if (A.face == ""A"") {
            return 14;
        } else if (A.face == ""J"") {
            return 11;
        } else if (A.face == ""Q"") {
            return 12;
        } else if (A.face == ""K"") {
            return 13;
        } else {
//            return Integer.parseInt(A.face);
            return 0;
        }
    }

//    4 3 2 1 黑陶、紅心、方塊、梅花
    private static int tosuit(Card A) {
        if (A.suit == ""Spades"") {
            return 4;
        } else if (A.suit == ""Hearts"") {
            return 3;
        } else if (A.suit == ""Diamonds"") {
            return 2;
        } else {
            return 1;
        }
    }

//     TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int thissuit = tosuit(c1);
            int thatsuit = tosuit(c2);

            if (thissuit > thatsuit) {
                return 1;
            } else if (thissuit == thatsuit) {
                return 0;
            } else {
                return -1;
            }
            
        }
    }

   
}

@d08f45b807deab1777b15c9e3bbad37e@"
"b03611003","0","0","0","@9228263d98d77a447b5cf5b6c819879a@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

//     DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        int thisface = toface(this);
//        int thatface = toface(that);
//        int thissuit = tosuit(this);
//        int thatsuit = tosuit(that);
//
//        if (thisface > thatface) {
//            return 1;
//        } else if (thisface == thatface) {
//            if (thissuit > thatsuit) {
//                return 1;
//            } else if(thissuit == thatsuit){
//                return 0;
//            }else{
//                return -1;
//            }
//        } else {
//            return -1;
//        }
       return thisface;
    }

    private static int toface(Card A) {
        if (A.face == ""A"") {
            return 14;
        } else if (A.face == ""J"") {
            return 11;
        } else if (A.face == ""Q"") {
            return 12;
        } else if (A.face == ""K"") {
            return 13;
        } else {
            return Integer.parseInt(A.face);
//            return 0;
        }
    }

//    4 3 2 1 黑陶、紅心、方塊、梅花
    private static int tosuit(Card A) {
        if (A.suit == ""Spades"") {
            return 4;
        } else if (A.suit == ""Hearts"") {
            return 3;
        } else if (A.suit == ""Diamonds"") {
            return 2;
        } else {
            return 1;
        }
    }

//     TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int thissuit = tosuit(c1);
            int thatsuit = tosuit(c2);

            if (thissuit > thatsuit) {
                return 1;
            } else if (thissuit == thatsuit) {
                return 0;
            } else {
                return -1;
            }
            
        }
    }

   
}

@9228263d98d77a447b5cf5b6c819879a@"
"b03611003","0","0.66","108256","@cb7cb9e03752cda004d60eef27b43bad@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

//     DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        int thisface = toface(this);
//        int thatface = toface(that);
//        int thissuit = tosuit(this);
//        int thatsuit = tosuit(that);
//
//        if (thisface > thatface) {
//            return 1;
//        } else if (thisface == thatface) {
//            if (thissuit > thatsuit) {
//                return 1;
//            } else if(thissuit == thatsuit){
//                return 0;
//            }else{
//                return -1;
//            }
//        } else {
//            return -1;
//        }
       return thisface;
    }

    private static int toface(Card A) {
        if (""A"".equals(A.face)) {
            return 14;
        } else if (""J"".equals(A.face)) {
            return 11;
        } else if (""Q"".equals(A.face)) {
            return 12;
        } else if (""K"".equals(A.face)) {
            return 13;
        } else {
            return Integer.parseInt(A.face);
        }
    }

//    4 3 2 1 黑陶、紅心、方塊、梅花
    private static int tosuit(Card A) {
        if (""Spades"".equals(A.suit)) {
            return 4;
        } else if (""Hearts"".equals(A.suit)) {
            return 3;
        } else if (""Diamonds"".equals(A.suit)) {
            return 2;
        } else {
            return 1;
        }
    }

//     TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int thissuit = tosuit(c1);
            int thatsuit = tosuit(c2);

            if (thissuit > thatsuit) {
                return 1;
            } else if (thissuit == thatsuit) {
                return 0;
            } else {
                return -1;
            }
            
        }
    }

   
}

@cb7cb9e03752cda004d60eef27b43bad@"
"b03611003","5","0.13","111040","@ebd3d92b832c1ed52bbb7bc4d91ea352@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

//     DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        int thisface = toface(this);
        int thatface = toface(that);
        int thissuit = tosuit(this);
        int thatsuit = tosuit(that);

        if (thisface > thatface) {
            return 1;
        } else if (thisface == thatface) {
            if (thissuit > thatsuit) {
                return 1;
            } else if(thissuit == thatsuit){
                return 0;
            }else{
                return -1;
            }
        } else {
            return -1;
        }
       
    }

    private static int toface(Card A) {
        if (""A"".equals(A.face)) {
            return 14;
        } else if (""J"".equals(A.face)) {
            return 11;
        } else if (""Q"".equals(A.face)) {
            return 12;
        } else if (""K"".equals(A.face)) {
            return 13;
        } else {
            return Integer.parseInt(A.face);
        }
    }

//    4 3 2 1 黑陶、紅心、方塊、梅花
    private static int tosuit(Card A) {
        if (""Spades"".equals(A.suit)) {
            return 4;
        } else if (""Hearts"".equals(A.suit)) {
            return 3;
        } else if (""Diamonds"".equals(A.suit)) {
            return 2;
        } else {
            return 1;
        }
    }

//     TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int thissuit = tosuit(c1);
            int thatsuit = tosuit(c2);

            if (thissuit > thatsuit) {
                return 1;
            } else if (thissuit == thatsuit) {
                return 0;
            } else {
                return -1;
            }
            
        }
    }

   
}

@ebd3d92b832c1ed52bbb7bc4d91ea352@"
"r04631027","5","0.13","111552","@0334f5b760bd86146ab275d4cfb01af2@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.util.Comparator;
import java.util.Objects;
import java.util.*;

/**
 *
 * @author YuChing
 */
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }

    private Card() {
        throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates.
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int a1_face = 0;
        int a2_face = 0;
        String b1 = this.face;
        String b2 = that.face;
        switch (b1) {
            case ""A"":
                a1_face = 14;
                break;
            case ""J"":
                a1_face = 11;
                break;
            case ""Q"":
                a1_face = 12;
                break;
            case ""K"":
                a1_face = 13;
                break;
            default:
                a1_face = Integer.parseInt(b1);
        }
        switch (b2) {
            case ""A"":
                a2_face = 14;
                break;
            case ""J"":
                a2_face = 11;
                break;
            case ""Q"":
                a2_face = 12;
                break;
            case ""K"":
                a2_face = 13;
                break;
            default:
                a2_face = Integer.parseInt(b2);
        }

        if (a1_face>a2_face)
            return 1;
        else if (a1_face<a2_face)
            return -1;
        else if (a1_face==a1_face)
            return(SUIT_ORDER.compare(this,that));
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit         
            String a1_suit =c1.suit;
            String a2_suit = c2.suit;
            int b1 = 0;
            int b2 = 0;
            switch(a1_suit)
            {
                 case ""Spades"":
                    b1 = 1;
                    break;
                case ""Hearts"":
                    b1 = 2;
                    break;
                case ""Diamonds"":
                    b1 = 3;
                    break;
                case ""Clubs"":
                    b1 = 4;
                    break; 
            }
            switch(a2_suit)
            {
                 case ""Spades"":
                    b2 = 1;
                    break;
                case ""Hearts"":
                    b2 = 2;
                    break;
                case ""Diamonds"":
                    b2 = 3;
                    break;
                case ""Clubs"":
                    b2 = 4;
                    break; 
             
            }
            if (b1<b2)
                    return 1;
            else if(b1==b2)
                return 0;
            else if(b1>b2)
                return -1;
            
            return 0;
        }
    }   
//    public static void main(String[] args) {
//        // TODO code application logic here
//      //  In in = new In(args[0]);
//        //System.out.println(in.readLine());
//        Card[] test = new Card[2];
//     test[0] = new Card(""J"",""Heafarts"") ;
//     test[1] = new Card(""J"",""Diamonds"") ;
//     int b2;
//     System.out.println(test[1].compareTo(test[0]));
//     System.out.println(SUIT_ORDER.compare(test[1],test[0]));
//     //為什麼SUIT_ORDER不能打SUITORDER
//      int a1_face =0;
//       int a2_face =0;
//       String b1 = ""1"";
//      // String b2 = that.face;
//       
//    
//    }
         
}


@0334f5b760bd86146ab275d4cfb01af2@"
"r03522809","0","0.46","104144","@05d443b58bd1762de81dfd5b22398a05@public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        int thisvalue,thatvalue,value=0;

        if(that.face.equals(""A"")){thatvalue = 14;} //get that card value
        else if(that.face.equals(""J"")){thatvalue = 11;}
        else if(that.face.equals(""Q"")){thatvalue = 12;}          
        else if(that.face.equals(""K"")){thatvalue = 13;}
        else{thatvalue=Integer.parseInt(that.face);}
        
        if(this.face.equals(""A"")){thisvalue = 14;} //get this card value
        else if(this.face.equals(""J"")){thisvalue = 11;}
        else if(this.face.equals(""Q"")){thisvalue = 12;}          
        else if(this.face.equals(""K"")){thisvalue = 13;}
        else{thisvalue=Integer.parseInt(this.face);}
        
        if(thisvalue>thatvalue){value=1;}
        else if(thisvalue<thatvalue){value=-1;}
        else if(thisvalue==thatvalue){
            int C1suitvalue=0,C2suitvalue=0,suitvalue=0;
            
            if(this.suit.equals(""Spades"") ){C1suitvalue=4;}
            else if(this.suit.equals(""Hearts"") ){C1suitvalue=3;}
            else if(this.suit.equals(""Diamonds"") ){C1suitvalue=2;}
            else if(this.suit.equals(""Clubs"") ){C1suitvalue=1;}
            
            if(that.suit.equals(""Spades"") ){C2suitvalue=4;}
            else if(that.suit.equals(""Hearts"") ){C2suitvalue=3;}
            else if(that.suit.equals(""Diamonds"") ){C2suitvalue=2;}
            else if(that.suit.equals(""Clubs"") ){C2suitvalue=1;}
            
            if(C1suitvalue>C2suitvalue){value=1;}
            else if(C1suitvalue<C2suitvalue){value=-1;}
            else{value=0;}
            }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return value;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        
        
        
        public int compare(Card c1, Card c2) {
            int C1suitvalue=0,C2suitvalue=0,suitvalue=0;
            if(c1.suit.equals(""Spades"") ){C1suitvalue=4;}
            else if(c1.suit.equals(""Hearts"") ){C1suitvalue=3;}
            else if(c1.suit.equals(""Diamonds"") ){C1suitvalue=2;}
            else if(c1.suit.equals(""Clubs"") ){C1suitvalue=1;}
            
            if(c2.suit.equals(""Spades"") ){C2suitvalue=4;}
            else if(c2.suit.equals(""Hearts"") ){C2suitvalue=3;}
            else if(c2.suit.equals(""Diamonds"") ){C2suitvalue=2;}
            else if(c2.suit.equals(""Clubs"") ){C2suitvalue=1;}
            
            if(C1suitvalue>C2suitvalue){suitvalue=1;}
            else if(C1suitvalue<C2suitvalue){suitvalue=-1;}
            else{suitvalue=0;}

            // complete this function so the Card can be sorted according to the suit
            return suitvalue;
        }

    }
    public interface Comparator<T extends Object> {

        public int compare(T t, T t1);

        public boolean equals(Object o);
}
    
}
@05d443b58bd1762de81dfd5b22398a05@"
"r04631009","0","0.66","110896","@5c14f2a4a87e51ac94df74e01ad40972@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            return 0;
        }
    }   
}

@5c14f2a4a87e51ac94df74e01ad40972@"
"b03611041","5","0.13","110928","@0c2c25ffa1cc964983bfecf835cdab0b@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int iFace1;
        int iFace2;

        if (this.face.equals(""A"")) iFace1 = 14;
        else if (this.face.equals(""J"")) iFace1 = 11;
        else if (this.face.equals(""Q"")) iFace1 = 12;
        else if (this.face.equals(""K"")) iFace1 = 13;
        else iFace1 = Integer.parseInt(this.face);

        if (that.face.equals(""A"")) iFace2 = 14;
        else if (that.face.equals(""J"")) iFace2 = 11;
        else if (that.face.equals(""Q"")) iFace2 = 12;
        else if (that.face.equals(""K"")) iFace2 = 13;
        else iFace2 = Integer.parseInt(that.face);

        if (iFace1 > iFace2) {
            return 1;
        } else if (iFace1 == iFace2) {
            return Card.SUIT_ORDER.compare(this, that);
        } else {
            return -1;
        }

    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
                if(c1.suit.compareTo(c2.suit)>0){
                    return 1;
                }else if (c1.suit.compareTo(c2.suit)==0){
                    return 0;
                }
                else{
                    return -1;
                }
            // complete this function so the Card can be sorted according to the suit
        }
    }   
}

@0c2c25ffa1cc964983bfecf835cdab0b@"
"r03522809","0","0.46","104144","@05d443b58bd1762de81dfd5b22398a05@public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        int thisvalue,thatvalue,value=0;

        if(that.face.equals(""A"")){thatvalue = 14;} //get that card value
        else if(that.face.equals(""J"")){thatvalue = 11;}
        else if(that.face.equals(""Q"")){thatvalue = 12;}          
        else if(that.face.equals(""K"")){thatvalue = 13;}
        else{thatvalue=Integer.parseInt(that.face);}
        
        if(this.face.equals(""A"")){thisvalue = 14;} //get this card value
        else if(this.face.equals(""J"")){thisvalue = 11;}
        else if(this.face.equals(""Q"")){thisvalue = 12;}          
        else if(this.face.equals(""K"")){thisvalue = 13;}
        else{thisvalue=Integer.parseInt(this.face);}
        
        if(thisvalue>thatvalue){value=1;}
        else if(thisvalue<thatvalue){value=-1;}
        else if(thisvalue==thatvalue){
            int C1suitvalue=0,C2suitvalue=0,suitvalue=0;
            
            if(this.suit.equals(""Spades"") ){C1suitvalue=4;}
            else if(this.suit.equals(""Hearts"") ){C1suitvalue=3;}
            else if(this.suit.equals(""Diamonds"") ){C1suitvalue=2;}
            else if(this.suit.equals(""Clubs"") ){C1suitvalue=1;}
            
            if(that.suit.equals(""Spades"") ){C2suitvalue=4;}
            else if(that.suit.equals(""Hearts"") ){C2suitvalue=3;}
            else if(that.suit.equals(""Diamonds"") ){C2suitvalue=2;}
            else if(that.suit.equals(""Clubs"") ){C2suitvalue=1;}
            
            if(C1suitvalue>C2suitvalue){value=1;}
            else if(C1suitvalue<C2suitvalue){value=-1;}
            else{value=0;}
            }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return value;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        
        
        
        public int compare(Card c1, Card c2) {
            int C1suitvalue=0,C2suitvalue=0,suitvalue=0;
            if(c1.suit.equals(""Spades"") ){C1suitvalue=4;}
            else if(c1.suit.equals(""Hearts"") ){C1suitvalue=3;}
            else if(c1.suit.equals(""Diamonds"") ){C1suitvalue=2;}
            else if(c1.suit.equals(""Clubs"") ){C1suitvalue=1;}
            
            if(c2.suit.equals(""Spades"") ){C2suitvalue=4;}
            else if(c2.suit.equals(""Hearts"") ){C2suitvalue=3;}
            else if(c2.suit.equals(""Diamonds"") ){C2suitvalue=2;}
            else if(c2.suit.equals(""Clubs"") ){C2suitvalue=1;}
            
            if(C1suitvalue>C2suitvalue){suitvalue=1;}
            else if(C1suitvalue<C2suitvalue){suitvalue=-1;}
            else{suitvalue=0;}

            // complete this function so the Card can be sorted according to the suit
            return suitvalue;
        }

    }
    public interface Comparator<T extends Object> {

        public int compare(T t, T t1);

        public boolean equals(Object o);
}
    
}
@05d443b58bd1762de81dfd5b22398a05@"
"r03522809","5","0.128","110912","@16f680c0beff13eb69e08f8c319562bf@import java.util.Arrays;
import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        int thisvalue,thatvalue,value=0;

        if(that.face.equals(""A"")){thatvalue = 14;} //get that card value
        else if(that.face.equals(""J"")){thatvalue = 11;}
        else if(that.face.equals(""Q"")){thatvalue = 12;}          
        else if(that.face.equals(""K"")){thatvalue = 13;}
        else{thatvalue=Integer.parseInt(that.face);}
        
        if(this.face.equals(""A"")){thisvalue = 14;} //get this card value
        else if(this.face.equals(""J"")){thisvalue = 11;}
        else if(this.face.equals(""Q"")){thisvalue = 12;}          
        else if(this.face.equals(""K"")){thisvalue = 13;}
        else{thisvalue=Integer.parseInt(this.face);}
        
        if(thisvalue>thatvalue){value=1;}
        else if(thisvalue<thatvalue){value=-1;}
        else if(thisvalue==thatvalue){
            int C1suitvalue=0,C2suitvalue=0,suitvalue=0;
            
            if(this.suit.equals(""Spades"") ){C1suitvalue=4;}
            else if(this.suit.equals(""Hearts"") ){C1suitvalue=3;}
            else if(this.suit.equals(""Diamonds"") ){C1suitvalue=2;}
            else if(this.suit.equals(""Clubs"") ){C1suitvalue=1;}
            
            if(that.suit.equals(""Spades"") ){C2suitvalue=4;}
            else if(that.suit.equals(""Hearts"") ){C2suitvalue=3;}
            else if(that.suit.equals(""Diamonds"") ){C2suitvalue=2;}
            else if(that.suit.equals(""Clubs"") ){C2suitvalue=1;}
            
            if(C1suitvalue>C2suitvalue){value=1;}
            else if(C1suitvalue<C2suitvalue){value=-1;}
            else{value=0;}
            }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return value;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int C1suitvalue=0,C2suitvalue=0,suitvalue=0;
            if(c1.suit.equals(""Spades"") ){C1suitvalue=4;}
            else if(c1.suit.equals(""Hearts"") ){C1suitvalue=3;}
            else if(c1.suit.equals(""Diamonds"") ){C1suitvalue=2;}
            else if(c1.suit.equals(""Clubs"") ){C1suitvalue=1;}
            
            if(c2.suit.equals(""Spades"") ){C2suitvalue=4;}
            else if(c2.suit.equals(""Hearts"") ){C2suitvalue=3;}
            else if(c2.suit.equals(""Diamonds"") ){C2suitvalue=2;}
            else if(c2.suit.equals(""Clubs"") ){C2suitvalue=1;}
            
            if(C1suitvalue>C2suitvalue){suitvalue=1;}
            else if(C1suitvalue<C2suitvalue){suitvalue=-1;}
            else{suitvalue=0;}

            // complete this function so the Card can be sorted according to the suit
            return suitvalue;
        }

    }
    
}
@16f680c0beff13eb69e08f8c319562bf@"
"r03522826","2","0.65","111056","@6d913ca48802b3a3705763aac29e42f7@
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	private int Num;
        
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();
    
    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
        if(this.face.equals(""A""))
            this.Num = 1;
        else if(this.face.equals(""K""))
             this.Num = 13;
        else if (this.face.equals(""Q""))
            this.Num = 12;
        else if(this.face.equals(""J""))
            this.Num = 11;
        else
            this.Num = Integer.parseInt(this.face);
    }
     
    public Integer getNumber(){
        return Num;
    }
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(this.Num == 1){
            if(that.Num == 1)
                return Card.SUIT_ORDER.compare(this, that);
            else
                return 1;
        }
        else if(this.Num > that.Num)
            return 1;
        else if(this.Num < that.Num)
            return -1;
        else
        {
           return Card.SUIT_ORDER.compare(this, that);
        }
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if (c1.suit.equals(""Clubs"")){
                if(c2.suit.equals(""Clubs""))
                    return 0;
                else
                    return -1;
            }
            else if (c1.suit.equals(""Diamonds"")){
                if(c2.suit.equals(""Clubs""))
                    return 1;
                else if(c2.suit.equals(""Diamonds""))
                    return 0;
                else 
                    return -1;
            }
            else if(c1.suit.equals(""Hearts"")){
                if(c2.suit.equals(""Spades""))
                    return -1;
                else if(c2.suit.equals(""Hearts""))
                    return 0;
                else
                    return 1;
            }
            else{
                if(c2.suit.equals(""Spades""))
                    return 0;
                else
                    return 1;
            }
        }
    }
}

@6d913ca48802b3a3705763aac29e42f7@"
"r03522826","5","0.13","110944","@ced13d9d0e47f6ad0a7e3958a53ea70a@
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	private int Num;
        
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();
    
    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
        if(this.face.equals(""A""))
            this.Num = 1;
        else if(this.face.equals(""K""))
             this.Num = 13;
        else if (this.face.equals(""Q""))
            this.Num = 12;
        else if(this.face.equals(""J""))
            this.Num = 11;
        else
            this.Num = Integer.parseInt(this.face);
    }
     
    public Integer getNumber(){
        return Num;
    }
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(this.Num == 1){
            if(that.Num == 1)
                return Card.SUIT_ORDER.compare(this, that);
            else
                return 1;
        }
        else if(that.Num == 1)
            return -1;
        else if(this.Num > that.Num)
            return 1;
        else if(this.Num < that.Num)
            return -1;
        else
        {
           return Card.SUIT_ORDER.compare(this, that);
        }
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if (c1.suit.equals(""Clubs"")){
                if(c2.suit.equals(""Clubs""))
                    return 0;
                else
                    return -1;
            }
            else if (c1.suit.equals(""Diamonds"")){
                if(c2.suit.equals(""Clubs""))
                    return 1;
                else if(c2.suit.equals(""Diamonds""))
                    return 0;
                else 
                    return -1;
            }
            else if(c1.suit.equals(""Hearts"")){
                if(c2.suit.equals(""Spades""))
                    return -1;
                else if(c2.suit.equals(""Hearts""))
                    return 0;
                else
                    return 1;
            }
            else{
                if(c2.suit.equals(""Spades""))
                    return 0;
                else
                    return 1;
            }
        }
    }
}

@ced13d9d0e47f6ad0a7e3958a53ea70a@"
"r04921044","0","0.65","111952","@21d977d54bceae5532aff71964e863f6@
import java.util.*;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS
    public String getFace(){
        return this.face;
    }

    // DO NOT MODIFY THIS
    public String getSuit(){
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        Map<String, Integer> faceMap = new HashMap<String, Integer> ();
        faceMap.put(""A"", 14);
        faceMap.put(""2"", 2);
        faceMap.put(""3"", 3);
        faceMap.put(""4"", 4);
        faceMap.put(""5"", 5);
        faceMap.put(""6"", 6);
        faceMap.put(""7"", 7);
        faceMap.put(""8"", 8);
        faceMap.put(""9"", 9);
        faceMap.put(""10"", 10);
        faceMap.put(""J"", 11);
        faceMap.put(""Q"", 12);
        faceMap.put(""K"", 13);

        Map<String, Integer> suitMap = new HashMap<String, Integer> ();
        suitMap.put(""Spades"", 0);
        suitMap.put(""Hearts"", 1);
        suitMap.put(""Diamonds"", 2);
        suitMap.put(""Clubs"", 3);

        if (faceMap.get(that.face) != faceMap.get(this.face))
            return faceMap.get(that.face) - faceMap.get(this.face);

        return suitMap.get(that.suit) - suitMap.get(this.suit);
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit

            Map<String, Integer> suitMap = new HashMap<String, Integer> ();
            suitMap.put(""Spades"", 0);
            suitMap.put(""Hearts"", 1);
            suitMap.put(""Diamonds"", 2);
            suitMap.put(""Clubs"", 3);

            return suitMap.get(c1.suit) - suitMap.get(c2.suit);
        }
    }
}

@21d977d54bceae5532aff71964e863f6@"
"r04921044","0","0.65","111600","@2987b1def1565170ce1ac86773e8b619@
import java.util.*;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS
    public String getFace(){
        return this.face;
    }

    // DO NOT MODIFY THIS
    public String getSuit(){
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        Map<String, Integer> faceMap = new HashMap<String, Integer> ();
        faceMap.put(""A"", 14);
        faceMap.put(""2"", 2);
        faceMap.put(""3"", 3);
        faceMap.put(""4"", 4);
        faceMap.put(""5"", 5);
        faceMap.put(""6"", 6);
        faceMap.put(""7"", 7);
        faceMap.put(""8"", 8);
        faceMap.put(""9"", 9);
        faceMap.put(""10"", 10);
        faceMap.put(""J"", 11);
        faceMap.put(""Q"", 12);
        faceMap.put(""K"", 13);

        Map<String, Integer> suitMap = new HashMap<String, Integer> ();
        suitMap.put(""Spades"", 0);
        suitMap.put(""Hearts"", 1);
        suitMap.put(""Diamonds"", 2);
        suitMap.put(""Clubs"", 3);

        if (faceMap.get(this.face) != faceMap.get(that.face))
            return faceMap.get(this.face) - faceMap.get(that.face);

        return suitMap.get(this.suit) - suitMap.get(that.suit);
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit

            Map<String, Integer> suitMap = new HashMap<String, Integer> ();
            suitMap.put(""Spades"", 0);
            suitMap.put(""Hearts"", 1);
            suitMap.put(""Diamonds"", 2);
            suitMap.put(""Clubs"", 3);

            return suitMap.get(c1.suit) - suitMap.get(c2.suit);
        }
    }
}

@2987b1def1565170ce1ac86773e8b619@"
"b03611038","5","0.132","111136","@27b1e629a82337f120713670e41b63f1@import java.util.Comparator;
import java.util.Arrays;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]       
	private String[] copy = {""0"",""1"",""2"",""3"",""4"",""5"",""6"",""7"",""8"",""9"",""10"", ""J"", ""Q"", ""K"", ""A""};
        private String[] Suit = {""Clubs"", ""Diamonds"", ""Hearts"", ""Spades""};        
        public static final Comparator<Card> SUIT_ORDER = new SuitOrder();
   
    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
         
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
       
        int a ;
        int b ;
        a = this.findnum();
        b = that.findnum();
        
        if(a>b) 
            return 1;
        else if(a<b)
            return -1;
        else{
            int c;
            c = this.suit.compareTo(that.suit);
            if(c>0)
                return 1;
            else if(c<0)
                return -1;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            int k;
// complete this function so the Card can be sorted according to the suit
            k = c1.suit.compareTo(c2.suit);
            if(k>0)
                return 1;
            if(k<0)
                return -1;
            else
                 return 0;
        }
    }   
    public int findnum(){
        
        for(int j =0;j<16;j++){
            if(this.face.equals(copy[j])){
                return j;
            }
        }
        return -1;
    }
    public int findsuit(){
        for(int j = 0; j<4;j++){
            if(this.suit.equals(Suit[j]))
                return j;
        }
        return -1;
    }
     public static void main(String[] args){
     }
}


@27b1e629a82337f120713670e41b63f1@"
"r04631025","0","0","0","@235d68b5374775367a41f6523e2655f2@import java.util.Comparator;
import java.util.Objects;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        Integer[] first_face =new Integer[0];
        Integer[] second_face =new Integer[0];
        if(this.getFace().equals(""A""))
            first_face[0] = 14 ;
        else if(this.getFace().equals(""K""))
            first_face[0] = 13 ;
        else if(this.getFace().equals(""Q""))
            first_face[0] = 12 ;
        else if(this.getFace().equals(""J""))
            first_face[0] = 11 ;
        else 
            first_face[0] = Integer.parseInt(this.getFace());
        
        if(that.getFace().equals(""A""))
            second_face[0]  = 14 ;
        else if(that.getFace().equals(""K""))
            second_face[0]  = 13 ;
        else if(that.getFace().equals(""Q""))
            second_face[0] = 12 ;
        else if(that.getFace().equals(""J""))
            second_face[0] = 11 ;
        else
            second_face[0] = Integer.parseInt(that.getFace());
        
        if(first_face[0]>second_face[0])
            return +1 ;
        else if(first_face[0]<second_face[0])
            return -1 ;
        
        else if(first_face.equals(second_face)){
        if(SUIT_ORDER.compare(this,that)==-1)
           return -1 ;
        else if(SUIT_ORDER.compare(this, that)==1)
           return +1 ;
        else 
           return 0;
        }
           return 0;
        
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            String a = c1.getSuit();
            String b = c2.getSuit();
            int first=0,second=0;
            if (a.equalsIgnoreCase(""Spades"")){
                first=4;
             }
            else if (a.equalsIgnoreCase(""Hearts"")){
                first=3;
            }
            else if(a.equalsIgnoreCase(""Diamonds"")){
                first=2;
            }
            else if(a.equalsIgnoreCase(""Clubs"")){
                first=1;
            }
            
            if (b.equalsIgnoreCase(""Spades"")){
                second=4;
             }
            else if (a.equalsIgnoreCase(""Hearts"")){
                second=3;
            }
            else if(a.equalsIgnoreCase(""Diamonds"")){
                second=2;
            }
            else if(a.equalsIgnoreCase(""Clubs"")){
                second=1;
            }
            if(first>second) {return +1;}
            else if (first<second) {return -1;}
            else {return 0;}
                        
        }
    }   
}

@235d68b5374775367a41f6523e2655f2@"
"r04631025","0","0","0","@b0dc1c3f09af185231be5ec9d12d9df4@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        Integer[] first_face =new Integer[0];
        Integer[] second_face =new Integer[0];
        if(this.getFace().equals(""A""))
            first_face[0] = 14 ;
        else if(this.getFace().equals(""K""))
            first_face[0] = 13 ;
        else if(this.getFace().equals(""Q""))
            first_face[0] = 12 ;
        else if(this.getFace().equals(""J""))
            first_face[0] = 11 ;
        else 
            first_face[0] = Integer.parseInt(this.getFace());
        
        if(that.getFace().equals(""A""))
            second_face[0]  = 14 ;
        else if(that.getFace().equals(""K""))
            second_face[0]  = 13 ;
        else if(that.getFace().equals(""Q""))
            second_face[0] = 12 ;
        else if(that.getFace().equals(""J""))
            second_face[0] = 11 ;
        else
            second_face[0] = Integer.parseInt(that.getFace());
        
        if(first_face[0]>second_face[0])
            return +1 ;
        else if(first_face[0]<second_face[0])
            return -1 ;
        
        else if(first_face.equals(second_face)){
        if(SUIT_ORDER.compare(this,that)==-1)
           return -1 ;
        else if(SUIT_ORDER.compare(this, that)==1)
           return +1 ;
        else 
           return 0;
        }
           return 0;
        
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            String a = c1.getSuit();
            String b = c2.getSuit();
            int first=0,second=0;
            if (a.equalsIgnoreCase(""Spades"")){
                first=4;
             }
            else if (a.equalsIgnoreCase(""Hearts"")){
                first=3;
            }
            else if(a.equalsIgnoreCase(""Diamonds"")){
                first=2;
            }
            else if(a.equalsIgnoreCase(""Clubs"")){
                first=1;
            }
            
            if (b.equalsIgnoreCase(""Spades"")){
                second=4;
             }
            else if (a.equalsIgnoreCase(""Hearts"")){
                second=3;
            }
            else if(a.equalsIgnoreCase(""Diamonds"")){
                second=2;
            }
            else if(a.equalsIgnoreCase(""Clubs"")){
                second=1;
            }
            if(first>second) {return +1;}
            else if (first<second) {return -1;}
            else {return 0;}
                        
        }
    }   
}


@b0dc1c3f09af185231be5ec9d12d9df4@"
"r04631025","0","0","0","@81b2a12b881766b3f99da4a52e327dd4@import java.util.Comparator;
import java.util.Objects;

public class Card implements Comparable<Card> {

	private final String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private final String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        Integer[] first_face =new Integer[0];
        Integer[] second_face =new Integer[0];
        if(this.getFace().equals(""A""))
            first_face[0] = 14 ;
        else if(this.getFace().equals(""K""))
            first_face[0] = 13 ;
        else if(this.getFace().equals(""Q""))
            first_face[0] = 12 ;
        else if(this.getFace().equals(""J""))
            first_face[0] = 11 ;
        else 
            first_face[0] = Integer.parseInt(this.getFace());
        
        if(that.getFace().equals(""A""))
            second_face[0]  = 14 ;
        else if(that.getFace().equals(""K""))
            second_face[0]  = 13 ;
        else if(that.getFace().equals(""Q""))
            second_face[0] = 12 ;
        else if(that.getFace().equals(""J""))
            second_face[0] = 11 ;
        else
            second_face[0] = Integer.parseInt(that.getFace());
        
        if(first_face[0]>second_face[0])
            return +1 ;
        else if(first_face[0]<second_face[0])
            return -1 ;
        
        else if(first_face.equals(second_face)){
        if(SUIT_ORDER.compare(this,that)==-1)
           return -1 ;
        else if(SUIT_ORDER.compare(this, that)==1)
           return +1 ;
        else 
           return 0;
        }
           return 0;
        
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            String a = c1.getSuit();
            String b = c2.getSuit();
            int first=0,second=0;
            if (a.equalsIgnoreCase(""Spades"")){
                first=4;
             }
            else if (a.equalsIgnoreCase(""Hearts"")){
                first=3;
            }
            else if(a.equalsIgnoreCase(""Diamonds"")){
                first=2;
            }
            else if(a.equalsIgnoreCase(""Clubs"")){
                first=1;
            }
            
            if (b.equalsIgnoreCase(""Spades"")){
                second=4;
             }
            else if (a.equalsIgnoreCase(""Hearts"")){
                second=3;
            }
            else if(a.equalsIgnoreCase(""Diamonds"")){
                second=2;
            }
            else if(a.equalsIgnoreCase(""Clubs"")){
                second=1;
            }
            if(first>second) {return +1;}
            else if (first<second) {return -1;}
            else {return 0;}
                        
        }
    }   
}


@81b2a12b881766b3f99da4a52e327dd4@"
"r04631025","0","0.65","109424","@ea3a6806681c6fee1cbdbcf039ad078f@import java.util.Comparator;
import java.util.Objects;

public class Card implements Comparable<Card> {

	private final String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private final String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        Integer[] first_face =new Integer[1];
        Integer[] second_face =new Integer[1];
        if(this.getFace().equals(""A""))
            first_face[0] = 14 ;
        else if(this.getFace().equals(""K""))
            first_face[0] = 13 ;
        else if(this.getFace().equals(""Q""))
            first_face[0] = 12 ;
        else if(this.getFace().equals(""J""))
            first_face[0] = 11 ;
        else 
            first_face[0] = Integer.parseInt(this.getFace());
        
        if(that.getFace().equals(""A""))
            second_face[0]  = 14 ;
        else if(that.getFace().equals(""K""))
            second_face[0]  = 13 ;
        else if(that.getFace().equals(""Q""))
            second_face[0] = 12 ;
        else if(that.getFace().equals(""J""))
            second_face[0] = 11 ;
        else
            second_face[0] = Integer.parseInt(that.getFace());
        
        if(first_face[0]>second_face[0])
            return +1 ;
        else if(first_face[0]<second_face[0])
            return -1 ;
        
        else if(first_face[0].equals(second_face[0])){
        if(SUIT_ORDER.compare(this,that)==-1)
           return -1 ;
        else if(SUIT_ORDER.compare(this, that)==1)
           return +1 ;
        else 
           return 0;
        }
           return 0;
        
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            String a = c1.getSuit();
            String b = c2.getSuit();
            int first=0,second=0;
            if (a.equalsIgnoreCase(""Spades"")){
                first=4;
             }
            else if (a.equalsIgnoreCase(""Hearts"")){
                first=3;
            }
            else if(a.equalsIgnoreCase(""Diamonds"")){
                first=2;
            }
            else if(a.equalsIgnoreCase(""Clubs"")){
                first=1;
            }
            
            if (b.equalsIgnoreCase(""Spades"")){
                second=4;
             }
            else if (a.equalsIgnoreCase(""Hearts"")){
                second=3;
            }
            else if(a.equalsIgnoreCase(""Diamonds"")){
                second=2;
            }
            else if(a.equalsIgnoreCase(""Clubs"")){
                second=1;
            }
            if(first>second) {return +1;}
            else if (first<second) {return -1;}
            else {return 0;}
                        
        }
    }   
}


@ea3a6806681c6fee1cbdbcf039ad078f@"
"r04631025","5","0.132","111088","@212c8e3746210551b905c9a2fd00d1e1@import java.util.Comparator;
import java.util.Objects;

public class Card implements Comparable<Card> {

	private final String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private final String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        Integer[] first_face =new Integer[1];
        Integer[] second_face =new Integer[1];
        if(this.getFace().equalsIgnoreCase(""A""))
            first_face[0] = 14 ;
        else if(this.getFace().equalsIgnoreCase(""K""))
            first_face[0] = 13 ;
        else if(this.getFace().equalsIgnoreCase(""Q""))
            first_face[0] = 12 ;
        else if(this.getFace().equalsIgnoreCase(""J""))
            first_face[0] = 11 ;
        else 
            first_face[0] = Integer.parseInt(this.getFace());
        
        if(that.getFace().equalsIgnoreCase(""A""))
            second_face[0]  = 14 ;
        else if(that.getFace().equalsIgnoreCase(""K""))
            second_face[0]  = 13 ;
        else if(that.getFace().equalsIgnoreCase(""Q""))
            second_face[0] = 12 ;
        else if(that.getFace().equalsIgnoreCase(""J""))
            second_face[0] = 11 ;
        else
            second_face[0] = Integer.parseInt(that.getFace());
        
        if(first_face[0]>second_face[0])
            return +1 ;
        else if(first_face[0]<second_face[0])
            return -1 ;
        
        else if(Objects.equals(first_face[0],second_face[0])){
        if(SUIT_ORDER.compare(this,that)==-1)
           return -1 ;
        else if(SUIT_ORDER.compare(this, that)==1)
           return +1 ;
        else 
           return 0;
        }
           return 0;
        
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            String a = c1.getSuit();
            String b = c2.getSuit();
            int first=0,second=0;
            if (a.equalsIgnoreCase(""Spades"")){
                first=4;
             }
            else if (a.equalsIgnoreCase(""Hearts"")){
                first=3;
            }
            else if(a.equalsIgnoreCase(""Diamonds"")){
                first=2;
            }
            else if(a.equalsIgnoreCase(""Clubs"")){
                first=1;
            }
            
            if (b.equalsIgnoreCase(""Spades"")){
                second=4;
             }
            else if (b.equalsIgnoreCase(""Hearts"")){
                second=3;
            }
            else if(b.equalsIgnoreCase(""Diamonds"")){
                second=2;
            }
            else if(b.equalsIgnoreCase(""Clubs"")){
                second=1;
            }
            
            if(first>second) {return +1;}
            else if (first<second) {return -1;}
            else if(first==second){return 0;}
                        return 0;
        }
    }   
}


@212c8e3746210551b905c9a2fd00d1e1@"
"r04921044","0","0.64","112016","@dab538afb731ffe3d9648eeedfadd959@
import java.util.*;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS
    public String getFace(){
        return this.face;
    }

    // DO NOT MODIFY THIS
    public String getSuit(){
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        Map<String, Integer> faceMap = new HashMap<String, Integer> ();
        faceMap.put(""A"", 14);
        faceMap.put(""2"", 2);
        faceMap.put(""3"", 3);
        faceMap.put(""4"", 4);
        faceMap.put(""5"", 5);
        faceMap.put(""6"", 6);
        faceMap.put(""7"", 7);
        faceMap.put(""8"", 8);
        faceMap.put(""9"", 9);
        faceMap.put(""10"", 10);
        faceMap.put(""J"", 11);
        faceMap.put(""Q"", 12);
        faceMap.put(""K"", 13);

        if (faceMap.get(this.face) != faceMap.get(that.face))
            return faceMap.get(this.face) - faceMap.get(that.face);

        return SUIT_ORDER.compare(this, that);
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        @Override
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit

            Map<String, Integer> suitMap = new HashMap<String, Integer> ();
            suitMap.put(""Spades"", 0);
            suitMap.put(""Hearts"", 1);
            suitMap.put(""Diamonds"", 2);
            suitMap.put(""Clubs"", 3);

            return suitMap.get(c1.suit) - suitMap.get(c2.suit);
        }
    }
}

@dab538afb731ffe3d9648eeedfadd959@"
"r04921044","5","0.128","111728","@94f3dc745a05021aaf72118b1f5f7023@
import java.util.*;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS
    public String getFace(){
        return this.face;
    }

    // DO NOT MODIFY THIS
    public String getSuit(){
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        Map<String, Integer> faceMap = new HashMap<String, Integer> ();
        faceMap.put(""A"", 14);
        faceMap.put(""2"", 2);
        faceMap.put(""3"", 3);
        faceMap.put(""4"", 4);
        faceMap.put(""5"", 5);
        faceMap.put(""6"", 6);
        faceMap.put(""7"", 7);
        faceMap.put(""8"", 8);
        faceMap.put(""9"", 9);
        faceMap.put(""10"", 10);
        faceMap.put(""J"", 11);
        faceMap.put(""Q"", 12);
        faceMap.put(""K"", 13);

        if (faceMap.get(this.face) != faceMap.get(that.face))
            return faceMap.get(this.face) - faceMap.get(that.face);

        return SUIT_ORDER.compare(this, that);
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        @Override
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit

            Map<String, Integer> suitMap = new HashMap<String, Integer> ();
            suitMap.put(""Spades"", 3);
            suitMap.put(""Hearts"", 2);
            suitMap.put(""Diamonds"", 1);
            suitMap.put(""Clubs"", 0);

            return suitMap.get(c1.suit) - suitMap.get(c2.suit);
        }
    }
}

@94f3dc745a05021aaf72118b1f5f7023@"
"r03522826","5","0.134","110992","@ced13d9d0e47f6ad0a7e3958a53ea70a@
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	private int Num;
        
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();
    
    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
        if(this.face.equals(""A""))
            this.Num = 1;
        else if(this.face.equals(""K""))
             this.Num = 13;
        else if (this.face.equals(""Q""))
            this.Num = 12;
        else if(this.face.equals(""J""))
            this.Num = 11;
        else
            this.Num = Integer.parseInt(this.face);
    }
     
    public Integer getNumber(){
        return Num;
    }
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(this.Num == 1){
            if(that.Num == 1)
                return Card.SUIT_ORDER.compare(this, that);
            else
                return 1;
        }
        else if(that.Num == 1)
            return -1;
        else if(this.Num > that.Num)
            return 1;
        else if(this.Num < that.Num)
            return -1;
        else
        {
           return Card.SUIT_ORDER.compare(this, that);
        }
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if (c1.suit.equals(""Clubs"")){
                if(c2.suit.equals(""Clubs""))
                    return 0;
                else
                    return -1;
            }
            else if (c1.suit.equals(""Diamonds"")){
                if(c2.suit.equals(""Clubs""))
                    return 1;
                else if(c2.suit.equals(""Diamonds""))
                    return 0;
                else 
                    return -1;
            }
            else if(c1.suit.equals(""Hearts"")){
                if(c2.suit.equals(""Spades""))
                    return -1;
                else if(c2.suit.equals(""Hearts""))
                    return 0;
                else
                    return 1;
            }
            else{
                if(c2.suit.equals(""Spades""))
                    return 0;
                else
                    return 1;
            }
        }
    }
}

@ced13d9d0e47f6ad0a7e3958a53ea70a@"
"r04631009","0","0.64","111712","@124a3d67d2317bd72e8b5b9776ee39d7@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private final String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private final String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;

    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        int num1 = 0;
        int num2 = 0;


        switch (this.face) {
            case ""A"":
                num1 = 14;
                break;
            case ""K"":
                num1 = 13;
                break;
            case ""Q"":
                num1 = 12;
                break;
            case ""J"":
                num1 = 11;
                break;
            default:
                num1 = Integer.parseInt(this.face);
                break;
        }
        switch (that.face) {
            case ""A"":
                num2 = 14;
                break;
            case ""K"":
                num2 = 13;
                break;
            case ""Q"":
                num2 = 12;
                break;
            case ""J"":
                num2 = 11;
                break;
            default:
                num2 = Integer.parseInt(that.face);
                break;
        }

        if (num1 > num2) {
            return 1;
        }
        if (num1 < num2) {
            return -1;
        }
       
        return 0;

    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int temp1 = 0;
            int temp2 = 0;
            switch (c1.suit) {
                case ""Spades"":
                    temp1 = 4;
                    break;
                case ""Hearts"":
                    temp1 = 3;
                    break;
                case ""Diamonds"":
                    temp1 = 2;
                    break;
                case ""Clubs"":
                    temp1 = 1;
                    break;
            }
            switch (c2.suit) {
                case ""Spades"":
                    temp2 = 4;
                    break;
                case ""Hearts"":
                    temp2 = 3;
                    break;
                case ""Diamonds"":
                    temp2 = 2;
                    break;
                case ""Clubs"":
                    temp2 = 1;
                    break;
            }

            // complete this function so the Card can be sorted according to the suit
            if (temp1 > temp2) {
                return 1;
            }
            if (temp1 < temp2) {
                return -1;
            }
            return 0;
        }

    }

}

@124a3d67d2317bd72e8b5b9776ee39d7@"
"r04631009","0","0.67","111696","@0eccf1ad4af23f0a6569050b9317cc88@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private final String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private final String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;

    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        int num1 = 0;
        int num2 = 0;
        switch (this.face) {
            case ""A"":
                num1 = 14;
                break;
            case ""K"":
                num1 = 13;
                break;
            case ""Q"":
                num1 = 12;
                break;
            case ""J"":
                num1 = 11;
                break;
            default:
                num1 = Integer.parseInt(this.face);
                break;
        }
        switch (that.face) {
            case ""A"":
                num2 = 14;
                break;
            case ""K"":
                num2 = 13;
                break;
            case ""Q"":
                num2 = 12;
                break;
            case ""J"":
                num2 = 11;
                break;
            default:
                num2 = Integer.parseInt(that.face);
                break;
        }

        if (num1 > num2) {
            return 1;
        }
        if (num1 < num2) {
            return -1;
        }
       
        return 0;

    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int temp1 = 0;
            int temp2 = 0;
            switch (c1.suit) {
                case ""Spades"":
                    temp1 = 4;
                    break;
                case ""Hearts"":
                    temp1 = 3;
                    break;
                case ""Diamonds"":
                    temp1 = 2;
                    break;
                case ""Clubs"":
                    temp1 = 1;
                    break;
            }
            switch (c2.suit) {
                case ""Spades"":
                    temp2 = 4;
                    break;
                case ""Hearts"":
                    temp2 = 3;
                    break;
                case ""Diamonds"":
                    temp2 = 2;
                    break;
                case ""Clubs"":
                    temp2 = 1;
                    break;
            }

            // complete this function so the Card can be sorted according to the suit
            if (temp1 > temp2) {
                return 1;
            }
            if (temp1 < temp2) {
                return -1;
            }
            return 0;
        }

    }

}
@0eccf1ad4af23f0a6569050b9317cc88@"
"r04631009","0","0.67","111552","@46fe0aadda1dc0a8926c0914385c6c9c@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private final String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private final String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;

    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        int num1 = 0;
        int num2 = 0;
        switch (this.face) {
            case ""A"":
                num1 = 14;
                break;
            case ""K"":
                num1 = 13;
                break;
            case ""Q"":
                num1 = 12;
                break;
            case ""J"":
                num1 = 11;
                break;
            default:
                num1 = Integer.parseInt(this.face);
                break;
        }
        switch (that.face) {
            case ""A"":
                num2 = 14;
                break;
            case ""K"":
                num2 = 13;
                break;
            case ""Q"":
                num2 = 12;
                break;
            case ""J"":
                num2 = 11;
                break;
            default:
                num2 = Integer.parseInt(that.face);
                break;
        }

        if (num1 > num2) {
            return 1;
        }
        if (num1 < num2) {
            return -1;
        }
       
        return 0;

    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int temp1 = 0;
            int temp2 = 0;
            switch (c1.suit) {
                case ""Spades"":
                    temp1 = 4;
                    break;
                case ""Hearts"":
                    temp1 = 3;
                    break;
                case ""Diamonds"":
                    temp1 = 2;
                    break;
                case ""Clubs"":
                    temp1 = 1;
                    break;
            }
            switch (c2.suit) {
                case ""Spades"":
                    temp2 = 4;
                    break;
                case ""Hearts"":
                    temp2 = 3;
                    break;
                case ""Diamonds"":
                    temp2 = 2;
                    break;
                case ""Clubs"":
                    temp2 = 1;
                    break;
            }

            // complete this function so the Card can be sorted according to the suit
            if (temp1 > temp2) {
                return 1;
            }
            if (temp1 < temp2) {
                return -1;
            }
            return 0;
        }

    }
 public static void main(String[] args) {
        Card test1 = new Card(""2"", ""Spades"");
        Card test2 = new Card(""3"", ""Spades"");
        
        System.out.println(Card.SUIT_ORDER.compare(test2, test1));
}
}

@46fe0aadda1dc0a8926c0914385c6c9c@"
"r04631041","5","0.13","111744","@47d57af4c71e48bf98a75f7b1d42886c@import java.util.Comparator;



public class Card implements Comparable<Card> {

    private final String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private final String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        int num1 = 0;
        int num2 = 0;
        int temp1 = 0;
        int temp2 = 0;
        switch (this.face){
            case ""A"":
                num1=13;
                break;
            case ""K"":
                num1=12;
                break;
            case ""Q"":
                num1=11;
                break;
            case ""J"":
                num1=10;
                break;
            case ""10"":
                num1=9;
                break;
            case ""9"":
                num1=8;
                break;
            case ""8"":
                num1=7;
                break;
            case ""7"":
                num1=6;
                break;
            case ""6"":
                num1=5;
                break;
            case ""5"":
                num1=4;
                break;
            case ""4"":
                num1=3;
                break;
            case ""3"":
                num1=2;
                break;
            case ""2"":
                num1=1;
                break;
        
        }
        switch (that.face){
            case ""A"":
                num2=13;
                break;
            case ""K"":
                num2=12;
                break;
            case ""Q"":
                num2=11;
                break;
            case ""J"":
                num2=10;
                break;
            case ""10"":
                num2=9;
                break;
            case ""9"":
                num2=8;
                break;
            case ""8"":
                num2=7;
                break;
            case ""7"":
                num2=6;
                break;
            case ""6"":
                num2=5;
                break;
            case ""5"":
                num2=4;
                break;
            case ""4"":
                num2=3;
                break;
            case ""3"":
                num2=2;
                break;
            case ""2"":
                num2=1;
                break;
        
        }
        
        
        
        switch (this.suit) {
            case ""Spades"":
                temp1 = 4;
                break;
            case ""Hearts"":
                temp1 = 3;
                break;
            case ""Diamonds"":
                temp1 = 2;
                break;
            case ""Clubs"":
                temp1 = 1;
                break;
        }
        switch (that.suit) {
            case ""Spades"":
                temp2 = 4;
                break;
            case ""Hearts"":
                temp2 = 3;
                break;
            case ""Diamonds"":
                temp2 = 2;
                break;
            case ""Clubs"":
                temp2 = 1;
                break;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(num1>num2) return 1;
        if(num1<num2) return -1;
        if(temp1>temp2) return 1;
        if(temp1<temp2) return -1;   
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int temp1 = 0;
            int temp2 = 0;
            switch (c1.suit) {
                case ""Spades"":
                    temp1 = 4;
                    break;
                case ""Hearts"":
                    temp1 = 3;
                    break;
                case ""Diamonds"":
                    temp1 = 2;
                    break;
                case ""Clubs"":
                    temp1 = 1;
                    break;
            }
            switch (c2.suit) {
                case ""Spades"":
                    temp2 = 4;
                    break;
                case ""Hearts"":
                    temp2 = 3;
                    break;
                case ""Diamonds"":
                    temp2 = 2;
                    break;
                case ""Clubs"":
                    temp2 = 1;
                    break;
            }

            // complete this function so the Card can be sorted according to the suit
            if(temp1>temp2) return 1;
            if(temp1<temp2) return -1;
            return 0;
        }
        
           
    }
    
    public static void main(String[] args) {
        Card test1 = new Card(""2"", ""Spades"");
        Card test2 = new Card(""3"", ""Spades"");
        
        System.out.println(Card.SUIT_ORDER.compare(test2, test1));
}
}

@47d57af4c71e48bf98a75f7b1d42886c@"
"r04631009","0","0.66","111696","@4e8e014b181af6629ac8bafa201a3ab0@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private final String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private final String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;

    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        int num1 = 0;
        int num2 = 0;
        int suit1 = 0;
        int suit2 = 0;

        switch (this.face) {
            case ""A"":
                num1 = 14;
                break;
            case ""K"":
                num1 = 13;
                break;
            case ""Q"":
                num1 = 12;
                break;
            case ""J"":
                num1 = 11;
                break;
            default:
                num1 = Integer.parseInt(this.face);
                break;
        }
        switch (that.face) {
            case ""A"":
                num2 = 14;
                break;
            case ""K"":
                num2 = 13;
                break;
            case ""Q"":
                num2 = 12;
                break;
            case ""J"":
                num2 = 11;
                break;
            default:
                num2 = Integer.parseInt(that.face);
                break;
        }

        switch (this.suit) {
            case ""Spades"":
                suit1 = 4;
                break;
            case ""Hearts"":
                suit1 = 3;
                break;
            case ""Diamonds"":
                suit1 = 2;
                break;
            case ""Clubs"":
                suit1 = 1;
                break;
        }
        switch (that.suit) {
            case ""Spades"":
                suit1 = 4;
                break;
            case ""Hearts"":
                suit1 = 3;
                break;
            case ""Diamonds"":
                suit1 = 2;
                break;
            case ""Clubs"":
                suit1 = 1;
                break;
        }

        if (num1 > num2) {
            return 1;
        }
        if (num1 < num2) {
            return -1;
        }
        if (suit1 > suit2) {
            return 1;
        }
        if (suit1 < suit2) {
            return -1;
        }
        return 0;

    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int temp1 = 0;
            int temp2 = 0;
            switch (c1.suit) {
                case ""Spades"":
                    temp1 = 4;
                    break;
                case ""Hearts"":
                    temp1 = 3;
                    break;
                case ""Diamonds"":
                    temp1 = 2;
                    break;
                case ""Clubs"":
                    temp1 = 1;
                    break;
            }
            switch (c2.suit) {
                case ""Spades"":
                    temp2 = 4;
                    break;
                case ""Hearts"":
                    temp2 = 3;
                    break;
                case ""Diamonds"":
                    temp2 = 2;
                    break;
                case ""Clubs"":
                    temp2 = 1;
                    break;
            }

            // complete this function so the Card can be sorted according to the suit
            if (temp1 > temp2) {
                return 1;
            }
            if (temp1 < temp2) {
                return -1;
            }
            return 0;
        }

    }

}

@4e8e014b181af6629ac8bafa201a3ab0@"
"r04631009","0","0.65","111536","@ec4de3cc7c3a1cbd3b11b41616a02b28@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private final String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private final String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        int num1 = 0;
        int num2 = 0;

        switch (this.face) {
            case ""A"":
                num1 = 13;
                break;
            case ""K"":
                num1 = 12;
                break;
            case ""Q"":
                num1 = 11;
                break;
            case ""J"":
                num1 = 10;
                break;
            default:
                num1 = Integer.parseInt(this.face);
                break;

        }
        switch (that.face) {
            case ""A"":
                num2 = 13;
                break;
            case ""K"":
                num2 = 12;
                break;
            case ""Q"":
                num2 = 11;
                break;
            case ""J"":
                num2 = 10;
                break;
            default:
                num2 = Integer.parseInt(that.face);
                break;

        }

        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if (num1 > num2) {
            return 1;
        }
        if (num1 < num2) {
            return -1;
        }

        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int temp1 = 0;
            int temp2 = 0;
            switch (c1.suit) {
                case ""Spades"":
                    temp1 = 4;
                    break;
                case ""Hearts"":
                    temp1 = 3;
                    break;
                case ""Diamonds"":
                    temp1 = 2;
                    break;
                case ""Clubs"":
                    temp1 = 1;
                    break;
            }
            switch (c2.suit) {
                case ""Spades"":
                    temp2 = 4;
                    break;
                case ""Hearts"":
                    temp2 = 3;
                    break;
                case ""Diamonds"":
                    temp2 = 2;
                    break;
                case ""Clubs"":
                    temp2 = 1;
                    break;
            }

            // complete this function so the Card can be sorted according to the suit
            if (temp1 > temp2) {
                return 1;
            }
            if (temp1 < temp2) {
                return -1;
            }
            return 0;
        }

    }

}

@ec4de3cc7c3a1cbd3b11b41616a02b28@"
"r04631009","3","0.65","108576","@93ee32477ea5a0e8a5659169d71e5d31@
import java.util.Comparator;



public class Card implements Comparable<Card> {

    private final String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private final String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        int num1 = 0;
        int num2 = 0;
        int temp1 = 0;
        int temp2 = 0;
        switch (this.face){
            case ""A"":
                num1=13;
                break;
            case ""K"":
                num1=12;
                break;
            case ""Q"":
                num1=11;
                break;
            case ""J"":
                num1=10;
                break;
           default:
                num1 = Integer.parseInt(this.face);
                break;
        
        }
        switch (that.face){
            case ""A"":
                num2=13;
                break;
            case ""K"":
                num2=12;
                break;
            case ""Q"":
                num2=11;
                break;
            case ""J"":
                num2=10;
                break;
             default:
                num2 = Integer.parseInt(that.face);
                break;
        
        }
        
        
        
        switch (this.suit) {
            case ""Spades"":
                temp1 = 4;
                break;
            case ""Hearts"":
                temp1 = 3;
                break;
            case ""Diamonds"":
                temp1 = 2;
                break;
            case ""Clubs"":
                temp1 = 1;
                break;
        }
        switch (that.suit) {
            case ""Spades"":
                temp2 = 4;
                break;
            case ""Hearts"":
                temp2 = 3;
                break;
            case ""Diamonds"":
                temp2 = 2;
                break;
            case ""Clubs"":
                temp2 = 1;
                break;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(num1>num2) return 1;
        if(num1<num2) return -1;
        if(temp1>temp2) return 1;
        if(temp1<temp2) return -1;   
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int temp1 = 0;
            int temp2 = 0;
            switch (c1.suit) {
                case ""Spades"":
                    temp1 = 4;
                    break;
                case ""Hearts"":
                    temp1 = 3;
                    break;
                case ""Diamonds"":
                    temp1 = 2;
                    break;
                case ""Clubs"":
                    temp1 = 1;
                    break;
            }
            switch (c2.suit) {
                case ""Spades"":
                    temp2 = 4;
                    break;
                case ""Hearts"":
                    temp2 = 3;
                    break;
                case ""Diamonds"":
                    temp2 = 2;
                    break;
                case ""Clubs"":
                    temp2 = 1;
                    break;
            }

            // complete this function so the Card can be sorted according to the suit
            if(temp1>temp2) return 1;
            if(temp1<temp2) return -1;
            return 0;
        }
        
           
    }
    
   
}

@93ee32477ea5a0e8a5659169d71e5d31@"
"r04631009","5","0.132","111648","@897644497e25388a993c425b61deb186@
import java.util.Comparator;



public class Card implements Comparable<Card> {

    private final String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private final String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        int num1 = 0;
        int num2 = 0;
        int temp1 = 0;
        int temp2 = 0;
        switch (this.face){
            case ""A"":
                num1=13;
                break;
            case ""K"":
                num1=12;
                break;
            case ""Q"":
                num1=11;
                break;
            case ""J"":
                num1=10;
                break;
           default:
                num1 = Integer.parseInt(this.face)-1;
                break;
        
        }
        switch (that.face){
            case ""A"":
                num2=13;
                break;
            case ""K"":
                num2=12;
                break;
            case ""Q"":
                num2=11;
                break;
            case ""J"":
                num2=10;
                break;
             default:
                num2 = Integer.parseInt(that.face)-1;
                break;
        
        }
        
        
        
        switch (this.suit) {
            case ""Spades"":
                temp1 = 4;
                break;
            case ""Hearts"":
                temp1 = 3;
                break;
            case ""Diamonds"":
                temp1 = 2;
                break;
            case ""Clubs"":
                temp1 = 1;
                break;
        }
        switch (that.suit) {
            case ""Spades"":
                temp2 = 4;
                break;
            case ""Hearts"":
                temp2 = 3;
                break;
            case ""Diamonds"":
                temp2 = 2;
                break;
            case ""Clubs"":
                temp2 = 1;
                break;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(num1>num2) return 1;
        if(num1<num2) return -1;
        if(temp1>temp2) return 1;
        if(temp1<temp2) return -1;   
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int temp1 = 0;
            int temp2 = 0;
            switch (c1.suit) {
                case ""Spades"":
                    temp1 = 4;
                    break;
                case ""Hearts"":
                    temp1 = 3;
                    break;
                case ""Diamonds"":
                    temp1 = 2;
                    break;
                case ""Clubs"":
                    temp1 = 1;
                    break;
            }
            switch (c2.suit) {
                case ""Spades"":
                    temp2 = 4;
                    break;
                case ""Hearts"":
                    temp2 = 3;
                    break;
                case ""Diamonds"":
                    temp2 = 2;
                    break;
                case ""Clubs"":
                    temp2 = 1;
                    break;
            }

            // complete this function so the Card can be sorted according to the suit
            if(temp1>temp2) return 1;
            if(temp1<temp2) return -1;
            return 0;
        }
        
           
    }
    
   
}

@897644497e25388a993c425b61deb186@"
"r04631009","0","0.63","111584","@40aa9c9f802d34132b11a193d12cf39d@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private final String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private final String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        int num1 = 0;
        int num2 = 0;
        int temp1 = 0;
        int temp2 = 0;
        switch (this.face) {
            case ""A"":
                num1 = 13;
                break;
            case ""K"":
                num1 = 12;
                break;
            case ""Q"":
                num1 = 11;
                break;
            case ""J"":
                num1 = 10;
                break;
            default:
                num1 = Integer.parseInt(this.face) - 1;
                break;

        }
        switch (that.face) {
            case ""A"":
                num2 = 13;
                break;
            case ""K"":
                num2 = 12;
                break;
            case ""Q"":
                num2 = 11;
                break;
            case ""J"":
                num2 = 10;
                break;
            default:
                num2 = Integer.parseInt(that.face) - 1;
                break;

        }

        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if (num1 > num2) {
            return 1;
        }
        if (num1 < num2) {
            return -1;
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int temp1 = 0;
            int temp2 = 0;
            switch (c1.suit) {
                case ""Spades"":
                    temp1 = 4;
                    break;
                case ""Hearts"":
                    temp1 = 3;
                    break;
                case ""Diamonds"":
                    temp1 = 2;
                    break;
                case ""Clubs"":
                    temp1 = 1;
                    break;
            }
            switch (c2.suit) {
                case ""Spades"":
                    temp2 = 4;
                    break;
                case ""Hearts"":
                    temp2 = 3;
                    break;
                case ""Diamonds"":
                    temp2 = 2;
                    break;
                case ""Clubs"":
                    temp2 = 1;
                    break;
            }

            // complete this function so the Card can be sorted according to the suit
            if (temp1 > temp2) {
                return 1;
            }
            if (temp1 < temp2) {
                return -1;
            }
            return 0;
        }

    }

}

@40aa9c9f802d34132b11a193d12cf39d@"
"r03522831","5","0.128","110976","@a4a601744301b6b5c950d106ac800fb7@import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	private int Num;
        
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();
    
    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
        if(this.face.equals(""A""))
            this.Num = 1;
        else if(this.face.equals(""K""))
             this.Num = 13;
        else if (this.face.equals(""Q""))
            this.Num = 12;
        else if(this.face.equals(""J""))
            this.Num = 11;
        else
            this.Num = Integer.parseInt(this.face);
    }
     
    public Integer getNumber(){
        return Num;
    }
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(this.Num == 1){
            if(that.Num == 1)
                return Card.SUIT_ORDER.compare(this, that);
            else
                return 1;
        }
        else if(that.Num == 1)
            return -1;
        else if(this.Num > that.Num)
            return 1;
        else if(this.Num < that.Num)
            return -1;
        else
        {
           return Card.SUIT_ORDER.compare(this, that);
        }
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            if (c1.suit.equals(""Clubs"")){
                if(c2.suit.equals(""Clubs""))
                    return 0;
                else
                    return -1;
            }
            else if (c1.suit.equals(""Diamonds"")){
                if(c2.suit.equals(""Clubs""))
                    return 1;
                else if(c2.suit.equals(""Diamonds""))
                    return 0;
                else 
                    return -1;
            }
            else if(c1.suit.equals(""Hearts"")){
                if(c2.suit.equals(""Spades""))
                    return -1;
                else if(c2.suit.equals(""Hearts""))
                    return 0;
                else
                    return 1;
            }
            else{
                if(c2.suit.equals(""Spades""))
                    return 0;
                else
                    return 1;
            }
        }
    }
}

@a4a601744301b6b5c950d106ac800fb7@"
"r04631026","5","0.134","111568","@2dfea6e5fbf84443e34ce3804f600902@import java.util.Comparator;



public class Card implements Comparable<Card> {

    private final String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private final String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        int num1 = 0;
        int num2 = 0;
        int temp1 = 0;
        int temp2 = 0;
        switch (this.face){
            case ""A"":
                num1=13;
                break;
            case ""K"":
                num1=12;
                break;
            case ""Q"":
                num1=11;
                break;
            case ""J"":
                num1=10;
                break;
            case ""10"":
                num1=9;
                break;
            case ""9"":
                num1=8;
                break;
            case ""8"":
                num1=7;
                break;
            case ""7"":
                num1=6;
                break;
            case ""6"":
                num1=5;
                break;
            case ""5"":
                num1=4;
                break;
            case ""4"":
                num1=3;
                break;
            case ""3"":
                num1=2;
                break;
            case ""2"":
                num1=1;
                break;
        
        }
        switch (that.face){
            case ""A"":
                num2=13;
                break;
            case ""K"":
                num2=12;
                break;
            case ""Q"":
                num2=11;
                break;
            case ""J"":
                num2=10;
                break;
            case ""10"":
                num2=9;
                break;
            case ""9"":
                num2=8;
                break;
            case ""8"":
                num2=7;
                break;
            case ""7"":
                num2=6;
                break;
            case ""6"":
                num2=5;
                break;
            case ""5"":
                num2=4;
                break;
            case ""4"":
                num2=3;
                break;
            case ""3"":
                num2=2;
                break;
            case ""2"":
                num2=1;
                break;
        
        }
        
        
        
        switch (this.suit) {
            case ""Spades"":
                temp1 = 4;
                break;
            case ""Hearts"":
                temp1 = 3;
                break;
            case ""Diamonds"":
                temp1 = 2;
                break;
            case ""Clubs"":
                temp1 = 1;
                break;
        }
        switch (that.suit) {
            case ""Spades"":
                temp2 = 4;
                break;
            case ""Hearts"":
                temp2 = 3;
                break;
            case ""Diamonds"":
                temp2 = 2;
                break;
            case ""Clubs"":
                temp2 = 1;
                break;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(num1>num2) return 1;
        if(num1<num2) return -1;
        if(temp1>temp2) return 1;
        if(temp1<temp2) return -1;   
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int temp1 = 0;
            int temp2 = 0;
            switch (c1.suit) {
                case ""Spades"":
                    temp1 = 4;
                    break;
                case ""Hearts"":
                    temp1 = 3;
                    break;
                case ""Diamonds"":
                    temp1 = 2;
                    break;
                case ""Clubs"":
                    temp1 = 1;
                    break;
            }
            switch (c2.suit) {
                case ""Spades"":
                    temp2 = 4;
                    break;
                case ""Hearts"":
                    temp2 = 3;
                    break;
                case ""Diamonds"":
                    temp2 = 2;
                    break;
                case ""Clubs"":
                    temp2 = 1;
                    break;
            }

            // complete this function so the Card can be sorted according to the suit
            if(temp1>temp2) return 1;
            if(temp1<temp2) return -1;
            return 0;
        }
        
           
    }
    
    public static void main(String[] args) {
        Card test1 = new Card(""2"", ""Spades"");
        Card test2 = new Card(""3"", ""Spades"");
        
        System.out.println(Card.SUIT_ORDER.compare(test2, test1));
}
}
@2dfea6e5fbf84443e34ce3804f600902@"
"r04228027","0","0.64","108304","@e2715de882f235df6f7b471db0b6de5e@
import java.util.Comparator;
import java.util.Arrays;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        String[] sortedFace ={""A"","" 2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"","" J"", ""Q"", ""K""};
        int c1Face = Arrays.binarySearch(sortedFace,this.getFace());
        int c2Face = Arrays.binarySearch(sortedFace, that.getFace());
        if(c1Face>c2Face)
            return 1;
        else if (c1Face < c2Face)
            return -1;
        else{
            switch (Card.SUIT_ORDER.compare(this, that)) {
                case 1:
                    return 1;
                case -1:
                    return -1;
                default:
                    return 0;
            }
        }
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            String[] sortedSuit = {""Spades"","" Hearts"",""Diamonds"",""Clubs""};
            int c1Suit = Arrays.binarySearch(sortedSuit,c1.getSuit());
            int c2Suit = Arrays.binarySearch(sortedSuit,c2.getSuit());
            if(c1Suit > c2Suit)
                return 1;
            else if (c1Suit<c2Suit)
                return -1;
            else
                return 0;
        }
    }   
}


@e2715de882f235df6f7b471db0b6de5e@"
"r04228027","0","0.66","110976","@8c7d41796855ce7f0173b575827b0297@
import java.util.Comparator;
import java.util.Arrays;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        String[] sortedFace ={""A"","" 2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"","" J"", ""Q"", ""K""};
        int c1Face = Arrays.binarySearch(sortedFace,this.getFace());
        int c2Face = Arrays.binarySearch(sortedFace, that.getFace());
        if(c1Face<c2Face)
            return 1;
        else if (c1Face > c2Face)
            return -1;
        else{
            switch (Card.SUIT_ORDER.compare(this, that)) {
                case 1:
                    return 1;
                case -1:
                    return -1;
                default:
                    return 0;
            }
        }
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            String[] sortedSuit = {""Spades"","" Hearts"",""Diamonds"",""Clubs""};
            int c1Suit = Arrays.binarySearch(sortedSuit,c1.getSuit());
            int c2Suit = Arrays.binarySearch(sortedSuit,c2.getSuit());
            if(c1Suit < c2Suit)
                return 1;
            else if (c1Suit > c2Suit)
                return -1;
            else
                return 0;
        }
    }   
}


@8c7d41796855ce7f0173b575827b0297@"
"b01705003","0","0","0","@30a1ec8166d8bc8c8ed6fa37a3ed5227@public class Card{

    public static void main(String[] args) {
        System.out.println(""Kristoff"");
    }

}
@30a1ec8166d8bc8c8ed6fa37a3ed5227@"
"r04228027","0","0.092","102464","@5d92be746703785c87d40cd61160c598@
import java.util.Comparator;
import java.util.Arrays;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        String[] sortedFace ={""A"","" 2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"","" J"", ""Q"", ""K""};
        int c1Face = Arrays.binarySearch(sortedFace,this.getFace());
        int c2Face = Arrays.binarySearch(sortedFace, that.getFace());
        if(c1Face < c2Face)
            return 1;
        else if (c1Face > c2Face)
            return -1;
        else{
            if( Card.SUIT_ORDER.compare(this, that) == 1)
                return 1;
            else if (Card.SUIT_ORDER.compare(this, that) == -1)
                return -1;
            else
                return 0;
            }
        }
    }  

    // TODO
    class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            String[] sortedSuit = {""Spades"","" Hearts"",""Diamonds"",""Clubs""};
            int c1Suit = Arrays.binarySearch(sortedSuit,c1.getSuit());
            int c2Suit = Arrays.binarySearch(sortedSuit,c2.getSuit());
            if(c1Suit < c2Suit)
                return 1;
            else if (c1Suit > c2Suit)
                return -1;
            else
                return 0;
        }
    }   
}


@5d92be746703785c87d40cd61160c598@"
"r04228027","0","0.46","105200","@1107bf49aed18fbe6880aed002cf4ed4@
import java.util.Comparator;
import java.util.Arrays;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        String[] sortedFace ={""A"","" 2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"","" J"", ""Q"", ""K""};
        String[] sortedSuit = {""Spades"","" Hearts"",""Diamonds"",""Clubs""};
        int c1Face = Arrays.binarySearch(sortedFace,this.getFace());
        int c2Face = Arrays.binarySearch(sortedFace, that.getFace());
        if(c1Face < c2Face)
            return 1;
        else if (c1Face > c2Face)
            return -1;
        else{
            int c1Suit = Arrays.binarySearch(sortedSuit,this.getSuit());
            int c2Suit = Arrays.binarySearch(sortedSuit,that.getSuit());
            if(c1Suit < c2Suit)
                return 1;
            else if (c1Suit > c2Suit)
                return -1;
            else
                return 0;
            }
        }
    }  

    // TODO
//    private static class SuitOrder implements Comparator<Card> {
//        public int compare(Card c1, Card c2) {
//            // complete this function so the Card can be sorted according to the suit
//            String[] sortedSuit = {""Spades"","" Hearts"",""Diamonds"",""Clubs""};
//            int c1Suit = Arrays.binarySearch(sortedSuit,c1.getSuit());
//            int c2Suit = Arrays.binarySearch(sortedSuit,c2.getSuit());
//            if(c1Suit < c2Suit)
//                return 1;
//            else if (c1Suit > c2Suit)
//                return -1;
//            else
//                return 0;
//        }
//    }   



@1107bf49aed18fbe6880aed002cf4ed4@"
"r04228027","0","0.46","105200","@491d861f502d9aa1ae263db914e7e509@
import java.util.Comparator;
import java.util.Arrays;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
//    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        String[] sortedFace ={""A"","" 2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"","" J"", ""Q"", ""K""};
        String[] sortedSuit = {""Spades"","" Hearts"",""Diamonds"",""Clubs""};
        int c1Face = Arrays.binarySearch(sortedFace,this.getFace());
        int c2Face = Arrays.binarySearch(sortedFace, that.getFace());
        if(c1Face < c2Face)
            return 1;
        else if (c1Face > c2Face)
            return -1;
        else{
            int c1Suit = Arrays.binarySearch(sortedSuit,this.getSuit());
            int c2Suit = Arrays.binarySearch(sortedSuit,that.getSuit());
            if(c1Suit < c2Suit)
                return 1;
            else if (c1Suit > c2Suit)
                return -1;
            else
                return 0;
            }
        }
    }  

    // TODO
//    private static class SuitOrder implements Comparator<Card> {
//        public int compare(Card c1, Card c2) {
//            // complete this function so the Card can be sorted according to the suit
//            String[] sortedSuit = {""Spades"","" Hearts"",""Diamonds"",""Clubs""};
//            int c1Suit = Arrays.binarySearch(sortedSuit,c1.getSuit());
//            int c2Suit = Arrays.binarySearch(sortedSuit,c2.getSuit());
//            if(c1Suit < c2Suit)
//                return 1;
//            else if (c1Suit > c2Suit)
//                return -1;
//            else
//                return 0;
//        }
//    }   



@491d861f502d9aa1ae263db914e7e509@"
"r04228027","0","0.096","104416","@a4b4aaf5fb2665eef5335732b2cf8e80@
import java.util.Comparator;
import java.util.Arrays;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
//public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        String[] sortedFace ={""A"","" 2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"","" J"", ""Q"", ""K""};
        String[] sortedSuit = {""Spades"","" Hearts"",""Diamonds"",""Clubs""};
        int c1Face = Arrays.binarySearch(sortedFace,this.getFace());
        int c2Face = Arrays.binarySearch(sortedFace, that.getFace());
        if(c1Face < c2Face)
            return 1;
        else if (c1Face > c2Face)
            return -1;
        else{
            int c1Suit = Arrays.binarySearch(sortedSuit,this.getSuit());
            int c2Suit = Arrays.binarySearch(sortedSuit,that.getSuit());
            if(c1Suit < c2Suit)
                return 1;
            else if (c1Suit > c2Suit)
                return -1;
            else
                return 0;
            }
        }
    }  

    // TODO
//    private static class SuitOrder implements Comparator<Card> {
//        public int compare(Card c1, Card c2) {
//            // complete this function so the Card can be sorted according to the suit
//            String[] sortedSuit = {""Spades"","" Hearts"",""Diamonds"",""Clubs""};
//            int c1Suit = Arrays.binarySearch(sortedSuit,c1.getSuit());
//            int c2Suit = Arrays.binarySearch(sortedSuit,c2.getSuit());
//            if(c1Suit < c2Suit)
//                return 1;
//            else if (c1Suit > c2Suit)
//                return -1;
//            else
//                return 0;
//        }
//    }   



@a4b4aaf5fb2665eef5335732b2cf8e80@"
"r04631046","5","0.128","111776","@2dfea6e5fbf84443e34ce3804f600902@import java.util.Comparator;



public class Card implements Comparable<Card> {

    private final String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private final String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        int num1 = 0;
        int num2 = 0;
        int temp1 = 0;
        int temp2 = 0;
        switch (this.face){
            case ""A"":
                num1=13;
                break;
            case ""K"":
                num1=12;
                break;
            case ""Q"":
                num1=11;
                break;
            case ""J"":
                num1=10;
                break;
            case ""10"":
                num1=9;
                break;
            case ""9"":
                num1=8;
                break;
            case ""8"":
                num1=7;
                break;
            case ""7"":
                num1=6;
                break;
            case ""6"":
                num1=5;
                break;
            case ""5"":
                num1=4;
                break;
            case ""4"":
                num1=3;
                break;
            case ""3"":
                num1=2;
                break;
            case ""2"":
                num1=1;
                break;
        
        }
        switch (that.face){
            case ""A"":
                num2=13;
                break;
            case ""K"":
                num2=12;
                break;
            case ""Q"":
                num2=11;
                break;
            case ""J"":
                num2=10;
                break;
            case ""10"":
                num2=9;
                break;
            case ""9"":
                num2=8;
                break;
            case ""8"":
                num2=7;
                break;
            case ""7"":
                num2=6;
                break;
            case ""6"":
                num2=5;
                break;
            case ""5"":
                num2=4;
                break;
            case ""4"":
                num2=3;
                break;
            case ""3"":
                num2=2;
                break;
            case ""2"":
                num2=1;
                break;
        
        }
        
        
        
        switch (this.suit) {
            case ""Spades"":
                temp1 = 4;
                break;
            case ""Hearts"":
                temp1 = 3;
                break;
            case ""Diamonds"":
                temp1 = 2;
                break;
            case ""Clubs"":
                temp1 = 1;
                break;
        }
        switch (that.suit) {
            case ""Spades"":
                temp2 = 4;
                break;
            case ""Hearts"":
                temp2 = 3;
                break;
            case ""Diamonds"":
                temp2 = 2;
                break;
            case ""Clubs"":
                temp2 = 1;
                break;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(num1>num2) return 1;
        if(num1<num2) return -1;
        if(temp1>temp2) return 1;
        if(temp1<temp2) return -1;   
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int temp1 = 0;
            int temp2 = 0;
            switch (c1.suit) {
                case ""Spades"":
                    temp1 = 4;
                    break;
                case ""Hearts"":
                    temp1 = 3;
                    break;
                case ""Diamonds"":
                    temp1 = 2;
                    break;
                case ""Clubs"":
                    temp1 = 1;
                    break;
            }
            switch (c2.suit) {
                case ""Spades"":
                    temp2 = 4;
                    break;
                case ""Hearts"":
                    temp2 = 3;
                    break;
                case ""Diamonds"":
                    temp2 = 2;
                    break;
                case ""Clubs"":
                    temp2 = 1;
                    break;
            }

            // complete this function so the Card can be sorted according to the suit
            if(temp1>temp2) return 1;
            if(temp1<temp2) return -1;
            return 0;
        }
        
           
    }
    
    public static void main(String[] args) {
        Card test1 = new Card(""2"", ""Spades"");
        Card test2 = new Card(""3"", ""Spades"");
        
        System.out.println(Card.SUIT_ORDER.compare(test2, test1));
}
}
@2dfea6e5fbf84443e34ce3804f600902@"
"r04228027","0","0.096","104416","@51396520b84fd89a9f87cbe7fdad88ed@
import java.util.Comparator;
import java.util.Arrays;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
//public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        String[] sortedFace ={""A"","" 2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"","" J"", ""Q"", ""K""};
        String[] sortedSuit = {""Spades"","" Hearts"",""Diamonds"",""Clubs""};
        int c1Face = Arrays.binarySearch(sortedFace,this.getFace());
        int c2Face = Arrays.binarySearch(sortedFace, that.getFace());
        if(c1Face < c2Face)
            return 1;
        else if (c1Face > c2Face)
            return -1;
        else{
            int c1Suit = Arrays.binarySearch(sortedSuit,this.getSuit());
            int c2Suit = Arrays.binarySearch(sortedSuit,that.getSuit());
            if(c1Suit < c2Suit)
                return 1;
            else if (c1Suit > c2Suit)
                return -1;
            else
                return 0;
            
        }
    }  

//     TODO
//    private static class SuitOrder implements Comparator<Card> {
//        public int compare(Card c1, Card c2) {
//            // complete this function so the Card can be sorted according to the suit
//            String[] sortedSuit = {""Spades"","" Hearts"",""Diamonds"",""Clubs""};
//            int c1Suit = Arrays.binarySearch(sortedSuit,c1.getSuit());
//            int c2Suit = Arrays.binarySearch(sortedSuit,c2.getSuit());
//            if(c1Suit < c2Suit)
//                return 1;
//            else if (c1Suit > c2Suit)
//                return -1;
//            else
//                return 0;
//        }
//    }
}



@51396520b84fd89a9f87cbe7fdad88ed@"
"r04228027","0","0.66","108160","@c7f973111662966b10366dcf1e8a7ff3@
import java.util.Comparator;
import java.util.Arrays;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        String[] sortedFace ={""A"","" 2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"","" J"", ""Q"", ""K""};
        String[] sortedSuit = {""Spades"","" Hearts"",""Diamonds"",""Clubs""};
        int c1Face = Arrays.binarySearch(sortedFace,this.getFace());
        int c2Face = Arrays.binarySearch(sortedFace, that.getFace());
        if(c1Face < c2Face)
            return 1;
        else if (c1Face > c2Face)
            return -1;
        else{
            int c1Suit = Arrays.binarySearch(sortedSuit,this.getSuit());
            int c2Suit = Arrays.binarySearch(sortedSuit,that.getSuit());
            if(c1Suit < c2Suit)
                return 1;
            else if (c1Suit > c2Suit)
                return -1;
            else
                return 0;
            
        }
    }  

//     TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            String[] sortedSuit = {""Spades"","" Hearts"",""Diamonds"",""Clubs""};
            int c1Suit = Arrays.binarySearch(sortedSuit,c1.getSuit());
            int c2Suit = Arrays.binarySearch(sortedSuit,c2.getSuit());
            if(c1Suit < c2Suit)
                return 1;
            else if (c1Suit > c2Suit)
                return -1;
            else
                return 0;
        }
    }
}



@c7f973111662966b10366dcf1e8a7ff3@"
"r04228027","0","0.64","111104","@7a5b47f1e69227cfee09eb6237b33f39@
import java.util.Comparator;
import java.util.Arrays;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        String[] sortedFace ={""A"","" 2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""10"","" J"", ""Q"", ""K""};
//        String[] sortedSuit = {""Spades"","" Hearts"",""Diamonds"",""Clubs""};
        int c1Face = Arrays.binarySearch(sortedFace,this.getFace());
        int c2Face = Arrays.binarySearch(sortedFace, that.getFace());
        if(c1Face < c2Face)
            return 1;
        else if (c1Face > c2Face)
            return -1;
        else{
//            int c1Suit = Arrays.binarySearch(sortedSuit,this.getSuit());
//            int c2Suit = Arrays.binarySearch(sortedSuit,that.getSuit());
            if(Card.SUIT_ORDER.compare(this, that)==1)
                return 1;
            else if (Card.SUIT_ORDER.compare(this, that)==-1)
                return -1;
            else
                return 0;
            
        }
    }  

//     TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            String[] sortedSuit = {""Spades"","" Hearts"",""Diamonds"",""Clubs""};
            int c1Suit = Arrays.binarySearch(sortedSuit,c1.getSuit());
            int c2Suit = Arrays.binarySearch(sortedSuit,c2.getSuit());
            if(c1Suit < c2Suit)
                return 1;
            else if (c1Suit > c2Suit)
                return -1;
            else
                return 0;
        }
    }
}



@7a5b47f1e69227cfee09eb6237b33f39@"
"r03631015","5","0.132","111600","@f23b0b87e6c3c531170f4e851e1a57f1@import java.util.Comparator;
public class Card implements Comparable<Card> {
    private final String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private final String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();
    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }
    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }
    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }
    // TODO
    public int compareTo(Card that) {
        int num1 = 0;
        int num2 = 0;
        int temp1 = 0;
        int temp2 = 0;
        switch (this.face){
            case ""A"":
                num1=13;
                break;
            case ""K"":
                num1=12;
                break;
            case ""Q"":
                num1=11;
                break;
            case ""J"":
                num1=10;
                break;
            case ""10"":
                num1=9;
                break;
            case ""9"":
                num1=8;
                break;
            case ""8"":
                num1=7;
                break;
            case ""7"":
                num1=6;
                break;
            case ""6"":
                num1=5;
                break;
            case ""5"":
                num1=4;
                break;
            case ""4"":
                num1=3;
                break;
            case ""3"":
                num1=2;
                break;
            case ""2"":
                num1=1;
                break;
        
        }
        switch (that.face){
            case ""A"":
                num2=13;
                break;
            case ""K"":
                num2=12;
                break;
            case ""Q"":
                num2=11;
                break;
            case ""J"":
                num2=10;
                break;
            case ""10"":
                num2=9;
                break;
            case ""9"":
                num2=8;
                break;
            case ""8"":
                num2=7;
                break;
            case ""7"":
                num2=6;
                break;
            case ""6"":
                num2=5;
                break;
            case ""5"":
                num2=4;
                break;
            case ""4"":
                num2=3;
                break;
            case ""3"":
                num2=2;
                break;
            case ""2"":
                num2=1;
                break;
        
        }
        
        
        
        switch (this.suit) {
            case ""Spades"":
                temp1 = 4;
                break;
            case ""Hearts"":
                temp1 = 3;
                break;
            case ""Diamonds"":
                temp1 = 2;
                break;
            case ""Clubs"":
                temp1 = 1;
                break;
        }
        switch (that.suit) {
            case ""Spades"":
                temp2 = 4;
                break;
            case ""Hearts"":
                temp2 = 3;
                break;
            case ""Diamonds"":
                temp2 = 2;
                break;
            case ""Clubs"":
                temp2 = 1;
                break;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(num1>num2) return 1;
        if(num1<num2) return -1;
        if(temp1>temp2) return 1;
        if(temp1<temp2) return -1;   
        return 0;
    }
    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            int temp1 = 0;
            int temp2 = 0;
            switch (c1.suit) {
                case ""Spades"":
                    temp1 = 4;
                    break;
                case ""Hearts"":
                    temp1 = 3;
                    break;
                case ""Diamonds"":
                    temp1 = 2;
                    break;
                case ""Clubs"":
                    temp1 = 1;
                    break;
            }
            switch (c2.suit) {
                case ""Spades"":
                    temp2 = 4;
                    break;
                case ""Hearts"":
                    temp2 = 3;
                    break;
                case ""Diamonds"":
                    temp2 = 2;
                    break;
                case ""Clubs"":
                    temp2 = 1;
                    break;
            }
            // complete this function so the Card can be sorted according to the suit
            if(temp1>temp2) return 1;
            if(temp1<temp2) return -1;
            return 0;
        }
        
           
    }
    
    public static void main(String[] args) {
        Card test1 = new Card(""2"", ""Spades"");
        Card test2 = new Card(""3"", ""Spades"");
        
        System.out.println(Card.SUIT_ORDER.compare(test2, test1));
}
}
@f23b0b87e6c3c531170f4e851e1a57f1@"
"r04631031","5","0.134","110048","@2dfea6e5fbf84443e34ce3804f600902@import java.util.Comparator;



public class Card implements Comparable<Card> {

    private final String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private final String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        int num1 = 0;
        int num2 = 0;
        int temp1 = 0;
        int temp2 = 0;
        switch (this.face){
            case ""A"":
                num1=13;
                break;
            case ""K"":
                num1=12;
                break;
            case ""Q"":
                num1=11;
                break;
            case ""J"":
                num1=10;
                break;
            case ""10"":
                num1=9;
                break;
            case ""9"":
                num1=8;
                break;
            case ""8"":
                num1=7;
                break;
            case ""7"":
                num1=6;
                break;
            case ""6"":
                num1=5;
                break;
            case ""5"":
                num1=4;
                break;
            case ""4"":
                num1=3;
                break;
            case ""3"":
                num1=2;
                break;
            case ""2"":
                num1=1;
                break;
        
        }
        switch (that.face){
            case ""A"":
                num2=13;
                break;
            case ""K"":
                num2=12;
                break;
            case ""Q"":
                num2=11;
                break;
            case ""J"":
                num2=10;
                break;
            case ""10"":
                num2=9;
                break;
            case ""9"":
                num2=8;
                break;
            case ""8"":
                num2=7;
                break;
            case ""7"":
                num2=6;
                break;
            case ""6"":
                num2=5;
                break;
            case ""5"":
                num2=4;
                break;
            case ""4"":
                num2=3;
                break;
            case ""3"":
                num2=2;
                break;
            case ""2"":
                num2=1;
                break;
        
        }
        
        
        
        switch (this.suit) {
            case ""Spades"":
                temp1 = 4;
                break;
            case ""Hearts"":
                temp1 = 3;
                break;
            case ""Diamonds"":
                temp1 = 2;
                break;
            case ""Clubs"":
                temp1 = 1;
                break;
        }
        switch (that.suit) {
            case ""Spades"":
                temp2 = 4;
                break;
            case ""Hearts"":
                temp2 = 3;
                break;
            case ""Diamonds"":
                temp2 = 2;
                break;
            case ""Clubs"":
                temp2 = 1;
                break;
        }
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        if(num1>num2) return 1;
        if(num1<num2) return -1;
        if(temp1>temp2) return 1;
        if(temp1<temp2) return -1;   
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            int temp1 = 0;
            int temp2 = 0;
            switch (c1.suit) {
                case ""Spades"":
                    temp1 = 4;
                    break;
                case ""Hearts"":
                    temp1 = 3;
                    break;
                case ""Diamonds"":
                    temp1 = 2;
                    break;
                case ""Clubs"":
                    temp1 = 1;
                    break;
            }
            switch (c2.suit) {
                case ""Spades"":
                    temp2 = 4;
                    break;
                case ""Hearts"":
                    temp2 = 3;
                    break;
                case ""Diamonds"":
                    temp2 = 2;
                    break;
                case ""Clubs"":
                    temp2 = 1;
                    break;
            }

            // complete this function so the Card can be sorted according to the suit
            if(temp1>temp2) return 1;
            if(temp1<temp2) return -1;
            return 0;
        }
        
           
    }
    
    public static void main(String[] args) {
        Card test1 = new Card(""2"", ""Spades"");
        Card test2 = new Card(""3"", ""Spades"");
        
        System.out.println(Card.SUIT_ORDER.compare(test2, test1));
}
}
@2dfea6e5fbf84443e34ce3804f600902@"
"r04228027","5","0.134","111712","@a69f5719b8e8cad8f3e50c1740a06d81@
import java.util.Comparator;

public class Card implements Comparable<Card> {

    private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
    private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
    private int facecode, suitcode;

    private static void setcode(Card c) {
        switch (c.face) {
            case ""A"":
                c.facecode = 14;
                break;
            case ""K"":
                c.facecode = 13;
                break;
            case ""Q"":
                c.facecode = 12;
                break;
            case ""J"":
                c.facecode = 11;
                break;
            default:
                c.facecode = Integer.parseInt(c.face);
        }

        switch (c.suit) {
            case ""Spades"":
                c.suitcode = 4;
                break;
            case ""Hearts"":
                c.suitcode = 3;
                break;
            case ""Diamonds"":
                c.suitcode = 2;
                break;
            case ""Clubs"":
                c.suitcode = 1;
                break;
        }
    }

    public int getfacecode() {
        return this.facecode;
    }

    public int getsuitcode() {
        return this.suitcode;
    }

    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    public Card(String face, String suit) {
        this.face = face;
        this.suit = suit;
        setcode(this);
    }

    // DO NOT MODIFY THIS   
    public String getFace() {
        return this.face;
    }

    // DO NOT MODIFY THIS    
    public String getSuit() {
        return this.suit;
    }

    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)

        if (this.facecode < that.facecode) {
            return -1;
        }
        if (this.facecode > that.facecode) {
            return +1;
        }
        if (this.suitcode < that.suitcode) {
            return -1;
        }
        if (this.suitcode > that.suitcode) {
            return +1;
        }
        return 0;
    }

    // TODO
    private static class SuitOrder implements Comparator<Card> {

        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit

            if (c1.suitcode < c2.suitcode) {
                return -1;
            }
            if (c1.suitcode > c2.suitcode) {
                return +1;
            }
            return 0;
        }
    }
}

@a69f5719b8e8cad8f3e50c1740a06d81@"
"r04631031","0","0.46","105680","@ec0a38edf7e60b728bcc28a5a7a77582@
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int num1 = 0;
        int num2 = 0;
        int temp1 = 0;
        int temp2 = 0;
        switch (this.face){
            case ""A"":
                num1=13;
                break;
            case ""K"":
                num1=12;
                break;
            case ""Q"":
                num1=11;
                break;
            case ""J"":
                num1=10;
                break;
            case ""10"":
                num1=9;
                break;
            case ""9"":
                num1=8;
                break;
            case ""8"":
                num1=7;
                break;
            case ""7"":
                num1=6;
                break;
            case ""6"":
                num1=5;
                break;
            case ""5"":
                num1=4;
                break;
            case ""4"":
                num1=3;
                break;
            case ""3"":
                num1=2;
                break;
            case ""2"":
                num1=1;
                break;
        
        }
        switch (that.face){
            case ""A"":
                num2=13;
                break;
            case ""K"":
                num2=12;
                break;
            case ""Q"":
                num2=11;
                break;
            case ""J"":
                num2=10;
                break;
            case ""10"":
                num2=9;
                break;
            case ""9"":
                num2=8;
                break;
            case ""8"":
                num2=7;
                break;
            case ""7"":
                num2=6;
                break;
            case ""6"":
                num2=5;
                break;
            case ""5"":
                num2=4;
                break;
            case ""4"":
                num2=3;
                break;
            case ""3"":
                num2=2;
                break;
            case ""2"":
                num2=1;
                break;
        
        }
        
        switch (this.suit) {
            case ""Spades"":
                temp1 = 4;
                break;
            case ""Hearts"":
                temp1 = 3;
                break;
            case ""Diamonds"":
                temp1 = 2;
                break;
            case ""Clubs"":
                temp1 = 1;
                break;
        }
        switch (that.suit) {
            case ""Spades"":
                temp2 = 4;
                break;
            case ""Hearts"":
                temp2 = 3;
                break;
            case ""Diamonds"":
                temp2 = 2;
                break;
            case ""Clubs"":
                temp2 = 1;
                break;
        }
        if(num1>num2) return 1;
        if(num1<num2) return -1;
        if(temp1>temp2) return 1;
        if(temp1<temp2) return -1;   
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int temp1 = 0;
            int temp2 = 0;
            switch (c1.suit) {
                case ""Spades"":
                    temp1 = 4;
                    break;
                case ""Hearts"":
                    temp1 = 3;
                    break;
                case ""Diamonds"":
                    temp1 = 2;
                    break;
                case ""Clubs"":
                    temp1 = 1;
                    break;
            }
            switch (c2.suit) {
                case ""Spades"":
                    temp2 = 4;
                    break;
                case ""Hearts"":
                    temp2 = 3;
                    break;
                case ""Diamonds"":
                    temp2 = 2;
                    break;
                case ""Clubs"":
                    temp2 = 1;
                    break;
            }

            // complete this function so the Card can be sorted according to the suit
            if(temp1>temp2) return 1;
            if(temp1<temp2) return -1;
            return 0;
        }
    }
    
    public static void main(String[] args) {
        Card test1 = new Card(""2"", ""Diamond"");
        Card test2 = new Card(""3"", ""Spades"");
        
        System.out.println(Card.SUIT_ORDER.compare(test2, test1));
    }
}


@ec0a38edf7e60b728bcc28a5a7a77582@"
"r04631031","0","0.46","105680","@7bc3cd91830f720a84bb10678cb0174d@
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int num1 = 0;
        int num2 = 0;
        int temp1 = 0;
        int temp2 = 0;
        switch (this.face){
            case ""A"":
                num1=13;
                break;
            case ""K"":
                num1=12;
                break;
            case ""Q"":
                num1=11;
                break;
            case ""J"":
                num1=10;
                break;
            case ""10"":
                num1=9;
                break;
            case ""9"":
                num1=8;
                break;
            case ""8"":
                num1=7;
                break;
            case ""7"":
                num1=6;
                break;
            case ""6"":
                num1=5;
                break;
            case ""5"":
                num1=4;
                break;
            case ""4"":
                num1=3;
                break;
            case ""3"":
                num1=2;
                break;
            case ""2"":
                num1=1;
                break;
        
        }
        switch (that.face){
            case ""A"":
                num2=13;
                break;
            case ""K"":
                num2=12;
                break;
            case ""Q"":
                num2=11;
                break;
            case ""J"":
                num2=10;
                break;
            case ""10"":
                num2=9;
                break;
            case ""9"":
                num2=8;
                break;
            case ""8"":
                num2=7;
                break;
            case ""7"":
                num2=6;
                break;
            case ""6"":
                num2=5;
                break;
            case ""5"":
                num2=4;
                break;
            case ""4"":
                num2=3;
                break;
            case ""3"":
                num2=2;
                break;
            case ""2"":
                num2=1;
                break;
        
        }
        
        switch (this.suit) {
            case ""Spades"":
                temp1 = 4;
                break;
            case ""Hearts"":
                temp1 = 3;
                break;
            case ""Diamonds"":
                temp1 = 2;
                break;
            case ""Clubs"":
                temp1 = 1;
                break;
        }
        switch (that.suit) {
            case ""Spades"":
                temp2 = 4;
                break;
            case ""Hearts"":
                temp2 = 3;
                break;
            case ""Diamonds"":
                temp2 = 2;
                break;
            case ""Clubs"":
                temp2 = 1;
                break;
        }
        if(num1>num2) return 1;
        if(num1<num2) return -1;
        if(temp1>temp2) return 1;
        if(temp1<temp2) return -1;   
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int temp1 = 0;
            int temp2 = 0;
            switch (c1.suit) {
                case ""Spades"":
                    temp1 = 4;
                    break;
                case ""Hearts"":
                    temp1 = 3;
                    break;
                case ""Diamonds"":
                    temp1 = 2;
                    break;
                case ""Clubs"":
                    temp1 = 1;
                    break;
            }
            switch (c2.suit) {
                case ""Spades"":
                    temp2 = 4;
                    break;
                case ""Hearts"":
                    temp2 = 3;
                    break;
                case ""Diamonds"":
                    temp2 = 2;
                    break;
                case ""Clubs"":
                    temp2 = 1;
                    break;
            }

            // complete this function so the Card can be sorted according to the suit
            if(temp1>temp2) return 1;
            if(temp1<temp2) return -1;
            return 0;
        }
    }
    
    public static void main(String[] args) {
        Card test1 = new Card(""2"", ""Diamond"");
        Card test2 = new Card(""3"", ""Spades"");
    }
}


@7bc3cd91830f720a84bb10678cb0174d@"
"r04631031","5","0.13","110688","@e555aa81c8fb109938f2e2cc380f5b38@
import java.util.Comparator;

public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int num1 = 0;
        int num2 = 0;
        int temp1 = 0;
        int temp2 = 0;
        switch (this.face){
            case ""A"":
                num1=13;
                break;
            case ""K"":
                num1=12;
                break;
            case ""Q"":
                num1=11;
                break;
            case ""J"":
                num1=10;
                break;
            case ""10"":
                num1=9;
                break;
            case ""9"":
                num1=8;
                break;
            case ""8"":
                num1=7;
                break;
            case ""7"":
                num1=6;
                break;
            case ""6"":
                num1=5;
                break;
            case ""5"":
                num1=4;
                break;
            case ""4"":
                num1=3;
                break;
            case ""3"":
                num1=2;
                break;
            case ""2"":
                num1=1;
                break;
        
        }
        switch (that.face){
            case ""A"":
                num2=13;
                break;
            case ""K"":
                num2=12;
                break;
            case ""Q"":
                num2=11;
                break;
            case ""J"":
                num2=10;
                break;
            case ""10"":
                num2=9;
                break;
            case ""9"":
                num2=8;
                break;
            case ""8"":
                num2=7;
                break;
            case ""7"":
                num2=6;
                break;
            case ""6"":
                num2=5;
                break;
            case ""5"":
                num2=4;
                break;
            case ""4"":
                num2=3;
                break;
            case ""3"":
                num2=2;
                break;
            case ""2"":
                num2=1;
                break;
        
        }
        
        switch (this.suit) {
            case ""Spades"":
                temp1 = 4;
                break;
            case ""Hearts"":
                temp1 = 3;
                break;
            case ""Diamonds"":
                temp1 = 2;
                break;
            case ""Clubs"":
                temp1 = 1;
                break;
        }
        switch (that.suit) {
            case ""Spades"":
                temp2 = 4;
                break;
            case ""Hearts"":
                temp2 = 3;
                break;
            case ""Diamonds"":
                temp2 = 2;
                break;
            case ""Clubs"":
                temp2 = 1;
                break;
        }
        if(num1>num2) return 1;
        if(num1<num2) return -1;
        if(temp1>temp2) return 1;
        if(temp1<temp2) return -1;   
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int temp1 = 0;
            int temp2 = 0;
            switch (c1.suit) {
                case ""Spades"":
                    temp1 = 4;
                    break;
                case ""Hearts"":
                    temp1 = 3;
                    break;
                case ""Diamonds"":
                    temp1 = 2;
                    break;
                case ""Clubs"":
                    temp1 = 1;
                    break;
            }
            switch (c2.suit) {
                case ""Spades"":
                    temp2 = 4;
                    break;
                case ""Hearts"":
                    temp2 = 3;
                    break;
                case ""Diamonds"":
                    temp2 = 2;
                    break;
                case ""Clubs"":
                    temp2 = 1;
                    break;
            }

            // complete this function so the Card can be sorted according to the suit
            if(temp1>temp2) return 1;
            if(temp1<temp2) return -1;
            return 0;
        }
    }
    
    public static void main(String[] args) {
        Card test1 = new Card(""2"", ""Diamond"");
        Card test2 = new Card(""3"", ""Spades"");
        
        System.out.println(Card.SUIT_ORDER.compare(test2, test1));
    }
}


@e555aa81c8fb109938f2e2cc380f5b38@"
"b02611002","0","0","0","@65dd35af025e6e9e4475edddf1a49ee0@import java.util.Arrays;

public class Player implements Comparable<Player>{

    private Card[] cards = new Card[5];
    private String name;

    // DO NOT MODIFY THIS
    public Player(String name) {
        this.name = name;
    }

    // DO NOT MODIFY THIS
    public String getName() {
        return this.name;
    }

    // DO NOT MODIFY THIS
    public void setCards(Card[] cards) {
        this.cards = cards;
    }



    public int compareTo(Player that) {
        // complete this function so the Hand can be sorted according to its cards.


        int[] scores={0,0}; //hand[1] for this, hand[2] for that.

        boolean[] isFullHouse={false,false};
        int FHCounter=0;
        String[] FHThreeFace={""-1"",""-1""};//10 //9
        String[] FHTwoFace={""-1"",""-1""};//4 //A
        String[] tempFHTwoFace={""-1"",""-1""};

        boolean[] isFlush={false,false};
        int suitCombo[]={0,0};

        boolean[] isStraight={false,false};
        int faceCombo[]={0,0};

        boolean[] isTwoPair={false,false};

        boolean[] isOnePair={false,false};
        boolean isFirstCard=true;



        Card[] NThis = this.cards;  //cards in ""numerical"" expression (A->14, J->11, Q->12, K->13)
        Card[] NThat = that.cards;
        for(int i=0;i<NThis.length;i++){

            switch (NThis[i].getFace()){
                case ""A"": NThis[i]=new Card(""14"",NThis[i].getSuit());break;
                case ""J"": NThis[i]=new Card(""11"",NThis[i].getSuit());break;
                case ""Q"": NThis[i]=new Card(""12"",NThis[i].getSuit());break;
                case ""K"": NThis[i]=new Card(""13"",NThis[i].getSuit());break;
            }

            switch (NThat[i].getFace()){
                case ""A"": NThat[i]=new Card(""14"",NThat[i].getSuit());break;
                case ""J"": NThat[i]=new Card(""11"",NThat[i].getSuit());break;
                case ""Q"": NThat[i]=new Card(""12"",NThat[i].getSuit());break;
                case ""K"": NThat[i]=new Card(""13"",NThat[i].getSuit());break;
            }
        }


        Arrays.sort(NThis);
//        //TODO remove
//        System.out.println(""\n*Print NThis:"");
//        for(Card c:NThis){
//            System.out.println(c.getFace()+c.getSuit());
//        }
        Arrays.sort(NThat);
//        //TODO remove
//        System.out.println(""*Print NThat:"");
//        for(Card c:NThat){
//            System.out.println(c.getFace()+c.getSuit());
//        }


        int hID=0;
        Card[] currentHand = NThis;
        for(int i =0;i<2;i++){  // loop: NThis, NThat
            if(hID==1) currentHand=NThat;

            Card previous = new Card(""2"",""Clubs"");
            FHCounter=0;
            suitCombo[hID]=0;
            faceCombo[hID]=0;
            FHThreeFace[hID]=""-1"";
            FHTwoFace[hID]=""-1"";
            tempFHTwoFace[hID]=""-1"";

            for(Card c:currentHand){// loop: card1, card2, card3, card4 ...

                //handle first card case
                if(isFirstCard){
                    FHCounter=1;
                    suitCombo[hID]=1;
                    faceCombo[hID]=1;
                    isFirstCard=false;
                    previous=c;
                    continue;
                }

                // FullHouse counter
                if (previous.getFace() == c.getFace()) FHCounter++;
                else FHCounter = 1;
                if (FHCounter == 3) {
                    FHThreeFace[hID] = c.getFace();
                    FHTwoFace[hID] = tempFHTwoFace[hID];
                } else if (FHCounter == 2) {
                    tempFHTwoFace[hID] = FHTwoFace[hID];
                    FHTwoFace[hID] = c.getFace();
                }

                // Flush counter
                if(previous.getSuit().equals(c.getSuit())){
                    suitCombo[hID]++;
                }

                // Straight counter
                if(Integer.parseInt(c.getFace())-Integer.parseInt(previous.getFace())==1){
                    faceCombo[hID]++;
                }

                previous=c;
            }// loop: card1, card2, card3, card4 ...


            scores[hID]=Integer.parseInt(currentHand[4].getFace());

            if(!FHTwoFace[hID].equals(""-1"")){
                isOnePair[hID]=true;
                scores[hID]=20;
            }
            if(!tempFHTwoFace[hID].equals(""-1"") && !FHTwoFace[hID].equals(""-1"")){
                isTwoPair[hID]=true;
                scores[hID]=30;
            }
            if(faceCombo[hID]==5){
                isStraight[hID]=true;
                scores[hID]=40;
            }
            if(suitCombo[hID]==5){
                isFlush[hID]=true;
                scores[hID]=50;
            }
            if (!FHThreeFace[hID].equals(""-1"") && !FHTwoFace[hID].equals(""-1"")) {
                isFullHouse[hID]=true;
                scores[hID]=60;
            }
            hID++;
            isFirstCard=true;

        }// loop: NThis, NThat







        if(isFullHouse[0]&&isFullHouse[1]){
            if(Integer.parseInt(FHThreeFace[0])>Integer.parseInt(FHThreeFace[1])){
                scores[0]+=6;
            }else if(Integer.parseInt(FHThreeFace[0])<Integer.parseInt(FHThreeFace[1])){
                scores[1]+=6;
            }
        }else if(isFlush[0]&&isFlush[1]){
            if(Integer.parseInt(NThis[4].getFace())>Integer.parseInt(NThat[4].getFace())){
                scores[0]+=5;
            }else if(Integer.parseInt(NThis[4].getFace())<Integer.parseInt(NThat[4].getFace())){
                scores[1]+=5;
            }
        }else if(isStraight[0]&&isStraight[1]){
            if(Integer.parseInt(NThis[4].getFace())==14)scores[0]-=3;
            if(Integer.parseInt(NThat[4].getFace())==14)scores[0]-=3;
            if(Integer.parseInt(NThis[0].getFace())>Integer.parseInt(NThat[0].getFace())){
                scores[0]+=3;
            }else if(Integer.parseInt(NThis[0].getFace())<Integer.parseInt(NThat[0].getFace())) {
                scores[1]+=3;
            }
        }else if(isTwoPair[0] && isTwoPair[1]){
            if(Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[0]+=3;
            }else if (Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[1]+=3;
            }
        }else if(isOnePair[0] && isOnePair[1]){
            if(Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[0]+=2;
            }else if (Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[1]+=2;
            }
        }else if(NThis[4].getFace().equals(NThat[4].getFace())){
            if (NThis[4].compareTo(NThat[4])>0){
                scores[0]++;
            }else if(NThis[4].compareTo(NThat[4])<0){
                scores[1]++;
            }
        }


//        System.out.printf(""*** compareTo return: %d (%d-%d)"",(scores[0]-scores[1]),scores[0],scores[1]);
        return scores[0]-scores[1];
    }
}

@65dd35af025e6e9e4475edddf1a49ee0@"
"b02611002","0","0.4","106272","@65dd35af025e6e9e4475edddf1a49ee0@import java.util.Arrays;

public class Player implements Comparable<Player>{

    private Card[] cards = new Card[5];
    private String name;

    // DO NOT MODIFY THIS
    public Player(String name) {
        this.name = name;
    }

    // DO NOT MODIFY THIS
    public String getName() {
        return this.name;
    }

    // DO NOT MODIFY THIS
    public void setCards(Card[] cards) {
        this.cards = cards;
    }



    public int compareTo(Player that) {
        // complete this function so the Hand can be sorted according to its cards.


        int[] scores={0,0}; //hand[1] for this, hand[2] for that.

        boolean[] isFullHouse={false,false};
        int FHCounter=0;
        String[] FHThreeFace={""-1"",""-1""};//10 //9
        String[] FHTwoFace={""-1"",""-1""};//4 //A
        String[] tempFHTwoFace={""-1"",""-1""};

        boolean[] isFlush={false,false};
        int suitCombo[]={0,0};

        boolean[] isStraight={false,false};
        int faceCombo[]={0,0};

        boolean[] isTwoPair={false,false};

        boolean[] isOnePair={false,false};
        boolean isFirstCard=true;



        Card[] NThis = this.cards;  //cards in ""numerical"" expression (A->14, J->11, Q->12, K->13)
        Card[] NThat = that.cards;
        for(int i=0;i<NThis.length;i++){

            switch (NThis[i].getFace()){
                case ""A"": NThis[i]=new Card(""14"",NThis[i].getSuit());break;
                case ""J"": NThis[i]=new Card(""11"",NThis[i].getSuit());break;
                case ""Q"": NThis[i]=new Card(""12"",NThis[i].getSuit());break;
                case ""K"": NThis[i]=new Card(""13"",NThis[i].getSuit());break;
            }

            switch (NThat[i].getFace()){
                case ""A"": NThat[i]=new Card(""14"",NThat[i].getSuit());break;
                case ""J"": NThat[i]=new Card(""11"",NThat[i].getSuit());break;
                case ""Q"": NThat[i]=new Card(""12"",NThat[i].getSuit());break;
                case ""K"": NThat[i]=new Card(""13"",NThat[i].getSuit());break;
            }
        }


        Arrays.sort(NThis);
//        //TODO remove
//        System.out.println(""\n*Print NThis:"");
//        for(Card c:NThis){
//            System.out.println(c.getFace()+c.getSuit());
//        }
        Arrays.sort(NThat);
//        //TODO remove
//        System.out.println(""*Print NThat:"");
//        for(Card c:NThat){
//            System.out.println(c.getFace()+c.getSuit());
//        }


        int hID=0;
        Card[] currentHand = NThis;
        for(int i =0;i<2;i++){  // loop: NThis, NThat
            if(hID==1) currentHand=NThat;

            Card previous = new Card(""2"",""Clubs"");
            FHCounter=0;
            suitCombo[hID]=0;
            faceCombo[hID]=0;
            FHThreeFace[hID]=""-1"";
            FHTwoFace[hID]=""-1"";
            tempFHTwoFace[hID]=""-1"";

            for(Card c:currentHand){// loop: card1, card2, card3, card4 ...

                //handle first card case
                if(isFirstCard){
                    FHCounter=1;
                    suitCombo[hID]=1;
                    faceCombo[hID]=1;
                    isFirstCard=false;
                    previous=c;
                    continue;
                }

                // FullHouse counter
                if (previous.getFace() == c.getFace()) FHCounter++;
                else FHCounter = 1;
                if (FHCounter == 3) {
                    FHThreeFace[hID] = c.getFace();
                    FHTwoFace[hID] = tempFHTwoFace[hID];
                } else if (FHCounter == 2) {
                    tempFHTwoFace[hID] = FHTwoFace[hID];
                    FHTwoFace[hID] = c.getFace();
                }

                // Flush counter
                if(previous.getSuit().equals(c.getSuit())){
                    suitCombo[hID]++;
                }

                // Straight counter
                if(Integer.parseInt(c.getFace())-Integer.parseInt(previous.getFace())==1){
                    faceCombo[hID]++;
                }

                previous=c;
            }// loop: card1, card2, card3, card4 ...


            scores[hID]=Integer.parseInt(currentHand[4].getFace());

            if(!FHTwoFace[hID].equals(""-1"")){
                isOnePair[hID]=true;
                scores[hID]=20;
            }
            if(!tempFHTwoFace[hID].equals(""-1"") && !FHTwoFace[hID].equals(""-1"")){
                isTwoPair[hID]=true;
                scores[hID]=30;
            }
            if(faceCombo[hID]==5){
                isStraight[hID]=true;
                scores[hID]=40;
            }
            if(suitCombo[hID]==5){
                isFlush[hID]=true;
                scores[hID]=50;
            }
            if (!FHThreeFace[hID].equals(""-1"") && !FHTwoFace[hID].equals(""-1"")) {
                isFullHouse[hID]=true;
                scores[hID]=60;
            }
            hID++;
            isFirstCard=true;

        }// loop: NThis, NThat







        if(isFullHouse[0]&&isFullHouse[1]){
            if(Integer.parseInt(FHThreeFace[0])>Integer.parseInt(FHThreeFace[1])){
                scores[0]+=6;
            }else if(Integer.parseInt(FHThreeFace[0])<Integer.parseInt(FHThreeFace[1])){
                scores[1]+=6;
            }
        }else if(isFlush[0]&&isFlush[1]){
            if(Integer.parseInt(NThis[4].getFace())>Integer.parseInt(NThat[4].getFace())){
                scores[0]+=5;
            }else if(Integer.parseInt(NThis[4].getFace())<Integer.parseInt(NThat[4].getFace())){
                scores[1]+=5;
            }
        }else if(isStraight[0]&&isStraight[1]){
            if(Integer.parseInt(NThis[4].getFace())==14)scores[0]-=3;
            if(Integer.parseInt(NThat[4].getFace())==14)scores[0]-=3;
            if(Integer.parseInt(NThis[0].getFace())>Integer.parseInt(NThat[0].getFace())){
                scores[0]+=3;
            }else if(Integer.parseInt(NThis[0].getFace())<Integer.parseInt(NThat[0].getFace())) {
                scores[1]+=3;
            }
        }else if(isTwoPair[0] && isTwoPair[1]){
            if(Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[0]+=3;
            }else if (Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[1]+=3;
            }
        }else if(isOnePair[0] && isOnePair[1]){
            if(Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[0]+=2;
            }else if (Integer.parseInt(FHTwoFace[0])>Integer.parseInt(FHTwoFace[1])){
                scores[1]+=2;
            }
        }else if(NThis[4].getFace().equals(NThat[4].getFace())){
            if (NThis[4].compareTo(NThat[4])>0){
                scores[0]++;
            }else if(NThis[4].compareTo(NThat[4])<0){
                scores[1]++;
            }
        }


//        System.out.printf(""*** compareTo return: %d (%d-%d)"",(scores[0]-scores[1]),scores[0],scores[1]);
        return scores[0]-scores[1];
    }
}

@65dd35af025e6e9e4475edddf1a49ee0@"
"r04945039","0","0.65","110704","@ba2f5034a8c3c4a9058e96fdec1c5ac6@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {      
        int ans = facecmp(that);
        if (ans ==0) suitcmp(that);
        else return ans;
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            return c1.suitcmp(c2);           
            
        }
    }
    private int suitcmp(Card tae){      
        if (this.suitind()> tae.suitind()) return +1;
        if (this.suitind()< tae.suitind()) return -1;
        if (this.suitind() == tae.suitind()) return 0;
        return 2;
    }
    
    private int facecmp(Card card){
        if (this.faceind()> card.faceind()) return +1;
        if (this.faceind()< card.faceind()) return -1;
        if (this.faceind() == card.faceind()) return 0;
        return 0;
    }
    
    private int faceind(){
        if (face.equals(""A"")) return 14;
        if (face.equals(""2"")) return 2;
        if (face.equals(""3"")) return 3;
        if (face.equals(""4"")) return 4;
        if (face.equals(""5"")) return 5;
        if (face.equals(""6"")) return 6;
        if (face.equals(""7"")) return 7;
        if (face.equals(""8"")) return 8;
        if (face.equals(""9"")) return 9;
        if (face.equals(""10"")) return 10;
        if (face.equals(""J"")) return 11;
        if (face.equals(""Q"")) return 12;
        if (face.equals(""K"")) return 13;
        return 0;
    }
    
    private int suitind(){
        if (this.suit.equals(""Spades"")) return 4;
        if (this.suit.equals(""Hearts"")) return 3;
        if (this.suit.equals(""Diamonds"")) return 2;
        if (this.suit.equals(""Clubs"")) return 1;
        return 0;
        
    }
    
     public static void main(String[] args){
        /*Card[] test= new Card[2];
        test[0] = new Card(""A"",""Clibs"");
        test[1] = new Card(""8"",""Spades"");
        System.out.println(test[0].compareTo(test[1]));
        System.out.println(Card.SUIT_ORDER.compare(test[0],test[1]));*/
    }
}
@ba2f5034a8c3c4a9058e96fdec1c5ac6@"
"r04945039","0","0.0933333333333333","105648","@f9f3af9bbcfe981bd9b955c40b3250cc@public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {      
        int ans = facecmp(that);
        if (ans ==0) suitcmp(that);
        else return ans;
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            return c1.suitcmp(c2);           
            
        }
    }
    private int suitcmp(Card tae){      
        if (this.suitind()> tae.suitind()) return +1;
        if (this.suitind()< tae.suitind()) return -1;
        if (this.suitind() == tae.suitind()) return 0;
        return 2;
    }
    
    private int facecmp(Card card){
        if (this.faceind()> card.faceind()) return +1;
        if (this.faceind()< card.faceind()) return -1;
        if (this.faceind() == card.faceind()) return 0;
        return 0;
    }
    
    private int faceind(){
        if (face.equals(""A"")) return 14;
        if (face.equals(""2"")) return 2;
        if (face.equals(""3"")) return 3;
        if (face.equals(""4"")) return 4;
        if (face.equals(""5"")) return 5;
        if (face.equals(""6"")) return 6;
        if (face.equals(""7"")) return 7;
        if (face.equals(""8"")) return 8;
        if (face.equals(""9"")) return 9;
        if (face.equals(""10"")) return 10;
        if (face.equals(""J"")) return 11;
        if (face.equals(""Q"")) return 12;
        if (face.equals(""K"")) return 13;
        return 0;
    }
    
    private int suitind(){
        if (this.suit.equals(""Spades"")) return 4;
        if (this.suit.equals(""Hearts"")) return 3;
        if (this.suit.equals(""Diamonds"")) return 2;
        if (this.suit.equals(""Clubs"")) return 1;
        return 0;
        
    }
    
}
@f9f3af9bbcfe981bd9b955c40b3250cc@"
"r04945039","0","0.67","108272","@59f005340385d7ad9dc8c7009c716701@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {      
        int ans = facecmp(that);
        if (ans ==0) suitcmp(that);
        else return ans;
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        return 0;
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            return c1.suitcmp(c2);           
            
        }
    }
    private int suitcmp(Card tae){      
        if (this.suitind()> tae.suitind()) return +1;
        if (this.suitind()< tae.suitind()) return -1;       
        return 0;
    }
    
    private int facecmp(Card card){
        if (this.faceind()> card.faceind()) return +1;
        if (this.faceind()< card.faceind()) return -1;
        return 0;
    }
    
    private int faceind(){
        if (face.equals(""A"")) return 14;
        if (face.equals(""2"")) return 2;
        if (face.equals(""3"")) return 3;
        if (face.equals(""4"")) return 4;
        if (face.equals(""5"")) return 5;
        if (face.equals(""6"")) return 6;
        if (face.equals(""7"")) return 7;
        if (face.equals(""8"")) return 8;
        if (face.equals(""9"")) return 9;
        if (face.equals(""10"")) return 10;
        if (face.equals(""J"")) return 11;
        if (face.equals(""Q"")) return 12;
        if (face.equals(""K"")) return 13;
        return 0;
    }
    
    private int suitind(){
        if (this.suit.equals(""Spades"")) return 4;
        if (this.suit.equals(""Hearts"")) return 3;
        if (this.suit.equals(""Diamonds"")) return 2;
        if (this.suit.equals(""Clubs"")) return 1;
        return 0;
        
    }
    
}

@59f005340385d7ad9dc8c7009c716701@"
"r04945039","5","0.13","112112","@726ce63a1450e88d323e0092087715d8@import java.util.Comparator;
public class Card implements Comparable<Card> {
	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();
    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    public int face2int() {
        if (this.face.equals(""A"")) return 14;
        if (this.face.equals(""K"")) return 13;
        if (this.face.equals(""Q"")) return 12;
        if (this.face.equals(""J"")) return 11;
        if (this.face.equals(""10"")) return 10;
        if (this.face.equals(""9"")) return 9;
        if (this.face.equals(""8"")) return 8;
        if (this.face.equals(""7"")) return 7;
        if (this.face.equals(""6"")) return 6;
        if (this.face.equals(""5"")) return 5;
        if (this.face.equals(""4"")) return 4;
        if (this.face.equals(""3"")) return 3;
        if (this.face.equals(""2"")) return 2;
        return 0;
    }
    
    public int suit2int() {
        if (this.suit.equals(""Spades"")) return 4;
        if (this.suit.equals(""Hearts"")) return 3;
        if (this.suit.equals(""Diamonds"")) return 2;
        if (this.suit.equals(""Clubs"")) return 1;
        return 0;
    }
    
    // TODO
    public int compareTo(Card that) {
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
        int face1 = this.face2int();
        int face2 = that.face2int();
        int suit1 = this.suit2int();
        int suit2 = that.suit2int();
        if (face1 < face2) return -1;
        if (face1 > face2) return +1;
        if (suit1 < suit2) return -1;
        if (suit1 > suit2) return +1;
        return 0;
    }  
    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            // complete this function so the Card can be sorted according to the suit
            int suit1 = c1.suit2int();
            int suit2 = c2.suit2int();
            if (suit1 < suit2) return -1;
            if (suit1 > suit2) return +1;
            return 0;
        }
    }   
    
}
@726ce63a1450e88d323e0092087715d8@"
"r04945039","5","0.124","111696","@378208bf5dc3f2e6f39eda650e8a370d@import java.util.Comparator;
public class Card implements Comparable<Card> {

	private String face; // should be one of [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
	private String suit; // should be one of [Spades, Hearts, Diamonds, Clubs]
	
    public static final Comparator<Card> SUIT_ORDER = new SuitOrder();

    // DO NOT MODIFY THIS
    public Card(String face, String suit){
        this.face = face;
        this.suit = suit;
    }
     
    // DO NOT MODIFY THIS   
    public String getFace(){
        return this.face;
    }
    
    // DO NOT MODIFY THIS    
    public String getSuit(){
        return this.suit;
    }   
    
    // TODO
    public int compareTo(Card that) {      
        int ans = facecmp(that);
        if (ans==0) return suitcmp(that);
        else return ans;
        // complete this function so the Card can be sorted
        // (you must consider both face and suit)
    }  

    // TODO
    private static class SuitOrder implements Comparator<Card> {
        public int compare(Card c1, Card c2) {
            return c1.suitcmp(c2);           
            
        }
    }
    private int suitcmp(Card tae){      
        if (this.suitind()> tae.suitind()) return +1;
        if (this.suitind()< tae.suitind()) return -1;       
        return 0;
    }
    
    private int facecmp(Card card){
        if (this.faceind()> card.faceind()) return +1;
        if (this.faceind()< card.faceind()) return -1;
        return 0;
    }
    
    private int faceind(){
        if (face.equals(""A"")) return 14;
        if (face.equals(""2"")) return 2;
        if (face.equals(""3"")) return 3;
        if (face.equals(""4"")) return 4;
        if (face.equals(""5"")) return 5;
        if (face.equals(""6"")) return 6;
        if (face.equals(""7"")) return 7;
        if (face.equals(""8"")) return 8;
        if (face.equals(""9"")) return 9;
        if (face.equals(""10"")) return 10;
        if (face.equals(""J"")) return 11;
        if (face.equals(""Q"")) return 12;
        if (face.equals(""K"")) return 13;
        return 0;
    }
    
    private int suitind(){
        if (this.suit.equals(""Spades"")) return 4;
        if (this.suit.equals(""Hearts"")) return 3;
        if (this.suit.equals(""Diamonds"")) return 2;
        if (this.suit.equals(""Clubs"")) return 1;
        return 0;
        
    }
    
    
}

@378208bf5dc3f2e6f39eda650e8a370d@"
