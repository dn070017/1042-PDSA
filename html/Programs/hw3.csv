"r04945025","0","0.1","103008","@2b162c5f08a4dc22e9f7170140703ccb@import java.util.Stack;
import java.io.FileReader;
import java.io.BufferedReader;

public class Calculator {

    private Stack<Double> numStk;
    private Stack<String> opStk;
    private double result;

    public Calculator(int num){
        numStk = new Stack<Double>();
        opStk = new Stack<String>();
    }

    private void parseStr(String in){
        in = in.replaceAll(""\\("", """");
        String[] exp = in.split(""\\s+"");

        for(String op: exp){
            //System.out.printf(""%s$\n"", op);
            if(!op.equals(""+"") && !op.equals(""-"") && !op.equals(""*"") && !op.equals(""/"") && !op.equals(""("") && !op.equals("")"") && !op.equals("""")){ numStk.push(Double.parseDouble(op)); }
            else if(!op.equals("")"")){ opStk.push(op); }
            else if(op.equals("")"")){
                Double a = numStk.pop();
                Double b = numStk.pop();
                String c = null;
                if(!opStk.isEmpty()) c = opStk.pop();
                //System.out.printf(""%1.3f\t%s\t%1.3f\n"", a, c, b);
                numStk.push(Calculator.calc(a, b, c));
            }
        }
        while(numStk.size() > 1){
            Double a = numStk.pop();
            Double b = numStk.pop();
            String c = null;
            if(!opStk.isEmpty()) c = opStk.pop();
            //System.out.printf(""%1.3f\t%s\t%1.3f\n"", a, c, b);
            numStk.push(Calculator.calc(a, b, c));
        }
        //System.out.printf(""%d\n"", numStk.size());
        result = numStk.pop();
    }

    public double ans(String in){
        parseStr(in);
        return result;
    }

    public static double calc(Double a, Double b, String op){
        if(op.equals(""+"")) { return (a + b); }
        if(op.equals(""-"")) { return (b - a); }
        if(op.equals(""*"")) { return (a * b); }
        if(op.equals(""/"")) { return (b / a); }
        return 0;
    }

    public static void main(String[] args) throws Exception{
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            int num = Integer.parseInt(br.readLine());
            Calculator cct = new Calculator(num);

            for(String in = br.readLine(); in != null; in = br.readLine()){
                double ans = cct.ans(in);
                System.out.printf(""%.2f\n"", ans);
            }
        }
    }
}

@2b162c5f08a4dc22e9f7170140703ccb@"
"b02611019","10","0.1","107216","@3bc2352096f7d23d816fb1023e11b580@
import java.io.BufferedReader;
import java.io.FileReader;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author S410
 */
public class Calculator {

    static double a;
    static String push;

    static double Operate(String op, double a, double b) {
        if (op.equals(""+"")) {
            return (a + b);
        } else if (op.equals(""-"")) {
            return  (a - b);
        } else if (op.equals( ""*"")) {
            return (a * b);
        } else if (op.equals( ""/"")) {
            return  (a / b);
        }
        else
            return 0;
    }

    
    static public Double ans(String e) {
        String[] str=e.split("" "");
        Stack<String> st = new Stack<String>();
        for(int i=0;i<str.length;i++){
            st.push(str[i]);
            if (str[i].equals("")"")){
                st.pop();
                a=Double.parseDouble(st.pop());
                push = (String.valueOf(Operate(st.pop(), Double.parseDouble(st.pop()),a)));
//                StdOut.print(push);
                st.pop();
                st.push(push);
            }
        }
        return Double.parseDouble(st.pop());
    }

    public static void main(String[] args) throws Exception {
//        BufferedReader br = new BufferedReader(new FileReader(args[0]));
//        String read= br.readLine();
//        StdOut.print(ans(read));
        /*BufferedReader br = new BufferedReader(new FileReader(args[0]));
        String numstr = br.readLine();
        int num = Integer.parseInt(numstr);

        for (int i = 0; i < 1; i++) {
            String oper[] = br.readLine().split("" "");
            Stack<String> st = new Stack<String>();
            for (int k = 0; k < oper.length; k++) {
//                StdOut.print(oper[k]+""\n"");
                st.push(oper[k]);
                if (oper[k].equals("")"")) {
                    st.pop();
                    double a = Double.parseDouble(st.pop());
                    StdOut.print(a);
//                    StdOut.print(st.pop());
                    String push = (String.valueOf(Operate(st.pop(), a, Double.parseDouble(st.pop()))));

                    StdOut.print(push);
                    st.pop();
                    st.push(push);

                }
            }
        }*/

    }
}

@3bc2352096f7d23d816fb1023e11b580@"
"b02611019","10","0.095","105760","@ea94719ed01e1bed8af1d222c01f8867@
import java.io.BufferedReader;
import java.io.FileReader;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author S410
 */
public class Calculator {

    static double a;
    static String push;

    static double Operate(String op, double a, double b) {
        if (op.equals(""+"")) {
            return (a + b);
        } else if (op.equals(""-"")) {
            return  (a - b);
        } else if (op.equals( ""*"")) {
            return (a * b);
        } else if (op.equals( ""/"")) {
            return  (a / b);
        }
        else
            return 0;
    }

    
    static public Double ans(String e) {
        String[] str=e.split("" "");
        Stack<String> st = new Stack<String>();
        for(int i=0;i<str.length;i++){
            st.push(str[i]);
            if (str[i].equals("")"")){
                st.pop();
                a=Double.parseDouble(st.pop());
                push = (String.valueOf(Calculator.Operate(st.pop(), Double.parseDouble(st.pop()),a)));
//                StdOut.print(push);
                st.pop();
                st.push(push);
            }
        }
        return Double.parseDouble(st.pop());
    }

    public static void main(String[] args) throws Exception {
//        BufferedReader br = new BufferedReader(new FileReader(args[0]));
//        String read= br.readLine();
//        StdOut.print(ans(read));
        /*BufferedReader br = new BufferedReader(new FileReader(args[0]));
        String numstr = br.readLine();
        int num = Integer.parseInt(numstr);

        for (int i = 0; i < 1; i++) {
            String oper[] = br.readLine().split("" "");
            Stack<String> st = new Stack<String>();
            for (int k = 0; k < oper.length; k++) {
//                StdOut.print(oper[k]+""\n"");
                st.push(oper[k]);
                if (oper[k].equals("")"")) {
                    st.pop();
                    double a = Double.parseDouble(st.pop());
                    StdOut.print(a);
//                    StdOut.print(st.pop());
                    String push = (String.valueOf(Operate(st.pop(), a, Double.parseDouble(st.pop()))));

                    StdOut.print(push);
                    st.pop();
                    st.push(push);

                }
            }
        }*/

    }
}

@ea94719ed01e1bed8af1d222c01f8867@"
"b02611019","10","0.101","106912","@da00ca65b371ee0ecf71ba3f639e5b6f@
import java.io.BufferedReader;
import java.io.FileReader;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author S410
 */
public class Calculator {

//    static double a;
//    static String push;

    static double Operate(String op, double a, double b) {
        if (op.equals(""+"")) {
            return (a + b);
        } else if (op.equals(""-"")) {
            return  (a - b);
        } else if (op.equals( ""*"")) {
            return (a * b);
        } else if (op.equals( ""/"")) {
            return  (a / b);
        }
        else
            return 0;
    }

    
    static public Double ans(String e) {
        String[] str=e.split("" "");
        Stack<String> st = new Stack<String>();
        double a;
        String push;
        for(int i=0;i<str.length;i++){
            st.push(str[i]);
            if (str[i].equals("")"")){
                st.pop();
                a=Double.parseDouble(st.pop());
                push = (String.valueOf(Calculator.Operate(st.pop(), Double.parseDouble(st.pop()),a)));
//                StdOut.print(push);
                st.pop();
                st.push(push);
            }
        }
        return Double.parseDouble(st.pop());
    }

    public static void main(String[] args) throws Exception {
//        BufferedReader br = new BufferedReader(new FileReader(args[0]));
//        String read= br.readLine();
//        StdOut.print(ans(read));
        /*BufferedReader br = new BufferedReader(new FileReader(args[0]));
        String numstr = br.readLine();
        int num = Integer.parseInt(numstr);

        for (int i = 0; i < 1; i++) {
            String oper[] = br.readLine().split("" "");
            Stack<String> st = new Stack<String>();
            for (int k = 0; k < oper.length; k++) {
//                StdOut.print(oper[k]+""\n"");
                st.push(oper[k]);
                if (oper[k].equals("")"")) {
                    st.pop();
                    double a = Double.parseDouble(st.pop());
                    StdOut.print(a);
//                    StdOut.print(st.pop());
                    String push = (String.valueOf(Operate(st.pop(), a, Double.parseDouble(st.pop()))));

                    StdOut.print(push);
                    st.pop();
                    st.push(push);

                }
            }
        }*/

    }
}

@da00ca65b371ee0ecf71ba3f639e5b6f@"
"b02611019","10","0.099","106144","@b2311fd3d0155438381377e5f5ef8813@
import java.io.BufferedReader;
import java.io.FileReader;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author S410
 */
public class Calculator {

//    static double a;
//    static String push;

    static public double Operate(String op, double a, double b) {
        if (op.equals(""+"")) {
            return (a + b);
        } else if (op.equals(""-"")) {
            return  (a - b);
        } else if (op.equals( ""*"")) {
            return (a * b);
        } else if (op.equals( ""/"")) {
            return  (a / b);
        }
        else
            return 0;
    }

    
    static public Double ans(String e) {
        String[] str=e.split("" "");
        Stack<String> st = new Stack<String>();
        double a;
        String push;
        for(int i=0;i<str.length;i++){
            st.push(str[i]);
            if (str[i].equals("")"")){
                st.pop();
                a=Double.parseDouble(st.pop());
                push = (String.valueOf(Calculator.Operate(st.pop(), Double.parseDouble(st.pop()),a)));
//                StdOut.print(push);
                st.pop();
                st.push(push);
            }
        }
        return Double.parseDouble(st.pop());
    }

    public static void main(String[] args) throws Exception {
//        BufferedReader br = new BufferedReader(new FileReader(args[0]));
//        String read= br.readLine();
//        StdOut.print(ans(read));
        /*BufferedReader br = new BufferedReader(new FileReader(args[0]));
        String numstr = br.readLine();
        int num = Integer.parseInt(numstr);

        for (int i = 0; i < 1; i++) {
            String oper[] = br.readLine().split("" "");
            Stack<String> st = new Stack<String>();
            for (int k = 0; k < oper.length; k++) {
//                StdOut.print(oper[k]+""\n"");
                st.push(oper[k]);
                if (oper[k].equals("")"")) {
                    st.pop();
                    double a = Double.parseDouble(st.pop());
                    StdOut.print(a);
//                    StdOut.print(st.pop());
                    String push = (String.valueOf(Operate(st.pop(), a, Double.parseDouble(st.pop()))));

                    StdOut.print(push);
                    st.pop();
                    st.push(push);

                }
            }
        }*/

    }
}

@b2311fd3d0155438381377e5f5ef8813@"
"b02611019","10","0.097","105808","@2ec50c13ad4a993542d478956a4f68ef@
import java.io.BufferedReader;
import java.io.FileReader;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author S410
 */
public class Calculator {

//    static double a;
//    static String push;
    public static double Operate(String op, double a, double b) {
        if (op.equals(""+"")) {
            return (a + b);
        } else if (op.equals(""-"")) {
            return (a - b);
        } else if (op.equals(""*"")) {
            return (a * b);
        } else if (op.equals(""/"")) {
            return (a / b);
        } else {
            return 0;
        }
    }

    public static Double ans(String e) {
        String[] str = e.split("" "");
        Stack<String> st = new Stack<String>();
        double a;
        String push;
        for (int i = 0; i < str.length; i++) {
            st.push(str[i]);
            if (str[i].equals("")"")) {
                st.pop();
                a = Double.parseDouble(st.pop());
                push = (String.valueOf(Calculator.Operate(st.pop(), Double.parseDouble(st.pop()), a)));
//                StdOut.print(push);
                st.pop();
                st.push(push);
            }
        }
        return Double.parseDouble(st.pop());
    }

    public static void main(String[] args) throws Exception {
//        BufferedReader br = new BufferedReader(new FileReader(args[0]));
//        String read= br.readLine();
//        StdOut.print(ans(read));
        

    }
}

@2ec50c13ad4a993542d478956a4f68ef@"
"b02611019","10","0.105","105776","@55ca06bd9e2608f8298849ff7ffd79af@
import java.io.BufferedReader;
import java.io.FileReader;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author S410
 */
public class Calculator {

//    static double a;
//    static String push;
    static Stack<String> st;
    public static double Operate(String op, double a, double b) {
        if (op.equals(""+"")) {
            return (a + b);
        } else if (op.equals(""-"")) {
            return (a - b);
        } else if (op.equals(""*"")) {
            return (a * b);
        } else if (op.equals(""/"")) {
            return (a / b);
        } else {
            return 0;
        }
    }

    public static Double ans(String e) {
        String[] str = e.split("" "");
        st = new Stack<String>();
        double a;
        String push;
        for (int i = 0; i < str.length; i++) {
            st.push(str[i]);
            if (str[i].equals("")"")) {
                st.pop();
                a = Double.parseDouble(st.pop());
                push = (String.valueOf(Calculator.Operate(st.pop(), Double.parseDouble(st.pop()), a)));
//                StdOut.print(push);
                st.pop();
                st.push(push);
            }
        }
        return Double.parseDouble(st.pop());
    }

    public static void main(String[] args) throws Exception {
//        BufferedReader br = new BufferedReader(new FileReader(args[0]));
//        String read= br.readLine();
//        StdOut.print(ans(read));
        

    }
}

@55ca06bd9e2608f8298849ff7ffd79af@"
"b02611019","10","0.104","106928","@31f18186c7d365d6b981c0d2cf8e1795@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Stack;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author S410
 */
public class Calculator {

//    static double a;
//    static String push;
    static Stack<String> st;
    public static double Operate(String op, double a, double b) {
        if (op.equals(""+"")) {
            return (a + b);
        } else if (op.equals(""-"")) {
            return (a - b);
        } else if (op.equals(""*"")) {
            return (a * b);
        } else if (op.equals(""/"")) {
            return (a / b);
        } else {
            return 0;
        }
    }

    public static Double ans(String e) {
        String[] str = e.split("" "");
        st = new Stack<String>();
        double a;
        String push;
        for (int i = 0; i < str.length; i++) {
            st.push(str[i]);
            if (str[i].equals("")"")) {
                st.pop();
                a = Double.parseDouble(st.pop());
                push = (String.valueOf(Calculator.Operate(st.pop(), Double.parseDouble(st.pop()), a)));
//                StdOut.print(push);
                st.pop();
                st.push(push);
            }
        }
        return Double.parseDouble(st.pop());
    }

    public static void main(String[] args) throws Exception {
//        BufferedReader br = new BufferedReader(new FileReader(args[0]));
//        String read= br.readLine();
//        StdOut.print(ans(read));
        

    }
}

@31f18186c7d365d6b981c0d2cf8e1795@"
"b02611019","0","0.097","105808","@006b605054d7a2a9fd94254e12cfc8f5@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Stack;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author S410
 */
public class Calculator {

//    static double a;
//    static String push;
    static Stack<String> st;
    public Calculator(int num){
    }
    
    public static double Operate(String op, double a, double b) {
        if (op.equals(""+"")) {
            return (a + b);
        } else if (op.equals(""-"")) {
            return (a - b);
        } else if (op.equals(""*"")) {
            return (a * b);
        } else if (op.equals(""/"")) {
            return (a / b);
        } else {
            return 0;
        }
    }

    public static Double ans(String e) {
        String[] str = e.split("" "");
        st = new Stack<String>();
        double a;
        String push;
        for (int i = 0; i < str.length; i++) {
            st.push(str[i]);
            if (str[i].equals("")"")) {
                st.pop();
                a = Double.parseDouble(st.pop());
                push = (String.valueOf(Calculator.Operate(st.pop(), Double.parseDouble(st.pop()), a)));
//                StdOut.print(push);
                st.pop();
                st.push(push);
            }
        }
        return Double.parseDouble(st.pop());
    }

    public static void main(String[] args) throws Exception {
//        BufferedReader br = new BufferedReader(new FileReader(args[0]));
//        String read= br.readLine();
//        StdOut.print(ans(read));
        

    }
}

@006b605054d7a2a9fd94254e12cfc8f5@"
"b02611019","10","0.1","105536","@8dc07be14f1be221f114043a13772832@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Stack;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author S410
 */
public class Calculator {

//    static double a;
//    static String push;
    static Stack<String> st;
    public Calculator(){
    }
    
    public static double Operate(String op, double a, double b) {
        if (op.equals(""+"")) {
            return (a + b);
        } else if (op.equals(""-"")) {
            return (a - b);
        } else if (op.equals(""*"")) {
            return (a * b);
        } else if (op.equals(""/"")) {
            return (a / b);
        } else {
            return 0;
        }
    }

    public static Double ans(String e) {
        String[] str = e.split("" "");
        st = new Stack<String>();
        double a;
        String push;
        for (int i = 0; i < str.length; i++) {
            st.push(str[i]);
            if (str[i].equals("")"")) {
                st.pop();
                a = Double.parseDouble(st.pop());
                push = (String.valueOf(Calculator.Operate(st.pop(), Double.parseDouble(st.pop()), a)));
//                StdOut.print(push);
                st.pop();
                st.push(push);
            }
        }
        return Double.parseDouble(st.pop());
    }

    public static void main(String[] args) throws Exception {
//        BufferedReader br = new BufferedReader(new FileReader(args[0]));
//        String read= br.readLine();
//        StdOut.print(ans(read));
        

    }
}

@8dc07be14f1be221f114043a13772832@"
"r04945025","0","0.105","105776","@889122d42eaad77729b396d6c0865a75@import java.util.Stack;
import java.io.FileReader;
import java.io.BufferedReader;

public class Calculator {

    private static Stack<Double> numStk = new Stack<Doeble>();
    private static Stack<String> opStk = new Stack<String>();
    private static double result;

    private static void parseStr(String in){
        in = in.replaceAll(""\\("", """");
        String[] exp = in.split(""\\s+"");

        for(String op: exp){
            //System.out.printf(""%s$\n"", op);
            if(!op.equals(""+"") && !op.equals(""-"") && !op.equals(""*"") && !op.equals(""/"") && !op.equals(""("") && !op.equals("")"") && !op.equals("""")){ numStk.push(Double.parseDouble(op)); }
            else if(!op.equals("")"")){ opStk.push(op); }
            else if(op.equals("")"")){
                Double a = numStk.pop();
                Double b = numStk.pop();
                String c = null;
                if(!opStk.isEmpty()) c = opStk.pop();
                //System.out.printf(""%1.3f\t%s\t%1.3f\n"", a, c, b);
                numStk.push(Calculator.calc(a, b, c));
            }
        }
        while(numStk.size() > 1){
            Double a = numStk.pop();
            Double b = numStk.pop();
            String c = null;
            if(!opStk.isEmpty()) c = opStk.pop();
            //System.out.printf(""%1.3f\t%s\t%1.3f\n"", a, c, b);
            numStk.push(Calculator.calc(a, b, c));
        }
        //System.out.printf(""%d\n"", numStk.size());
        result = numStk.pop();
    }

    public static double ans(String in){
        parseStr(in);
        return result;
    }

    public static double calc(Double a, Double b, String op){
        if(op.equals(""+"")) { return (a + b); }
        if(op.equals(""-"")) { return (b - a); }
        if(op.equals(""*"")) { return (a * b); }
        if(op.equals(""/"")) { return (b / a); }
        return 0;
    }

    public static void main(String[] args) throws Exception{
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            /*int num = Integer.parseInt(br.readLine());
            Calculator cct = new Calculator(num);

            for(String in = br.readLine(); in != null; in = br.readLine()){
                double ans = cct.ans(in);
                System.out.printf(""%.2f\n"", ans);
            }*/
        }
    }
}

@889122d42eaad77729b396d6c0865a75@"
"r04945025","10","0.096","106960","@b649114d6e6f6d3138ef46b3bf737e6a@import java.util.Stack;
import java.io.FileReader;
import java.io.BufferedReader;

public class Calculator {

    private static Stack<Double> numStk = new Stack<Double>();
    private static Stack<String> opStk = new Stack<String>();
    private static double result;

    private static void parseStr(String in){
        in = in.replaceAll(""\\("", """");
        String[] exp = in.split(""\\s+"");

        for(String op: exp){
            //System.out.printf(""%s$\n"", op);
            if(!op.equals(""+"") && !op.equals(""-"") && !op.equals(""*"") && !op.equals(""/"") && !op.equals(""("") && !op.equals("")"") && !op.equals("""")){ numStk.push(Double.parseDouble(op)); }
            else if(!op.equals("")"")){ opStk.push(op); }
            else if(op.equals("")"")){
                Double a = numStk.pop();
                Double b = numStk.pop();
                String c = null;
                if(!opStk.isEmpty()) c = opStk.pop();
                //System.out.printf(""%1.3f\t%s\t%1.3f\n"", a, c, b);
                numStk.push(Calculator.calc(a, b, c));
            }
        }
        while(numStk.size() > 1){
            Double a = numStk.pop();
            Double b = numStk.pop();
            String c = null;
            if(!opStk.isEmpty()) c = opStk.pop();
            //System.out.printf(""%1.3f\t%s\t%1.3f\n"", a, c, b);
            numStk.push(Calculator.calc(a, b, c));
        }
        //System.out.printf(""%d\n"", numStk.size());
        result = numStk.pop();
    }

    public static double ans(String in){
        parseStr(in);
        return result;
    }

    public static double calc(Double a, Double b, String op){
        if(op.equals(""+"")) { return (a + b); }
        if(op.equals(""-"")) { return (b - a); }
        if(op.equals(""*"")) { return (a * b); }
        if(op.equals(""/"")) { return (b / a); }
        return 0;
    }

    public static void main(String[] args) throws Exception{
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            /*int num = Integer.parseInt(br.readLine());
            Calculator cct = new Calculator(num);

            for(String in = br.readLine(); in != null; in = br.readLine()){
                double ans = cct.ans(in);
                System.out.printf(""%.2f\n"", ans);
            }*/
        }
    }
}

@b649114d6e6f6d3138ef46b3bf737e6a@"
"b02611019","10","0.093","105504","@bafe1353615717f071de86c94cec8178@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Stack;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author S410
 */
public class Calculator {

//    static double a;
//    static String push;
    static Stack<String> st;
//    public Calculator(int num){
//    }
    
    public static double Operate(String op, double a, double b) {
        if (op.equals(""+"")) {
            return (a + b);
        } else if (op.equals(""-"")) {
            return (a - b);
        } else if (op.equals(""*"")) {
            return (a * b);
        } else if (op.equals(""/"")) {
            return (a / b);
        } else {
            return 0;
        }
    }

    public static Double ans(String e) {
        String[] str = e.split("" "");
        st = new Stack<String>();
        double a;
        String push;
        for (int i = 0; i < str.length; i++) {
            st.push(str[i]);
            if (str[i].equals("")"")) {
                st.pop();
                a = Double.parseDouble(st.pop());
                push = (String.valueOf(Calculator.Operate(st.pop(), Double.parseDouble(st.pop()), a)));
//                StdOut.print(push);
                st.pop();
                st.push(push);
            }
        }
        return Double.parseDouble(st.pop());
    }

    public static void main(String[] args) throws Exception {
//        BufferedReader br = new BufferedReader(new FileReader(args[0]));
//        String read= br.readLine();
//        StdOut.print(ans(read));
        

    }
}

@bafe1353615717f071de86c94cec8178@"
"r04447001","10","0.104","105696","@b084f84f4bc6b7fefd2e4fde5951a4b5@
        /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author jerry
 */
public class Calculator {
    public static double ans(String e){
        String[] data = e.split(""\\s+"");
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        for(int i = 0; i < data.length;i++){
        String s = data[i];
        if(s.equals(""("")) ;
        else if(s.equals(""+"")) ops.push(s);
        else if(s.equals(""*"")) ops.push(s);
        else if(s.equals(""-"")) ops.push(s);
        else if(s.equals(""/"")) ops.push(s);
        else if(s.equals("")""))
        {
            String op = ops.pop();
            if(op.equals(""+"")) vals.push(vals.pop() + vals.pop());
            else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
            else if (op.equals(""-"")){
                double second = vals.pop();
                double first = vals.pop();
                vals.push(first-second);
            }
             else if (op.equals(""/"")){
                double second = vals.pop();
                double first = vals.pop();
                vals.push(first/second);
            }           
        }
        else vals.push(Double.parseDouble(s));
        }
        return vals.pop();
    }
}

@b084f84f4bc6b7fefd2e4fde5951a4b5@"
"r04447001","10","0.097","105680","@b084f84f4bc6b7fefd2e4fde5951a4b5@
        /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author jerry
 */
public class Calculator {
    public static double ans(String e){
        String[] data = e.split(""\\s+"");
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        for(int i = 0; i < data.length;i++){
        String s = data[i];
        if(s.equals(""("")) ;
        else if(s.equals(""+"")) ops.push(s);
        else if(s.equals(""*"")) ops.push(s);
        else if(s.equals(""-"")) ops.push(s);
        else if(s.equals(""/"")) ops.push(s);
        else if(s.equals("")""))
        {
            String op = ops.pop();
            if(op.equals(""+"")) vals.push(vals.pop() + vals.pop());
            else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
            else if (op.equals(""-"")){
                double second = vals.pop();
                double first = vals.pop();
                vals.push(first-second);
            }
             else if (op.equals(""/"")){
                double second = vals.pop();
                double first = vals.pop();
                vals.push(first/second);
            }           
        }
        else vals.push(Double.parseDouble(s));
        }
        return vals.pop();
    }
}

@b084f84f4bc6b7fefd2e4fde5951a4b5@"
"r04447001","10","0.102","105760","@b084f84f4bc6b7fefd2e4fde5951a4b5@
        /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author jerry
 */
public class Calculator {
    public static double ans(String e){
        String[] data = e.split(""\\s+"");
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        for(int i = 0; i < data.length;i++){
        String s = data[i];
        if(s.equals(""("")) ;
        else if(s.equals(""+"")) ops.push(s);
        else if(s.equals(""*"")) ops.push(s);
        else if(s.equals(""-"")) ops.push(s);
        else if(s.equals(""/"")) ops.push(s);
        else if(s.equals("")""))
        {
            String op = ops.pop();
            if(op.equals(""+"")) vals.push(vals.pop() + vals.pop());
            else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
            else if (op.equals(""-"")){
                double second = vals.pop();
                double first = vals.pop();
                vals.push(first-second);
            }
             else if (op.equals(""/"")){
                double second = vals.pop();
                double first = vals.pop();
                vals.push(first/second);
            }           
        }
        else vals.push(Double.parseDouble(s));
        }
        return vals.pop();
    }
}

@b084f84f4bc6b7fefd2e4fde5951a4b5@"
"r04945025","10","0.099","106912","@535464c17b5f8110cfc9897bc8fa6937@import java.util.Stack;
import java.io.FileReader;
import java.io.BufferedReader;

public class Calculator {

    private Stack<Double> numStk = new Stack<Double>();
    private Stack<String> opStk = new Stack<String>();
    private double result;

    private void parseStr(String in){
        in = in.replaceAll(""\\("", """");
        String[] exp = in.split(""\\s+"");

        for(String op: exp){
            //System.out.printf(""%s$\n"", op);
            if(!op.equals(""+"") && !op.equals(""-"") && !op.equals(""*"") && !op.equals(""/"") && !op.equals(""("") && !op.equals("")"") && !op.equals("""")){ numStk.push(Double.parseDouble(op)); }
            else if(!op.equals("")"")){ opStk.push(op); }
            else if(op.equals("")"")){
                Double a = numStk.pop();
                Double b = numStk.pop();
                String c = null;
                if(!opStk.isEmpty()) c = opStk.pop();
                //System.out.printf(""%1.3f\t%s\t%1.3f\n"", a, c, b);
                numStk.push(Calculator.calc(a, b, c));
            }
        }
        while(numStk.size() > 1){
            Double a = numStk.pop();
            Double b = numStk.pop();
            String c = null;
            if(!opStk.isEmpty()) c = opStk.pop();
            //System.out.printf(""%1.3f\t%s\t%1.3f\n"", a, c, b);
            numStk.push(Calculator.calc(a, b, c));
        }
        //System.out.printf(""%d\n"", numStk.size());
        result = numStk.pop();
    }

    public double ans(String in){
        parseStr(in);
        return result;
    }

    public static double calc(Double a, Double b, String op){
        if(op.equals(""+"")) { return (a + b); }
        if(op.equals(""-"")) { return (b - a); }
        if(op.equals(""*"")) { return (a * b); }
        if(op.equals(""/"")) { return (b / a); }
        return 0;
    }

    public static void main(String[] args) throws Exception{
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            /*int num = Integer.parseInt(br.readLine());
            Calculator cct = new Calculator(num);

            for(String in = br.readLine(); in != null; in = br.readLine()){
                double ans = cct.ans(in);
                System.out.printf(""%.2f\n"", ans);
            }*/
        }
    }
}

@535464c17b5f8110cfc9897bc8fa6937@"
"r04447001","10","0.101","105696","@55d645f826ba2d0aef0310da10649bae@
        /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author jerry
 */
public class Calculator {
    public double ans(String e){
        String[] data = e.split(""\\s+"");
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        for(int i = 0; i < data.length;i++){
        String s = data[i];
        if(s.equals(""("")) ;
        else if(s.equals(""+"")) ops.push(s);
        else if(s.equals(""*"")) ops.push(s);
        else if(s.equals(""-"")) ops.push(s);
        else if(s.equals(""/"")) ops.push(s);
        else if(s.equals("")""))
        {
            String op = ops.pop();
            if(op.equals(""+"")) vals.push(vals.pop() + vals.pop());
            else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
            else if (op.equals(""-"")){
                double second = vals.pop();
                double first = vals.pop();
                vals.push(first-second);
            }
             else if (op.equals(""/"")){
                double second = vals.pop();
                double first = vals.pop();
                vals.push(first/second);
            }           
        }
        else vals.push(Double.parseDouble(s));
        }
        return vals.pop();
    }
}

@55d645f826ba2d0aef0310da10649bae@"
"r04447001","10","0.102","105728","@55d645f826ba2d0aef0310da10649bae@
        /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author jerry
 */
public class Calculator {
    public double ans(String e){
        String[] data = e.split(""\\s+"");
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        for(int i = 0; i < data.length;i++){
        String s = data[i];
        if(s.equals(""("")) ;
        else if(s.equals(""+"")) ops.push(s);
        else if(s.equals(""*"")) ops.push(s);
        else if(s.equals(""-"")) ops.push(s);
        else if(s.equals(""/"")) ops.push(s);
        else if(s.equals("")""))
        {
            String op = ops.pop();
            if(op.equals(""+"")) vals.push(vals.pop() + vals.pop());
            else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
            else if (op.equals(""-"")){
                double second = vals.pop();
                double first = vals.pop();
                vals.push(first-second);
            }
             else if (op.equals(""/"")){
                double second = vals.pop();
                double first = vals.pop();
                vals.push(first/second);
            }           
        }
        else vals.push(Double.parseDouble(s));
        }
        return vals.pop();
    }
}

@55d645f826ba2d0aef0310da10649bae@"
"r04447001","10","0.109","106960","@55d645f826ba2d0aef0310da10649bae@
        /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author jerry
 */
public class Calculator {
    public double ans(String e){
        String[] data = e.split(""\\s+"");
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        for(int i = 0; i < data.length;i++){
        String s = data[i];
        if(s.equals(""("")) ;
        else if(s.equals(""+"")) ops.push(s);
        else if(s.equals(""*"")) ops.push(s);
        else if(s.equals(""-"")) ops.push(s);
        else if(s.equals(""/"")) ops.push(s);
        else if(s.equals("")""))
        {
            String op = ops.pop();
            if(op.equals(""+"")) vals.push(vals.pop() + vals.pop());
            else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
            else if (op.equals(""-"")){
                double second = vals.pop();
                double first = vals.pop();
                vals.push(first-second);
            }
             else if (op.equals(""/"")){
                double second = vals.pop();
                double first = vals.pop();
                vals.push(first/second);
            }           
        }
        else vals.push(Double.parseDouble(s));
        }
        return vals.pop();
    }
}

@55d645f826ba2d0aef0310da10649bae@"
"r04945025","10","0.095","106928","@535464c17b5f8110cfc9897bc8fa6937@import java.util.Stack;
import java.io.FileReader;
import java.io.BufferedReader;

public class Calculator {

    private Stack<Double> numStk = new Stack<Double>();
    private Stack<String> opStk = new Stack<String>();
    private double result;

    private void parseStr(String in){
        in = in.replaceAll(""\\("", """");
        String[] exp = in.split(""\\s+"");

        for(String op: exp){
            //System.out.printf(""%s$\n"", op);
            if(!op.equals(""+"") && !op.equals(""-"") && !op.equals(""*"") && !op.equals(""/"") && !op.equals(""("") && !op.equals("")"") && !op.equals("""")){ numStk.push(Double.parseDouble(op)); }
            else if(!op.equals("")"")){ opStk.push(op); }
            else if(op.equals("")"")){
                Double a = numStk.pop();
                Double b = numStk.pop();
                String c = null;
                if(!opStk.isEmpty()) c = opStk.pop();
                //System.out.printf(""%1.3f\t%s\t%1.3f\n"", a, c, b);
                numStk.push(Calculator.calc(a, b, c));
            }
        }
        while(numStk.size() > 1){
            Double a = numStk.pop();
            Double b = numStk.pop();
            String c = null;
            if(!opStk.isEmpty()) c = opStk.pop();
            //System.out.printf(""%1.3f\t%s\t%1.3f\n"", a, c, b);
            numStk.push(Calculator.calc(a, b, c));
        }
        //System.out.printf(""%d\n"", numStk.size());
        result = numStk.pop();
    }

    public double ans(String in){
        parseStr(in);
        return result;
    }

    public static double calc(Double a, Double b, String op){
        if(op.equals(""+"")) { return (a + b); }
        if(op.equals(""-"")) { return (b - a); }
        if(op.equals(""*"")) { return (a * b); }
        if(op.equals(""/"")) { return (b / a); }
        return 0;
    }

    public static void main(String[] args) throws Exception{
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            /*int num = Integer.parseInt(br.readLine());
            Calculator cct = new Calculator(num);

            for(String in = br.readLine(); in != null; in = br.readLine()){
                double ans = cct.ans(in);
                System.out.printf(""%.2f\n"", ans);
            }*/
        }
    }
}

@535464c17b5f8110cfc9897bc8fa6937@"
"r04447001","10","0.099","105744","@5fd069a27398c19e8bb63c6b7853fdee@
        /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author jerry
 */
public class Calculator {
    public Calculator(){
        
    }
    
    public double ans(String e){
        String[] data = e.split(""\\s+"");
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        for(int i = 0; i < data.length;i++){
        String s = data[i];
        if(s.equals(""("")) ;
        else if(s.equals(""+"")) ops.push(s);
        else if(s.equals(""*"")) ops.push(s);
        else if(s.equals(""-"")) ops.push(s);
        else if(s.equals(""/"")) ops.push(s);
        else if(s.equals("")""))
        {
            String op = ops.pop();
            if(op.equals(""+"")) vals.push(vals.pop() + vals.pop());
            else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
            else if (op.equals(""-"")){
                double second = vals.pop();
                double first = vals.pop();
                vals.push(first-second);
            }
             else if (op.equals(""/"")){
                double second = vals.pop();
                double first = vals.pop();
                vals.push(first/second);
            }           
        }
        else vals.push(Double.parseDouble(s));
        }
        return vals.pop();
    }
}

@5fd069a27398c19e8bb63c6b7853fdee@"
"r04546032","0","0.109","106960","@aac48ce442ef9a632ccc0b426aa920de@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author CHIN LUNG
 */
public class Calculator {
    
}

@aac48ce442ef9a632ccc0b426aa920de@"
"r04546032","0","0","0","@e4f31a1185898598946e05bbcd60394e@import java.io.FileReader;
import java.io.BufferedReader;
import java.net.URLDecoder;
import java.util.Arrays;
import java.util.ArrayList;

/**
 *
 * @author CHIN LUNG
 */
public class Calculator {

    public Double ans(String e)
    {
        	Stack s = new Stack(e.length());
		String [] data =transfer(e);//傳入轉換的方法得到後置式的分割陣列
		for(int i = 0 ; i < data.length ; i++)//讀出後置式的各個運算元運算子來做計算
		{
			if(data[i] == null)break;
//是運算子時
		if(data[i].equals(""+"")||data[i].equals(""-"")||data[i].equals(""*"")||data[i].equals(""/""))
			{
				int b = Integer.parseInt(s.pop());//提出前面兩個儲存的值計算
				int a = Integer.parseInt(s.pop());
				if(data[i].equals(""+""))
					s.push(""""+(a+b));
				else if(data[i].equals(""-""))
					s.push(""""+(a-b));
				else if(data[i].equals(""*""))
					s.push(""""+(a*b));
				else if(data[i].equals(""/""))
					s.push(""""+(a/b));
			}
			else//是運算元時存入堆疊
				s.push(data[i]);

		}
                return Double.parseDouble(s.pop());
    }
	
	public  String [] transfer(String data)//轉換成後置式
	{
                Stack s = new Stack(data.length());
		int index = 0;//為了將輸入的字串分割成陣列儲存用的索引值
		String [] ans = new String[data.length()];
		for(int i = 0 ; i < data.length() ;i++)
		{
			String opr = returnSplit(data,i);//傳入分割方法取得各個運算元或運算子
			if(opr.length() > 1)i+= (opr.length()-1);//避免傳出的是兩位數以上I未對應
//是運算子的話看其優先順序 是疊入還是取出
		if(opr.equals(""+"")||opr.equals(""-"")||opr.equals(""*"")||opr.equals(""/"")||opr.equals(""^""))
			{
				while(s.index != -1 && priority(opr) <= priority(s.peep()))
				{
					ans[index++] = s.pop();
				}
				s.push(opr);
			}
			else if(opr.equals(""(""))
			{
				s.push(opr);
			}
			else if(opr.equals("")""))//取出運算子直到對應到""(""以後
			{
				String tempS ="""";
				while(s.index!= -1 &&!( (tempS = s.pop()).equals(""("")) )
				{
					ans[index++] = tempS;
				}
			}
			else
			{
				ans[index++] =opr;
			}
		}
		while(s.index!=-1)ans[index++] = s.pop();
		return ans;
	}
	public static String returnSplit(String data,int index)//傳回分割後的值
	{
		String thisString ="""";
		String s = String.valueOf(data.charAt(index));

		if(s.equals(""+"")||s.equals(""-"")||s.equals(""*"")||s.equals(""/"")||s.equals(""("")||s.equals("")"")||s.equals(""^""))
		{
			return s;//直接傳回運算子
		}
		else
		{
			do{
				thisString += s;
				if(index+1 ==data.length())break;
				s = String.valueOf(data.charAt(++index));//後面的位數式運算元就累加
			}while(!s.equals(""+"")&&!s.equals(""-"")&&!s.equals(""*"")&&!s.equals(""/"")&&!s.equals(""("")&&!s.equals("")"")&&!s.equals(""^""));
			return thisString;
		}
	}
	public static int priority(String opr)//運算子的優先順序
	{
		if(opr.equals(""^""))return 3;
		else if(opr.equals(""*"")||opr.equals(""/""))return 2;
		else if(opr.equals(""+"")||opr.equals(""-""))return 1;
		else return 0;
	}

class Stack
{
	String [] stack;
	public int index;
	Stack(int max)
	{
		index = -1; //無元素
		stack = new String[max];
	}
	public void push(String data)
	{
		stack[++index] = data;
	}
	public String pop()
	{
		return stack[index--];
	}
	public String peep()
	{
		return stack[index];
	}
}
    public static void main(String[] args) {
        Calculator c = new Calculator();
    }
}

@e4f31a1185898598946e05bbcd60394e@"
"r04546032","0","0","0","@3d191b3f896eb5bddfc0a0f29f8d1149@import java.io.FileReader;
import java.io.BufferedReader;
import java.net.URLDecoder;
import java.util.Arrays;
import java.util.ArrayList;

/**
 *
 * @author CHIN LUNG
 */
public class Calculator {

    public Double ans(String e)
    {
        	Stack s = new Stack(e.length());
		String [] data =transfer(e);//傳入轉換的方法得到後置式的分割陣列
		for(int i = 0 ; i < data.length ; i++)//讀出後置式的各個運算元運算子來做計算
		{
			if(data[i] == null)break;
//是運算子時
		if(data[i].equals(""+"")||data[i].equals(""-"")||data[i].equals(""*"")||data[i].equals(""/""))
			{
				int b = Integer.parseInt(s.pop());//提出前面兩個儲存的值計算
				int a = Integer.parseInt(s.pop());
				if(data[i].equals(""+""))
					s.push(""""+(a+b));
				else if(data[i].equals(""-""))
					s.push(""""+(a-b));
				else if(data[i].equals(""*""))
					s.push(""""+(a*b));
				else if(data[i].equals(""/""))
					s.push(""""+(a/b));
			}
			else//是運算元時存入堆疊
				s.push(data[i]);

		}
                return Double.parseDouble(s.pop());
    }
	
	public  String [] transfer(String data)//轉換成後置式
	{
           
                Stack s = new Stack( data.split("" "").length);
		int index = 0;//為了將輸入的字串分割成陣列儲存用的索引值
		String [] ans = new String[data.length()];
		for(int i = 0 ; i < data.length() ;i++)
		{
                    String opr = returnSplit(data,i);//傳入分割方法取得各個運算元或運算子
			if(opr.length() > 1)i+= (opr.length()-1);//避免傳出的是兩位數以上I未對應
//是運算子的話看其優先順序 是疊入還是取出
		if(opr.equals(""+"")||opr.equals(""-"")||opr.equals(""*"")||opr.equals(""/"")||opr.equals(""^""))
			{
				while(s.index != -1 && priority(opr) <= priority(s.peep()))
				{
					ans[index++] = s.pop();
				}
				s.push(opr);
			}
			else if(opr.equals(""(""))
			{
				s.push(opr);
			}
			else if(opr.equals("")""))//取出運算子直到對應到""(""以後
			{
				String tempS ="""";
				while(s.index!= -1 &&!( (tempS = s.pop()).equals(""("")) )
				{
					ans[index++] = tempS;
				}
			}
			else
			{
				ans[index++] =opr;
			}
		}
		while(s.index!=-1)ans[index++] = s.pop();
		return ans;
	}
	public static String returnSplit(String data,int index)//傳回分割後的值
	{
		String thisString ="""";
		String s = String.valueOf(data.charAt(index));

		if(s.equals(""+"")||s.equals(""-"")||s.equals(""*"")||s.equals(""/"")||s.equals(""("")||s.equals("")"")||s.equals(""^""))
		{
			return s;//直接傳回運算子
		}
		else
		{
			do{
				thisString += s;
				if(index+1 ==data.length())break;
				s = String.valueOf(data.charAt(++index));//後面的位數式運算元就累加
			}while(!s.equals(""+"")&&!s.equals(""-"")&&!s.equals(""*"")&&!s.equals(""/"")&&!s.equals(""("")&&!s.equals("")"")&&!s.equals(""^""));
			return thisString;
		}
	}
	public static int priority(String opr)//運算子的優先順序
	{
		if(opr.equals(""^""))return 3;
		else if(opr.equals(""*"")||opr.equals(""/""))return 2;
		else if(opr.equals(""+"")||opr.equals(""-""))return 1;
		else return 0;
	}

class Stack
{
	String [] stack;
	public int index;
	Stack(int max)
	{
		index = -1; //無元素
		stack = new String[max];
	}
	public void push(String data)
	{
		stack[++index] = data;
	}
	public String pop()
	{
		return stack[index--];
	}
	public String peep()
	{
		return stack[index];
	}
}
    public static void main(String[] args) {
        Calculator c = new Calculator();
    }
}

@3d191b3f896eb5bddfc0a0f29f8d1149@"
"r04546032","0","0","0","@88c8cb962613324d35fea0d129ab09d0@import java.io.FileReader;
import java.io.BufferedReader;
import java.net.URLDecoder;
import java.util.Arrays;
import java.util.ArrayList;

/**
 *
 * @author CHIN LUNG
 */
public class Calculator {

    public Double ans(String e)
    {
        	Stack s = new Stack(e.split("" "").length);
		String [] data =transfer(e);//傳入轉換的方法得到後置式的分割陣列
		for(int i = 0 ; i < data.length ; i++)//讀出後置式的各個運算元運算子來做計算
		{
			if(data[i] == null)break;
//是運算子時
		if(data[i].equals(""+"")||data[i].equals(""-"")||data[i].equals(""*"")||data[i].equals(""/""))
			{
				int b = Integer.parseInt(s.pop());//提出前面兩個儲存的值計算
				int a = Integer.parseInt(s.pop());
				if(data[i].equals(""+""))
					s.push(""""+(a+b));
				else if(data[i].equals(""-""))
					s.push(""""+(a-b));
				else if(data[i].equals(""*""))
					s.push(""""+(a*b));
				else if(data[i].equals(""/""))
					s.push(""""+(a/b));
			}
			else//是運算元時存入堆疊
				s.push(data[i]);

		}
                return Double.parseDouble(s.pop());
    }
	
	public  String [] transfer(String data)//轉換成後置式
	{
           
                Stack s = new Stack( data.split("" "").length);
		int index = 0;//為了將輸入的字串分割成陣列儲存用的索引值
		String [] ans = new String[data.length()];
		for(int i = 0 ; i < data.length() ;i++)
		{
                    String opr = returnSplit(data,i);//傳入分割方法取得各個運算元或運算子
			if(opr.length() > 1)i+= (opr.length()-1);//避免傳出的是兩位數以上I未對應
//是運算子的話看其優先順序 是疊入還是取出
		if(opr.equals(""+"")||opr.equals(""-"")||opr.equals(""*"")||opr.equals(""/"")||opr.equals(""^""))
			{
				while(s.index != -1 && priority(opr) <= priority(s.peep()))
				{
					ans[index++] = s.pop();
				}
				s.push(opr);
			}
			else if(opr.equals(""(""))
			{
				s.push(opr);
			}
			else if(opr.equals("")""))//取出運算子直到對應到""(""以後
			{
				String tempS ="""";
				while(s.index!= -1 &&!( (tempS = s.pop()).equals(""("")) )
				{
					ans[index++] = tempS;
				}
			}
			else
			{
				ans[index++] =opr;
			}
		}
		while(s.index!=-1)ans[index++] = s.pop();
		return ans;
	}
	public static String returnSplit(String data,int index)//傳回分割後的值
	{
		String thisString ="""";
		String s = String.valueOf(data.charAt(index));

		if(s.equals(""+"")||s.equals(""-"")||s.equals(""*"")||s.equals(""/"")||s.equals(""("")||s.equals("")"")||s.equals(""^""))
		{
			return s;//直接傳回運算子
		}
		else
		{
			do{
				thisString += s;
				if(index+1 ==data.length())break;
				s = String.valueOf(data.charAt(++index));//後面的位數式運算元就累加
			}while(!s.equals(""+"")&&!s.equals(""-"")&&!s.equals(""*"")&&!s.equals(""/"")&&!s.equals(""("")&&!s.equals("")"")&&!s.equals(""^""));
			return thisString;
		}
	}
	public static int priority(String opr)//運算子的優先順序
	{
		if(opr.equals(""^""))return 3;
		else if(opr.equals(""*"")||opr.equals(""/""))return 2;
		else if(opr.equals(""+"")||opr.equals(""-""))return 1;
		else return 0;
	}

class Stack
{
	String [] stack;
	public int index;
	Stack(int max)
	{
		index = -1; //無元素
		stack = new String[max];
	}
	public void push(String data)
	{
		stack[++index] = data;
	}
	public String pop()
	{
		return stack[index--];
	}
	public String peep()
	{
		return stack[index];
	}
}
    public static void main(String[] args) {
        Calculator c = new Calculator();
    }
}

@88c8cb962613324d35fea0d129ab09d0@"
"r04546032","0","0","0","@88c8cb962613324d35fea0d129ab09d0@import java.io.FileReader;
import java.io.BufferedReader;
import java.net.URLDecoder;
import java.util.Arrays;
import java.util.ArrayList;

/**
 *
 * @author CHIN LUNG
 */
public class Calculator {

    public Double ans(String e)
    {
        	Stack s = new Stack(e.split("" "").length);
		String [] data =transfer(e);//傳入轉換的方法得到後置式的分割陣列
		for(int i = 0 ; i < data.length ; i++)//讀出後置式的各個運算元運算子來做計算
		{
			if(data[i] == null)break;
//是運算子時
		if(data[i].equals(""+"")||data[i].equals(""-"")||data[i].equals(""*"")||data[i].equals(""/""))
			{
				int b = Integer.parseInt(s.pop());//提出前面兩個儲存的值計算
				int a = Integer.parseInt(s.pop());
				if(data[i].equals(""+""))
					s.push(""""+(a+b));
				else if(data[i].equals(""-""))
					s.push(""""+(a-b));
				else if(data[i].equals(""*""))
					s.push(""""+(a*b));
				else if(data[i].equals(""/""))
					s.push(""""+(a/b));
			}
			else//是運算元時存入堆疊
				s.push(data[i]);

		}
                return Double.parseDouble(s.pop());
    }
	
	public  String [] transfer(String data)//轉換成後置式
	{
           
                Stack s = new Stack( data.split("" "").length);
		int index = 0;//為了將輸入的字串分割成陣列儲存用的索引值
		String [] ans = new String[data.length()];
		for(int i = 0 ; i < data.length() ;i++)
		{
                    String opr = returnSplit(data,i);//傳入分割方法取得各個運算元或運算子
			if(opr.length() > 1)i+= (opr.length()-1);//避免傳出的是兩位數以上I未對應
//是運算子的話看其優先順序 是疊入還是取出
		if(opr.equals(""+"")||opr.equals(""-"")||opr.equals(""*"")||opr.equals(""/"")||opr.equals(""^""))
			{
				while(s.index != -1 && priority(opr) <= priority(s.peep()))
				{
					ans[index++] = s.pop();
				}
				s.push(opr);
			}
			else if(opr.equals(""(""))
			{
				s.push(opr);
			}
			else if(opr.equals("")""))//取出運算子直到對應到""(""以後
			{
				String tempS ="""";
				while(s.index!= -1 &&!( (tempS = s.pop()).equals(""("")) )
				{
					ans[index++] = tempS;
				}
			}
			else
			{
				ans[index++] =opr;
			}
		}
		while(s.index!=-1)ans[index++] = s.pop();
		return ans;
	}
	public static String returnSplit(String data,int index)//傳回分割後的值
	{
		String thisString ="""";
		String s = String.valueOf(data.charAt(index));

		if(s.equals(""+"")||s.equals(""-"")||s.equals(""*"")||s.equals(""/"")||s.equals(""("")||s.equals("")"")||s.equals(""^""))
		{
			return s;//直接傳回運算子
		}
		else
		{
			do{
				thisString += s;
				if(index+1 ==data.length())break;
				s = String.valueOf(data.charAt(++index));//後面的位數式運算元就累加
			}while(!s.equals(""+"")&&!s.equals(""-"")&&!s.equals(""*"")&&!s.equals(""/"")&&!s.equals(""("")&&!s.equals("")"")&&!s.equals(""^""));
			return thisString;
		}
	}
	public static int priority(String opr)//運算子的優先順序
	{
		if(opr.equals(""^""))return 3;
		else if(opr.equals(""*"")||opr.equals(""/""))return 2;
		else if(opr.equals(""+"")||opr.equals(""-""))return 1;
		else return 0;
	}

class Stack
{
	String [] stack;
	public int index;
	Stack(int max)
	{
		index = -1; //無元素
		stack = new String[max];
	}
	public void push(String data)
	{
		stack[++index] = data;
	}
	public String pop()
	{
		return stack[index--];
	}
	public String peep()
	{
		return stack[index];
	}
}
    public static void main(String[] args) {
        Calculator c = new Calculator();
    }
}

@88c8cb962613324d35fea0d129ab09d0@"
"r04921094","10","0.1","105808","@f466d2b2eec9b92d9eadeafba146950a@//import edu.princeton.cs.algs4.*;

public class Calculator{
	Stack<String> operatorStack;
	Stack<Double> valueStack;
	public Calculator(){
		operatorStack = new Stack<String>();
		valueStack = new Stack<Double>();
	}

	public Double ans (String e){
		String[] input = e.split("" "");

		for(int i = 0; i < input.length; i++){
			if(input[i].equals(""("")){
			}
			else if (input[i].equals(""+"")) {
				operatorStack.push(input[i]);
			}
			else if(input[i].equals(""-"")){
				operatorStack.push(input[i]);
			}
			else if (input[i].equals(""*"")) {
				operatorStack.push(input[i]);
			}
			else if (input[i].equals(""/"")) {
				operatorStack.push(input[i]);
			}
			else if (input[i].equals("")"")) {
				String operator = operatorStack.pop();
				if(operator.equals(""+""))
					valueStack.push(valueStack.pop() + valueStack.pop());
				else if(operator.equals(""-"")){
					double a;
					double b;
					a = valueStack.pop();
					b = valueStack.pop();
					valueStack.push(b - a);
				}
				else if(operator.equals(""*""))
					valueStack.push(valueStack.pop() * valueStack.pop());
				else if(operator.equals(""/"")){
					double a;
					double b;
					a = valueStack.pop();
					b = valueStack.pop();
					valueStack.push(b / a);
				}
			}
			else{
				valueStack.push(Double.parseDouble(input[i]));
			}
		}

		return valueStack.pop();
	}
}
@f466d2b2eec9b92d9eadeafba146950a@"
"r04921094","0","0","0","@b1a283335242e8e17c441a03aa22d161@import edu.princeton.cs.algs4.*;

public class Calculator{
	Stack<String> operatorStack;
	Stack<Double> valueStack;
	public Calculator(){
		operatorStack = new Stack<String>();
		valueStack = new Stack<Double>();
	}

	public Double ans (String e){
		String[] input = e.split("" "");

		for(int i = 0; i < input.length; i++){
			if(input[i].equals(""("")){
			}
			else if (input[i].equals(""+"")) {
				operatorStack.push(input[i]);
			}
			else if(input[i].equals(""-"")){
				operatorStack.push(input[i]);
			}
			else if (input[i].equals(""*"")) {
				operatorStack.push(input[i]);
			}
			else if (input[i].equals(""/"")) {
				operatorStack.push(input[i]);
			}
			else if (input[i].equals("")"")) {
				String operator = operatorStack.pop();
				if(operator.equals(""+""))
					valueStack.push(valueStack.pop() + valueStack.pop());
				else if(operator.equals(""-"")){
					double a;
					double b;
					a = valueStack.pop();
					b = valueStack.pop();
					valueStack.push(b - a);
				}
				else if(operator.equals(""*""))
					valueStack.push(valueStack.pop() * valueStack.pop());
				else if(operator.equals(""/"")){
					double a;
					double b;
					a = valueStack.pop();
					b = valueStack.pop();
					valueStack.push(b / a);
				}
			}
			else{
				valueStack.push(Double.parseDouble(input[i]));
			}
		}

		return valueStack.pop();
	}
}
@b1a283335242e8e17c441a03aa22d161@"
"r04447001","10","0.101","105696","@e860fccd5f78ef0241a09df90ae55c8c@/*import edu.princeton.cs.algs4.Stack;
        /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author jerry
 */
public class Calculator {
    public Calculator(){
        
    }
    
    public double ans(String e){
        String[] data = e.split(""\\s+"");
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        for(int i = 0; i < data.length;i++){
        String s = data[i];
        if(s.equals(""("")) ;
        else if(s.equals(""+"")) ops.push(s);
        else if(s.equals(""*"")) ops.push(s);
        else if(s.equals(""-"")) ops.push(s);
        else if(s.equals(""/"")) ops.push(s);
        else if(s.equals("")""))
        {
            String op = ops.pop();
            if(op.equals(""+"")) vals.push(vals.pop() + vals.pop());
            else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
            else if (op.equals(""-"")){
                double second = vals.pop();
                double first = vals.pop();
                vals.push(first-second);
            }
             else if (op.equals(""/"")){
                double second = vals.pop();
                double first = vals.pop();
                vals.push(first/second);
            }           
        }
        else vals.push(Double.parseDouble(s));
        }
        return vals.pop();
    }
    /*public static void main(String[] args) {
        Calculator cct = new Calculator();
        String test = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "";
        System.out.print(cct.ans(test));
    }*/
}

@e860fccd5f78ef0241a09df90ae55c8c@"
"r04921094","10","0.1","105536","@1bcffb68350fb7bdb73bc766396bfef8@//import edu.princeton.cs.algs4.*;

public class Calculator{
	Stack<String> operatorStack;
	Stack<Double> valueStack;
	public Calculator(){
		operatorStack = new Stack<String>();
		valueStack = new Stack<Double>();
	}

	public Double ans (String e){
		String[] input = e.split("" "");

		for(int i = 0; i < input.length; i++){
			if(input[i].equals(""("")){
			}
			else if (input[i].equals(""+"")) {
				operatorStack.push(input[i]);
			}
			else if(input[i].equals(""-"")){
				operatorStack.push(input[i]);
			}
			else if (input[i].equals(""*"")) {
				operatorStack.push(input[i]);
			}
			else if (input[i].equals(""/"")) {
				operatorStack.push(input[i]);
			}
			else if (input[i].equals("")"")) {
				String operator = operatorStack.pop();
				if(operator.equals(""+""))
					valueStack.push(valueStack.pop() + valueStack.pop());
				else if(operator.equals(""-"")){
					double a;
					double b;
					a = valueStack.pop();
					b = valueStack.pop();
					valueStack.push(b - a);
				}
				else if(operator.equals(""*""))
					valueStack.push(valueStack.pop() * valueStack.pop());
				else if(operator.equals(""/"")){
					double a;
					double b;
					a = valueStack.pop();
					b = valueStack.pop();
					valueStack.push(b / a);
				}
			}
			else{
				valueStack.push(Double.parseDouble(input[i]));
			}
		}

		return valueStack.pop();
	}
}

class Stack<Item>{
	private Node first = null;

	private class Node{
		Item item;
		Node next;
	}

	public void push(Item item){
		Node oldfirst = first;
		first = new Node();
		first.item = item;
		first.next = oldfirst;
	}

	public Item pop(){
		Item item = first.item;
		first = first.next;
		return item;
	}
}
@1bcffb68350fb7bdb73bc766396bfef8@"
"r04447001","10","0.097","105472","@e860fccd5f78ef0241a09df90ae55c8c@/*import edu.princeton.cs.algs4.Stack;
        /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author jerry
 */
public class Calculator {
    public Calculator(){
        
    }
    
    public double ans(String e){
        String[] data = e.split(""\\s+"");
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        for(int i = 0; i < data.length;i++){
        String s = data[i];
        if(s.equals(""("")) ;
        else if(s.equals(""+"")) ops.push(s);
        else if(s.equals(""*"")) ops.push(s);
        else if(s.equals(""-"")) ops.push(s);
        else if(s.equals(""/"")) ops.push(s);
        else if(s.equals("")""))
        {
            String op = ops.pop();
            if(op.equals(""+"")) vals.push(vals.pop() + vals.pop());
            else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
            else if (op.equals(""-"")){
                double second = vals.pop();
                double first = vals.pop();
                vals.push(first-second);
            }
             else if (op.equals(""/"")){
                double second = vals.pop();
                double first = vals.pop();
                vals.push(first/second);
            }           
        }
        else vals.push(Double.parseDouble(s));
        }
        return vals.pop();
    }
    /*public static void main(String[] args) {
        Calculator cct = new Calculator();
        String test = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "";
        System.out.print(cct.ans(test));
    }*/
}

@e860fccd5f78ef0241a09df90ae55c8c@"
"r04447001","10","0.1","105616","@b6d84ccba781564381648a8fba0da852@/*import edu.princeton.cs.algs4.Stack;
        /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author jerry
 */
public class Calculator {
    public Calculator(){
    }
    
    
    public class Stack<Item>{
        
    private Node<Item> first;     // top of stack
    private int N;  
    private class Node<Item> {
        private Item item;
        private Node<Item> next;
    }
    public Stack() {
        first = null;
        N = 0;
    }
    public boolean isEmpty() {
        return first == null;
    }
    public int size() {
        return N;
    }
    public void push(Item item) {
        Node<Item> oldfirst = first;
        first = new Node<Item>();
        first.item = item;
        first.next = oldfirst;
        N++;
    }
    
    public Item pop() {
        Item item = first.item;        // save item to return
        first = first.next;            // delete first node
        N--;
        return item;                   // return the saved item
    }
    
    
    }
    public double ans(String e){
        String[] data = e.split(""\\s+"");
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        for(int i = 0; i < data.length;i++){
        String s = data[i];
        if(s.equals(""("")) ;
        else if(s.equals(""+"")) ops.push(s);
        else if(s.equals(""*"")) ops.push(s);
        else if(s.equals(""-"")) ops.push(s);
        else if(s.equals(""/"")) ops.push(s);
        else if(s.equals("")""))
        {
            String op = ops.pop();
            if(op.equals(""+"")) vals.push(vals.pop() + vals.pop());
            else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
            else if (op.equals(""-"")){
                double second = vals.pop();
                double first = vals.pop();
                vals.push(first-second);
            }
             else if (op.equals(""/"")){
                double second = vals.pop();
                double first = vals.pop();
                vals.push(first/second);
            }           
        }
        else vals.push(Double.parseDouble(s));
        }
        return vals.pop();
    }
    /*public static void main(String[] args) {
        Calculator cct = new Calculator();
        String test = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "";
        System.out.print(cct.ans(test));
    }*/
}


@b6d84ccba781564381648a8fba0da852@"
"r04921094","10","0.097","105472","@1bcffb68350fb7bdb73bc766396bfef8@//import edu.princeton.cs.algs4.*;

public class Calculator{
	Stack<String> operatorStack;
	Stack<Double> valueStack;
	public Calculator(){
		operatorStack = new Stack<String>();
		valueStack = new Stack<Double>();
	}

	public Double ans (String e){
		String[] input = e.split("" "");

		for(int i = 0; i < input.length; i++){
			if(input[i].equals(""("")){
			}
			else if (input[i].equals(""+"")) {
				operatorStack.push(input[i]);
			}
			else if(input[i].equals(""-"")){
				operatorStack.push(input[i]);
			}
			else if (input[i].equals(""*"")) {
				operatorStack.push(input[i]);
			}
			else if (input[i].equals(""/"")) {
				operatorStack.push(input[i]);
			}
			else if (input[i].equals("")"")) {
				String operator = operatorStack.pop();
				if(operator.equals(""+""))
					valueStack.push(valueStack.pop() + valueStack.pop());
				else if(operator.equals(""-"")){
					double a;
					double b;
					a = valueStack.pop();
					b = valueStack.pop();
					valueStack.push(b - a);
				}
				else if(operator.equals(""*""))
					valueStack.push(valueStack.pop() * valueStack.pop());
				else if(operator.equals(""/"")){
					double a;
					double b;
					a = valueStack.pop();
					b = valueStack.pop();
					valueStack.push(b / a);
				}
			}
			else{
				valueStack.push(Double.parseDouble(input[i]));
			}
		}

		return valueStack.pop();
	}
}

class Stack<Item>{
	private Node first = null;

	private class Node{
		Item item;
		Node next;
	}

	public void push(Item item){
		Node oldfirst = first;
		first = new Node();
		first.item = item;
		first.next = oldfirst;
	}

	public Item pop(){
		Item item = first.item;
		first = first.next;
		return item;
	}
}
@1bcffb68350fb7bdb73bc766396bfef8@"
"b02611019","10","0.106","105792","@877296b240b659fbf3441167dfbcdb1c@
import java.io.BufferedReader;
import java.io.FileReader;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author S410
 */
public class Calculator {

//    static double a;
//    static String push;
    static Stack<String> st;
//    public Calculator(int num){
//    }
    
    public static double Operate(String op, double a, double b) {
        if (op.equals(""+"")) {
            return (a + b);
        } else if (op.equals(""-"")) {
            return (a - b);
        } else if (op.equals(""*"")) {
            return (a * b);
        } else if (op.equals(""/"")) {
            return (a / b);
        } else {
            return 0;
        }
    }

    public static Double ans(String e) {
        String[] str = e.split("" "");
        st = new Stack<String>();
        double a;
        String push;
        for (int i = 0; i < str.length; i++) {
            st.push(str[i]);
            if (str[i].equals("")"")) {
                st.pop();
                a = Double.parseDouble(st.pop());
                push = (String.valueOf(Calculator.Operate(st.pop(), Double.parseDouble(st.pop()), a)));
//                StdOut.print(push);
                st.pop();
                st.push(push);
            }
        }
        return Double.parseDouble(st.pop());
    }

    public static void main(String[] args) throws Exception {
//        BufferedReader br = new BufferedReader(new FileReader(args[0]));
//        String read= br.readLine();
//        StdOut.print(ans(read));
        

    }
}

@877296b240b659fbf3441167dfbcdb1c@"
"r04945025","10","0.106","105840","@cae71de2f34fbe540dad3bcbe3ec0aaf@import java.io.FileReader;
import java.io.BufferedReader;

public class Calculator {

    private Stack<Double> numStk = new Stack<Double>();
    private Stack<String> opStk = new Stack<String>();
    private double result;

    private void parseStr(String in){
        in = in.replaceAll(""\\("", """");
        String[] exp = in.split(""\\s+"");

        for(String op: exp){
            //System.out.printf(""%s$\n"", op);
            if(!op.equals(""+"") && !op.equals(""-"") && !op.equals(""*"") && !op.equals(""/"") && !op.equals(""("") && !op.equals("")"") && !op.equals("""")){ numStk.push(Double.parseDouble(op)); }
            else if(!op.equals("")"")){ opStk.push(op); }
            else if(op.equals("")"")){
                Double a = numStk.pop();
                Double b = numStk.pop();
                String c = null;
                if(!opStk.isEmpty()) c = opStk.pop();
                //System.out.printf(""%1.3f\t%s\t%1.3f\n"", a, c, b);
                numStk.push(Calculator.calc(a, b, c));
            }
        }
        while(numStk.size() > 1){
            Double a = numStk.pop();
            Double b = numStk.pop();
            String c = null;
            if(!opStk.isEmpty()) c = opStk.pop();
            //System.out.printf(""%1.3f\t%s\t%1.3f\n"", a, c, b);
            numStk.push(Calculator.calc(a, b, c));
        }
        //System.out.printf(""%d\n"", numStk.size());
        result = numStk.pop();
    }

    public double ans(String in){
        parseStr(in);
        return result;
    }

    public static double calc(Double a, Double b, String op){
        if(op.equals(""+"")) { return (a + b); }
        if(op.equals(""-"")) { return (b - a); }
        if(op.equals(""*"")) { return (a * b); }
        if(op.equals(""/"")) { return (b / a); }
        return 0;
    }

    public static void main(String[] args) throws Exception{
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            /*int num = Integer.parseInt(br.readLine());
            Calculator cct = new Calculator(num);

            for(String in = br.readLine(); in != null; in = br.readLine()){
                double ans = cct.ans(in);
                System.out.printf(""%.2f\n"", ans);
            }*/
        }
    }
}

@cae71de2f34fbe540dad3bcbe3ec0aaf@"
"b02611019","10","0.092","105488","@aae874fff9de509b8022fc524636ab6e@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Stack;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author S410
 */
public class Calculator {

//    static double a;
//    static String push;
    static Stack<String> st;
//    public Calculator(int num){
//    }
    
    public static double Operate(String op, double a, double b) {
        if (op.equals(""+"")) {
            return (a + b);
        } else if (op.equals(""-"")) {
            return (a - b);
        } else if (op.equals(""*"")) {
            return (a * b);
        } else if (op.equals(""/"")) {
            return (a / b);
        } else {
            return 0;
        }
    }

    public static Double ans(String e) {
        String[] str = e.split("" "");
        st = new Stack<String>();
        double a;
        String push;
        for (int i = 0; i < str.length; i++) {
            st.push(str[i]);
            if (str[i].equals("")"")) {
                st.pop();
                a = Double.parseDouble(st.pop());
                push = (String.valueOf(Calculator.Operate(st.pop(), Double.parseDouble(st.pop()), a)));
//                StdOut.print(push);
                st.pop();
                st.push(push);
            }
        }
        return Double.parseDouble(st.pop());
    }

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        String read= br.readLine();
        StdOut.print(ans(read));
        

    }
}

@aae874fff9de509b8022fc524636ab6e@"
"r04945025","10","0.098","105472","@535464c17b5f8110cfc9897bc8fa6937@import java.util.Stack;
import java.io.FileReader;
import java.io.BufferedReader;

public class Calculator {

    private Stack<Double> numStk = new Stack<Double>();
    private Stack<String> opStk = new Stack<String>();
    private double result;

    private void parseStr(String in){
        in = in.replaceAll(""\\("", """");
        String[] exp = in.split(""\\s+"");

        for(String op: exp){
            //System.out.printf(""%s$\n"", op);
            if(!op.equals(""+"") && !op.equals(""-"") && !op.equals(""*"") && !op.equals(""/"") && !op.equals(""("") && !op.equals("")"") && !op.equals("""")){ numStk.push(Double.parseDouble(op)); }
            else if(!op.equals("")"")){ opStk.push(op); }
            else if(op.equals("")"")){
                Double a = numStk.pop();
                Double b = numStk.pop();
                String c = null;
                if(!opStk.isEmpty()) c = opStk.pop();
                //System.out.printf(""%1.3f\t%s\t%1.3f\n"", a, c, b);
                numStk.push(Calculator.calc(a, b, c));
            }
        }
        while(numStk.size() > 1){
            Double a = numStk.pop();
            Double b = numStk.pop();
            String c = null;
            if(!opStk.isEmpty()) c = opStk.pop();
            //System.out.printf(""%1.3f\t%s\t%1.3f\n"", a, c, b);
            numStk.push(Calculator.calc(a, b, c));
        }
        //System.out.printf(""%d\n"", numStk.size());
        result = numStk.pop();
    }

    public double ans(String in){
        parseStr(in);
        return result;
    }

    public static double calc(Double a, Double b, String op){
        if(op.equals(""+"")) { return (a + b); }
        if(op.equals(""-"")) { return (b - a); }
        if(op.equals(""*"")) { return (a * b); }
        if(op.equals(""/"")) { return (b / a); }
        return 0;
    }

    public static void main(String[] args) throws Exception{
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            /*int num = Integer.parseInt(br.readLine());
            Calculator cct = new Calculator(num);

            for(String in = br.readLine(); in != null; in = br.readLine()){
                double ans = cct.ans(in);
                System.out.printf(""%.2f\n"", ans);
            }*/
        }
    }
}

@535464c17b5f8110cfc9897bc8fa6937@"
"r04945025","10","0.096","105856","@cae71de2f34fbe540dad3bcbe3ec0aaf@import java.io.FileReader;
import java.io.BufferedReader;

public class Calculator {

    private Stack<Double> numStk = new Stack<Double>();
    private Stack<String> opStk = new Stack<String>();
    private double result;

    private void parseStr(String in){
        in = in.replaceAll(""\\("", """");
        String[] exp = in.split(""\\s+"");

        for(String op: exp){
            //System.out.printf(""%s$\n"", op);
            if(!op.equals(""+"") && !op.equals(""-"") && !op.equals(""*"") && !op.equals(""/"") && !op.equals(""("") && !op.equals("")"") && !op.equals("""")){ numStk.push(Double.parseDouble(op)); }
            else if(!op.equals("")"")){ opStk.push(op); }
            else if(op.equals("")"")){
                Double a = numStk.pop();
                Double b = numStk.pop();
                String c = null;
                if(!opStk.isEmpty()) c = opStk.pop();
                //System.out.printf(""%1.3f\t%s\t%1.3f\n"", a, c, b);
                numStk.push(Calculator.calc(a, b, c));
            }
        }
        while(numStk.size() > 1){
            Double a = numStk.pop();
            Double b = numStk.pop();
            String c = null;
            if(!opStk.isEmpty()) c = opStk.pop();
            //System.out.printf(""%1.3f\t%s\t%1.3f\n"", a, c, b);
            numStk.push(Calculator.calc(a, b, c));
        }
        //System.out.printf(""%d\n"", numStk.size());
        result = numStk.pop();
    }

    public double ans(String in){
        parseStr(in);
        return result;
    }

    public static double calc(Double a, Double b, String op){
        if(op.equals(""+"")) { return (a + b); }
        if(op.equals(""-"")) { return (b - a); }
        if(op.equals(""*"")) { return (a * b); }
        if(op.equals(""/"")) { return (b / a); }
        return 0;
    }

    public static void main(String[] args) throws Exception{
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            /*int num = Integer.parseInt(br.readLine());
            Calculator cct = new Calculator(num);

            for(String in = br.readLine(); in != null; in = br.readLine()){
                double ans = cct.ans(in);
                System.out.printf(""%.2f\n"", ans);
            }*/
        }
    }
}

@cae71de2f34fbe540dad3bcbe3ec0aaf@"
"r04447001","10","0.098","105744","@a87325cffe2ae8c13ebb4ee3f79d65b6@//import edu.princeton.cs.algs4.Stack;
        /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author jerry
 */
public class Calculator {
    public Calculator(){
    }
    public double ans(String e){
        String[] data = e.split(""\\s+"");
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        for(int i = 0; i < data.length;i++){
        String s = data[i];
        if(s.equals(""("")) ;
        else if(s.equals(""+"")) ops.push(s);
        else if(s.equals(""*"")) ops.push(s);
        else if(s.equals(""-"")) ops.push(s);
        else if(s.equals(""/"")) ops.push(s);
        else if(s.equals("")""))
        {
            String op = ops.pop();
            if(op.equals(""+"")) vals.push(vals.pop() + vals.pop());
            else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
            else if (op.equals(""-"")){
                double second = vals.pop();
                double first = vals.pop();
                vals.push(first-second);
            }
             else if (op.equals(""/"")){
                double second = vals.pop();
                double first = vals.pop();
                vals.push(first/second);
            }           
        }
        else vals.push(Double.parseDouble(s));
        }
        return vals.pop();
    }
    /*public static void main(String[] args) {
        Calculator cct = new Calculator();
        String test = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "";
        System.out.print(cct.ans(test));
    }*/
}


@a87325cffe2ae8c13ebb4ee3f79d65b6@"
"r04921094","10","0.096","104288","@70152f511cb1e107bdc5164b85f46c49@//import edu.princeton.cs.algs4.*;

public class Calculator{
	Stack<String> operatorStack;
	Stack<Double> valueStack;
	public Calculator(){
		operatorStack = new Stack<String>();
		valueStack = new Stack<Double>();
	}

	public Double ans (String e){
		String[] input = e.split("" "");

		for(int i = 0; i < input.length; i++){
			if(input[i].equals(""("")){
			}
			else if (input[i].equals(""+"")) {
				operatorStack.push(input[i]);
			}
			else if(input[i].equals(""-"")){
				operatorStack.push(input[i]);
			}
			else if (input[i].equals(""*"")) {
				operatorStack.push(input[i]);
			}
			else if (input[i].equals(""/"")) {
				operatorStack.push(input[i]);
			}
			else if (input[i].equals("")"")) {
				String operator = operatorStack.pop();
				if(operator.equals(""+""))
					valueStack.push(valueStack.pop() + valueStack.pop());
				else if(operator.equals(""-"")){
					double a;
					double b;
					a = valueStack.pop();
					b = valueStack.pop();
					valueStack.push(b - a);
				}
				else if(operator.equals(""*""))
					valueStack.push(valueStack.pop() * valueStack.pop());
				else if(operator.equals(""/"")){
					double a;
					double b;
					a = valueStack.pop();
					b = valueStack.pop();
					valueStack.push(b / a);
				}
			}
			else{
				valueStack.push(Double.parseDouble(input[i]));
			}
		}

		return valueStack.pop();
	}
}

/*class Stack<Item>{
	private Node first = null;

	private class Node{
		Item item;
		Node next;
	}

	public void push(Item item){
		Node oldfirst = first;
		first = new Node();
		first.item = item;
		first.next = oldfirst;
	}

	public Item pop(){
		Item item = first.item;
		first = first.next;
		return item;
	}
}*/
@70152f511cb1e107bdc5164b85f46c49@"
"b02611019","10","0.097","105504","@aae874fff9de509b8022fc524636ab6e@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Stack;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author S410
 */
public class Calculator {

//    static double a;
//    static String push;
    static Stack<String> st;
//    public Calculator(int num){
//    }
    
    public static double Operate(String op, double a, double b) {
        if (op.equals(""+"")) {
            return (a + b);
        } else if (op.equals(""-"")) {
            return (a - b);
        } else if (op.equals(""*"")) {
            return (a * b);
        } else if (op.equals(""/"")) {
            return (a / b);
        } else {
            return 0;
        }
    }

    public static Double ans(String e) {
        String[] str = e.split("" "");
        st = new Stack<String>();
        double a;
        String push;
        for (int i = 0; i < str.length; i++) {
            st.push(str[i]);
            if (str[i].equals("")"")) {
                st.pop();
                a = Double.parseDouble(st.pop());
                push = (String.valueOf(Calculator.Operate(st.pop(), Double.parseDouble(st.pop()), a)));
//                StdOut.print(push);
                st.pop();
                st.push(push);
            }
        }
        return Double.parseDouble(st.pop());
    }

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        String read= br.readLine();
        StdOut.print(ans(read));
        

    }
}

@aae874fff9de509b8022fc524636ab6e@"
"r04921051","10","0.097","105824","@5fc0a44c4040c941fbc561a15dd805b5@
public class Calculator {
    
    
    public Double ans (String e) {        
        String[] input = e.split("" "");
        Stack<String> ops = new Stack<String>();        
        Stack<Double> vals = new Stack<Double>();
        
        for(int i =0;i < input.length;i++) {
        String s = input[i];
        if (s.equals(""("")) ;
        else if (s.equals(""+"") || s.equals(""-"")) ops.push(s);
        else if (s.equals(""*"") || s.equals(""/"")) ops.push(s);
        else if (s.equals("")""))
        {
         String op = ops.pop();
         if (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
         else if (op.equals(""-"")) {
             double a = vals.pop();             
             vals.push(vals.pop() - a);
         }
         else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
         else if (op.equals(""/"")) {
             double a = vals.pop();             
             vals.push(vals.pop() / a);
         }
        }
        else vals.push(Double.parseDouble(s));
        }
        double result = vals.pop();        
        
        return result;
    }

    
    
}


@5fc0a44c4040c941fbc561a15dd805b5@"
"b03611023","0","0.98","105792","@75b122b6d19ddf4555cb892f45f6c609@import java.io.FileReader;
import java.io.BufferedReader;

public class Calculator {
    public static  Double ans(String e){
        Stack<String> ops = new Stack<>();
        Stack<Double> val = new Stack<>();
        int k = 0;
        int i = 0;
        while(k!=-1){
       k = e.indexOf("" "", ++k);
       
        i++;
    }
        i--;
        k = 0;
       String[] z = e.split("" "");
        
        
        while(k<i){
            
           
            if(z[k].equals(""("")){
               // System.out.println(z);
            }
            else if(z[k].equals("" "")){
               // System.out.println(z[k]);
            }
            else if(z[k].equals(""+"")){
               // System.out.println(z);
                ops.push(z[k]);
            }
            else if(z[k].equals(""-"")){
               // System.out.println(z);
                ops.push(z[k]);
            }
            else if(z[k].equals(""*"")){
               // System.out.println(z);
                ops.push(z[k]);
            }
            else if(z[k].equals(""/"")){
               // System.out.println(z);
                ops.push(z[k]);
            }
            else if(z[k].equals("")"")){
                // System.out.println(z);
                double a,b ;
                b = val.pop();
                a = val.pop();
                String op = ops.pop();
                if(op.equals(""+""))   val.push(a+b);
                if(op.equals(""-""))   val.push(a-b);
                if(op.equals(""*""))   val.push(a*b);
                if(op.equals(""/""))   val.push(a/b);
                
            }
            else {
                // System.out.println(z);
                val.push(Double.parseDouble(z[k]));
            }
            
            k++;
            
            
        }
        
        
        
        
        
        
        return val.pop();
    
    }

public static void main(String[] args){
    String j = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "";
    
    int k = 0;
    int i = 0;
    int d = j.length();
    
    i--;
    k = j.length()-i;
    //System.out.print(i);
    //String k = j.substring(0, 1);
    //System.out.println(k);
  double x =  ans(j);
    System.out.println(x);
    //System.out.print(ans(j));
   // System.out.println(j.substring(1, 3));
}    
    
}

@75b122b6d19ddf4555cb892f45f6c609@"
"b03611023","0","0.98","105792","@f845c5ae3434f5c4f200ed31d1a3d047@import java.io.FileReader;
import java.io.BufferedReader;

public class Calculator {
    public  Double ans(String e){
        Stack<String> ops = new Stack<>();
        Stack<Double> val = new Stack<>();
        int k = 0;
        int i = 0;
        while(k!=-1){
       k = e.indexOf("" "", ++k);
       
        i++;
    }
        i--;
        k = 0;
       String[] z = e.split("" "");
        
        
        while(k<i){
            
           
            if(z[k].equals(""("")){
               // System.out.println(z);
            }
            else if(z[k].equals("" "")){
               // System.out.println(z[k]);
            }
            else if(z[k].equals(""+"")){
               // System.out.println(z);
                ops.push(z[k]);
            }
            else if(z[k].equals(""-"")){
               // System.out.println(z);
                ops.push(z[k]);
            }
            else if(z[k].equals(""*"")){
               // System.out.println(z);
                ops.push(z[k]);
            }
            else if(z[k].equals(""/"")){
               // System.out.println(z);
                ops.push(z[k]);
            }
            else if(z[k].equals("")"")){
                // System.out.println(z);
                double a,b ;
                b = val.pop();
                a = val.pop();
                String op = ops.pop();
                if(op.equals(""+""))   val.push(a+b);
                if(op.equals(""-""))   val.push(a-b);
                if(op.equals(""*""))   val.push(a*b);
                if(op.equals(""/""))   val.push(a/b);
                
            }
            else {
                // System.out.println(z);
                val.push(Double.parseDouble(z[k]));
            }
            
            k++;
            
            
        }
        
        
        
        
        
        
        return val.pop();
    
    }

public static void main(String[] args){
    String j = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "";
    
    int k = 0;
    int i = 0;
    int d = j.length();
    
    i--;
    k = j.length()-i;
    //System.out.print(i);
    //String k = j.substring(0, 1);
    //System.out.println(k);
  double x =  ans(j);
    System.out.println(x);
    //System.out.print(ans(j));
   // System.out.println(j.substring(1, 3));
}    
    
}

@f845c5ae3434f5c4f200ed31d1a3d047@"
"b03611023","0","1","104624","@9d63f109b70f101d2b4c329ae8333f03@import java.io.FileReader;
import java.io.BufferedReader;

public class Calculator {
    public  Double ans(String e){
        Stack<String> ops = new Stack<>();
        Stack<Double> val = new Stack<>();
        int k = 0;
        int i = 0;
        while(k!=-1){
       k = e.indexOf("" "", ++k);
       
        i++;
    }
        i--;
        k = 0;
       String[] z = e.split("" "");
        
        
        while(k<i){
            
           
            if(z[k].equals(""("")){
               // System.out.println(z);
            }
            else if(z[k].equals("" "")){
               // System.out.println(z[k]);
            }
            else if(z[k].equals(""+"")){
               // System.out.println(z);
                ops.push(z[k]);
            }
            else if(z[k].equals(""-"")){
               // System.out.println(z);
                ops.push(z[k]);
            }
            else if(z[k].equals(""*"")){
               // System.out.println(z);
                ops.push(z[k]);
            }
            else if(z[k].equals(""/"")){
               // System.out.println(z);
                ops.push(z[k]);
            }
            else if(z[k].equals("")"")){
                // System.out.println(z);
                double a,b ;
                b = val.pop();
                a = val.pop();
                String op = ops.pop();
                if(op.equals(""+""))   val.push(a+b);
                if(op.equals(""-""))   val.push(a-b);
                if(op.equals(""*""))   val.push(a*b);
                if(op.equals(""/""))   val.push(a/b);
                
            }
            else {
                // System.out.println(z);
                val.push(Double.parseDouble(z[k]));
            }
            
            k++;
            
            
        }
        
        
        
        
        
        
        return val.pop();
    
    }

public static void main(String[] args){
    String j = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "";
    
    int k = 0;
    int i = 0;
    int d = j.length();
    
    i--;
    k = j.length()-i;
    //System.out.print(i);
    //String k = j.substring(0, 1);
    //System.out.println(k);
  //double x =  ans(j);
    //System.out.println(x);
    //System.out.print(ans(j));
   // System.out.println(j.substring(1, 3));
}    
    
}

@9d63f109b70f101d2b4c329ae8333f03@"
"b03611023","0","1","105664","@1600f153c73e325ef9e09cbe6826fc4e@import java.io.FileReader;
import java.io.BufferedReader;

public class Calculator {
    public  Double ans(String e){
        Stack<String> ops = new Stack<>();
        Stack<Double> val = new Stack<>();
        int k = 0;
        int i = 0;
        while(k!=-1){
       k = e.indexOf("" "", ++k);
       
        i++;
    }
        i--;
        k = 0;
       String[] z = e.split("" "");
        
        
        while(k<i){
            
           
            if(z[k].equals(""("")){
               
            }
            else if(z[k].equals("" "")){
               
            }
            else if(z[k].equals(""+"")){
             
                ops.push(z[k]);
            }
            else if(z[k].equals(""-"")){
              
                ops.push(z[k]);
            }
            else if(z[k].equals(""*"")){
              
                ops.push(z[k]);
            }
            else if(z[k].equals(""/"")){
              
                ops.push(z[k]);
            }
            else if(z[k].equals("")"")){
               
                double a,b ;
                b = val.pop();
                a = val.pop();
                String op = ops.pop();
                if(op.equals(""+""))   val.push(a+b);
                if(op.equals(""-""))   val.push(a-b);
                if(op.equals(""*""))   val.push(a*b);
                if(op.equals(""/""))   val.push(a/b);
                
            }
            else {
               
                val.push(Double.parseDouble(z[k]));
            }
            
            k++;
            
            
        }
        
        
        
        
        
        
        return val.pop();
    
    }

/*public static void main(String[] args){
    String j = ""( ( ( 3 + ( 12 * ( 5 + 2 ) ) ) - 18 ) + ( 5 / 5 ) ) "";
    
    int k = 0;
    int i = 0;
    int d = j.length();
    
    i--;
    k = j.length()-i;
    //System.out.print(i);
    //String k = j.substring(0, 1);
    //System.out.println(k);
  //double x =  ans(j);
  // System.out.println(x);
    //System.out.print(ans(j));
   // System.out.println(j.substring(1, 3));
}    */
    
}

@1600f153c73e325ef9e09cbe6826fc4e@"
"r04546032","0","0","0","@ef5e4df3877649b63ecd45941a89f160@import java.io.BufferedReader;
import java.io.FileReader;
import java.net.URLDecoder;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.LinkedList;

/**
 *
 * @author CHIN LUNG
 */
public class Calculator {
    
    public Double ans(String e)
    {
       Stack<String> ops = new Stack<String>();
       Stack<Double> vals = new Stack<Double>();
       String data[] = new String[e.split("" "").length];//將得到的字串先存下來
      
       //先將前序轉為後序
       for(int i = 0; i < data.length;i++)
       {
               if(data[i].equals(""(""));
               else if(data[i].equals(""+"")) ops.push(data[i]);
               else if(data[i].equals(""-"")) ops.push(data[i]);
               else if(data[i].equals(""*"")) ops.push(data[i]);
               else if(data[i].equals(""/"")) ops.push(data[i]);
               else if(data[i].equals("")""))
               {
                  String op = ops.pop();
                  if(op.equals(""+"")) vals.push(vals.pop() + vals.pop());
                  else if(op.equals(""-"")) vals.push(vals.pop() - vals.pop());
                  else if(op.equals(""*"")) vals.push(vals.pop() * vals.pop());
                  else if(op.equals(""/"")) vals.push(vals.pop() / vals.pop());
               }
               else vals.push(Double.parseDouble(data[i]));
           }
		return vals.pop();
    }
   
    public int priority(String op)
    {
        switch(op)
        {
            case""("":
                return 1;
            case""+"":
            case""-"":
                return 2;
            case ""*"":
            case""/"":
                return 3;
            default : return 0;    
        }
    }
   
    public static void main(String[] args) {
        Calculator c = new Calculator();
  }

}

@ef5e4df3877649b63ecd45941a89f160@"
"r04546032","0","0","0","@f76fe06a20a1ee8d4970a07679d6f651@import java.io.BufferedReader;
import java.io.FileReader;
import java.net.URLDecoder;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.LinkedList;

/**
 *
 * @author CHIN LUNG
 */
public class Calculator {
    
    public Double ans(String e)
    {
       Stack<String> ops = new Stack<String>();
       Stack<Double> vals = new Stack<Double>();
       String data[] = new String[e.split("" "").length];//將得到的字串先存下來
       for(int i = 0; i < data.length;i++)
       {
           data[i] = String.valueOf(e.split("" ""));
       }
       //先將前序轉為後序                                                                                                                   
       for(int i = 0; i < data.length;i++)
       {
               if(data[i].equals(""(""));
               else if(data[i].equals(""+"")) ops.push(data[i]);
               else if(data[i].equals(""-"")) ops.push(data[i]);
               else if(data[i].equals(""*"")) ops.push(data[i]);
               else if(data[i].equals(""/"")) ops.push(data[i]);
               else if(data[i].equals("")""))
               {
                  String op = ops.pop();
                  if(op.equals(""+"")) vals.push(vals.pop() + vals.pop());
                  else if(op.equals(""-"")) vals.push(vals.pop() - vals.pop());
                  else if(op.equals(""*"")) vals.push(vals.pop() * vals.pop());
                  else if(op.equals(""/"")) vals.push(vals.pop() / vals.pop());
               }
               else vals.push(Double.parseDouble(data[i]));
           }
		return vals.pop();
    }
   
//    public int priority(String op)
//    {
//        switch(op)
//        {
//            case""("":
//                return 1;
//            case""+"":
//            case""-"":
//                return 2;
//            case ""*"":
//            case""/"":
//                return 3;
//            default : return 0;    
//        }
//    }
   
    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(""input.txt""))) {
            String number = br.readLine();
            Calculator cct = new Calculator();
            System.out.println(cct.ans(number));
  }
    }
}

@f76fe06a20a1ee8d4970a07679d6f651@"
"r04546032","3","1","105792","@b41859505ea80bb4430bcdf7d3052ef1@import java.io.BufferedReader;
import java.io.FileReader;
import java.net.URLDecoder;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.LinkedList;

/**
 *
 * @author CHIN LUNG
 */
public class Calculator {
    
    public Double ans(String e)
    {
       Stack<String> ops = new Stack<String>();
       Stack<Double> vals = new Stack<Double>();
       String data[] = new String[e.split("" "").length];//將得到的字串先存下來
        data =e.split("" "").clone();
//       for(int i = 0; i < data.length;i++)
//       {
//           data[i] = e.split("" "").toString();
//       }
       //先將前序轉為後序                                                                                                                   
       for(int i = 0; i < data.length;i++)
       {
               if(data[i].equals(""(""));
               else if(data[i].equals(""+"")) ops.push(data[i]);
               else if(data[i].equals(""-"")) ops.push(data[i]);
               else if(data[i].equals(""*"")) ops.push(data[i]);
               else if(data[i].equals(""/"")) ops.push(data[i]);
               else if(data[i].equals("")""))
               {
                  String op = ops.pop();
                  if(op.equals(""+"")) vals.push(vals.pop() + vals.pop());
                  else if(op.equals(""-"")) vals.push(vals.pop() - vals.pop());
                  else if(op.equals(""*"")) vals.push(vals.pop() * vals.pop());
                  else if(op.equals(""/"")) vals.push(vals.pop() / vals.pop());
               }
               else vals.push(Double.parseDouble(data[i]));
           }
		return vals.pop();
    }
   
//    public int priority(String op)
//    {
//        switch(op)
//        {
//            case""("":
//                return 1;
//            case""+"":
//            case""-"":
//                return 2;
//            case ""*"":
//            case""/"":
//                return 3;
//            default : return 0;    
//        }
//    }
   
    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(""input.txt""))) {
            String number = br.readLine();
            Calculator cct = new Calculator();
            System.out.println(cct.ans(number));
        }
    }
}

@b41859505ea80bb4430bcdf7d3052ef1@"
"b03611023","0","0.8","105776","@96dc650812868e718dfb54cdfe7a3628@


public class Calculator {
    public  Double ans(String e){
        Stack<String> ops = new Stack<>();
        Stack<Double> val = new Stack<>();
        int k = 0;
        int i = 0;
        while(k!=-1){
       k = e.indexOf("" "", ++k);
       
        i++;
    }
        i--;
        k = 0;
       String[] z = e.split("" "");
        
        
        while(k<i){
            
           
            if(z[k].equals(""("")){
               ops.push(z[k]);
            }
            else if(z[k].equals("" "")){
               
            }
            else if(z[k].equals(""+"")){
             
                ops.push(z[k]);
            }
            else if(z[k].equals(""-"")){
              
                ops.push(z[k]);
            }
            else if(z[k].equals(""*"")){
              
                ops.push(z[k]);
            }
            else if(z[k].equals(""/"")){
              
                ops.push(z[k]);
            }
            else if(z[k].equals("")"")){
               String op = """";
              int p = 0;
               while(true){
                double a,b ;
                 op = ops.pop();
                 if(op.equals(""("")) break;
                b = val.pop();
                a = val.pop();
                
                if(op.equals(""+""))   val.push(a+b);
                if(op.equals(""-""))   val.push(a-b);
                if(op.equals(""*""))   val.push(a*b);
                if(op.equals(""/""))   val.push(a/b);
               }  
            }
            else {
               
                val.push(Double.parseDouble(z[k]));
            }
            
            k++;
            
            
        }
        
       
        double a = val.pop();
        
        
        return a;
    
    }  
      public static void main(String[] args){
         // System.out.print(10);
        //  String j = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "";
        

      }
}


@96dc650812868e718dfb54cdfe7a3628@"
"r04921104","10","0.098","105824","@21775a298ccedc97bc76ca06beab785c@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author daf
 */
//import edu.princeton.cs.algs4.Stack;

public class Calculator {
    
    public Double ans(String e){
        //e = ""( ( ( ( 1 + ( 12 * 7 ) ) - ( 3 * 12 ) ) + ( 4 / 5 ) ) - ( 9 - 5 ) )"";
        Stack<String> ops = new Stack<String>(); 
        Stack<Double> vals = new Stack<Double>();
        String[] r = e.split(""\\s+"");
        
        for(int i = 0; i<r.length; i++){
            if(r[i].equals(""("")) ;
            else if(r[i].equals(""+"")) ops.push(r[i]);
            else if(r[i].equals(""-"")) ops.push(r[i]);
            else if(r[i].equals(""*"")) ops.push(r[i]);
            else if(r[i].equals(""/"")) ops.push(r[i]);
            else if (r[i].equals("")"")) {
                String op = ops.pop();
                double b = vals.pop();
                double a = vals.pop();
                if(op.equals(""+"")) vals.push(a+b);
                else if(op.equals(""-"")) vals.push(a-b);
                else if(op.equals(""*"")) vals.push(a*b);
                else if(op.equals(""/"")) vals.push(a/b);
            }
            else {
                vals.push(Double.parseDouble(r[i]));
            } 
        }
            
        return vals.pop();
    }
    
    public static void main(String[] args){
        Calculator cal = new Calculator();
        StdOut.println(cal.ans(""""));
    }
}

@21775a298ccedc97bc76ca06beab785c@"
"b03611023","0","1","105824","@f029d9a9d7b04ab107754ecf407d2acd@


public class Calculator {
    public  Double ans(String e){
        Stack<String> ops = new Stack<>();
        Stack<Double> val = new Stack<>();
        Stack<Double> buffer = new Stack<>();
        Stack<String> opb = new Stack<>();
         int k = 0;
        int i = 0;
        while(k!=-1){
       k = e.indexOf("" "", ++k);
       
        i++;
    }
        i--;
        k = 0;
       String[] z = e.split("" "");
        
        
        while(k<i){
            
           
            if(z[k].equals(""("")){
               ops.push(z[k]);
            }
            else if(z[k].equals("" "")){
               
            }
            else if(z[k].equals(""+"")){
             
                ops.push(z[k]);
            }
            else if(z[k].equals(""-"")){
              
                ops.push(z[k]);
            }
            else if(z[k].equals(""*"")){
              
                ops.push(z[k]);
            }
            else if(z[k].equals(""/"")){
              
                ops.push(z[k]);
            }
            else if(z[k].equals("")"")){
               
            int y = 0;       
            String op = """";
              
               while(true){  
                // buffer.push(val.pop());
                  
                 op = ops.pop();
                 if(op.equals(""("")) break;
                 if(op.equals(""+"")){
                     buffer.push(val.pop());
                     opb.push(op);
                 }
                 if(op.equals(""-"")){
                     buffer.push(val.pop());
                     opb.push(op);
                 }
                 if(op.equals(""*"")){
                  double b = val.pop();
                  double a = val.pop();
                  
                  val.push(a*b);
                 }
                 if(op.equals(""/"")){
                  double b = val.pop();
                  double a = val.pop();
                  
                  val.push(a/b);
                 }
               // opb.push(op);
               // y++;
                
               /* if(op.equals(""+""))   val.push(a+b);
                if(op.equals(""-""))   val.push(a-b);
                if(op.equals(""*""))   val.push(a*b);
                if(op.equals(""/""))   val.push(a/b);*/
               } 
               buffer.push(val.pop());
               while(!opb.isEmpty()){
                   String op2 = """";
                   op2 = opb.pop();
                 double  a = buffer.pop();
                 double  b = buffer.pop();
                 if(op2.equals(""+""))   buffer.push(a+b);
                if(op2.equals(""-""))   buffer.push(a-b);
               }
               val.push(buffer.pop());
            }
            else {
               
                val.push(Double.parseDouble(z[k]));
            }
            
            k++;
            
            
        }
        
       
        double a = val.pop();
        
        
        return a;
    
    }  
      public static void main(String[] args){
         // System.out.print(10);
        //  String j = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "";
        

      }
}


@f029d9a9d7b04ab107754ecf407d2acd@"
"r04921044","0","0","0","@f7bfc7d024151f91c7d2f665be09cf3f@import java.util.*;

public class Calculator {
    private class Expression {
        public String value;
        public Expression left;
        public Expression right;
        public char operator;

        public double evaluate() {
            if (value != null)
                return Double.valueOf(value);

            double lValue = left.evaluate();
            double rValue = right.evaluate();
            switch (operator) {
                case '+':
                    return lValue + rValue;

                case '-':
                    return lValue - rValue;

                case '*':
                    return lValue * rValue;

                case '/':
                    return lValue / rValue;

                default:
                    return 0.f;
            }
        };
    }

    public Double ans(String s) {
        String[] _operands = s.split("" "");
        List<String> operands = Arrays.asList(_operands);
        Stack<Expression> expressions = new Stack<> ();
        Expression expression = new Expression();

        for (int i=0; i<operands.size(); ++i) {
            String operand = operands.get(i);
            switch (operand.charAt(0)) {
                case '(':
                    Expression newExpression = new Expression();
                    if (!expressions.empty()) {
                        if (expressions.peek().left == null) {
                            expressions.peek().left = newExpression;
                        }
                        else {
                            expressions.peek().right = newExpression;
                        }
                    }
                    expressions.add(newExpression);
                    break;

                case '+':
                case '-':
                case '*':
                case '/':
                    expressions.peek().operator = operand.charAt(0);
                    break;

                case ')':
                    expression = expressions.pop();
                    break;

                default:
                    if (expressions.peek().left == null) {
                        expressions.peek().left = new Expression();
                        expressions.peek().left.value = operand;
                    }
                    else {
                        expressions.peek().right = new Expression();
                        expressions.peek().right.value = operand;
                    }
                    break;
            }
        }

        return expression.evaluate();
    }
}

@f7bfc7d024151f91c7d2f665be09cf3f@"
"r04921044","0","0","0","@bcca5687f1ebc85ded43dc18b16ccacb@import edu.princeton.cs.algs4.*;

public class Calculator {
    private class Expression {
        public String value;
        public Expression left;
        public Expression right;
        public char operator;

        public double evaluate() {
            if (value != null)
                return Double.valueOf(value);

            double lValue = left.evaluate();
            double rValue = right.evaluate();
            switch (operator) {
                case '+':
                    return lValue + rValue;

                case '-':
                    return lValue - rValue;

                case '*':
                    return lValue * rValue;

                case '/':
                    return lValue / rValue;

                default:
                    return 0.f;
            }
        };
    }

    public Double ans(String s) {
        String[] _operands = s.split("" "");
        List<String> operands = Arrays.asList(_operands);
        Stack<Expression> expressions = new Stack<> ();
        Expression expression = new Expression();

        for (int i=0; i<operands.size(); ++i) {
            String operand = operands.get(i);
            switch (operand.charAt(0)) {
                case '(':
                    Expression newExpression = new Expression();
                    if (!expressions.isEmpty()) {
                        if (expressions.peek().left == null) {
                            expressions.peek().left = newExpression;
                        }
                        else {
                            expressions.peek().right = newExpression;
                        }
                    }
                    expressions.add(newExpression);
                    break;

                case '+':
                case '-':
                case '*':
                case '/':
                    expressions.peek().operator = operand.charAt(0);
                    break;

                case ')':
                    expression = expressions.pop();
                    break;

                default:
                    if (expressions.peek().left == null) {
                        expressions.peek().left = new Expression();
                        expressions.peek().left.value = operand;
                    }
                    else {
                        expressions.peek().right = new Expression();
                        expressions.peek().right.value = operand;
                    }
                    break;
            }
        }

        return expression.evaluate();
    }
}

@bcca5687f1ebc85ded43dc18b16ccacb@"
"r04921044","0","0","0","@1c064304a3978a90c6221f825c0d4617@import java.util.List;
import java.util.Arrays;
import edu.princeton.cs.algs4.*;

public class Calculator {
    private class Expression {
        public String value;
        public Expression left;
        public Expression right;
        public char operator;

        public double evaluate() {
            if (value != null)
                return Double.valueOf(value);

            double lValue = left.evaluate();
            double rValue = right.evaluate();
            switch (operator) {
                case '+':
                    return lValue + rValue;

                case '-':
                    return lValue - rValue;

                case '*':
                    return lValue * rValue;

                case '/':
                    return lValue / rValue;

                default:
                    return 0.f;
            }
        };
    }

    public Double ans(String s) {
        String[] _operands = s.split("" "");
        List<String> operands = Arrays.asList(_operands);
        Stack<Expression> expressions = new Stack<> ();
        Expression expression = new Expression();

        for (int i=0; i<operands.size(); ++i) {
            String operand = operands.get(i);
            switch (operand.charAt(0)) {
                case '(':
                    Expression newExpression = new Expression();
                    if (!expressions.isEmpty()) {
                        if (expressions.peek().left == null) {
                            expressions.peek().left = newExpression;
                        }
                        else {
                            expressions.peek().right = newExpression;
                        }
                    }
                    expressions.add(newExpression);
                    break;

                case '+':
                case '-':
                case '*':
                case '/':
                    expressions.peek().operator = operand.charAt(0);
                    break;

                case ')':
                    expression = expressions.pop();
                    break;

                default:
                    if (expressions.peek().left == null) {
                        expressions.peek().left = new Expression();
                        expressions.peek().left.value = operand;
                    }
                    else {
                        expressions.peek().right = new Expression();
                        expressions.peek().right.value = operand;
                    }
                    break;
            }
        }

        return expression.evaluate();
    }
}

@1c064304a3978a90c6221f825c0d4617@"
"r04921044","5","0.49","105808","@75014c5db1f3182f2595b40e25efb26b@import java.util.List;
import java.util.Arrays;

public class Calculator {
    private class Expression {
        public String value;
        public Expression left;
        public Expression right;
        public char operator;

        public double evaluate() {
            if (value != null)
                return Double.valueOf(value);

            double lValue = left.evaluate();
            double rValue = right.evaluate();
            switch (operator) {
                case '+':
                    return lValue + rValue;

                case '-':
                    return lValue - rValue;

                case '*':
                    return lValue * rValue;

                case '/':
                    return lValue / rValue;

                default:
                    return 0.f;
            }
        };
    }

    public Double ans(String s) {
        String[] _operands = s.split("" "");
        List<String> operands = Arrays.asList(_operands);
        Stack<Expression> expressions = new Stack<> ();
        Expression expression = new Expression();

        for (int i=0; i<operands.size(); ++i) {
            String operand = operands.get(i);
            switch (operand.charAt(0)) {
                case '(':
                    Expression newExpression = new Expression();
                    if (!expressions.isEmpty()) {
                        if (expressions.peek().left == null) {
                            expressions.peek().left = newExpression;
                        }
                        else {
                            expressions.peek().right = newExpression;
                        }
                    }
                    expressions.push(newExpression);
                    break;

                case '+':
                case '-':
                case '*':
                case '/':
                    expressions.peek().operator = operand.charAt(0);
                    break;

                case ')':
                    expression = expressions.pop();
                    break;

                default:
                    if (expressions.peek().left == null) {
                        expressions.peek().left = new Expression();
                        expressions.peek().left.value = operand;
                    }
                    else {
                        expressions.peek().right = new Expression();
                        expressions.peek().right.value = operand;
                    }
                    break;
            }
        }

        return expression.evaluate();
    }
}

@75014c5db1f3182f2595b40e25efb26b@"
"b03611023","0","0.96","105808","@9e6967b19d398150c100bdc6bff60de0@


public class Calculator {
    public  Double ans(String e){
        Stack<String> ops = new Stack<>();
        Stack<Double> val = new Stack<>();
        Stack<Double> buffer = new Stack<>();
        Stack<String> opb = new Stack<>();
         int k = 0;
        int i = 0;
        while(k!=-1){
       k = e.indexOf("" "", ++k);
       
        i++;
    }
        i--;
        k = 0;
       String[] z = e.split("" "");
        
        
        while(k<i){
            
           
            if(z[k].equals(""("")){
               ops.push(z[k]);
            }
            else if(z[k].equals("" "")){
               
            }
            else if(z[k].equals(""+"")){
             
                ops.push(z[k]);
            }
            else if(z[k].equals(""-"")){
              
                ops.push(z[k]);
            }
            else if(z[k].equals(""*"")){
              
                ops.push(z[k]);
            }
            else if(z[k].equals(""/"")){
              
                ops.push(z[k]);
            }
            else if(z[k].equals("")"")){
               
            int y = 0;       
            String op = """";
              
               while(true){  
                // buffer.push(val.pop());
                  
                 op = ops.pop();
                 if(op.equals(""("")) break;
                 if(op.equals(""+"")){
                     buffer.push(val.pop());
                     opb.push(op);
                 }
                 if(op.equals(""-"")){
                     buffer.push(val.pop());
                     opb.push(op);
                 }
                 if(op.equals(""*"")){
                  double b = val.pop();
                  double a = val.pop();
                  
                  val.push(a*b);
                 }
                 if(op.equals(""/"")){
                  double b = val.pop();
                  double a = val.pop();
                  
                  val.push(a/b);
                 }              
               } 
               buffer.push(val.pop());
               while(!opb.isEmpty()){
                   String op2 = """";
                   op2 = opb.pop();
                 double  a = buffer.pop();
                 double  b = buffer.pop();
                 if(op2.equals(""+""))   buffer.push(a+b);
                if(op2.equals(""-""))   buffer.push(a-b);
               }
               val.push(buffer.pop());
            }
            else {
               
                val.push(Double.parseDouble(z[k]));
            }
            
            k++;
            
            
        }
     
        double a = val.pop();
           while(!ops.isEmpty()){
            ops.pop();
        }
       while(!val.isEmpty()){
            val.pop();
        }
       while(!opb.isEmpty()){
            opb.pop();
        }
       while(!buffer.isEmpty()){
            buffer.pop();
        }
        
        
        return a;
    
    }  
      public static void main(String[] args){
         // System.out.print(10);
        //  String j = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "";
        

      }
}


@9e6967b19d398150c100bdc6bff60de0@"
"b03611023","0","1.02","105824","@d579f2c49a2c4cce4d7f9c783b3459f1@


public class Calculator {
   private  Stack<String> ops ;
     private    Stack<Double> val ;
      private   Stack<Double> buffer;
      private   Stack<String> opb;
    public  Double ans(String e){
        ops =  new Stack<>();
        val = new Stack<>();
        buffer = new Stack<>();
        opb = new Stack<>();
        
        int k = 0;
        int i = 0;
        while(k!=-1){
       k = e.indexOf("" "", ++k);
       
        i++;
    }
        i--;
        k = 0;
       String[] z = e.split("" "");
        
        
        while(k<i){
            
           
            if(z[k].equals(""("")){
               ops.push(z[k]);
            }
            else if(z[k].equals("" "")){
               
            }
            else if(z[k].equals(""+"")){
             
                ops.push(z[k]);
            }
            else if(z[k].equals(""-"")){
              
                ops.push(z[k]);
            }
            else if(z[k].equals(""*"")){
              
                ops.push(z[k]);
            }
            else if(z[k].equals(""/"")){
              
                ops.push(z[k]);
            }
            else if(z[k].equals("")"")){
               
            int y = 0;       
            String op = """";
              
               while(true){  
                // buffer.push(val.pop());
                  
                 op = ops.pop();
                 if(op.equals(""("")) break;
                 if(op.equals(""+"")){
                     buffer.push(val.pop());
                     opb.push(op);
                 }
                 if(op.equals(""-"")){
                     buffer.push(val.pop());
                     opb.push(op);
                 }
                 if(op.equals(""*"")){
                  double b = val.pop();
                  double a = val.pop();
                  
                  val.push(a*b);
                 }
                 if(op.equals(""/"")){
                  double b = val.pop();
                  double a = val.pop();
                  
                  val.push(a/b);
                 }              
               } 
               buffer.push(val.pop());
               while(!opb.isEmpty()){
                   String op2 = """";
                   op2 = opb.pop();
                 double  a = buffer.pop();
                 double  b = buffer.pop();
                 if(op2.equals(""+""))   buffer.push(a+b);
                if(op2.equals(""-""))   buffer.push(a-b);
               }
               val.push(buffer.pop());
            }
            else {
               
                val.push(Double.parseDouble(z[k]));
            }
            
            k++;
            
            
        }
     
        double a = val.pop();
           while(!ops.isEmpty()){
            ops.pop();
        }
       while(!val.isEmpty()){
            val.pop();
        }
       while(!opb.isEmpty()){
            opb.pop();
        }
       while(!buffer.isEmpty()){
            buffer.pop();
        }
        
        
        return a;
    
    }  
      public static void main(String[] args){
         // System.out.print(10);
        //  String j = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "";
        

      }
}


@d579f2c49a2c4cce4d7f9c783b3459f1@"
"r04546032","10","0.094","105824","@fff6f4b9ce835eaab7d268cb5417c4d5@import java.io.BufferedReader;
import java.io.FileReader;
import java.net.URLDecoder;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.LinkedList;

/**
 *
 * @author CHIN LUNG
 */
public class Calculator {
    
    public Double ans(String e)
    {
       Stack<String> ops = new Stack<String>();
       Stack<Double> vals = new Stack<Double>();
       String data[] = new String[e.split("" "").length];//將得到的字串先存下來
        data =e.split("" "").clone();

       //先將前序轉為後序
       for(int i = 0; i < data.length;i++)
       {
               if(data[i].equals(""(""));
               else if(data[i].equals(""+"")) ops.push(data[i]);
               else if(data[i].equals(""-"")) ops.push(data[i]);
               else if(data[i].equals(""*"")) ops.push(data[i]);
               else if(data[i].equals(""/"")) ops.push(data[i]);
               else if(data[i].equals("")""))
               {
                  String op = ops.pop();
                  if(op.equals(""+"")) vals.push(vals.pop() + vals.pop());
                  else if(op.equals(""-"")) vals.push(-vals.pop() + vals.pop());
                  else if(op.equals(""*"")) vals.push(vals.pop() * vals.pop());
                  else if(op.equals(""/"")) vals.push(1/vals.pop() * vals.pop());
               }
               else vals.push(Double.parseDouble(data[i]));
           }
		return vals.pop();
    }
    
//    public int priority(String op)
//    {
//        switch(op)
//        {
//            case""("":
//                return 1;
//            case""+"":
//            case""-"":
//                return 2;
//            case ""*"":
//            case""/"":
//                return 3;
//            default : return 0;    
//        }
//    }
   
    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(""input.txt""))) {
            String number = br.readLine();
            Calculator cct = new Calculator();
            System.out.println(cct.ans(number));
        }
    }
}

@fff6f4b9ce835eaab7d268cb5417c4d5@"
"b03611023","10","0.1","105840","@e78594e9cd716f2ae6233ea64f2cf177@


public class Calculator {
   private  Stack<String> ops ;
     private    Stack<Double> val ;
      private   Stack<Double> buffer;
      private   Stack<String> opb;
    public  Double ans(String e){
        ops =  new Stack<>();
        val = new Stack<>();
        buffer = new Stack<>();
        opb = new Stack<>();
        
        int k = 0;
        int i = 0;
        while(k!=-1){
       k = e.indexOf("" "", ++k);
       
        i++;
    }
       
        k = 0;
       String[] z = e.split("" "");
        
        
        while(k<i){
            
           
            if(z[k].equals(""("")){
               ops.push(z[k]);
            }
            else if(z[k].equals("" "")){
               
            }
            else if(z[k].equals(""+"")){
             
                ops.push(z[k]);
            }
            else if(z[k].equals(""-"")){
              
                ops.push(z[k]);
            }
            else if(z[k].equals(""*"")){
              
                ops.push(z[k]);
            }
            else if(z[k].equals(""/"")){
              
                ops.push(z[k]);
            }
            else if(z[k].equals("")"")){
               
            int y = 0;       
            String op = """";
              
               while(true){  
                // buffer.push(val.pop());
                  
                 op = ops.pop();
                 if(op.equals(""("")) break;
                 if(op.equals(""+"")){
                     buffer.push(val.pop());
                     opb.push(op);
                 }
                 if(op.equals(""-"")){
                     buffer.push(val.pop());
                     opb.push(op);
                 }
                 if(op.equals(""*"")){
                  double b = val.pop();
                  double a = val.pop();
                  
                  val.push(a*b);
                 }
                 if(op.equals(""/"")){
                  double b = val.pop();
                  double a = val.pop();
                  
                  val.push(a/b);
                 }              
               } 
               buffer.push(val.pop());
               while(!opb.isEmpty()){
                   String op2 = """";
                   op2 = opb.pop();
                 double  a = buffer.pop();
                 double  b = buffer.pop();
                 if(op2.equals(""+""))   buffer.push(a+b);
                 if(op2.equals(""-""))   buffer.push(a-b);
               }
               val.push(buffer.pop());
            }
            else {
               
                val.push(Double.parseDouble(z[k]));
            }
            
            k++;
            
            
        }
    
        double a = val.pop();
           while(!ops.isEmpty()){
            ops.pop();
        }
       while(!val.isEmpty()){
            val.pop();
        }
       while(!opb.isEmpty()){
            opb.pop();
        }
       while(!buffer.isEmpty()){
            buffer.pop();
        }
        
        
        return a;
    
    }  
      public static void main(String[] args){
         // System.out.print(10);
        //  String j = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "";
        

      }
}


@e78594e9cd716f2ae6233ea64f2cf177@"
"r03945012","0","0.96","125120","@2398095e90c6162f2f5e2e34413acfc9@


/**
 * 1042 PDSA
 * hw03_Calculator
 * @author Robert
 */
public class Calculator {  
    private Calculator(){}
    
    // ( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )
    public Double ans (String e) {
        // store the data split by "" "" 
        String[] data;
        double output = 0;
        data = e.split("" "");
        // tmp = [] size 5
        String[] tmp = new String[5];
        Stack<String> s = new Stack<String>();
        for (int i=0; i<data.length; i++){
            s.push(data[i]);
            if ("")"".equals(s.peek())){
                for (int j=0; j<5; j++)
                    tmp[j] = s.pop();
 
                double num1 = Double.parseDouble(tmp[3]);
                double num2 = Double.parseDouble(tmp[1]);
                switch (tmp[2]){
                    case ""+"":
                        output = num1+num2;
                        break;
                    case ""-"":
                        output = num1-num2;
                        break;
                    case ""*"":
                        output = num1*num2;
                        break;
                    case ""/"":
                        output = num1/num2;
                        break;
                }
                s.push(String.valueOf(output));
            }
        }
    return output;
    }
    

    
    public static void main(String[] args) {
        // TODO code application logic here
        String N = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"";
        // StdOut.println(N);
        Calculator cct = new Calculator();
        double a = cct.ans(N);
        StdOut.println(""answer: ""+a);
        }
    
}

@2398095e90c6162f2f5e2e34413acfc9@"
"r03945012","0","0.9","103936","@e2bf1b9538134d5291cbc064443ef305@


/**
 * 1042 PDSA
 * hw03_Calculator
 * @author Robert
 */
public class Calculator {  
    private Calculator(){}
    
    // ( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )
    public Double ans (String e) {
        // store the data split by "" "" 
        String[] data;
        double output = 0;
        data = e.split("" "");
        // tmp = [] size 5
        String[] tmp = new String[5];
        Stack<String> s = new Stack<String>();
        for (int i=0; i<data.length; i++){
            s.push(data[i]);
            if ("")"".equals(s.peek())){
                for (int j=0; j<5; j++)
                    tmp[j] = s.pop();
 
                double num1 = Double.parseDouble(tmp[3]);
                double num2 = Double.parseDouble(tmp[1]);
                switch (tmp[2]){
                    case ""+"":
                        output = num1+num2;
                        break;
                    case ""-"":
                        output = num1-num2;
                        break;
                    case ""*"":
                        output = num1*num2;
                        break;
                    case ""/"":
                        output = num1/num2;
                        break;
                }
                s.push(String.valueOf(output));
            }
        }
    return output;
    }
    

    
    public static void main(String[] args) {
        // TODO code application logic here
        String N = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"";
        // StdOut.println(N);
//        Calculator cct = new Calculator();
//        double a = cct.ans(N);
//        StdOut.println(""answer: ""+a);
        }
    
}

@e2bf1b9538134d5291cbc064443ef305@"
"r03945012","10","0.099","105808","@67502ff6dedffa81c44f2254c497b91a@


/**
 * 1042 PDSA
 * hw03_Calculator
 * @author Robert
 */
public class Calculator {  
    public Calculator(){}
    
    // ( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )
    public Double ans (String e) {
        // store the data split by "" "" 
        String[] data;
        double output = 0;
        data = e.split("" "");
        // tmp = [] size 5
        String[] tmp = new String[5];
        Stack<String> s = new Stack<String>();
        for (int i=0; i<data.length; i++){
            s.push(data[i]);
            if ("")"".equals(s.peek())){
                for (int j=0; j<5; j++)
                    tmp[j] = s.pop();
 
                double num1 = Double.parseDouble(tmp[3]);
                double num2 = Double.parseDouble(tmp[1]);
                switch (tmp[2]){
                    case ""+"":
                        output = num1+num2;
                        break;
                    case ""-"":
                        output = num1-num2;
                        break;
                    case ""*"":
                        output = num1*num2;
                        break;
                    case ""/"":
                        output = num1/num2;
                        break;
                }
                s.push(String.valueOf(output));
            }
        }
    return output;
    }
    

    
    public static void main(String[] args) {
        // TODO code application logic here
        String N = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"";
        // StdOut.println(N);
//        Calculator cct = new Calculator();
//        double a = cct.ans(N);
//        StdOut.println(""answer: ""+a);
        }
    
}

@67502ff6dedffa81c44f2254c497b91a@"
"r04631023","10","0.098","105808","@dd699592e3911385bb3cd4766bab961c@import java.io.BufferedReader;
import java.io.FileReader;

public class Calculator {

    public Double ans(String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String[] data = e.split("" "");
        double first;
        double second;
        for (int i = 0; i < data.length; i++) {
            String s = data[i];
            if (s.equals(""("")) {
            } else if (s.equals(""+"")) {
                ops.push(s);
            } else if (s.equals(""-"")) {
                ops.push(s);
            } else if (s.equals(""*"")) {
                ops.push(s);
            } else if (s.equals(""/"")) {
                ops.push(s);
            } else if (s.equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } else if (op.equals(""-"")) {
                    first = vals.pop();
                    second = vals.pop();
                    vals.push(second - first);
                } else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                } else if (op.equals(""/"")) {
                    first = vals.pop();
                    second = vals.pop();
                    vals.push(second / first);
                }
            } else {
                vals.push(Double.parseDouble(s));
            }
        }
        double value = vals.pop();
        return value;
    }
}
@dd699592e3911385bb3cd4766bab961c@"
"r03723070","0","1.01","127184","@bf28010ce4df8f5de8e5e6171d5dfe22@
import java.io.BufferedReader;
import java.io.FileReader;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */

public class LabelCC {
    
    public static void main(String[] args) throws Exception{
       BufferedReader br = new BufferedReader(new FileReader(args[0]));
       String [] input = br.readLine().split("","");//read txt
       int N = Integer.parseInt(input[0]);
       int [] ans = new int [2];
       ans[0] = Integer.parseInt(input[1]);
       ans[1] = Integer.parseInt(input[2]);
       //open the metrix and set all entry to -1
       int [][] data = new int [N+1][N+1];
       //read all data into metrix
       String data0 = br.readLine();
       while(data0!=null){
          //set the site block
          String [] data1 = data0.split("","");
          int x = Integer.parseInt(data1[0]);
          int y = Integer.parseInt(data1[1]);
              data[x][y] = -1;
              //System.out.printf(""%d\n"",data[x][y]);
          data0 = br.readLine();
       }   
       //now assigne the number to all site but blocked site
       int count = 1;
       int countforconnect = 0;
       int [][]connect = new int[N*N][2];
       for(int i =1;i<N+1;i++){
           for(int j =1;j<N+1;j++){
               //if the site is not block
               if(data[i][j]!=-1){
                   //check the left and top, if it is all not blocked
                   if((data[i][j-1]<=0 )&& (data[i-1][j] <= 0)){
                       // opent the site
                       data[i][j] = count;
                       count += 1;
                   }
                   //check the left and top, if it open site
                       //System.out.printf("" carry data[%d][%d] is %d\n"",i,j,data[i][j]);             
                     else if(data[i][j-1]>0 && data[i-1][j] > 0){                          
                          
                               data[i][j] = Math.min(data[i][j-1],data[i-1][j]);
                               int p = Math.max(data[i][j-1],data[i-1][j]);
                               int q = Math.min(data[i][j-1],data[i-1][j]);
                           //max's root to min
                           //both not connect
                               connect[countforconnect][0] = p;
                               connect[countforconnect][1] = q;
                               //System.out.printf(""countforconnect is %d\n"",countforconnect);
                               countforconnect++;
                               //System.out.printf(""countforconnect is %d\n"",countforconnect);
                               /*for(int k =0;k<N*N/2+1;k++){
                                        if(connect[k] == op)
                                            connect[k]= oq;
                               }*/
                            
                           
                        }
                   else
                           data[i][j] =Math.max(data[i-1][j],data[i][j-1]);
                       }
                   
            }
        }       
           
       //equal to site
       int finalans =data[ans[0]][ans[1]];
       //connect have value
       if(data[ans[0]][ans[1]]!=-1){
           for(int i = 0; i<countforconnect;i++){
               if(connect[i][0] == data[ans[0]][ans[1]])
                   finalans = Math.min(connect[i][1],finalans);
           }
       }
       //block
       else
       finalans = 0;
       System.out.printf(""%d\n"",finalans);
        
       }
    }
   

@bf28010ce4df8f5de8e5e6171d5dfe22@"
"r04942099","3","0.99","105824","@ba307a93550113613bcb9cbf4b5c5369@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author fc
 */
public class Calculator {
    
    
            
    public Double ans (String e) {
      double output = 0.00;
      String[] all = e.split("" "");
      int length = all.length;
      Stack<String> ops = new Stack<String>();
      Stack<Double> vals = new Stack<Double>();
      for(int i=0; i<length;++i){
          String s = all[i];
          if (s.equals(""(""));
          else if (s.equals(""+""))  ops.push(s);
          else if (s.equals(""-""))  ops.push(s);
          else if (s.equals(""*""))  ops.push(s);
          else if (s.equals(""/""))  ops.push(s);
          else if (s.equals("")"")){
              String op = ops.pop();
              if (op.equals(""+""))  vals.push(  vals.pop() + vals.pop()  );
              else if (op.equals(""-""))  vals.push(  vals.pop() - vals.pop()  );
              else if (op.equals(""*""))  vals.push(  vals.pop() * vals.pop()  );
              else if (op.equals(""/""))  vals.push(  vals.pop() / vals.pop()  );
          }
          else vals.push(Double.parseDouble(s));
      }
       
      output = vals.pop();
        
      return output;
}
}

@ba307a93550113613bcb9cbf4b5c5369@"
"b03704074","0","0","0","@46013541d8fe0d37b82cd147cec27bb4@
public class Calculator {
    private Node first = null;
    private class Node{
        String item;
        Node next;}
    public boolean isEmpty() {
        return first == null ; }
    public void push( String item ){
        Node oldfirst = first;
        first = new Node();
        first.item = item;
        first.next = oldfirst;
    }
    public void pop(){
        first = first.next;}
    public Double ans(String e){
        String[] E;
        E =e.split("" "");
        double c = 0;
        for(int i = 0;i < E.length;i++){
            if (E[i].equals("")"")){
                double a = Integer.parseInt(E[i-3]);
                double b = Integer.parseInt(E[i-1]);
                
                if (E[i-2].equals(""+""))
                     c = a + b ;
                else if (E[i-2].equals(""-""))
                     c = a - b ;
                else if (E[i-2].equals(""*""))
                     c = a * b ;
                else if (E[i-2].equals(""/""))
                     c = a / b ;
                for(i = 0;i < 5;i++)
                    pop();
                String C =String.valueOf(c);
                push(C);
                 
            }
            else push(E[i]);
            
        }

         return c;
    }
    
    
    
    public static void main(String[] args) {
        
    }
    
}

@46013541d8fe0d37b82cd147cec27bb4@"
"b03704074","0","0","0","@46013541d8fe0d37b82cd147cec27bb4@
public class Calculator {
    private Node first = null;
    private class Node{
        String item;
        Node next;}
    public boolean isEmpty() {
        return first == null ; }
    public void push( String item ){
        Node oldfirst = first;
        first = new Node();
        first.item = item;
        first.next = oldfirst;
    }
    public void pop(){
        first = first.next;}
    public Double ans(String e){
        String[] E;
        E =e.split("" "");
        double c = 0;
        for(int i = 0;i < E.length;i++){
            if (E[i].equals("")"")){
                double a = Integer.parseInt(E[i-3]);
                double b = Integer.parseInt(E[i-1]);
                
                if (E[i-2].equals(""+""))
                     c = a + b ;
                else if (E[i-2].equals(""-""))
                     c = a - b ;
                else if (E[i-2].equals(""*""))
                     c = a * b ;
                else if (E[i-2].equals(""/""))
                     c = a / b ;
                for(i = 0;i < 5;i++)
                    pop();
                String C =String.valueOf(c);
                push(C);
                 
            }
            else push(E[i]);
            
        }

         return c;
    }
    
    
    
    public static void main(String[] args) {
        
    }
    
}

@46013541d8fe0d37b82cd147cec27bb4@"
"r04942099","10","0.1","105792","@a835214a277c542616ea58d3375f1ae2@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author fc
 */
public class Calculator {
    public Double ans (String e) {
              double output = 0.00;
      String[] all = e.split("" "");
      int length = all.length;
      Stack<String> ops = new Stack<String>();
      Stack<Double> vals = new Stack<Double>();
      for(int i=0; i<length;++i){
          String s = all[i];
          
          if (s.equals(""(""));
          else if (s.equals(""+""))  ops.push(s);
          else if (s.equals(""-""))  ops.push(s);
          else if (s.equals(""*""))  ops.push(s);
          else if (s.equals(""/""))  ops.push(s);
          else if (s.equals("")"")){
              String op = ops.pop();
              if (op.equals(""+""))  vals.push(  vals.pop() + vals.pop()  );
              else if (op.equals(""-""))  vals.push( - vals.pop() + vals.pop()  
);
              else if (op.equals(""*""))  vals.push(  vals.pop() * vals.pop()  
);
              else if (op.equals(""/""))  vals.push(  1/vals.pop() * vals.pop()  
);
          }
          else vals.push(Double.parseDouble(s));
      }
       
      output = vals.pop();
        
      return output;
    }
}

@a835214a277c542616ea58d3375f1ae2@"
"b03704074","10","0.091","105552","@3f1c89c98a4e6aefd7b476ba33b600e1@
public class Calculator {
    private Node first = null;
    
    private class Node{
        String item;
        Node next;}
    public Double ans(String e){
        String[] E;
        E =e.split("" "");
        double c = 0;
        for(int i = 0;i < E.length;i++){
            Node oldfirst = first;
                first = new Node();
                first.item = E[i];
                first.next = oldfirst;
            if (E[i].equals("")"")){
                double a = Double.parseDouble(first.next.next.next.item);
                double b = Double.parseDouble(first.next.item);
                //System.out.println(""a=""+a);
                //System.out.println(""b=""+b);
                if (first.next.next.item.equals(""+""))
                     c = a + b ;
                else if (first.next.next.item.equals(""-""))
                     c = a - b ;
                else if (first.next.next.item.equals(""*""))
                     c = a * b ;
                else if (first.next.next.item.equals(""/""))
                     c = a / b ;
                //System.out.println(""c=""+c);
                for(int j = 0;j < 5;j++)   
                    first = first.next;
                String C =String.valueOf(c);
                oldfirst = first;
                first = new Node();
                first.item = C;
                first.next = oldfirst;   
            }
        }
        return c;
    }
    
    
    
    public static void main(String[] args) {
        String answer =""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"" ;
        Calculator cct = new Calculator();
        System.out.println(cct.ans(answer));
        
}}

@3f1c89c98a4e6aefd7b476ba33b600e1@"
"r04945025","10","0.106","105488","@b649114d6e6f6d3138ef46b3bf737e6a@import java.util.Stack;
import java.io.FileReader;
import java.io.BufferedReader;

public class Calculator {

    private static Stack<Double> numStk = new Stack<Double>();
    private static Stack<String> opStk = new Stack<String>();
    private static double result;

    private static void parseStr(String in){
        in = in.replaceAll(""\\("", """");
        String[] exp = in.split(""\\s+"");

        for(String op: exp){
            //System.out.printf(""%s$\n"", op);
            if(!op.equals(""+"") && !op.equals(""-"") && !op.equals(""*"") && !op.equals(""/"") && !op.equals(""("") && !op.equals("")"") && !op.equals("""")){ numStk.push(Double.parseDouble(op)); }
            else if(!op.equals("")"")){ opStk.push(op); }
            else if(op.equals("")"")){
                Double a = numStk.pop();
                Double b = numStk.pop();
                String c = null;
                if(!opStk.isEmpty()) c = opStk.pop();
                //System.out.printf(""%1.3f\t%s\t%1.3f\n"", a, c, b);
                numStk.push(Calculator.calc(a, b, c));
            }
        }
        while(numStk.size() > 1){
            Double a = numStk.pop();
            Double b = numStk.pop();
            String c = null;
            if(!opStk.isEmpty()) c = opStk.pop();
            //System.out.printf(""%1.3f\t%s\t%1.3f\n"", a, c, b);
            numStk.push(Calculator.calc(a, b, c));
        }
        //System.out.printf(""%d\n"", numStk.size());
        result = numStk.pop();
    }

    public static double ans(String in){
        parseStr(in);
        return result;
    }

    public static double calc(Double a, Double b, String op){
        if(op.equals(""+"")) { return (a + b); }
        if(op.equals(""-"")) { return (b - a); }
        if(op.equals(""*"")) { return (a * b); }
        if(op.equals(""/"")) { return (b / a); }
        return 0;
    }

    public static void main(String[] args) throws Exception{
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            /*int num = Integer.parseInt(br.readLine());
            Calculator cct = new Calculator(num);

            for(String in = br.readLine(); in != null; in = br.readLine()){
                double ans = cct.ans(in);
                System.out.printf(""%.2f\n"", ans);
            }*/
        }
    }
}

@b649114d6e6f6d3138ef46b3bf737e6a@"
"r04945021","10","0.098","105840","@6881a4359e5b302401098e6087576971@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
//remove ans static
public class Calculator {

    public Double ans(String e){
        // please replace the following null to the answer you calculated.
                String[] splited = e.split("" "");

        Double result = 0.00;
        Stack stack = new Stack();
        Double[] Num = new Double[2];

        for (int i = 0; i < splited.length; i++) {
            String s = splited[i];

            if (!s.equals("")"") && !s.equals(""("")) {
                stack.push(s);

            } else if (s.equals("")"")) {
                Num[0] = Double.parseDouble((String) stack.pop());
                if (stack.peek().equals(""*"")) {
                    stack.pop();
                    Num[1] = Double.parseDouble((String) stack.pop());
                    result = Num[1] * Num[0];
                    stack.push(String.valueOf(result));
                } else if (stack.peek().equals(""/"")) {
                    stack.pop();
                    Num[1] = Double.parseDouble((String) stack.pop());
                    result = Num[1] / Num[0];

                    stack.push(String.valueOf(result));
                } else if (stack.peek().equals(""+"")) {
                    stack.pop();
                    Num[1] = Double.parseDouble((String) stack.pop());
                    result = Num[1] + Num[0];
                    stack.push(String.valueOf(result));
                } else if (stack.peek().equals(""-"")) {
                    stack.pop();
                    Num[1] = Double.parseDouble((String) stack.pop());
                    result = Num[1] - Num[0];
                    stack.push(String.valueOf(result));
                }

            }
        }
        return result;
        }
        
        
        
    public static void main(String[] args) throws Exception {

        
    }

}

  

    
@6881a4359e5b302401098e6087576971@"
"r03228006","10","0.102","105072","@ee0b697f30e540911c97b61a21249453@//import java.io.BufferedReader;
//import java.io.FileReader;
//import java.util.Arrays;


public class Calculator {
    
public Double ans (String e) {
    //Stack<Item> means you need to indicate the data type of Stack
    Stack<String> stack = new Stack();
    String[] words = e.split(""\\s+"");
    for (int i = 0; i < words.length; i++) {
      //System.out.println(i);
      String s = words[i];
      if (s.equals("")"")) {
        Double t1 = Double.parseDouble(stack.pop());
        //check the operater is logical or ()
        while(true){
          String o1=stack.pop();
          if (o1.equals(""("")){
           break;}
          double t2 = Double.parseDouble(stack.pop());
          if (o1.equals(""*"")){
            t1=t2*t1;}
          else if (o1.equals(""/"")){
            t1=t2/t1;}
          else if (o1.equals(""+"")){
            t1=t2+t1;}
          else{t1=t2-t1;}   
        }
        //System.out.println(t1);
        String total = String.valueOf(t1);
        stack.push(total);
      }
      else {stack.push(s);}
    }
      double calculated = Double.parseDouble(stack.pop());
      return calculated;
}
    
    public static void main(String[] args) throws Exception {
       Calculator cct = new Calculator();
       String a = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"";
       System.out.println(cct.ans(a));
        }
}
    

@ee0b697f30e540911c97b61a21249453@"
"r04546014","0","0.102","105072","@0eb426844878df8b2b8bc1e88c9373a8@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Stack;
import java.util.Scanner;

/**
 *
 * @author Jayden
 */
public class Calculator {

    public static void main(String[] args) throws Exception {
        String abc = ""( ( 1 + 2 ) * 3 )"";
        double aa;
        aa = ans(abc);        
        System.out.println(aa);
    }

     public double ans(String e) {
        double y = 0;

        Stack<String> str = new Stack<String>();
        Stack<Double> dou = new Stack<Double>();

        String[] ch = {""+"",""-"",""*"",""/""};
        double i = 0, j = 0,k;
        double a = 0, b = 0;
        String c;

        Scanner sca = new Scanner(e);
        String label = sca.next();
        while (label.isEmpty() == false) {
            if (label.equals(""+"")||label.equals(""-"")||label.equals(""*"")||label.equals(""/"")) {
                str.push(label);
            } else if (label.equals(""("")) {
                i++;
            } else if (label.equals("")"")) {
                b = dou.pop();
                a = dou.pop();
                c = str.pop();
                if (c.equals(""+"")) {
                    y = a + b;
                } else if (c.equals(""-"")) {
                    y = a - b;
                } else if (c.equals(""*"")) {
                    y = a * b;
                } else if (c.equals(""/"")) {
                    y = a / b;
                }
                dou.push(y);
                j++;
                if(j==i){
                    break;
                }
            } else {
                k = Integer.valueOf(label);
                dou.push(k);
            }
            label = sca.next();
        }

        return y;
    }
}

@0eb426844878df8b2b8bc1e88c9373a8@"
"r04546014","1","0.15","106704","@58ea0371fd2a8cbd90ccd35e47cab41c@import java.util.Stack;
import java.util.Scanner;

/**
 *
 * @author Jayden
 */
public class Calculator {

    public static void main(String[] args) throws Exception {
//        String abc = ""( ( 1 + 2 ) * 3 )"";
//        double aa;
//        aa = ans(abc);        
//        System.out.println(aa);
    }

     public double ans(String e) {
        double y = 0;

        Stack<String> str = new Stack<String>();
        Stack<Double> dou = new Stack<Double>();

        String[] ch = {""+"",""-"",""*"",""/""};
        double i = 0, j = 0,k;
        double a = 0, b = 0;
        String c;

        Scanner sca = new Scanner(e);
        String label = sca.next();
        while (label.isEmpty() == false) {
            if (label.equals(""+"")||label.equals(""-"")||label.equals(""*"")||label.equals(""/"")) {
                str.push(label);
            } else if (label.equals(""("")) {
                i++;
            } else if (label.equals("")"")) {
                b = dou.pop();
                a = dou.pop();
                c = str.pop();
                if (c.equals(""+"")) {
                    y = a + b;
                } else if (c.equals(""-"")) {
                    y = a - b;
                } else if (c.equals(""*"")) {
                    y = a * b;
                } else if (c.equals(""/"")) {
                    y = a / b;
                }
                dou.push(y);
                j++;
                if(j==i){
                    break;
                }
            } else {
                k = Integer.valueOf(label);
                dou.push(k);
            }
            label = sca.next();
        }

        return y;
    }
}

@58ea0371fd2a8cbd90ccd35e47cab41c@"
"r04546014","1","0.12","106560","@548ee27c21396aca2d91e10b3c2d0ed1@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.Stack;
import java.util.Scanner;

/**
 *
 * @author Jayden
 */
public class Calculator {

    public static void main(String[] args) throws Exception {
//        String abc = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "";
//        double aa;
//        aa = ans(abc);        
//        System.out.println(aa);
    }

     public Double ans(String e) {
        double y = 0;//輸出的結果

        Stack<String> str = new Stack<String>();
        Stack<Double> dou = new Stack<Double>();
        //兩個stack用來記錄兩種型態的資料
        double i = 0, j = 0,k;
        double a = 0, b = 0;
        String c;

        Scanner sca = new Scanner(e);
        String label = sca.next();
        while (label.isEmpty() == false) {
            if (label.equals(""+"")||label.equals(""-"")||label.equals(""*"")||label.equals(""/"")) {
                str.push(label);
            } else if (label.equals(""("")) {
                i++;
            } else if (label.equals("")"")) {
                b = dou.pop();
                a = dou.pop();
                c = str.pop();
                if (c.equals(""+"")) {
                    y = a + b;
                } else if (c.equals(""-"")) {
                    y = a - b;
                } else if (c.equals(""*"")) {
                    y = a * b;
                } else if (c.equals(""/"")) {
                    y = a / b;
                }
                dou.push(y);
                j++;
                if(j==i){
                    break;
                }
            } else {
                k = Integer.valueOf(label);
                dou.push(k);
            }            
            label = sca.next();
        }

        return y;
    }
}

@548ee27c21396aca2d91e10b3c2d0ed1@"
"r04546014","1","0.12","110416","@ef7970aa62cceb45d69444a41ad84251@import java.util.Stack;
import java.util.Scanner;

/**
 *
 * @author Jayden
 */
public class Calculator {

    public static void main(String[] args) throws Exception {
//        String abc = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "";
//        double aa;
//        aa = ans(abc);        
//        System.out.println(aa);
    }

      public double ans(String e) {
        double y = 0;//輸出的結果

        Stack<String> str = new Stack<String>();
        Stack<Double> dou = new Stack<Double>();
        //兩個stack用來記錄兩種型態的資料
        double i = 0, j = 0,k;
        double a = 0, b = 0;
        String c;

        Scanner sca = new Scanner(e);
        String label;
        while (sca.hasNext()) {
            label = sca.next();
            if (label.equals(""+"")||label.equals(""-"")||label.equals(""*"")||label.equals(""/"")) {
                str.push(label);
            } else if (label.equals(""("")) {
                i++;
            } else if (label.equals("")"")) {
                b = dou.pop();
                a = dou.pop();
                c = str.pop();
                if (c.equals(""+"")) {
                    y = a + b;
                } else if (c.equals(""-"")) {
                    y = a - b;
                } else if (c.equals(""*"")) {
                    y = a * b;
                } else if (c.equals(""/"")) {
                    y = a / b;
                }
                dou.push(y);
                j++;
                if(j==i){
                    break;
                }
            } else {
                k = Integer.valueOf(label);
                dou.push(k);
            }            
            
            
        }

        return y;
    }
}

@ef7970aa62cceb45d69444a41ad84251@"
"r04546014","10","0.14","116784","@99f4821df22c93713f21bb42712b7bca@import java.util.Stack;
import java.util.Scanner;

/**
 *
 * @author Jayden
 */
public class Calculator {

    public static void main(String[] args) throws Exception {
//        String abc = ""( ( ( 1 + ( 12.5 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "";
//        double aa;
//        aa = ans(abc);        
//        System.out.println(aa);
    }

    public double ans(String e) {
        double y = 0;//輸出的結果

        Stack<String> str = new Stack<String>();
        Stack<Double> dou = new Stack<Double>();
        //兩個stack用來記錄兩種型態的資料
        double i = 0, j = 0, k;
        double a = 0, b = 0;
        String c;

        Scanner sca = new Scanner(e);
        String label;
        while (sca.hasNext()) {

            if (sca.hasNextDouble()) {
                dou.push(sca.nextDouble());
            } else {
                label = sca.next();
                if (label.equals(""+"") || label.equals(""-"") || label.equals(""*"") || label.equals(""/"")) {
                    str.push(label);
                } else if (label.equals(""("")) {
                    i++;
                } else if (label.equals("")"")) {
                    b = dou.pop();
                    a = dou.pop();
                    c = str.pop();
                    if (c.equals(""+"")) {
                        y = a + b;
                    } else if (c.equals(""-"")) {
                        y = a - b;
                    } else if (c.equals(""*"")) {
                        y = a * b;
                    } else if (c.equals(""/"")) {
                        y = a / b;
                    }
                    dou.push(y);
                    j++;
                    if (j == i) {
                        break;
                    }
                }
            }
        }

        return y;
    }
}

@99f4821df22c93713f21bb42712b7bca@"
"r04546014","10","0.14","116272","@c2317ba3fa8dd66e74b0cbc01041e60b@import java.util.Stack;
import java.util.Scanner;

/**
 *
 * @author Jayden
 */
public class Calculator {

    public static void main(String[] args) throws Exception {
        String abc = ""( ( ( 1 + ( 12.5 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "";
        double aa;
        aa = ans(abc);
        System.out.println(aa);
    }

    static public double ans(String e) {
        //這個函式要用static，才能讓上面的main函示取用(不知道為啥)，但是如果是給別的class用就不用寫
        double y = 0;//輸出的結果

        Stack<String> str = new Stack<String>();
        Stack<Double> dou = new Stack<Double>();
        //兩個stack用來記錄兩種型態的資料
        double a ,b ;//ab是用來紀錄兩個pop出來的數字
        String c;//c則是用來記錄pop出來的運算符號

        Scanner sca = new Scanner(e);
        String label;
        //scanner是讀取一個一個單字的用法，label則是存讀進來的是什麼東西
        while (sca.hasNext()) {
            if (sca.hasNextDouble()) {
                dou.push(sca.nextDouble());//如果下一個是數字，就記錄數字
            } else {//其餘的就是符號
                label = sca.next();
                if (label.equals(""+"") || label.equals(""-"") || label.equals(""*"") || label.equals(""/"")) {
                    str.push(label);
                } else if (label.equals("")"")) {
                    b = dou.pop();
                    a = dou.pop();
                    c = str.pop();
                    if (c.equals(""+"")) {
                        y = a + b;
                    } else if (c.equals(""-"")) {
                        y = a - b;
                    } else if (c.equals(""*"")) {
                        y = a * b;
                    } else if (c.equals(""/"")) {
                        y = a / b;
                    }
                    dou.push(y);//再存入剛剛算出來的y
                }
            }
        }

        return y;
    }
}

@c2317ba3fa8dd66e74b0cbc01041e60b@"
"r04631004","0","0.12","110416","@9e28f18c9ac900b843cc5e3991c0b71f@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package calculator;

import edu.princeton.cs.algs4.Stack;
import edu.princeton.cs.algs4.StdIn;

/**
 *
 * @author Po-Lin
 */
public class Calculator {

    private Stack<String> stack = new Stack<String>();

    /**
     * @param args the command line arguments
     */
    public Double ans(String e) {
        double answer = 0.0;
        String[] charstore;
        String tempcharstore;
        String tempcalculator;
        double tempnum1 = 0.0, tempnum2 = 0.0, tempresult;
        charstore = e.split("" "");
        for (int i = 0; i < charstore.length; i++) {
            tempcharstore=charstore[i];
            if (tempcharstore.equals("")"")!=true) {
                stack.push(charstore[i]);
            } else{
                tempnum2 = Double.valueOf(stack.pop());
                tempcalculator = stack.pop();
                tempnum1 = Double.valueOf(stack.pop());
                stack.pop();  //remove the nearest '('
                switch (tempcalculator) {
                    case ""+"":
                        tempresult = tempnum1 + tempnum2;
                        stack.push(String.valueOf(tempresult));
                        break;
                    case ""-"":
                        tempresult = tempnum1 - tempnum2;
                        stack.push(String.valueOf(tempresult));
                        break;
                    case ""*"":
                        tempresult = tempnum1 * tempnum2;
                        stack.push(String.valueOf(tempresult));
                        break;
                    case ""/"":
                        tempresult = tempnum1 / tempnum2;
                        stack.push(String.valueOf(tempresult));
                        break;
                }
            }
        }
        System.out.println(stack.pop());
        //answer = Double.valueOf(stack.pop());
        return answer;
    }

    public static void main(String[] args) {
        // TODO code application logic here
        String e = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"";
        Calculator ccs = new Calculator();
        ccs.ans(e);
    }

}

@9e28f18c9ac900b843cc5e3991c0b71f@"
"r04631004","0","0.98","105808","@c59284d230fb1ae0404361b611ebf65e@

/**
 *
 * @author Po-Lin
 */
public class Calculator {

    private Stack<String> stack = new Stack<String>();

    /**
     * @param args the command line arguments
     */
    public Double ans(String e) {
        double answer = 0.0;
        String[] charstore;
        String tempcharstore;
        String tempcalculator;
        double tempnum1 = 0.0, tempnum2 = 0.0, tempresult;
        charstore = e.split("" "");
        for (int i = 0; i < charstore.length; i++) {
            tempcharstore=charstore[i];
            if (tempcharstore.equals("")"")!=true) {
                stack.push(charstore[i]);
            } else{
                tempnum2 = Double.valueOf(stack.pop());
                tempcalculator = stack.pop();
                tempnum1 = Double.valueOf(stack.pop());
                stack.pop();  //remove the nearest '('
                switch (tempcalculator) {
                    case ""+"":
                        tempresult = tempnum1 + tempnum2;
                        stack.push(String.valueOf(tempresult));
                        break;
                    case ""-"":
                        tempresult = tempnum1 - tempnum2;
                        stack.push(String.valueOf(tempresult));
                        break;
                    case ""*"":
                        tempresult = tempnum1 * tempnum2;
                        stack.push(String.valueOf(tempresult));
                        break;
                    case ""/"":
                        tempresult = tempnum1 / tempnum2;
                        stack.push(String.valueOf(tempresult));
                        break;
                }
            }
        }
        System.out.println(stack.pop());
        //answer = Double.valueOf(stack.pop());
        return answer;
    }

    public static void main(String[] args) {
        // TODO code application logic here
        String e = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"";
        Calculator ccs = new Calculator();
        ccs.ans(e);
    }

}

@c59284d230fb1ae0404361b611ebf65e@"
"r04631004","0","1","105808","@a9a7295deed96b41207afcba6dac12e1@
/**
 *
 * @author Po-Lin
 */
public class Calculator {

    private Stack<String> stack = new Stack<String>();

    /**
     * @param args the command line arguments
     */
    public Double ans(String e) {
        double answer = 0.0;
        String[] charstore;
        String tempcharstore;
        String tempcalculator;
        double tempnum1 = 0.0, tempnum2 = 0.0, tempresult;
        charstore = e.split("" "");
        for (int i = 0; i < charstore.length; i++) {
            tempcharstore=charstore[i];
            if (tempcharstore.equals("")"")!=true) {
                stack.push(charstore[i]);
            } else{
                tempnum2 = Double.valueOf(stack.pop());
                tempcalculator = stack.pop();
                tempnum1 = Double.valueOf(stack.pop());
                stack.pop();  //remove the nearest '('
                switch (tempcalculator) {
                    case ""+"":
                        tempresult = tempnum1 + tempnum2;
                        stack.push(String.valueOf(tempresult));
                        break;
                    case ""-"":
                        tempresult = tempnum1 - tempnum2;
                        stack.push(String.valueOf(tempresult));
                        break;
                    case ""*"":
                        tempresult = tempnum1 * tempnum2;
                        stack.push(String.valueOf(tempresult));
                        break;
                    case ""/"":
                        tempresult = tempnum1 / tempnum2;
                        stack.push(String.valueOf(tempresult));
                        break;
                }
            }
        }
        System.out.println(stack.pop());
        //answer = Double.valueOf(stack.pop());
        return answer;
    }

    

}

@a9a7295deed96b41207afcba6dac12e1@"
"r04631004","10","0.099","105808","@184b4485cdb58907dffd086ed9f2ae86@public class Calculator {

    private Stack<String> stack = new Stack<String>();

    /**
     * @param args the command line arguments
     */
    public Double ans(String e) {
        double answer = 0.0;
        String[] charstore;
        String tempcharstore;
        String tempcalculator;
        double tempnum1 = 0.0, tempnum2 = 0.0, tempresult;
        charstore = e.split("" "");
        for (int i = 0; i < charstore.length; i++) {
            tempcharstore=charstore[i];
            if (tempcharstore.equals("")"")!=true) {
                stack.push(charstore[i]);
            } else{
                tempnum2 = Double.valueOf(stack.pop());
                tempcalculator = stack.pop();
                tempnum1 = Double.valueOf(stack.pop());
                stack.pop();  //remove the nearest '('
                switch (tempcalculator) {
                    case ""+"":
                        tempresult = tempnum1 + tempnum2;
                        stack.push(String.valueOf(tempresult));
                        break;
                    case ""-"":
                        tempresult = tempnum1 - tempnum2;
                        stack.push(String.valueOf(tempresult));
                        break;
                    case ""*"":
                        tempresult = tempnum1 * tempnum2;
                        stack.push(String.valueOf(tempresult));
                        break;
                    case ""/"":
                        tempresult = tempnum1 / tempnum2;
                        stack.push(String.valueOf(tempresult));
                        break;
                }
            }
        }
        answer=Double.valueOf(stack.pop());
        //answer = Double.valueOf(stack.pop());
        return answer;
    }

    public static void main(String[] args) {
        // TODO code application logic here
        String e = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"";
        double a;
        Calculator ccs = new Calculator();
        a=ccs.ans(e);
        System.out.println(a);
    }

}
@184b4485cdb58907dffd086ed9f2ae86@"
"b99611017","0","0.099","105808","@47466a7f2ebe15734622c289e75e974c@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 許志鵬
 */
public class Calculator {

    public Calculator() {
    }

    private double ans(String quest) {
        String[] trans = quest.split("" "");
        int howLong = trans.length;
        Stack token = new Stack();
        //construct a stack
        for (int i = 0; i < howLong; i++) {

            if (i > 2 && i < howLong - 1) {

                if ("")"".equals(trans[i])) {

                    if (""+"".equals(trans[i - 2])) {

                        token.pop();
                        token.pop();
                        token.pop();
                        token.pop();
                        token.push(Double.parseDouble(trans[i - 1]) + Double.parseDouble(trans[i - 3]));
                        token.push(trans[i]);

                    }

                    if (""+"".equals(trans[i - 2])) {

                        token.pop();
                        token.pop();
                        token.pop();
                        token.pop();
                        token.push(Double.parseDouble(trans[i - 1]) + Double.parseDouble(trans[i - 3]));
                        token.push(trans[i]);

                    }

                    if (""-"".equals(trans[i - 2])) {

                        token.pop();
                        token.pop();
                        token.pop();
                        token.pop();
                        token.push(Double.parseDouble(trans[i - 3]) - Double.parseDouble(trans[i - 1]));
                        token.push(trans[i]);

                    }

                    if (""*"".equals(trans[i - 2])) {

                        token.pop();
                        token.pop();
                        token.pop();
                        token.pop();
                        token.push(Double.parseDouble(trans[i - 1]) * Double.parseDouble(trans[i - 3]));
                        token.push(trans[i]);

                    }

                    if (""/"".equals(trans[i - 2])) {

                        token.pop();
                        token.pop();
                        token.pop();
                        token.pop();
                        token.push(Double.parseDouble(trans[i - 3]) / Double.parseDouble(trans[i - 1]));
                        token.push(trans[i]);

                    }
                } else {
                    token.push(trans[i]);
                }
            } else {
                token.push(trans[i]);
            }
        }

        String[] preans = token.toString().split("" "");

        return Double.parseDouble(preans[1]);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
    }

}

@47466a7f2ebe15734622c289e75e974c@"
"b99611017","0","0.57","105488","@f2b0485a6794b5b2108701c2effa8fd0@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 許志鵬
 */
public class Calculator {

    public Calculator() {
    }

    public double ans(String quest) {
        String[] trans = quest.split("" "");
        int howLong = trans.length;
        Stack token = new Stack();
        //construct a stack
        for (int i = 0; i < howLong; i++) {

            if (i > 2 && i < howLong - 1) {

                if ("")"".equals(trans[i])) {

                    if (""+"".equals(trans[i - 2])) {

                        token.pop();
                        token.pop();
                        token.pop();
                        token.pop();
                        token.push(Double.parseDouble(trans[i - 1]) + Double.parseDouble(trans[i - 3]));
                        token.push(trans[i]);

                    }

                    if (""+"".equals(trans[i - 2])) {

                        token.pop();
                        token.pop();
                        token.pop();
                        token.pop();
                        token.push(Double.parseDouble(trans[i - 1]) + Double.parseDouble(trans[i - 3]));
                        token.push(trans[i]);

                    }

                    if (""-"".equals(trans[i - 2])) {

                        token.pop();
                        token.pop();
                        token.pop();
                        token.pop();
                        token.push(Double.parseDouble(trans[i - 3]) - Double.parseDouble(trans[i - 1]));
                        token.push(trans[i]);

                    }

                    if (""*"".equals(trans[i - 2])) {

                        token.pop();
                        token.pop();
                        token.pop();
                        token.pop();
                        token.push(Double.parseDouble(trans[i - 1]) * Double.parseDouble(trans[i - 3]));
                        token.push(trans[i]);

                    }

                    if (""/"".equals(trans[i - 2])) {

                        token.pop();
                        token.pop();
                        token.pop();
                        token.pop();
                        token.push(Double.parseDouble(trans[i - 3]) / Double.parseDouble(trans[i - 1]));
                        token.push(trans[i]);

                    }
                } else {
                    token.push(trans[i]);
                }
            } else {
                token.push(trans[i]);
            }
        }

        String[] preans = token.toString().split("" "");

        return Double.parseDouble(preans[1]);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
    }

}

@f2b0485a6794b5b2108701c2effa8fd0@"
"b02611023","0","0.09","100048","@a47d88073f7b99771c9c440783c4ec9f@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
public class Calculator {

    public Double ans(String e) {
        String[] data = e.split("" "");
        String Str = ""[0-9\\.]+"";
        LinkedStack<String> num = new LinkedStack<String>();
        String str = new String();
        int count1 = 0;
        int count2 = 0;

        for (int i = 0; i < data.length; i++) {
            double add = 0.0;
            for (int j = i; j >= 0; j--) {
                if ((data[i].equals(""(""))) {
                    if (data[j + 1].matches(Str)) {
                        double a = Double.parseDouble(data[j + 1]);
                        if (add > 0.0) {
                            add = count(a, data[j + 2], add);
                        }
                        if (data[j + 3].matches(Str)) {
                            //System.out.println(data[i-1]);
                            double c = Double.parseDouble(data[j + 3]);
                            add = count(a, data[j + 2], c);
                            //System.out.println(add);
                        }

                    }
                }
                if ((data[j].equals("")""))) {
                    break;
                }

            }
            if (add > 0.0) {
                String adds = Double.toString(add);
                //System.out.println(adds);
                num.push(adds);
                count1 += 1;
            }
            if (data[i].equals("")"")) {
                if (((i + 1 < data.length)) && data[i + 1].matches(""[\\+\\-\\*\\/]+"")) {
                    //System.out.println(data[i+1]);
                    num.push(data[i + 1]);
                    count2 += 1;
                }
            }
        }

        String[] cal = new String[count1 + count2];

        int counts = count1 + count2 - 1;
        while (!(num.isEmpty())) {
            cal[counts] = num.pop();
            //System.out.println(cal[i]);
            counts = counts - 1;
        }
        /*for(int j = 0; j<count1+count2;j++){
         System.out.println(cal[j]);
         }*/
        double adding = 0.0;
        int index = 0;
        for (int i = 1; i < count1 + count2; i++) {
            if (cal[i].matches(""[\\+\\-\\*\\/]+"")) {
                double a_1 = Double.parseDouble(cal[i - 1]);
                double c_1 = Double.parseDouble(cal[i + 1]);
                adding = count(a_1, cal[i], c_1);
                index = i;
                //System.out.println(adding);
                break;
            }
        }
        for (int i = index; i < count1 + count2; i++) {
            double c_2 = Double.parseDouble(cal[i + 3]);
            adding = count(adding, cal[i + 2], c_2);
            if ((i + 3) == count1 + count2 - 1) {
                break;
            }
        }
        //System.out.println(adding);
        return adding;
    }

    public Double count(double a, String b, double c) {
        double count = 0.0;
        if (b.equals(""+"")) {
            count = a + c;
        }
        if (b.equals(""-"")) {
            count = a - c;
        }
        if (b.equals(""*"")) {
            count = a * c;
        }
        if (b.equals(""/"")) {
            count = a / c;
        }
        return count;
    }

}

@a47d88073f7b99771c9c440783c4ec9f@"
"b02611023","0","0.1","100784","@111d693925ba291e14f9729cddadc04c@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
public class Calculator {

    public static void main(String[] args) {
        Calculator cct = new Calculator();
        double ans = cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "");
        System.out.println(ans);
    }

    public Double ans(String e) {
        String[] data = e.split("" "");
        String Str = ""[0-9\\.]+"";
        LinkedStack<String> num = new LinkedStack<String>();
        String str = new String();
        int count1 = 0;
        int count2 = 0;

        for (int i = 0; i < data.length; i++) {
            double add = 0.0;
            for (int j = i; j >= 0; j--) {
                if ((data[i].equals(""(""))) {
                    if (data[j + 1].matches(Str)) {
                        double a = Double.parseDouble(data[j + 1]);
                        if (add > 0.0) {
                            add = count(a, data[j + 2], add);
                        }
                        if (data[j + 3].matches(Str)) {
                            //System.out.println(data[i-1]);
                            double c = Double.parseDouble(data[j + 3]);
                            add = count(a, data[j + 2], c);
                            //System.out.println(add);
                        }

                    }
                }
                if ((data[j].equals("")""))) {
                    break;
                }

            }
            if (add > 0.0) {
                String adds = Double.toString(add);
                //System.out.println(adds);
                num.push(adds);
                count1 += 1;
            }
            if (data[i].equals("")"")) {
                if (((i + 1 < data.length)) && data[i + 1].matches(""[\\+\\-\\*\\/]+"")) {
                    //System.out.println(data[i+1]);
                    num.push(data[i + 1]);
                    count2 += 1;
                }
            }
        }

        String[] cal = new String[count1 + count2];

        int counts = count1 + count2 - 1;
        while (!(num.isEmpty())) {
            cal[counts] = num.pop();
            //System.out.println(cal[i]);
            counts = counts - 1;
        }
        /*for(int j = 0; j<count1+count2;j++){
         System.out.println(cal[j]);
         }*/
        double adding = 0.0;
        int index = 0;
        for (int i = 1; i < count1 + count2; i++) {
            if (cal[i].matches(""[\\+\\-\\*\\/]+"")) {
                double a_1 = Double.parseDouble(cal[i - 1]);
                double c_1 = Double.parseDouble(cal[i + 1]);
                adding = count(a_1, cal[i], c_1);
                index = i;
                //System.out.println(adding);
                break;
            }
        }
        for (int i = index; i < count1 + count2; i++) {
            double c_2 = Double.parseDouble(cal[i + 3]);
            adding = count(adding, cal[i + 2], c_2);
            if ((i + 3) == count1 + count2 - 1) {
                break;
            }
        }
        //System.out.println(adding);
        return adding;
    }

    public Double count(double a, String b, double c) {
        double count = 0.0;
        if (b.equals(""+"")) {
            count = a + c;
        }
        if (b.equals(""-"")) {
            count = a - c;
        }
        if (b.equals(""*"")) {
            count = a * c;
        }
        if (b.equals(""/"")) {
            count = a / c;
        }
        return count;
    }

}

@111d693925ba291e14f9729cddadc04c@"
"b02611023","0","0.1","105600","@632dd128b33ea4167b139a6282913a8f@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
public class Calculator {

    /*public static void main(String[] args) {
        Calculator cct = new Calculator();
        double ans = cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "");
        System.out.println(ans);
    }*/

    public Double ans(String e) {
        String[] data = e.split("" "");
        String Str = ""[0-9\\.]+"";
        LinkedStack<String> num = new LinkedStack<String>();
        String str = new String();
        int count1 = 0;
        int count2 = 0;

        for (int i = 0; i < data.length; i++) {
            double add = 0.0;
            for (int j = i; j >= 0; j--) {
                if ((data[i].equals(""(""))) {
                    if (data[j + 1].matches(Str)) {
                        double a = Double.parseDouble(data[j + 1]);
                        if (add > 0.0) {
                            add = count(a, data[j + 2], add);
                        }
                        if (data[j + 3].matches(Str)) {
                            //System.out.println(data[i-1]);
                            double c = Double.parseDouble(data[j + 3]);
                            add = count(a, data[j + 2], c);
                            //System.out.println(add);
                        }

                    }
                }
                if ((data[j].equals("")""))) {
                    break;
                }

            }
            if (add > 0.0) {
                String adds = Double.toString(add);
                //System.out.println(adds);
                num.push(adds);
                count1 += 1;
            }
            if (data[i].equals("")"")) {
                if (((i + 1 < data.length)) && data[i + 1].matches(""[\\+\\-\\*\\/]+"")) {
                    //System.out.println(data[i+1]);
                    num.push(data[i + 1]);
                    count2 += 1;
                }
            }
        }

        String[] cal = new String[count1 + count2];

        int counts = count1 + count2 - 1;
        while (!(num.isEmpty())) {
            cal[counts] = num.pop();
            //System.out.println(cal[i]);
            counts = counts - 1;
        }
        /*for(int j = 0; j<count1+count2;j++){
         System.out.println(cal[j]);
         }*/
        double adding = 0.0;
        int index = 0;
        for (int i = 1; i < count1 + count2; i++) {
            if (cal[i].matches(""[\\+\\-\\*\\/]+"")) {
                double a_1 = Double.parseDouble(cal[i - 1]);
                double c_1 = Double.parseDouble(cal[i + 1]);
                adding = count(a_1, cal[i], c_1);
                index = i;
                //System.out.println(adding);
                break;
            }
        }
        for (int i = index; i < count1 + count2; i++) {
            double c_2 = Double.parseDouble(cal[i + 3]);
            adding = count(adding, cal[i + 2], c_2);
            if ((i + 3) == count1 + count2 - 1) {
                break;
            }
        }
        //System.out.println(adding);
        return adding;
    }

    public Double count(double a, String b, double c) {
        double count = 0.0;
        if (b.equals(""+"")) {
            count = a + c;
        }
        if (b.equals(""-"")) {
            count = a - c;
        }
        if (b.equals(""*"")) {
            count = a * c;
        }
        if (b.equals(""/"")) {
            count = a / c;
        }
        return count;
    }

}

@632dd128b33ea4167b139a6282913a8f@"
"b02611023","0","0.1","101552","@0fd7dc9981e87945d8c8f8a5cfd5c771@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
public class Calculator {

    public static void main(String[] args) {
        Calculator cct = new Calculator();
        double ans = cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"");
        System.out.println(ans);
    }

    public Double ans(String e) {
        String[] data = e.split("" "");
        String Str = ""[0-9\\.]+"";
        LinkedStack<String> num = new LinkedStack<String>();
        String str = new String();
        int count1 = 0;
        int count2 = 0;

        for (int i = 0; i < data.length; i++) {
            double add = 0.0;
            for (int j = i; j >= 0; j--) {
                if ((data[i].equals(""(""))) {
                    if (data[j + 1].matches(Str)) {
                        double a = Double.parseDouble(data[j + 1]);
                        if (add > 0.0) {
                            add = count(a, data[j + 2], add);
                        }
                        if (data[j + 3].matches(Str)) {
                            //System.out.println(data[i-1]);
                            double c = Double.parseDouble(data[j + 3]);
                            add = count(a, data[j + 2], c);
                            //System.out.println(add);
                        }

                    }
                }
                if ((data[j].equals("")""))) {
                    break;
                }

            }
            if (add > 0.0) {
                String adds = Double.toString(add);
                //System.out.println(adds);
                num.push(adds);
                count1 += 1;
            }
            if (data[i].equals("")"")) {
                if (((i + 1 < data.length)) && data[i + 1].matches(""[\\+\\-\\*\\/]+"")) {
                    //System.out.println(data[i+1]);
                    num.push(data[i + 1]);
                    count2 += 1;
                }
            }
        }

        String[] cal = new String[count1 + count2];

        int counts = count1 + count2 - 1;
        while (!(num.isEmpty())) {
            cal[counts] = num.pop();
            //System.out.println(cal[i]);
            counts = counts - 1;
        }
        /*for(int j = 0; j<count1+count2;j++){
         System.out.println(cal[j]);
         }*/
        double adding = 0.0;
        int index = 0;
        for (int i = 1; i < count1 + count2; i++) {
            if (cal[i].matches(""[\\+\\-\\*\\/]+"")) {
                double a_1 = Double.parseDouble(cal[i - 1]);
                double c_1 = Double.parseDouble(cal[i + 1]);
                adding = count(a_1, cal[i], c_1);
                index = i;
                //System.out.println(adding);
                break;
            }
        }
        for (int i = index; i < count1 + count2; i++) {
            double c_2 = Double.parseDouble(cal[i + 3]);
            adding = count(adding, cal[i + 2], c_2);
            if ((i + 3) == count1 + count2 - 1) {
                break;
            }
        }
        //System.out.println(adding);
        return adding;
    }

    public Double count(double a, String b, double c) {
        double count = 0.0;
        if (b.equals(""+"")) {
            count = a + c;
        }
        if (b.equals(""-"")) {
            count = a - c;
        }
        if (b.equals(""*"")) {
            count = a * c;
        }
        if (b.equals(""/"")) {
            count = a / c;
        }
        return count;
    }

}

@0fd7dc9981e87945d8c8f8a5cfd5c771@"
"b02611023","0","0.09","103280","@e1e4109c53ddfc44642d234176ca7821@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
public class Calculator {

    public static void main(String[] args) {
        Calculator cal = new Calculator();
        double ans = cal.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"");
        System.out.println(ans);
    }

    public Double ans(String e) {
        String[] data = e.split("" "");
        String Str = ""[0-9\\.]+"";
        LinkedStack<String> num = new LinkedStack<String>();
        String str = new String();
        int count1 = 0;
        int count2 = 0;

        for (int i = 0; i < data.length; i++) {
            double add = 0.0;
            for (int j = i; j >= 0; j--) {
                if ((data[i].equals(""(""))) {
                    if (data[j + 1].matches(Str)) {
                        double a = Double.parseDouble(data[j + 1]);
                        if (add > 0.0) {
                            add = count(a, data[j + 2], add);
                        }
                        if (data[j + 3].matches(Str)) {
                            //System.out.println(data[i-1]);
                            double c = Double.parseDouble(data[j + 3]);
                            add = count(a, data[j + 2], c);
                            //System.out.println(add);
                        }

                    }
                }
                if ((data[j].equals("")""))) {
                    break;
                }

            }
            if (add > 0.0) {
                String adds = Double.toString(add);
                //System.out.println(adds);
                num.push(adds);
                count1 += 1;
            }
            if (data[i].equals("")"")) {
                if (((i + 1 < data.length)) && data[i + 1].matches(""[\\+\\-\\*\\/]+"")) {
                    //System.out.println(data[i+1]);
                    num.push(data[i + 1]);
                    count2 += 1;
                }
            }
        }

        String[] cal = new String[count1 + count2];

        int counts = count1 + count2 - 1;
        while (!(num.isEmpty())) {
            cal[counts] = num.pop();
            //System.out.println(cal[i]);
            counts = counts - 1;
        }
        /*for(int j = 0; j<count1+count2;j++){
         System.out.println(cal[j]);
         }*/
        double adding = 0.0;
        int index = 0;
        for (int i = 1; i < count1 + count2; i++) {
            if (cal[i].matches(""[\\+\\-\\*\\/]+"")) {
                double a_1 = Double.parseDouble(cal[i - 1]);
                double c_1 = Double.parseDouble(cal[i + 1]);
                adding = count(a_1, cal[i], c_1);
                index = i;
                //System.out.println(adding);
                break;
            }
        }
        for (int i = index; i < count1 + count2; i++) {
            double c_2 = Double.parseDouble(cal[i + 3]);
            adding = count(adding, cal[i + 2], c_2);
            if ((i + 3) == count1 + count2 - 1) {
                break;
            }
        }
        //System.out.println(adding);
        return adding;
    }

    public Double count(double a, String b, double c) {
        double count = 0.0;
        if (b.equals(""+"")) {
            count = a + c;
        }
        if (b.equals(""-"")) {
            count = a - c;
        }
        if (b.equals(""*"")) {
            count = a * c;
        }
        if (b.equals(""/"")) {
            count = a / c;
        }
        return count;
    }

}

@e1e4109c53ddfc44642d234176ca7821@"
"r03222054","1","0.09","105488","@432ce6908d5aeea740c4b0c4a7b5bd59@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author LinWeiKuan
 */
import java.util.Stack;
import java.util.List;
import java.util.Vector;
import java.lang.Character;
public class Calculator 
{
    public static boolean isNumeric(String str)  
   {  
     try  
     {  
       double d = Double.parseDouble(str);  
     }  
     catch(NumberFormatException nfe)  
     {  
       return false;  
     }  
     return true;  
   }
    
    private Vector <String>postfix = new Vector<String>();
    private Stack<String> temp= new Stack<String>();
    
    public void toPostfix(String inputString)
    {
        String[] inputs = inputString.split("" "");        

        
        for (int i=0; i<inputs.length; i++)
        {
            if(inputs[i].equals(""(""))
             {
                temp.push(""("");
                while(!inputs[i+1].equals("")""))
                {
                    if(isNumeric(inputs[i+1]))
                    {
                        postfix.add(inputs[i+1]);
                    }
                    else
                        temp.push(inputs[i+1]);
                    i++;  
                }
                continue;
             }
            else if(inputs[i].equals("")""))
            {
                while(true)
                {
                    if(temp.peek()==""("")
                    {
                        temp.pop();
                        break;
                    }
                    else
                    {
                        postfix.add(temp.pop());
                    }
                }
                continue;
            }
            
//                    
            else if(inputs[i].equals(""+""))  
            {

                if (! temp.isEmpty())
                {
                    postfix.add(temp.pop());
                     temp.push(""+"");
                }
                else 
                    temp.push(""+"");
                   continue;
            }
        
    
            
            
            else if(inputs[i].equals(""-""))  
            {
                if (! temp.isEmpty())
                {
                    postfix.add(temp.pop());
                     temp.push(""-"");
                }
                else 
                    temp.push(""-"");
                   continue;
            }
            else if(inputs[i].equals(""*""))  
            {
                if(!temp.isEmpty())
                {
                    String symbol = temp.peek();
                    if (symbol.equals(""+"") || symbol.equals(""-""))
                     temp.push(""*"");
                    else if (symbol.equals(""*"") || symbol.equals(""/""))
                    {
                     postfix.add(temp.pop());    
                     temp.push(""*"");
                    }
                }
                else
                    temp.push(""*"");
                    continue;
                    
            }
            
            else if(inputs[i].equals(""/""))  
            {
                if(!temp.isEmpty())
                {
                    String symbol = temp.peek();
                    if (symbol.equals(""+"") || symbol.equals(""-""))
                    temp.push(""/"");
                   else if (symbol.equals(""*"") || symbol.equals(""/""))
                   {
                    postfix.add(temp.pop());    
                    temp.push(""/"");
                   }
                }
                else 
                    temp.push(""/"");
                    continue;
            }
            
            else if(isNumeric(inputs[i]))
            {
                   postfix.add(inputs[i]);
                   continue;
            }
            
            else 
            {
               System.out.print(""error"");
                break;
            }
        }
     while (!temp.isEmpty() )   
     {
         postfix.add(temp.pop());
     }
    
            for (int i=0; i<postfix.size();i++)
            {
            //    System.out.print(postfix.get(i)+""\t"");
            }

    }


    
    public Double ans( String inputString)
    {
        toPostfix(inputString);
        Stack <Double>values = new Stack<Double>();
        for(int i=0; i<postfix.size(); i++)
        {
            if(isNumeric(postfix.get(i)))
            {
                values.push(Double.parseDouble(postfix.get(i)));
                continue;
            }
            
            
            else if(postfix.get(i).equals(""+""))  
            {
                    double val1=values.pop();
                    double val2=values.pop();
                    values.push(val1+val2);
                   continue;
            }
        
    
            
            
            else if(postfix.get(i).equals(""-""))  
            {
                    double val1=values.pop();
                    double val2=values.pop();
                    values.push(val2-val1);
                   continue;
            }
                       
            else if(postfix.get(i).equals(""*""))  
            {
                    double val1=values.pop();
                    double val2=values.pop();
                    values.push(val1*val2);
                   continue;
            }
            
            else if(postfix.get(i).equals(""/""))  
            {
                    double val1=values.pop();
                    double val2=values.pop();
                    values.push(val2/val1);
                   continue;
            } 
        }
        return values.get(0);
        
        
        
        
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    public static void main(String[] args) 
    {
       Calculator x= new Calculator();
      double z=  x.ans(""4 * ( 1 - 2 ) * 3"");
       System.out.print(z);

    }
    


    
    
    
    
    
}

@432ce6908d5aeea740c4b0c4a7b5bd59@"
"r04228002","10","0.096","105904","@c4d8bb5bab24e6d0adf0f9fdaea51a5f@
import java.io.BufferedReader;
import java.io.FileReader;
//import edu.princeton.cs.algs4.Stack;
import java.util.Arrays;
import java.util.ArrayList;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author Lenovo
 */

public class Calculator {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws Exception {
        String[] row1;
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            row1 = br.readLine().split("","");
            //System.out.println(Arrays.toString(row1));            
        }
        // TODO code application logic here
        String str="""";
        for (int i=0;i<row1.length;i++){
            str=str+row1[i];
        }
        /*
        String[] a=str.split("" "");
        String str2="""";
        for (int i=0;i<a.length;i++){
            str2=str2+a[i];
        }
        */
  
        
        
        Calculator cct = new Calculator();
        double result =cct.ans(str);
        System.out.println(result);
        
    }
    public Double ans (String e) {
        // please replace the following null to the answer you calculated.
        String LeftB = ""("";
        String RightB = "")"";
        String[] a=e.split("" "");
        Stack<String> cal=new Stack<String>();
        for (int i=0;i<a.length;i++){
            if (!a[i].equals(RightB)){
                cal.push(a[i]);
            }
            else{
                Stack<String> Temp = new Stack<String>();
                String b =cal.pop();
                Temp.push(b);
                while(!b.equals(LeftB)){
                    b=cal.pop();
                    Temp.push(b);
                }
                String Bracket=Temp.pop();
                double N1=Double.parseDouble(Temp.pop());
                String OP=Temp.pop();
                double N2=Double.parseDouble(Temp.pop());
                double TempR=0;
                if (OP.equals(""+"")){
                    TempR=N1+N2;
                }
                else if(OP.equals(""-"")){
                    TempR=N1-N2;
                }
                else if(OP.equals(""*"")){
                    TempR=N1*N2;
                }
                else{
                    TempR=N1/N2;
                }
                String TempR2 = String.valueOf(TempR);
                cal.push(TempR2);
                
            }
        }
    String FinalR=cal.pop();
    double FinalR2=Double.parseDouble(FinalR);
    //Stack<char> cal= new Stack<char>();
      
    return FinalR2;
}
    
}


@c4d8bb5bab24e6d0adf0f9fdaea51a5f@"
"r03222054","7","0.69","105040","@639cfc68aec200b52f970dc2abf06edb@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author LinWeiKuan
 */
import java.util.Stack;
import java.util.List;
import java.util.Vector;
import java.lang.Character;
public class Calculator 
{
    public static boolean isNumeric(String str)  
   {  
     try  
     {  
       double d = Double.parseDouble(str);  
     }  
     catch(NumberFormatException nfe)  
     {  
       return false;  
     }  
     return true;  
   }
    
    private Vector <String>postfix = new Vector<String>();
    private Stack<String> temp= new Stack<String>();
    
    public void toPostfix(String inputString)
    {
        String[] inputs = inputString.split("" "");        

        
        for (int i=0; i<inputs.length; i++)
        {
            if(inputs[i].equals(""(""))
             {
                temp.push(""("");
                while(!inputs[i].equals("")""))
                {
                    if(isNumeric(inputs[i]))
                    {
                        postfix.add(inputs[i]);
                    }
                    else
                        temp.push(inputs[i]);
                    i++;  
                }
                continue;
             }
            else if(inputs[i].equals("")""))
            {
                while(true)
                {
                    if(temp.peek()==""("")
                    {
                        temp.pop();
                        break;
                    }
                    else
                    {
                        postfix.add(temp.pop());
                    }
                }
                continue;
            }
            
//                    
            else if(inputs[i].equals(""+""))  
            {

                if (! temp.isEmpty())
                {
                    postfix.add(temp.pop());
                     temp.push(""+"");
                }
                else 
                    temp.push(""+"");
                   continue;
            }
        
    
            
            
            else if(inputs[i].equals(""-""))  
            {
                if (! temp.isEmpty())
                {
                    postfix.add(temp.pop());
                     temp.push(""-"");
                }
                else 
                    temp.push(""-"");
                   continue;
            }
            else if(inputs[i].equals(""*""))  
            {
                if(!temp.isEmpty())
                {
                    String symbol = temp.peek();
                    if (symbol.equals(""+"") || symbol.equals(""-""))
                     temp.push(""*"");
                    else if (symbol.equals(""*"") || symbol.equals(""/""))
                    {
                     postfix.add(temp.pop());    
                     temp.push(""*"");
                    }
                }
                else
                    temp.push(""*"");
                    continue;
                    
            }
            
            else if(inputs[i].equals(""/""))  
            {
                if(!temp.isEmpty())
                {
                    String symbol = temp.peek();
                    if (symbol.equals(""+"") || symbol.equals(""-""))
                    temp.push(""/"");
                   else if (symbol.equals(""*"") || symbol.equals(""/""))
                   {
                    postfix.add(temp.pop());    
                    temp.push(""/"");
                   }
                }
                else 
                    temp.push(""/"");
                    continue;
            }
            
            else if(isNumeric(inputs[i]))
            {
                   postfix.add(inputs[i]);
                   continue;
            }
            
            else 
            {
               System.out.print(""error"");
                break;
            }
        }
     while (!temp.isEmpty() )   
     {
         postfix.add(temp.pop());
     }
    
            for (int i=0; i<postfix.size();i++)
            {
            //    System.out.print(postfix.get(i)+""\t"");
            }

    }


    
    public Double ans( String inputString)
    {
        toPostfix(inputString);
        Stack <Double>values = new Stack<Double>();
        for(int i=0; i<postfix.size(); i++)
        {
            if(isNumeric(postfix.get(i)))
            {
                values.push(Double.parseDouble(postfix.get(i)));
                continue;
            }
            
            
            else if(postfix.get(i).equals(""+""))  
            {
                    double val1=values.pop();
                    double val2=values.pop();
                    values.push(val1+val2);
                   continue;
            }
        
    
            
            
            else if(postfix.get(i).equals(""-""))  
            {
                    double val1=values.pop();
                    double val2=values.pop();
                    values.push(val2-val1);
                   continue;
            }
                       
            else if(postfix.get(i).equals(""*""))  
            {
                    double val1=values.pop();
                    double val2=values.pop();
                    values.push(val1*val2);
                   continue;
            }
            
            else if(postfix.get(i).equals(""/""))  
            {
                    double val1=values.pop();
                    double val2=values.pop();
                    values.push(val2/val1);
                   continue;
            } 
        }
        return values.get(0);
        
        
        
        
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    public static void main(String[] args) 
    {
       Calculator x= new Calculator();
      double z=  x.ans(""( ( 1 + 2 ) - 1 ) * 3"");
       System.out.print(z);

    }
    


    
    
    
    
    
}

@639cfc68aec200b52f970dc2abf06edb@"
"r03222054","7","0.67","105600","@1ccd8bd09c8ffc385aeabba9882bc7d2@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author LinWeiKuan
 */
import java.util.Stack;
import java.util.List;
import java.util.Vector;
import java.lang.Character;
public class Calculator 
{
    public static boolean isNumeric(String str)  
   {  
     try  
     {  
       double d = Double.parseDouble(str);  
     }  
     catch(NumberFormatException nfe)  
     {  
       return false;  
     }  
     return true;  
   }
    
    private Vector <String>postfix = new Vector<String>();
    private Stack<String> temp= new Stack<String>();
    
    public void toPostfix(String inputString)
    {
        String[] inputs = inputString.split("" "");        

        
        for (int i=0; i<inputs.length; i++)
        {
            if(inputs[i].equals(""(""))
             {
                temp.push(""("");
                while(!inputs[i].equals("")""))
                {
                    if(isNumeric(inputs[i]))
                    {
                        postfix.add(inputs[i]);
                    }
                    else
                        temp.push(inputs[i]);
                    i++;  
                }
                continue;
             }
            else if(inputs[i].equals("")""))
            {
                while(true)
                {
                    if(temp.peek()==""("")
                    {
                        temp.pop();
                        break;
                    }
                    else
                    {
                        postfix.add(temp.pop());
                    }
                }
                continue;
            }
            
            else if(inputs[i].equals(""+""))  
            {

                if (! temp.isEmpty())
                {
                    postfix.add(temp.pop());
                     temp.push(""+"");
                }
                else 
                    temp.push(""+"");
                   continue;
            }

            else if(inputs[i].equals(""-""))  
            {
                if (! temp.isEmpty())
                {
                    postfix.add(temp.pop());
                     temp.push(""-"");
                }
                else 
                    temp.push(""-"");
                   continue;
            }
            else if(inputs[i].equals(""*""))  
            {
                if(!temp.isEmpty())
                {
                    String symbol = temp.peek();
                    if (symbol.equals(""+"") || symbol.equals(""-""))
                     temp.push(""*"");
                    else if (symbol.equals(""*"") || symbol.equals(""/""))
                    {
                     postfix.add(temp.pop());    
                     temp.push(""*"");
                    }
                }
                else
                    temp.push(""*"");
                    continue; 
            }
            
            else if(inputs[i].equals(""/""))  
            {
                if(!temp.isEmpty())
                {
                    String symbol = temp.peek();
                    if (symbol.equals(""+"") || symbol.equals(""-""))
                    temp.push(""/"");
                   else if (symbol.equals(""*"") || symbol.equals(""/""))
                   {
                    postfix.add(temp.pop());    
                    temp.push(""/"");
                   }
                }
                else 
                    temp.push(""/"");
                    continue;
            }
            
            else if(isNumeric(inputs[i]))
            {
                   postfix.add(inputs[i]);
                   continue;
            }
            
            else 
            {
               System.out.print(""error"");
                break;
            }
        }
     while (!temp.isEmpty() )   
     {
         postfix.add(temp.pop());
     }
    }

    public Double ans( String inputString)
    {
        toPostfix(inputString);
        Stack <Double>values = new Stack<Double>();
        for(int i=0; i<postfix.size(); i++)
        {
            if(isNumeric(postfix.get(i)))
            {
                values.push(Double.parseDouble(postfix.get(i)));
                continue;
            }
            else if(postfix.get(i).equals(""+""))  
            {
                    double val1=values.pop();
                    double val2=values.pop();
                    values.push(val1+val2);
                   continue;
            }
 
            else if(postfix.get(i).equals(""-""))  
            {
                    double val1=values.pop();
                    double val2=values.pop();
                    values.push(val2-val1);
                   continue;
            }
                       
            else if(postfix.get(i).equals(""*""))  
            {
                    double val1=values.pop();
                    double val2=values.pop();
                    values.push(val1*val2);
                   continue;
            }
            
            else if(postfix.get(i).equals(""/""))  
            {
                    double val1=values.pop();
                    double val2=values.pop();
                    values.push(val2/val1);
                   continue;
            } 
        }
        return values.get(0);
    }
    public static void main(String[] args) 
    {
       Calculator x= new Calculator();
      double z=  x.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "");
       System.out.print(z);

    }
    


    
    
    
    
    
}

@1ccd8bd09c8ffc385aeabba9882bc7d2@"
"r03222054","0","0.1","103760","@502c87dabc898c11669841053a4efc28@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author LinWeiKuan
 */
import java.util.Stack;
import java.util.List;
import java.util.Vector;
import java.lang.Character;
public class Calculator 
{
    public static boolean isNumeric(String str)  
   {  
     try  
     {  
       double d = Double.parseDouble(str);  
     }  
     catch(NumberFormatException nfe)  
     {  
       return false;  
     }  
     return true;  
   }
    
    private Vector <String>postfix = new Vector<String>();
    private Stack<String> temp= new Stack<String>();
    
    public void toPostfix(String inputString)
    {
        String[] inputs = inputString.split("" "");        

        
        for (int i=0; i<inputs.length; i++)
        {
            if(inputs[i].equals(""(""))
             {
                temp.push(""("");
                i++;
                while(!inputs[i].equals("")""))
                {
                    if(isNumeric(inputs[i]))
                    {
                        postfix.add(inputs[i]);
                    }
                    else
                        temp.push(inputs[i]);
                    i++;  
                }
                i--;
                continue;
             }
            else if(inputs[i].equals("")""))
            {
                while(true)
                {
                    if(temp.peek()==""("")
                    {
                        temp.pop();
                        break;
                    }
                    else
                    {
                        postfix.add(temp.pop());
                    }
                }
                continue;
            }
            
            else if(inputs[i].equals(""+""))  
            {

                if (! temp.isEmpty())
                {
                    postfix.add(temp.pop());
                     temp.push(""+"");
                }
                else 
                    temp.push(""+"");
                   continue;
            }

            else if(inputs[i].equals(""-""))  
            {
                if (! temp.isEmpty())
                {
                    postfix.add(temp.pop());
                     temp.push(""-"");
                }
                else 
                    temp.push(""-"");
                   continue;
            }
            else if(inputs[i].equals(""*""))  
            {
                if(!temp.isEmpty())
                {
                    String symbol = temp.peek();
                    if (symbol.equals(""+"") || symbol.equals(""-""))
                     temp.push(""*"");
                    else if (symbol.equals(""*"") || symbol.equals(""/""))
                    {
                     postfix.add(temp.pop());    
                     temp.push(""*"");
                    }
                }
                else
                    temp.push(""*"");
                    continue; 
            }
            
            else if(inputs[i].equals(""/""))  
            {
                if(!temp.isEmpty())
                {
                    String symbol = temp.peek();
                    if (symbol.equals(""+"") || symbol.equals(""-""))
                    temp.push(""/"");
                   else if (symbol.equals(""*"") || symbol.equals(""/""))
                   {
                    postfix.add(temp.pop());    
                    temp.push(""/"");
                   }
                }
                else 
                    temp.push(""/"");
                    continue;
            }
            
            else if(isNumeric(inputs[i]))
            {
                   postfix.add(inputs[i]);
                   continue;
            }
            
            else 
            {
               System.out.print(""error"");
                break;
            }
        }
     while (!temp.isEmpty() )   
     {
         postfix.add(temp.pop());
     }
     
     for (int i=0; i< postfix.size(); i++)
     {
         System.out.print(postfix.get(i));
     }
     
    }

    public Double ans( String inputString)
    {
        toPostfix(inputString);
        Stack <Double>values = new Stack<Double>();
        for(int i=0; i<postfix.size(); i++)
        {
            if(isNumeric(postfix.get(i)))
            {
                values.push(Double.parseDouble(postfix.get(i)));
                continue;
            }
            else if(postfix.get(i).equals(""+""))  
            {
                    double val1=values.pop();
                    double val2=values.pop();
                    values.push(val1+val2);
                   continue;
            }
 
            else if(postfix.get(i).equals(""-""))  
            {
                    double val1=values.pop();
                    double val2=values.pop();
                    values.push(val2-val1);
                   continue;
            }
                       
            else if(postfix.get(i).equals(""*""))  
            {
                    double val1=values.pop();
                    double val2=values.pop();
                    values.push(val1*val2);
                   continue;
            }
            
            else if(postfix.get(i).equals(""/""))  
            {
                    double val1=values.pop();
                    double val2=values.pop();
                    values.push(val2/val1);
                   continue;
            } 
        }
        return values.get(0);
    }
    public static void main(String[] args) 
    {
       Calculator x= new Calculator();
      double z=  x.ans(""( 1 + 3 ) * 3 "");
       System.out.print(z);

    }
}

@502c87dabc898c11669841053a4efc28@"
"r03222054","1","0.1","101488","@f0c2ff2840620e0fa0f94f8cf6f58aa9@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author LinWeiKuan
 */
import java.util.Stack;
import java.util.List;
import java.util.Vector;
import java.lang.Character;
public class Calculator 
{
    public static boolean isNumeric(String str)  
   {  
     try  
     {  
       double d = Double.parseDouble(str);  
     }  
     catch(NumberFormatException nfe)  
     {  
       return false;  
     }  
     return true;  
   }
    
    private Vector <String>postfix = new Vector<String>();
    private Stack<String> temp= new Stack<String>();
    
    public void toPostfix(String inputString)
    {
        String[] inputs = inputString.split("" "");        

        
        for (int i=0; i<inputs.length; i++)
        {
            if(inputs[i].equals(""(""))
             {
                temp.push(""("");
                i++;
                while(!inputs[i].equals("")""))
                {
                    if(isNumeric(inputs[i]))
                    {
                        postfix.add(inputs[i]);
                    }
                    else
                        temp.push(inputs[i]);
                    i++;  
                }
                i--;
                continue;
             }
            else if(inputs[i].equals("")""))
            {
                while(true)
                {
                    if(temp.peek()==""("")
                    {
                        temp.pop();
                        break;
                    }
                    else
                    {
                        postfix.add(temp.pop());
                    }
                }
                continue;
            }
            
            else if(inputs[i].equals(""+""))  
            {

                if (! temp.isEmpty())
                {
                    postfix.add(temp.pop());
                     temp.push(""+"");
                }
                else 
                    temp.push(""+"");
                   continue;
            }

            else if(inputs[i].equals(""-""))  
            {
                if (! temp.isEmpty())
                {
                    postfix.add(temp.pop());
                     temp.push(""-"");
                }
                else 
                    temp.push(""-"");
                   continue;
            }
            else if(inputs[i].equals(""*""))  
            {
                if(!temp.isEmpty())
                {
                    String symbol = temp.peek();
                    if (symbol.equals(""+"") || symbol.equals(""-""))
                     temp.push(""*"");
                    else if (symbol.equals(""*"") || symbol.equals(""/""))
                    {
                     postfix.add(temp.pop());    
                     temp.push(""*"");
                    }
                }
                else
                    temp.push(""*"");
                    continue; 
            }
            
            else if(inputs[i].equals(""/""))  
            {
                if(!temp.isEmpty())
                {
                    String symbol = temp.peek();
                    if (symbol.equals(""+"") || symbol.equals(""-""))
                    temp.push(""/"");
                   else if (symbol.equals(""*"") || symbol.equals(""/""))
                   {
                    postfix.add(temp.pop());    
                    temp.push(""/"");
                   }
                }
                else 
                    temp.push(""/"");
                    continue;
            }
            
            else if(isNumeric(inputs[i]))
            {
                   postfix.add(inputs[i]);
                   continue;
            }
            
            else 
            {
               System.out.print(""error"");
                break;
            }
        }
     while (!temp.isEmpty() )   
     {
         postfix.add(temp.pop());
     }
     
     for (int i=0; i< postfix.size(); i++)
     {
      //   System.out.print(postfix.get(i));
     }
     
    }

    public Double ans( String inputString)
    {
        toPostfix(inputString);
        Stack <Double>values = new Stack<Double>();
        for(int i=0; i<postfix.size(); i++)
        {
            if(isNumeric(postfix.get(i)))
            {
                values.push(Double.parseDouble(postfix.get(i)));
                continue;
            }
            else if(postfix.get(i).equals(""+""))  
            {
                    double val1=values.pop();
                    double val2=values.pop();
                    values.push(val1+val2);
                   continue;
            }
 
            else if(postfix.get(i).equals(""-""))  
            {
                    double val1=values.pop();
                    double val2=values.pop();
                    values.push(val2-val1);
                   continue;
            }
                       
            else if(postfix.get(i).equals(""*""))  
            {
                    double val1=values.pop();
                    double val2=values.pop();
                    values.push(val1*val2);
                   continue;
            }
            
            else if(postfix.get(i).equals(""/""))  
            {
                    double val1=values.pop();
                    double val2=values.pop();
                    values.push(val2/val1);
                   continue;
            } 
        }
        return values.get(0);
    }
    public static void main(String[] args) 
    {
       Calculator x= new Calculator();
      double z=  x.ans(""( 1 + 3 ) * 3 "");
       System.out.print(z);

    }
}

@f0c2ff2840620e0fa0f94f8cf6f58aa9@"
"r03525008","10","0.097","105520","@6ae536b5dbbfff3a0afef8ab1615fe4d@/**
 * Created by User on 2016/3/18.
 */
public class Calculator {

    public Stack<Double> numberStack=new Stack<Double>();
    public Stack<String> operatorStack=new Stack<String>();

/*    public static void main(String[] args) {
        Calculator calculator=new Calculator();

        System.out.println(calculator.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )""));

    }*/
    public Double ans (String e){
        String[] data= e.split("" "");
/*        for(int i=0;i<data.length;i++){
            System.out.println(data[i]);
        }*/
        Double ans=0d;
        for(int i=0;i<data.length;i++){
            if(data[i].equals(""+"")|data[i].equals(""-"")|data[i].equals(""*"")|data[i].equals(""/"")){
                //System.out.println(""add operator"");
                operatorStack.push(data[i]);
            }
            else if(data[i].equals("")"")){
                //System.out.println(""calculate"");
                String operator=operatorStack.pop();
                Double A=numberStack.pop();
                Double B=numberStack.pop();
                if(operator.equals(""+"")){
                    ans=B+A;
                }
                else if(operator.equals(""-"")){
                    ans=B-A;
                }
                else if(operator.equals(""*"")){
                    ans=B*A;
                }
                else{
                    ans=B/A;
                }
                //System.out.println(ans.toString());
                numberStack.push(ans);
            }else if(data[i].equals(""("")){
                //System.out.println(""do nothing"");
            }else{
                    //System.out.println(""add number"");
                    //System.out.println(data[i].toString());
                  numberStack.push(Double.parseDouble(data[i]));
            }
        }

        return ans;
    }
    public void showStack(){

        Stack.Node printop=operatorStack.first;
        while (printop!=null){
            System.out.println(printop.item);
            printop=printop.next;
        }
        Stack.Node print=numberStack.first;
        while (print!=null){
            System.out.println(print.item);
            print=print.next;
        }

    }

    class Stack<T>{

        Node<T> first;
        class Node<T>{
            T item;
            Node next;

            Node(T item,Node next){
                this.item=item;
                this.next=next;
            }
        }
        public boolean isEmpty(){
            return first==null;
        }
        public void push(T item){
            Node oldfirst=first;
            first=new Node<T>(item,oldfirst);
            first.next=oldfirst;
        }
        public T pop(){
            T item=first.item;
            first=first.next;
            return item;
        }


    }
}

@6ae536b5dbbfff3a0afef8ab1615fe4d@"
"r04921065","10","0.096","105504","@c8fa9e476199ccb010eb8314b0089402@
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Stack;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 余軒
 */
public class Calculator {
        
    public Double ans(String e){
        
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String[] a = e.split("" "");
        
        for (int i=0;i< a.length;i++){
            if (a[i].equals(""("")) ;
            else if ((a[i].equals(""+""))||(a[i].equals(""-""))||(a[i].equals(""*""))||(a[i].equals(""/"")))
                    {
                       ops.push(a[i]);
                    }
            else if (a[i].equals("")"")){
               String op = ops.pop();
               if (op.equals(""+"")) vals.push(vals.pop()+vals.pop());
               else if (op.equals(""-"")){
                   double temp1 = vals.pop();
                   double temp2 = vals.pop();
                   vals.push(temp2-temp1);}
               else if (op.equals(""*"")) vals.push(vals.pop()*vals.pop());
               else if (op.equals(""/"")){ 
                   double temp1 = vals.pop();
                   double temp2 = vals.pop();
                   vals.push(temp2/temp1);}
               //else break;
            }
            else vals.push(Double.parseDouble(a[i]));
            
        }
        double x = vals.pop();
            return x; //null為你算出的答案  Double 為 class
    }
    
    
    
    
    
   public static void main(String[] args) throws IOException {
        // TODO code application logic here
       try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
           String data = br.readLine();
           Calculator cct = new Calculator();
           double y = cct.ans(data);
           
           System.out.println(y);
           //System.out.println(data);
           //System.out.println(data[2]);
    }
   }
}
@c8fa9e476199ccb010eb8314b0089402@"
"r04921028","0","0.09","105488","@b1b6a5267249a10341fa0bdb261b523e@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author DANNY
 */
class Calculator {
    
    public double ans (String [] buf) {
      // please replace the following null to the answer you calculated.
      double a = 0;
      double b = 0;
      double c = 0;
      
      int counter = 0;
      
      Stack<String> ops = new Stack<String>();
      Stack<Double> vals = new Stack<Double>(); 
      
      while(counter != buf.length){
          
            if (buf[counter].equals(""("")) ;
            else if (buf[counter].equals(""+"")) ops.push(buf[counter]);
            else if (buf[counter].equals(""-"")) ops.push(buf[counter]);
            else if (buf[counter].equals(""*"")) ops.push(buf[counter]);
            else if (buf[counter].equals(""/"")) ops.push(buf[counter]);
            else if (buf[counter].equals("")""))
            {
            String op = ops.pop();
            if (op.equals(""+"")){ b = vals.pop(); c = vals.pop();vals.push(c+b);}
            else if (op.equals(""-"")){ b = vals.pop(); c = vals.pop(); vals.push(c-b);}
            else if (op.equals(""*"")){ b = vals.pop(); c = vals.pop(); vals.push(c*b);}
            else if (op.equals(""/"")){ b = vals.pop(); c = vals.pop(); vals.push(c/b);}
            }
            else vals.push(Double.parseDouble(buf[counter]));
            
            counter++;
      }     
      a = vals.pop();
      
      return a;
    }
}

@b1b6a5267249a10341fa0bdb261b523e@"
"r04921028","0","0.09","105488","@2b9577789315a377dd03f2e0548452b0@
class Calculator {
    
    public double ans (String buf) {
      // please replace the following null to the answer you calculated.
      double a = 0;
      double b = 0;
      double c = 0;
      
      int counter = 0;
      
      Stack<String> ops = new Stack<String>();
      Stack<Double> vals = new Stack<Double>(); 
      
      while(counter != buf.length){
          
            if (buf[counter].equals(""("")) ;
            else if (buf[counter].equals(""+"")) ops.push(buf[counter]);
            else if (buf[counter].equals(""-"")) ops.push(buf[counter]);
            else if (buf[counter].equals(""*"")) ops.push(buf[counter]);
            else if (buf[counter].equals(""/"")) ops.push(buf[counter]);
            else if (buf[counter].equals("")""))
            {
            String op = ops.pop();
            if (op.equals(""+"")){ b = vals.pop(); c = vals.pop();vals.push(c+b);}
            else if (op.equals(""-"")){ b = vals.pop(); c = vals.pop(); vals.push(c-b);}
            else if (op.equals(""*"")){ b = vals.pop(); c = vals.pop(); vals.push(c*b);}
            else if (op.equals(""/"")){ b = vals.pop(); c = vals.pop(); vals.push(c/b);}
            }
            else vals.push(Double.parseDouble(buf[counter]));
            
            counter++;
      }     
      a = vals.pop();
      
      return a;
    }
}

@2b9577789315a377dd03f2e0548452b0@"
"b02611023","3","0.98","109808","@17293d0bcaeef32d2396217f1cb31c5f@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
public class Calculator {

    /*public static void main(String[] args) {
        Calculator cal = new Calculator();
        double ans = cal.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"");
         System.out.println(ans);
    }*/

    public Double ans(String e) {
        String[] data = e.split("" "");
        String Str = ""[0-9\\.]+"";
        String op = """";

        double temp = 0.0;

        LinkedStack<Double> num = new LinkedStack<Double>();

        for (int i = 0; i < data.length; i++) {
            int count = 1;
            int comp1 = 0;
            int comp2 = 0;
            double[] f_s = new double[2];
            for (int j = i; j >= 0; j--) {
                if (data[i].equals("")"")) {
                    //data[i] = ""c"";
                    if (data[j].matches(""[0-9\\.]+"")) {
                        //System.out.println(data[j]);
                        f_s[count] = Double.parseDouble(data[j]);
                        comp1 = j;
                        //System.out.println(f_s[count]);
                        count--;
                        data[j] = ""c"";
                    }
                    if (data[j].matches(""[\\+\\-\\*\\/]"")) {
                        comp2 = j;
                        op = data[j];
                        data[j] = ""c"";
                        //System.out.println(comp2);
                    }
                    if (data[j].equals(""("")) {
                        //System.out.println(f_s[0] + "" "" + f_s[1]);
                        //System.out.println(comp1 + "" "" + comp2);
                        if (comp1 > comp2) {
                            if (num.isEmpty()) {
                                temp = count(f_s[0], op, f_s[1]);
                                //System.out.println(temp);
                                num.push(temp);
                            } else {
                                if (f_s[0] == 0.0) {
                                    temp = count(num.pop(), op, f_s[1]);
                                    num.push(temp);
                                }
                                //temp = cal.count(num.pop(), op, f_s[1]);
                                //System.out.println(temp);
                                //num.push(temp);
                            }
                        } else {
                            if (num.isEmpty()) {
                                //System.out.println(f_s[0] + "" "" + f_s[1]);
                                //System.out.println(comp1 + "" "" + comp2);
                                //System.out.println(data[comp2]);
                                temp = count(f_s[0], op, f_s[1]);
                                //temp = cal.count(1.0, ""+"", 2.0);
                                //System.out.println(temp);
                                num.push(temp);
                            } else {
                                /*if (comp1 == 0) {
                                 double a = num.pop();
                                 double b = num.pop();
                                 temp = cal.count(b, op, a);
                                 num.push(temp);
                                 } else {*/
                                if (f_s[0] == 0.0) {
                                    if (f_s[1] == 0.0) {
                                        double a = num.pop();
                                        double b = num.pop();
                                        temp = count(b, op, a);
                                        num.push(temp);
                                    } else {
                                        temp = count(f_s[1], op, num.pop());
                                        //System.out.println(temp);
                                        num.push(temp);
                                    }

                                } else {
                                    temp = count(f_s[0], op, f_s[1]);
                                    num.push(temp);
                                }
                                //temp = cal.count(f_s[1], op, num.pop());
                                //System.out.println(temp);
                                //num.push(temp);

                            }
                        }
                        data[j] = ""c"";
                        break;
                    }

                } else {
                    break;
                }
            }
        }
        return num.pop();
    }

    public Double count(double a, String b, double c) {
        double count = 0.0;
        if (b.equals(""+"")) {
            count = a + c;
        }
        if (b.equals(""-"")) {
            count = a - c;
        }
        if (b.equals(""*"")) {
            count = a * c;
        }
        if (b.equals(""/"")) {
            count = a / c;
        }
        return count;
    }

}

@17293d0bcaeef32d2396217f1cb31c5f@"
"r04921028","0","0","0","@e77d27a1d4fd434ccb752f75b389e196@class Calculator {
    
    public Double ans (String  e) {
      // please replace the following null to the answer you calculated.
      double a = 0;
      double b = 0;
      double c = 0;
      
      int counter = 0;
      
      Stack<String> ops = new Stack<String>();
      Stack<Double> vals = new Stack<Double>(); 
      String[] buf = e.split("""");
      while(counter != buf.length){
          
            if (buf[counter].equals(""("")) ;
            else if (buf[counter].equals(""+"")) ops.push(buf[counter]);
            else if (buf[counter].equals(""-"")) ops.push(buf[counter]);
            else if (buf[counter].equals(""*"")) ops.push(buf[counter]);
            else if (buf[counter].equals(""/"")) ops.push(buf[counter]);
            else if (buf[counter].equals("")""))
            {
            String op = ops.pop();
            if (op.equals(""+"")){ b = vals.pop(); c = vals.pop();vals.push(c+b);}
            else if (op.equals(""-"")){ b = vals.pop(); c = vals.pop(); vals.push(c-b);}
            else if (op.equals(""*"")){ b = vals.pop(); c = vals.pop(); vals.push(c*b);}
            else if (op.equals(""/"")){ b = vals.pop(); c = vals.pop(); vals.push(c/b);}
            }
            
            else vals.push(Double.parseDouble(buf[counter]));
            
            counter++;
      }     
      a = vals.pop();
      
      return a;
    }
}

@e77d27a1d4fd434ccb752f75b389e196@"
"r04921028","10","0.099","105776","@ea8e71f113e8e8f0db8fc37430f16e27@class Calculator {
    
    public Double ans (String  e) {
      // please replace the following null to the answer you calculated.
      double a = 0;
      double b = 0;
      double c = 0;
      
      int counter = 0;
      
      Stack<String> ops = new Stack<String>();
      Stack<Double> vals = new Stack<Double>(); 
      String[] buf = e.split("" "");
      while(counter != buf.length){
          
            if (buf[counter].equals(""("")) ;
            else if (buf[counter].equals("" "")) ;
            else if (buf[counter].equals(""+"")) ops.push(buf[counter]);
            else if (buf[counter].equals(""-"")) ops.push(buf[counter]);
            else if (buf[counter].equals(""*"")) ops.push(buf[counter]);
            else if (buf[counter].equals(""/"")) ops.push(buf[counter]);
            else if (buf[counter].equals("")""))
            {
            String op = ops.pop();
            if (op.equals(""+"")){ b = vals.pop(); c = vals.pop();vals.push(c+b);}
            else if (op.equals(""-"")){ b = vals.pop(); c = vals.pop(); vals.push(c-b);}
            else if (op.equals(""*"")){ b = vals.pop(); c = vals.pop(); vals.push(c*b);}
            else if (op.equals(""/"")){ b = vals.pop(); c = vals.pop(); vals.push(c/b);}
            }
            else vals.push(Double.parseDouble(buf[counter]));
            
            counter++;
      }     
      a = vals.pop();
      
      return a;
    }
}

@ea8e71f113e8e8f0db8fc37430f16e27@"
"b02611028","10","0.101","111792","@5c591466d7e0ce2fb0b64be04e0f00ac@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Han
 */
import java.io.FileReader;
import java.io.BufferedReader;

public class Calculator {

    public Double ans(String e) {
        double a = 0.0;
        Stack<String> s = new Stack<String>();

        for (int i = 0; i < e.split("" "").length; i++) {
            String c = e.split("" "")[i];
            s.push(c);
            //System.out.print(c+"" "");

            if (s.iterator().next().equals("")"")) {
                s.pop();
                double x=Double.parseDouble(s.pop());
                String cal=s.pop();
                double y=Double.parseDouble(s.pop());
                s.pop();
                if(cal.equals(""+""))x=y+x;
                if(cal.equals(""-""))x=y-x;
                if(cal.equals(""*""))x=y*x;
                if(cal.equals(""/""))x=y/x;
                s.push(String.valueOf(x));
                //System.out.print(x);
            }
                //System.out.print(1);

        }
        a=Double.parseDouble(s.pop());
        return a;
    }

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(""input.txt""))) {
            Calculator cct = new Calculator();
            String b = br.readLine();
            System.out.print(cct.ans(b));
            /*String aaa="")"";
             System.out.print(aaa.equals("")""));*/
            //System.out.print(b.split("" "").length);

        }
    }
}

@5c591466d7e0ce2fb0b64be04e0f00ac@"
"b02611023","3","0.33","107552","@c7d200c48076d00e9c815844f65bea55@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
public class Calculator {

    /*public static void main(String[] args) {
        Calculator cal = new Calculator();
        double ans = cal.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"");
         System.out.println(ans);
    }*/

    public Double ans(String e) {
        String[] data = e.split("" "");
        String Str = ""[0-9\\.]+"";
        String op = """";

        double temp = 0.0;

        LinkedStack<Double> num = new LinkedStack<Double>();

        for (int i = 0; i < data.length; i++) {
            int count = 1;
            int comp1 = 0;
            int comp2 = 0;
            double[] f_s = new double[2];
            for (int j = i; j >= 0; j--) {
                if (data[i].equals("")"")) {
                    //data[i] = ""c"";
                    if (data[j].matches(""[0-9\\.]+"")) {
                        //System.out.println(data[j]);
                        f_s[count] = Double.parseDouble(data[j]);
                        comp1 = j;
                        //System.out.println(f_s[count]);
                        count--;
                        data[j] = ""c"";
                    }
                    if (data[j].matches(""[\\+\\-\\*\\/]"")) {
                        comp2 = j;
                        op = data[j];
                        data[j] = ""c"";
                        //System.out.println(comp2);
                    }
                    if (data[j].equals(""("")) {
                        //System.out.println(f_s[0] + "" "" + f_s[1]);
                        //System.out.println(comp1 + "" "" + comp2);
                        if(f_s[0] == 0.0 && f_s[1] == 0.0){
                            double a = num.pop();
                            double b = num.pop();
                            temp = count(b,op,a);
                            num.push(temp);
                        }
                        else if(f_s[0] == 0.0 && f_s[1] != 0.0){
                            if(comp1>comp2){
                                temp = count(num.pop(),op,f_s[1]);
                                num.push(temp);
                            }
                            else{
                                temp = count(f_s[1],op,num.pop());
                                num.push(temp);
                            }
                        }
                        else{
                            temp = count(f_s[0],op,f_s[1]);
                            num.push(temp);
                        }


                        data[j] = ""c"";
                        break;
                    }

                } else {
                    break;
                }
            }
        }
        return num.pop();
    }

    public Double count(double a, String b, double c) {
        double count = 0.0;
        if (b.equals(""+"")) {
            count = a + c;
        }
        if (b.equals(""-"")) {
            count = a - c;
        }
        if (b.equals(""*"")) {
            count = a * c;
        }
        if (b.equals(""/"")) {
            count = a / c;
        }
        return count;
    }

}

@c7d200c48076d00e9c815844f65bea55@"
"r04945039","0","1.21","110576","@4c5f54224d380666b2a0719ee9bcbe41@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Kestin
 */

import java.util.Scanner;
public class Calculator {
    Double answer;
    private static Stack<String> ops  = new Stack<String>();
    private static Stack<Double> vals = new Stack<Double>();

    private boolean ignore(String x){
        return x.equals(""("");
    }
    
    private boolean isPlus(String x){
        return x.equals(""+"");
    }

    private boolean isMinus (String x){
        return x.equals(""-""); 
    }

    private boolean isTimes (String x){
        return x.equals(""*""); 
    }

    private boolean isDivision (String x){
        return x.equals(""/""); 
    }
    
    private void startCal(){
        String op = ops.pop();
        
        if (ignore(op))  ;
        else if (isPlus(op))    vals.push(vals.pop()+vals.pop());
        else if (isTimes(op)) vals.push(vals.pop() * vals.pop());
        else if (isMinus(op)) {
            Double nex = vals.pop();
            Double first = vals.pop();
            
            vals.push(first-nex);
        }
        else if (isDivision(op)) {
            Double nex = vals.pop();
            Double first = vals.pop();
            
            vals.push(first/nex);
        }
        
    }

    public Double ans (String e) {
        
        Scanner scanner = new Scanner(e).useDelimiter("" "");
        //System.out.println(scanner.next());
        while (scanner.hasNext()==true) {
            String s = scanner.next();
            System.out.println(s);
            if (ignore(s)) ;
            else if (isPlus(s))    ops.push(s);          
            else if (isTimes(s))    ops.push(s);
            else if (isMinus(s))    ops.push(s);
            else if (isDivision(s))    ops.push(s);
            else if (s.equals("")""))    { startCal();          
            }
            else vals.push(Double.parseDouble(s));
           
        }  
       return vals.pop();
        //return vals.pop(); 
    }




    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        Calculator cct = new Calculator();
        String question = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"";
        cct.ans(question);
        
    }


}

@4c5f54224d380666b2a0719ee9bcbe41@"
"r04945039","10","0.119","110544","@042516f35c2592540262c485bd3c1d88@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Kestin
 */

import java.util.Scanner;
public class Calculator {
    Double answer;
    private static Stack<String> ops  = new Stack<String>();
    private static Stack<Double> vals = new Stack<Double>();

    private boolean ignore(String x){
        return x.equals(""("");
    }
    
    private boolean isPlus(String x){
        return x.equals(""+"");
    }

    private boolean isMinus (String x){
        return x.equals(""-""); 
    }

    private boolean isTimes (String x){
        return x.equals(""*""); 
    }

    private boolean isDivision (String x){
        return x.equals(""/""); 
    }
    
    private void startCal(){
        String op = ops.pop();
        
        if (ignore(op))  ;
        else if (isPlus(op))    vals.push(vals.pop()+vals.pop());
        else if (isTimes(op)) vals.push(vals.pop() * vals.pop());
        else if (isMinus(op)) {
            Double nex = vals.pop();
            Double first = vals.pop();
            
            vals.push(first-nex);
        }
        else if (isDivision(op)) {
            Double nex = vals.pop();
            Double first = vals.pop();
            
            vals.push(first/nex);
        }
        
    }

    public Double ans (String e) {
        
        Scanner scanner = new Scanner(e).useDelimiter("" "");
        //System.out.println(scanner.next());
        while (scanner.hasNext()==true) {
            String s = scanner.next();
            //System.out.println(s);
            if (ignore(s)) ;
            else if (isPlus(s))    ops.push(s);          
            else if (isTimes(s))    ops.push(s);
            else if (isMinus(s))    ops.push(s);
            else if (isDivision(s))    ops.push(s);
            else if (s.equals("")""))    { startCal();          
            }
            else vals.push(Double.parseDouble(s));
           
        }  
       return vals.pop();
        //return vals.pop(); 
    }




    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* TODO code application logic here
        Calculator cct = new Calculator();
        String question = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"";
        cct.ans(question);
        */
    }


}

@042516f35c2592540262c485bd3c1d88@"
"b02611016","10","0.099","105840","@d2c3f79f10da23885b9fe73e67f476c3@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
//import algs4.Stack;
/**
 *
 * @author Lab304
 */
import java.io.FileReader;
import java.io.BufferedReader;
public class Calculator {

       public Double ans (String e){
           String[] sample=new String[100];
         Stack calculator=new Stack(); 
           String[] data = e.split("" "");
           int j=0;
           double count=0;
           //System.out.println( data[3]);
     for(int i=0;i<data.length;i++){
         if(data[i].equals("")"")){
             for( j=0;j<data.length;j++){
                 if(calculator.peek().equals(""("")){
                     calculator.pop();
                       break;
                     }
                 else{String ABC=String.valueOf(calculator.pop());
                  sample[j]=ABC;
                  //System.out.println( sample[j]);
                 // System.out.println(j);
                     }
                }
              for(int k=j-1;k>=0;k--){ //System.out.println(k);
                                     if(sample[k].equals(""*"")){
                                             Double x=Double.parseDouble(sample[k-1]);
                                              Double y=Double.parseDouble(sample[k+1]);
                                             count=y*x;
                                             //System.out.println(k);
                                           // System.out.println(count);
                                                   }
                                     else if(sample[k].equals(""/"")){
                                             Double x=Double.parseDouble(sample[k-1]);
                                              Double y=Double.parseDouble(sample[k+1]);
                                             count=y/x;
                                             //System.out.println(k);
                                            //System.out.println(count);
                                                   }
                                     else if(sample[k].equals(""+"")){
                                             Double x=Double.parseDouble(sample[k-1]);
                                             Double y=Double.parseDouble(sample[k+1]);
                                             count=y+x;
                                             //System.out.println(k);
                                           // System.out.println(count);
                                                   }
                                     else if(sample[k].equals(""-"")){
                                             Double x=Double.parseDouble(sample[k-1]);
                                              Double y=Double.parseDouble(sample[k+1]);
                                             count=y-x;
                                            // System.out.println(k);
                                           // System.out.println(count);
                                                   }
                                        
                                    }
              calculator.push(count);
             }
         else{
          calculator.push(data[i]);
          //System.out.println( calculator.peek());
         }
         }
   
           Double total=Double.parseDouble(String.valueOf(calculator.peek()));
        //   System.out.println(total);
      return   total;
}
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args)  {
    //    Calculator cct = new Calculator() ;
       // cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"");
        
     
        // TODO code application logic here
    }
    
}

@d2c3f79f10da23885b9fe73e67f476c3@"
"r03525008","0","0.98","105520","@6bbefaa429159941e65925a7ea8adf9d@import java.util.DoubleSummaryStatistics;
import java.util.Stack;

/**
 * Created by 其昌 on 2016/3/22.
 */
public class Calculator {
    public Double ans(String e){
        Stack<Character> ops = new Stack<>();
        Stack<Double> vals = new Stack<>();
        String num = """";
        for(int i = 0 ; i < e.length() ; i++){
            char c = e.charAt(i);
            switch (c){
                case ' ':
                    if(!num.equals("""")){
                        vals.push(Double.parseDouble(num));
                    }
                    num = """";
                    break;
                case '(':
                    break;
                case '+':
                case '-':
                case '*':
                case '/':
                    ops.push(c);
                    break;
                case ')':
                    char op = ops.pop();
                    switch (op){
                        case '+':
                            vals.push(vals.pop() + vals.pop());
                            break;
                        case '-':
                            vals.push(-vals.pop() + vals.pop());
                            break;
                        case '*':
                            vals.push(vals.pop() * vals.pop());
                            break;
                        case '/':
                            Double d2 = vals.pop();
                            Double d1 = vals.pop();
                            vals.push(d1/d2);
                            break;
                    }


                    Double d = vals.pop();
                    System.out.println(d);
                    vals.push(d);
                    break;
                default:
                    num += c;
            }
        }
        return vals.pop();
    }
}

@6bbefaa429159941e65925a7ea8adf9d@"
"r03525008","4","0.94","105504","@62bb8de7ab66d28b4f898ab82bbf4889@import java.util.DoubleSummaryStatistics;
import java.util.Stack;

/**
 * Created by 其昌 on 2016/3/22.
 */
public class Calculator {
    public Double ans(String e){
        Stack<Character> ops = new Stack<>();
        Stack<Double> vals = new Stack<>();
        String num = """";
        for(int i = 0 ; i < e.length() ; i++){
            char c = e.charAt(i);
            switch (c){
                case ' ':
                    if(!num.equals("""")){
                        vals.push(Double.parseDouble(num));
                    }
                    num = """";
                    break;
                case '(':
                    break;
                case '+':
                case '-':
                case '*':
                case '/':
                    ops.push(c);
                    break;
                case ')':
                    char op = ops.pop();
                    switch (op){
                        case '+':
                            vals.push(vals.pop() + vals.pop());
                            break;
                        case '-':
                            vals.push(-vals.pop() + vals.pop());
                            break;
                        case '*':
                            vals.push(vals.pop() * vals.pop());
                            break;
                        case '/':
                            Double d2 = vals.pop();
                            Double d1 = vals.pop();
                            vals.push(d1/d2);
                            break;
                    }


                    Double d = vals.pop();
                    vals.push(d);
                    break;
                default:
                    num += c;
            }
        }
        return vals.pop();
    }
}

@62bb8de7ab66d28b4f898ab82bbf4889@"
"r04945009","10","0.1","105872","@07e577c2a35b8ffdae8ae73606b255f1@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author hung-wei
 */
public class Calculator {
    
    private Stack<String> C ;
    
    public Double ans (String str) {
        
            String[] Line1 = str.split("" "");
            C = new Stack();
            for (int i=0; i<Line1.length; i++){
                if (Line1[i].equals(""(""))
                    continue;
                else if (Line1[i].equals("")"")){
                    Compute();
                }                    
                else C.push(Line1[i]);
            }
      return Double.parseDouble(C.pop());
    }
    
    
    public void Compute(){
        double num2 = Double.parseDouble(C.pop());
        String sign = C.pop();
        double num1 = Double.parseDouble(C.pop());
        if (sign.equals(""+""))
            C.push( String.valueOf(num1+num2) );
        else if (sign.equals(""-""))
            C.push( String.valueOf(num1-num2) );
        else if (sign.equals(""*""))
            C.push( String.valueOf(num1*num2) );
        else if (sign.equals(""/""))
            C.push( String.valueOf(num1/num2) );
    }
    
    public static void main(String[] args) {
        Calculator cct = new Calculator();
        String str = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "";
        System.out.println(cct.ans(str));
    }
}

@07e577c2a35b8ffdae8ae73606b255f1@"
"b02611023","3","0.3","107952","@17e4f79b2a353b5998d6bb55e6d6f2ba@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
public class Calculator {

    /*public static void main(String[] args) {
        Calculator cal = new Calculator();
        double ans = cal.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 0.5 / 5 ) )"");
         System.out.println(ans);
    }*/

    public Double ans(String e) {
        String[] data = e.split("" "");
        String Str = ""[0-9\\.]+"";
        String op = """";

        double temp = 0.0;

        LinkedStack<Double> num = new LinkedStack<Double>();

        for (int i = 0; i < data.length; i++) {
            if(data[i].matches(Str)){
                num.push(Double.parseDouble(data[i]));
            }
            for (int j = i; j >= 0; j--) {
                if(data[i].equals("")"")){
                    if(data[j].matches(""[\\+\\-\\*\\/]"")){
                        double a = num.pop();
                        double b = num.pop();
                        double ans = count(b,data[j],a);
                        num.push(ans);
                        data[j] = """";
                        break;
                    }
                }
            }
        }
        return num.pop();
    }

    public Double count(double a, String b, double c) {
        double count = 0.0;
        if (b.equals(""+"")) {
            count = a + c;
        }
        if (b.equals(""-"")) {
            count = a - c;
        }
        if (b.equals(""*"")) {
            count = a * c;
        }
        if (b.equals(""/"")) {
            count = a / c;
        }
        return count;
    }

}

@17e4f79b2a353b5998d6bb55e6d6f2ba@"
"b02611023","3","0.3","107872","@17e4f79b2a353b5998d6bb55e6d6f2ba@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
public class Calculator {

    /*public static void main(String[] args) {
        Calculator cal = new Calculator();
        double ans = cal.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 0.5 / 5 ) )"");
         System.out.println(ans);
    }*/

    public Double ans(String e) {
        String[] data = e.split("" "");
        String Str = ""[0-9\\.]+"";
        String op = """";

        double temp = 0.0;

        LinkedStack<Double> num = new LinkedStack<Double>();

        for (int i = 0; i < data.length; i++) {
            if(data[i].matches(Str)){
                num.push(Double.parseDouble(data[i]));
            }
            for (int j = i; j >= 0; j--) {
                if(data[i].equals("")"")){
                    if(data[j].matches(""[\\+\\-\\*\\/]"")){
                        double a = num.pop();
                        double b = num.pop();
                        double ans = count(b,data[j],a);
                        num.push(ans);
                        data[j] = """";
                        break;
                    }
                }
            }
        }
        return num.pop();
    }

    public Double count(double a, String b, double c) {
        double count = 0.0;
        if (b.equals(""+"")) {
            count = a + c;
        }
        if (b.equals(""-"")) {
            count = a - c;
        }
        if (b.equals(""*"")) {
            count = a * c;
        }
        if (b.equals(""/"")) {
            count = a / c;
        }
        return count;
    }

}

@17e4f79b2a353b5998d6bb55e6d6f2ba@"
"b02611023","1","0.1","104272","@ef492f9da1bf95e37b6b071ef9099d04@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
public class Calculator {

    /*public static void main(String[] args) {
        Calculator cal = new Calculator();
        double ans = cal.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 0.5 / 5 ) )"");
         System.out.println(ans);
    }*/

    public Double ans(String e) {
        String[] data = e.split("" "");
        String Str = ""[0-9]+"";
        String op = """";

        double temp = 0.0;

        LinkedStack<Double> num = new LinkedStack<Double>();

        for (int i = 0; i < data.length; i++) {
            if(data[i].matches(Str)){
                num.push(Double.parseDouble(data[i]));
            }
            for (int j = i; j >= 0; j--) {
                if(data[i].equals("")"")){
                    if(data[j].matches(""[*-/+]"")){
                        double a = num.pop();
                        double b = num.pop();
                        double ans = count(b,data[j],a);
                        num.push(ans);
                        data[j] = "" "";
                        break;
                    }
                }
            }
        }
        return num.pop();
    }

    public Double count(double a, String b, double c) {
        double count = 0.0;
        if (b.equals(""+"")) {
            count = a + c;
        }
        if (b.equals(""-"")) {
            count = a - c;
        }
        if (b.equals(""*"")) {
            count = a * c;
        }
        if (b.equals(""/"")) {
            count = a / c;
        }
        return count;
    }

}

@ef492f9da1bf95e37b6b071ef9099d04@"
"b02611023","3","0.31","102928","@2c29d4c65ffdf710fc9de273bb122c7c@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
public class Calculator {

    /*public static void main(String[] args) {
        Calculator cal = new Calculator();
        double ans = cal.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 0.5 / 5 ) )"");
         System.out.println(ans);
    }*/

    public Double ans(String e) {
        String[] data = e.split("" "");
        String Str = ""\\d+\\.*\\d*"";
        String op = """";

        double temp = 0.0;

        LinkedStack<Double> num = new LinkedStack<Double>();

        for (int i = 0; i < data.length; i++) {
            if(data[i].matches(Str)){
                num.push(Double.parseDouble(data[i]));
            }
            for (int j = i-1; j >= 0; j--) {
                if(data[i].equals("")"")){
                    if(data[j].matches(""[*-/+]"")){
                        double a = num.pop();
                        double b = num.pop();
                        double ans = count(b,data[j],a);
                        num.push(ans);
                        data[j] = ""c"";
                        break;
                    }
                }
            }
        }
        return num.pop();
    }

    public Double count(double a, String b, double c) {
        double count = 0.0;
        if (b.equals(""+"")) {
            count = a + c;
        }
        if (b.equals(""-"")) {
            count = a - c;
        }
        if (b.equals(""*"")) {
            count = a * c;
        }
        if (b.equals(""/"")) {
            count = a / c;
        }
        return count;
    }

}

@2c29d4c65ffdf710fc9de273bb122c7c@"
"b02611023","3","0.31","105856","@96a26bc300d547ebe3528364d2819962@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
public class Calculator {

    /*public static void main(String[] args) {
     Calculator cal = new Calculator();
     double ans = cal.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"");
     System.out.println(ans);
     }*/
    public Double ans(String e) {
        String[] data = e.split("" "");
        String Str = ""\\d+\\.*\\d*"";
        String op = """";

        double temp = 0.0;

        LinkedStack<String> num = new LinkedStack<String>();

        for (int i = 0; i < data.length; i++) {
            if (data[i].matches(Str)) {
                num.push(data[i]);
            }
            if (data[i].matches(""[*-/+]"")) {
                num.push(data[i]);
            }
            if (data[i].equals("")"")) {
                double a = Double.parseDouble(num.pop());
                op = num.pop();
                double b = Double.parseDouble(num.pop());
                double ans = count(b, op, a);
                num.push(Double.toString(ans));
            }

        }
        return Double.parseDouble(num.pop());
    }

    public Double count(double a, String b, double c) {
        double count = 0.0;
        if (b.equals(""+"")) {
            count = a + c;
        }
        if (b.equals(""-"")) {
            count = a - c;
        }
        if (b.equals(""*"")) {
            count = a * c;
        }
        if (b.equals(""/"")) {
            count = a / c;
        }
        return count;
    }

}

@96a26bc300d547ebe3528364d2819962@"
"b02611023","3","0.3","104160","@11c90d57e2a1533246e2e88bd89ec0f1@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
public class Calculator {

    /*public static void main(String[] args) {
     Calculator cal = new Calculator();
     double ans = cal.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"");
     System.out.println(ans);
     }*/
    public Double ans(String e) {
        String[] data = e.split("" "");
        String Str = ""\\d+\\.*\\d*"";
        String op = """";

        double ans = 0.0;

        LinkedStack<String> num = new LinkedStack<String>();

        for (int i = 0; i < data.length; i++) {
            if (data[i].matches(Str)) {
                num.push(data[i]);
            }
            if (data[i].matches(""[*-/+]"")) {
                num.push(data[i]);
            }
            if (data[i].equals("")"")) {
                double a = Double.parseDouble(num.pop());
                op = num.pop();
                double b = Double.parseDouble(num.pop());
                if (op.equals(""+"")) {
                    ans = b + a;
                }
                if (op.equals(""-"")) {
                    ans = b - a;
                }
                if (op.equals(""*"")) {
                    ans = b * a;
                }
                if (op.equals(""/"")) {
                    ans = b / a;
                }
                num.push(Double.toString(ans));
            }

        }
        return Double.parseDouble(num.pop());
    }

}

@11c90d57e2a1533246e2e88bd89ec0f1@"
"b02611023","3","0.3","105664","@e318e08064e01abea928f1f2f5501c24@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
public class Calculator {

    /*public static void main(String[] args) {
     Calculator cal = new Calculator();
     double ans = cal.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"");
     System.out.println(ans);
     }*/
    public Double ans(String e) {
        String[] data = e.split("" "");
        String Str = ""\\d+\\.*\\d*"";
        String op = """";

        double ans = 0.0;

        LinkedStack<String> num = new LinkedStack<>();

        for (int i = 0; i < data.length; i++) {
            if (data[i].matches(Str)) {
                num.push(data[i]);
            }
            if (data[i].matches(""[*-/+]"")) {
                num.push(data[i]);
            }
            if (data[i].equals("")"")) {
                double a = Double.parseDouble(num.pop());
                op = num.pop();
                double b = Double.parseDouble(num.pop());
                
                if (op.equals(""+"")) {
                    ans = b + a;
                }
                if (op.equals(""-"")) {
                    ans = b - a;
                }
                if (op.equals(""*"")) {
                    ans = b * a;
                }
                if (op.equals(""/"")) {
                    ans = b / a;
                }
                num.push(Double.toString(ans));
            }

        }
        return Double.parseDouble(num.pop());
    }

}

@e318e08064e01abea928f1f2f5501c24@"
"b02611023","3","0.3","105776","@e9b0e75a553f68c7088750b0464aa9c9@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
public class Calculator {

    /*public static void main(String[] args) {
     Calculator cal = new Calculator();
     double ans = cal.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"");
     System.out.println(ans);
     }*/
    public Double ans(String e) {
        String[] data = e.split("" "");
        String Str = ""\\d+\\.*\\d*"";
        String op = """";

        double ans = 0.0;

        Stack<String> num = new Stack<String>();

        for (int i = 0; i < data.length; i++) {
            if (data[i].matches(Str)) {
                num.push(data[i]);
            }
            if (data[i].matches(""[*-/+]"")) {
                num.push(data[i]);
            }
            if (data[i].equals("")"")) {
                double a = Double.parseDouble(num.pop());
                op = num.pop();
                double b = Double.parseDouble(num.pop());
                
                if (op.equals(""+"")) {
                    ans = b + a;
                }
                if (op.equals(""-"")) {
                    ans = b - a;
                }
                if (op.equals(""*"")) {
                    ans = b * a;
                }
                if (op.equals(""/"")) {
                    ans = b / a;
                }
                num.push(Double.toString(ans));
            }

        }
        return Double.parseDouble(num.pop());
    }

}

@e9b0e75a553f68c7088750b0464aa9c9@"
"b02611023","3","0.3","105776","@022191ffd5f0a01f5984102f65c047fd@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
public class Calculator {

    /*public static void main(String[] args) {
     Calculator cal = new Calculator();
     double ans = cal.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"");
     System.out.println(ans);
     }*/
    public Double ans(String e) {
        String[] data = e.split("" "");
        String Str = ""\\d+\\.*\\d*"";
        String op = """";

        double ans = 0.0;

        Stack<String> num = new Stack<String>();

        for (int i = 0; i < data.length; i++) {
            if (data[i].matches(Str)) {
                num.push(data[i]);
            }
            if (data[i].matches(""[*-/+]"")) {
                num.push(data[i]);
            }
            if (data[i].equals("")"")) {
                double a = Double.parseDouble(num.pop());
                op = num.pop();
                double b = Double.parseDouble(num.pop());
                
                if (op.equals(""+"")) {
                    ans = b + a;
                }
                if (op.equals(""-"")) {
                    ans = b - a;
                }
                if (op.equals(""*"")) {
                    ans = b * a;
                }
                if (op.equals(""/"")) {
                    ans = b / a;
                }
                num.push("""" + ans);
            }

        }
        return Double.parseDouble(num.pop());
    }

}

@022191ffd5f0a01f5984102f65c047fd@"
"b02611023","3","0.3","105840","@b000b2e5644bc91fe25bb27f6a536b50@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
public class Calculator {

    /*public static void main(String[] args) {
     Calculator cal = new Calculator();
     double ans = cal.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"");
     System.out.println(ans);
     }*/
    public Double ans(String e) {
        String[] data = e.split("" "");
        String Str = ""\\d+\\.*\\d*"";
        String op = """";

        double ans = 0.0;

        Stack<String> num = new Stack<String>();

        for (int i = 0; i < data.length; i++) {
            if (data[i].matches(Str)) {
                num.push(data[i]);
            }
            else if (data[i].matches(""[*-/+]"")) {
                num.push(data[i]);
            }
            else if (data[i].equals("")"")) {
                double a = Double.parseDouble(num.pop());
                op = num.pop();
                double b = Double.parseDouble(num.pop());
                
                if (op.equals(""+"")) {
                    ans = b + a;
                }
                if (op.equals(""-"")) {
                    ans = b - a;
                }
                if (op.equals(""*"")) {
                    ans = b * a;
                }
                if (op.equals(""/"")) {
                    ans = b / a;
                }
                num.push("""" + ans);
            }
            else{
                continue;
            }

        }
        return Double.parseDouble(num.pop());
    }

}

@b000b2e5644bc91fe25bb27f6a536b50@"
"b02611023","10","0.096","105808","@7c2df639100c8046595c4d080a2b12f2@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
public class Calculator {

    /*public static void main(String[] args) {
     Calculator cal = new Calculator();
     double ans = cal.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"");
     System.out.println(ans);
     }*/
    public Double ans(String e) {
        String[] data = e.split("" "");
        //String Str = ""\\d+\\.*\\d*"";
        String op = """";

        double ans = 0.0;

        Stack<String> num = new Stack<String>();

        for (int i = 0; i < data.length; i++) {
            if (data[i].equals(""("")) {
                continue;
            } else if (data[i].matches(""[*-/+]"")) {
                num.push(data[i]);
            } else if (data[i].equals("")"")) {
                double a = Double.parseDouble(num.pop());
                op = num.pop();
                double b = Double.parseDouble(num.pop());

                if (op.equals(""+"")) {
                    ans = b + a;
                }
                if (op.equals(""-"")) {
                    ans = b - a;
                }
                if (op.equals(""*"")) {
                    ans = b * a;
                }
                if (op.equals(""/"")) {
                    ans = b / a;
                }
                num.push("""" + ans);
            } else {
                num.push(data[i]);
            }

        }
        return Double.parseDouble(num.pop());
    }

}

@7c2df639100c8046595c4d080a2b12f2@"
"r04631006","0","0","0","@44e1dd2a663c66e48eed84d491f4218e@public class Calculator {

    public Double ans(String e) {
        // please replace the following null to the answer you calculated.
        return null;
    }

    public static void main(String[] args) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        while (!StdIn.isEmpty()) {
            String s = StdIn.readString();
            if (s.equals(""("")) {

            } else if (s.equals(""+"")) {
                ops.push(s);
            } else if (s.equals(""*"")) {
                ops.push(s);
            } else if (s.equals(""-"")) {
                ops.push(s);
            } else if (s.equals(""/"")) {
                ops.push(s);
            } else if (s.equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                }else if (op.equals(""-"")) {
                    vals.push(vals.pop() - vals.pop());
                }else if (op.equals(""/"")) {
                    vals.push(vals.pop() / vals.pop());
                }
            } else {
                vals.push(Double.parseDouble(s));
            }
        }
        StdOut.println(vals.pop());
    }

//    public static void main(String[] args) {
//        // TODO code application logic here
//    }
//    
}
@44e1dd2a663c66e48eed84d491f4218e@"
"r04631006","0","0","0","@6d19cdf41ac1cadac85fcd1f932d1db6@public class Calculator {

    public Double ans(String e) {
        // please replace the following null to the answer you calculated.

        if (e == null) {
            return null;
        } else {

            Stack<String> ops = new Stack<String>();
            Stack<Double> vals = new Stack<Double>();
            while (!StdIn.isEmpty()) {
                String s = StdIn.readString();
                if (s.equals(""("")) {

                } else if (s.equals(""+"")) {
                    ops.push(s);
                } else if (s.equals(""*"")) {
                    ops.push(s);
                } else if (s.equals(""-"")) {
                    ops.push(s);
                } else if (s.equals(""/"")) {
                    ops.push(s);
                } else if (s.equals("")"")) {
                    String op = ops.pop();
                    if (op.equals(""+"")) {
                        vals.push(vals.pop() + vals.pop());
                    } else if (op.equals(""*"")) {
                        vals.push(vals.pop() * vals.pop());
                    } else if (op.equals(""-"")) {
                        vals.push(vals.pop() - vals.pop());
                    } else if (op.equals(""/"")) {
                        vals.push(vals.pop() / vals.pop());
                    }
                } else {
                    vals.push(Double.parseDouble(s));
                }
            }
            StdOut.println(vals.pop());
        }
        return null;

    }
}
@6d19cdf41ac1cadac85fcd1f932d1db6@"
"b01b01039","0","0.3","105840","@9941e22089f2724cfb66986a7348a983@import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Scanner;

public class Calculator {
	private Double ans;
	private String[] equation;
	private Stack<Double> num;
	private Stack<String> operator;
	
	public Calculator(String eq){
		ans = 0.0;
		equation = eq.split("" "");
		num = new Stack<Double>();
		operator = new Stack<String>();
	}
	
	public void ans_print(){
		System.out.println(ans);
	}
	
	private void add_sub(){
		Double num_2 = num.pop();
		Double num_1 = num.pop();
		Double a = 0.0;
		//System.out.println(num_1);
		//System.out.println(num_2);
		switch(operator.pop()) {  
            case ""+"": 
				//System.out.printf(""%f + %f = %f\n"",num_1,num_2,num_1 + num_2);
				num.push(num_1 + num_2);
                break; 
            case ""-"": 
				//System.out.printf(""%f - %f = %f\n"",num_1,num_2,num_1 - num_2);
				num.push(num_1 - num_2); 
                break; 
            default: 
                System.out.println(""Error""); 
        }
	}
	
	private void mul_div(){
		Double num_2 = num.pop();
		Double num_1 = num.pop();
		Double a = 0.0;
		//System.out.println(num_1);
		//System.out.println(num_2);
		switch(operator.pop()) {  
            case ""*"": 
				//System.out.printf(""%f x %f = %f\n"",num_1,num_2,num_1 * num_2);
				num.push(num_1 * num_2);
                break; 
            case ""/"": 
                //System.out.printf(""%f / %f = %f\n"",num_1,num_2,num_1 / num_2);
				num.push(num_1 / num_2); 
                break; 
            default: 
                System.out.println(""Error""); 
        }
	}
	
	private void fin(){
		while(!operator.isEmpty()){
			ea();
		}
		ans = num.pop();
	}
	
	private void arrange(){
		for(String s : equation){
			//System.out.println(s);
			if(s.matches(""[0-9]+"") || s.matches(""[0-9]+.[0-9]+"")){
				Double n;
				try{
					n = Double.parseDouble(s);
				}catch(Exception ex){
					n = new Double(Integer.parseInt(s));
				}
				
				num.push(n);
				if(!operator.isEmpty()){
					String o = operator.peek();
					if(o.matches(""[*/]"")) mul_div();
				}
			}else if(s.matches(""[*+-/]"")){
				operator.push(s);
			}else if(s.equals("")"")){
				while(!operator.peek().equals(""e"")){
					ea();
				}
				operator.pop();
			}else if(s.equals(""("")){
				operator.push(""e"");
			}else{
				System.out.println(""Uknown input : "" + s +""."");
			} 
		}
		fin();
	}
	
	// Elementary arithmetic
	private void ea(){
		String o = operator.peek();
		if(o.matches(""[*/]"")) mul_div();
		if(o.matches(""[+-]"")) add_sub();
	}
	
	public Double ans (String e) {
		Calculator Cal = new Calculator(e);
		Cal.arrange();
		return ans;
	}
	
	public static void main(String[] args) throws Exception {
		// read equation
		String eq = new String();
		if(args.length == 0){
			Scanner scanner = new Scanner(System.in);
			System.out.printf(""Input equation :"");
			eq = scanner.nextLine();
		}else{
			eq = args[0];
		}
		Calculator Cal = new Calculator(eq);
		Cal.arrange();
		Cal.ans_print();
	}	
}
@9941e22089f2724cfb66986a7348a983@"
"r03525008","10","0.095","105424","@15d398efcb67d2c33dabaface7fbc58a@import java.util.Stack;

/**
 * Created by 其昌 on 2016/3/22.
 */
public class Calculator {
//    public Double ans(String e){
//        Stack<Character> ops = new Stack<>();
//        Stack<Double> vals = new Stack<>();
//        String num = """";
//        for(int i = 0 ; i < e.length() ; i++){
//            char c = e.charAt(i);
//            switch (c){
//                case ' ':
//                    if(!num.equals(""""))
//                        vals.push(Double.parseDouble(num));
//                    num = """";
//                    break;
//                case '(':
//                    break;
//                case '+':
//                case '-':
//                case '*':
//                case '/':
//                    ops.push(c);
//                    break;
//                case ')':
//                    char op = ops.pop();
//                    switch (op){
//                        case '+':
//                            vals.push(vals.pop() + vals.pop());
//                            break;
//                        case '-':
//                            vals.push(-vals.pop() + vals.pop());
//                            break;
//                        case '*':
//                            vals.push(vals.pop() * vals.pop());
//                            break;
//                        case '/':
//                            vals.push(1/vals.pop()*vals.pop());
//                            break;
//                    }
//                    break;
//                default:
//                    num += c;
//            }
//        }
//        return vals.pop();
//    }

    public Double ans(String e){
        Stack<String> ops = new Stack<>();
        Stack<Double> vals = new Stack<>();

        String[] input = e.split(""\\s"");
        for(String s:input){
            if (s.equals(""("")) ;
            else if (s.equals(""+"")) ops.push(s);
            else if (s.equals(""-"")) ops.push(s);
            else if (s.equals(""*"")) ops.push(s);
            else if (s.equals(""/"")) ops.push(s);
            else if (s.equals("")""))
            {
                String op = ops.pop();
                if (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
                else if (op.equals(""-"")) vals.push(-vals.pop() + vals.pop());
                else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
                else if (op.equals(""/"")) vals.push(1/vals.pop()*vals.pop());
            }
            else vals.push(Double.parseDouble(s));
        }
        return vals.pop();

    }




}

@15d398efcb67d2c33dabaface7fbc58a@"
"b01b01039","0","0.41","108336","@1a88cd99b62877f7626cb35110c911e9@import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Scanner;

public class Calculator {
	private Double ans;
	private String[] equation;
	private Stack<Double> num;
	private Stack<String> operator;
	
	public Calculator(){
		ans = 0.0;
		//equation = eq.split("" "");
		num = new Stack<Double>();
		operator = new Stack<String>();
	}
	
	public void ans_print(){
		System.out.println(ans);
	}
	
	private void add_sub(){
		Double num_2 = num.pop();
		Double num_1 = num.pop();
		Double a = 0.0;
		//System.out.println(num_1);
		//System.out.println(num_2);
		switch(operator.pop()) {  
            case ""+"": 
				//System.out.printf(""%f + %f = %f\n"",num_1,num_2,num_1 + num_2);
				num.push(num_1 + num_2);
                break; 
            case ""-"": 
				//System.out.printf(""%f - %f = %f\n"",num_1,num_2,num_1 - num_2);
				num.push(num_1 - num_2); 
                break; 
            default: 
                System.out.println(""Error""); 
        }
	}
	
	private void mul_div(){
		Double num_2 = num.pop();
		Double num_1 = num.pop();
		Double a = 0.0;
		//System.out.println(num_1);
		//System.out.println(num_2);
		switch(operator.pop()) {  
            case ""*"": 
				//System.out.printf(""%f x %f = %f\n"",num_1,num_2,num_1 * num_2);
				num.push(num_1 * num_2);
                break; 
            case ""/"": 
                //System.out.printf(""%f / %f = %f\n"",num_1,num_2,num_1 / num_2);
				num.push(num_1 / num_2); 
                break; 
            default: 
                System.out.println(""Error""); 
        }
	}
	
	private void fin(){
		while(!operator.isEmpty()){
			ea();
		}
		ans = num.pop();
	}
	
	private void arrange(){
		for(String s : equation){
			//System.out.println(s);
			if(s.matches(""[0-9]+"") || s.matches(""[0-9]+.[0-9]+"")){
				Double n;
				try{
					n = Double.parseDouble(s);
				}catch(Exception ex){
					n = new Double(Integer.parseInt(s));
				}
				
				num.push(n);
				if(!operator.isEmpty()){
					String o = operator.peek();
					if(o.matches(""[*/]"")) mul_div();
				}
			}else if(s.matches(""[*+-/]"")){
				operator.push(s);
			}else if(s.equals("")"")){
				while(!operator.peek().equals(""e"")){
					ea();
				}
				operator.pop();
			}else if(s.equals(""("")){
				operator.push(""e"");
			}else{
				System.out.println(""Uknown input : "" + s +""."");
			} 
		}
		fin();
	}
	
	// Elementary arithmetic
	private void ea(){
		String o = operator.peek();
		if(o.matches(""[*/]"")) mul_div();
		if(o.matches(""[+-]"")) add_sub();
	}
	
	public Double ans (String e) {
		equation = e.split("" "");
		arrange();
		ans_print();
		return ans;
	}
	
	public static void main(String[] args) throws Exception {
		// read equation
		String eq = new String();
		if(args.length == 0){
			Scanner scanner = new Scanner(System.in);
			System.out.printf(""Input equation :"");
			eq = scanner.nextLine();
		}else{
			eq = args[0];
		}
		Calculator Cal = new Calculator();
		Cal.ans(eq);
	}	
}
@1a88cd99b62877f7626cb35110c911e9@"
"b01b01039","0","0.41","106960","@223688df591aa5adb751e21dcc8f0efe@import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Scanner;

public class Calculator {
	private Double ans;
	private String[] equation;
	private Stack<Double> num;
	private Stack<String> operator;
	
	public Calculator(){
		ans = 0.0;
		//equation = eq.split("" "");
		num = new Stack<Double>();
		operator = new Stack<String>();
	}
	
	public void ans_print(){
		System.out.println(ans);
	}
	
	private void add_sub(){
		Double num_2 = num.pop();
		Double num_1 = num.pop();
		Double a = 0.0;
		//System.out.println(num_1);
		//System.out.println(num_2);
		switch(operator.pop()) {  
            case ""+"": 
				//System.out.printf(""%f + %f = %f\n"",num_1,num_2,num_1 + num_2);
				num.push(num_1 + num_2);
                break; 
            case ""-"": 
				//System.out.printf(""%f - %f = %f\n"",num_1,num_2,num_1 - num_2);
				num.push(num_1 - num_2); 
                break; 
            default: 
                System.out.println(""Error""); 
        }
	}
	
	private void mul_div(){
		Double num_2 = num.pop();
		Double num_1 = num.pop();
		Double a = 0.0;
		//System.out.println(num_1);
		//System.out.println(num_2);
		switch(operator.pop()) {  
            case ""*"": 
				//System.out.printf(""%f x %f = %f\n"",num_1,num_2,num_1 * num_2);
				num.push(num_1 * num_2);
                break; 
            case ""/"": 
                //System.out.printf(""%f / %f = %f\n"",num_1,num_2,num_1 / num_2);
				num.push(num_1 / num_2); 
                break; 
            default: 
                System.out.println(""Error""); 
        }
	}
	
	private void fin(){
		while(!operator.isEmpty()){
			ea();
		}
		ans = num.pop();
	}
	
	private void arrange(){
		for(String s : equation){
			//System.out.println(s);
			if(s.matches(""[0-9]+"") || s.matches(""[0-9]+.[0-9]+"")){
				Double n;
				try{
					n = Double.parseDouble(s);
				}catch(Exception ex){
					n = new Double(Integer.parseInt(s));
				}
				
				num.push(n);
				if(!operator.isEmpty()){
					String o = operator.peek();
					if(o.matches(""[*/]"")) mul_div();
					if(o.equals(""-"")){
						num.push(-num.pop());
						operator.pop();
						operator.push(""+"");
					}
				}
			}else if(s.matches(""[*+-/]"")){
				operator.push(s);
			}else if(s.equals("")"")){
				while(!operator.peek().equals(""e"")){
					ea();
				}
				operator.pop();
			}else if(s.equals(""("")){
				operator.push(""e"");
			}else if(s.matches(""\\s"")){
				continue;
			}else{
				continue;
				//System.out.println(""Uknown input : "" + s +""."");
			} 
		}
		fin();
	}
	
	// Elementary arithmetic
	private void ea(){
		String o = operator.peek();
		if(o.matches(""[*/]"")) mul_div();
		if(o.matches(""[+-]"")) add_sub();
	}
	
	public Double ans (String e) {
		equation = e.split("" "");
		arrange();
		ans_print();
		return ans;
	}
	
	public static void main(String[] args) throws Exception {
		// read equation
		String eq = new String();
		if(args.length == 0){
			Scanner scanner = new Scanner(System.in);
			System.out.printf(""Input equation :"");
			eq = scanner.nextLine();
		}else{
			eq = args[0];
		}
		Calculator Cal = new Calculator();
		Cal.ans(eq);
	}	
}
@223688df591aa5adb751e21dcc8f0efe@"
"b01b01039","0","0.44","105824","@ddee37623ec8563bb3cb162180c4700f@import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Scanner;

public class Calculator {
	private Double ans;
	private String[] equation;
	private Stack<Double> num;
	private Stack<String> operator;
	
	public Calculator(){
		ans = 0.0;
		//equation = eq.split("" "");
		num = new Stack<Double>();
		operator = new Stack<String>();
	}
	
	public void ans_print(){
		System.out.println(ans);
	}
	
	private void add_sub(){
		Double num_2 = num.pop();
		Double num_1 = num.pop();
		Double a = 0.0;
		//System.out.println(num_1);
		//System.out.println(num_2);
		switch(operator.pop()) {  
            case ""+"": 
				System.out.printf(""%f + %f = %f\n"",num_1,num_2,num_1 + num_2);
				num.push(num_1 + num_2);
                break; 
            case ""-"": 
				System.out.printf(""%f - %f = %f\n"",num_1,num_2,num_1 - num_2);
				num.push(num_1 - num_2); 
                break; 
            default: 
                System.out.println(""Error""); 
        }
	}
	
	private void mul_div(){
		Double num_2 = num.pop();
		Double num_1 = num.pop();
		Double a = 0.0;
		//System.out.println(num_1);
		//System.out.println(num_2);
		switch(operator.pop()) {  
            case ""*"": 
				System.out.printf(""%f x %f = %f\n"",num_1,num_2,num_1 * num_2);
				num.push(num_1 * num_2);
                break; 
            case ""/"": 
                System.out.printf(""%f / %f = %f\n"",num_1,num_2,num_1 / num_2);
				num.push(num_1 / num_2); 
                break; 
            default: 
                System.out.println(""Error""); 
        }
	}
	
	private void fin(){
		while(!operator.isEmpty()){
			ea();
		}
		ans = num.pop();
	}
	
	private void arrange(){
		for(String s : equation){
			//System.out.println(s);
			if(s.matches(""[0-9]+"") || s.matches(""[0-9]+.[0-9]+"")){
				Double n;
				try{
					n = Double.parseDouble(s);
				}catch(Exception ex){
					n = new Double(Integer.parseInt(s));
				}
				
				num.push(n);
				if(!operator.isEmpty()){
					String o = operator.peek();
					while(o.matches(""[*/]"")){
						mul_div();
						if(operator.isEmpty()) break;
						o = operator.peek();
					}
					if(o.equals(""-"")){
						num.push(-num.pop());
						operator.pop();
						operator.push(""+"");
					}
				}
			}else if(s.matches(""[*+-/]"")){
				operator.push(s);
			}else if(s.equals("")"")){
				while(!operator.peek().equals(""e"")){
					ea();
				}
				operator.pop();
			}else if(s.equals(""("")){
				operator.push(""e"");
			}else if(s.matches(""\\s"")){
				continue;
			}else{
				continue;
				//System.out.println(""Uknown input : "" + s +""."");
			} 
		}
		fin();
	}
	
	// Elementary arithmetic
	private void ea(){
		String o = operator.peek();
		if(o.matches(""[*/]"")) mul_div();
		if(o.matches(""[+-]"")) add_sub();
	}
	
	public Double ans (String e) {
		equation = e.split("" "");
		arrange();
		ans_print();
		return ans;
	}
	
	public static void main(String[] args) throws Exception {
		// read equation
		String eq = new String();
		if(args.length == 0){
			Scanner scanner = new Scanner(System.in);
			System.out.printf(""Input equation :"");
			eq = scanner.nextLine();
		}else{
			eq = args[0];
		}
		Calculator Cal = new Calculator();
		Cal.ans(eq);
	}	
}
@ddee37623ec8563bb3cb162180c4700f@"
"b01502105","0","0.44","105824","@aa6d98afa6bdcf408a1f61c163344337@import edu.princeton.cs.algs4.Stack;
import java.io.BufferedReader;
import java.io.FileReader;

public class Calculator {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            StringBuilder everything = new StringBuilder();
            String line;
            everything.append(br.readLine());//first num
            while ((line = br.readLine()) != null) {
                everything.append("" "");
                everything.append(line);
            }
            String input_string = everything.toString();
            Calculator cct = new Calculator();
            double answer = cct.ans(input_string);
            System.out.printf(""ans = "" + answer + ""\n"");
        }
    }

    public Double ans(String e) {
        Stack<String> operator = new Stack<String>();
        Stack<Double> value = new Stack<Double>();
        String[] data = e.split("" "");
        double temp_1 = 0.0, temp_2 = 0.0;
        for (int i = 0; i < (data.length); i++) {
            if (data[i].equals(""("")); //Doing nothing!
            else if (data[i].equals(""+"")) {operator.push(data[i]);} 
            else if (data[i].equals(""-"")) {operator.push(data[i]);} 
            else if (data[i].equals(""*"")) {operator.push(data[i]);}
            else if (data[i].equals(""/"")) {operator.push(data[i]);} 
            else if (data[i].equals("")"")) {
                String op = operator.pop();  //pop the last operator
                if (op.equals(""+"")) {value.push(value.pop() + value.pop());} 
                else if (op.equals(""*"")) {value.push(value.pop() * value.pop());}
                else if (op.equals(""-"")) {
                    temp_1 = value.pop();
                    temp_2 = value.pop();
                    value.push(temp_2 - temp_1);
                } 
                else if (op.equals(""/"")) {
                    temp_1 = value.pop();
                    temp_2 = value.pop();
                    value.push(temp_2 / temp_1);
                }
            } else {value.push(Double.parseDouble(data[i]));}
        }
        return value.pop();
    }
}

@aa6d98afa6bdcf408a1f61c163344337@"
"b01502105","10","0.101","105824","@1df13058c7596f676410c08cfd139860@import java.io.BufferedReader;
import java.io.FileReader;

public class Calculator {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            StringBuilder everything = new StringBuilder();
            String line;
            everything.append(br.readLine());//first num
            while ((line = br.readLine()) != null) {
                everything.append("" "");
                everything.append(line);
            }
            String input_string = everything.toString();
            Calculator cct = new Calculator();
            double answer = cct.ans(input_string);
            System.out.printf(""ans = "" + answer + ""\n"");
        }
    }

    public Double ans(String e) {
        Stack<String> operator = new Stack<String>();
        Stack<Double> value = new Stack<Double>();
        String[] data = e.split("" "");
        double temp_1 = 0.0, temp_2 = 0.0;
        for (int i = 0; i < (data.length); i++) {
            if (data[i].equals(""("")); //Doing nothing!
            else if (data[i].equals(""+"")) {operator.push(data[i]);} 
            else if (data[i].equals(""-"")) {operator.push(data[i]);} 
            else if (data[i].equals(""*"")) {operator.push(data[i]);}
            else if (data[i].equals(""/"")) {operator.push(data[i]);} 
            else if (data[i].equals("")"")) {
                String op = operator.pop();  //pop the last operator
                if (op.equals(""+"")) {value.push(value.pop() + value.pop());} 
                else if (op.equals(""*"")) {value.push(value.pop() * value.pop());}
                else if (op.equals(""-"")) {
                    temp_1 = value.pop();
                    temp_2 = value.pop();
                    value.push(temp_2 - temp_1);
                } 
                else if (op.equals(""/"")) {
                    temp_1 = value.pop();
                    temp_2 = value.pop();
                    value.push(temp_2 / temp_1);
                }
            } else {value.push(Double.parseDouble(data[i]));}
        }
        return value.pop();
    }
}

@1df13058c7596f676410c08cfd139860@"
"b01b01039","0","0.41","105856","@6bcfa03480c06c3cd66eb0980e1b8653@import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Scanner;

public class Calculator {
	private Double ans;
	private String[] equation;
	private Stack<Double> num;
	private Stack<String> operator;
	
	public Calculator(){
		ans = 0.0;
		//equation = eq.split("" "");
		num = new Stack<Double>();
		operator = new Stack<String>();
	}
	
	public void ans_print(){
		System.out.println(ans);
	}
	
	private void add_sub(){
		Double num_2 = num.pop();
		Double num_1 = num.pop();
		Double a = 0.0;
		//System.out.println(num_1);
		//System.out.println(num_2);
		switch(operator.pop()) {  
            case ""+"": 
				//System.out.printf(""%f + %f = %f\n"",num_1,num_2,num_1 + num_2);
				num.push(num_1 + num_2);
                break; 
            case ""-"": 
				//System.out.printf(""%f - %f = %f\n"",num_1,num_2,num_1 - num_2);
				num.push(num_1 - num_2); 
                break; 
            default: 
                System.out.println(""Error""); 
        }
	}
	
	private void mul_div(){
		Double num_2 = num.pop();
		Double num_1 = num.pop();
		Double a = 0.0;
		//System.out.println(num_1);
		//System.out.println(num_2);
		switch(operator.pop()) {  
            case ""*"": 
				//System.out.printf(""%f x %f = %f\n"",num_1,num_2,num_1 * num_2);
				num.push(num_1 * num_2);
                break; 
            case ""/"": 
                //System.out.printf(""%f / %f = %f\n"",num_1,num_2,num_1 / num_2);
				num.push(num_1 / num_2); 
                break; 
            default: 
                System.out.println(""Error""); 
        }
	}
	
	private void fin(){
		while(!operator.isEmpty()){
			ea();
		}
		ans = num.pop();
	}
	
	private void arrange(){
		for(String s : equation){
			//System.out.println(s);
			if(s.matches(""[0-9]+"") || s.matches(""[0-9]+.[0-9]+"")){
				Double n;
				try{
					n = Double.parseDouble(s);
				}catch(Exception ex){
					n = new Double(Integer.parseInt(s));
				}
				
				num.push(n);
				if(!operator.isEmpty()){
					String o = operator.peek();
					if(o.equals(""/"")){
						//System.out.println(""D"");
						num.push(1.0/num.pop());
						operator.pop();
						operator.push(""*"");
					}
					if(o.equals(""-"")){
						num.push(-num.pop());
						operator.pop();
						operator.push(""+"");
					}
					
					o = operator.peek();
					if(o.equals(""*"")){
						//System.out.println(""M"");
						mul_div();
					}
				}
			}else if(s.matches(""[*+-/]"")){
				operator.push(s);
			}else if(s.equals("")"")){
				while(!operator.peek().equals(""e"")){
					ea();
				}
				operator.pop();
			}else if(s.equals(""("")){
				operator.push(""e"");
			}else{
				continue;
				//System.out.println(""Uknown input : "" + s +""."");
			} 
		}
		fin();
	}
	
	// Elementary arithmetic
	private void ea(){
		String o = operator.peek();
		if(o.matches(""[*/]"")) mul_div();
		if(o.matches(""[+-]"")) add_sub();
	}
	
	public Double ans (String e) {
		equation = e.split("" "");
		arrange();
		ans_print();
		return ans;
	}
	
	public static void main(String[] args) throws Exception {
		// read equation
		String eq = new String();
		if(args.length == 0){
			Scanner scanner = new Scanner(System.in);
			System.out.printf(""Input equation :"");
			eq = scanner.nextLine();
		}else{
			eq = args[0];
		}
		Calculator Cal = new Calculator();
		Cal.ans(eq);
	}	
}
@6bcfa03480c06c3cd66eb0980e1b8653@"
"r04945022","0","0","0","@014854526ce58fda1d11769f0ea4fce6@



/**
 *
 * @author Daniel C
 */
public class Calculator {

    public Double ans (String e) {
      // please replace the following null to the answer you calculated.
    Stack<String> ops = new Stack<String>();
    Stack<Double> vals = new Stack<Double>();
    while (!StdIn.isEmpty()) {
    String s = StdIn.readString();
    if (s.equals(""("")) ;
    else if (s.equals(""+"")) ops.push(s);
    else if (s.equals(""-"")) ops.push(s);
    else if (s.equals(""*"")) ops.push(s);
    else if (s.equals(""/"")) ops.push(s);
    else if (s.equals("")""))
    {
     String op = ops.pop();
    if (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
    else if (op.equals(""-"")) vals.push(vals.pop() - vals.pop());
    else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
    else if (op.equals(""/"")) vals.push(vals.pop() / vals.pop());
    }
    else vals.push(Double.parseDouble(s));
    }
//    System.out.println(vals.pop());
        
        
      return vals.pop();
}
    public static void main(String[] args) {
       
    }
    
}

@014854526ce58fda1d11769f0ea4fce6@"
"r04525016","10","0.096","105504","@7ac4be43a6d1707b97303473c15012d0@import java.util.Stack;;

/**
 * Created by cavitation on 2016/3/22.
 */
public class Calculator {

    public Double ans(String e) {

        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();

        String[] temp = e.split("" "");
        for (int i = 0; i < temp.length; i++) {
            String s = temp[i];
            if (s.equals(""("")) ;
            else if (s.equals(""+"")) ops.push(s);
            else if (s.equals(""*"")) ops.push(s);
            else if (s.equals(""/"")) ops.push(s);
            else if (s.equals(""-"")) ops.push(s);
            else if (s.equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
                else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
                else if (op.equals(""/"")) vals.push(1 / (vals.pop() / vals.pop()));
                else if (op.equals(""-"")) vals.push(-vals.pop() + vals.pop());
            } else vals.push(Double.parseDouble(s));
        }
        return vals.pop();
    }
}

@7ac4be43a6d1707b97303473c15012d0@"
"r04945022","0","0.41","105856","@9f9d8a717363ce82a202ba863cceb353@/**
 *
 * @author Daniel C
 */
public class Calculator {

    public Double ans (String e) {
      // please replace the following null to the answer you calculated.
    Stack<String> ops = new Stack<String>();
    Stack<Double> vals = new Stack<Double>();
    for(int i=0; i<e.length();i++) {
    String s = e.charAt(i);
    if (s.equals(""("")) ;
    else if (s.equals(""+"")) ops.push(s);
    else if (s.equals(""-"")) ops.push(s);
    else if (s.equals(""*"")) ops.push(s);
    else if (s.equals(""/"")) ops.push(s);
    else if (s.equals("")""))
    {
     String op = ops.pop();
    if (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
    else if (op.equals(""-"")) vals.push(vals.pop() - vals.pop());
    else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
    else if (op.equals(""/"")) vals.push(vals.pop() / vals.pop());
    }
    else vals.push(Double.parseDouble(s));
    }
//    System.out.println(vals.pop());
        
        
      return vals.pop();
}
    public static void main(String[] args) {
       
    }
    
}

@9f9d8a717363ce82a202ba863cceb353@"
"r04945022","0","0","0","@566a7cdea1881ef899ebd52a47196437@/**
 *
 * @author Daniel C
 */
public class Calculator {

    public Double ans (String e) {
      // please replace the following null to the answer you calculated.
    Stack<String> ops = new Stack<String>();
    Stack<Double> vals = new Stack<Double>();
    for(int i=0; i<e.length();i++) {
    String s = Character.toString(e.charAt(i));
    if (s.equals(""("")) ;
    else if (s.equals(""+"")) ops.push(s);
    else if (s.equals(""-"")) ops.push(s);
    else if (s.equals(""*"")) ops.push(s);
    else if (s.equals(""/"")) ops.push(s);
    else if (s.equals("")""))
    {
     String op = ops.pop();
    if (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
    else if (op.equals(""-"")) vals.push(vals.pop() - vals.pop());
    else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
    else if (op.equals(""/"")) vals.push(vals.pop() / vals.pop());
    }
    else vals.push(Double.parseDouble(s));
    }
//    System.out.println(vals.pop());
        
        
      return vals.pop();
}
    public static void main(String[] args) {
       
    }
    
}

@566a7cdea1881ef899ebd52a47196437@"
"b99611017","0","0","0","@31ae4234583ed4603686fd1517b2a1ca@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 許志鵬
 */
public class Calculator {

    public Calculator() {
    }

    public double ans(String quest) {
        String[] trans = quest.split("" "");
        int howLong = trans.length;
        Stack token = new Stack();
        Stack op= new Stack();
        //construct a stack
        for (int i = 0; i < howLong; i++) {

            token.push(trans[i]);
            token.push("" "");
            if("")"".equals(trans[i])&&i>2)
            {
                op.push(token.pop());
                op.push("" "");
                op.push(token.pop());
                op.push("" "");
                op.push(token.pop());
                String[] a=op.toString().split("" "");
                token.push(subCal(a));
                token.push(trans[i]);
                
            }
            token.push("" "");
            
        }
        

        String[] preans = token.toString().split("" "");

        return Double.parseDouble(preans[1]);
    }
    
    
    double subCal(String[] a)
    {
        double ann=0;
        if(a.length==3)
        {
            if(""+"".equals(a[1]))
            {
               ann=  Double.parseDouble(a[0])+Double.parseDouble(a[2]);
            }
            if(""-"".equals(a[1]))
            {
               ann= Double.parseDouble(a[0])-Double.parseDouble(a[2]);
            }
            if(""*"".equals(a[1]))
            {
               ann=  Double.parseDouble(a[0])*Double.parseDouble(a[2]);
            }
            if(""/"".equals(a[1]))
            {
               ann=  Double.parseDouble(a[0])/Double.parseDouble(a[2]);
            }
            
        }
        return ann;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        
    }

}

@31ae4234583ed4603686fd1517b2a1ca@"
"r04945022","0","0","0","@f7aa512848d73e597e44eeecfc7a5dd4@/**
 *
 * @author Daniel C
 */
public class Calculator {

    public Double ans (String e) {
      // please replace the following null to the answer you calculated.
    Stack<String> ops = new Stack<String>();
    Stack<Double> vals = new Stack<Double>();
    for(int i=0; i<e.length();i++) {
    String s = Character.toString(e.charAt(i));
    if (s.equals(""("")) ;
    if (s.equals("" "")) ;
    else if (s.equals(""+"")) ops.push(s);
    else if (s.equals(""-"")) ops.push(s);
    else if (s.equals(""*"")) ops.push(s);
    else if (s.equals(""/"")) ops.push(s);
    else if (s.equals("")""))
    {
     String op = ops.pop();
    if (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
    else if (op.equals(""-"")) vals.push(vals.pop() - vals.pop());
    else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
    else if (op.equals(""/"")) vals.push(vals.pop() / vals.pop());
    }
    else vals.push(Double.parseDouble(s));
    }
//    System.out.println(vals.pop());
        
        
      return vals.pop();
}
    public static void main(String[] args) {
       
    }
    
}

@f7aa512848d73e597e44eeecfc7a5dd4@"
"b01b01039","4","0.41","105904","@a1aa1a05b0850bc7102f2ab653735b6c@import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Scanner;

public class Calculator {
	private Double ans;
	private String[] equation;
	private Stack<Double> num;
	private Stack<String> operator;
	
	public Calculator(){
		ans = 0.0;
		//equation = eq.split("" "");
		num = new Stack<Double>();
		operator = new Stack<String>();
	}
	
	public void ans_print(){
		System.out.println(ans);
	}
	
	private void add(){
		Double num_2 = num.pop();
		Double num_1 = num.pop();
		operator.pop();
		//System.out.printf(""%f + %f = %f\n"",num_1,num_2,num_1 + num_2);
		num.push(num_1 + num_2);
	}
	
	private void mul(){
		Double num_2 = num.pop();
		Double num_1 = num.pop();
		operator.pop();
		//System.out.printf(""%f x %f = %f\n"",num_1,num_2,num_1 * num_2);
		num.push(num_1 * num_2);
	}
	
	private void fin(){
		while(!operator.isEmpty()){
			add();
		}
		ans = num.pop();
	}
	private void check(Double n){
		if(!operator.isEmpty()){
			String o = operator.peek();
			if(o.equals(""-"")){
				num.push(-n);
				operator.pop();
				operator.push(""+"");
			}else if(o.equals(""/"")){
				num.push(1.0/n);
				operator.pop();
				operator.push(""*"");
			}else{
				num.push(n);
			}
			o = operator.peek();
			while(o.equals(""*"")){
				mul();
				if(operator.isEmpty())break;
				o = operator.peek();
			}
		}else{
			num.push(n);
		}
			
		/*System.out.printf(""Stack :"");
		for(String k : operator){
			System.out.printf(""%s "", k);
		}
		System.out.println();*/
	}
	
	private void arrange(){
		for(String s : equation){
			//System.out.println(s);
			if(s.matches(""[0-9]+"") || s.matches(""[0-9]+.[0-9]+"")){
				Double n;
				try{
					n = Double.parseDouble(s);
				}catch(Exception ex){
					n = new Double(Integer.parseInt(s));
				}
				check(n);
			}else if(s.matches(""[*+-/]"")){
				operator.push(s);
			}else if(s.equals("")"")){
				while(!operator.peek().equals(""e"")){
					add();
				}
				operator.pop();
				check(num.pop());				
			}else if(s.equals(""("")){
				operator.push(""e"");
			}else{
				continue;
				//System.out.println(""Uknown input : "" + s +""."");
			} 
		}
		fin();
	}
	
	public Double ans (String e) {
		equation = e.split("" "");
		arrange();
		//ans_print();
		return ans;
	}
	
	public static void main(String[] args) throws Exception {
		// read equation
		String eq = new String();
		if(args.length == 0){
			Scanner scanner = new Scanner(System.in);
			System.out.printf(""Input equation :"");
			eq = scanner.nextLine();
		}else{
			eq = args[0];
		}
		Calculator Cal = new Calculator();
		Cal.ans(eq);
	}	
}
@a1aa1a05b0850bc7102f2ab653735b6c@"
"b99611017","0","0","0","@907ca6c8db2476e02932c178a8e63d78@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 許志鵬
 */
public class Calculator {

    public Calculator() {
    }

    public double ans(String quest) {
        String[] trans = quest.split("" "");
        int howLong = trans.length;
        Stack token = new Stack();
        Stack op = new Stack();
        //construct a stack
        for (int i = 0; i < howLong; i++) {

            token.push(trans[i]);
            token.push("" "");
            if ("")"".equals(trans[i]) && i > 2) {
                token.pop();
                op.push(token.pop());
                op.push("" "");
                op.push(token.pop());
                op.push("" "");
                op.push(token.pop());
                String[] a = op.toString().split("" "");
                token.push(subCal(a));
                token.push(trans[i]);

            }
            token.push("" "");

        }

        String[] preans = token.toString().split("" "");

        return Double.parseDouble(preans[1]);
    }

    double subCal(String[] a) {
        double ann = 0;
        if (a.length == 3) {
            if (""+"".equals(a[1])) {
                ann = Double.parseDouble(a[0]) + Double.parseDouble(a[2]);
            }
            if (""-"".equals(a[1])) {
                ann = Double.parseDouble(a[0]) - Double.parseDouble(a[2]);
            }
            if (""*"".equals(a[1])) {
                ann = Double.parseDouble(a[0]) * Double.parseDouble(a[2]);
            }
            if (""/"".equals(a[1])) {
                ann = Double.parseDouble(a[0]) / Double.parseDouble(a[2]);
            }

        }
        return ann;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here

    }

}

@907ca6c8db2476e02932c178a8e63d78@"
"r03522826","10","0.098","105824","@7cc31adcba4c103500ab3136cbcba29b@public class Calculator {
    
    private double ans;
    private double a , b;
    private char op;
    
    public Calculator() {
        ans = 0.0;
        a = 0.0;
        b = 0.0;
    }
    
    public Double ans (String e)
    {
       String [] data = e.split("" "");
       Stack<String> equation = new Stack<String>();
       Stack<Double> number = new Stack<Double>(); 
       Stack<String> operator = new Stack<String>();
       
       for (int i = 0; i < data.length; i++)
       {
          if ( data[i].equals(""(""))
              equation.push(data[i]);
          else if( data[i].equals(""+"") || data[i].equals(""-"") || data[i].equals(""*"") || data[i].equals(""/""))
              operator.push(data[i]);
          else if( data[i].equals("")""))
          {
              b = number.pop();
              op = operator.pop().charAt(0);
              a = number.pop();
              equation.pop();
              switch(op){
                  case '+':
                      ans = a + b;
                      number.push(ans);
                      break;
                  case '-':
                      ans = a - b;
                       number.push(ans);
                      break;
                  case '*':
                      ans = a * b;
                       number.push(ans);
                      break;
                  case '/':
                      ans = a / b;
                       number.push(ans);
                      break;
              }
          }
          else
              number.push(Double.parseDouble(data[i]));
       }
        return ans;
    }
    
    
    
    public static void main(String[] args) {
        String e = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "";
//        String e ="" 1 + 2 "";
        Calculator cct = new Calculator();
        System.out.print(cct.ans(e));
//       
    }
    
}
@7cc31adcba4c103500ab3136cbcba29b@"
"r04945022","0","0.09","105808","@e6b2ec9286e2579ad8798b1c328f7ad5@/**
 *
 * @author Daniel C
 */
public class Calculator {

    public Double ans (String e) {
      // please replace the following null to the answer you calculated.
    Stack<String> ops = new Stack<String>();
    Stack<Double> vals = new Stack<Double>();
    for(int i=0; i<e.length();i++) {
    String s = String.valueOf(e.charAt(i));
//    System.out.println(s);
    if (s.contains(""(""))   ;
    else if (s.equals("" ""))     ;
    else if (s.equals(""+"")) ops.push(s);
    else if (s.equals(""-"")) ops.push(s);
    else if (s.equals(""*"")) ops.push(s);
    else if (s.equals(""/"")) ops.push(s);
    else if (s.equals("")""))
    {
     String op = ops.pop();
    if (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
    else if (op.equals(""-"")) vals.push(vals.pop() - vals.pop());
    else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
    else if (op.equals(""/"")) vals.push(vals.pop() / vals.pop());
    }
    else vals.push(Double.parseDouble(s));
    }
//    System.out.println(vals.pop());
        
        
      return vals.pop();
}
    public static void main(String[] args) {
      
        
    }
    
}

@e6b2ec9286e2579ad8798b1c328f7ad5@"
"b02611012","0","0","0","@10741feaceee203ad7f8db4ff86739b1@

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author user
 */
public class Calculator {

    public double aa;

    public Double ans(String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        while (StdIn.isEmpty()) {
            String s = StdIn.readString();
            if (s.equals(""("")) ; else if (s.equals(""+"")) {
                ops.push(s);
            } else if (s.equals(""*"")) {
                ops.push(s);
            } else if (s.equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                }
            }
        }
        StdOut.println(vals.pop());
//            aa = Double.parseDouble(vals.pop());
        return vals.pop();
    }

    /**
     *
     * @param args
     */
    public static void main(String[] args) {
        System.out.printf(""-1"");
    }

}

@10741feaceee203ad7f8db4ff86739b1@"
"b01b01039","4","0.42","110352","@159a8bf878f5279a1465a9b7a58f50c2@import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Scanner;

public class Calculator {
	private Double ans;
	private String[] equation;
	private Stack<Double> num;
	private Stack<String> operator;
	
	public Calculator(){
		ans = 0.0;
		//equation = eq.split("" "");
		num = new Stack<Double>();
		operator = new Stack<String>();
	}
	
	private void add(){
		operator.pop();
		//System.out.printf(""%f + %f = %f\n"",num_1,num_2,num_1 + num_2);
		num.push(num.pop() + num.pop());
	}
	
	private void mul(){
		operator.pop();
		//System.out.printf(""%f x %f = %f\n"",num_1,num_2,num_1 * num_2);
		num.push(num.pop() * num.pop());
	}
	
	private void fin(){
		// add all numbers
		while(!operator.isEmpty()){
			add();
		}
		ans = num.pop();
	}
	
	private void check(Double n){
		if(!operator.isEmpty()){
			String o = operator.peek();
			if(o.equals(""-"")){ // n -> -n, - -> +
				num.push(-n);
				operator.pop();
				operator.push(""+"");
			}else if(o.equals(""/"")){ // n -> 1/n, / -> *
				num.push(1.0/n);
				operator.pop();
				operator.push(""*"");
			}else{
				num.push(n);
			}
			o = operator.peek();
			while(o.equals(""*"")){
				mul();
				if(operator.isEmpty())break;
				o = operator.peek();
				//System.out.println(o);
			}
		}else{
			num.push(n);
		}
			
		/*System.out.printf(""Stack :"");
		for(String k : operator){
			System.out.printf(""%s "", k);
		}
		System.out.println();*/
	}
	
	private void arrange(){
		for(String s : equation){
			//System.out.println(s);
			if(s.matches(""[0-9]+"") || s.matches(""[0-9]+.[0-9]+"")){
				Double n;
				try{
					n = Double.parseDouble(s);
				}catch(Exception ex){
					n = new Double(Integer.parseInt(s));
				}
				check(n);
			}else if(s.matches(""[*+-/]"")){
				operator.push(s);
			}else if(s.equals("")"")){
				while(!operator.peek().equals(""e"")){
					add();
				}
				operator.pop();
				check(num.pop());				
			}else if(s.equals(""("")){
				operator.push(""e"");
			}else{
				continue;
				//System.out.println(""Uknown input : "" + s +""."");
			} 
		}
		fin();
	}
	
	public Double ans (String e) {
		equation = e.split("" "");
		arrange();
		return ans;
	}
	
	public static void main(String[] args){
		// read equation
		String eq = new String();
		if(args.length == 0){
			Scanner scanner = new Scanner(System.in);
			System.out.printf(""Input equation :"");
			eq = scanner.nextLine();
		}else{
			eq = args[0];
		}
		Calculator Cal = new Calculator();
		System.out.println(Cal.ans(eq));
	}	
}
@159a8bf878f5279a1465a9b7a58f50c2@"
"r03525006","10","0.097","105808","@d2c02a3093f61e9b7dcbf9c17176eb77@/**
 * Created by ASUS on 2016/3/21.
 */
public class Calculator {
    public Double ans(String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String[] input = e.split("" "");
        for (int i = 0; i <input.length; i++) {
            String s = input[i];
            if (s.equals(""("")) ;
            else if (s.equals(""+"")) ops.push(s);
            else if (s.equals(""-"")) ops.push(s);
            else if (s.equals(""*"")) ops.push(s);
            else if (s.equals(""/"")) ops.push(s);
            else if (s.equals("")""))
            {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } else if (op.equals(""-"")) {
                    vals.push(- vals.pop() + vals.pop());
                } else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                } else if (op.equals(""/"")) {
                    Double a = vals.pop();
                    Double b = vals.pop();
                    vals.push(b/a);
                }
            }
            else vals.push(Double.parseDouble(s));
        }
        return vals.pop();
    }
}

@d2c02a3093f61e9b7dcbf9c17176eb77@"
"b03611033","0","0","0","@f60871b137afe860dcc4974be6a3b690@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Stack;

public class Calculator {
    public Calculator(){
        
    }
    
    public double ans(String e){
        String[] cut;
        cut=e.split("" "");
        String s;
        Stack<String> ops = new Stack<String>(); 
        Stack<Double> vals = new Stack<Double>();
        double help;
        int count;
        if(e.length()%2==0) count=e.length()/2;
        else count=(e.length()+1)/2;
        
        for(int i=0;i<count;i++){
            s=cut[i];
            StdOut.println(cut[i]);
         
            if (s.equals(""("")) ; 
            else if (s.equals(""+"")) ops.push(s);
            else if (s.equals(""-"")) ops.push(s);
            else if (s.equals(""/"")) ops.push(s);
            else if (s.equals(""*"")) ops.push(s); 
            else if (s.equals("")"")){ 
                String op = ops.pop(); 
                if (op.equals(""+"")) vals.push(vals.pop() + vals.pop()); 
                else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
                else if (op.equals(""-"")){
                    help = -(vals.pop() - vals.pop());
                    vals.push(help);
                }
                else if (op.equals(""/"")){
                     help = 1/(vals.pop() / vals.pop());
                    vals.push(help);
                }
            } 
            else { 
                vals.push(Double.parseDouble(s));
            } 
            StdOut.println(ops);
            StdOut.println(vals);
        }
        return vals.pop();
    }
  
     public static void main(String[] args) throws Exception {
         try(BufferedReader br = new BufferedReader(new FileReader(""input.txt""))){
            String str = br.readLine();
            
            Calculator cct = new Calculator();
            
            StdOut.println(cct.ans(str));
        }
    }
}

@f60871b137afe860dcc4974be6a3b690@"
"b03611033","0","0","0","@fc372e78d1937011b822ba67ee8eadc3@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Stack;

public class Calculator {
    public Calculator(){
        
    }
    
    public double ans(String e){
        String[] cut;
        cut=e.split("" "");
        String s;
        Stack<String> ops = new Stack<String>(); 
        Stack<Double> vals = new Stack<Double>();
        double help;
        int count;
        if(e.length()%2==0) count=e.length()/2;
        else count=(e.length()+1)/2;
        
        for(int i=0;i<count;i++){
            s=cut[i];
            //StdOut.println(cut[i]);
         
            if (s.equals(""("")) ; 
            else if (s.equals(""+"")) ops.push(s);
            else if (s.equals(""-"")) ops.push(s);
            else if (s.equals(""/"")) ops.push(s);
            else if (s.equals(""*"")) ops.push(s); 
            else if (s.equals("")"")){ 
                String op = ops.pop(); 
                if (op.equals(""+"")) vals.push(vals.pop() + vals.pop()); 
                else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
                else if (op.equals(""-"")){
                    help = -(vals.pop() - vals.pop());
                    vals.push(help);
                }
                else if (op.equals(""/"")){
                     help = 1/(vals.pop() / vals.pop());
                    vals.push(help);
                }
            } 
            else { 
                vals.push(Double.parseDouble(s));
            } 
            //StdOut.println(ops);
            //StdOut.println(vals);
        }
        return vals.pop();
    }
  
     public static void main(String[] args) throws Exception {
         try(BufferedReader br = new BufferedReader(new FileReader(""input.txt""))){
            String str = br.readLine();
            
            Calculator cct = new Calculator();
            
            StdOut.println(cct.ans(str));
        }
    }
}

@fc372e78d1937011b822ba67ee8eadc3@"
"b03611033","0","0","0","@79dddf2a217ccf00dc1cd973e5dc3ace@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Stack;

public class Calculator {
    public Calculator(){
        
    }
    public Double ans(String e){
        String[] cut;
        cut=e.split("" "");
        String s;
        Stack<String> ops = new Stack<String>(); 
        Stack<Double> vals = new Stack<Double>();
        double help;
        int count;
        if(e.length()%2==0) count=e.length()/2;
        else count=(e.length()+1)/2;
        
        for(int i=0;i<count;i++){
            s=cut[i];
            if (s.equals(""("")) ; 
            else if (s.equals(""+"")) ops.push(s);
            else if (s.equals(""-"")) ops.push(s);
            else if (s.equals(""/"")) ops.push(s);
            else if (s.equals(""*"")) ops.push(s); 
            else if (s.equals("")"")){ 
                String op = ops.pop(); 
                if (op.equals(""+"")) vals.push(vals.pop() + vals.pop()); 
                else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
                else if (op.equals(""-"")){
                    help = -(vals.pop() - vals.pop());
                    vals.push(help);
                }
                else if (op.equals(""/"")){
                     help = 1/(vals.pop() / vals.pop());
                    vals.push(help);
                }
            } 
            else { 
                vals.push(Double.parseDouble(s));
            } 
        }
        return vals.pop();
    }
  
     public static void main(String[] args) throws Exception {
         try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            String str = br.readLine();
            Calculator cct = new Calculator();
            StdOut.println(cct.ans(str));
        }
    }
}

@79dddf2a217ccf00dc1cd973e5dc3ace@"
"r04945022","0","0","0","@cce83b04f5be36c998fce4ecb9667fce@
/**
 *
 * @author Daniel C
 */
public class Calculator {

    public Double ans (String e) {
        String [] inputnumb = e.split("" "");
      // please replace the following null to the answer you calculated.
    Stack<String> ops = new Stack<String>();
    Stack<Double> vals = new Stack<Double>();
    for(int i=0; i<e.length();i++) {
    String s = inputnumb[i];
//    System.out.println(s);
    if (s.contains(""(""))   ;
    else if (s.equals("" ""))     ;
    else if (s.equals(""+"")) ops.push(s);
    else if (s.equals(""-"")) ops.push(s);
    else if (s.equals(""*"")) ops.push(s);
    else if (s.equals(""/"")) ops.push(s);
    else if (s.equals("")""))
    {
     String op = ops.pop();
    if (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
    else if (op.equals(""-"")) vals.push(vals.pop() - vals.pop());
    else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
    else if (op.equals(""/"")) vals.push(vals.pop() / vals.pop());
    }
    else vals.push(Double.parseDouble(s));
    }
//    System.out.println(vals.pop());
    while(!ops.isEmpty()){
        String op = ops.pop();
    if (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
    else if (op.equals(""-"")) vals.push(vals.pop() - vals.pop());
    else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
    else if (op.equals(""/"")) vals.push(vals.pop() / vals.pop());
    }
        
        
      return vals.pop();
}
    public static void main(String[] args) {
      
        
    }
    
}

@cce83b04f5be36c998fce4ecb9667fce@"
"r04945022","3","1.01","105792","@c679d4c35f17814b0697b4806d6fdca2@/**
 *
 * @author Daniel C
 */
public class Calculator {

    public Double ans (String e) {
        String [] inputnumb = e.split("" "");
      // please replace the following null to the answer you calculated.
    Stack<String> ops = new Stack<String>();
    Stack<Double> vals = new Stack<Double>();
    for(int i=0; i<inputnumb.length;i++) {
    String s = inputnumb[i];
//    System.out.println(s);
    if (s.contains(""(""))   ;
    else if (s.equals("" ""))     ;
    else if (s.equals(""+"")) ops.push(s);
    else if (s.equals(""-"")) ops.push(s);
    else if (s.equals(""*"")) ops.push(s);
    else if (s.equals(""/"")) ops.push(s);
    else if (s.equals("")""))
    {
     String op = ops.pop();
    if (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
    else if (op.equals(""-"")) vals.push(vals.pop() - vals.pop());
    else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
    else if (op.equals(""/"")) vals.push(vals.pop() / vals.pop());
    }
    else vals.push(Double.parseDouble(s));
    }
//    System.out.println(vals.pop());
    while(!ops.isEmpty()){
        String op = ops.pop();
    if (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
    else if (op.equals(""-"")) vals.push(vals.pop() - vals.pop());
    else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
    else if (op.equals(""/"")) vals.push(vals.pop() / vals.pop());
    }
        
        
      return vals.pop();
}
    public static void main(String[] args) {
      
        
    }
    
}

@c679d4c35f17814b0697b4806d6fdca2@"
"r04945022","7","0.99","105536","@5221cb5599545278afe5bf78c38be95d@/**
 *
 * @author Daniel C
 */
public class Calculator {

    public Double ans (String e) {
        String [] inputnumb = e.split("" "");
      // please replace the following null to the answer you calculated.
    Stack<String> ops = new Stack<String>();
    Stack<Double> vals = new Stack<Double>();
    for(int i=0; i<inputnumb.length;i++) {
    String s = inputnumb[i];
//    System.out.println(s);
    if (s.contains(""(""))   ;
    else if (s.equals("" ""))     ;
    else if (s.equals(""+"")) ops.push(s);
    else if (s.equals(""-"")) ops.push(s);
    else if (s.equals(""*"")) ops.push(s);
    else if (s.equals(""/"")) ops.push(s);
    else if (s.equals("")""))
    {
     String op = ops.pop();
    if (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
    else if (op.equals(""-"")) vals.push(vals.pop() - vals.pop());
    else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
    else if (op.equals(""/"")){
        double a = vals.pop();
        double b = vals.pop();
        vals.push( b / a );
    }
    }
    else vals.push(Double.parseDouble(s));
    }
//    System.out.println(vals.pop());
    while(!ops.isEmpty()){
        String op = ops.pop();
    if (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
    else if (op.equals(""-"")) vals.push(vals.pop() - vals.pop());
    else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
    else if (op.equals(""/"")) {
        double a = vals.pop();
        double b = vals.pop();
        vals.push( b / a );
    }
    }
        
        
      return vals.pop();
}
    public static void main(String[] args) {
      
        
    }
    
}

@5221cb5599545278afe5bf78c38be95d@"
"r04945022","10","0.099","105792","@b11bc5eaf79fc40a0cbf98a15bff4a46@
/**
 *
 * @author Daniel C
 */
public class Calculator {

    public Double ans (String e) {
        String [] inputnumb = e.split("" "");
      // please replace the following null to the answer you calculated.
    Stack<String> ops = new Stack<String>();
    Stack<Double> vals = new Stack<Double>();
    for(int i=0; i<inputnumb.length;i++) {
    String s = inputnumb[i];
//    System.out.println(s);
    if (s.contains(""(""))   ;
    else if (s.equals("" ""))     ;
    else if (s.equals(""+"")) ops.push(s);
    else if (s.equals(""-"")) ops.push(s);
    else if (s.equals(""*"")) ops.push(s);
    else if (s.equals(""/"")) ops.push(s);
    else if (s.equals("")""))
    {
     String op = ops.pop();
    if (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
    else if (op.equals(""-"")) {
         double a = vals.pop();
        double b = vals.pop();
        vals.push( b - a );
    }
    else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
    else if (op.equals(""/"")){
        double a = vals.pop();
        double b = vals.pop();
        vals.push( b / a );
    }
    }
    else vals.push(Double.parseDouble(s));
    }
//    System.out.println(vals.pop());
    while(!ops.isEmpty()){
        String op = ops.pop();
    if (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
    else if (op.equals(""-"")) {
        double a = vals.pop();
        double b = vals.pop();
        vals.push( b - a );
    }
    else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
    else if (op.equals(""/"")) {
        double a = vals.pop();
        double b = vals.pop();
        vals.push( b / a );
    }
    }
        
        
      return vals.pop();
}
    public static void main(String[] args) {
      
        
    }
    
}

@b11bc5eaf79fc40a0cbf98a15bff4a46@"
"r04921012","0","0.099","105792","@2e5f9bfba92ee37198ce742a5d923daa@
package calculator;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;

/**
 *
 * @author steven
 */
public class Calculator {

    public Calculator(){

    
}
    public Double ans(String e){
        String[] strings=e.split("" "");
        return calculate(strings);
    }
    public Double calculate(String[] strings){
                
                int indexF=-1;
                int indexB=4;

                for (int i=0;i<strings.length;i++){
                    
                    if (strings[i].equals(""(""))
                        indexF=i;
                    if (strings[i].equals("")"")){
                        indexB=i;           
                        break;
                    }
                }
                
                // multiplication and devision first
                for (int j=indexF+2;j<indexB-1;j=j+2){
                    double a=0;
                   // System.out.println(j);
                    if (isMD(strings[j])>2){
                        if (isMD(strings[j])==3){
                            //System.out.println(""*"");
                            //System.out.println(strings.length);
                            a=Double.parseDouble(strings[j-1])* Double.parseDouble(strings[j+1]);}
                        if (isMD(strings[j])==4){
                            //System.out.println(""/"");
                            //System.out.println(strings.length);
                            a=Double.parseDouble(strings[j-1])/ Double.parseDouble(strings[j+1]);}
                        
                            
                        
                        if (j==2){
                            //System.out.println(""strings==1"");
                            return a;}
                        else{
                            newArray(strings,a,j-2,5);
                            return calculate(strings);
                        }
                    }    
                }
                // Then addition and subtraction
                for (int j=indexF+2;j<indexB-1;j=j+2){
                    double a=0;
                    if (isAS(strings[j])==1){
                           // System.out.println(""+"");
                            //System.out.println(strings.length);
                            a=Double.parseDouble(strings[j-1])+ Double.parseDouble(strings[j+1]);
                    }else if (isAS(strings[j])==2){
                            //System.out.println(""-"");
                            //System.out.println(strings.length);
                            a=Double.parseDouble(strings[j-1])- Double.parseDouble(strings[j+1]);
                    }
                       
                        
                            
                        if (j==2){
                            //System.out.println(""strings==1"");
                            return a;
                        }
                            
                        else{
                            newArray(strings,a,j-2,5);
                            return calculate(strings);
                        }
                            
                 }
                return -1.0;
    }
    public void newArray(String[] sArray,double append,int del,int len){
        sArray[del]=String.valueOf(append);
        System.arraycopy(sArray,del+len,sArray,del+1,sArray.length-len-del);
    }
    public int isAS(String s){
        int type=0;
        if (s.equals(""+""))
            type =1;
        else if (s.equals(""-""))
            type=2;
        return type;
    }
    public int isMD(String s){
        int type=0;
        if (s.equals(""*""))
            type =3;
        else if (s.equals(""/""))
            type=4;
        return type;
    }


    public static void main(String[] args) {
        String e=""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "";
        Calculator cct=new Calculator();
        System.out.println(cct.ans(e));
    }
    
}

@2e5f9bfba92ee37198ce742a5d923daa@"
"r04921012","10","0.099","105504","@f44732bce1c642da1b56c87cb18c38f8@
//package calculator;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;

/**
 *
 * @author steven
 */
public class Calculator {


    public Double ans(String e){
        String[] strings=e.split("" "");
        return calculate(strings);
    }
    public Double calculate(String[] strings){
                
                int indexF=-1;
                int indexB=4;

                for (int i=0;i<strings.length;i++){
                    
                    if (strings[i].equals(""(""))
                        indexF=i;
                    if (strings[i].equals("")"")){
                        indexB=i;           
                        break;
                    }
                }
                
                // multiplication and devision first
                for (int j=indexF+2;j<indexB-1;j=j+2){
                    double a=0;
                   // System.out.println(j);
                    if (isMD(strings[j])>2){
                        if (isMD(strings[j])==3){
                            //System.out.println(""*"");
                            //System.out.println(strings.length);
                            a=Double.parseDouble(strings[j-1])* Double.parseDouble(strings[j+1]);}
                        if (isMD(strings[j])==4){
                            //System.out.println(""/"");
                            //System.out.println(strings.length);
                            a=Double.parseDouble(strings[j-1])/ Double.parseDouble(strings[j+1]);}
                        
                            
                        
                        if (j==2){
                            //System.out.println(""strings==1"");
                            return a;}
                        else{
                            newArray(strings,a,j-2,5);
                            return calculate(strings);
                        }
                    }    
                }
                // Then addition and subtraction
                for (int j=indexF+2;j<indexB-1;j=j+2){
                    double a=0;
                    if (isAS(strings[j])==1){
                           // System.out.println(""+"");
                            //System.out.println(strings.length);
                            a=Double.parseDouble(strings[j-1])+ Double.parseDouble(strings[j+1]);
                    }else if (isAS(strings[j])==2){
                            //System.out.println(""-"");
                            //System.out.println(strings.length);
                            a=Double.parseDouble(strings[j-1])- Double.parseDouble(strings[j+1]);
                    }
                       
                        
                            
                        if (j==2){
                            //System.out.println(""strings==1"");
                            return a;
                        }
                            
                        else{
                            newArray(strings,a,j-2,5);
                            return calculate(strings);
                        }
                            
                 }
                return -1.0;
    }
    public void newArray(String[] sArray,double append,int del,int len){
        sArray[del]=String.valueOf(append);
        System.arraycopy(sArray,del+len,sArray,del+1,sArray.length-len-del);
    }
    public int isAS(String s){
        int type=0;
        if (s.equals(""+""))
            type =1;
        else if (s.equals(""-""))
            type=2;
        return type;
    }
    public int isMD(String s){
        int type=0;
        if (s.equals(""*""))
            type =3;
        else if (s.equals(""/""))
            type=4;
        return type;
    }


    public static void main(String[] args) {
        String e=""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "";
        Calculator cct=new Calculator();
        System.out.println(cct.ans(e));
    }
    
}

@f44732bce1c642da1b56c87cb18c38f8@"
"b02611012","0","0","0","@8df8af2675f60ff63ef173b65de4078c@


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author user
 */
public class Calculator {

    public Double ans(String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String ss[] = e.split("" "");
        for (int i = 0; i < ss.length; i++) {
            String s = ss[i];
            if (s.equals(""("")) ; 
            else if (s.equals(""+"")) {
                ops.push(s);
            }
            else if (s.equals(""*"")) {
                ops.push(s);
            }
            else if (s.equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } 
                else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                }
            }
            else vals.push(Double.parseDouble(s));
        }
        StdOut.println(vals.pop());
//            aa = Double.parseDouble(vals.pop());
        return vals.pop();
    }

    /**
     *
     * @param args
     */
    public static void main(String[] args) {
        System.out.printf(""-1"");
    }

}

@8df8af2675f60ff63ef173b65de4078c@"
"b02611012","0","0","0","@ea051f22b3d322be9e61a0403ff74b28@


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author user
 */
public class Calculator {

    public Double ans(String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String ss[] = e.split("" "");
        for (int i = 0; i < ss.length; i++) {
            String s = ss[i];
            if (s.equals(""("")) ; 
            else if (s.equals(""+"")) {
                ops.push(s);
            }
            else if (s.equals(""-"")) {
                ops.push(s);
            }
            else if (s.equals(""*"")) {
                ops.push(s);
            }
            else if (s.equals(""/"")) {
                ops.push(s);
            }
            else if (s.equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } 
                else if (op.equals(""-"")) {
                    vals.push(vals.pop() - vals.pop());
                }
                else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                }
                else if (op.equals(""/"")) {
                    vals.push(vals.pop() / vals.pop());
                }
            }
            else vals.push(Double.parseDouble(s));
        }
        StdOut.println(vals.pop());
//            aa = Double.parseDouble(vals.pop());
        return vals.pop();
    }

    /**
     *
     * @param args
     */
    public static void main(String[] args) {
        Calculator cct = new Calculator();
        cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"");
    }

}

@ea051f22b3d322be9e61a0403ff74b28@"
"b02611012","0","1","105888","@98ded5f3baddb509e36df6230a182143@


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author user
 */
public class Calculator {

    public Double ans(String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String ss[] = e.split("" "");
        for (int i = 0; i < ss.length; i++) {
            String s = ss[i];
            if (s.equals(""("")) ; 
            else if (s.equals(""+"")) {
                ops.push(s);
            }
            else if (s.equals(""-"")) {
                ops.push(s);
            }
            else if (s.equals(""*"")) {
                ops.push(s);
            }
            else if (s.equals(""/"")) {
                ops.push(s);
            }
            else if (s.equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } 
                else if (op.equals(""-"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b - a);
                }
                else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                }
                else if (op.equals(""/"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b / a);
                }
            }
            else vals.push(Double.parseDouble(s));
        }
        double answer = vals.pop();
        StdOut.println(answer);
//            aa = Double.parseDouble(vals.pop());
        return answer;
    }

    /**
     *
     * @param args
     */
    public static void main(String[] args) {
        Calculator cct = new Calculator();
        cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"");
    }

}

@98ded5f3baddb509e36df6230a182143@"
"b02611012","0","0.97","105920","@d7be57f7e5d53ef5248b167d4399d157@

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author user
 */
public class Calculator {

    public Double ans(String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String ss[] = e.split("" "");
        for (int i = 0; i < ss.length; i++) {
            String s = ss[i];
            if (s.equals(""("")) ; 
            else if (s.equals(""+"")) {
                ops.push(s);
            }
            else if (s.equals(""-"")) {
                ops.push(s);
            }
            else if (s.equals(""*"")) {
                ops.push(s);
            }
            else if (s.equals(""/"")) {
                ops.push(s);
            }
            else if (s.equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } 
                else if (op.equals(""-"")) {
                    Double a = vals.pop();
                    Double b = vals.pop();
                    vals.push(b - a);
                }
                else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                }
                else if (op.equals(""/"")) {
                    Double a = vals.pop();
                    Double b = vals.pop();
                    vals.push(b / a);
                }
            }
            else vals.push(Double.parseDouble(s));
        }
        Double answer = vals.pop();
        StdOut.println(answer);
//            aa = Double.parseDouble(vals.pop());
        return answer;
    }

    /**
     *
     * @param args
     */
    public static void main(String[] args) {
        Calculator cct = new Calculator();
        cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"");
    }

}

@d7be57f7e5d53ef5248b167d4399d157@"
"b02611012","0","1","105920","@d0088f7bb2b7f9cac50c7561454105c1@


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author user
 */
public class Calculator {

    public Double ans(String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String ss[] = e.split("" "");
        for (int i = 0; i < ss.length; i++) {
            String s = ss[i];
            if (s.equals(""("")) ; 
            else if (s.equals(""+"")) {
                ops.push(s);
            }
            else if (s.equals(""-"")) {
                ops.push(s);
            }
            else if (s.equals(""*"")) {
                ops.push(s);
            }
            else if (s.equals(""/"")) {
                ops.push(s);
            }
            else if (s.equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } 
                else if (op.equals(""-"")) {
                    Double a = vals.pop();
                    Double b = vals.pop();
                    vals.push(b - a);
                }
                else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                }
                else if (op.equals(""/"")) {
                    Double a = vals.pop();
                    Double b = vals.pop();
                    vals.push(b / a);
                }
            }
            else vals.push(Double.parseDouble(s));
        }
        Double answer = vals.pop();
        StdOut.println(answer);
//            aa = Double.parseDouble(vals.pop());
        return answer;
    }

    /**
     *
     * @param args
     */
//    public static void main(String[] args) {
//        Calculator cct = new Calculator();
//        cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"");
//    }

}

@d0088f7bb2b7f9cac50c7561454105c1@"
"b02611012","0","0.98","105872","@f9b2990fc79d9145a213906d1623a102@


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author user
 */
public class Calculator {

    public Double ans(String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String ss[] = e.split("" "");
        for (int i = 0; i < ss.length; i++) {
            String s = ss[i];
            if (s.equals(""("")) ; 
            else if (s.equals(""+"")) {
                ops.push(s);
            }
            else if (s.equals(""-"")) {
                ops.push(s);
            }
            else if (s.equals(""*"")) {
                ops.push(s);
            }
            else if (s.equals(""/"")) {
                ops.push(s);
            }
            else if (s.equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } 
                else if (op.equals(""-"")) {
                    Double a = vals.pop();
                    Double b = vals.pop();
                    vals.push(b - a);
                }
                else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                }
                else if (op.equals(""/"")) {
                    Double a = vals.pop();
                    Double b = vals.pop();
                    vals.push(b / a);
                }
            }
            else vals.push(Double.parseDouble(s));
        }
        Double answer = vals.pop();
        StdOut.println(answer);
//            aa = Double.parseDouble(vals.pop());
        return answer;
    }

    /**
     *
     * @param args
     */
    public static void main(String[] args) {
        Calculator cct = new Calculator();
        cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"");
    }

}

@f9b2990fc79d9145a213906d1623a102@"
"b02611012","0","1.01","105920","@061b0ed46fa846c202650f400b9db0c6@


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author user
 */
public class Calculator {

    public Double ans(String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String ss[] = e.split("" "");
        for (int i = 0; i < ss.length; i++) {
            String s = ss[i];
            if (s.equals(""("")) { 
                continue;
            }
            else if (s.equals(""+"")) {
                ops.push(s);
            }
            else if (s.equals(""-"")) {
                ops.push(s);
            }
            else if (s.equals(""*"")) {
                ops.push(s);
            }
            else if (s.equals(""/"")) {
                ops.push(s);
            }
            else if (s.equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } 
                else if (op.equals(""-"")) {
                    Double a = vals.pop();
                    Double b = vals.pop();
                    vals.push(b - a);
                }
                else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                }
                else if (op.equals(""/"")) {
                    Double a = vals.pop();
                    Double b = vals.pop();
                    vals.push(b / a);
                }
            }
            else vals.push(Double.parseDouble(s));
            
        }
        Double answer = vals.pop();
        StdOut.println(answer);
//            aa = Double.parseDouble(vals.pop());
        return answer;
    }

    /**
     *
     * @param args
     */
    public static void main(String[] args) {
        Calculator cct = new Calculator();
        cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"");
    }

}

@061b0ed46fa846c202650f400b9db0c6@"
"b02611012","0","1.01","105904","@4353d03655eaaf90ca67a9e5a5d769e1@


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author user
 */
public class Calculator {
    private Double answer;
    public Double ans(String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String ss[] = e.split("" "");
        for (int i = 0; i < ss.length; i++) {
            String s = ss[i];
            if (s.equals(""("")) { 
                continue;
            }
            else if (s.equals(""+"")) {
                ops.push(s);
            }
            else if (s.equals(""-"")) {
                ops.push(s);
            }
            else if (s.equals(""*"")) {
                ops.push(s);
            }
            else if (s.equals(""/"")) {
                ops.push(s);
            }
            else if (s.equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } 
                else if (op.equals(""-"")) {
                    Double a = vals.pop();
                    Double b = vals.pop();
                    vals.push(b - a);
                }
                else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                }
                else if (op.equals(""/"")) {
                    Double a = vals.pop();
                    Double b = vals.pop();
                    vals.push(b / a);
                }
            }
            else vals.push(Double.parseDouble(s));
        }
        answer = vals.pop();
        StdOut.println(answer);
        return answer;
    }

    /**
     *
     * @param args
     */
    public static void main(String[] args) {
        Calculator cct = new Calculator();
        cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"");
    }

}

@4353d03655eaaf90ca67a9e5a5d769e1@"
"b02611012","0","1.01","105904","@583826f1ddba0316fb112817313f581e@
import edu.princeton.cs.algs4.Stack;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author user
 */
public class Calculator {
    private Double answer;
    public Double ans(String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String ss[] = e.split("" "");
        for (int i = 0; i < ss.length; i++) {
            String s = ss[i];
            if (s.equals(""("")) { 
                continue;
            }
            else if (s.equals(""+"")) {
                ops.push(s);
            }
            else if (s.equals(""-"")) {
                ops.push(s);
            }
            else if (s.equals(""*"")) {
                ops.push(s);
            }
            else if (s.equals(""/"")) {
                ops.push(s);
            }
            else if (s.equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } 
                else if (op.equals(""-"")) {
                    Double a = vals.pop();
                    Double b = vals.pop();
                    vals.push(b - a);
                }
                else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                }
                else if (op.equals(""/"")) {
                    Double a = vals.pop();
                    Double b = vals.pop();
                    vals.push(b / a);
                }
            }
            else vals.push(Double.parseDouble(s));
        }
        answer = vals.pop();
        StdOut.println(answer);
        return answer;
    }

    /**
     *
     * @param args
     */
    public static void main(String[] args) {
        Calculator cct = new Calculator();
        String cc = (""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"");
        cct.ans(cc);
    }
}

@583826f1ddba0316fb112817313f581e@"
"b02611012","0","0.98","105936","@ebb18118f50126f270632ba07dff8d2c@

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author user
 */
public class Calculator {
    public Double answer;
    public Double ans(String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String ss[] = e.split("" "");
        for (int i = 0; i < ss.length; i++) {
            String s = ss[i];
            if (s.equals(""("")) { 
                continue;
            }
            else if (s.equals(""+"")) {
                ops.push(s);
            }
            else if (s.equals(""-"")) {
                ops.push(s);
            }
            else if (s.equals(""*"")) {
                ops.push(s);
            }
            else if (s.equals(""/"")) {
                ops.push(s);
            }
            else if (s.equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } 
                else if (op.equals(""-"")) {
                    Double a = vals.pop();
                    Double b = vals.pop();
                    vals.push(b - a);
                }
                else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                }
                else if (op.equals(""/"")) {
                    Double a = vals.pop();
                    Double b = vals.pop();
                    vals.push(b / a);
                }
            }
            else vals.push(Double.parseDouble(s));
        }
        answer = vals.pop();
        StdOut.println(answer);
        return answer;
    }

    /**
     *
     * @param args
     */
    public static void main(String[] args) {
        Calculator cct = new Calculator();
        String cc = (""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"");
        cct.ans(cc);
    }
}

@ebb18118f50126f270632ba07dff8d2c@"
"f02631008","0","0","0","@945de5d2563405c110c8305730878735@
import java.io.*;
import java.io.IOException;
import java.util.Scanner;
import java.util.*;

public class Calculator {
    
    public Double ans(String e) {
        Double Ans = 0.0;
  
        int StrLength = e.length();
        String[] CharArr;
        CharArr = new String[StrLength];
        double[] NumArr;
        NumArr = new double[StrLength];
        String Char;
        int Oper = 0;
        double NU2 = 0;
        double NU1 = 0; 
        int NU1flag = 0;
        int NU2flag = 0;
        int Operflag = 0;
        
        for(int i = 0; i < StrLength; i++){
            Char = Character.toString(e.charAt(i));
            CharArr[i] = Char;
            if(CharArr[i].equals(new String(""("")) || CharArr[i].equals(new String("")"")) || CharArr[i].equals(new String(""+"")) || CharArr[i].equals(new String(""-"")) || CharArr[i].equals(new String(""*""))|| CharArr[i].equals(new String(""/"")) ){
                //NumArr[i] =  Integer.parseInt(CharArr[i]);
            }
            else{
                NumArr[i] =  Integer.parseInt(CharArr[i]);
            }
        }
                
        for(int i = 0; i < StrLength; i++){
            Char = Character.toString(e.charAt(i));
            CharArr[i] = Char;
            NU2flag = 1;
            Operflag = 1;
            NU1 = 0;
            NU2 = 0;
            Ans = 0.0;
            if(Operflag == 1 && CharArr[i].equals(new String("")""))){
                CharArr[i] = ""0"";
                for(int j = i; j >= 0; j--){
                    if(NU2flag == 1 && (CharArr[j].equals(new String(""+"")) || CharArr[j].equals(new String(""-""))|| CharArr[j].equals(new String(""*""))|| CharArr[j].equals(new String(""/"")))){
                        for(int k = 0; k < i-j-1; k++){
                            NU2 = NU2 + NumArr[i-k-1]*Math.pow(10,k);
                            NumArr[i-k-1] = 0;
                            CharArr[i-k-1] = ""0"";
                        }
                        NU1flag = 1;
                        NU2flag = 0;
                        Oper = j;
                    }
                    if(NU1flag == 1 && CharArr[j].equals(new String(""("")) && CharArr[Oper].equals(new String(""+""))){
                        for(int k = 0; k < Oper-j-1; k++){
                            NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k);
                            NumArr[Oper-k-1] = 0;
                            CharArr[Oper-k-1] = ""0"";
                        }
                        Ans = Ans + NU1 + NU2;
                        NumArr[i] = Ans;
                        CharArr[i] = String.valueOf(Ans);
                        
                        CharArr[j] = ""0"";
                        CharArr[Oper] = ""0"";
                        Operflag = 0;
                        break;
                    }
                    if(NU1flag == 1 && CharArr[j].equals(new String(""("")) && CharArr[Oper].equals(new String(""-""))){
                        for(int k = 0; k < Oper-j-1; k++){
                            NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k);
                            NumArr[Oper-k-1] = 0;
                            CharArr[Oper-k-1] = ""0"";
                        }
                        Ans = Ans + NU1 - NU2;
                        NumArr[i] = Ans;
                        CharArr[i] = String.valueOf(Ans);
                        
                        CharArr[j] = ""0"";
                        CharArr[Oper] = ""0"";
                    }
                    if(NU1flag == 1 && CharArr[j].equals(new String(""("")) && CharArr[Oper].equals(new String(""*""))){
                        for(int k = 0; k < Oper-j-1; k++){
                            NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k);
                            NumArr[Oper-k-1] = 0;
                            CharArr[Oper-k-1] = ""0"";
                        }
                        Ans = Ans + NU1 * NU2;
                        NumArr[i] = Ans;
                        CharArr[i] = String.valueOf(Ans);
                        
                        CharArr[j] = ""0"";
                        CharArr[Oper] = ""0"";
                    }
                    if(NU1flag == 1 && CharArr[j].equals(new String(""("")) && CharArr[Oper].equals(new String(""/""))){
                        for(int k = 0; k < Oper-j-1; k++){
                            NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k);
                            NumArr[Oper-k-1] = 0;
                            CharArr[Oper-k-1] = ""0"";
                        }
                        Ans = Ans + NU1 / NU2;
                        NumArr[i] = Ans;
                        CharArr[i] = String.valueOf(Ans);
                        
                        CharArr[j] = ""0"";
                        CharArr[Oper] = ""0"";
                    }
                }
            }
        }        
      return Ans;
    }   

    public static void main(String[] args) {
//        String eq = ""1+(12+5)"";
//        String eq = ""((1+(12*5))-(3*4))"";
        String eq = ""(((1+(12*5))-(3*4))+(4/5))"";
        Calculator cct = new Calculator();
        double a = cct.ans(eq);
        System.out.println(a); 
    }
}

@945de5d2563405c110c8305730878735@"
"f02631008","1","0.09","105552","@f07ddd44a10c82576e71a2867c07ecc8@
import java.io.*;
import java.io.IOException;
import java.util.Scanner;
import java.util.*;

public class Calculator {
    
    public Double ans(String e) {
        String e1 = e.replaceAll(""\\s"","""");
        Double Ans = 0.0;
  
        int StrLength = e1.length();
        String[] CharArr;
        CharArr = new String[StrLength];
        double[] NumArr;
        NumArr = new double[StrLength];
        String Char;
        int Oper = 0;
        double NU2 = 0;
        double NU1 = 0; 
        int NU1flag = 0;
        int NU2flag = 0;
        int Operflag = 0;
        
        for(int i = 0; i < StrLength; i++){
            Char = Character.toString(e1.charAt(i));
            CharArr[i] = Char;
            if(CharArr[i].equals(new String(""("")) || CharArr[i].equals(new String("")"")) || CharArr[i].equals(new String(""+"")) || CharArr[i].equals(new String(""-"")) || CharArr[i].equals(new String(""*""))|| CharArr[i].equals(new String(""/"")) ){
                //NumArr[i] =  Integer.parseInt(CharArr[i]);
            }
            else{
                NumArr[i] =  Integer.parseInt(CharArr[i]);
            }
        }
                
        for(int i = 0; i < StrLength; i++){
            Char = Character.toString(e1.charAt(i));
            CharArr[i] = Char;
            NU2flag = 1;
            Operflag = 1;
            NU1 = 0;
            NU2 = 0;
            Ans = 0.0;
            if(Operflag == 1 && CharArr[i].equals(new String("")""))){
                CharArr[i] = ""0"";
                for(int j = i; j >= 0; j--){
                    if(NU2flag == 1 && (CharArr[j].equals(new String(""+"")) || CharArr[j].equals(new String(""-""))|| CharArr[j].equals(new String(""*""))|| CharArr[j].equals(new String(""/"")))){
                        for(int k = 0; k < i-j-1; k++){
                            NU2 = NU2 + NumArr[i-k-1]*Math.pow(10,k);
                            NumArr[i-k-1] = 0;
                            CharArr[i-k-1] = ""0"";
                        }
                        NU1flag = 1;
                        NU2flag = 0;
                        Oper = j;
                    }
                    if(NU1flag == 1 && CharArr[j].equals(new String(""("")) && CharArr[Oper].equals(new String(""+""))){
                        for(int k = 0; k < Oper-j-1; k++){
                            NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k);
                            NumArr[Oper-k-1] = 0;
                            CharArr[Oper-k-1] = ""0"";
                        }
                        Ans = Ans + NU1 + NU2;
                        NumArr[i] = Ans;
                        CharArr[i] = String.valueOf(Ans);
                        
                        CharArr[j] = ""0"";
                        CharArr[Oper] = ""0"";
                        Operflag = 0;
                        break;
                    }
                    if(NU1flag == 1 && CharArr[j].equals(new String(""("")) && CharArr[Oper].equals(new String(""-""))){
                        for(int k = 0; k < Oper-j-1; k++){
                            NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k);
                            NumArr[Oper-k-1] = 0;
                            CharArr[Oper-k-1] = ""0"";
                        }
                        Ans = Ans + NU1 - NU2;
                        NumArr[i] = Ans;
                        CharArr[i] = String.valueOf(Ans);
                        
                        CharArr[j] = ""0"";
                        CharArr[Oper] = ""0"";
                    }
                    if(NU1flag == 1 && CharArr[j].equals(new String(""("")) && CharArr[Oper].equals(new String(""*""))){
                        for(int k = 0; k < Oper-j-1; k++){
                            NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k);
                            NumArr[Oper-k-1] = 0;
                            CharArr[Oper-k-1] = ""0"";
                        }
                        Ans = Ans + NU1 * NU2;
                        NumArr[i] = Ans;
                        CharArr[i] = String.valueOf(Ans);
                        
                        CharArr[j] = ""0"";
                        CharArr[Oper] = ""0"";
                    }
                    if(NU1flag == 1 && CharArr[j].equals(new String(""("")) && CharArr[Oper].equals(new String(""/""))){
                        for(int k = 0; k < Oper-j-1; k++){
                            NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k);
                            NumArr[Oper-k-1] = 0;
                            CharArr[Oper-k-1] = ""0"";
                        }
                        Ans = Ans + NU1 / NU2;
                        NumArr[i] = Ans;
                        CharArr[i] = String.valueOf(Ans);
                        
                        CharArr[j] = ""0"";
                        CharArr[Oper] = ""0"";
                    }
                }
            }
        }        
      return Ans;
    }   

    public static void main(String[] args) {
//        String eq = ""1+(12+5)"";
//        String eq = ""((1+(12*5))-(3*4))"";
//        String eq = ""(((1+(12*5))-(3*4))+(4/5))"";
//        String eq = ""(((1+(12*5))-(3*4))+(4/5))"";( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) 
        String eq = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "";
        Calculator cct = new Calculator();
        double a = cct.ans(eq);
        System.out.println(a); 
    }
}

@f07ddd44a10c82576e71a2867c07ecc8@"
"b02611026","10","0.099","105824","@157856ffbff58af56557a2ccdb96eaa7@
import java.io.IOException;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.StringReader;
import java.io.*;

public class Calculator {

    //StackOfStrings stack = new StackOfStrings();
    public Double ans(String e) {

        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        //StdOut.println(e.length());
        int i = 0;
        String[] ch = e.split("" "");
        while(i < ch.length-1){
            //StdOut.println(""bug"");
            
//            if ((ch = e.split("" ""))==null) {
//                StdOut.println(""break!!!"");
//                break;
//            }
           i++;
            //e = StdIn.readString();
            //ch = e.split("" "");
            
            //StdOut.println(ch.length);
            //StdOut.println(ch[i]);
            if (ch[i].equals(""("")) {
                //StdOut.println(""1"");
            } else if (ch[i].equals(""+"")) {
                ops.push(ch[i]);
                //StdOut.println(""2"");
            } else if (ch[i].equals(""*"")) {
                ops.push(ch[i]);
                //StdOut.println(""3"");
            } else if (ch[i].equals(""/"")) {
                ops.push(ch[i]);
                //StdOut.println(""3"");
            } else if (ch[i].equals(""-"")) {
                ops.push(ch[i]);
                //StdOut.println(""3"");
            } else if (ch[i].equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {                    
                    vals.push(vals.pop() + vals.pop());
                    //StdOut.println(""4"");
                } else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                    //StdOut.println(""5"");
                } else if (op.equals(""/"")) {
                    double one = vals.pop();
                    double two = vals.pop();
                    vals.push(two / one);
                    //StdOut.println(""5"");
                } else if (op.equals(""-"")) {
                    double one = vals.pop();
                    double two = vals.pop();
                    vals.push(two - one);
                    //StdOut.println(""5"");
                }

            } else {
                vals.push(Double.parseDouble(ch[i]));
                //StdOut.println(""6"");
            }

            
            
        }

        double ans = vals.pop();
        //StdOut.println(ans);
//StdOut.println(""aaa"");
        //Calculator ccl = new Calculator();
        //LinkedStackOfStrings linkedstack = ccl.new LinkedStackOfStrings();

        return ans;
    }

    public static void main(String[] args) {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            Calculator cct = new Calculator();
            String input;
            input = br.readLine();
            //System.out.printf(input);
            cct.ans(input);

            //System.out.printf(""\n\n\n"");
            StdOut.println(cct.ans(input));
        } catch (IOException ex) {
            System.out.printf(""Failed to open the file"");

        }
    }
}

@157856ffbff58af56557a2ccdb96eaa7@"
"b02611012","0","1","105920","@778bc94e4a757ea2eb10ac0d5e19f4d8@
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author user
 */
public class Calculator {
    public Double answer;
    public Double ans(String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String ss[] = e.split("" "");
        for (int i = 0; i < ss.length; i++) {
            String s = ss[i];
            if (s.equals(""("")) { 
                continue;
            }
            else if (s.equals(""+"")) {
                ops.push(s);
            }
            else if (s.equals(""-"")) {
                ops.push(s);
            }
            else if (s.equals(""*"")) {
                ops.push(s);
            }
            else if (s.equals(""/"")) {
                ops.push(s);
            }
            else if (s.equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } 
                else if (op.equals(""-"")) {
                    Double a = vals.pop();
                    Double b = vals.pop();
                    vals.push(b - a);
                }
                else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                }
                else if (op.equals(""/"")) {
                    Double a = vals.pop();
                    Double b = vals.pop();
                    vals.push(b / a);
                }
            }
            else vals.push(Double.parseDouble(s));
        }
        answer = vals.pop();
        StdOut.println(answer);
        return answer;
    }

    /**
     *
     * @param args
     */
    public static void main(String[] args) {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            Calculator cct = new Calculator();
            String input;
            input = br.readLine();
            //System.out.printf(input);
            cct.ans(input);

            //System.out.printf(""\n\n\n"");
            StdOut.println(cct.ans(input));
        } catch (IOException ex) {
            System.out.printf(""Failed to open the file"");

        }
    }
}

@778bc94e4a757ea2eb10ac0d5e19f4d8@"
"b02611012","0","1","105920","@9c8ca21e0ffe8c29fc707eeb298a4c26@
import edu.princeton.cs.algs4.Stack;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author user
 */
public class Calculator {
    public Double answer;
    public Double ans(String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String ss[] = e.split("" "");
        for (int i = 0; i < ss.length; i++) {
            String s = ss[i];
            if (s.equals(""("")) { 
                continue;
            }
            else if (s.equals(""+"")) {
                ops.push(s);
            }
            else if (s.equals(""-"")) {
                ops.push(s);
            }
            else if (s.equals(""*"")) {
                ops.push(s);
            }
            else if (s.equals(""/"")) {
                ops.push(s);
            }
            else if (s.equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } 
                else if (op.equals(""-"")) {
                    Double a = vals.pop();
                    Double b = vals.pop();
                    vals.push(b - a);
                }
                else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                }
                else if (op.equals(""/"")) {
                    Double a = vals.pop();
                    Double b = vals.pop();
                    vals.push(b / a);
                }
            }
            else vals.push(Double.parseDouble(s));
        }
        answer = vals.pop();
        //StdOut.println(answer);
        return answer;
    }

    /**
     *
     * @param args
     */
    public static void main(String[] args) {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            Calculator cct = new Calculator();
            String input;
            input = br.readLine();
            //System.out.printf(input);
            cct.ans(input);

            //System.out.printf(""\n\n\n"");
            StdOut.println(cct.ans(input));
        } catch (IOException ex) {
            System.out.printf(""Failed to open the file"");

        }
    }
}

@9c8ca21e0ffe8c29fc707eeb298a4c26@"
"b02611012","10","0.099","105824","@9c9be7cace550e3809293c72414f5799@

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author user
 */
public class Calculator {
    public Double answer;
    public Double ans(String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String ss[] = e.split("" "");
        for (int i = 0; i < ss.length; i++) {
            String s = ss[i];
            if (s.equals(""("")) { 
                continue;
            }
            else if (s.equals(""+"")) {
                ops.push(s);
            }
            else if (s.equals(""-"")) {
                ops.push(s);
            }
            else if (s.equals(""*"")) {
                ops.push(s);
            }
            else if (s.equals(""/"")) {
                ops.push(s);
            }
            else if (s.equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } 
                else if (op.equals(""-"")) {
                    Double a = vals.pop();
                    Double b = vals.pop();
                    vals.push(b - a);
                }
                else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                }
                else if (op.equals(""/"")) {
                    Double a = vals.pop();
                    Double b = vals.pop();
                    vals.push(b / a);
                }
            }
            else vals.push(Double.parseDouble(s));
        }
        answer = vals.pop();
        //StdOut.println(answer);
        return answer;
    }

    /**
     *
     * @param args
     */
    public static void main(String[] args) {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            Calculator cct = new Calculator();
            String input;
            input = br.readLine();
            //System.out.printf(input);
            cct.ans(input);

            //System.out.printf(""\n\n\n"");
            StdOut.println(cct.ans(input));
        } catch (IOException ex) {
            System.out.printf(""Failed to open the file"");

        }
    }
}

@9c9be7cace550e3809293c72414f5799@"
"r03522809","0","1.01","105904","@0096ebbbf081bf89911669a2a6607b56@import java.io.FileReader;
import java.io.BufferedReader;

/**
 *
 * @author Dennis
 */
public class Calculator {

public static Double ans(String e) {

        String[] equation = e.split("" "");
        Stack sta = new Stack();
        Stack num = new Stack();
        Stack opt = new Stack();
        int l = equation.length;
        int c=0,i=0;
        String op;
        double C=0,A=0,B=0;
                while( i < l )
                {

                    if (equation[i].indexOf(""("") != -1)
                    {
                       sta.push(equation[i]);

                       i++;
                    }
                    else if (equation[i].indexOf("")"") != -1)
                    {                     
                       String b;
                       sta.pop();
                       b=num.pop().toString();
                       B =  Float.valueOf(b.trim()).floatValue();

                       c=1;
                       i++;
                    }
                    else if (equation[i].indexOf(""+"") != -1)
                    {

                       opt.push(equation[i]);
                       i++;
                    }
                    else if (equation[i].indexOf(""-"") != -1)
                    {

                       opt.push(equation[i]);
                       i++;
                    }
                    else if (equation[i].indexOf(""*"") != -1)
                    {
                    
                       opt.push(equation[i]);                       
                       i++;
                    }
                    else if (equation[i].indexOf(""/"") != -1)
                    {
                     
                       opt.push(equation[i]);                       
                       i++;
                    }
                    else
                    {                        
                       num.push(equation[i]);
                       i++;                    
                    }
                    if(c == 1)
                    {
                     String a;
                     a=num.pop().toString();
                     op=opt.pop().toString();
                     A = Float.valueOf(a.trim()).floatValue();

                     c=0;
                     
                        if( op.equals(""+"")){
                            C= A+B ;
                            num.push(C);
 

                        }
                        else if(op.equals(""-"")){
                            C= A-B;
                            num.push(C); 


                        }
                        else if(op.equals(""*"")){
                            C= A*B;
                            num.push(C);
            
                        }
                        else if(op.equals(""/"")){
    
                        C= A/B;
                        num.push(C);

                        }
                    }
                }

      return C;
}
@0096ebbbf081bf89911669a2a6607b56@"
"r03522809","4","0.39","105776","@d937f43a9ecaac0fed00756fa387c71d@
import java.io.FileReader;
import java.io.BufferedReader;

/**
 *
 * @author Dennis
 */
public class Calculator {

public static Double ans(String e) {

        String[] equation = e.split("" "");
        Stack sta = new Stack();
        Stack num = new Stack();
        Stack opt = new Stack();
        int l = equation.length;
        int c=0,i=0;
        String op;
        double C=0,A=0,B=0;
                while( i < l )
                {

                    if (equation[i].indexOf(""("") != -1)
                    {
                       sta.push(equation[i]);

                       i++;
                    }
                    else if (equation[i].indexOf("")"") != -1)
                    {                     
                       String b;
                       sta.pop();
                       b=num.pop().toString();
                       B =  Float.valueOf(b.trim()).floatValue();

                       c=1;
                       i++;
                    }
                    else if (equation[i].indexOf(""+"") != -1)
                    {

                       opt.push(equation[i]);
                       i++;
                    }
                    else if (equation[i].indexOf(""-"") != -1)
                    {

                       opt.push(equation[i]);
                       i++;
                    }
                    else if (equation[i].indexOf(""*"") != -1)
                    {
                    
                       opt.push(equation[i]);                       
                       i++;
                    }
                    else if (equation[i].indexOf(""/"") != -1)
                    {
                     
                       opt.push(equation[i]);                       
                       i++;
                    }
                    else
                    {                        
                       num.push(equation[i]);
                       i++;                    
                    }
                    if(c == 1)
                    {
                     String a;
                     a=num.pop().toString();
                     op=opt.pop().toString();
                     A = Float.valueOf(a.trim()).floatValue();

                     c=0;
                     
                        if( op.equals(""+"")){
                            C= A+B ;
                            num.push(C);
 

                        }
                        else if(op.equals(""-"")){
                            C= A-B;
                            num.push(C); 


                        }
                        else if(op.equals(""*"")){
                            C= A*B;
                            num.push(C);
            
                        }
                        else if(op.equals(""/"")){
    
                        C= A/B;
                        num.push(C);

                        }
                    }
                }

      return C;
}

    /**
     * @param args the command line arguments
     */
     
    public static void main(String[] args)throws Exception {

           String k =""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"";    
           double CC=0;
           CC=ans(k);
           System.out.println(CC);    
           
//        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
//        String[] equation = br.readLine().split("" "");
//        Stack sta = new Stack();
//        Stack num = new Stack();
//        Stack opt = new Stack();
//        int l = equation.length;
//        int c=0,i=0;
//        String op;
//        double C=0,A=0,B=0;
//                while( i < l )
//                {
//
//                    if (equation[i].indexOf(""("") != -1)
//                    {
//                       sta.push(equation[i]);
//
//                       i++;
//                    }
//                    else if (equation[i].indexOf("")"") != -1)
//                    {                     
//                       String b;
//                       sta.pop();
//                       b=num.pop().toString();
//                       B =  Float.valueOf(b.trim()).floatValue();
//                       System.out.println(equation[i]);                       
//                       System.out.println(B);
//                       c=1;
//                       i++;
//                    }
//                    else if (equation[i].indexOf(""+"") != -1)
//                    {
//                       System.out.println(equation[i]);
//                       opt.push(equation[i]);
//                       i++;
//                    }
//                    else if (equation[i].indexOf(""-"") != -1)
//                    {
//                       System.out.println(equation[i]);
//                       opt.push(equation[i]);
//                       i++;
//                    }
//                    else if (equation[i].indexOf(""*"") != -1)
//                    {
//                       System.out.println(equation[i]);                       
//                       opt.push(equation[i]);                       
//                       i++;
//                    }
//                    else if (equation[i].indexOf(""/"") != -1)
//                    {
//                       System.out.println(equation[i]);                        
//                       opt.push(equation[i]);                       
//                       i++;
//                    }
//                    else
//                    {                        
//                       num.push(equation[i]);
//                       i++;                    
//                    }
//                    if(c == 1)
//                    {
//                     String a;
//                     a=num.pop().toString();
//                     op=opt.pop().toString();
//                     A = Float.valueOf(a.trim()).floatValue();
//                     System.out.println(A);
//                     c=0;
//                     
//                        if( op.equals(""+"")){
//                            C= A+B ;
//                            num.push(C);
//                        System.out.println(C);
//
//                        }
//                        else if(op.equals(""-"")){
//                            C= A-B;
//                            num.push(C); 
//                        System.out.println(C);
//
//                        }
//                        else if(op.equals(""*"")){
//                            C= A*B;
//                            num.push(C);
//                        System.out.println(C);              
//                        }
//                        else if(op.equals(""/"")){
//    
//                        C= A/B;
//                        num.push(C);
//                        System.out.println(C);
//                        }
//                    }
//                }
//        }
        // TODO code application logic here
    }
    
}

@d937f43a9ecaac0fed00756fa387c71d@"
"r04631006","10","0.101","105824","@5e1ac4199681b9445f610803a16d96ec@
public class Calculator {

//    private String e;
//    public Calculator(String a) {
//        e = a;
//    }
    public Double ans(String e) {
        // please replace the following null to the answer you calculated.

        if (e == null) {
            return null;
        } else {

            Stack<String> ops = new Stack<String>();
            Stack<Double> vals = new Stack<Double>();

            String[] s = e.split("" "");
            for (int i = 0; i < s.length; i++) {
                if (s[i].equals(""("")) {

                } else if (s[i].equals(""+"")) {
                    ops.push(s[i]);
                } else if (s[i].equals(""*"")) {
                    ops.push(s[i]);
                } else if (s[i].equals(""-"")) {
                    ops.push(s[i]);
                } else if (s[i].equals(""/"")) {
                    ops.push(s[i]);
                } else if (s[i].equals("")"")) {
                    String op = ops.pop();
                    if (op.equals(""+"")) {
                        Double a = vals.pop() + vals.pop();
                        vals.push(a);
//                        System.out.printf(""%f\n"", a);
                    } else if (op.equals(""*"")) {
                        Double a = vals.pop() * vals.pop();
                        vals.push(a);
//                        System.out.printf(""%f\n"", a);
                    } else if (op.equals(""-"")) {
                        Double a = vals.pop() ;
                        Double b = vals.pop();
                        Double c = b - a;
                        vals.push(c);
//                        System.out.printf(""%f\n"", c);
                    } else if (op.equals(""/"")) {
                        Double a = vals.pop() ;
                        Double b = vals.pop();
                        Double c = b / a;
                        vals.push(c);
//                        System.out.printf(""%f\n"", c);
                    }
                } else {
                    vals.push(Double.parseDouble(s[i]));
                }
            }

            return vals.pop();
        }
    }

    public static void main(String[] args) {

        String loca0 = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "";

        Calculator cct = new Calculator();
        System.out.printf(""%f"", cct.ans(loca0));

    }
}

@5e1ac4199681b9445f610803a16d96ec@"
"r03522809","4","0.4","105776","@f278b56cb9eeea81a5126f84586f8980@import java.io.FileReader;
import java.io.BufferedReader;

/**
 *
 * @author Dennis
 */
public class Calculator {

    public Calculator()
    {
        
    }
    
public Double ans(String e) {

        String[] equation = e.split("" "");
        Stack sta = new Stack();
        Stack num = new Stack();
        Stack opt = new Stack();
        int l = equation.length;
        int c=0,i=0;
        String op;
        double C=0,A=0,B=0;
                while( i < l )
                {
                    if (equation[i].indexOf(""("") != -1)
                    {
                       sta.push(equation[i]);
                       i++;
                    }
                    else if (equation[i].indexOf("")"") != -1)
                    {                     
                       String b;
                       sta.pop();
                       b=num.pop().toString();
                       B =  Float.valueOf(b.trim()).floatValue();
                       c=1;
                       i++;
                    }
                    else if (equation[i].indexOf(""+"") != -1)
                    {
                       opt.push(equation[i]);
                       i++;
                    }
                    else if (equation[i].indexOf(""-"") != -1)
                    {
                       opt.push(equation[i]);
                       i++;
                    }
                    else if (equation[i].indexOf(""*"") != -1)
                    {
                       opt.push(equation[i]);                       
                       i++;
                    }
                    else if (equation[i].indexOf(""/"") != -1)
                    {
                       opt.push(equation[i]);                       
                       i++;
                    }
                    else
                    {                        
                       num.push(equation[i]);
                       i++;                    
                    }
                    if(c == 1)
                    {
                     String a;
                     a=num.pop().toString();
                     op=opt.pop().toString();
                     A = Float.valueOf(a.trim()).floatValue();

                     c=0;
                     
                        if( op.equals(""+"")){
                            C= A+B ;
                            num.push(C);
                        }
                        else if(op.equals(""-"")){
                            C= A-B;
                            num.push(C); 
                        }
                        else if(op.equals(""*"")){
                            C= A*B;
                            num.push(C);
                        }
                        else if(op.equals(""/"")){
                        C= A/B;
                        num.push(C);
                        }
                    }
                }

      return C;
}

    /**
     * @param args the command line arguments
     */
     
    public static void main(String[] args)throws Exception {

           String k =""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"";    
//           double CC=0;
//           CC=ans(k);
           Calculator cct = new Calculator();
           System.out.println(cct.ans(k));
           
//        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
//        String[] equation = br.readLine().split("" "");
//        Stack sta = new Stack();
//        Stack num = new Stack();
//        Stack opt = new Stack();
//        int l = equation.length;
//        int c=0,i=0;
//        String op;
//        double C=0,A=0,B=0;
//                while( i < l )
//                {
//
//                    if (equation[i].indexOf(""("") != -1)
//                    {
//                       sta.push(equation[i]);
//
//                       i++;
//                    }
//                    else if (equation[i].indexOf("")"") != -1)
//                    {                     
//                       String b;
//                       sta.pop();
//                       b=num.pop().toString();
//                       B =  Float.valueOf(b.trim()).floatValue();
//                       System.out.println(equation[i]);                       
//                       System.out.println(B);
//                       c=1;
//                       i++;
//                    }
//                    else if (equation[i].indexOf(""+"") != -1)
//                    {
//                       System.out.println(equation[i]);
//                       opt.push(equation[i]);
//                       i++;
//                    }
//                    else if (equation[i].indexOf(""-"") != -1)
//                    {
//                       System.out.println(equation[i]);
//                       opt.push(equation[i]);
//                       i++;
//                    }
//                    else if (equation[i].indexOf(""*"") != -1)
//                    {
//                       System.out.println(equation[i]);                       
//                       opt.push(equation[i]);                       
//                       i++;
//                    }
//                    else if (equation[i].indexOf(""/"") != -1)
//                    {
//                       System.out.println(equation[i]);                        
//                       opt.push(equation[i]);                       
//                       i++;
//                    }
//                    else
//                    {                        
//                       num.push(equation[i]);
//                       i++;                    
//                    }
//                    if(c == 1)
//                    {
//                     String a;
//                     a=num.pop().toString();
//                     op=opt.pop().toString();
//                     A = Float.valueOf(a.trim()).floatValue();
//                     System.out.println(A);
//                     c=0;
//                     
//                        if( op.equals(""+"")){
//                            C= A+B ;
//                            num.push(C);
//                        System.out.println(C);
//
//                        }
//                        else if(op.equals(""-"")){
//                            C= A-B;
//                            num.push(C); 
//                        System.out.println(C);
//
//                        }
//                        else if(op.equals(""*"")){
//                            C= A*B;
//                            num.push(C);
//                        System.out.println(C);              
//                        }
//                        else if(op.equals(""/"")){
//    
//                        C= A/B;
//                        num.push(C);
//                        System.out.println(C);
//                        }
//                    }
//                }
//        }
        // TODO code application logic here
    }
    
}
@f278b56cb9eeea81a5126f84586f8980@"
"r03522809","4","0.4","104320","@9a63c879e03f844f41d10d9e3592fae3@import java.io.FileReader;
import java.io.BufferedReader;

/**
 *
 * @author Dennis
 */
public class Calculator {

    public Calculator()
    {
        
    }
    
public Double ans(String e) {

        String[] equation = e.split("" "");
        Stack sta = new Stack();
        Stack num = new Stack();
        Stack opt = new Stack();
        int l = equation.length;
        int c=0,i=0;
        String op;
        double C=0,A=0,B=0;
                while( i < l )
                {
                    if (equation[i].indexOf(""("") != -1)
                    {
                       sta.push(equation[i]);
                       i++;
                    }
                    else if (equation[i].indexOf("")"") != -1)
                    {                     
                       String b;
                       sta.pop();
                       b=num.pop().toString();
                       B =  Double.parseDouble(b.trim());
                       c=1;
                       i++;
                    }
                    else if (equation[i].indexOf(""+"") != -1)
                    {
                       opt.push(equation[i]);
                       i++;
                    }
                    else if (equation[i].indexOf(""-"") != -1)
                    {
                       opt.push(equation[i]);
                       i++;
                    }
                    else if (equation[i].indexOf(""*"") != -1)
                    {
                       opt.push(equation[i]);                       
                       i++;
                    }
                    else if (equation[i].indexOf(""/"") != -1)
                    {
                       opt.push(equation[i]);                       
                       i++;
                    }
                    else
                    {                        
                       num.push(equation[i]);
                       i++;                    
                    }
                    if(c == 1)
                    {
                     String a;
                     a=num.pop().toString();
                     op=opt.pop().toString();
                     A = Double.parseDouble(a.trim());

                     c=0;
                     
                        if( op.equals(""+"")){
                            C= A+B ;
                            num.push(C);
                        }
                        else if(op.equals(""-"")){
                            C= A-B;
                            num.push(C); 
                        }
                        else if(op.equals(""*"")){
                            C= A*B;
                            num.push(C);
                        }
                        else if(op.equals(""/"")){
                        C= A/B;
                        num.push(C);
                        }
                    }
                }

      return C;
}

    /**
     * @param args the command line arguments
     */
     
    public static void main(String[] args)throws Exception {

           String k =""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"";    
//           double CC=0;
//           CC=ans(k);
           Calculator cct = new Calculator();
           System.out.println(cct.ans(k));
           
//        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
//        String[] equation = br.readLine().split("" "");
//        Stack sta = new Stack();
//        Stack num = new Stack();
//        Stack opt = new Stack();
//        int l = equation.length;
//        int c=0,i=0;
//        String op;
//        double C=0,A=0,B=0;
//                while( i < l )
//                {
//
//                    if (equation[i].indexOf(""("") != -1)
//                    {
//                       sta.push(equation[i]);
//
//                       i++;
//                    }
//                    else if (equation[i].indexOf("")"") != -1)
//                    {                     
//                       String b;
//                       sta.pop();
//                       b=num.pop().toString();
//                       B =  Float.valueOf(b.trim()).floatValue();
//                       System.out.println(equation[i]);                       
//                       System.out.println(B);
//                       c=1;
//                       i++;
//                    }
//                    else if (equation[i].indexOf(""+"") != -1)
//                    {
//                       System.out.println(equation[i]);
//                       opt.push(equation[i]);
//                       i++;
//                    }
//                    else if (equation[i].indexOf(""-"") != -1)
//                    {
//                       System.out.println(equation[i]);
//                       opt.push(equation[i]);
//                       i++;
//                    }
//                    else if (equation[i].indexOf(""*"") != -1)
//                    {
//                       System.out.println(equation[i]);                       
//                       opt.push(equation[i]);                       
//                       i++;
//                    }
//                    else if (equation[i].indexOf(""/"") != -1)
//                    {
//                       System.out.println(equation[i]);                        
//                       opt.push(equation[i]);                       
//                       i++;
//                    }
//                    else
//                    {                        
//                       num.push(equation[i]);
//                       i++;                    
//                    }
//                    if(c == 1)
//                    {
//                     String a;
//                     a=num.pop().toString();
//                     op=opt.pop().toString();
//                     A = Float.valueOf(a.trim()).floatValue();
//                     System.out.println(A);
//                     c=0;
//                     
//                        if( op.equals(""+"")){
//                            C= A+B ;
//                            num.push(C);
//                        System.out.println(C);
//
//                        }
//                        else if(op.equals(""-"")){
//                            C= A-B;
//                            num.push(C); 
//                        System.out.println(C);
//
//                        }
//                        else if(op.equals(""*"")){
//                            C= A*B;
//                            num.push(C);
//                        System.out.println(C);              
//                        }
//                        else if(op.equals(""/"")){
//    
//                        C= A/B;
//                        num.push(C);
//                        System.out.println(C);
//                        }
//                    }
//                }
//        }
        // TODO code application logic here
    }
    
}

@9a63c879e03f844f41d10d9e3592fae3@"
"r03522809","4","0.39","104784","@29ab318b415788b7ae24fe693b01fe9f@import java.io.FileReader;
import java.io.BufferedReader;

/**
 *
 * @author Dennis
 */
public class Calculator {

    public Calculator()
    {
        
    }
    
public Double ans(String e) {

        String[] equation = e.split("" "");
        Stack sta = new Stack();
        Stack num = new Stack();
        Stack opt = new Stack();
        int l = equation.length;
        int c=0,i=0;
        String op,a,b;
        double C=0,A=0,B=0;
                while( i < l )
                {
                    if (equation[i].indexOf(""("") != -1)
                    {
                       sta.push(equation[i]);
                       i++;
                    }
                    else if (equation[i].indexOf("")"") != -1)
                    {                     
                       sta.pop();
                       b=num.pop().toString();
                       B =  Double.parseDouble(b.trim());
                       c=1;
                       i++;
                    }
                    else if (equation[i].indexOf(""+"") != -1)
                    {
                       opt.push(equation[i]);
                       i++;
                    }
                    else if (equation[i].indexOf(""-"") != -1)
                    {
                       opt.push(equation[i]);
                       i++;
                    }
                    else if (equation[i].indexOf(""*"") != -1)
                    {
                       opt.push(equation[i]);                       
                       i++;
                    }
                    else if (equation[i].indexOf(""/"") != -1)
                    {
                       opt.push(equation[i]);                       
                       i++;
                    }
                    else
                    {                        
                       num.push(equation[i]);
                       i++;                    
                    }
                    if(c == 1)
                    {

                     a=num.pop().toString();
                     op=opt.pop().toString();
                     A = Double.parseDouble(a.trim());

                     c=0;
                     
                        if( op.equals(""+"")){
                            C= A+B ;
                            num.push(C);
                        }
                        else if(op.equals(""-"")){
                            C= A-B;
                            num.push(C); 
                        }
                        else if(op.equals(""*"")){
                            C= A*B;
                            num.push(C);
                        }
                        else if(op.equals(""/"")){
                        C= A/B;
                        num.push(C);
                        }
                    }
                }
      return C;
}

    /**
     * @param args the command line arguments
     */
     
    public static void main(String[] args)throws Exception {

           String k =""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"";    
//           double CC=0;
//           CC=ans(k);
           Calculator cct = new Calculator();
           System.out.println(cct.ans(k));
           

        // TODO code application logic here
    }
    
}
@29ab318b415788b7ae24fe693b01fe9f@"
"r03522809","10","0.099","105776","@994a3e9f0f96dab8e50b63367d6b48c9@import java.io.FileReader;
import java.io.BufferedReader;

/**
 *
 * @author Dennis
 */
public class Calculator {

    public Calculator()
    {
        
    }
    
public Double ans(String e) {

        String[] equation = e.split("" "");
        Stack sta = new Stack();
        Stack num = new Stack();
        Stack opt = new Stack();
        int l = equation.length;
        int c=0,i=0;
        String op,a,b;
        double C=0,A=0,B=0;
                while( i < l )
                {
                    
                    if (equation[i].equals(""(""))
                    {
                       sta.push(equation[i]);
                       i++;
                    }
                    else if (equation[i].equals("")""))
                    {                     
                       sta.pop();
                       b=num.pop().toString();
                       B =  Double.parseDouble(b.trim());
                       c=1;
                       i++;
                    }
                    else if (equation[i].equals(""+""))
                    {
                       opt.push(equation[i]);
                       i++;
                    }
                    else if (equation[i].equals(""-""))
                    {
                       opt.push(equation[i]);
                       i++;
                    }
                    else if (equation[i].equals(""*""))
                    {
                       opt.push(equation[i]);                       
                       i++;
                    }
                    else if (equation[i].equals(""/""))
                    {
                       opt.push(equation[i]);                       
                       i++;
                    }
                    else
                    {                        
                       num.push(equation[i]);
                       i++;                    
                    }
                    if(c == 1)
                    {

                     a=num.pop().toString();
                     op=opt.pop().toString();
                     A = Double.parseDouble(a.trim());

                     c=0;
                     
                        if( op.equals(""+"")){
                            C= A+B ;
                            num.push(C);
                        }
                        else if(op.equals(""-"")){
                            C= A-B;
                            num.push(C); 
                        }
                        else if(op.equals(""*"")){
                            C= A*B;
                            num.push(C);
                        }
                        else if(op.equals(""/"")){
                        C= A/B;
                        num.push(C);
                        }
                    }
                }
      return C;
}

    /**
     * @param args the command line arguments
     */
     
    public static void main(String[] args)throws Exception {

           String k =""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"";    
//           double CC=0;
//           CC=ans(k);
           Calculator cct = new Calculator();
           System.out.println(cct.ans(k));
           

        // TODO code application logic here
    }
    
}
@994a3e9f0f96dab8e50b63367d6b48c9@"
"r04631041","10","0.095","105216","@b5fa190bc732e01b25d8e02dfdb46d5c@public class Calculator {
//----------------------------API from textbook-------------------------------//
    private Node first;
    private int[] a;
    private class Node
    {
    String item;
    Node next;
    }
    public boolean isEmpty()
    {return first==null;}
    public void push(String item)
    {
        Node oldfirst=first;
        first=new Node();
        first.item=item;
        first.next=oldfirst;
    }
    public String pop()
    {
        String item=first.item;
        first=first.next;
        return item;
    }
//--------------------------Self define function------------------------------//
    public Calculator(){
    first=null;
    }
    public String localcalculate (String[] data){
        double a=Double.parseDouble(data[2]);
        double b=Double.parseDouble(data[0]); 
        double tempans=0;
        if (data[1].equals(""+""))
            tempans=(a+b);
        else if (data[1].equals(""-""))
            tempans=(a-b);
        else if (data[1].equals(""*""))
            tempans=(a*b);
        else if (data[1].equals(""/""))
            tempans=(a/b);
        return (String.valueOf(tempans));
      }
    public double ans(String e) {
            String[] a=e.split("" "");
            for (int i=0 ; i<a.length ; i++){
                if (a[i].equals("")"")){
                    String[] tempdata=new String[4];
                    int tempi=0;
                    while (tempi<4){
                   tempdata[tempi]=pop();
                   tempi++;
                        }
                push(localcalculate(tempdata));   
                }
               else
                   push(a[i]); 
                }
            return(Double.parseDouble(pop()));
          }
    }
@b5fa190bc732e01b25d8e02dfdb46d5c@"
"f02631008","2","0.67","105456","@fd629e7c7122dd0c16d37e02b1ab0c4b@
public class Calculator {
    
    public Double ans(String e) {
        String e1 = e.replaceAll(""\\s"","""");
        Double Ans = 0.0;
  
        int StrLength = e1.length();
        String[] CharArr;
        CharArr = new String[StrLength];
        double[] NumArr;
        NumArr = new double[StrLength];
        String Char;
        int Oper = 0;
        int Poin = 0;
        double NU2 = 0.0;
        double NU1 = 0.0; 
        int NU1flag = 0;
        int NU2flag = 0;
        int Operflag = 0;
        int Poinflag = 0;
        
        for(int i = 0; i < StrLength; i++){
            Char = Character.toString(e1.charAt(i));
            CharArr[i] = Char;
            if(CharArr[i].equals(new String(""."")) || CharArr[i].equals(new String(""("")) || CharArr[i].equals(new String("")"")) || CharArr[i].equals(new String(""+"")) || CharArr[i].equals(new String(""-"")) || CharArr[i].equals(new String(""*""))|| CharArr[i].equals(new String(""/"")) ){
                //NumArr[i] =  Integer.parseInt(CharArr[i]);
            }
            else{
                NumArr[i] =  Integer.parseInt(CharArr[i]);
            }
        }
        /*for(int i = 0; i < StrLength; i++){
            System.out.println(NumArr[i]); 
        }
        for(int i = 0; i < StrLength; i++){
            System.out.println(CharArr[i]); 
        }*/
                
        for(int i = 0; i < StrLength; i++){
            Char = Character.toString(e1.charAt(i));
            CharArr[i] = Char;
            NU2flag = 1;
            Operflag = 1;
            NU1 = 0.0;
            NU2 = 0.0;
            Ans = 0.0;
            if(Operflag == 1 && CharArr[i].equals(new String("")""))){
                CharArr[i] = ""0"";
                for(int j = i; j >= 0; j--){
                    if(CharArr[j].equals(new String("".""))){
                        Poin = j;
                        Poinflag = 1;
                    }
                    if(NU2flag == 1 && Poinflag == 0 && (CharArr[j].equals(new String(""+"")) || CharArr[j].equals(new String(""-""))|| CharArr[j].equals(new String(""*""))|| CharArr[j].equals(new String(""/"")))){
                        for(int k = 0; k < i-j-1; k++){
                            NU2 = NU2 + NumArr[i-k-1]*Math.pow(10,k);
                            NumArr[i-k-1] = 0;
                            CharArr[i-k-1] = ""0"";
                        }
                        NU1flag = 1;
                        NU2flag = 0;
                        Oper = j;
                    }
                    if(NU2flag == 1 && Poinflag == 1 && (CharArr[j].equals(new String(""+"")) || CharArr[j].equals(new String(""-""))|| CharArr[j].equals(new String(""*""))|| CharArr[j].equals(new String(""/"")))){
                        for(int k = 0; k < i-j-1; k++){
                            if(k < i-Poin-1){
                                NU2 = NU2 + NumArr[i-k-1]*Math.pow(10,k);
                            }
                            if(k == i-Poin-1){
                                NU2 = NU2/Math.pow(10, i-Poin-1);
                            }
                            if(k > i-Poin-1){
                                NU2 = NU2 + NumArr[i-k-1]*Math.pow(10,k-(i-Poin));
                            }
                            NumArr[i-k-1] = 0;
                            CharArr[i-k-1] = ""0"";
                        }
                        NU1flag = 1;
                        NU2flag = 0;
                        Poinflag = 0;
                        Oper = j;
                    }
                    if(j < Oper && CharArr[j].equals(new String("".""))){
                        Poin = j;
                        Poinflag = 1;
                    }
                    if(NU1flag == 1 && Poinflag == 0 && CharArr[j].equals(new String(""("")) && CharArr[Oper].equals(new String(""+""))){
                        for(int k = 0; k < Oper-j-1; k++){
                            NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k);
                            NumArr[Oper-k-1] = 0;
                            CharArr[Oper-k-1] = ""0"";
                        }
                        Ans = Ans + NU1 + NU2;
                        NumArr[i] = Ans;
                        CharArr[i] = String.valueOf(Ans);
                        
                        CharArr[j] = ""0"";
                        CharArr[Oper] = ""0"";
                        Operflag = 0;
                    }
                    if(NU1flag == 1 && Poinflag == 1 && CharArr[j].equals(new String(""("")) && CharArr[Oper].equals(new String(""+""))){
                        for(int k = 0; k < Oper-j-1; k++){
                            if(k < Oper-Poin-1){
                                NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k);
                            }
                            if(k == Oper-Poin-1){
                                NU1 = NU1/Math.pow(10, Oper-Poin-1);
                            }
                            if(k > Oper-Poin-1){
                                NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k-(Oper-Poin));
                            }
                            NumArr[Oper-k-1] = 0;
                            CharArr[Oper-k-1] = ""0"";
                        }
                        Ans = Ans + NU1 + NU2;
                        NumArr[i] = Ans;
                        CharArr[i] = String.valueOf(Ans);
                        
                        CharArr[j] = ""0"";
                        CharArr[Oper] = ""0"";
                        Operflag = 0;
                        Poinflag = 0;
                    }
                    if(NU1flag == 1 && CharArr[j].equals(new String(""("")) && CharArr[Oper].equals(new String(""-""))){
                        for(int k = 0; k < Oper-j-1; k++){
                            NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k);
                            NumArr[Oper-k-1] = 0;
                            CharArr[Oper-k-1] = ""0"";
                        }
                        Ans = Ans + NU1 - NU2;
                        NumArr[i] = Ans;
                        CharArr[i] = String.valueOf(Ans);
                        
                        CharArr[j] = ""0"";
                        CharArr[Oper] = ""0"";
                    }
                    if(NU1flag == 1 && Poinflag == 1 && CharArr[j].equals(new String(""("")) && CharArr[Oper].equals(new String(""-""))){
                        for(int k = 0; k < Oper-j-1; k++){
                            if(k < Oper-Poin-1){
                                NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k);
                            }
                            if(k == Oper-Poin-1){
                                NU1 = NU1/Math.pow(10, Oper-Poin-1);
                            }
                            if(k > Oper-Poin-1){
                                NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k-(Oper-Poin));
                            }
                            NumArr[Oper-k-1] = 0;
                            CharArr[Oper-k-1] = ""0"";
                        }
                        Ans = Ans + NU1 - NU2;
                        NumArr[i] = Ans;
                        CharArr[i] = String.valueOf(Ans);
                        
                        CharArr[j] = ""0"";
                        CharArr[Oper] = ""0"";
                        Operflag = 0;
                        Poinflag = 0;
                    }
                    if(NU1flag == 1 && CharArr[j].equals(new String(""("")) && CharArr[Oper].equals(new String(""*""))){
                        for(int k = 0; k < Oper-j-1; k++){
                            NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k);
                            NumArr[Oper-k-1] = 0;
                            CharArr[Oper-k-1] = ""0"";
                        }
                        Ans = Ans + NU1 * NU2;
                        NumArr[i] = Ans;
                        CharArr[i] = String.valueOf(Ans);
                        
                        CharArr[j] = ""0"";
                        CharArr[Oper] = ""0"";
                    }
                    if(NU1flag == 1 && Poinflag == 1 && CharArr[j].equals(new String(""("")) && CharArr[Oper].equals(new String(""*""))){
                        for(int k = 0; k < Oper-j-1; k++){
                            if(k < Oper-Poin-1){
                                NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k);
                            }
                            if(k == Oper-Poin-1){
                                NU1 = NU1/Math.pow(10, Oper-Poin-1);
                            }
                            if(k > Oper-Poin-1){
                                NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k-(Oper-Poin));
                            }
                            NumArr[Oper-k-1] = 0;
                            CharArr[Oper-k-1] = ""0"";
                        }
                        Ans = Ans + NU1 * NU2;
                        NumArr[i] = Ans;
                        CharArr[i] = String.valueOf(Ans);
                        
                        CharArr[j] = ""0"";
                        CharArr[Oper] = ""0"";
                        Operflag = 0;
                        Poinflag = 0;
                    }
                    if(NU1flag == 1 && CharArr[j].equals(new String(""("")) && CharArr[Oper].equals(new String(""/""))){
                        for(int k = 0; k < Oper-j-1; k++){
                            NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k);
                            NumArr[Oper-k-1] = 0;
                            CharArr[Oper-k-1] = ""0"";
                        }
                        Ans = Ans + NU1 / NU2;
                        NumArr[i] = Ans;
                        CharArr[i] = String.valueOf(Ans);
                        
                        CharArr[j] = ""0"";
                        CharArr[Oper] = ""0"";
                    }
                    if(NU1flag == 1 && Poinflag == 1 && CharArr[j].equals(new String(""("")) && CharArr[Oper].equals(new String(""/""))){
                        for(int k = 0; k < Oper-j-1; k++){
                            if(k < Oper-Poin-1){
                                NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k);
                            }
                            if(k == Oper-Poin-1){
                                NU1 = NU1/Math.pow(10, Oper-Poin-1);
                            }
                            if(k > Oper-Poin-1){
                                NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k-(Oper-Poin));
                            }
                            NumArr[Oper-k-1] = 0;
                            CharArr[Oper-k-1] = ""0"";
                        }
                        Ans = Ans + NU1 / NU2;
                        NumArr[i] = Ans;
                        CharArr[i] = String.valueOf(Ans);
                        
                        CharArr[j] = ""0"";
                        CharArr[Oper] = ""0"";
                        Operflag = 0;
                        Poinflag = 0;
                    }
                }
            }
        }        
      return Ans;
    }   

    public static void main(String[] args) {
//        String eq = ""(12+15.28)"";
//        String eq = ""(12+15.28)"";
//        String eq = ""(12.15+15)"";
//        String eq = ""((1+(12*5))-(3*4))"";
//        String eq = ""(((1+(12*5))-(3*4))+(4/5))"";
//        String eq = ""(((1+(12*5))-(3*4))+(4/5))"";( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) 
        String eq = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "";
        Calculator cct = new Calculator();
        double a = cct.ans(eq);
        System.out.println(a); 
    }
}

@fd629e7c7122dd0c16d37e02b1ab0c4b@"
"r04631025","10","0.099","105856","@4c9d1771bb0b0237b832b4d51d0cd84b@
import java.io.FileReader;
import java.io.BufferedReader;

public class Calculator {

    Calculator() {

    }

    public Double ans(String e) {
        // please replace the following null to the answer you calculated.
        String[] input = e.split("" "");
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        
        for(int i=0;i<input.length;i++) {
            String s = input[i];
            
            if (s.equals(""("")) ; 
            else if (s.equals(""+"")) {
                ops.push(s);
            } else if (s.equals(""*"")) {
                ops.push(s);
            } else if (s.equals(""/"")){
                ops.push(s);
            }else if (s.equals(""-"")){
                ops.push(s);
            }else if (s.equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                } else if(op.equals(""/"")){
                    double k=vals.pop();
                    double m=vals.pop();
                    vals.push(m / k);
                } else if(op.equals(""-"")){
                    double k=vals.pop();
                    double m=vals.pop();
                    vals.push(m - k);
                }
            } else {
                vals.push(Double.parseDouble(s));
            }
        }
        //StdOut.println(vals.pop());
        double a = vals.pop();
        return a;
//        System.out.printf(""%d"", vals.pop());
//      double answer=0;
//        return input.length;
//      return answer;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            String data = br.readLine();

            Calculator cct = new Calculator();
            double b = cct.ans(data);
            System.out.printf(""%f"", b);

        }
        // TODO code application logic here
    }

}

@4c9d1771bb0b0237b832b4d51d0cd84b@"
"r03522809","10","0.099","105792","@25dbca0c8e2a24292b26b23dc452b80a@import java.io.FileReader;
import java.io.BufferedReader;

/**
 *
 * @author Dennis
 */
public class Calculator {

//    public Calculator()
//    {
//        
//    }
//    
public static Double ans(String e) {

        String[] equation = e.split("" "");
        Stack sta = new Stack();
        Stack num = new Stack();
        Stack opt = new Stack();
        int l = equation.length;
        int c=0,i=0;
        String op,a,b;
        double C=0,A=0,B=0;
                while( i < l )
                {
                    
                    if (equation[i].equals(""(""))
                    {
                       sta.push(equation[i]);
                       i++;
                    }
                    else if (equation[i].equals("")""))
                    {                     
                       sta.pop();
                       b=num.pop().toString();
                       B =  Double.parseDouble(b.trim());
                       c=1;
                       i++;
                    }
                    else if (equation[i].equals(""+""))
                    {
                       opt.push(equation[i]);
                       i++;
                    }
                    else if (equation[i].equals(""-""))
                    {
                       opt.push(equation[i]);
                       i++;
                    }
                    else if (equation[i].equals(""*""))
                    {
                       opt.push(equation[i]);                       
                       i++;
                    }
                    else if (equation[i].equals(""/""))
                    {
                       opt.push(equation[i]);                       
                       i++;
                    }
                    else
                    {                        
                       num.push(equation[i]);
                       i++;                    
                    }
                    if(c == 1)
                    {

                     a=num.pop().toString();
                     op=opt.pop().toString();
                     A = Double.parseDouble(a.trim());

                     c=0;
                     
                        if( op.equals(""+"")){
                            C= A+B ;
                            num.push(C);
                        }
                        else if(op.equals(""-"")){
                            C= A-B;
                            num.push(C); 
                        }
                        else if(op.equals(""*"")){
                            C= A*B;
                            num.push(C);
                        }
                        else if(op.equals(""/"")){
                        C= A/B;
                        num.push(C);
                        }
                    }
                }
      return C;
}

    /**
     * @param args the command line arguments
     */
     
    public static void main(String[] args)throws Exception {

           String k =""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"";    
           double CC=0;
           CC=ans(k);
//           Calculator cct = new Calculator();
//           System.out.println(cct.ans(k));
           System.out.println(CC);

        // TODO code application logic here
    }
    
}
@25dbca0c8e2a24292b26b23dc452b80a@"
"b99611017","0","1.02","105888","@f93b9c044eb601ea377322b8accb83b3@
import java.util.Arrays;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author 許志鵬
 */
public class Calculator {

    public Calculator() {
    }

    public double ans(String quest) {
        String[] trans = quest.split("" "");
        int howLong = trans.length;
        Stack token = new Stack();
        Stack op = new Stack();
        String[] a=new String[3];
        //construct a stack
        for (int i = 0; i < howLong; i++) {
            System.out.println(token.toString());
            token.push(trans[i]);
            
            if ("")"".equals(trans[i]) && i >=4) {
                token.pop();
                a[0]=token.pop().toString();
                a[1]=token.pop().toString();
                a[2]=token.pop().toString();
                token.pop();
                token.push(subCal(a));
               
            }
            

        }
        
        return Double.parseDouble(token.toString());
        
    }

    double subCal(String[] a) {
        double ann;
        ann = 0.0;
        
            if (null != a[1]) switch (a[1]) {
            case ""+"":
                ann = Double.parseDouble(a[2]) + Double.parseDouble(a[0]);
                break;
            case ""-"":
                ann = Double.parseDouble(a[2]) - Double.parseDouble(a[0]);
                break;
            case ""*"":
                ann = Double.parseDouble(a[2]) * Double.parseDouble(a[0]);
                break;
            case ""/"":
                ann = Double.parseDouble(a[2]) / Double.parseDouble(a[0]);
                break;
        }
            
        
        return ann;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        Calculator cct = new Calculator();
        System.out.print(cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) ""));

    }

}

@f93b9c044eb601ea377322b8accb83b3@"
"f02631008","3","0.68","105472","@eaf5fd1007446b14c1399222a0188239@
public class Calculator {
    
    public Double ans(String e) {
        String e1 = e.replaceAll(""\\s"","""");
        Double Ans = 0.0;
  
        int StrLength = e1.length();
        String[] CharArr;
        CharArr = new String[StrLength];
        double[] NumArr;
        NumArr = new double[StrLength];
        String Char;
        int Oper = 0;
        int Poin = 0;
        double NU2 = 0.0;
        double NU1 = 0.0; 
        int NU1flag = 0;
        int NU2flag = 0;
        int Operflag = 0;
        int Poinflag = 0;
        
        for(int i = 0; i < StrLength; i++){
            Char = Character.toString(e1.charAt(i));
            CharArr[i] = Char;
            if(CharArr[i].equals(new String(""."")) || CharArr[i].equals(new String(""("")) || CharArr[i].equals(new String("")"")) || CharArr[i].equals(new String(""+"")) || CharArr[i].equals(new String(""-"")) || CharArr[i].equals(new String(""*""))|| CharArr[i].equals(new String(""/"")) ){
                //NumArr[i] =  Integer.parseInt(CharArr[i]);
            }
            else{
                NumArr[i] =  Integer.parseInt(CharArr[i]);
            }
        }
        /*for(int i = 0; i < StrLength; i++){
            System.out.println(NumArr[i]); 
        }
        for(int i = 0; i < StrLength; i++){
            System.out.println(CharArr[i]); 
        }*/
                
        for(int i = 0; i < StrLength; i++){
            Char = Character.toString(e1.charAt(i));
            CharArr[i] = Char;
            NU2flag = 1;
            Operflag = 1;
            NU1 = 0.0;
            NU2 = 0.0;
            Ans = 0.0;
            if(Operflag == 1 && CharArr[i].equals(new String("")""))){
                CharArr[i] = ""0"";
                for(int j = i; j >= 0; j--){
                    if(Poinflag == 0 && CharArr[j].equals(new String("".""))){
                        Poin = j;
                        Poinflag = 1;
                    }
                    if(NU2flag == 1 && Poinflag == 0 && (CharArr[j].equals(new String(""+"")) || CharArr[j].equals(new String(""-""))|| CharArr[j].equals(new String(""*""))|| CharArr[j].equals(new String(""/"")))){
                        for(int k = 0; k < i-j-1; k++){
                            NU2 = NU2 + NumArr[i-k-1]*Math.pow(10,k);
                            NumArr[i-k-1] = 0;
                            CharArr[i-k-1] = ""0"";
                        }
                        NU1flag = 1;
                        NU2flag = 0;
                        Oper = j;
                    }
                    if(NU2flag == 1 && Poinflag == 1 && (CharArr[j].equals(new String(""+"")) || CharArr[j].equals(new String(""-""))|| CharArr[j].equals(new String(""*""))|| CharArr[j].equals(new String(""/"")))){
                        for(int k = 0; k < i-j-1; k++){
                            if(k < i-Poin-1){
                                NU2 = NU2 + NumArr[i-k-1]*Math.pow(10,k);
                            }
                            if(k == i-Poin-1){
                                NU2 = NU2/Math.pow(10, i-Poin-1);
                            }
                            if(k > i-Poin-1){
                                NU2 = NU2 + NumArr[i-k-1]*Math.pow(10,k-(i-Poin));
                            }
                            NumArr[i-k-1] = 0;
                            CharArr[i-k-1] = ""0"";
                        }
                        NU1flag = 1;
                        NU2flag = 0;
                        Poinflag = 0;
                        Oper = j;
                    }
                    if(j < Oper && CharArr[j].equals(new String("".""))){
                        Poin = j;
                        Poinflag = 1;
                    }
                    if(NU1flag == 1 && Poinflag == 0 && CharArr[j].equals(new String(""("")) && CharArr[Oper].equals(new String(""+""))){
                        for(int k = 0; k < Oper-j-1; k++){
                            NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k);
                            NumArr[Oper-k-1] = 0;
                            CharArr[Oper-k-1] = ""0"";
                        }
                        Ans = Ans + NU1 + NU2;
                        NumArr[i] = Ans;
                        CharArr[i] = String.valueOf(Ans);
                        
                        CharArr[j] = ""0"";
                        CharArr[Oper] = ""0"";
                        Operflag = 0;
                    }
                    if(NU1flag == 1 && Poinflag == 1 && CharArr[j].equals(new String(""("")) && CharArr[Oper].equals(new String(""+""))){
                        for(int k = 0; k < Oper-j-1; k++){
                            if(k < Oper-Poin-1){
                                NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k);
                            }
                            if(k == Oper-Poin-1){
                                NU1 = NU1/Math.pow(10, Oper-Poin-1);
                            }
                            if(k > Oper-Poin-1){
                                NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k-(Oper-Poin));
                            }
                            NumArr[Oper-k-1] = 0;
                            CharArr[Oper-k-1] = ""0"";
                        }
                        Ans = Ans + NU1 + NU2;
                        NumArr[i] = Ans;
                        CharArr[i] = String.valueOf(Ans);
                        
                        CharArr[j] = ""0"";
                        CharArr[Oper] = ""0"";
                        Operflag = 0;
                        Poinflag = 0;
                    }
                    if(NU1flag == 1 && Poinflag == 0 && CharArr[j].equals(new String(""("")) && CharArr[Oper].equals(new String(""-""))){
                        for(int k = 0; k < Oper-j-1; k++){
                            NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k);
                            NumArr[Oper-k-1] = 0;
                            CharArr[Oper-k-1] = ""0"";
                        }
                        Ans = Ans + NU1 - NU2;
                        NumArr[i] = Ans;
                        CharArr[i] = String.valueOf(Ans);
                        
                        CharArr[j] = ""0"";
                        CharArr[Oper] = ""0"";
                    }
                    if(NU1flag == 1 && Poinflag == 1 && CharArr[j].equals(new String(""("")) && CharArr[Oper].equals(new String(""-""))){
                        for(int k = 0; k < Oper-j-1; k++){
                            if(k < Oper-Poin-1){
                                NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k);
                            }
                            if(k == Oper-Poin-1){
                                NU1 = NU1/Math.pow(10, Oper-Poin-1);
                            }
                            if(k > Oper-Poin-1){
                                NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k-(Oper-Poin));
                            }
                            NumArr[Oper-k-1] = 0;
                            CharArr[Oper-k-1] = ""0"";
                        }
                        Ans = Ans + (NU1 - NU2);
                        NumArr[i] = Ans;
                        CharArr[i] = String.valueOf(Ans);
                        
                        CharArr[j] = ""0"";
                        CharArr[Oper] = ""0"";
                        Operflag = 0;
                        Poinflag = 0;
                    }
                    if(NU1flag == 1 && Poinflag == 0 && CharArr[j].equals(new String(""("")) && CharArr[Oper].equals(new String(""*""))){
                        for(int k = 0; k < Oper-j-1; k++){
                            NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k);
                            NumArr[Oper-k-1] = 0;
                            CharArr[Oper-k-1] = ""0"";
                        }
                        Ans = Ans + NU1 * NU2;
                        NumArr[i] = Ans;
                        CharArr[i] = String.valueOf(Ans);
                        
                        CharArr[j] = ""0"";
                        CharArr[Oper] = ""0"";
                    }
                    if(NU1flag == 1 && Poinflag == 1 && CharArr[j].equals(new String(""("")) && CharArr[Oper].equals(new String(""*""))){
                        for(int k = 0; k < Oper-j-1; k++){
                            if(k < Oper-Poin-1){
                                NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k);
                            }
                            if(k == Oper-Poin-1){
                                NU1 = NU1/Math.pow(10, Oper-Poin-1);
                            }
                            if(k > Oper-Poin-1){
                                NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k-(Oper-Poin));
                            }
                            NumArr[Oper-k-1] = 0;
                            CharArr[Oper-k-1] = ""0"";
                        }
                        Ans = Ans + NU1 * NU2;
                        NumArr[i] = Ans;
                        CharArr[i] = String.valueOf(Ans);
                        
                        CharArr[j] = ""0"";
                        CharArr[Oper] = ""0"";
                        Operflag = 0;
                        Poinflag = 0;
                    }
                    if(NU1flag == 1 && Poinflag == 0 && CharArr[j].equals(new String(""("")) && CharArr[Oper].equals(new String(""/""))){
                        for(int k = 0; k < Oper-j-1; k++){
                            NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k);
                            NumArr[Oper-k-1] = 0;
                            CharArr[Oper-k-1] = ""0"";
                        }
                        Ans = Ans + NU1 / NU2;
                        NumArr[i] = Ans;
                        CharArr[i] = String.valueOf(Ans);
                        
                        CharArr[j] = ""0"";
                        CharArr[Oper] = ""0"";
                    }
                    if(NU1flag == 1 && Poinflag == 1 && CharArr[j].equals(new String(""("")) && CharArr[Oper].equals(new String(""/""))){
                        for(int k = 0; k < Oper-j-1; k++){
                            if(k < Oper-Poin-1){
                                NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k);
                            }
                            if(k == Oper-Poin-1){
                                NU1 = NU1/Math.pow(10, Oper-Poin-1);
                            }
                            if(k > Oper-Poin-1){
                                NU1 = NU1 + NumArr[Oper-k-1]*Math.pow(10,k-(Oper-Poin));
                            }
                            NumArr[Oper-k-1] = 0;
                            CharArr[Oper-k-1] = ""0"";
                        }
                        Ans = Ans + NU1 / NU2;
                        NumArr[i] = Ans;
                        CharArr[i] = String.valueOf(Ans);
                        
                        CharArr[j] = ""0"";
                        CharArr[Oper] = ""0"";
                        Operflag = 0;
                        Poinflag = 0;
                    }
                }
            }
        }
        //System.out.println(NU1); 
        //System.out.println(NU2); 
      return Ans;
    }   

    public static void main(String[] args) {
//        String eq = ""(12+15.28)"";
//        String eq = ""(12+15.28)"";
//        String eq = ""(19.25-15.15)"";
//        String eq = ""((1+(12*5))-(3*4))"";
//        String eq = ""(((1+(12*5))-(3*4))+(4/5))"";
//        String eq = ""(((1+(12*5))-(3*4))+(4/5))"";( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) 
        String eq = ""( ( ( 1.5 + ( 12 * 5.2 ) ) - ( 3.5 * 4 ) ) + ( 4 / 5 ) ) "";
        Calculator cct = new Calculator();
        double a = cct.ans(eq);
        System.out.println(a); 
    }
}

@eaf5fd1007446b14c1399222a0188239@"
"r03522831","10","0.1","105888","@a9cf6dad81d4227e2a11f7bc0301f1a6@import java.io.FileReader;
import java.io.BufferedReader;


/**
 *
 * @author stonebreaker
 */
public class Calculator {
    
    private double ans;
    private double a , b;
    private char op;
    
    public Calculator() {
        ans = 0.0;
        a = 0.0;
        b = 0.0;
    }
    
    public Double ans (String e)
    {
       String [] data = e.split("" "");
       Stack<String> equation = new Stack<String>();
       Stack<Double> number = new Stack<Double>(); 
       Stack<String> operator = new Stack<String>();
       
       for (int i = 0; i < data.length; i++)
       {
          if ( data[i].equals(""(""))
              equation.push(data[i]);
          else if( data[i].equals(""+"") || data[i].equals(""-"") || data[i].equals(""*"") || data[i].equals(""/""))
              operator.push(data[i]);
          else if( data[i].equals("")""))
          {
              b = number.pop();
              op = operator.pop().charAt(0);
              a = number.pop();
              equation.pop();
              switch(op){
                  case '+':
                      ans = a + b;
                      number.push(ans);
                      break;
                  case '-':
                      ans = a - b;
                       number.push(ans);
                      break;
                  case '*':
                      ans = a * b;
                       number.push(ans);
                      break;
                  case '/':
                      ans = a / b;
                       number.push(ans);
                      break;
              }
          }
          else
              number.push(Double.parseDouble(data[i]));
       }
        return ans;
    }
    
    
    
    public static void main(String[] args) {
        String e = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "";
//        String e ="" 1 + 2 "";
        Calculator cct = new Calculator();
        System.out.print(cct.ans(e));
//       
    }
    
}

@a9cf6dad81d4227e2a11f7bc0301f1a6@"
"b99611017","0","1","105872","@1eb3c4058bbace61a380056ef358fbdc@

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author 許志鵬
 */
public class Calculator {

    public Calculator() {
    }

    public double ans(String quest) {
        String[] trans = quest.split("" "");
        int howLong = trans.length;
        Stack token = new Stack();
        String[] a = new String[3];
        //construct a stack
        for (int i = 0; i < howLong; i++) {
            System.out.println(token.toString());
            token.push(trans[i]);

            if ("")"".equals(trans[i]) && i >= 4) {
                token.pop();
                a[0] = token.pop().toString();
                a[1] = token.pop().toString();
                a[2] = token.pop().toString();
                token.pop();
                token.push(subCal(a));

            }

        }

        return Double.parseDouble(token.toString());

    }

    private double subCal(String[] a) {
        double ann;
        ann = 0.0;

        if (null != a[1]) {
            switch (a[1]) {
                case ""+"":
                    ann = Double.parseDouble(a[2]) + Double.parseDouble(a[0]);
                    break;
                case ""-"":
                    ann = Double.parseDouble(a[2]) - Double.parseDouble(a[0]);
                    break;
                case ""*"":
                    ann = Double.parseDouble(a[2]) * Double.parseDouble(a[0]);
                    break;
                case ""/"":
                    ann = Double.parseDouble(a[2]) / Double.parseDouble(a[0]);
                    break;
            }
        }

        return ann;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        Calculator cct = new Calculator();
        System.out.print(cct.ans(""( 123 + 456 ) ""));

    }

}

@1eb3c4058bbace61a380056ef358fbdc@"
"r03723070","10","0.097","105504","@d05fefefc0009a0b1de90a5e016767bf@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
public class Calculator {
   ///////////////////////////////////////////
    /////////////////////////////////////////
    public Double ans (String e) {
        //for test
        //String []s = e.split("""");
        String [] e2 = e.split("" "");
         //String [] data = data0.split("","");
        int size = e2.length;
        //Stack<String> stack = new Stack<String>();
        //String [] word1 = new String[size]; 
        //word1 = e.split("" "");
        //System.out.println(word1[4]);
        //System.out.println(size);
        //System.out.println(""1"");
        //Store all string and split the integer
        int sum = 0;
        for (int i = size-1; i >= 0; i--) {
           //System.out.printf(""i is %s"",e2[i]);
           if(e2[i].equals(""("")){
               //e2[i] = null;
               //int []innersum = new int [2];
               Double innersum = Double.parseDouble(e2[i+1]);
               //int innera = 0;
               //int innerb = 0;
               String operator;
               for(int j=i+1;j<size;j++){
                   if(e2[j].equals(""+"")||e2[j].equals(""-"")||e2[j].equals(""*"")||e2[j].equals(""/"")){
                       Double b = Double.parseDouble(e2[j+1]);
                       if(e2[j].equals(""+"")) innersum = innersum+b;
                       else if(e2[j].equals(""-"")) innersum = innersum-b;
                       else if(e2[j].equals(""/"")) innersum = innersum/b;
                       else if(e2[j].equals(""*"")) innersum = innersum*b;
                       e2[j] = "" "";
                       e2[j-1] = "" "";
                       e2[j+1] = "" "";
                   } 
                   else if(e2[j].equals("")"")){
                       e2[i] = Double.toString(innersum);
                       e2[j] = "" "";
                       break;
                   }
               }
           }
           //stack.push(e
           //String word = e.substring(i, i+1);
           /*if (!word.equals("" "")){
               if(word.equals(""("")||word.equals("")"")||word.equals(""+"")||word.equals(""-"")||word.equals(""*"")||word.equals(""/""))
               stack.push(word);
               else{
                    int num = Integer.parseInt(word);
                    stack.push(num);
               }
           }*/
        }
        //System.out.println(stack.peek());
        //read the stack
        for(int i = 0; i < size; i++){
            
        }
        //store the ans
       /*while (StdIn.isEmpty()){
            String s1 = StdIn.readString();
            System.out.println(s1);
            if (s.equals(""-"")) StdOut.print(stack.pop());
            else stack.push(s);
        }*/
        
        //stack.toString();
      // please replace the following null to the answer you calculated.
        Double ans = Double.parseDouble(e2[0]);
      return ans;
    }
      
      //object for string
      /*private String Strinput(){
      int stackSize = s.length(); 
      Stack theStack = new Stack (stackSize); 
      for (int i = 0; i < input.length(); i++) {
         char ch = input.charAt(i); 
         theStack.push(ch); 
      }
      output = """";
      while (!theStack.isEmpty()) {
         char ch = theStack.pop(); 
         output = output + ch; 
      }
      return output;
        
        return null;
    
    }*/
    
    
    
    
    
    
    
    
    /*public static void main(String[] args) throws Exception{
        Calculator cct = new Calculator();
        cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "");
    }*/
}

@d05fefefc0009a0b1de90a5e016767bf@"
"r03723070","10","0.099","105488","@766ba9759d66e7fb54007462973d2626@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
public class Calculator {
   ///////////////////////////////////////////
    /////////////////////////////////////////
    public Double ans (String e) {
        String [] e2 = e.split("" "");
        int size = e2.length;
        for (int i = size-1; i >= 0; i--) {
           if(e2[i].equals(""("")){
               Double innersum = Double.parseDouble(e2[i+1]);
               for(int j=i+1;j<size;j++){
                   if(e2[j].equals(""+"")||e2[j].equals(""-"")||e2[j].equals(""*"")||e2[j].equals(""/"")){
                       Double b = Double.parseDouble(e2[j+1]);
                       if(e2[j].equals(""+"")) innersum = innersum+b;
                       else if(e2[j].equals(""-"")) innersum = innersum-b;
                       else if(e2[j].equals(""/"")) innersum = innersum/b;
                       else if(e2[j].equals(""*"")) innersum = innersum*b;
                       e2[j] = "" "";
                       e2[j-1] = "" "";
                       e2[j+1] = "" "";
                   } 
                   else if(e2[j].equals("")"")){
                       e2[i] = Double.toString(innersum);
                       e2[j] = "" "";
                       break;
                   }
               }
           }         
        }
      // please replace the following null to the answer you calculated.
        Double ans = Double.parseDouble(e2[0]);
      return ans;
    }    
    /*public static void main(String[] args) throws Exception{
        Calculator cct = new Calculator();
        cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "");
    }*/
}

@766ba9759d66e7fb54007462973d2626@"
"b03611033","10","0.098","105584","@dd5f5ead0a181fc4d8d7e6788765a09b@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Stack;

public class Calculator {

    public Calculator() {

    }

    public Double ans(String e) {
        String[] cut;
        cut = e.split("" "");
        String s;
        Stack<String> ops = new Stack<>();
        Stack<Double> vals = new Stack<>();
        double help;
        int count =cut.length;
        String op;
        

        for (int i = 0; i < count; i++) {
            s = cut[i];

            switch (cut[i]) {
                case ""("":
                    break;
                case ""+"":
                    ops.push(s);
                    break;
                case ""-"":
                    ops.push(s);
                    break;
                case ""/"":
                    ops.push(s);
                    break;
                case ""*"":
                    ops.push(s);
                    break;
                case "")"":
                    op = ops.pop();
                    switch (op) {
                        case ""+"":
                            vals.push(vals.pop() + vals.pop());
                            break;
                        case ""*"":
                            vals.push(vals.pop() * vals.pop());
                            break;
                        case ""-"":
                            help = -(vals.pop() - vals.pop());
                            vals.push(help);
                            break;
                        case ""/"":
                            help = 1 / (vals.pop() / vals.pop());
                            vals.push(help);
                            break;
                        default:
                            break;
                    }
                    break;
                default:
                    vals.push(Double.parseDouble(s));
                    break;
            }

        }

        return vals.pop();
    }

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(""input.txt""))) {
            String str = br.readLine();
            Calculator cct = new Calculator();
            StdOut.println(cct.ans(str));
        }
    }
}

@dd5f5ead0a181fc4d8d7e6788765a09b@"
"b99611017","10","0.1","105792","@3086ea709e9fc04b033981f012922161@

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author 許志鵬
 */
public class Calculator {

    public Calculator() {
    }

    public double ans(String quest) {
        String[] trans = quest.split("" "");
        int howLong = trans.length;
        Stack token = new Stack();
        String[] a = new String[3];
        //construct a stack
        for (int i = 0; i < howLong; i++) {
           // System.out.println(token.toString());
            token.push(trans[i]);

            if ("")"".equals(trans[i]) && i >= 4) {
                token.pop();
                a[0] = token.pop().toString();
                a[1] = token.pop().toString();
                a[2] = token.pop().toString();
                token.pop();
                token.push(subCal(a));

            }

        }

        return Double.parseDouble(token.toString());

    }

    private double subCal(String[] a) {
        double ann;
        ann = 0.0;

        if (null != a[1]) {
            switch (a[1]) {
                case ""+"":
                    ann = Double.parseDouble(a[2]) + Double.parseDouble(a[0]);
                    break;
                case ""-"":
                    ann = Double.parseDouble(a[2]) - Double.parseDouble(a[0]);
                    break;
                case ""*"":
                    ann = Double.parseDouble(a[2]) * Double.parseDouble(a[0]);
                    break;
                case ""/"":
                    ann = Double.parseDouble(a[2]) / Double.parseDouble(a[0]);
                    break;
            }
        }

        return ann;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        Calculator cct = new Calculator();
        System.out.print(cct.ans(""( 20 + 456 ) ""));

    }

}

@3086ea709e9fc04b033981f012922161@"
"b03611033","10","0.099","105504","@e0c7ee47bf6eb36c7a845714f09a04a0@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Stack;

public class Calculator {

    public Calculator() {

    }

    public Double ans(String e) {
        String[] cut;
        cut = e.split("" "");
        Stack<String> ops = new Stack<>();
        Stack<Double> vals = new Stack<>();
        double help;
        int count =cut.length;
        String op;
        for (int i = 0; i < count; i++) {
            switch (cut[i]) {
                case ""("":
                    break;
                case ""+"":
                    ops.push(cut[i]);
                    break;
                case ""-"":
                    ops.push(cut[i]);
                    break;
                case ""/"":
                    ops.push(cut[i]);
                    break;
                case ""*"":
                    ops.push(cut[i]);
                    break;
                case "")"":
                    op = ops.pop();
                    switch (op) {
                        case ""+"":
                            vals.push(vals.pop() + vals.pop());
                            break;
                        case ""*"":
                            vals.push(vals.pop() * vals.pop());
                            break;
                        case ""-"":
                            help = -(vals.pop() - vals.pop());
                            vals.push(help);
                            break;
                        case ""/"":
                            help = 1 / (vals.pop() / vals.pop());
                            vals.push(help);
                            break;
                        default:
                            break;
                    }
                    break;
                default:
                    vals.push(Double.parseDouble(cut[i]));
                    break;
            }

        }

        return vals.pop();
    }

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(""input.txt""))) {
            String str = br.readLine();
            Calculator cct = new Calculator();
            StdOut.println(cct.ans(str));
        }
    }
}

@e0c7ee47bf6eb36c7a845714f09a04a0@"
"b03611035","0","0.141","172848","@e44940b0a4b47c93541f2875a0f8f965@import edu.princeton.cs.algs4.Stack;
public class Calculator {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
    }
    
    public double ans (String[] args){
        Stack<String> ops = new Stack<>();
        Stack<Double> vals = new Stack<>();
        while (!StdIn.isEmpty()) {
        String s = StdIn.readString();
        if (s.equals(""("")) ;
        else if (s.equals(""+"")) ops.push(s);
        else if (s.equals(""*"")) ops.push(s);
        else if (s.equals("")""))
        {
        String op = ops.pop();
        if (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
        else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
        }
        else vals.push(Double.parseDouble(s));
        }
        StdOut.println(vals.pop());
        
        return 0;
        }
    
}

@e44940b0a4b47c93541f2875a0f8f965@"
"f02631008","10","0.095","105584","@d7822613407219d4bda73ece2f1f6ed0@public class Calculator {
    
    public Double ans(String e) {
        
        Double Ans = 0.0;
        String[] Ele = e.split("" "");
        int StrLength = Ele.length;
        double NU1 = 0.0;
        double NU2 = 0.0;
        int Operflag = 0;
        int Operator = 0;
        int Oper = 0;
        int Nxtflag = 0;
        //System.out.println(StrLength);
        //System.out.println(Ele[4]);
        
        for(int i = 0; i < StrLength; i++){
            NU1 = 0.0;
            NU2 = 0.0;
            Operflag = 0;
            Nxtflag = 0;
            //System.out.println(Ans);
            if(Ele[i].equals(new String("")""))){
                if(Ele[i-1].equals(new String(""0""))){
                    NU2 = Ans;
                    //System.out.println(NU2);
                }
                else{
                    NU2 = Double.parseDouble(Ele[i-1]);
                    //System.out.println(NU2);
                }
                Ele[i] = ""0"";
                Ele[i-1] = ""0"";
                for(int j = i; j >= 0; j--){
                    if(Nxtflag == 0 && Operflag == 0 && (Ele[j].equals(new String(""+"")) || Ele[j].equals(new String(""-""))  || Ele[j].equals(new String(""*""))  || Ele[j].equals(new String(""/"")))){
                        Oper = j;
                        Operflag = 1;
                    }
                    if(Operflag == 1 && Ele[j].equals(new String(""(""))){
                        NU1 = Double.parseDouble(Ele[Oper-1]);
                        Ele[j] = ""0"";
                        Ele[Oper-1] = ""0"";
                        if(Ele[Oper].equals(new String(""+""))){
                            Ans = (NU1 + NU2);
                            Ele[Oper] = ""0"";
                            Ele[i] = String.valueOf(Ans);
                            Operflag = 0;
                            Nxtflag = 1;
                        } 
                        if(Ele[Oper].equals(new String(""-""))){
                            Ans = (NU1 - NU2);
                            Ele[Oper] = ""0"";
                            Ele[i] = String.valueOf(Ans);
                            Operflag = 0;
                            Nxtflag = 1;
                        }
                        if(Ele[Oper].equals(new String(""*""))){
                            Ans = (NU1 * NU2);
                            Ele[Oper] = ""0"";
                            Ele[i] = String.valueOf(Ans);
                            Operflag = 0;
                            Nxtflag = 1;
                        } 
                        if(Ele[Oper].equals(new String(""/""))){
                            Ans = (NU1 / NU2);
                            Ele[Oper] = ""0"";
                            Ele[i] = String.valueOf(Ans);
                            Operflag = 0;
                            Nxtflag = 1;
                        } 
                    }
                }
            }
        }
        
        //System.out.println(NU1); 
        //System.out.println(NU2); 
      return Ans;
    }   

    public static void main(String[] args) {
//        String eq = ""( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) )"";
//        String eq = ""( 1 + ( 12 * 5 ) )"";
//        String eq = ""( 12 + 15.28 )"";
//        String eq = ""(19.25*15.2215)"";
//        String eq = ""((1+(12*5))-(3*4))"";
//        String eq = ""(((1+(12*5))-(3*4))+(4/5))"";
//        String eq = ""(((1+(12*5))-(3*4))+(4/5))""; 
        String eq = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "";
        Calculator cct = new Calculator();
        double a = cct.ans(eq);
        System.out.println(a); 
    }
}

@d7822613407219d4bda73ece2f1f6ed0@"
"r04631013","10","0.099","105792","@8fc9f37f9b31fe5da07ee3263feabe4e@public class Calculator {

    /**
     *
     * @param p
     * @return
     */
    public Double ans(String p) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();

        String[] s = p.split("" "");
        for (int i = 0; i < s.length; i++) {
            if (s[i].equals(""("")) {
            } else if (s[i].equals(""+"")) {
                ops.push(s[i]);
            } else if (s[i].equals(""-"")) {
                ops.push(s[i]);
            } else if (s[i].equals(""*"")) {
                ops.push(s[i]);
            } else if (s[i].equals(""/"")) {
                ops.push(s[i]);
            } else if (s[i].equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                } else if (op.equals(""-"")) {
                    double k = vals.pop();
                    vals.push(vals.pop() - k);
                } else if (op.equals(""/"")) {
                    double k = vals.pop();
                    vals.push(vals.pop() / k);
                }
            } else {
                vals.push(Double.parseDouble(s[i]));
            }

        }
        p = String.valueOf(vals.pop());
        double nn;
        nn = Double.parseDouble(p);
        return nn;
    }

    public static void main(String[] args) {
        String mm = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "";
        Calculator cct = new Calculator();
        double rooo;
        rooo = cct.ans(mm);

        System.out.print(rooo);
    }
}

//        public int find(int p) {
//        if (p < 0 || p >= id.length) throw new IndexOutOfBoundsException();
//        while (p != id[p]) {
//            id[p] = id[id[p]];    // path compression by halving
//            p = id[p];
//        }
//        return p;
//    }

@8fc9f37f9b31fe5da07ee3263feabe4e@"
"b03611011","10","0.096","105488","@8cc8d8445325ed02643cb6ad353c0b9d@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Stack;

public class Calculator {

    public double ans(String d) {
        Stack<String> ops = new Stack<>();
        Stack<Double> vals = new Stack<>();
        String[] cha = d.split("" "");
        int l = cha.length, cal = 0;
        int count = 0;
        while (count < l) {
            String s;
            s = cha[count];
            switch (s) {
                case ""("":
                    break;
                case ""+"":
                    ops.push(s);
                    break;
                case ""*"":
                    ops.push(s);
                    break;
                case ""-"":
                    ops.push(s);
                    break;
                case ""/"":
                    ops.push(s);
                    break;
                case "")"":
                    String op = ops.pop();
                    if (op.equals(""+"")) {
                        vals.push(vals.pop() + vals.pop());
                    } else if (op.equals(""*"")) {
                        vals.push(vals.pop() * vals.pop());
                    } else if (op.equals(""-"")) {
                        vals.push(-1 * (vals.pop() - vals.pop()));
                    } else if (op.equals(""/"")) {
                        vals.push((1 / vals.pop()) * vals.pop());
                    }
                    break;
                default:
                    vals.push(Double.parseDouble(s));
                    break;
            }
            count++;
        }
        return vals.pop();
    }

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            String fund = br.readLine();
            Calculator cct = new Calculator();
            double x;
            x = cct.ans(fund);
            System.out.println(x);
        }
        // TODO code application logic here
    }

}

@8cc8d8445325ed02643cb6ad353c0b9d@"
"r04921105","10","0.099","105824","@3bb15f68e6d6d2b25e820af03acafe8e@
public class Calculator {
    
    
    public Double ans (String data) {        
        String[] input = data.split("" "");
        Stack<String> ops = new Stack<String>();        
        Stack<Double> vals = new Stack<Double>();
        
        for(int i =0;i < input.length;i++) {
        String s = input[i];
        if (s.equals(""("")) ;
        else if (s.equals(""+"") || s.equals(""-"")) ops.push(s);
        else if (s.equals(""*"") || s.equals(""/"")) ops.push(s);
        else if (s.equals("")""))
        {
         String op = ops.pop();
         if (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
         else if (op.equals(""-"")) {
             double a = vals.pop();             
             vals.push(vals.pop() - a);
         }
         else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
         else if (op.equals(""/"")) {
             double a = vals.pop();             
             vals.push(vals.pop() / a);
         }
        }
        else vals.push(Double.parseDouble(s));
        }
        double result = vals.pop();        
        
        return result;
    }

    
    
}
@3bb15f68e6d6d2b25e820af03acafe8e@"
"b03611041","10","0.097","105520","@43cedbc28d3474c61f367e1d47b9b2ea@import java.util.Stack;

/**
 * Created by Sunny on 3/23/16.
 */
public class Calculator {
    private Stack<String> myStack = new Stack<String>();
    private Double answer = 0.0;
    private Stack<Double> valueStack = new Stack<Double>();
    private Stack<String> operatorStack = new Stack<String>();

    public Double ans(String e) {
        String s[] = e.split("" "");
        for (int i = s.length - 1; i >= 0; i--) {
            myStack.push(s[i]);
        }

        while (!myStack.isEmpty()) {
            String t=myStack.pop();
            if (t.equals(""("")) ;
            else if (t.equals(""+"") || t.equals(""-"") || t.equals(""*"") || t.equals(""/"")) {
                operatorStack.push(t);
            } else if (t.equals("")"")) {
                String op=operatorStack.pop();
                if (op.equals(""+"")) {
                    valueStack.push(valueStack.pop() + valueStack.pop());
                }
                else if (op.equals(""-"")) {
                    valueStack.push(-(valueStack.pop() - valueStack.pop()));
                }
                else if (op.equals(""*"")) {
                    valueStack.push(valueStack.pop() * valueStack.pop());
                }
                else if (op.equals(""/"")) {
                    valueStack.push(1/(valueStack.pop() / valueStack.pop()));

                }
            }else{
                valueStack.push(Double.parseDouble(t));
            }
        }
        answer=valueStack.pop();
        return answer;
    }
}

@43cedbc28d3474c61f367e1d47b9b2ea@"
"r04631021","0","0.097","105520","@3533e413087c68fb6d832f675d3a1a1a@import edu.princeton.cs.algs4.Stack ;
import java.io.*;
import java.util.Scanner;
/**
 *
 * @author 林康維
 */
public class Calculator {

    Calculator(){
        
    }
    
    public Double ans(String e){
            
            double ans ;
            ans = 0 ;
            Stack<Double> value = new Stack<Double>() ;
            Stack<String> operator = new Stack<String>() ;
            String[] num = e . split ("" "") ;
            int count = 0 ;
            System.out.println(num.length) ;
            System.out.println(count);
        while (true){
            /*if (num[count].equalsIgnoreCase(""("") ) {
            System.out.println(""yes"") ;
            
            System.out.println(count);
            }
            
            /*else if (num[count].equalsIgnoreCase(null))*/
            switch (num[count]){
                case ""("":
                    //System.out.println(count);
                    //System.out.println(""yes"") ;
                    break ;
                case ""+"":
                    operator.push(num[count]) ;
                    break ;
                case ""-"":
                    operator.push(num[count]) ;
                    break ;
                case ""*"":
                    operator.push(num[count]) ;
                    break ;
                case ""/"":
                    operator.push(num[count]) ;
                    break ;
                case "")"":
                    double b = value.pop() ;
                    double a = value.pop() ;
                    String op = operator.pop() ;
                    if (op.equalsIgnoreCase(""+""))
                        ans = a + b ;
                    
                    else if (op.equalsIgnoreCase(""-""))
                    ans  = a-b ;
                    else if (op.equalsIgnoreCase(""*""))
                        ans = a * b ;
                    else if (op.equalsIgnoreCase(""/""))
                        ans = a / b ;
                
                    value.push(ans);
        //System.out.println(ans) ;
                    break ;
                    
                default:
                    value.push(Double.parseDouble(num[count])) ;
                    break ;
            }
            count += 1 ;
            if(count == num.length){
                break ;
            }
        }
            return ans ;
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        
        File file  ;
        file = new File(args[0]) ;
        //double ans ;
        //ans = 0 ;
        try{
        Scanner File_in = new Scanner(file) ;
        String num = File_in . nextLine() ;
        Calculator cct = new Calculator();
        double b = cct.ans(num);
        System.out.printf(""%f"", b);

        /*Stack<Double> value = new Stack<Double>() ;
        Stack<String> operator = new Stack<String>() ;
            int count = 0 ;
            System.out.println(num.length) ;
            System.out.println(count);
        while (true){
            /*if (num[count].equalsIgnoreCase(""("") ) {
            System.out.println(""yes"") ;
            
            System.out.println(count);
            }
            
            //else if (num[count].equalsIgnoreCase(null))
            switch (num[count]){
                case ""("":
                    //System.out.println(count);
                    //System.out.println(""yes"") ;
                    break ;
                case ""+"":
                    operator.push(num[count]) ;
                    break ;
                case ""-"":
                    operator.push(num[count]) ;
                    break ;
                case ""*"":
                    operator.push(num[count]) ;
                    break ;
                case ""/"":
                    operator.push(num[count]) ;
                    break ;
                case "")"":
                    double b = value.pop() ;
                    double a = value.pop() ;
                    String op = operator.pop() ;
                    if (op.equalsIgnoreCase(""+""))
                        ans = a + b ;
                    
                    else if (op.equalsIgnoreCase(""-""))
                    ans  = a-b ;
                    else if (op.equalsIgnoreCase(""*""))
                        ans = a * b ;
                    else if (op.equalsIgnoreCase(""/""))
                        ans = a / b ;
                
                    value.push(ans);
        System.out.println(ans) ;
                    break ;
                    
                default:
                    value.push(Double.parseDouble(num[count])) ;
                    break ;
            }
            count += 1 ;
            if(count == num.length){
                break ;
            }
        }*/
        }
        catch(IOException e){
            System.out.println(""error!""); 
        }
    }
    
}

@3533e413087c68fb6d832f675d3a1a1a@"
"r04631021","0","0.97","105840","@9074be465529b3b3b0e62dadbce056b9@import java.io.*;
import java.util.Scanner;
/**
 *
 * @author 林康維
 */
public class Calculator {

    Calculator(){
        
    }
    
    public Double ans(String e){
            
            double ans ;
            ans = 0 ;
            Stack<Double> value = new Stack<Double>() ;
            Stack<String> operator = new Stack<String>() ;
            String[] num = e . split ("" "") ;
            int count = 0 ;
            System.out.println(num.length) ;
            System.out.println(count);
        while (true){
            /*if (num[count].equalsIgnoreCase(""("") ) {
            System.out.println(""yes"") ;
            
            System.out.println(count);
            }
            
            /*else if (num[count].equalsIgnoreCase(null))*/
            switch (num[count]){
                case ""("":
                    //System.out.println(count);
                    //System.out.println(""yes"") ;
                    break ;
                case ""+"":
                    operator.push(num[count]) ;
                    break ;
                case ""-"":
                    operator.push(num[count]) ;
                    break ;
                case ""*"":
                    operator.push(num[count]) ;
                    break ;
                case ""/"":
                    operator.push(num[count]) ;
                    break ;
                case "")"":
                    double b = value.pop() ;
                    double a = value.pop() ;
                    String op = operator.pop() ;
                    if (op.equalsIgnoreCase(""+""))
                        ans = a + b ;
                    
                    else if (op.equalsIgnoreCase(""-""))
                    ans  = a-b ;
                    else if (op.equalsIgnoreCase(""*""))
                        ans = a * b ;
                    else if (op.equalsIgnoreCase(""/""))
                        ans = a / b ;
                
                    value.push(ans);
        //System.out.println(ans) ;
                    break ;
                    
                default:
                    value.push(Double.parseDouble(num[count])) ;
                    break ;
            }
            count += 1 ;
            if(count == num.length){
                break ;
            }
        }
            return ans ;
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        
        File file  ;
        file = new File(args[0]) ;
        //double ans ;
        //ans = 0 ;
        try{
        Scanner File_in = new Scanner(file) ;
        String num = File_in . nextLine() ;
        Calculator cct = new Calculator();
        double b = cct.ans(num);
        System.out.printf(""%f"", b);

        /*Stack<Double> value = new Stack<Double>() ;
        Stack<String> operator = new Stack<String>() ;
            int count = 0 ;
            System.out.println(num.length) ;
            System.out.println(count);
        while (true){
            /*if (num[count].equalsIgnoreCase(""("") ) {
            System.out.println(""yes"") ;
            
            System.out.println(count);
            }
            
            //else if (num[count].equalsIgnoreCase(null))
            switch (num[count]){
                case ""("":
                    //System.out.println(count);
                    //System.out.println(""yes"") ;
                    break ;
                case ""+"":
                    operator.push(num[count]) ;
                    break ;
                case ""-"":
                    operator.push(num[count]) ;
                    break ;
                case ""*"":
                    operator.push(num[count]) ;
                    break ;
                case ""/"":
                    operator.push(num[count]) ;
                    break ;
                case "")"":
                    double b = value.pop() ;
                    double a = value.pop() ;
                    String op = operator.pop() ;
                    if (op.equalsIgnoreCase(""+""))
                        ans = a + b ;
                    
                    else if (op.equalsIgnoreCase(""-""))
                    ans  = a-b ;
                    else if (op.equalsIgnoreCase(""*""))
                        ans = a * b ;
                    else if (op.equalsIgnoreCase(""/""))
                        ans = a / b ;
                
                    value.push(ans);
        System.out.println(ans) ;
                    break ;
                    
                default:
                    value.push(Double.parseDouble(num[count])) ;
                    break ;
            }
            count += 1 ;
            if(count == num.length){
                break ;
            }
        }*/
        }
        catch(IOException e){
            System.out.println(""error!""); 
        }
    }
    
}

@9074be465529b3b3b0e62dadbce056b9@"
"r04631021","10","0.098","105840","@45aba27db9404db5db86de038e883706@
import java.io.*;
import java.util.Scanner;
/**
 *
 * @author 林康維
 */
public class Calculator {

    Calculator(){
        
    }
    
    public Double ans(String e){
            
            double ans ;
            ans = 0 ;
            Stack<Double> value = new Stack<Double>() ;
            Stack<String> operator = new Stack<String>() ;
            String[] num = e . split ("" "") ;
            int count = 0 ;
            //System.out.println(num.length) ;
            //System.out.println(count);
        while (true){
            /*if (num[count].equalsIgnoreCase(""("") ) {
            System.out.println(""yes"") ;
            
            System.out.println(count);
            }
            
            /*else if (num[count].equalsIgnoreCase(null))*/
            switch (num[count]){
                case ""("":
                    //System.out.println(count);
                    //System.out.println(""yes"") ;
                    break ;
                case ""+"":
                    operator.push(num[count]) ;
                    break ;
                case ""-"":
                    operator.push(num[count]) ;
                    break ;
                case ""*"":
                    operator.push(num[count]) ;
                    break ;
                case ""/"":
                    operator.push(num[count]) ;
                    break ;
                case "")"":
                    double b = value.pop() ;
                    double a = value.pop() ;
                    String op = operator.pop() ;
                    if (op.equalsIgnoreCase(""+""))
                        ans = a + b ;
                    
                    else if (op.equalsIgnoreCase(""-""))
                    ans  = a-b ;
                    else if (op.equalsIgnoreCase(""*""))
                        ans = a * b ;
                    else if (op.equalsIgnoreCase(""/""))
                        ans = a / b ;
                
                    value.push(ans);
        //System.out.println(ans) ;
                    break ;
                    
                default:
                    value.push(Double.parseDouble(num[count])) ;
                    break ;
            }
            count += 1 ;
            if(count == num.length){
                break ;
            }
        }
            return ans ;
        
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        
        File file  ;
        file = new File(args[0]) ;
        //double ans ;
        //ans = 0 ;
        try{
        Scanner File_in = new Scanner(file) ;
        String num = File_in . nextLine() ;
        Calculator cct = new Calculator();
        double b = cct.ans(num);
        System.out.printf(""%f"", b);

        /*Stack<Double> value = new Stack<Double>() ;
        Stack<String> operator = new Stack<String>() ;
            int count = 0 ;
            System.out.println(num.length) ;
            System.out.println(count);
        while (true){
            /*if (num[count].equalsIgnoreCase(""("") ) {
            System.out.println(""yes"") ;
            
            System.out.println(count);
            }
            
            //else if (num[count].equalsIgnoreCase(null))
            switch (num[count]){
                case ""("":
                    //System.out.println(count);
                    //System.out.println(""yes"") ;
                    break ;
                case ""+"":
                    operator.push(num[count]) ;
                    break ;
                case ""-"":
                    operator.push(num[count]) ;
                    break ;
                case ""*"":
                    operator.push(num[count]) ;
                    break ;
                case ""/"":
                    operator.push(num[count]) ;
                    break ;
                case "")"":
                    double b = value.pop() ;
                    double a = value.pop() ;
                    String op = operator.pop() ;
                    if (op.equalsIgnoreCase(""+""))
                        ans = a + b ;
                    
                    else if (op.equalsIgnoreCase(""-""))
                    ans  = a-b ;
                    else if (op.equalsIgnoreCase(""*""))
                        ans = a * b ;
                    else if (op.equalsIgnoreCase(""/""))
                        ans = a / b ;
                
                    value.push(ans);
        System.out.println(ans) ;
                    break ;
                    
                default:
                    value.push(Double.parseDouble(num[count])) ;
                    break ;
            }
            count += 1 ;
            if(count == num.length){
                break ;
            }
        }*/
        }
        catch(IOException e){
            System.out.println(""error!""); 
        }
    }
    
}

@45aba27db9404db5db86de038e883706@"
"b01703032","0","1.28","178272","@c4bfdd34cd314887e6dce0b20aca2a7d@import java.util.Stack;
/**
 *
 * @author yuningsue
 */
public class Hw3 {

    /**
     * @param args the command line arguments
     */
      public Double ans (String e) {
        Stack<Character> ops = new Stack<>();
        Stack<Double> vals = new Stack<>();
        String num = """";
        for(int i = 0 ; i < e.length() ; i++){
            char c = e.charAt(i);
            switch (c){
                case ' ':
                    if(!num.equals(""""))
                        vals.push(Double.parseDouble(num));
                    num = """";
                    break;
                case '(':
                    break;
                case '+':
                case '-':
                case '*':
                case '/':
                    ops.push(c);
                    break;
                case ')':
                    char op = ops.pop();
                    switch (op){
                        case '+':
                            vals.push(vals.pop() + vals.pop());
                            break;
                        case '-':
                            vals.push(-vals.pop() + vals.pop());
                            break;
                        case '*':
                            vals.push(vals.pop() * vals.pop());
                            break;
                        case '/':
                            vals.push(1/vals.pop()*vals.pop());
                            break;
                    }
                    break;
                default:
                    num += c;
            }
        }
        return vals.pop();
}
    
}

@c4bfdd34cd314887e6dce0b20aca2a7d@"
"b01703032","4","0.97","105504","@77fe315093cb33d3284a084c2390af07@import java.util.Stack;
/**
 *
 * @author yuningsue
 */
public class Calculator {

    /**
     * @param args the command line arguments
     */
      public Double ans (String e) {
        Stack<Character> ops = new Stack<>();
        Stack<Double> vals = new Stack<>();
        String num = """";
        for(int i = 0 ; i < e.length() ; i++){
            char c = e.charAt(i);
            switch (c){
                case ' ':
                    if(!num.equals(""""))
                        vals.push(Double.parseDouble(num));
                    num = """";
                    break;
                case '(':
                    break;
                case '+':
                case '-':
                case '*':
                case '/':
                    ops.push(c);
                    break;
                case ')':
                    char op = ops.pop();
                    switch (op){
                        case '+':
                            vals.push(vals.pop() + vals.pop());
                            break;
                        case '-':
                            vals.push(-vals.pop() + vals.pop());
                            break;
                        case '*':
                            vals.push(vals.pop() * vals.pop());
                            break;
                        case '/':
                            vals.push(1/vals.pop()*vals.pop());
                            break;
                    }
                    break;
                default:
                    num += c;
            }
        }
        return vals.pop();
}
    
}

@77fe315093cb33d3284a084c2390af07@"
"r04631036","10","0.094","105792","@e197dab95a75f6e8d40ce5b7ffb642d7@import java.io.BufferedReader;
import java.io.FileReader;

public class Calculator {

    private String[] data;
    public Stack<String> op;

    Calculator() {
        //setstring(a);

    }

    double ans(String e) {
        String[] input = e.split("" "");
        Stack<String> operator = new Stack<String>();
        Stack<Double> value = new Stack<Double>();
        for (int i = 0; i < input.length; i++) {
            String s = input[i];
            if (s.equals(""("")) ; else if (s.equals(""+"")) {
                operator.push(s);
            } else if (s.equals(""*"")) {
                operator.push(s);
            } else if (s.equals(""/"")) {
                operator.push(s);
            } else if (s.equals(""-"")) {
                operator.push(s);
            } else if (s.equals("")"")) {
                String op = operator.pop();
                if (op.equals(""+"")) {
                    value.push(value.pop() + value.pop());
                } else if (op.equals(""*"")) {
                    value.push(value.pop() * value.pop());
                } else if (op.equals(""/"")) {
                    double k = value.pop();
                    double m = value.pop();
                    value.push(m / k);
                } else if (op.equals(""-"")) {
                    double k = value.pop();
                    double m = value.pop();
                    value.push(m - k);
                }
            } else {
                value.push(Double.parseDouble(s));
            }

//            String s=data[i];
//        if(!data[i].equals(""+"") && !data[i].equals(""-"") && !data[i].equals(""*"") && !data[i].equals(""/"") && !data[i].equals(""("") && !data[i].equals("")"") )
//        value.push(Double.parseDouble(s));
//        if(data[i].equals(""+""))
//            operator.push(s);
//        if(data[i].equals(""-""))
//            operator.push(s);
//        if(data[i].equals(""*""))
//            operator.push(s);
//        if(data[i].equals(""/""))
//            operator.push(s);
//        if(data[i].equals("")""))
//        {
//            String op= operator.pop();
//            if(op.equals(""+""))
//                value.push(value.pop()+value.pop());
//            else if(op.equals(""*""))
//                value.push(value.pop()*value.pop());
//            else if(op.equals(""-""))
//                value.push(value.pop()-value.pop());
//            else if(op.equals(""/""))
//                value.push(value.pop()/value.pop());
//        }
        }
        return value.pop();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            String datadata;
            datadata = br.readLine();
            Calculator cct = new Calculator();
            //cct.printeq();
            double a = cct.ans(datadata);
            System.out.printf(""%f"", a);

        } catch (Exception e) {
//    System.err.println(""-1"");
            System.out.printf(""error"");
        }
        // TODO code application logic here
    }

}

@e197dab95a75f6e8d40ce5b7ffb642d7@"
"b03611003","0","0.97","105504","@234be4d53eb7e2c1eb116b5f9f5e9058@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import edu.princeton.cs.algs4.Stack;
import edu.princeton.cs.algs4.StdIn;
import java.io.BufferedReader;
import java.io.FileReader;

/**
 *
 * @author 士齊
 */
public class Calculator {

    /**
     * @param args the command line arguments
     */
    public Double ans(String e) {
        // please replace the following null to the answer you calculated.
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String[] le = e.split("" "");

        for (int i = 0; i < le.length; i++) {

            if (le[i].equals(""("")) {
                ;
            } else if (le[i].equals(""+"")) {
                ops.push(le[i]);
            } else if (le[i].equals(""-"")) {
                ops.push(le[i]);
            } else if (le[i].equals(""*"")) {
                ops.push(le[i]);
            } else if (le[i].equals(""/"")) {
                ops.push(le[i]);
            } else if (le[i].equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } else if (op.equals(""-"")) {
                    vals.push( -vals.pop() + vals.pop());
                } else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                } else if (op.equals(""/"")) {
                    vals.push( 1/vals.pop() * vals.pop());
                }
            } else {
                vals.push(Double.parseDouble(le[i]));
            }
        }
//        System.out.print(line);
        Double ans = vals.pop();
        
        System.out.print(ans);

        return null;
    }

    public static void main(String[] args) throws Exception {
        // TODO code application logic here
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            Calculator cct = new Calculator();
            String s = br.readLine();
            cct.ans(s);
        }
    }

}

@234be4d53eb7e2c1eb116b5f9f5e9058@"
"b03611003","0","0","0","@b954343e1c245db1525319c54a3549af@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.io.BufferedReader;
import java.io.FileReader;

/**
 *
 * @author 士齊
 */
public class Calculator {

    /**
     * @param args the command line arguments
     */
    public Double ans(String e) {
        // please replace the following null to the answer you calculated.
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String[] le = e.split("" "");

        for (int i = 0; i < le.length; i++) {

            if (le[i].equals(""("")) {
                ;
            } else if (le[i].equals(""+"")) {
                ops.push(le[i]);
            } else if (le[i].equals(""-"")) {
                ops.push(le[i]);
            } else if (le[i].equals(""*"")) {
                ops.push(le[i]);
            } else if (le[i].equals(""/"")) {
                ops.push(le[i]);
            } else if (le[i].equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } else if (op.equals(""-"")) {
                    vals.push( -vals.pop() + vals.pop());
                } else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                } else if (op.equals(""/"")) {
                    vals.push( 1/vals.pop() * vals.pop());
                }
            } else {
                vals.push(Double.parseDouble(le[i]));
            }
        }
//        System.out.print(line);
        Double ans = vals.pop();
        
        System.out.print(ans);

        return null;
    }

    public static void main(String[] args) throws Exception {
        // TODO code application logic here
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            Calculator cct = new Calculator();
            String s = br.readLine();
            cct.ans(s);
        }
    }

}

@b954343e1c245db1525319c54a3549af@"
"b03611015","0","0","0","@5a5c457a4b3fe1cf5d13dda7e2358174@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Stack;
/**
 *
 * @author Steven
 */
public class Calculator {

    public static Double ans (String e) {
          String[] hello = e.split("" "");
          
            Stack<String> ops = new Stack<String>();
            Stack<Double> vals = new Stack<Double>();
           for(int i=0;i<e.length();i++){
            String s = hello[i];
            if (s.equals(""("")) ;
             else if (s.equals(""+"")) ops.push(s);
            else if (s.equals(""*"")) ops.push(s);
            else if (s.equals("")""))
            {
            String op = ops.pop();
            if (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
            else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
            }
            else vals.push(Double.parseDouble(s));
            }
                return vals.pop();
            }   
 
    public static void main(String[] args) throws Exception {
      
       
       try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
          Calculator cct = new Calculator();
            // read a line and split by ','
            String hihi = br.readLine();
            System.out.println(ans(hihi));
            
    }
    
}
}

@5a5c457a4b3fe1cf5d13dda7e2358174@"
"b03611003","0","0","0","@b55101386aa15885946855174875b241@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.io.BufferedReader;
import java.io.FileReader;

/**
 *
 * @author 士齊
 */
public class Calculator {

    /**
     * @param args the command line arguments
     */
    public Double ans(String e) {
        // please replace the following null to the answer you calculated.
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
 
        String[] le = e.split("" "");
        for (int i = 0; i < le.length; i++) {

            if (le[i].equals(""("")) {
                ;
            } else if (le[i].equals(""+"")) {
                ops.push(le[i]);
            } else if (le[i].equals(""-"")) {
                ops.push(le[i]);
            } else if (le[i].equals(""*"")) {
                ops.push(le[i]);
            } else if (le[i].equals(""/"")) {
                ops.push(le[i]);
            } else if (le[i].equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } else if (op.equals(""-"")) {
                    vals.push( -vals.pop() + vals.pop());
                } else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                } else if (op.equals(""/"")) {
                    vals.push( 1/vals.pop() * vals.pop());
                }
            } else {
                vals.push(Double.parseDouble(le[i]));
            }
        }
      
        
        
//        System.out.print(line);
        Double ans = vals.pop();
        
        System.out.print(ans);

        return null;
    }

    public static void main(String[] args) throws Exception {
        // TODO code application logic here
   
    }

}

@b55101386aa15885946855174875b241@"
"b03611015","0","0","0","@256fb4eedb2d4737477cce7501f2183e@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.


import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Stack;
/**
 *
 * @author Steven
 */
public class Calculator {

    public static Double ans (String e) {
          String[] hello = e.split("" "");
          
            Stack<String> ops = new Stack<String>();
            Stack<Double> vals = new Stack<Double>();
           for(int i=0;i<hello.length;i++){
            String s = hello[i];
            if (s.equals(""("")) ;
             else if (s.equals(""+"")) ops.push(s);
            else if (s.equals(""*"")) ops.push(s);
            else if (s.equals("")""))
            {
            String op = ops.pop();
            if (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
            else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
            }
            else vals.push(Double.parseDouble(s));
            }
                return vals.pop();
            }   
 
    public static void main(String[] args) throws Exception {
      
       
       try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
          Calculator cct = new Calculator();
            // read a line and split by ','
            String hihi = br.readLine();
            System.out.println(ans(hihi));
            
    }
    
}
}

@256fb4eedb2d4737477cce7501f2183e@"
"b03611015","3","0.28","105584","@53dba838a1bb325e73cd22d854d566aa@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Stack;
/**
 *
 * @author Steven
 */
public class Calculator {

    public static Double ans (String e) {
          String[] hello = e.split("" "");
          
            Stack<String> ops = new Stack<String>();
            Stack<Double> vals = new Stack<Double>();
           for(int i=0;i<hello.length;i++){
            String s = hello[i];
            if (s.equals(""("")) ;
             else if (s.equals(""+"")) ops.push(s);
            else if (s.equals(""*"")) ops.push(s);
            else if (s.equals("")""))
            {
            String op = ops.pop();
            if (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
            else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
            }
            else vals.push(Double.parseDouble(s));
            }
                return vals.pop();
            }   
 
    public static void main(String[] args) throws Exception {
      
       
       try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
          Calculator cct = new Calculator();
            // read a line and split by ','
            String hihi = br.readLine();
            System.out.println(ans(hihi));
            
    }
    
}
}

@53dba838a1bb325e73cd22d854d566aa@"
"b03611015","4","0.97","105504","@9d7a5e6b4c23ecf2465829c34cbcb0ca@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Stack;
/**
 *
 * @author Steven
 */
public class Calculator {

    public static Double ans (String e) {
          String[] hello = e.split("" "");
          
            Stack<String> ops = new Stack<String>();
            Stack<Double> vals = new Stack<Double>();
           for(int i=0;i<hello.length;i++){
            String s = hello[i];
            if (s.equals(""("")) ;
             else if (s.equals(""+"")) ops.push(s);
            else if (s.equals(""*"")) ops.push(s);
             else if (s.equals(""-"")) ops.push(s);
              else if (s.equals(""/"")) ops.push(s);
            else if (s.equals("")""))
            {
            String op = ops.pop();
            if (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
            else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
             else if (op.equals(""-"")) vals.push(-vals.pop() +vals.pop());
             else if (op.equals(""*"")) vals.push(1/(vals.pop() / vals.pop()));
            }
            else vals.push(Double.parseDouble(s));
            }
                return vals.pop();
            }   
 
    public static void main(String[] args) throws Exception {
      
       
       try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
          Calculator cct = new Calculator();
            // read a line and split by ','
            String hihi = br.readLine();
            System.out.println(ans(hihi));
            
    }
    
}
}

@9d7a5e6b4c23ecf2465829c34cbcb0ca@"
"b03611015","10","0.093","105536","@1f34a31bfda1f9be0e038ca4872b3b9f@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Stack;
/**
 *
 * @author Steven
 */
public class Calculator {

    public static Double ans (String e) {
          String[] hello = e.split("" "");
          
            Stack<String> ops = new Stack<String>();
            Stack<Double> vals = new Stack<Double>();
           for(int i=0;i<hello.length;i++){
            String s = hello[i];
            if (s.equals(""("")) ;
             else if (s.equals(""+"")) ops.push(s);
            else if (s.equals(""*"")) ops.push(s);
             else if (s.equals(""-"")) ops.push(s);
              else if (s.equals(""/"")) ops.push(s);
            else if (s.equals("")""))
            {
            String op = ops.pop();
            if (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
            else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
             else if (op.equals(""-"")) vals.push(-vals.pop() +vals.pop());
             else if (op.equals(""/"")) vals.push(1/(vals.pop() / vals.pop()));
            }
            else vals.push(Double.parseDouble(s));
            }
                return vals.pop();
            }   
 
    public static void main(String[] args) throws Exception {
      
       
       try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
          Calculator cct = new Calculator();
            // read a line and split by ','
            String hihi = br.readLine();
            System.out.println(ans(hihi));
            
    }
    
}
}

@1f34a31bfda1f9be0e038ca4872b3b9f@"
"b03611003","0","0","0","@067d4dba810cafb61baee618351a0fab@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.io.BufferedReader;
import java.io.FileReader;

/**
 *
 * @author 士齊
 */
public class Calculator {

    /**
     * @param args the command line arguments
     */
    public Double ans(String e) {
        // please replace the following null to the answer you calculated.
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
 
        String[] le = e.split(""\\s+"");
        for (int i = 0; i < le.length; i++) {

            if (le[i].equals(""("")) {
                ;
            } else if (le[i].equals(""+"")) {
                ops.push(le[i]);
            } else if (le[i].equals(""-"")) {
                ops.push(le[i]);
            } else if (le[i].equals(""*"")) {
                ops.push(le[i]);
            } else if (le[i].equals(""/"")) {
                ops.push(le[i]);
            } else if (le[i].equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } else if (op.equals(""-"")) {
                    vals.push( -vals.pop() + vals.pop());
                } else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                } else if (op.equals(""/"")) {
                    vals.push( 1/vals.pop() * vals.pop());
                }
            } else {
                vals.push(Double.parseDouble(le[i]));
            }
        }
      
        
        
//        System.out.print(line);
        Double ans = vals.pop();
        
        System.out.print(ans);

        return null;
    }

    public static void main(String[] args) throws Exception {
        // TODO code application logic here
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            Calculator cct = new Calculator();
            String s = br.readLine();
            cct.ans(s);
        }
    }

}

@067d4dba810cafb61baee618351a0fab@"
"b03611003","0","0","0","@1e139b4ef248f0f69023489f0ab06111@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.io.BufferedReader;
import java.io.FileReader;

/**
 *
 * @author 士齊
 */
public class Calculator {

    /**
     * @param args the command line arguments
     */
    public Double ans(String e) {
        // please replace the following null to the answer you calculated.
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
 
        String[] le = e.split(""\\s+"");
        for (int i = 0; i < le.length; i++) {

            if (le[i].equals(""("")) {
                ;
            } else if (le[i].equals(""+"")) {
                ops.push(le[i]);
            } else if (le[i].equals(""-"")) {
                ops.push(le[i]);
            } else if (le[i].equals(""*"")) {
                ops.push(le[i]);
            } else if (le[i].equals(""/"")) {
                ops.push(le[i]);
            } else if (le[i].equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } else if (op.equals(""-"")) {
                    vals.push( -vals.pop() + vals.pop());
                } else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                } else if (op.equals(""/"")) {
                    vals.push( 1/vals.pop() * vals.pop());
                }
            } else {
                vals.push(Double.parseDouble(le[i]));
            }
        }
      
        System.out.print(vals.pop());

        return null;
    }

    public static void main(String[] args) throws Exception {
        // TODO code application logic here
  
    }

}

@1e139b4ef248f0f69023489f0ab06111@"
"b03611003","10","0.097","105840","@7574a619eea5c38096bf226351f5ef8c@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.io.BufferedReader;
import java.io.FileReader;

/**
 *
 * @author 士齊
 */
public class Calculator {

    /**
     * @param args the command line arguments
     */
    public Double ans(String e) {
        // please replace the following null to the answer you calculated.
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
 
        String[] le = e.split(""\\s+"");
        for (int i = 0; i < le.length; i++) {

            if (le[i].equals(""("")) {
                ;
            } else if (le[i].equals(""+"")) {
                ops.push(le[i]);
            } else if (le[i].equals(""-"")) {
                ops.push(le[i]);
            } else if (le[i].equals(""*"")) {
                ops.push(le[i]);
            } else if (le[i].equals(""/"")) {
                ops.push(le[i]);
            } else if (le[i].equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } else if (op.equals(""-"")) {
                    vals.push( -vals.pop() + vals.pop());
                } else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                } else if (op.equals(""/"")) {
                    vals.push( 1/vals.pop() * vals.pop());
                }
            } else {
                vals.push(Double.parseDouble(le[i]));
            }
        }
      
//        System.out.print(vals.pop());

        return vals.pop();
    }

    public static void main(String[] args) throws Exception {
        // TODO code application logic here
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            Calculator cct = new Calculator();
            String s = br.readLine();
            
            
            System.out.print(cct.ans(s));
        }
    }

}

@7574a619eea5c38096bf226351f5ef8c@"
"b03611003","10","0.099","105808","@4f3cc0ef508299db0e53a36f5fe3d657@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.io.BufferedReader;
import java.io.FileReader;

/**
 *
 * @author 士齊
 */
public class Calculator {

    /**
     * @param args the command line arguments
     */
    public Double ans(String e) {
        // please replace the following null to the answer you calculated.
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
 
        String[] le = e.split(""\\s+"");
        for (int i = 0; i < le.length; i++) {

            if (le[i].equals(""("")) {
                ;
            } else if (le[i].equals(""+"")) {
                ops.push(le[i]);
            } else if (le[i].equals(""-"")) {
                ops.push(le[i]);
            } else if (le[i].equals(""*"")) {
                ops.push(le[i]);
            } else if (le[i].equals(""/"")) {
                ops.push(le[i]);
            } else if (le[i].equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } else if (op.equals(""-"")) {
                    vals.push( -vals.pop() + vals.pop());
                } else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                } else if (op.equals(""/"")) {
                    vals.push( 1/vals.pop() * vals.pop());
                }
            } else {
                vals.push(Double.parseDouble(le[i]));
            }
        }
      
//        System.out.print(vals.pop());

        return vals.pop();
    }

    public static void main(String[] args) throws Exception {
        // TODO code application logic here
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            Calculator cct = new Calculator();
            String s = br.readLine();
            
            
    
        }
    }

}

@4f3cc0ef508299db0e53a36f5fe3d657@"
"b03611003","0","0","0","@6a1fe9edbab04c4124fce087b9e69849@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import edu.princeton.cs.algs4.Stack;
import edu.princeton.cs.algs4.StdIn;
import java.io.BufferedReader;
import java.io.FileReader;

/**
 *
 * @author 士齊
 */
public class Calculator {

    /**
     * @param args the command line arguments
     */
    public Double ans(String e) {
        // please replace the following null to the answer you calculated.
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
 
        String[] le = e.split(""\\s+"");
        for (int i = 0; i < le.length; i++) {

            if (le[i].equals(""("")) {
                ;
            } else if (le[i].equals(""+"")) {
                ops.push(le[i]);
            } else if (le[i].equals(""-"")) {
                ops.push(le[i]);
            } else if (le[i].equals(""*"")) {
                ops.push(le[i]);
            } else if (le[i].equals(""/"")) {
                ops.push(le[i]);
            } else if (le[i].equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } else if (op.equals(""-"")) {
                    vals.push( -vals.pop() + vals.pop());
                } else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                } else if (op.equals(""/"")) {
                    vals.push( 1/vals.pop() * vals.pop());
                }
            } else {
                vals.push(Double.parseDouble(le[i]));
            }
        }
      
//        System.out.print(vals.pop());

        return vals.pop();
    }

    public static void main(String[] args) throws Exception {
        // TODO code application logic here
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            Calculator cct = new Calculator();
            String s = br.readLine();
            
            
            System.out.print(cct.ans(s));
        }
    }

}

@6a1fe9edbab04c4124fce087b9e69849@"
"b03611035","0","0","0","@b2362ca16168476cc17a2e829b694ad9@//import java.io.FileReader;
//import java.io.BufferedReader;
import edu.princeton.cs.algs4.Stack;
public class Calculator {

    public static void main(String[] args) throws Exception {        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            Calculator cct=new Calculator();       
            String e=br.readLine();
            System.out.println(cct.ans(e));
        }
     }
    
    public double ans (String e) throws Exception{
            double result;
            Stack<String> ops = new Stack<>();
            Stack<Double> vals = new Stack<>();
            String gg[]=new String[e.length()];
            gg=e.split("" "");
            int i=0;
            while(!gg[i].isEmpty()){
                
                if(i==24){
                    String oper=ops.pop();
                    vals.push(inside(vals.pop() ,oper, vals.pop()));
                    return vals.pop();
                }
                else{
                
                if(gg[i].equals(""(""))   i++;
                else if((gg[i].equals(""+""))||(gg[i].equals(""-""))||(gg[i].equals(""*""))||(gg[i].equals(""/"")))  {
                    ops.push(gg[i]);
                    i++;
                }
                //碰到)就開算
                else if(gg[i].equals("")"")){
                    String oper=ops.pop();
                    vals.push(inside(vals.pop() ,oper, vals.pop()));
                    i++;
                }
                else {
                    vals.push(Double.parseDouble(gg[i]));
                    i++;
                }
            }}            
            return vals.pop();
        }
    
    
    private double inside(double b,String oper, double a){
        if(oper.equals(""+""))return a+b;
        else if(oper.equals(""-""))return a-b;
        else if(oper.equals(""*""))return a*b;
        else return a/b;
    }
    
}
@b2362ca16168476cc17a2e829b694ad9@"
"b03611035","0","0","0","@b2362ca16168476cc17a2e829b694ad9@//import java.io.FileReader;
//import java.io.BufferedReader;
import edu.princeton.cs.algs4.Stack;
public class Calculator {

    public static void main(String[] args) throws Exception {        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            Calculator cct=new Calculator();       
            String e=br.readLine();
            System.out.println(cct.ans(e));
        }
     }
    
    public double ans (String e) throws Exception{
            double result;
            Stack<String> ops = new Stack<>();
            Stack<Double> vals = new Stack<>();
            String gg[]=new String[e.length()];
            gg=e.split("" "");
            int i=0;
            while(!gg[i].isEmpty()){
                
                if(i==24){
                    String oper=ops.pop();
                    vals.push(inside(vals.pop() ,oper, vals.pop()));
                    return vals.pop();
                }
                else{
                
                if(gg[i].equals(""(""))   i++;
                else if((gg[i].equals(""+""))||(gg[i].equals(""-""))||(gg[i].equals(""*""))||(gg[i].equals(""/"")))  {
                    ops.push(gg[i]);
                    i++;
                }
                //碰到)就開算
                else if(gg[i].equals("")"")){
                    String oper=ops.pop();
                    vals.push(inside(vals.pop() ,oper, vals.pop()));
                    i++;
                }
                else {
                    vals.push(Double.parseDouble(gg[i]));
                    i++;
                }
            }}            
            return vals.pop();
        }
    
    
    private double inside(double b,String oper, double a){
        if(oper.equals(""+""))return a+b;
        else if(oper.equals(""-""))return a-b;
        else if(oper.equals(""*""))return a*b;
        else return a/b;
    }
    
}
@b2362ca16168476cc17a2e829b694ad9@"
"b03611035","0","0.1","104608","@7900b270c79563c7ad7c37eace6fe978@import java.io.FileReader;
import java.io.BufferedReader;
//import edu.princeton.cs.algs4.Stack;
public class Calculator {

    public static void main(String[] args) throws Exception {        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            Calculator cct=new Calculator();       
            String e=br.readLine();
            System.out.println(cct.ans(e));
        }
     }
    
    public double ans (String e) throws Exception{
            double result;
            Stack<String> ops = new Stack<>();
            Stack<Double> vals = new Stack<>();
            String gg[]=new String[e.length()];
            gg=e.split("" "");
            int i=0;
            while(!gg[i].isEmpty()){
                
                if(i==24){
                    String oper=ops.pop();
                    vals.push(inside(vals.pop() ,oper, vals.pop()));
                    return vals.pop();
                }
                else{
                
                if(gg[i].equals(""(""))   i++;
                else if((gg[i].equals(""+""))||(gg[i].equals(""-""))||(gg[i].equals(""*""))||(gg[i].equals(""/"")))  {
                    ops.push(gg[i]);
                    i++;
                }
                //碰到)就開算
                else if(gg[i].equals("")"")){
                    String oper=ops.pop();
                    vals.push(inside(vals.pop() ,oper, vals.pop()));
                    i++;
                }
                else {
                    vals.push(Double.parseDouble(gg[i]));
                    i++;
                }
            }}            
            return vals.pop();
        }
    
    
    private double inside(double b,String oper, double a){
        if(oper.equals(""+""))return a+b;
        else if(oper.equals(""-""))return a-b;
        else if(oper.equals(""*""))return a*b;
        else return a/b;
    }
    
}
@7900b270c79563c7ad7c37eace6fe978@"
"b03611035","0","0.1","101808","@ab1996a200571fe0b09417c21b568b84@import java.io.FileReader;
import java.io.BufferedReader;
//import edu.princeton.cs.algs4.Stack;
public class Calculator {

    public static void main(String[] args) throws Exception {        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            Calculator bigfatgg=new Calculator();       
            String e=br.readLine();
            System.out.println(bigfatgg.ans(e));
        }
     }
    
    public double ans (String e) throws Exception{
            double result;
            Stack<String> ops = new Stack<>();
            Stack<Double> vals = new Stack<>();
            String gg[]=new String[e.length()];
            gg=e.split("" "");
            int i=0;
            while(!gg[i].isEmpty()){
                
                if(i==24){
                    String oper=ops.pop();
                    vals.push(inside(vals.pop() ,oper, vals.pop()));
                    return vals.pop();
                }
                else{                
                    if(gg[i].equals(""(""))   i++;
                    else if((gg[i].equals(""+""))||(gg[i].equals(""-""))||(gg[i].equals(""*""))||(gg[i].equals(""/"")))  {
                        ops.push(gg[i]);
                        i++;
                    }
                    //碰到)就開算
                    else if(gg[i].equals("")"")){
                        String oper=ops.pop();
                        vals.push(inside(vals.pop() ,oper, vals.pop()));
                        i++;
                    }
                    else {
                        vals.push(Double.parseDouble(gg[i]));
                        i++;
                    }
                }
            }
            return vals.pop();
        }
    
    
    private double inside(double b,String oper, double a){
        if(oper.equals(""+""))return a+b;
        else if(oper.equals(""-""))return a-b;
        else if(oper.equals(""*""))return a*b;
        else return a/b;
    }
    
}
@ab1996a200571fe0b09417c21b568b84@"
"b03611035","0","0.1","101776","@13c45f6a653b89fcb9c3fef23c937d57@import java.io.FileReader;
import java.io.BufferedReader;
//import edu.princeton.cs.algs4.Stack;
public class Calculator {

    public static void main(String[] args) throws Exception {        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            Calculator bigfatgg=new Calculator();       
            String e=br.readLine();
            System.out.println(bigfatgg.ans(e));
        }
     }
    
    public double ans (String e){
            double result;
            Stack<String> ops = new Stack<>();
            Stack<Double> vals = new Stack<>();
            String gg[]=new String[e.length()];
            gg=e.split("" "");
            int i=0;
            while(!gg[i].isEmpty()){
                
                if(i==24){
                    String oper=ops.pop();
                    vals.push(inside(vals.pop() ,oper, vals.pop()));
                    return vals.pop();
                }
                else{                
                    if(gg[i].equals(""(""))   i++;
                    else if((gg[i].equals(""+""))||(gg[i].equals(""-""))||(gg[i].equals(""*""))||(gg[i].equals(""/"")))  {
                        ops.push(gg[i]);
                        i++;
                    }
                    //碰到)就開算
                    else if(gg[i].equals("")"")){
                        String oper=ops.pop();
                        vals.push(inside(vals.pop() ,oper, vals.pop()));
                        i++;
                    }
                    else {
                        vals.push(Double.parseDouble(gg[i]));
                        i++;
                    }
                }
            }
            return vals.pop();
        }
    
    
    private double inside(double b,String oper, double a){
        if(oper.equals(""+""))return a+b;
        else if(oper.equals(""-""))return a-b;
        else if(oper.equals(""*""))return a*b;
        else return a/b;
    }
    
}
@13c45f6a653b89fcb9c3fef23c937d57@"
"b03611035","0","0","0","@0e4209d753dd834d9f718056e10ba6e7@import java.io.FileReader;
import java.io.BufferedReader;
//import edu.princeton.cs.algs4.Stack;
public class Calculator {

    public static void main(String[] args) throws Exception {        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            Calculator bigfatgg=new Calculator();       
            String e=br.readLine();
            System.out.println(bigfatgg.ans(e));
        }
     }
    
    public double ans (String e){
            double result;
            Stack<String> ops = new Stack<>();
            Stack<Double> vals = new Stack<>();
            String gg[]=new String[e.length()];
            gg=e.split("" "");
            int i=0;
            while(!gg[i].isEmpty()){
                    if(gg[i].equals(""(""))   i++;
                    else if((gg[i].equals(""+""))||(gg[i].equals(""-""))||(gg[i].equals(""*""))||(gg[i].equals(""/"")))  {
                        ops.push(gg[i]);
                        i++;
                    }
                    //碰到)就開算
                    else if(gg[i].equals("")"")){
                        String oper=ops.pop();
                        vals.push(inside(vals.pop() ,oper, vals.pop()));
                        i++;
                    }
                    else {
                        vals.push(Double.parseDouble(gg[i]));
                        i++;
                    }
                }
            String oper=ops.pop();
            vals.push(inside(vals.pop() ,oper, vals.pop()));
            return vals.pop();
        }
    
    
    private double inside(double b,String oper, double a){
        if(oper.equals(""+""))return a+b;
        else if(oper.equals(""-""))return a-b;
        else if(oper.equals(""*""))return a*b;
        else return a/b;
    }
    
}
@0e4209d753dd834d9f718056e10ba6e7@"
"b03611035","10","0.097","105840","@6ec44b27f8febfd0f2c1963925a4151d@import java.io.FileReader;
import java.io.BufferedReader;
//import edu.princeton.cs.algs4.Stack;
public class Calculator {

    public static void main(String[] args) throws Exception {        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            Calculator bigfatgg=new Calculator();       
            String e=br.readLine();
            System.out.println(bigfatgg.ans(e));
        }
     }
    
    public double ans (String e){
            double result;
            Stack<String> ops = new Stack<>();
            Stack<Double> vals = new Stack<>();
            String gg[]=new String[e.length()];
            gg=e.split("" "");
            int ggyy=gg.length;
            int i=0;
            while(i<ggyy-1){
                    if(gg[i].equals(""(""))   i++;
                    else if((gg[i].equals(""+""))||(gg[i].equals(""-""))||(gg[i].equals(""*""))||(gg[i].equals(""/"")))  {
                        ops.push(gg[i]);
                        i++;
                    }
                    //碰到)就開算
                    else if(gg[i].equals("")"")){
                        String oper=ops.pop();
                        vals.push(inside(vals.pop() ,oper, vals.pop()));
                        i++;
                    }
                    else {
                        vals.push(Double.parseDouble(gg[i]));
                        i++;
                    }
                    int xd=0;
                }
            String oper=ops.pop();
            vals.push(inside(vals.pop() ,oper, vals.pop()));
            return vals.pop();
        }
    
    
    private double inside(double b,String oper, double a){
        if(oper.equals(""+""))return a+b;
        else if(oper.equals(""-""))return a-b;
        else if(oper.equals(""*""))return a*b;
        else return a/b;
    }
    
}
@6ec44b27f8febfd0f2c1963925a4151d@"
"r02b48003","4","0.79","105792","@00f72a3c554a655a7b48ab1ffd647974@
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author clint
 */
public class Calculator {
    private Stack<Double>    stackVal = new Stack<Double>();
    private Stack<Character> stackOpr = new Stack<Character>();
    
    public void displayOpr() {
        /* print out stack of operator */
        System.out.println(""Print operand in Stack"");
        for (Character opr : stackOpr) { System.out.print(opr + "" ""); }
        System.out.println();
    } // end func displayOpr
    
    public void displayVal() {
        /* print out stack of value */
        System.out.println(""Print value in Stack"");
        for (Double val : stackVal) { System.out.printf(""%.1f "", val); }
        System.out.println();
    } // end func displayVal
    
    private void cal(){
        /* perform calculation */
        // pop out two value and one operator from the stacks
        Character opr = stackOpr.pop();
        Double val02 = stackVal.pop();
        Double val01 = stackVal.pop();
        
        // calculate the result and push into stack of values
        switch(opr) {
            case '+':
                //System.out.println('+');
                stackVal.push(val01 + val02);
                break;
            case '-':
                //System.out.println('-');
                stackVal.push(val01 - val02);
                break;
            case '*':
                //System.out.println('*');
                stackVal.push(val01 * val02);
                break;
            case '/':
                //System.out.println('/');
                stackVal.push(val01 / val02);
                break;
        } // end switch
    } // end func cal
    
    public Double ans (String e) {
        /* iterate through the input string and perform calculation */
        // http://stackoverflow.com/questions/196830/what-is-the-easiest-best-most-correct-way-to-iterate-through-the-characters-of-a
        
        String  val = """";
        for (int i = 0; i < e.length(); i++){
            // foreach character in input string
            char c = e.charAt(i);
            
            // deal with space and bracket
            if (c == ' '){ continue; }
            if (c == '('){ continue; }
            if (c == ')'){ 
                // two cases when encounter ')'
                // case 1: '(1+5)'      
                // => push 5 into value stack and perform calculation
                //                      
                // case 2: '(...(...))' sequential right bracket
                //=> perform calculation only
                
                // push value if necessary
                if (!val.equals("""")) { 
                    //System.out.println("")"" + val);
                    stackVal.push(Double.valueOf(val));
                } // end if
                
                // perform calculation
                cal();
                // initialize value
                val = """";
                continue;
            } // end if
            
            // deal with operators
            if (c == '+' || c == '-' || c == '*' || c == '/'){
                // two cases when encounter operation
                // case 1: '5+...'      
                // => push 5 into value stack; push operator into oprator stack
                //                      
                // case 2: '...)+' right after right bracket
                // => push operator into oprator stack
                
                // case 1
                if (!val.equals("""")) {
                    stackVal.push(Double.valueOf(val));
                    //System.out.println(c + val);
                } // end if
                
                // case 1&2
                stackOpr.push(c);
                
                // initialize value
                val = """";
            } else {
                val += c;
                // http://stackoverflow.com/questions/8172420/how-to-convert-a-char-to-a-string-in-java
            } // end if-else
        } // end for loop
        //displayVal();
        //displayOpr();
        
        return stackVal.pop();
    } // end func ans
    
    public static void main(String[] args) {
        Calculator cal = new Calculator();
        System.out.println(cal.ans(""(((1+(12*5))-(3*4))+(4/5))""));
        
    } // end main
} // 

@00f72a3c554a655a7b48ab1ffd647974@"
"r02b48003","4","0.78","105776","@5222c6abb213cd5e2c720e69765763b5@
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author clint
 */
public class Calculator {
    private Stack<Double>    stackVal = new Stack<Double>();
    private Stack<Character> stackOpr = new Stack<Character>();
    
    public void displayOpr() {
        /* print out stack of operator */
        System.out.println(""Print operand in Stack"");
        for (Character opr : stackOpr) { System.out.print(opr + "" ""); }
        System.out.println();
    } // end func displayOpr
    
    public void displayVal() {
        /* print out stack of value */
        System.out.println(""Print value in Stack"");
        for (Double val : stackVal) { System.out.printf(""%.1f "", val); }
        System.out.println();
    } // end func displayVal
    
    private void cal(){
        /* perform calculation */
        // pop out two value and one operator from the stacks
        Character opr = stackOpr.pop();
        Double val02 = stackVal.pop();
        Double val01 = stackVal.pop();
        
        // calculate the result and push into stack of values
        switch(opr) {
            case '+':
                //System.out.println('+');
                stackVal.push(val01 + val02);
                break;
            case '-':
                //System.out.println('-');
                stackVal.push(val01 - val02);
                break;
            case '*':
                //System.out.println('*');
                stackVal.push(val01 * val02);
                break;
            case '/':
                //System.out.println('/');
                stackVal.push(val01 / val02);
                break;
        } // end switch
    } // end func cal
    
    public Double ans (String e) {
        /* iterate through the input string and perform calculation */
        // http://stackoverflow.com/questions/196830/what-is-the-easiest-best-most-correct-way-to-iterate-through-the-characters-of-a
        
        String  val = """";
        for (int i = 0; i < e.length(); i++){
            // foreach character in input string
            char c = e.charAt(i);
            
            // deal with space and bracket
            if (c == ' '){ continue; }
            if (c == '('){ continue; }
            if (c == ')'){ 
                // two cases when encounter ')'
                // case 1: '(1+5)'      
                // => push 5 into value stack and perform calculation
                //                      
                // case 2: '(...(...))' sequential right bracket
                // => perform calculation only
                
                // push value if necessary
                if (!val.equals("""")) { 
                    //System.out.println("")"" + val);
                    stackVal.push(Double.valueOf(val));
                } // end inner if
                // perform calculation
                if (stackOpr.size() != 0){
                    cal();
                } // end if
                
                // initialize value
                val = """";
                continue;
            } // end outer if
            
            // deal with operators
            if (c == '+' || c == '-' || c == '*' || c == '/'){
                // two cases when encounter operation
                // case 1: '5+...'      
                // => push 5 into value stack; push operator into oprator stack
                //                      
                // case 2: '...)+' right after right bracket
                // => push operator into oprator stack
                
                // case 1
                if (!val.equals("""")) {
                    stackVal.push(Double.valueOf(val));
                    //System.out.println(c + val);
                } // end if
                
                // case 1&2
                stackOpr.push(c);
                
                // initialize value
                val = """";
            } else {
                val += c;
                // http://stackoverflow.com/questions/8172420/how-to-convert-a-char-to-a-string-in-java
            } // end if-else
        } // end for loop
        //displayVal();
        //displayOpr();
        
        return stackVal.pop();
    } // end func ans
    
    public static void main(String[] args) {
        Calculator cal = new Calculator();
        System.out.println(cal.ans(""(((1+(12*5))-(3*4))+(4/5))""));
        System.out.println(cal.ans(""(((1+(12*5))-(3*4))+((4/5)))""));
    } // end main
} // 

@5222c6abb213cd5e2c720e69765763b5@"
"r04522616","10","0.1","105792","@1d89b5c7c72b65d1ec4777a23a9cd548@
//import edu.princeton.cs.algs4.Stack;
import java.io.FileReader;
import java.io.BufferedReader;


public class Calculator {

    public Double ans (String e) {
      // please replace the following null to the answer you calculated.
      String[] data = e.split("" "");
      Stack<String> stk=new Stack<String>();
      double answer = 0.0;
      int i=0;
      do
      {
          if(data[i].equals("")""))
          {
              String num2 = stk.pop();
              double numTwo=Double.parseDouble(num2);
              
              String label = stk.pop();             
              
              String num1 = stk.pop();
              double numOne=Double.parseDouble(num1);
              if(label.equals(""+""))
              {
                  answer = numOne+numTwo;
              }
              if(label.equals(""-""))
              {
                  answer = numOne-numTwo;
              }
              if(label.equals(""*""))
              {
                  answer = numOne*numTwo;
              }
              if(label.equals(""/""))
              {
                  answer = numOne/numTwo;
              }
              stk.pop();
              stk.push(String.valueOf(answer));
          }
          else
          {
              stk.push(data[i]);
          }
          i++;
      }
      while(i!=data.length);
     
      //System.out.print(stk.pop());
      return answer;
    }
    
    
    
    public static void main(String[] args) throws Exception {
        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
           Calculator cct = new Calculator();
           cct.ans(br.readLine());
            
        }
    }
}

@1d89b5c7c72b65d1ec4777a23a9cd548@"
"r02b48003","4","0.8","105856","@4836fb43ca0fcf2c7b777736f175b384@
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author clint
 */
public class Calculator {
    private Stack<String>    stackVal = new Stack<String>();
    private Stack<Character> stackOpr = new Stack<Character>();
    
    public void displayOpr() {
        /* print out stack of operator */
        System.out.println(""Print operand in Stack"");
        for (Character opr : stackOpr) { System.out.print(opr + "" ""); }
        System.out.println();
    } // end func displayOpr
    
    public void displayVal() {
        /* print out stack of value */
        System.out.println(""Print value in Stack"");
        for (String val : stackVal) { System.out.print(val + "" ""); }
        System.out.println();
    } // end func displayVal
    
    private void cal(){
        /* perform calculation */
        // pop out two value and one operator from the stacks
        Character opr;
        String val01, val02;
        Double res;
        if (stackVal.size() != 0){
            val02 = stackVal.pop();
        } else {
            val02 = null;
        } // end if-else
        
        if (stackVal.size() != 0){
            val01 = stackVal.pop();
        } else {
            val01 = null;
        } // end if-else
        
        if (val01 == null || val02 == null) return;
        opr = stackOpr.pop();
        
        // calculate the result and push into stack of values
        switch(opr) {
            case '+':
                //System.out.println('+');
                res = Double.valueOf(val01) + Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
            case '-':
                //System.out.println('-');
                res = Double.valueOf(val01) - Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
            case '*':
                //System.out.println('*');
                res = Double.valueOf(val01) * Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
            case '/':
                //System.out.println('/');
                res = Double.valueOf(val01) / Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
        } // end switch
    } // end func cal
    
    public Double ans (String e) {
        /* iterate through the input string and perform calculation */
        // http://stackoverflow.com/questions/196830/what-is-the-easiest-best-most-correct-way-to-iterate-through-the-characters-of-a
        
        String  val = """";
        for (int i = 0; i < e.length(); i++){
            // foreach character in input string
            char c = e.charAt(i);
            
            // deal with space and bracket
            if (c == ' '){ continue; }
            if (c == '('){ continue; }
            if (c == ')'){ 
                // two cases when encounter ')'
                // case 1: '(1+5)'      
                // => push 5 into value stack and perform calculation
                //                      
                // case 2: '(...(...))' sequential right bracket
                // => perform calculation only
                
                // push value if necessary
                if (!val.equals("""")) { 
                    //System.out.println("")"" + val);
                    stackVal.push(val);
                } // end inner if
                
                // perform calculation
                if (stackOpr.size() != 0){
                    cal();
                } // end if
                
                // initialize value
                val = """";
                continue;
            } // end outer if
            
            // deal with operators
            if (c == '+' || c == '-' || c == '*' || c == '/'){
                // two cases when encounter operation
                // case 1: '5+...'      
                // => push 5 into value stack; push operator into oprator stack
                //                      
                // case 2: '...)+' right after right bracket
                // => push operator into oprator stack
                
                // case 1
                if (!val.equals("""")) {
                    stackVal.push(val);
                    //System.out.println(c + val);
                } // end if
                
                // case 1&2
                stackOpr.push(c);
                
                // initialize value
                val = """";
                continue;
            } // end if
            
            // if nothing
            val += c;
            // http://stackoverflow.com/questions/8172420/how-to-convert-a-char-to-a-string-in-java
            
        } // end for loop
        //displayVal();
        //displayOpr();
        if (stackVal.size() != 0){
            return Double.valueOf(stackVal.pop());
        } else {
            return null;
        } // end if-else
    } // end func ans
    
    public static void main(String[] args) {
        Calculator cal = new Calculator();
        System.out.println(cal.ans(""(((1+(12*5))-(3*4))+(4/5))""));
        System.out.println(cal.ans(""(((1+(12*5))-(3*4))+((4/5)))""));
        System.out.println(cal.ans(""((((1+(12*5))-(3*4)))+((4/5)))""));
        //System.out.println(cal.ans(""(-9)+8""));
        //System.out.println(Double.valueOf(""1"") == -1.0);
        //System.out.println(Double.valueOf(""-1"") == -1.0);
    } // end main
} // 

@4836fb43ca0fcf2c7b777736f175b384@"
"r02b48003","0","0","0","@2728fc9885954d9741b476a0da678548@public class Calculator  {
    public Double ans (String e) {
      return null;
    }
}
@2728fc9885954d9741b476a0da678548@"
"r02b48003","0","0.78","105776","@b94ce5b44c4d353185f0e2343e58a116@public class Calculator  {
    public Double ans (String e) {
      // please replace the following null to the answer you calculated.
      return 0;
    }
}
@b94ce5b44c4d353185f0e2343e58a116@"
"r02b48003","0","0.93","105584","@07147f7fcd88f54a9a6da9c326dff1c4@public class Calculator  {
    public Double ans (String e) {
      // please replace the following null to the answer you calculated.
      return 0.0;
    }
}
@07147f7fcd88f54a9a6da9c326dff1c4@"
"r02b48003","4","0.74","105824","@d02fcee534733e71721ecc9c18ea4fa1@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author clint
 */
public class Calculator {
    private Stack<String>    stackVal = new Stack<String>();
    private Stack<Character> stackOpr = new Stack<Character>();
    
    public void displayOpr() {
        /* print out stack of operator */
        System.out.println(""Print operand in Stack"");
        for (Character opr : stackOpr) { System.out.print(opr + "" ""); }
        System.out.println();
    } // end func displayOpr
    
    public void displayVal() {
        /* print out stack of value */
        System.out.println(""Print value in Stack"");
        for (String val : stackVal) { System.out.print(val + "" ""); }
        System.out.println();
    } // end func displayVal
    
    private void cal(){
        /* perform calculation */
        // pop out two value and one operator from the stacks
        Character opr;
        String val01, val02;
        Double res;
        if (stackVal.size() != 0){
            val02 = stackVal.pop();
        } else {
            val02 = null;
        } // end if-else
        
        if (stackVal.size() != 0){
            val01 = stackVal.pop();
        } else {
            val01 = null;
        } // end if-else
        
        if (val01 == null || val02 == null) return;
        opr = stackOpr.pop();
        
        // calculate the result and push into stack of values
        switch(opr) {
            case '+':
                //System.out.println('+');
                res = Double.valueOf(val01) + Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
            case '-':
                //System.out.println('-');
                res = Double.valueOf(val01) - Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
            case '*':
                //System.out.println('*');
                res = Double.valueOf(val01) * Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
            case '/':
                //System.out.println('/');
                res = Double.valueOf(val01) / Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
        } // end switch
    } // end func cal
    
    public Double ans (String e) {
        /* iterate through the input string and perform calculation */
        // http://stackoverflow.com/questions/196830/what-is-the-easiest-best-most-correct-way-to-iterate-through-the-characters-of-a
        
        String  val = """";
        for (int i = 0; i < e.length(); i++){
            // foreach character in input string
            char c = e.charAt(i);
            
            // deal with space and bracket
            if (c == ' '){ continue; }
            if (c == '('){ continue; }
            if (c == ')'){ 
                // two cases when encounter ')'
                // case 1: '(1+5)'      
                // => push 5 into value stack and perform calculation
                //                      
                // case 2: '(...(...))' sequential right bracket
                // => perform calculation only
                
                // push value if necessary
                if (!val.equals("""")) { 
                    //System.out.println("")"" + val);
                    stackVal.push(val);
                } // end inner if
                
                // perform calculation
                if (stackOpr.size() != 0){
                    cal();
                } // end if
                
                // initialize value
                val = """";
                continue;
            } // end outer if
            
            // deal with operators
            if (c == '+' || c == '-' || c == '*' || c == '/'){
                // two cases when encounter operation
                // case 1: '5+...'      
                // => push 5 into value stack; push operator into oprator stack
                //                      
                // case 2: '...)+' right after right bracket
                // => push operator into oprator stack
                
                // case 1
                if (!val.equals("""")) {
                    stackVal.push(val);
                    //System.out.println(c + val);
                } // end if
                
                // case 1&2
                stackOpr.push(c);
                
                // initialize value
                val = """";
                continue;
            } // end if
            
            // if nothing
            val += c;
            // http://stackoverflow.com/questions/8172420/how-to-convert-a-char-to-a-string-in-java
            
        } // end for loop
        //displayVal();
        //displayOpr();
        if (stackVal.size() != 0){
            return Double.valueOf(stackVal.pop());
        } else {
            return 0.0;
        } // end if-else
    } // end func ans
    
    public static void main(String[] args) {
        Calculator cal = new Calculator();
        System.out.println(cal.ans(""(((1+(12*5))-(3*4))+(4/5))""));
        System.out.println(cal.ans(""(((1+(12*5))-(3*4))+((4/5)))""));
        System.out.println(cal.ans(""((((1+(12*5))-(3*4)))+((4/5)))""));
        System.out.println(cal.ans(""(-9)+8""));
        System.out.println(cal.ans(""()""));
        //System.out.println(Double.valueOf(""1"") == -1.0);
        //System.out.println(Double.valueOf(""-1"") == -1.0);
    } // end main
} // 

@d02fcee534733e71721ecc9c18ea4fa1@"
"r02b48003","0","0.67","105904","@aa3891e7380c7a8fd442811c6907a661@
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author clint
 */
public class Calculator {
    private Stack<String>    stackVal = new Stack<String>();
    private Stack<Character> stackOpr = new Stack<Character>();
    
    public void displayOpr() {
        /* print out stack of operator */
        System.out.println(""Print operand in Stack"");
        for (Character opr : stackOpr) { System.out.print(opr + "" ""); }
        System.out.println();
    } // end func displayOpr
    
    public void displayVal() {
        /* print out stack of value */
        System.out.println(""Print value in Stack"");
        for (String val : stackVal) { System.out.print(val + "" ""); }
        System.out.println();
    } // end func displayVal
    
    private void cal(){
        /* perform calculation */
        // pop out two value and one operator from the stacks
        Character opr;
        String val01, val02;
        Double res;
        if (stackVal.size() != 0){
            val02 = stackVal.pop();
        } else {
            val02 = null;
        } // end if-else
        
        if (stackVal.size() != 0){
            val01 = stackVal.pop();
        } else {
            val01 = null;
        } // end if-else
        
        if (val01 == null || val02 == null) return;
        opr = stackOpr.pop();
        
        // calculate the result and push into stack of values
        switch(opr) {
            case '+':
                //System.out.println('+');
                res = Double.valueOf(val01) + Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
            case '-':
                //System.out.println('-');
                res = Double.valueOf(val01) - Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
            case '*':
                //System.out.println('*');
                res = Double.valueOf(val01) * Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
            case '/':
                //System.out.println('/');
                res = Double.valueOf(val01) / Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
        } // end switch
    } // end func cal
    
    public Double ans (String e) {
        /* iterate through the input string and perform calculation */
        // http://stackoverflow.com/questions/196830/what-is-the-easiest-best-most-correct-way-to-iterate-through-the-characters-of-a
        
        String  val = """";
        for (int i = 0; i < e.length(); i++){
            // foreach character in input string
            char c = e.charAt(i);
            
            // deal with space and bracket
            //if (c == ' '){ continue; }
            if (c == '('){ continue; }
            if (c == ')'){ 
                // two cases when encounter ')'
                // case 1: '(1+5)'      
                // => push 5 into value stack and perform calculation
                //                      
                // case 2: '(...(...))' sequential right bracket
                // => perform calculation only
                
                // push value if necessary
                if (!val.equals("""")) { 
                    //System.out.println("")"" + val);
                    stackVal.push(val);
                } // end inner if
                
                // perform calculation
                //if (stackOpr.size() != 0){
                //    cal();
                //} // end if
                
                // initialize value
                val = """";
                continue;
            } // end outer if
            
            // deal with operators
            if (c == '+' || c == '-' || c == '*' || c == '/'){
                // two cases when encounter operation
                // case 1: '5+...'      
                // => push 5 into value stack; push operator into oprator stack
                //                      
                // case 2: '...)+' right after right bracket
                // => push operator into oprator stack
                
                // case 1
                if (!val.equals("""")) {
                    stackVal.push(val);
                    //System.out.println(c + val);
                } // end if
                
                // case 1&2
                stackOpr.push(c);
                
                // initialize value
                val = """";
                continue;
            } // end if
            
            // if nothing
            val += c;
            // http://stackoverflow.com/questions/8172420/how-to-convert-a-char-to-a-string-in-java
            
        } // end for loop
        //displayVal();
        //displayOpr();
        if (stackVal.size() != 0){
            return Double.valueOf(stackVal.pop());
        } else {
            return 0.0;
        } // end if-else
    } // end func ans
    
    public static void main(String[] args) {
        Calculator cal = new Calculator();
        System.out.println(cal.ans(""(((1+(12*5))-(3*4))+(4/5))""));
        System.out.println(cal.ans(""(((1+(12*5))-(3*4))+((4/5)))""));
        System.out.println(cal.ans(""((((1+(12*5))-(3*4)))+((4/5)))""));
        System.out.println(cal.ans(""(-9)+8""));
        System.out.println(cal.ans(""()""));
        //System.out.println(Double.valueOf(""1"") == -1.0);
        //System.out.println(Double.valueOf(""-1"") == -1.0);
    } // end main
} // 

@aa3891e7380c7a8fd442811c6907a661@"
"r02b48003","0","0.99","105824","@eca5bf455f619f170093924fb4d53994@
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author clint
 */
public class Calculator {
    private Stack<String>    stackVal = new Stack<String>();
    private Stack<Character> stackOpr = new Stack<Character>();
    
    public void displayOpr() {
        /* print out stack of operator */
        System.out.println(""Print operand in Stack"");
        for (Character opr : stackOpr) { System.out.print(opr + "" ""); }
        System.out.println();
    } // end func displayOpr
    
    public void displayVal() {
        /* print out stack of value */
        System.out.println(""Print value in Stack"");
        for (String val : stackVal) { System.out.print(val + "" ""); }
        System.out.println();
    } // end func displayVal
    
    private void cal(){
        /* perform calculation */
        // pop out two value and one operator from the stacks
        Character opr;
        String val01, val02;
        Double res;
        if (stackVal.size() != 0){
            val02 = stackVal.pop();
        } else {
            val02 = null;
        } // end if-else
        
        if (stackVal.size() != 0){
            val01 = stackVal.pop();
        } else {
            val01 = null;
        } // end if-else
        
        if (val01 == null || val02 == null) return;
        opr = stackOpr.pop();
        
        // calculate the result and push into stack of values
        switch(opr) {
            case '+':
                //System.out.println('+');
                res = Double.valueOf(val01) + Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
            case '-':
                //System.out.println('-');
                res = Double.valueOf(val01) - Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
            case '*':
                //System.out.println('*');
                res = Double.valueOf(val01) * Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
            case '/':
                //System.out.println('/');
                res = Double.valueOf(val01) / Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
        } // end switch
    } // end func cal
    
    public Double ans (String e) {
        /* iterate through the input string and perform calculation */
        // http://stackoverflow.com/questions/196830/what-is-the-easiest-best-most-correct-way-to-iterate-through-the-characters-of-a
        
        String  val = """";
        for (int i = 0; i < e.length(); i++){
            // foreach character in input string
            char c = e.charAt(i);
            
            // deal with space and bracket
            if (c == ' '){ continue; }
            if (c == '('){ continue; }
            if (c == ')'){ 
                // two cases when encounter ')'
                // case 1: '(1+5)'      
                // => push 5 into value stack and perform calculation
                //                      
                // case 2: '(...(...))' sequential right bracket
                // => perform calculation only
                
                // push value if necessary
                if (!val.equals("""")) { 
                    //System.out.println("")"" + val);
                    stackVal.push(val);
                } // end inner if
                
                // perform calculation
                //if (stackOpr.size() != 0){
                //    cal();
                //} // end if
                
                // initialize value
                val = """";
                continue;
            } // end outer if
            
            // deal with operators
            if (c == '+' || c == '-' || c == '*' || c == '/'){
                // two cases when encounter operation
                // case 1: '5+...'      
                // => push 5 into value stack; push operator into oprator stack
                //                      
                // case 2: '...)+' right after right bracket
                // => push operator into oprator stack
                
                // case 1
                if (!val.equals("""")) {
                    stackVal.push(val);
                    //System.out.println(c + val);
                } // end if
                
                // case 1&2
                stackOpr.push(c);
                
                // initialize value
                val = """";
                continue;
            } // end if
            
            // if nothing
            val += c;
            // http://stackoverflow.com/questions/8172420/how-to-convert-a-char-to-a-string-in-java   
        } // end for loop
        //displayVal();
        //displayOpr();
        if (stackVal.size() != 0){
            return Double.valueOf(stackVal.pop());
        } else {
            return 0.0;
        } // end if-else
    } // end func ans
    
    public static void main(String[] args) {
        Calculator cal = new Calculator();
        System.out.println(cal.ans(""(((1+(12*5))-(3*4))+(4/5))""));
        System.out.println(cal.ans(""(((1+(12*5))-(3*4))+((4/5)))""));
        System.out.println(cal.ans(""((((1+(12*5))-(3*4)))+((4/5)))""));
        System.out.println(cal.ans(""(-9)+8""));
        System.out.println(cal.ans(""()""));
        //System.out.println(Double.valueOf(""1"") == -1.0);
        //System.out.println(Double.valueOf(""-1"") == -1.0);
    } // end main
} // 

@eca5bf455f619f170093924fb4d53994@"
"r02b48003","0","0.98","105840","@be69f4e28097b6975945380bd54eb34a@
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author clint
 */
public class Calculator {
    private Stack<String>    stackVal = new Stack<String>();
    private Stack<Character> stackOpr = new Stack<Character>();
    
    public void displayOpr() {
        /* print out stack of operator */
        System.out.println(""Print operand in Stack"");
        for (Character opr : stackOpr) { System.out.print(opr + "" ""); }
        System.out.println();
    } // end func displayOpr
    
    public void displayVal() {
        /* print out stack of value */
        System.out.println(""Print value in Stack"");
        for (String val : stackVal) { System.out.print(val + "" ""); }
        System.out.println();
    } // end func displayVal
    
    private void cal(){
        /* perform calculation */
        // pop out two value and one operator from the stacks
        Character opr;
        String val01, val02;
        Double res;
        return; /*
        if (stackVal.size() != 0){
            val02 = stackVal.pop();
        } else {
            val02 = null;
        } // end if-else
        
        if (stackVal.size() != 0){
            val01 = stackVal.pop();
        } else {
            val01 = null;
        } // end if-else
        
        if (val01 == null || val02 == null) return;
        opr = stackOpr.pop();
        
        // calculate the result and push into stack of values
        switch(opr) {
            case '+':
                //System.out.println('+');
                res = Double.valueOf(val01) + Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
            case '-':
                //System.out.println('-');
                res = Double.valueOf(val01) - Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
            case '*':
                //System.out.println('*');
                res = Double.valueOf(val01) * Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
            case '/':
                //System.out.println('/');
                res = Double.valueOf(val01) / Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
        } // end switch
        */
        
    } // end func cal
    
    public Double ans (String e) {
        /* iterate through the input string and perform calculation */
        // http://stackoverflow.com/questions/196830/what-is-the-easiest-best-most-correct-way-to-iterate-through-the-characters-of-a
        
        String  val = """";
        for (int i = 0; i < e.length(); i++){
            // foreach character in input string
            char c = e.charAt(i);
            
            // deal with space and bracket
            if (c == ' '){ continue; } // 如果不加上這一條，1, 6, 7 test 會當掉
            if (c == '('){ continue; }
            if (c == ')'){ 
                // two cases when encounter ')'
                // case 1: '(1+5)'      
                // => push 5 into value stack and perform calculation
                //                      
                // case 2: '(...(...))' sequential right bracket
                // => perform calculation only
                
                // push value if necessary
                if (!val.equals("""")) { 
                    //System.out.println("")"" + val);
                    stackVal.push(val);
                } // end inner if
                
                // perform calculation
                if (stackOpr.size() != 0){
                    cal();
                } // end if
                
                // initialize value
                val = """";
                continue;
            } // end outer if
            
            // deal with operators
            if (c == '+' || c == '-' || c == '*' || c == '/'){
                // two cases when encounter operation
                // case 1: '5+...'      
                // => push 5 into value stack; push operator into oprator stack
                //                      
                // case 2: '...)+' right after right bracket
                // => push operator into oprator stack
                
                // case 1
                if (!val.equals("""")) {
                    stackVal.push(val);
                    //System.out.println(c + val);
                } // end if
                
                // case 1&2
                stackOpr.push(c);
                
                // initialize value
                val = """";
                continue;
            } // end if
            
            // if nothing
            val += c;
            // http://stackoverflow.com/questions/8172420/how-to-convert-a-char-to-a-string-in-java   
        } // end for loop
        //displayVal();
        //displayOpr();
        if (stackVal.size() != 0){
            return Double.valueOf(stackVal.pop());
        } else {
            return 0.0;
        } // end if-else
    } // end func ans
    
    public static void main(String[] args) {
        Calculator cal = new Calculator();
        System.out.println(cal.ans(""(((1+(12*5))-(3*4))+(4/5))""));
        System.out.println(cal.ans(""(((1+(12*5))-(3*4))+((4/5)))""));
        System.out.println(cal.ans(""((((1+(12*5))-(3*4)))+((4/5)))""));
        System.out.println(cal.ans(""(-9)+8""));
        System.out.println(cal.ans(""()""));
        //System.out.println(Double.valueOf(""1"") == -1.0);
        //System.out.println(Double.valueOf(""-1"") == -1.0);
    } // end main
} // 

@be69f4e28097b6975945380bd54eb34a@"
"r02b48003","0","0.99","105856","@fef53f011552004e0571b9366214c7f9@
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author clint
 */
public class Calculator {
    private Stack<String>    stackVal = new Stack<String>();
    private Stack<Character> stackOpr = new Stack<Character>();
    
    public void displayOpr() {
        /* print out stack of operator */
        System.out.println(""Print operand in Stack"");
        for (Character opr : stackOpr) { System.out.print(opr + "" ""); }
        System.out.println();
    } // end func displayOpr
    
    public void displayVal() {
        /* print out stack of value */
        System.out.println(""Print value in Stack"");
        for (String val : stackVal) { System.out.print(val + "" ""); }
        System.out.println();
    } // end func displayVal
    
    private void cal(){
        /* perform calculation */
        // pop out two value and one operator from the stacks
        Character opr;
        String val01, val02;
        Double res;
        /*
        if (stackVal.size() != 0){
            val02 = stackVal.pop();
        } else {
            val02 = null;
        } // end if-else
        
        if (stackVal.size() != 0){
            val01 = stackVal.pop();
        } else {
            val01 = null;
        } // end if-else
        
        if (val01 == null || val02 == null) return;
        */
        opr = stackOpr.pop();
        val01 = ""10"";
        val02 = ""10"";
        
        // calculate the result and push into stack of values
        switch(opr) {
            case '+':
                //System.out.println('+');
                res = Double.valueOf(val01) + Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
            case '-':
                //System.out.println('-');
                res = Double.valueOf(val01) - Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
            case '*':
                //System.out.println('*');
                res = Double.valueOf(val01) * Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
            case '/':
                //System.out.println('/');
                res = Double.valueOf(val01) / Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
        } // end switch
        //*/
        
    } // end func cal
    
    public Double ans (String e) {
        /* iterate through the input string and perform calculation */
        // http://stackoverflow.com/questions/196830/what-is-the-easiest-best-most-correct-way-to-iterate-through-the-characters-of-a
        
        String  val = """";
        for (int i = 0; i < e.length(); i++){
            // foreach character in input string
            char c = e.charAt(i);
            
            // deal with space and bracket
            if (c == ' '){ continue; } // 如果不加上這一條，1, 6, 7 test 會當掉
            if (c == '('){ continue; }
            if (c == ')'){ 
                // two cases when encounter ')'
                // case 1: '(1+5)'      
                // => push 5 into value stack and perform calculation
                //                      
                // case 2: '(...(...))' sequential right bracket
                // => perform calculation only
                
                // push value if necessary
                if (!val.equals("""")) { 
                    //System.out.println("")"" + val);
                    stackVal.push(val);
                } // end inner if
                
                // perform calculation
                if (stackOpr.size() != 0){
                    cal();
                } // end if
                
                // initialize value
                val = """";
                continue;
            } // end outer if
            
            // deal with operators
            if (c == '+' || c == '-' || c == '*' || c == '/'){
                // two cases when encounter operation
                // case 1: '5+...'      
                // => push 5 into value stack; push operator into oprator stack
                //                      
                // case 2: '...)+' right after right bracket
                // => push operator into oprator stack
                
                // case 1
                if (!val.equals("""")) {
                    stackVal.push(val);
                    //System.out.println(c + val);
                } // end if
                
                // case 1&2
                stackOpr.push(c);
                
                // initialize value
                val = """";
                continue;
            } // end if
            
            // if nothing
            val += c;
            // http://stackoverflow.com/questions/8172420/how-to-convert-a-char-to-a-string-in-java   
        } // end for loop
        //displayVal();
        //displayOpr();
        if (stackVal.size() != 0){
            return Double.valueOf(stackVal.pop());
        } else {
            return 0.0;
        } // end if-else
    } // end func ans
    
    public static void main(String[] args) {
        Calculator cal = new Calculator();
        System.out.println(cal.ans(""(((1+(12*5))-(3*4))+(4/5))""));
        System.out.println(cal.ans(""(((1+(12*5))-(3*4))+((4/5)))""));
        System.out.println(cal.ans(""((((1+(12*5))-(3*4)))+((4/5)))""));
        System.out.println(cal.ans(""(-9)+8""));
        System.out.println(cal.ans(""()""));
        //System.out.println(Double.valueOf(""1"") == -1.0);
        //System.out.println(Double.valueOf(""-1"") == -1.0);
    } // end main
} // 

@fef53f011552004e0571b9366214c7f9@"
"r02b48003","0","0.99","105824","@8a739c5d80efbc457fe29acc4ab02745@
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author clint
 */
public class Calculator {
    private Stack<String>    stackVal = new Stack<String>();
    private Stack<Character> stackOpr = new Stack<Character>();
    
    public void displayOpr() {
        /* print out stack of operator */
        System.out.println(""Print operand in Stack"");
        for (Character opr : stackOpr) { System.out.print(opr + "" ""); }
        System.out.println();
    } // end func displayOpr
    
    public void displayVal() {
        /* print out stack of value */
        System.out.println(""Print value in Stack"");
        for (String val : stackVal) { System.out.print(val + "" ""); }
        System.out.println();
    } // end func displayVal
    
    private void cal(){
        /* perform calculation */
        // pop out two value and one operator from the stacks
        Character opr;
        String val01, val02;
        Double res;
        //*
        if (stackVal.size() != 0){
            val02 = stackVal.pop();
        } else {
            val02 = null;
        } // end if-else
        
        if (stackVal.size() != 0){
            val01 = stackVal.pop();
        } else {
            val01 = null;
        } // end if-else
        
        if (val01 == null || val02 == null) return;
        //*/
        opr = stackOpr.pop();
        val01 = ""10"";
        val02 = ""10"";
        
        // calculate the result and push into stack of values
        switch(opr) {
            case '+':
                //System.out.println('+');
                res = Double.valueOf(val01) + Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
            case '-':
                //System.out.println('-');
                res = Double.valueOf(val01) - Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
            case '*':
                //System.out.println('*');
                res = Double.valueOf(val01) * Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
            case '/':
                //System.out.println('/');
                res = Double.valueOf(val01) / Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
        } // end switch
        //*/
        
    } // end func cal
    
    public Double ans (String e) {
        /* iterate through the input string and perform calculation */
        // http://stackoverflow.com/questions/196830/what-is-the-easiest-best-most-correct-way-to-iterate-through-the-characters-of-a
        
        String  val = """";
        for (int i = 0; i < e.length(); i++){
            // foreach character in input string
            char c = e.charAt(i);
            
            // deal with space and bracket
            if (c == ' '){ continue; } // 如果不加上這一條，1, 6, 7 test 會當掉
            if (c == '('){ continue; }
            if (c == ')'){ 
                // two cases when encounter ')'
                // case 1: '(1+5)'      
                // => push 5 into value stack and perform calculation
                //                      
                // case 2: '(...(...))' sequential right bracket
                // => perform calculation only
                
                // push value if necessary
                if (!val.equals("""")) { 
                    //System.out.println("")"" + val);
                    stackVal.push(val);
                } // end inner if
                
                // perform calculation
                if (stackOpr.size() != 0){
                    cal();
                } // end if
                
                // initialize value
                val = """";
                continue;
            } // end outer if
            
            // deal with operators
            if (c == '+' || c == '-' || c == '*' || c == '/'){
                // two cases when encounter operation
                // case 1: '5+...'      
                // => push 5 into value stack; push operator into oprator stack
                //                      
                // case 2: '...)+' right after right bracket
                // => push operator into oprator stack
                
                // case 1
                if (!val.equals("""")) {
                    stackVal.push(val);
                    //System.out.println(c + val);
                } // end if
                
                // case 1&2
                stackOpr.push(c);
                
                // initialize value
                val = """";
                continue;
            } // end if
            
            // if nothing
            val += c;
            // http://stackoverflow.com/questions/8172420/how-to-convert-a-char-to-a-string-in-java   
        } // end for loop
        //displayVal();
        //displayOpr();
        if (stackVal.size() != 0){
            return Double.valueOf(stackVal.pop());
        } else {
            return 0.0;
        } // end if-else
    } // end func ans
    
    public static void main(String[] args) {
        Calculator cal = new Calculator();
        System.out.println(cal.ans(""(((1+(12*5))-(3*4))+(4/5))""));
        System.out.println(cal.ans(""(((1+(12*5))-(3*4))+((4/5)))""));
        System.out.println(cal.ans(""((((1+(12*5))-(3*4)))+((4/5)))""));
        System.out.println(cal.ans(""(-9)+8""));
        System.out.println(cal.ans(""()""));
        //System.out.println(Double.valueOf(""1"") == -1.0);
        //System.out.println(Double.valueOf(""-1"") == -1.0);
    } // end main
} // 

@8a739c5d80efbc457fe29acc4ab02745@"
"r02b48003","4","0.79","105840","@bcd9603e2a58cd1fcbc86f115d3a72bc@
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author clint
 */
public class Calculator {
    private Stack<String>    stackVal = new Stack<String>();
    private Stack<Character> stackOpr = new Stack<Character>();
    
    public void displayOpr() {
        /* print out stack of operator */
        System.out.println(""Print operand in Stack"");
        for (Character opr : stackOpr) { System.out.print(opr + "" ""); }
        System.out.println();
    } // end func displayOpr
    
    public void displayVal() {
        /* print out stack of value */
        System.out.println(""Print value in Stack"");
        for (String val : stackVal) { System.out.print(val + "" ""); }
        System.out.println();
    } // end func displayVal
    
    private void cal(){
        /* perform calculation */
        // pop out two value and one operator from the stacks
        Character opr;
        String val01, val02;
        Double res;
        //*
        if (stackVal.size() != 0){
            val02 = stackVal.pop();
        } else {
            val02 = null;
        } // end if-else
        
        if (stackVal.size() != 0){
            val01 = stackVal.pop();
        } else {
            val01 = null;
        } // end if-else
        
        if (val01 == null || val02 == null) return;
        //*/
        opr = stackOpr.pop();
        
        // calculate the result and push into stack of values
        switch(opr) {
            case '+':
                //System.out.println('+');
                res = Double.valueOf(val01) + Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
            case '-':
                //System.out.println('-');
                res = Double.valueOf(val01) - Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
            case '*':
                //System.out.println('*');
                res = Double.valueOf(val01) * Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
            case '/':
                //System.out.println('/');
                res = Double.valueOf(val01) / Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
        } // end switch
        //*/
        
    } // end func cal
    
    public Double ans (String e) {
        /* iterate through the input string and perform calculation */
        // http://stackoverflow.com/questions/196830/what-is-the-easiest-best-most-correct-way-to-iterate-through-the-characters-of-a
        
        String  val = """";
        for (int i = 0; i < e.length(); i++){
            // foreach character in input string
            char c = e.charAt(i);
            
            // deal with space and bracket
            if (c == ' '){ continue; } // 如果不加上這一條，1, 6, 7 test 會當掉
            if (c == '('){ continue; }
            if (c == ')'){ 
                // two cases when encounter ')'
                // case 1: '(1+5)'      
                // => push 5 into value stack and perform calculation
                //                      
                // case 2: '(...(...))' sequential right bracket
                // => perform calculation only
                
                // push value if necessary
                if (!val.equals("""")) { 
                    //System.out.println("")"" + val);
                    stackVal.push(val);
                } // end inner if
                
                // perform calculation
                if (stackOpr.size() != 0){
                    cal();
                } // end if
                
                // initialize value
                val = """";
                continue;
            } // end outer if
            
            // deal with operators
            if (c == '+' || c == '-' || c == '*' || c == '/'){
                // two cases when encounter operation
                // case 1: '5+...'      
                // => push 5 into value stack; push operator into oprator stack
                //                      
                // case 2: '...)+' right after right bracket
                // => push operator into oprator stack
                
                // case 1
                if (!val.equals("""")) {
                    stackVal.push(val);
                    //System.out.println(c + val);
                } // end if
                
                // case 1&2
                stackOpr.push(c);
                
                // initialize value
                val = """";
                continue;
            } // end if
            
            // if nothing
            val += c;
            // http://stackoverflow.com/questions/8172420/how-to-convert-a-char-to-a-string-in-java   
        } // end for loop
        //displayVal();
        //displayOpr();
        if (stackVal.size() != 0){
            return Double.valueOf(stackVal.pop());
        } else {
            return 0.0;
        } // end if-else
    } // end func ans
    
    public static void main(String[] args) {
        Calculator cal = new Calculator();
        System.out.println(cal.ans(""(((1+(12*5))-(3*4))+(4/5))""));
        System.out.println(cal.ans(""(((1+(12*5))-(3*4))+((4/5)))""));
        System.out.println(cal.ans(""((((1+(12*5))-(3*4)))+((4/5)))""));
        System.out.println(cal.ans(""(-9)+8""));
        System.out.println(cal.ans(""()""));
        //System.out.println(Double.valueOf(""1"") == -1.0);
        //System.out.println(Double.valueOf(""-1"") == -1.0);
    } // end main
} // 

@bcd9603e2a58cd1fcbc86f115d3a72bc@"
"r02b48003","4","0.78","105840","@e72ae2ced77e1890366205d949164d2d@
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author clint
 */
public class Calculator {
    private Stack<String>    stackVal = new Stack<String>();
    private Stack<Character> stackOpr = new Stack<Character>();
    
    public void displayOpr() {
        /* print out stack of operator */
        System.out.println(""Print operand in Stack"");
        for (Character opr : stackOpr) { System.out.print(opr + "" ""); }
        System.out.println();
    } // end func displayOpr
    
    public void displayVal() {
        /* print out stack of value */
        System.out.println(""Print value in Stack"");
        for (String val : stackVal) { System.out.print(val + "" ""); }
        System.out.println();
    } // end func displayVal
    
    private void cal(){
        /* perform calculation */
        // pop out two value and one operator from the stacks
        Character opr;
        String val01, val02;
        Double res;
        //*
        if (stackVal.size() != 0){
            val02 = stackVal.pop();
        } else {
            val02 = null;
        } // end if-else
        
        if (stackVal.size() != 0){
            val01 = stackVal.pop();
        } else {
            val01 = null;
        } // end if-else
        
        if (val01 == null || val02 == null) return;
        //*/
        opr = stackOpr.pop();
        
        // calculate the result and push into stack of values
        switch(opr) {
            case '+':
                //System.out.println('+');
                res = Double.valueOf(val01) + Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
            case '-':
                //System.out.println('-');
                res = Double.valueOf(val01) - Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
            case '*':
                //System.out.println('*');
                res = Double.valueOf(val01) * Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
            case '/':
                //System.out.println('/');
                if (Double.valueOf(val02) == 0.0) return;
                res = Double.valueOf(val01) / Double.valueOf(val02);
                stackVal.push(String.valueOf(res));
                break;
        } // end switch
        //*/
        
    } // end func cal
    
    public Double ans (String e) {
        /* iterate through the input string and perform calculation */
        // http://stackoverflow.com/questions/196830/what-is-the-easiest-best-most-correct-way-to-iterate-through-the-characters-of-a
        
        String  val = """";
        for (int i = 0; i < e.length(); i++){
            // foreach character in input string
            char c = e.charAt(i);
            
            // deal with space and bracket
            if (c == ' '){ continue; } // 如果不加上這一條，1, 6, 7 test 會當掉
            if (c == '('){ continue; }
            if (c == ')'){ 
                // two cases when encounter ')'
                // case 1: '(1+5)'      
                // => push 5 into value stack and perform calculation
                //                      
                // case 2: '(...(...))' sequential right bracket
                // => perform calculation only
                
                // push value if necessary
                if (!val.equals("""")) { 
                    //System.out.println("")"" + val);
                    stackVal.push(val);
                } // end inner if
                
                // perform calculation
                if (stackOpr.size() != 0){
                    cal();
                } // end if
                
                // initialize value
                val = """";
                continue;
            } // end outer if
            
            // deal with operators
            if (c == '+' || c == '-' || c == '*' || c == '/'){
                // two cases when encounter operation
                // case 1: '5+...'      
                // => push 5 into value stack; push operator into oprator stack
                //                      
                // case 2: '...)+' right after right bracket
                // => push operator into oprator stack
                
                // case 1
                if (!val.equals("""")) {
                    stackVal.push(val);
                    //System.out.println(c + val);
                } // end if
                
                // case 1&2
                stackOpr.push(c);
                
                // initialize value
                val = """";
                continue;
            } // end if
            
            // if nothing
            val += c;
            // http://stackoverflow.com/questions/8172420/how-to-convert-a-char-to-a-string-in-java   
        } // end for loop
        //displayVal();
        //displayOpr();
        if (stackVal.size() != 0){
            return Double.valueOf(stackVal.pop());
        } else {
            return 0.0;
        } // end if-else
    } // end func ans
    
    public static void main(String[] args) {
        Calculator cal = new Calculator();
        System.out.println(cal.ans(""(((1+(12*5))-(3*4))+(4/5))""));
        System.out.println(cal.ans(""(((1+(12*5))-(3*4))+((4/5)))""));
        System.out.println(cal.ans(""((((1+(12*5))-(3*4)))+((4/5)))""));
        System.out.println(cal.ans(""(5/0)""));
        System.out.println(cal.ans(""(-9)+8""));
        System.out.println(cal.ans(""()""));
        //System.out.println(Double.valueOf(""1"") == -1.0);
        //System.out.println(Double.valueOf(""-1"") == -1.0);
    } // end main
} // 

@e72ae2ced77e1890366205d949164d2d@"
"r04522627","10","0.099","105760","@1c259d1726806b94342f14f2711e18c5@import java.io.FileReader;
import java.io.BufferedReader;



public class Calculator {

    public double ans (String e) 
    {
        double ans = 0.0;
        
        String[] data = e.split("" "");
        Stack<String> data_stack = new Stack<String>();
        int n = 0;
        do
        {
            if(data[n].equals("")""))
            {
                
                double p = 0.0,q = 0.0;
                
                q = Double.parseDouble(data_stack.pop());
                String ch = data_stack.pop();       
                p = Double.parseDouble(data_stack.pop());
                if(ch.equals(""+""))
                {
                    ans = p + q; 
                }
                else if(ch.equals(""-""))
                {
                    ans = p - q; 
                }
                else if(ch.equals(""*""))
                {
                    ans = p * q;
                }
                else if(ch.equals(""/""))
                {
                    ans = p / q;
                }
                data_stack.pop();
                data_stack.push(Double.toString(ans));
            }
            else
            {
                data_stack.push(data[n]);
            }
            n++;
        }while(n != data.length);
        
        return ans;
                        
    }
    
    public static void main(String[] args) throws Exception {
    
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
        
            String datastream = br.readLine();
            if(datastream == null) return;
            Calculator cct = new Calculator();
            System.out.printf(Double.toString(cct.ans(datastream)));
        }
        
    }
}
   
    


@1c259d1726806b94342f14f2711e18c5@"
"r04631034","0","0.099","105760","@48eacfda5f9f95ef97e88d25ad6300d6@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author acer
 */
public class Calculator {

          /**
           * @param args the command line arguments
           */
          public static void main(String[] args) {
                    // TODO code application logic here
                    In in = new In(args[0]);
                    String line = in.readLine();
                    Ans ans = new Ans();
                    System.out.println(ans.ans(line));
                    
          }
}

class Ans {

          public Double ans(String s) {
                    String strTemp = """";
                    int index = -1;
                    boolean lastIsNum = false; //前一个字符是否是数字
                    String[] str = new String[s.length()]; // 后缀
                    Stack<String> operationStack = new Stack<String>();
                    Stack<Double> resultStack = new Stack<Double>();
                    for (int i = 0; i < s.length(); i++) {
                              str[i] = """";
                    }
                    for (int i = 0; i < s.length(); i++) {
                              char ch = s.charAt(i);
                              if (ch == ' ') {
                                        continue;
                              }
                              if (ch >= '0' && ch <= '9' || ch == '.') {
                                        if (lastIsNum) {
                                                  str[index] += String.valueOf(ch);
                                        } else {
                                                  str[++index] += String.valueOf(ch);
                                        }
                                        lastIsNum = true;
                              }
                              if (ch == '+' || ch == '-') {
                                        if (i == 0 || s.substring(i - 1, i).equals(""("")) {
                                                  lastIsNum = true;
                                                  str[++index] += String.valueOf(ch);
                                        } else {
                                                  lastIsNum = false;
                                                  while (!operationStack.isEmpty() && !operationStack.peek().equals(""("")) {
                                                            str[++index] += operationStack.pop();
                                                  }
                                                  operationStack.push(String.valueOf(ch));                                                  
                                        }
                              }
                              if (ch == '*' || ch == '/') {
                                        lastIsNum = false;
                                        operationStack.push(String.valueOf(ch));
                              }
                              if (ch == '(') {
                                        lastIsNum = false;
                                        operationStack.push(String.valueOf(ch));
                              }
                              if (ch == ')') {
                                        lastIsNum = false;
                                        while (!operationStack.isEmpty() && !operationStack.peek().equals(""("")) {
                                                  str[++index] += operationStack.pop();
                                        }
                                        operationStack.pop();
                              }
                    }
                    if (!operationStack.isEmpty()) {
                              str[++index] += operationStack.pop();
                    }
// System.out.println(new ArrayList(Arrays.asList(str)));
                    index = -1;
                    try {
                              while (index < s.length() && !str[++index].equals("""")) {
                                        strTemp = str[index];
                                        if (isNum(strTemp)) {
                                                  resultStack.push(Double.valueOf(strTemp));
                                        } else {
                                                  double num2 = resultStack.pop();
                                                  double num1 = resultStack.pop();
                                                  if (strTemp.equals(""+"")) {
                                                            resultStack.push(num1 + num2);
                                                  }
                                                  if (strTemp.equals(""-"")) {
                                                            resultStack.push(num1 - num2);
                                                  }
                                                  if (strTemp.equals(""*"")) {
                                                            resultStack.push(num1 * num2);
                                                  }
                                                  if (strTemp.equals(""/"")) {
                                                            resultStack.push(num1 / num2);
                                                  }
                                        }
                              }
                              
                    } catch (Exception e) {
// e.printStackTrace();
                              System.out.println(""the expression is incorrect"");
                              System.exit(1);
                    }
                    return resultStack.pop();
          }
          
          public static boolean isNum(String str) {
                    return str.matches(""^([+-]?\\d+)(\\.\\d+)?$"");//浮点数 
          }
          
}

@48eacfda5f9f95ef97e88d25ad6300d6@"
"r04631034","0","0.74","105824","@da60c8713a2b0247346c426ef1221ca2@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author acer
 */
public class Calculator {

          /**
           * @param args the command line arguments
           */
          public static void main(String[] args) {
                    // TODO code application logic here
//                    In in = new In(args[0]);
//                    String line = in.readLine();
//                    Ans ans = new Ans();
//                    System.out.println(ans.ans(line));
                    
          }
}

class Ans {

          public Double ans(String s) {
                    String strTemp = """";
                    int index = -1;
                    boolean lastIsNum = false; //前一个字符是否是数字
                    String[] str = new String[s.length()]; // 后缀
                    Stack<String> operationStack = new Stack<String>();
                    Stack<Double> resultStack = new Stack<Double>();
                    for (int i = 0; i < s.length(); i++) {
                              str[i] = """";
                    }
                    for (int i = 0; i < s.length(); i++) {
                              char ch = s.charAt(i);
                              if (ch == ' ') {
                                        continue;
                              }
                              if (ch >= '0' && ch <= '9' || ch == '.') {
                                        if (lastIsNum) {
                                                  str[index] += String.valueOf(ch);
                                        } else {
                                                  str[++index] += String.valueOf(ch);
                                        }
                                        lastIsNum = true;
                              }
                              if (ch == '+' || ch == '-') {
                                        if (i == 0 || s.substring(i - 1, i).equals(""("")) {
                                                  lastIsNum = true;
                                                  str[++index] += String.valueOf(ch);
                                        } else {
                                                  lastIsNum = false;
                                                  while (!operationStack.isEmpty() && !operationStack.peek().equals(""("")) {
                                                            str[++index] += operationStack.pop();
                                                  }
                                                  operationStack.push(String.valueOf(ch));                                                  
                                        }
                              }
                              if (ch == '*' || ch == '/') {
                                        lastIsNum = false;
                                        operationStack.push(String.valueOf(ch));
                              }
                              if (ch == '(') {
                                        lastIsNum = false;
                                        operationStack.push(String.valueOf(ch));
                              }
                              if (ch == ')') {
                                        lastIsNum = false;
                                        while (!operationStack.isEmpty() && !operationStack.peek().equals(""("")) {
                                                  str[++index] += operationStack.pop();
                                        }
                                        operationStack.pop();
                              }
                    }
                    if (!operationStack.isEmpty()) {
                              str[++index] += operationStack.pop();
                    }
// System.out.println(new ArrayList(Arrays.asList(str)));
                    index = -1;
                    try {
                              while (index < s.length() && !str[++index].equals("""")) {
                                        strTemp = str[index];
                                        if (isNum(strTemp)) {
                                                  resultStack.push(Double.valueOf(strTemp));
                                        } else {
                                                  double num2 = resultStack.pop();
                                                  double num1 = resultStack.pop();
                                                  if (strTemp.equals(""+"")) {
                                                            resultStack.push(num1 + num2);
                                                  }
                                                  if (strTemp.equals(""-"")) {
                                                            resultStack.push(num1 - num2);
                                                  }
                                                  if (strTemp.equals(""*"")) {
                                                            resultStack.push(num1 * num2);
                                                  }
                                                  if (strTemp.equals(""/"")) {
                                                            resultStack.push(num1 / num2);
                                                  }
                                        }
                              }
                              
                    } catch (Exception e) {
// e.printStackTrace();
                              System.out.println(""the expression is incorrect"");
                              System.exit(1);
                    }
                    return resultStack.pop();
          }
          
          public static boolean isNum(String str) {
                    return str.matches(""^([+-]?\\d+)(\\.\\d+)?$"");//浮点数 
          }
          
}

@da60c8713a2b0247346c426ef1221ca2@"
"r04631034","3","0.49","105808","@48a8ea7d3927e2b4762d7ca4f2400f6c@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author acer
 */
public class Calculator {

          public Double ans(String s) {
                    String strTemp = """";
                    int index = -1;
                    boolean lastIsNum = false; //前一个字符是否是数字
                    String[] str = new String[s.length()]; // 后缀
                    Stack<String> operationStack = new Stack<String>();
                    Stack<Double> resultStack = new Stack<Double>();
                    for (int i = 0; i < s.length(); i++) {
                              str[i] = """";
                    }
                    for (int i = 0; i < s.length(); i++) {
                              char ch = s.charAt(i);
                              if (ch == ' ') {
                                        continue;
                              }
                              if (ch >= '0' && ch <= '9' || ch == '.') {
                                        if (lastIsNum) {
                                                  str[index] += String.valueOf(ch);
                                        } else {
                                                  str[++index] += String.valueOf(ch);
                                        }
                                        lastIsNum = true;
                              }
                              if (ch == '+' || ch == '-') {
                                        if (i == 0 || s.substring(i - 1, i).equals(""("")) {
                                                  lastIsNum = true;
                                                  str[++index] += String.valueOf(ch);
                                        } else {
                                                  lastIsNum = false;
                                                  while (!operationStack.isEmpty() && !operationStack.peek().equals(""("")) {
                                                            str[++index] += operationStack.pop();
                                                  }
                                                  operationStack.push(String.valueOf(ch));
                                        }
                              }
                              if (ch == '*' || ch == '/') {
                                        lastIsNum = false;
                                        operationStack.push(String.valueOf(ch));
                              }
                              if (ch == '(') {
                                        lastIsNum = false;
                                        operationStack.push(String.valueOf(ch));
                              }
                              if (ch == ')') {
                                        lastIsNum = false;
                                        while (!operationStack.isEmpty() && !operationStack.peek().equals(""("")) {
                                                  str[++index] += operationStack.pop();
                                        }
                                        operationStack.pop();
                              }
                    }
                    if (!operationStack.isEmpty()) {
                              str[++index] += operationStack.pop();
                    }
// System.out.println(new ArrayList(Arrays.asList(str)));
                    index = -1;
                    try {
                              while (index < s.length() && !str[++index].equals("""")) {
                                        strTemp = str[index];
                                        if (isNum(strTemp)) {
                                                  resultStack.push(Double.valueOf(strTemp));
                                        } else {
                                                  double num2 = resultStack.pop();
                                                  double num1 = resultStack.pop();
                                                  if (strTemp.equals(""+"")) {
                                                            resultStack.push(num1 + num2);
                                                  }
                                                  if (strTemp.equals(""-"")) {
                                                            resultStack.push(num1 - num2);
                                                  }
                                                  if (strTemp.equals(""*"")) {
                                                            resultStack.push(num1 * num2);
                                                  }
                                                  if (strTemp.equals(""/"")) {
                                                            resultStack.push(num1 / num2);
                                                  }
                                        }
                              }

                    } catch (Exception e) {
// e.printStackTrace();
                              System.out.println(""the expression is incorrect"");
                              System.exit(1);
                    }
                    return resultStack.pop();
          }

          public static boolean isNum(String str) {
                    return str.matches(""^([+-]?\\d+)(\\.\\d+)?$"");//浮点数 
          }

          /**
           * @param args the command line arguments
           */
          public static void main(String[] args) {
                    // TODO code application logic here
//                    In in = new In(args[0]);
//                    String line = in.readLine();
//                    ;

          }

}

@48a8ea7d3927e2b4762d7ca4f2400f6c@"
"r04631034","0","0","0","@1921d57928b7078971abb2d76b84c233@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author acer
 */
public class Calculator {

          public Double ans(String s) {
                    String strTemp = """";
                    int index = -1;
//                    boolean lastIsNum = false; //前一个字符是否是数字
                    String[] str = new String[s.length()]; // 后缀
                    Stack<String> operationStack = new Stack<String>();
                    Stack<Double> resultStack = new Stack<Double>();
                    for (int i = 0; i < s.length(); i++) {
                              str[i] = """";
                    }
                    for (int i = 0; i < s.length(); i++) {
                              char ch = s.charAt(i);
                              if (ch == ' ') {
                                        continue;
                              }
//                              if (ch >= '0' && ch <= '9' || ch == '.') {
//                                        if (lastIsNum) {
//                                                  str[index] += String.valueOf(ch);
//                                        } else {
//                                                  str[++index] += String.valueOf(ch);
//                                        }
//                                        lastIsNum = true;
//                              }
                              if (ch == '+' || ch == '-') {
                                        if (i == 0 || s.substring(i - 1, i).equals(""("")) {
//                                                  lastIsNum = true;
                                                  str[++index] += String.valueOf(ch);
                                        } else {
//                                                  lastIsNum = false;
                                                  while (!operationStack.isEmpty() && !operationStack.peek().equals(""("")) {
                                                            str[++index] += operationStack.pop();
                                                  }
                                                  operationStack.push(String.valueOf(ch));
                                        }
                              }
                              if (ch == '*' || ch == '/') {
//                                        lastIsNum = false;
                                        operationStack.push(String.valueOf(ch));
                              }
                              if (ch == '(') {
//                                        lastIsNum = false;
                                        operationStack.push(String.valueOf(ch));
                              }
                              if (ch == ')') {
//                                        lastIsNum = false;
                                        while (!operationStack.isEmpty() && !operationStack.peek().equals(""("")) {
                                                  str[++index] += operationStack.pop();
                                        }
                                        operationStack.pop();
                              }
                    }
                    if (!operationStack.isEmpty()) {
                              str[++index] += operationStack.pop();
                    }
// System.out.println(new ArrayList(Arrays.asList(str)));
                    index = -1;
                    try {
                              while (index < s.length() && !str[++index].equals("""")) {
                                        strTemp = str[index];
//                                        if (isNum(strTemp)) {
//                                                  resultStack.push(Double.valueOf(strTemp));
//                                        } else {
                                                  double num2 = resultStack.pop();
                                                  double num1 = resultStack.pop();
                                                  if (strTemp.equals(""+"")) {
                                                            resultStack.push(num1 + num2);
                                                  }
                                                  if (strTemp.equals(""-"")) {
                                                            resultStack.push(num1 - num2);
                                                  }
                                                  if (strTemp.equals(""*"")) {
                                                            resultStack.push(num1 * num2);
                                                  }
                                                  if (strTemp.equals(""/"")) {
                                                            resultStack.push(num1 / num2);
                                                  }
//                                        }
                              }

                    } catch (Exception e) {
// e.printStackTrace();
                              System.out.println(""the expression is incorrect"");
                              System.exit(1);
                    }
                    return resultStack.pop();
          }

//          public static boolean isNum(String str) {
//                    return str.matches(""^([+-]?\\d+)(\\.\\d+)?$"");//浮点数 
//          }

          /**
           * @param args the command line arguments
           */
          public static void main(String[] args) {
                    // TODO code application logic here
//                    In in = new In(args[0]);
//                    String line = in.readLine();
//                    ans(line);
//                 
          }

}

@1921d57928b7078971abb2d76b84c233@"
"b01b01039","0","0.89","105872","@654ce3dc725270962c49385abff35c89@import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Scanner;

public class Calculator {
	private Double ans;
	private String[] equation;
	private Stack<Double> num;
	private Stack<String> operator;
	
	public Calculator(){
		ans = 0.0;
		//equation = eq.split("" "");
		num = new Stack<Double>();
		operator = new Stack<String>();
	}
	
	private void add(){
		operator.pop();
		if(num.size() > 1){
			Double num_1 = num.pop();
			Double num_2 = num.pop();
			System.out.printf(""%f + %f = %f\n"",num_1,num_2,num_1 + num_2);
			num.push( num_1 + num_2 );
		}
	}
	
	private void mul(){
		operator.pop();
		//System.out.printf(""%f x %f = %f\n"",num_1,num_2,num_1 * num_2);
		if(num.size() > 1){
			Double num_1 = num.pop();
			Double num_2 = num.pop();
			System.out.printf(""%f x %f = %f\n"",num_1,num_2,num_1 * num_2);
			num.push( num_1 * num_2 );
		}
	}
	
	private void fin(){
		// add all numbers
		while(!operator.isEmpty() && !num.isEmpty()){
			add();
		}
		ans = num.pop();
	}
	
	private void check(Double n){
		if(!operator.isEmpty()){
			String o = operator.peek();
			if(o.equals(""-"")){ // n -> -n, - -> +
				System.out.println(""push -n "" + -n);
				num.push(-n);
				operator.pop();
				operator.push(""+"");
			}else if(o.equals(""/"")){ // n -> 1/n, / -> *
				System.out.println(""push 1/n "" + 1/n);
				num.push(1.0/n);
				operator.pop();
				operator.push(""*"");
			}else{
				System.out.println(""push "" + n);
				num.push(n);
			}
			o = operator.peek();
			while(o.equals(""*"")){
				mul();
				if(operator.isEmpty())break;
				o = operator.peek();
				//System.out.println(o);
			}
		}else{
			System.out.println(""push "" + n);
			num.push(n);
		}
			
		/*System.out.printf(""Stack :"");
		for(String k : operator){
			System.out.printf(""%s "", k);
		}
		System.out.println();*/
	}
	
	private void arrange(){
		for(String s : equation){
			//System.out.println(s);
			if(s.matches(""[0-9]+"") || s.matches(""[0-9]+.[0-9]+"")){
				Double n;
				try{
					n = Double.parseDouble(s);
				}catch(Exception ex){
					n = new Double(Integer.parseInt(s));
				}
				check(n);
			}else if(s.matches(""[*+-/]"")){
				System.out.println(""push "" + s);
				operator.push(s);
			}else if(s.equals("")"")){
				while(!operator.peek().equals(""e"")){
					add();
				}
				operator.pop();
				check(num.pop());			
			}else if(s.equals(""("")){
				operator.push(""e"");
			}else{
				continue;
				//System.out.println(""Uknown input : "" + s +""."");
			} 
		}
		fin();
	}
	
	public Double ans (String e) {
		equation = e.split("" "");
		arrange();
		return ans;
	}
	
	public static void main(String[] args){
		// read equation
		String eq = new String();
		if(args.length == 0){
			Scanner scanner = new Scanner(System.in);
			System.out.printf(""Input equation :"");
			eq = scanner.nextLine();
		}else{
			eq = args[0];
		}
		Calculator Cal = new Calculator();
		System.out.println(Cal.ans(eq));
	}	
}
@654ce3dc725270962c49385abff35c89@"
"b01b01039","4","0.83","105824","@afb8c433eeb3221795d3a88dc9484b10@import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Scanner;

public class Calculator {
	private Double ans;
	private String[] equation;
	private Stack<Double> num;
	private Stack<String> operator;
	
	public Calculator(){
		ans = 0.0;
		//equation = eq.split("" "");
		num = new Stack<Double>();
		operator = new Stack<String>();
	}
	
	private void add(){
		operator.pop();
		if(num.size() > 1){
			Double num_1 = num.pop();
			Double num_2 = num.pop();
			//System.out.printf(""%f + %f = %f\n"",num_1,num_2,num_1 + num_2);
			num.push( num_1 + num_2 );
		}
	}
	
	private void mul(){
		operator.pop();
		//System.out.printf(""%f x %f = %f\n"",num_1,num_2,num_1 * num_2);
		if(num.size() > 1){
			Double num_1 = num.pop();
			Double num_2 = num.pop();
			//System.out.printf(""%f x %f = %f\n"",num_1,num_2,num_1 * num_2);
			num.push( num_1 * num_2 );
		}
	}
	
	private void fin(){
		// add all numbers
		while(!operator.isEmpty() && !num.isEmpty()){
			add();
		}
		ans = num.pop();
	}
	
	private void check(Double n){
		if(!operator.isEmpty()){
			String o = operator.peek();
			if(o.equals(""-"")){ // n -> -n, - -> +
				//System.out.println(""push -n "" + -n);
				num.push(-n);
				operator.pop();
				operator.push(""+"");
			}else if(o.equals(""/"")){ // n -> 1/n, / -> *
				//System.out.println(""push 1/n "" + 1/n);
				num.push(1.0/n);
				operator.pop();
				operator.push(""*"");
			}else{
				//System.out.println(""push "" + n);
				num.push(n);
			}
			o = operator.peek();
			while(o.equals(""*"")){
				mul();
				if(operator.isEmpty())break;
				o = operator.peek();
				//System.out.println(o);
			}
		}else{
			//System.out.println(""push "" + n);
			num.push(n);
		}
			
		/*System.out.printf(""Stack :"");
		for(String k : operator){
			System.out.printf(""%s "", k);
		}
		System.out.println();*/
	}
	
	private void arrange(){
		for(String s : equation){
			//System.out.println(s);
			if(s.matches(""[0-9]+"") || s.matches(""[0-9]+.[0-9]+"")){
				Double n;
				try{
					n = Double.parseDouble(s);
				}catch(Exception ex){
					n = new Double(Integer.parseInt(s));
				}
				check(n);
			}else if(s.matches(""[*+-/]"")){
				//System.out.println(""push "" + s);
				operator.push(s);
			}else if(s.equals("")"")){
				while(!operator.peek().equals(""e"")){
					add();
				}
				operator.pop();
				check(num.pop());			
			}else if(s.equals(""("")){
				operator.push(""e"");
			}else{
				continue;
				//System.out.println(""Uknown input : "" + s +""."");
			} 
		}
		fin();
	}
	
	public Double ans (String e) {
		equation = e.split("" "");
		arrange();
		return ans;
	}
	
	public static void main(String[] args){
		// read equation
		String eq = new String();
		if(args.length == 0){
			Scanner scanner = new Scanner(System.in);
			System.out.printf(""Input equation :"");
			eq = scanner.nextLine();
		}else{
			eq = args[0];
		}
		Calculator Cal = new Calculator();
		System.out.println(Cal.ans(eq));
	}	
}
@afb8c433eeb3221795d3a88dc9484b10@"
"r04945008","0","0","0","@ec155ed3e9598e21624f358a8dea5e8a@public class Calculator {
    public Double ans (String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();

        String s = e;
        if (s.equals(""(""))                 ;
        else if (s.equals("" ""))            ;
        else if (s.equals(""+"")) ops.push(s);
        else if (s.equals(""-"")) ops.push(s);
        else if (s.equals(""*"")) ops.push(s);
        else if (s.equals(""/"")) ops.push(s);
        else if (s.equals("")"")){
            String op = ops.pop();
            if (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
            else if (op.equals(""-"")) vals.push(vals.pop() - vals.pop());
            else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
            else if (op.equals(""/"")) vals.push(vals.pop() / vals.pop());
        }
        else vals.push(Double.parseDouble(s));
          return vals.pop();
    }    
    public static void main(String[] args) {
//        Stack<String> ops = new Stack<String>();
//        Stack<Double> vals = new Stack<Double>();
//        while (!StdIn.isEmpty()) {
//        String s = StdIn.readString();
//        if (s.equals(""(""))                 ;
//        else if (s.equals(""+"")) ops.push(s);
//        else if (s.equals(""-"")) ops.push(s);
//        else if (s.equals(""*"")) ops.push(s);
//        else if (s.equals(""/"")) ops.push(s);
//        else if (s.equals("")"")){
//            String op = ops.pop();
//            if (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
//            else if (op.equals(""-"")) vals.push(vals.pop() - vals.pop());
//            else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
//            else if (op.equals(""/"")) vals.push(vals.pop() / vals.pop());
//        }
//        else vals.push(Double.parseDouble(s));
//        }
//        StdOut.println(vals.pop());   
    }
}

@ec155ed3e9598e21624f358a8dea5e8a@"
"r04945008","10","0.097","105808","@61428501425027572439f46a5cae92ed@import java.io.FileReader;
import java.io.BufferedReader;

public class Calculator {
    public Double ans (String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String[] s = e.split("" "");
        for(int i = 0; i < s.length; i++) {
        if (s[i].equals(""(""))                    ;
        else if (s[i].equals(""+"")) ops.push(s[i]);
        else if (s[i].equals(""-"")) ops.push(s[i]);
        else if (s[i].equals(""*"")) ops.push(s[i]);
        else if (s[i].equals(""/"")) ops.push(s[i]);
        else if (s[i].equals("")"")){
            String op = ops.pop();
            double v = vals.pop();
            if (op.equals(""+""))      v = vals.pop() + v;
            else if (op.equals(""-"")) v = vals.pop() - v;
            else if (op.equals(""*"")) v = vals.pop() * v;
            else if (op.equals(""/"")) v = vals.pop() / v;
            vals.push(v);
        }
        else vals.push(Double.parseDouble(s[i]));
        }
          return vals.pop();
    }    
//    public static void main(String[] args) throws Exception {
//        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
//            String data = br.readLine();
//            String[] s = data.split("" "");
//            for(int i = 0; i < s.length; i++) {
//                System.out.println(s[i]);
//            }
//            Calculator cct = new Calculator();
//            System.out.printf(""%.0f\n"",cct.ans(data));
//        }
//    }
}

@61428501425027572439f46a5cae92ed@"
"b01703032","10","0.096","105536","@bb1f2fb47fbe0d5913f1bf3b053f2a9c@import java.util.Stack;


public class Calculator {

    public Double ans(String e){
        Stack<String> ops = new Stack<>();
        Stack<Double> vals = new Stack<>();
        String[] input = e.split(""\\s"");
        for(String s:input){
            if (s.equals(""("")) ;
            else if (s.equals(""+"")) ops.push(s);
            else if (s.equals(""-"")) ops.push(s);
            else if (s.equals(""*"")) ops.push(s);
            else if (s.equals(""/"")) ops.push(s);
            else if (s.equals("")""))
            {
                String op = ops.pop();
                if (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
                else if (op.equals(""-"")) vals.push(-vals.pop() + vals.pop());
                else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
                else if (op.equals(""/"")) vals.push(1/vals.pop()*vals.pop());
            }
            else vals.push(Double.parseDouble(s));
        }
        return vals.pop();
    }
}
@bb1f2fb47fbe0d5913f1bf3b053f2a9c@"
"b01b01039","4","0.8","110224","@9ef98b4f1f9bd75088068cb87b2357b2@import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Scanner;

public class Calculator {
	private Double ans;
	private String[] equation;
	private Stack<Double> num;
	private Stack<String> operator;
	private int left;
	
	public Calculator(){
		left = 0;
		ans = 0.0;
		//equation = eq.split("" "");
		num = new Stack<Double>();
		operator = new Stack<String>();
	}
	
	private void add(){
		operator.pop();
		if(num.size() > 1){
			Double num_1 = num.pop();
			Double num_2 = num.pop();
			//System.out.printf(""%f + %f = %f\n"",num_1,num_2,num_1 + num_2);
			num.push( num_1 + num_2 );
		}
	}
	
	private void mul(){
		operator.pop();
		//System.out.printf(""%f x %f = %f\n"",num_1,num_2,num_1 * num_2);
		if(num.size() > 1){
			Double num_1 = num.pop();
			Double num_2 = num.pop();
			//System.out.printf(""%f x %f = %f\n"",num_1,num_2,num_1 * num_2);
			num.push( num_1 * num_2 );
		}
	}
	
	private void print_stack(){
		System.out.printf(""     operator :"");
		for(String s : operator){
			System.out.printf(""%2s "", s);
		}
		System.out.printf(""\n     number :"");
		for(Double d : num){
			System.out.print(d);
			System.out.printf("" "");
		}
		System.out.println();
	}
	
	private void fin(){
		// add all numbers
		while(!operator.isEmpty() && !num.isEmpty()){
			//print_stack();
			add();
		}
		ans = num.pop();
	}
	
	private void check(Double n){
		//print_stack();
		if(!operator.isEmpty()){
			String o = operator.peek();
			if(o.equals(""-"")){ // n -> -n, - -> +
				//System.out.println(""push -n "" + -n);
				num.push(-n);
				operator.pop();
				operator.push(""+"");
			}else if(o.equals(""/"")){ // n -> 1/n, / -> *
				//System.out.println(""push 1/n "" + 1/n);
				num.push(1.0/n);
				operator.pop();
				operator.push(""*"");
			}else{
				//System.out.println(""push "" + n);
				num.push(n);
			}
			o = operator.peek();
			while(o.equals(""*"")){
				mul();
				if(operator.isEmpty())break;
				o = operator.peek();
				//System.out.println(o);
			}
		}else{
			//System.out.println(""push "" + n);
			num.push(n);
		}
			
		/*System.out.printf(""Stack :"");
		for(String k : operator){
			System.out.printf(""%s "", k);
		}
		System.out.println();*/
	}
	
	private void arrange(){
		for(String s : equation){
			//System.out.println(s);
			if(s.matches(""[0-9]+"") || s.matches(""[0-9]+.[0-9]+"")){
				Double n;
				try{
					n = Double.parseDouble(s);
				}catch(Exception ex){
					n = new Double(Integer.parseInt(s));
				}
				check(n);
			}else if(s.matches(""[*+-/]"")){
				//System.out.println(""push "" + s);
				operator.push(s);
			}else if(s.equals("")"")){
				//System.out.println(""push "" + s);
				while(!operator.peek().equals(""e"")){
					//System.out.println(operator.peek());
					add();
				}
				operator.pop();
				left--;
				if(num.size() == operator.size()-left){
					num.push(-num.pop());
					operator.pop();
					//System.out.println(num.size()-operator.size()==1);
				}
				check(num.pop());	
			}else if(s.equals(""("")){
				//System.out.println(""push "" + s);
				operator.push(""e"");
				left++;
			}else{
				continue;
				//System.out.println(""Uknown input : "" + s +""."");
			} 
		}
		fin();
	}
	
	public Double ans (String e) {
		equation = e.split("" "");
		arrange();
		return ans;
	}
	
	public static void main(String[] args){
		// read equation
		String eq = new String();
		if(args.length == 0){
			Scanner scanner = new Scanner(System.in);
			//System.out.printf(""Input equation :"");
			eq = scanner.nextLine();
		}else{
			eq = args[0];
		}
		Calculator Cal = new Calculator();
		System.out.println(Cal.ans(eq));
	}	
}
@9ef98b4f1f9bd75088068cb87b2357b2@"
"b01b01039","4","0.81","110224","@7b100a3a99d70db1f01ab1cf4d64d2d5@import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Scanner;

public class Calculator {
	private Double ans;
	private String[] equation;
	private Stack<Double> num;
	private Stack<String> operator;
	private int left;
	
	public Calculator(){
		left = 0;
		ans = 0.0;
		//equation = eq.split("" "");
		num = new Stack<Double>();
		operator = new Stack<String>();
	}
	
	private void add(){
		operator.pop();
		if(num.size() > 1){
			Double num_1 = num.pop();
			Double num_2 = num.pop();
			//System.out.printf(""%f + %f = %f\n"",num_1,num_2,num_1 + num_2);
			num.push( num_1 + num_2 );
		}
	}
	
	private void mul(){
		operator.pop();
		//System.out.printf(""%f x %f = %f\n"",num_1,num_2,num_1 * num_2);
		if(num.size() > 1){
			Double num_1 = num.pop();
			Double num_2 = num.pop();
			//System.out.printf(""%f x %f = %f\n"",num_1,num_2,num_1 * num_2);
			num.push( num_1 * num_2 );
		}
	}
	
	private void print_stack(){
		System.out.printf(""     operator :"");
		for(String s : operator){
			System.out.printf(""%2s "", s);
		}
		System.out.printf(""\n     number :"");
		for(Double d : num){
			System.out.print(d);
			System.out.printf("" "");
		}
		System.out.println();
	}
	
	private void fin(){
		// add all numbers
		while(!operator.isEmpty() && !num.isEmpty()){
			//print_stack();
			add();
		}
		ans = num.pop();
	}
	
	private void check(Double n){
		//print_stack();
		if(!operator.isEmpty()){
			String o = operator.peek();
			if(o.equals(""-"")){ // n -> -n, - -> +
				//System.out.println(""push -n "" + -n);
				num.push(-n);
				operator.pop();
				operator.push(""+"");
			}else if(o.equals(""/"")){ // n -> 1/n, / -> *
				//System.out.println(""push 1/n "" + 1/n);
				num.push(1.0/n);
				operator.pop();
				operator.push(""*"");
			}else{
				//System.out.println(""push "" + n);
				num.push(n);
			}
			o = operator.peek();
			while(o.equals(""*"")){
				mul();
				if(operator.isEmpty())break;
				o = operator.peek();
				//System.out.println(o);
			}
		}else{
			//System.out.println(""push "" + n);
			num.push(n);
		}
			
		/*System.out.printf(""Stack :"");
		for(String k : operator){
			System.out.printf(""%s "", k);
		}
		System.out.println();*/
	}
	
	private void arrange(){
		if(equation[0].equals(""-"") || equation[0].equals(""+"")){
			left++;
		}
		for(String s : equation){
			//System.out.println(s);
			if(s.matches(""[0-9]+"") || s.matches(""[0-9]+.[0-9]+"")){
				Double n;
				try{
					n = Double.parseDouble(s);
				}catch(Exception ex){
					n = new Double(Integer.parseInt(s));
				}
				check(n);
			}else if(s.matches(""[*+-/]"")){
				//System.out.println(""push "" + s);
				operator.push(s);
			}else if(s.equals("")"")){
				//System.out.println(""push "" + s);
				while(!operator.peek().equals(""e"")){
					//System.out.println(operator.peek());
					add();
				}
				operator.pop();
				left--;
				if(num.size() == operator.size()-left){
					num.push(-num.pop());
					operator.pop();
					//System.out.println(num.size()-operator.size()==1);
				}
				check(num.pop());	
			}else if(s.equals(""("")){
				//System.out.println(""push "" + s);
				operator.push(""e"");
				left++;
			}else{
				continue;
				//System.out.println(""Uknown input : "" + s +""."");
			} 
		}
		fin();
	}
	
	public Double ans (String e) {
		equation = e.split("" "");
		arrange();
		return ans;
	}
	
	public static void main(String[] args){
		// read equation
		String eq = new String();
		if(args.length == 0){
			Scanner scanner = new Scanner(System.in);
			//System.out.printf(""Input equation :"");
			eq = scanner.nextLine();
		}else{
			eq = args[0];
		}
		Calculator Cal = new Calculator();
		System.out.println(Cal.ans(eq));
	}	
}
@7b100a3a99d70db1f01ab1cf4d64d2d5@"
"r04631034","0","1.41","181600","@2addfd9d3ee49eaca3386508ca230f77@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.*;
import static java.lang.System.out;

/**
 *
 * @author user
 */
public class Calculator {

     private static int priority(char c) {
          return c == '+' || c == '-' ? 1 : c == '*' || c == '/' ? 2 : 0;
     }

     private static String toPostfix(String infix, boolean isPost) {
          String expr = isPost
                  ? infix : new StringBuffer(infix).reverse().toString();
          LinkedList<Character> stack = new LinkedList<>();
          StringBuilder output = new StringBuilder();
          char toStack = isPost ? '(' : ')';
          char toOutput = isPost ? ')' : '(';
          for (char c : expr.toCharArray()) {
               if (c == toStack) {
                    stack.add(c);
               } else if (""+-*/"".indexOf(c) != -1) {
                    while (!stack.isEmpty()
                            && priority(stack.getLast()) >= priority(c)) {
                         output.append(stack.removeLast());
                    }
                    stack.add(c);
               } else if (c == toOutput) {
                    while (stack.getLast() != toStack) {
                         output.append(stack.removeLast());
                    }
                    stack.removeLast();
               } else {
                    output.append(c);
               }
          }

          while (!stack.isEmpty()) {
               output.append(stack.removeLast());
          }

          return isPost ? output.toString() : output.reverse().toString();
     }

     public static String toPostfix(String infix) {
          return toPostfix(infix, true);
     }

     public static String toPrefix(String infix) {
          return toPostfix(infix, false);
     }

     public static void compute(String str)//將後置式進行運算
     {
          Stack s = new Stack();
          String[] data =new String[str.replace("" "","""").length()]; 
          
          int j=0;
          String pattern ="""";
          /////////////
          for(int i = 0; i<toPostfix(str).trim().split("" "").length;i++){
//               System.out.println(i+"" ""+data[i]);
               if(toPostfix(str).trim().split("" "")[i].equals(pattern)==false){
                    data[j]=toPostfix(str).trim().split("" "")[i];
//                    System.out.print(""check ""+data[j]+"" target ""+toPostfix(str).trim().split("" "")[i]);
//                    System.out.println("""");
                    j++;
               }
                    
          }
////////////////          
          String ans = """";
          for (int i = 0; i < data.length; i++)//讀出後置式的各個運算元運算子來做計算
          {
               if (data[i] == null) {
                    break;
               }
//是運算子時
               if (data[i].equals(""+"") || data[i].equals(""-"") || data[i].equals(""*"") || data[i].equals(""/"") || data[i].equals(""^"")) {
                    double b = Double.parseDouble(s.pop().toString());//提出前面兩個儲存的值計算
                    double a = Double.parseDouble(s.pop().toString());
                    
                    
                    if (data[i].equals(""+"")) {
                         s.push((a + b));
                    } else if (data[i].equals(""-"")) {
                         s.push((a - b));
                    } else if (data[i].equals(""*"")) {
                         s.push( (a * b));
                    } else if (data[i].equals(""/"")) {
                         s.push((double)(a / b));
                    } else if (data[i].equals(""^"")) {
                         s.push((double) (Math.pow(a, b)));
                    }
               } else if(data[i] !="" "")
               {
                    s.push(data[i]);
               }

          }
          System.out.println(s.pop());
     }

     /**
      * @param args the command line arguments
      */
     public static void main(String[] args) {
          // TODO code application logic here
//          In in = new In(args[0]);
//          String line = in.readLine();
//
//          String infix = ""(a+b)*(c+d)"";
//          out.println(toPostfix(line));
//          compute(line);
          
     }

}

@2addfd9d3ee49eaca3386508ca230f77@"
"r04631034","0","1.41","181600","@954b96341feaea57fc62ba8b5492d157@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.*;
import static java.lang.System.out;

/**
 *
 * @author user
 */
public class Calculator {

     private static int priority(char c) {
          return c == '+' || c == '-' ? 1 : c == '*' || c == '/' ? 2 : 0;
     }

     private static String toPostfix(String infix, boolean isPost) {
          String expr = isPost
                  ? infix : new StringBuffer(infix).reverse().toString();
          LinkedList<Character> stack = new LinkedList<>();
          StringBuilder output = new StringBuilder();
          char toStack = isPost ? '(' : ')';
          char toOutput = isPost ? ')' : '(';
          for (char c : expr.toCharArray()) {
               if (c == toStack) {
                    stack.add(c);
               } else if (""+-*/"".indexOf(c) != -1) {
                    while (!stack.isEmpty()
                            && priority(stack.getLast()) >= priority(c)) {
                         output.append(stack.removeLast());
                    }
                    stack.add(c);
               } else if (c == toOutput) {
                    while (stack.getLast() != toStack) {
                         output.append(stack.removeLast());
                    }
                    stack.removeLast();
               } else {
                    output.append(c);
               }
          }

          while (!stack.isEmpty()) {
               output.append(stack.removeLast());
          }

          return isPost ? output.toString() : output.reverse().toString();
     }

     public static String toPostfix(String infix) {
          return toPostfix(infix, true);
     }

     public static String toPrefix(String infix) {
          return toPostfix(infix, false);
     }

     public static void ans(String str)//將後置式進行運算
     {
          Stack s = new Stack();
          String[] data =new String[str.replace("" "","""").length()]; 
          
          int j=0;
          String pattern ="""";
          /////////////
          for(int i = 0; i<toPostfix(str).trim().split("" "").length;i++){
//               System.out.println(i+"" ""+data[i]);
               if(toPostfix(str).trim().split("" "")[i].equals(pattern)==false){
                    data[j]=toPostfix(str).trim().split("" "")[i];
//                    System.out.print(""check ""+data[j]+"" target ""+toPostfix(str).trim().split("" "")[i]);
//                    System.out.println("""");
                    j++;
               }
                    
          }
////////////////          
          String ans = """";
          for (int i = 0; i < data.length; i++)//讀出後置式的各個運算元運算子來做計算
          {
               if (data[i] == null) {
                    break;
               }
//是運算子時
               if (data[i].equals(""+"") || data[i].equals(""-"") || data[i].equals(""*"") || data[i].equals(""/"") || data[i].equals(""^"")) {
                    double b = Double.parseDouble(s.pop().toString());//提出前面兩個儲存的值計算
                    double a = Double.parseDouble(s.pop().toString());
                    
                    
                    if (data[i].equals(""+"")) {
                         s.push((a + b));
                    } else if (data[i].equals(""-"")) {
                         s.push((a - b));
                    } else if (data[i].equals(""*"")) {
                         s.push( (a * b));
                    } else if (data[i].equals(""/"")) {
                         s.push((double)(a / b));
                    } else if (data[i].equals(""^"")) {
                         s.push((double) (Math.pow(a, b)));
                    }
               } else if(data[i] !="" "")
               {
                    s.push(data[i]);
               }

          }
          System.out.println(s.pop());
     }

     /**
      * @param args the command line arguments
      */
     public static void main(String[] args) {
          // TODO code application logic here
//          In in = new In(args[0]);
//          String line = in.readLine();
//
//          String infix = ""(a+b)*(c+d)"";
//          out.println(toPostfix(line));
//          compute(line);
          
     }

}

@954b96341feaea57fc62ba8b5492d157@"
"r04631034","4","0.43","116896","@97568db42968e5593df0f9cd09a0f4e2@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.util.*;
import static java.lang.System.out;

/**
 *
 * @author user
 */
public class Calculator {

     private static int priority(char c) {
          return c == '+' || c == '-' ? 1 : c == '*' || c == '/' ? 2 : 0;
     }

     private static String toPostfix(String infix, boolean isPost) {
          String expr = isPost
                  ? infix : new StringBuffer(infix).reverse().toString();
          LinkedList<Character> stack = new LinkedList<>();
          StringBuilder output = new StringBuilder();
          char toStack = isPost ? '(' : ')';
          char toOutput = isPost ? ')' : '(';
          for (char c : expr.toCharArray()) {
               if (c == toStack) {
                    stack.add(c);
               } else if (""+-*/"".indexOf(c) != -1) {
                    while (!stack.isEmpty()
                            && priority(stack.getLast()) >= priority(c)) {
                         output.append(stack.removeLast());
                    }
                    stack.add(c);
               } else if (c == toOutput) {
                    while (stack.getLast() != toStack) {
                         output.append(stack.removeLast());
                    }
                    stack.removeLast();
               } else {
                    output.append(c);
               }
          }

          while (!stack.isEmpty()) {
               output.append(stack.removeLast());
          }

          return isPost ? output.toString() : output.reverse().toString();
     }

     public static String toPostfix(String infix) {
          return toPostfix(infix, true);
     }

     public static String toPrefix(String infix) {
          return toPostfix(infix, false);
     }

     public  static Double  ans(String str)//將後置式進行運算
     {
          Stack s = new Stack();
          String[] data =new String[str.replace("" "","""").length()]; 
          
          int j=0;
          String pattern ="""";
          /////////////
          for(int i = 0; i<toPostfix(str).trim().split("" "").length;i++){
//               System.out.println(i+"" ""+data[i]);
               if(toPostfix(str).trim().split("" "")[i].equals(pattern)==false){
                    data[j]=toPostfix(str).trim().split("" "")[i];
//                    System.out.print(""check ""+data[j]+"" target ""+toPostfix(str).trim().split("" "")[i]);
//                    System.out.println("""");
                    j++;
               }
                    
          }
////////////////          
          String ans = """";
          for (int i = 0; i < data.length; i++)//讀出後置式的各個運算元運算子來做計算
          {
               if (data[i] == null) {
                    break;
               }
//是運算子時
               if (data[i].equals(""+"") || data[i].equals(""-"") || data[i].equals(""*"") || data[i].equals(""/"") || data[i].equals(""^"")) {
                    double b = Double.parseDouble(s.pop().toString());//提出前面兩個儲存的值計算
                    double a = Double.parseDouble(s.pop().toString());
                    
                    
                    if (data[i].equals(""+"")) {
                         s.push((a + b));
                    } else if (data[i].equals(""-"")) {
                         s.push((a - b));
                    } else if (data[i].equals(""*"")) {
                         s.push( (a * b));
                    } else if (data[i].equals(""/"")) {
                         s.push((double)(a / b));
                    } else if (data[i].equals(""^"")) {
                         s.push((double) (Math.pow(a, b)));
                    }
               } else if(data[i] !="" "")
               {
                    s.push(data[i]);
               }

          }
          return(Double.parseDouble(s.pop().toString()));
     }

     /**
      * @param args the command line arguments
      */
     public static void main(String[] args) {
          // TODO code application logic here
//          In in = new In(args[0]);
//          String line = in.readLine();
////
//          String infix = ""(a+b)*(c+d)"";
//          out.println(toPostfix(line));
//          System.out.println(ans(line));
//          
     }

}

@97568db42968e5593df0f9cd09a0f4e2@"
"r04631039","0","0.139","180864","@43b090f8d0a392e7e871bba2f7195685@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package calculator;

//import edu.princeton.cs.algs4.StdIn;
//import edu.princeton.cs.algs4.StdOut;
//import edu.princeton.cs.algs4.Stack;

/**
 *
 * @author Eric
 */
public class Calculator {
    public Calculator(){
    first = null;
    }
    private Node first;
    private int[] a;
    private class Node{
    String item;
    Node next;
    }
    
    public boolean isEmpty()
    {return first==null;}
    
    public void push(String item){
        Node oldfirst=first;
        first=new Node();
        first.item=item;
        first.next=oldfirst;
    }
    
    public String pop(){
        String item=first.item;
        first=first.next;
        return item;
    }
    
//    private static Object stack;
//    public static void main(String[] args) {
    public Double ans (String e) {
//        String e = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"";
        String[] equation = e.split("" "");  //Split string by space
//        Stack stk = new Stack();
        for (int i=0;i<equation.length;i++){
            if (equation[i].equals("")"")){
                String temp1 , temp2, temp3, temp4;
                double temp = 0;
                temp1 = (String) pop();
                temp2 = (String) pop();
                temp3 = (String) pop();
                temp4 = (String) pop();
                // do the operation
                if (temp2.equals(""+""))
                    temp = Double.parseDouble(temp3) + Double.parseDouble(temp1);
                else if (temp2.equals(""-""))
                    temp = Double.parseDouble(temp3) - Double.parseDouble(temp1);
                else if (temp2.equals(""*""))
                    temp = Double.parseDouble(temp3) * Double.parseDouble(temp1);
                else if (temp2.equals(""/""))
                    temp = Double.parseDouble(temp3) / Double.parseDouble(temp1);
                push(String.valueOf(temp));
//                System.out.println(pop());
            }
            else
                push(equation[i]);
            
        }
//        double an = 0;
//        an = Double.parseDouble(stk.pop());
        return Double.parseDouble(pop());
//        System.out.println(pop());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        //String e = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"";
        
        //System.out.println(ans(e));
    }
    
}

@43b090f8d0a392e7e871bba2f7195685@"
"r04631039","10","0.1","105520","@b826793cc280a8d9718074ec4cffc45d@public class Calculator {
    public Calculator(){
    first = null;
    }
    private Node first;
    private int[] a;
    private class Node{
    String item;
    Node next;
    }
    
    public boolean isEmpty()
    {return first==null;}
    
    public void push(String item){
        Node oldfirst=first;
        first=new Node();
        first.item=item;
        first.next=oldfirst;
    }
    
    public String pop(){
        String item=first.item;
        first=first.next;
        return item;
    }
    
//    private static Object stack;
    public Double ans (String e) {
        String[] equation = e.split("" "");  //Split string by space
//        Stack stk = new Stack();
        for (int i=0;i<equation.length;i++){
            if (equation[i].equals("")"")){
                String temp1 , temp2, temp3, temp4;
                double temp = 0;
                temp1 = (String) pop();
                temp2 = (String) pop();
                temp3 = (String) pop();
                temp4 = (String) pop();
                // do the operation
                if (temp2.equals(""+""))
                    temp = Double.parseDouble(temp3) + Double.parseDouble(temp1);
                else if (temp2.equals(""-""))
                    temp = Double.parseDouble(temp3) - Double.parseDouble(temp1);
                else if (temp2.equals(""*""))
                    temp = Double.parseDouble(temp3) * Double.parseDouble(temp1);
                else if (temp2.equals(""/""))
                    temp = Double.parseDouble(temp3) / Double.parseDouble(temp1);
                push(String.valueOf(temp));
            }
            else
                push(equation[i]);
        }
        return Double.parseDouble(pop());
    }
}
@b826793cc280a8d9718074ec4cffc45d@"
"b01b01039","4","0.85","110032","@6e62da6b897f30967ff57a338a0d8d3f@

import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Scanner;

public class Calculator {
	private Double ans;
	private String[] equation;
	private Stack<Double> num;
	private Stack<String> operator;
	private boolean tag;
	
	public Calculator(){
		ans = 0.0;
		tag = false;
		//equation = eq.split("" "");
		num = new Stack<Double>();
		operator = new Stack<String>();
	}
	
	private void add(){
		operator.pop();
		if(num.size() > 1){
			Double num_1 = num.pop();
			Double num_2 = num.pop();
			//System.out.printf(""%f + %f = %f\n"",num_1,num_2,num_1 + num_2);
			num.push( num_1 + num_2 );
		}
	}
	
	private void mul(){
		operator.pop();
		//System.out.printf(""%f x %f = %f\n"",num_1,num_2,num_1 * num_2);
		if(num.size() > 1){
			Double num_1 = num.pop();
			Double num_2 = num.pop();
			//System.out.printf(""%f x %f = %f\n"",num_1,num_2,num_1 * num_2);
			num.push( num_1 * num_2 );
		}
	}
	
	private void print_stack(){
		System.out.printf(""     operator :"");
		for(String s : operator){
			System.out.printf(""%2s "", s);
		}
		System.out.printf(""\n     number :"");
		for(Double d : num){
			System.out.print(d);
			System.out.printf("" "");
		}
		System.out.println();
	}
	
	private void fin(){
		// add all numbers
		while(!operator.isEmpty() && !num.isEmpty()){
			//print_stack();
			add();
		}
		ans = num.pop();
	}
	
	private void check(Double n){
		//print_stack();
		if(!operator.isEmpty()){
			String o = operator.peek();
			if(o.equals(""-"")){ // n -> -n, - -> +
				//System.out.println(""push -n "" + -n);
				num.push(-n);
				operator.pop();
				operator.push(""+"");
			}else if(o.equals(""/"")){ // n -> 1/n, / -> *
				//System.out.println(""push 1/n "" + 1/n);
				num.push(1.0/n);
				operator.pop();
				operator.push(""*"");
			}else if(o.equals(""b"")){
				System.out.println(""B"");
				num.push(-1.0/n);
				operator.pop();
				operator.push(""+"");
			}else{
				//System.out.println(""push "" + n);
				num.push(n);
			}
			o = operator.peek();
			while(o.equals(""*"")){
				mul();
				if(operator.isEmpty())break;
				o = operator.peek();
				//System.out.println(o);
			}
		}else{
			//System.out.println(""push "" + n);
			num.push(n);
		}
			
		/*System.out.printf(""Stack :"");
		for(String k : operator){
			System.out.printf(""%s "", k);
		}
		System.out.println();*/
	}
	
	private void arrange(){
		for(String s : equation){
			//System.out.println(s);
			if(s.matches(""[0-9]+"") || s.matches(""[0-9]+.[0-9]+"")){
				Double n;
				try{
					n = Double.parseDouble(s);
				}catch(Exception ex){
					n = new Double(Integer.parseInt(s));
				}
				tag = false;
				check(n);
			}else if(s.matches(""[*+-/]"")){
				//System.out.println(""push "" + s);
				if(s.equals(""/""))tag = true;
				if(s.equals(""-"") && tag){
					operator.push(""b"");
					tag = false;
				}else{
					tag = false;
					operator.push(s);
				}
			}else if(s.equals("")"")){
				tag = false;
				//System.out.println(""push "" + s);
				while(!operator.peek().equals(""e"")){
					//System.out.println(operator.peek());
					add();
				}
				operator.pop();
				check(num.pop());	
			}else if(s.equals(""("")){
				//System.out.println(""push "" + s);
				operator.push(""e"");
				tag = false;
			}else{
				continue;
				//System.out.println(""Uknown input : "" + s +""."");
			} 
		}
		fin();
	}
	
	public Double ans (String e) {
		equation = e.split("" "");
		arrange();
		return ans;
	}
	
	public static void main(String[] args){
		// read equation
		String eq = new String();
		if(args.length == 0){
			Scanner scanner = new Scanner(System.in);
			//System.out.printf(""Input equation :"");
			eq = scanner.nextLine();
		}else{
			eq = args[0];
		}
		Calculator Cal = new Calculator();
		System.out.println(Cal.ans(eq));
	}	
}


@6e62da6b897f30967ff57a338a0d8d3f@"
"b02611002","10","0.097","105488","@6e4ac70d3c90db929db0e5f3a758291c@import java.util.Stack;

public class Calculator {

    public static void main(String[] args){

        // nwe一個Calculator的instance
        Calculator cct = new Calculator();

        // main()呼叫ans()函示
//        System.out.printf(""\nAnswer:%f."",cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )""));
        cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"");
    }

    public static Double ans(String e) {

        String[] bottom = e.split("" "");
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        vals.push(999.0);

        int i = 0;
        double num = -1.0;
        int length = bottom.length;

        while (i<length){

            switch (bottom[i]){
                case ""("":
                    break;
                case ""+"":
                    ops.push(bottom[i]);
                    break;
                case ""-"":
                    ops.push(bottom[i]);
                    break;
                case ""*"":
                    ops.push(bottom[i]);
                    break;
                case ""/"":
                    ops.push(bottom[i]);
                    break;
                case "")"":
                    String op = ops.pop();
                    if      (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
                    else if (op.equals(""-"")) vals.push(-(vals.pop() - vals.pop()));
                    else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
                    else if (op.equals(""/"")) vals.push((1/vals.pop()) * vals.pop());
                    break;
                default:
                    vals.push(Double.parseDouble(bottom[i]));
            }
//            System.out.printf(""\n[NOW DOING [%s]][NOW VALUE [%f]]"",bottom[i], vals.peek());
            i++;
        }
        return vals.pop();
    }
}

@6e4ac70d3c90db929db0e5f3a758291c@"
"b03106003","10","0.099","105808","@eba1905b587c44bc7b0aa815257ca63a@import java.util.NoSuchElementException;

/**
 *
 * @author Sophia
 */
public class Calculator {
    private double answer;
    private Stack<String> st;
    private Stack<String> op;
    Calculator(){
        st = new Stack<String>();
        op = new Stack<String>();
    }
    private void Do(){
        try{
        double right = Double.parseDouble(st.pop());
        double left = Double.parseDouble(st.pop());
        //System.out.println(right);
        //System.out.println(left);
        String s = op.pop();
        switch(s){
            case ""+"":
                    st.push(String.valueOf(left + right));
                    break;
                case ""-"":
                    st.push(String.valueOf(left - right));
                    break;
                case ""*"":
                    st.push(String.valueOf(left * right));
                    break;
                case ""/"":
                    st.push(String.valueOf(left / right));
                    break;
                default: 
                    //System.out.println(s);
        }
        //System.out.println(st.peek());
        op.pop();
        }catch(NoSuchElementException ex){
        
        }
    } 

    
    
    public Double ans(String e){
        String data[] = e.split("" "");
        for(int i = 0; i<data.length; i++){
            switch(data[i]){
                case ""/0"":
                    break;
                case ""+"":
                    op.push(data[i]);
                    break;
                case ""-"":
                    op.push(data[i]);
                    break;
                case ""*"":
                    op.push(data[i]);
                    break;
                case ""/"":
                    op.push(data[i]);
                    break;
                case ""("":
                    op.push(data[i]);
                    break;
                case "")"":
                        Do();
                    break;
                default:
                        st.push(data[i]);
            } 
        }
    answer = Double.parseDouble(st.pop());
    return answer;
    }

}
@eba1905b587c44bc7b0aa815257ca63a@"
"b01b01039","4","0.8","106944","@db43378a3249d24bbd320c665e6f0330@

import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Scanner;

public class Calculator {
	private Double ans;
	private String[] equation;
	private Stack<Double> num;
	private Stack<String> operator;
	private boolean tag;
	private int fst;
	
	public Calculator(){
		ans = 0.0;
		fst = 0;
		tag = false;
		//equation = eq.split("" "");
		num = new Stack<Double>();
		operator = new Stack<String>();
	}
	
	private void add(){
		operator.pop();
		if(num.size() > 1){
			Double num_1 = num.pop();
			Double num_2 = num.pop();
			//System.out.printf(""%f + %f = %f\n"",num_1,num_2,num_1 + num_2);
			num.push( num_1 + num_2 );
		}
	}
	
	private void mul(){
		operator.pop();
		//System.out.printf(""%f x %f = %f\n"",num_1,num_2,num_1 * num_2);
		if(num.size() > 1){
			Double num_1 = num.pop();
			Double num_2 = num.pop();
			//System.out.printf(""%f x %f = %f\n"",num_1,num_2,num_1 * num_2);
			num.push( num_1 * num_2 );
		}
	}
	
	private void print_stack(){
		System.out.printf(""     operator :"");
		for(String s : operator){
			System.out.printf(""%2s "", s);
		}
		System.out.printf(""\n     number :"");
		for(Double d : num){
			System.out.print(d);
			System.out.printf("" "");
		}
		System.out.println();
	}
	
	private void fin(){
		// add all numbers
		while(!operator.isEmpty() && !num.isEmpty()){
			//print_stack();
			add();
		}
		ans = num.pop();
	}
	
	private void check(Double n){
		//print_stack();
		if(!operator.isEmpty()){
			String o = operator.peek();
			if(o.equals(""-"")){ // n -> -n, - -> +
				//System.out.println(""push -n "" + -n);
				num.push(-n);
				operator.pop();
				operator.push(""+"");
			}else if(o.equals(""/"")){ // n -> 1/n, / -> *
				//System.out.println(""push 1/n "" + 1/n);
				num.push(1.0/n);
				operator.pop();
				operator.push(""*"");
			}else if(o.equals(""b"")){
				//print_stack();
				//System.out.println(""B"");
				num.push(-num.pop()/n);
				operator.pop();
				operator.push(""+"");
			}else{
				//System.out.println(""push "" + n);
				num.push(n);
			}
			o = operator.peek();
			while(o.equals(""*"")){
				mul();
				if(operator.isEmpty())break;
				o = operator.peek();
				//System.out.println(o);
			}
		}else{
			//System.out.println(""push "" + n);
			num.push(n);
		}
	}
	
	private void first_num(Double n){
		operator.pop();
		num.push(-n);
	}
	
	private void arrange(){
		for(String s : equation){
			//print_stack();
			if(s.matches(""[0-9]+"") || s.matches(""[0-9]+.[0-9]+"")){
				tag = false;
				Double n;
				try{
					n = Double.parseDouble(s);
				}catch(Exception ex){
					n = new Double(Integer.parseInt(s));
				}
				if(fst == 2){
					first_num(n);
				}else{
					fst = 0;
					check(n);
				}
			}else if(s.matches(""[*+-/]"")){
				//System.out.println(""push "" + s);
				if(fst == 1){
					fst = 2;
				}else{
					fst = 0;
				}
				if(s.equals(""/""))tag = true;
				if(s.equals(""-"") && tag){
					operator.pop();
					operator.push(""b"");
					tag = false;
				}else{
					operator.push(s);
				}
			}else if(s.equals("")"")){
				tag = false;
				//System.out.println(""push "" + s);
				while(!operator.peek().equals(""e"")){
					add();
				}
				operator.pop();
				check(num.pop());	
			}else if(s.equals(""("")){
				//System.out.println(""push "" + s);
				tag = false;
				fst = 1;
				operator.push(""e"");
			}else{
				continue;
				//System.out.println(""Uknown input : "" + s +""."");
			} 
		}
		//System.out.printf(""Fin"");
		fin();
	}
	
	public Double ans (String e) {
		equation = e.split("" "");
		arrange();
		return ans;
	}
	
	public static void main(String[] args){
		// read equation
		String eq = new String();
		if(args.length == 0){
			Scanner scanner = new Scanner(System.in);
			//System.out.printf(""Input equation :"");
			eq = scanner.nextLine();
		}else{
			eq = args[0];
		}
		Calculator Cal = new Calculator();
		System.out.println(Cal.ans(eq));
	}	
}


@db43378a3249d24bbd320c665e6f0330@"
"b01b01039","4","0.83","110272","@2b66e2d24d9769262ee55843edc18dfb@

import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Scanner;

public class Calculator {
	private Double ans;
	private String[] equation;
	private Stack<Double> num;
	private Stack<String> operator;
	private boolean tag;
	private int fst;
	
	public Calculator(){
		ans = 0.0;
		fst = 0;
		tag = false;
		//equation = eq.split("" "");
		num = new Stack<Double>();
		operator = new Stack<String>();
	}
	
	private void add(){
		operator.pop();
		if(num.size() > 1){
			Double num_1 = num.pop();
			Double num_2 = num.pop();
			//System.out.printf(""%f + %f = %f\n"",num_1,num_2,num_1 + num_2);
			num.push( num_1 + num_2 );
		}
	}
	
	private void mul(){
		operator.pop();
		//System.out.printf(""%f x %f = %f\n"",num_1,num_2,num_1 * num_2);
		if(num.size() > 1){
			Double num_1 = num.pop();
			Double num_2 = num.pop();
			//System.out.printf(""%f x %f = %f\n"",num_1,num_2,num_1 * num_2);
			num.push( num_1 * num_2 );
		}
	}
	
	private void print_stack(){
		System.out.printf(""     operator :"");
		for(String s : operator){
			System.out.printf(""%2s "", s);
		}
		System.out.printf(""\n     number :"");
		for(Double d : num){
			System.out.print(d);
			System.out.printf("" "");
		}
		System.out.println();
	}
	
	private void fin(){
		// add all numbers
		while(!operator.isEmpty() && !num.isEmpty()){
			//print_stack();
			add();
		}
		ans = num.pop();
	}
	
	private void check(Double n){
		//print_stack();
		if(!operator.isEmpty()){
			String o = operator.peek();
			if(o.equals(""-"")){ // n -> -n, - -> +
				//System.out.println(""push -n "" + -n);
				num.push(-n);
				operator.pop();
				operator.push(""+"");
			}else if(o.equals(""/"")){ // n -> 1/n, / -> *
				//System.out.println(""push 1/n "" + 1/n);
				num.push(1.0/n);
				operator.pop();
				operator.push(""*"");
			}else if(o.equals(""b"")){
				//print_stack();
				//System.out.println(""B"");
				num.push(-num.pop()/n);
				operator.pop();
				operator.push(""+"");
			}else{
				//System.out.println(""push "" + n);
				num.push(n);
			}
			o = operator.peek();
			while(o.equals(""*"")){
				mul();
				if(operator.isEmpty())break;
				o = operator.peek();
				//System.out.println(o);
			}
		}else{
			//System.out.println(""push "" + n);
			num.push(n);
		}
	}
	
	private void first_num(Double n){
		String o = operator.pop();
		if(o.equals(""+"")){
			num.push(n);
		}else{
			num.push(-n);
		}
	}
	
	private void arrange(){
		for(String s : equation){
			//print_stack();
			if(s.matches(""[0-9]+"") || s.matches(""[0-9]+.[0-9]+"")){
				tag = false;
				Double n;
				try{
					n = Double.parseDouble(s);
				}catch(Exception ex){
					n = new Double(Integer.parseInt(s));
				}
				if(fst == 2){
					first_num(n);
				}else{
					fst = 0;
					check(n);
				}
			}else if(s.matches(""[*+-/]"")){
				//System.out.println(""push "" + s);
				if(fst == 1){
					fst = 2;
				}else{
					fst = 0;
				}
				if(s.equals(""/""))tag = true;
				if(s.equals(""-"") && tag){
					operator.pop();
					operator.push(""b"");
					tag = false;
				}else{
					operator.push(s);
				}
			}else if(s.equals("")"")){
				tag = false;
				//System.out.println(""push "" + s);
				while(!operator.peek().equals(""e"")){
					add();
				}
				operator.pop();
				check(num.pop());	
			}else if(s.equals(""("")){
				//System.out.println(""push "" + s);
				tag = false;
				fst = 1;
				operator.push(""e"");
			}else{
				continue;
				//System.out.println(""Uknown input : "" + s +""."");
			} 
		}
		//System.out.printf(""Fin"");
		fin();
	}
	
	public Double ans (String e) {
		equation = e.split("" "");
		arrange();
		return ans;
	}
	
	public static void main(String[] args){
		// read equation
		String eq = new String();
		if(args.length == 0){
			Scanner scanner = new Scanner(System.in);
			//System.out.printf(""Input equation :"");
			eq = scanner.nextLine();
		}else{
			eq = args[0];
		}
		Calculator Cal = new Calculator();
		System.out.println(Cal.ans(eq));
	}	
}


@2b66e2d24d9769262ee55843edc18dfb@"
"r03631015","0","0","0","@36f861f358b3ff928966cf2e37ab8383@
import java.io.BufferedReader;
import java.io.FileReader;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author wayne17
 */
public class Calculator {
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws Exception {
        // read file from args[0] in Java 7 style
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        Calculator fk = new Calculator();
        fk.ans(br.readLine());
          
    }
    public Double ans (String e) {
        // please replace the following null to the answer you calculated.
        
//        System.out.printf(e);
        String[] input = e.split("" "");
        int size = input.length;
//        System.out.printf(e.replace(""("", """").replace("")"","""").replaceAll("" "",""""));
        String[] num = e.replace(""("", """").replace("")"","""").replaceAll("" "","""").split(""\\D+"");
        String[] operator = e.replace(""("", """").replace("")"","""").replaceFirst(""\\d+"","""").replaceAll("" "","""").split(""\\d+"");
        boolean[] num_used = new boolean[num.length];
        int[] layer = new int[operator.length];
        boolean[] op_used = new boolean[operator.length];
        int layer_num = 0;
        int position = 0;
        int Max_layer = 0;
        String[] remove_num = e.replaceAll(""\\d+"","""").split("" "");
        for (String unit:remove_num){
            if (unit.equals(""("")){
                layer_num++;
                if (Max_layer < layer_num){
                    Max_layer = layer_num;
                }
            }
            else if (unit.equals("")"")){
                layer_num--;
            }
            else if (unit.equals(""*"") || unit.equals(""/"") || unit.equals(""+"") || unit.equals(""-"")) {
                layer[position] = layer_num;
//                System.out.print(layer[position]);
                position++;
            }
//            System.out.printf(""[%s,%d]"",unit,layer_num);
        }
//        System.out.print(operator.length);
        
        double tmp =0;
        //from max layer to min layer
        for (int lay = Max_layer; lay>=0;lay--){
            // x,/
            for (int op =0; op <operator.length;op++ ){
                if (layer[op] == lay && op_used[op]==false){
                    if (operator[op].equals(""*"") || operator[op].equals(""/"")){
                        for (int search=op+1;search<num.length;search++){
                            if(num_used[search] ==false){
                                if(operator[op].equals(""*"") ){
                                    num[search] = String.valueOf(Double.parseDouble(num[op])*Double.parseDouble(num[search]));
                                    num_used[op]=true;
                                    break;
                                }
                                else if (operator[op].equals(""/"")){
                                    num[search] = String.valueOf(Double.parseDouble(num[op])/Double.parseDouble(num[search]));
                                    num_used[op]=true;
                                    break;
                                }
                            }
                        }
                        op_used[op]=true;
                    }
                }
            }
            //+,-
            for (int op =0; op <operator.length;op++ ){
                if (layer[op] == lay && op_used[op]==false){
                    if (operator[op].equals(""+"") || operator[op].equals(""-"")){
                        for (int search=op+1;search<num.length;search++){
                            if(num_used[search] ==false){
                                if(operator[op].equals(""+"") ){
                                    num[search] = String.valueOf(Double.parseDouble(num[op])+Double.parseDouble(num[search]));
                                    num_used[op]=true;
                                    break;
                                }
                                else if (operator[op].equals(""-"")){
                                    num[search] = String.valueOf(Double.parseDouble(num[op])-Double.parseDouble(num[search]));
                                    num_used[op]=true;
                                    break;
                                }
                            }
                        }
                        op_used[op]=true;
                    }
                }
            }
        }
        System.out.printf(num[num.length-1]);
//        System.out.print(num.length);
//        for (int i:layer){
//        System.out.printf(""%d,"",Integer.parseInt(i));
//            System.out.printf(""%d,"",i);
//        }
        return null;
    }

}

@36f861f358b3ff928966cf2e37ab8383@"
"r03631015","0","0","0","@842108be66fd4a1658ca639a9d7e752c@import java.io.BufferedReader;
import java.io.FileReader;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author wayne17
 */
public class Calculator {
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws Exception {
        
          
    }
    public Double ans (String e) {
        // please replace the following null to the answer you calculated.
        
//        System.out.printf(e);
        String[] input = e.split("" "");
        int size = input.length;
//        System.out.printf(e.replace(""("", """").replace("")"","""").replaceAll("" "",""""));
        String[] num = e.replace(""("", """").replace("")"","""").replaceAll("" "","""").split(""\\D+"");
        String[] operator = e.replace(""("", """").replace("")"","""").replaceFirst(""\\d+"","""").replaceAll("" "","""").split(""\\d+"");
        boolean[] num_used = new boolean[num.length];
        int[] layer = new int[operator.length];
        boolean[] op_used = new boolean[operator.length];
        int layer_num = 0;
        int position = 0;
        int Max_layer = 0;
        String[] remove_num = e.replaceAll(""\\d+"","""").split("" "");
        for (String unit:remove_num){
            if (unit.equals(""("")){
                layer_num++;
                if (Max_layer < layer_num){
                    Max_layer = layer_num;
                }
            }
            else if (unit.equals("")"")){
                layer_num--;
            }
            else if (unit.equals(""*"") || unit.equals(""/"") || unit.equals(""+"") || unit.equals(""-"")) {
                layer[position] = layer_num;
//                System.out.print(layer[position]);
                position++;
            }
//            System.out.printf(""[%s,%d]"",unit,layer_num);
        }
//        System.out.print(operator.length);
        
        double tmp =0;
        //from max layer to min layer
        for (int lay = Max_layer; lay>=0;lay--){
            // x,/
            for (int op =0; op <operator.length;op++ ){
                if (layer[op] == lay && op_used[op]==false){
                    if (operator[op].equals(""*"") || operator[op].equals(""/"")){
                        for (int search=op+1;search<num.length;search++){
                            if(num_used[search] ==false){
                                if(operator[op].equals(""*"") ){
                                    num[search] = String.valueOf(Double.parseDouble(num[op])*Double.parseDouble(num[search]));
                                    num_used[op]=true;
                                    break;
                                }
                                else if (operator[op].equals(""/"")){
                                    num[search] = String.valueOf(Double.parseDouble(num[op])/Double.parseDouble(num[search]));
                                    num_used[op]=true;
                                    break;
                                }
                            }
                        }
                        op_used[op]=true;
                    }
                }
            }
            //+,-
            for (int op =0; op <operator.length;op++ ){
                if (layer[op] == lay && op_used[op]==false){
                    if (operator[op].equals(""+"") || operator[op].equals(""-"")){
                        for (int search=op+1;search<num.length;search++){
                            if(num_used[search] ==false){
                                if(operator[op].equals(""+"") ){
                                    num[search] = String.valueOf(Double.parseDouble(num[op])+Double.parseDouble(num[search]));
                                    num_used[op]=true;
                                    break;
                                }
                                else if (operator[op].equals(""-"")){
                                    num[search] = String.valueOf(Double.parseDouble(num[op])-Double.parseDouble(num[search]));
                                    num_used[op]=true;
                                    break;
                                }
                            }
                        }
                        op_used[op]=true;
                    }
                }
            }
        }
        System.out.printf(num[num.length-1]);
//        System.out.print(num.length);
//        for (int i:layer){
//        System.out.printf(""%d,"",Integer.parseInt(i));
//            System.out.printf(""%d,"",i);
//        }
        return null;
    }

}

@842108be66fd4a1658ca639a9d7e752c@"
"r03631015","1","1.01","107072","@e25d8a9dd79af68dc54b37d5c3928fd3@
import java.io.BufferedReader;
import java.io.FileReader;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author wayne17
 */
public class Calculator {
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws Exception {
        // read file from args[0] in Java 7 style
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        Calculator fk = new Calculator();
        fk.ans(br.readLine());
          
    }
    public Double ans (String e) {
        // please replace the following null to the answer you calculated.
//        System.out.printf(e);
        String[] input = e.split("" "");
        int size = input.length;
//        System.out.printf(e.replace(""("", """").replace("")"","""").replaceAll("" "",""""));
        String[] num = e.replace(""("", """").replace("")"","""").replaceAll("" "","""").split(""\\D+"");
        String[] operator = e.replace(""("", """").replace("")"","""").replaceFirst(""\\d+"","""").replaceAll("" "","""").split(""\\d+"");
        boolean[] num_used = new boolean[num.length];
        int[] layer = new int[operator.length];
        boolean[] op_used = new boolean[operator.length];
        int layer_num = 0;
        int position = 0;
        int Max_layer = 0;
        String[] remove_num = e.replaceAll(""\\d+"","""").split("" "");
        for (String unit:remove_num){
            if (unit.equals(""("")){
                layer_num++;
                if (Max_layer < layer_num){
                    Max_layer = layer_num;
                }
            }
            else if (unit.equals("")"")){
                layer_num--;
            }
            else if (unit.equals(""*"") || unit.equals(""/"") || unit.equals(""+"") || unit.equals(""-"")) {
                layer[position] = layer_num;
//                System.out.print(layer[position]);
                position++;
            }
//            System.out.printf(""[%s,%d]"",unit,layer_num);
        }
//        System.out.print(operator.length);
        
        double tmp =0;
        //from max layer to min layer
        for (int lay = Max_layer; lay>=0;lay--){
            // x,/
            for (int op =0; op <operator.length;op++ ){
                if (layer[op] == lay && op_used[op]==false){
                    if (operator[op].equals(""*"") || operator[op].equals(""/"")){
                        for (int search=op+1;search<num.length;search++){
                            if(num_used[search] ==false){
                                if(operator[op].equals(""*"") ){
                                    num[search] = String.valueOf(Double.parseDouble(num[op])*Double.parseDouble(num[search]));
                                    num_used[op]=true;
                                    break;
                                }
                                else if (operator[op].equals(""/"")){
                                    num[search] = String.valueOf(Double.parseDouble(num[op])/Double.parseDouble(num[search]));
                                    num_used[op]=true;
                                    break;
                                }
                            }
                        }
                        op_used[op]=true;
                    }
                }
            }
            //+,-
            for (int op =0; op <operator.length;op++ ){
                if (layer[op] == lay && op_used[op]==false){
                    if (operator[op].equals(""+"") || operator[op].equals(""-"")){
                        for (int search=op+1;search<num.length;search++){
                            if(num_used[search] ==false){
                                if(operator[op].equals(""+"") ){
                                    num[search] = String.valueOf(Double.parseDouble(num[op])+Double.parseDouble(num[search]));
                                    num_used[op]=true;
                                    break;
                                }
                                else if (operator[op].equals(""-"")){
                                    num[search] = String.valueOf(Double.parseDouble(num[op])-Double.parseDouble(num[search]));
                                    num_used[op]=true;
                                    break;
                                }
                            }
                        }
                        op_used[op]=true;
                    }
                }
            }
        }
//        System.out.printf(num[num.length-1]);
//        System.out.print(num.length);
//        for (int i:layer){
//        System.out.printf(""%d,"",Integer.parseInt(i));
//            System.out.printf(""%d,"",i);
//        }
        return Double.parseDouble(num[num.length-1]);
    }

}

@e25d8a9dd79af68dc54b37d5c3928fd3@"
"r03631015","0","1.01","107072","@b67331c520752673eadca8703d46b90c@
import java.io.BufferedReader;
import java.io.FileReader;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author wayne17
 */
public class Calculator {
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws Exception {
        // read file from args[0] in Java 7 style
        
          
    }
    public Double ans (String e) {
        // please replace the following null to the answer you calculated.
//        System.out.printf(e);
        String[] input = e.split("" "");
        int size = input.length;
//        System.out.printf(e.replace(""("", """").replace("")"","""").replaceAll("" "",""""));
        String[] num = e.replace(""("", """").replace("")"","""").replaceAll("" "","""").split(""\\D+"");
        String[] operator = e.replace(""("", """").replace("")"","""").replaceFirst(""\\d+"","""").replaceAll("" "","""").split(""\\d+"");
        boolean[] num_used = new boolean[num.length];
        int[] layer = new int[operator.length];
        boolean[] op_used = new boolean[operator.length];
        int layer_num = 0;
        int position = 0;
        int Max_layer = 0;
        String[] remove_num = e.replaceAll(""\\d+"","""").split("" "");
        for (String unit:remove_num){
            if (unit.equals(""("")){
                layer_num++;
                if (Max_layer < layer_num){
                    Max_layer = layer_num;
                }
            }
            else if (unit.equals("")"")){
                layer_num--;
            }
            else if (unit.equals(""*"") || unit.equals(""/"") || unit.equals(""+"") || unit.equals(""-"")) {
                layer[position] = layer_num;
//                System.out.print(layer[position]);
                position++;
            }
//            System.out.printf(""[%s,%d]"",unit,layer_num);
        }
//        System.out.print(operator.length);
        
        double tmp =0;
        //from max layer to min layer
        for (int lay = Max_layer; lay>=0;lay--){
            // x,/
            for (int op =0; op <operator.length;op++ ){
                if (layer[op] == lay && op_used[op]==false){
                    if (operator[op].equals(""*"") || operator[op].equals(""/"")){
                        for (int search=op+1;search<num.length;search++){
                            if(num_used[search] ==false){
                                if(operator[op].equals(""*"") ){
                                    num[search] = String.valueOf(Double.parseDouble(num[op])*Double.parseDouble(num[search]));
                                    num_used[op]=true;
                                    break;
                                }
                                else if (operator[op].equals(""/"")){
                                    num[search] = String.valueOf(Double.parseDouble(num[op])/Double.parseDouble(num[search]));
                                    num_used[op]=true;
                                    break;
                                }
                            }
                        }
                        op_used[op]=true;
                    }
                }
            }
            //+,-
            for (int op =0; op <operator.length;op++ ){
                if (layer[op] == lay && op_used[op]==false){
                    if (operator[op].equals(""+"") || operator[op].equals(""-"")){
                        for (int search=op+1;search<num.length;search++){
                            if(num_used[search] ==false){
                                if(operator[op].equals(""+"") ){
                                    num[search] = String.valueOf(Double.parseDouble(num[op])+Double.parseDouble(num[search]));
                                    num_used[op]=true;
                                    break;
                                }
                                else if (operator[op].equals(""-"")){
                                    num[search] = String.valueOf(Double.parseDouble(num[op])-Double.parseDouble(num[search]));
                                    num_used[op]=true;
                                    break;
                                }
                            }
                        }
                        op_used[op]=true;
                    }
                }
            }
        }
//        System.out.printf(num[num.length-1]);
//        System.out.print(num.length);
//        for (int i:layer){
//        System.out.printf(""%d,"",Integer.parseInt(i));
//            System.out.printf(""%d,"",i);
//        }
        return Double.parseDouble(num[num.length-1]);
    }

}


back return to list
@b67331c520752673eadca8703d46b90c@"
"r03631015","1","1.02","105568","@64dc28f74f73326af202873abb253029@
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author wayne17
 */
public class Calculator {
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws Exception {
        // read file from args[0] in Java 7 style
//        BufferedReader br = new BufferedReader(new FileReader(args[0]));
//        Calculator fk = new Calculator();
//        fk.ans(br.readLine());
          
    }
    public Double ans (String e) {
        // please replace the following null to the answer you calculated.
//        System.out.printf(e);
        String[] input = e.split("" "");
        int size = input.length;
//        System.out.printf(e.replace(""("", """").replace("")"","""").replaceAll("" "",""""));
        String[] num = e.replace(""("", """").replace("")"","""").replaceAll("" "","""").split(""\\D+"");
        String[] operator = e.replace(""("", """").replace("")"","""").replaceFirst(""\\d+"","""").replaceAll("" "","""").split(""\\d+"");
        boolean[] num_used = new boolean[num.length];
        int[] layer = new int[operator.length];
        boolean[] op_used = new boolean[operator.length];
        int layer_num = 0;
        int position = 0;
        int Max_layer = 0;
        String[] remove_num = e.replaceAll(""\\d+"","""").split("" "");
        for (String unit:remove_num){
            if (unit.equals(""("")){
                layer_num++;
                if (Max_layer < layer_num){
                    Max_layer = layer_num;
                }
            }
            else if (unit.equals("")"")){
                layer_num--;
            }
            else if (unit.equals(""*"") || unit.equals(""/"") || unit.equals(""+"") || unit.equals(""-"")) {
                layer[position] = layer_num;
//                System.out.print(layer[position]);
                position++;
            }
//            System.out.printf(""[%s,%d]"",unit,layer_num);
        }
//        System.out.print(operator.length);
        
        double tmp =0;
        //from max layer to min layer
        for (int lay = Max_layer; lay>=0;lay--){
            // x,/
            for (int op =0; op <operator.length;op++ ){
                if (layer[op] == lay && op_used[op]==false){
                    if (operator[op].equals(""*"") || operator[op].equals(""/"")){
                        for (int search=op+1;search<num.length;search++){
                            if(num_used[search] ==false){
                                if(operator[op].equals(""*"") ){
                                    num[search] = String.valueOf(Double.parseDouble(num[op])*Double.parseDouble(num[search]));
                                    num_used[op]=true;
                                    break;
                                }
                                else if (operator[op].equals(""/"")){
                                    num[search] = String.valueOf(Double.parseDouble(num[op])/Double.parseDouble(num[search]));
                                    num_used[op]=true;
                                    break;
                                }
                            }
                        }
                        op_used[op]=true;
                    }
                }
            }
            //+,-
            for (int op =0; op <operator.length;op++ ){
                if (layer[op] == lay && op_used[op]==false){
                    if (operator[op].equals(""+"") || operator[op].equals(""-"")){
                        for (int search=op+1;search<num.length;search++){
                            if(num_used[search] ==false){
                                if(operator[op].equals(""+"") ){
                                    num[search] = String.valueOf(Double.parseDouble(num[op])+Double.parseDouble(num[search]));
                                    num_used[op]=true;
                                    break;
                                }
                                else if (operator[op].equals(""-"")){
                                    num[search] = String.valueOf(Double.parseDouble(num[op])-Double.parseDouble(num[search]));
                                    num_used[op]=true;
                                    break;
                                }
                            }
                        }
                        op_used[op]=true;
                    }
                }
            }
        }
//        System.out.printf(num[num.length-1]);
//        System.out.print(num.length);
//        for (int i:layer){
//        System.out.printf(""%d,"",Integer.parseInt(i));
//            System.out.printf(""%d,"",i);
//        }
        return Double.parseDouble(num[num.length-1]);
    }

}

@64dc28f74f73326af202873abb253029@"
"b03611038","0","0","0","@fdc4751ffe38fa5bb45d919dee9d303a@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.io.FileReader;
import java.io.BufferedReader;

/**
 *
 * @author Phoenix
 */

public class Calculator {
    public static void main(String args) throws Exception {
       
        Double i;
        i=0.0;
        System.out.println(i);
        
    }
    
    
    public Double ans (String e) {
    Stack<String> ops = new Stack<>();
    Stack<Double> vals = new Stack<>();
    while (!StdIn.isEmpty()) {
    String s = StdIn.readString();
    if (s.equals(""("")) ;
    else if (s.equals(""+"")) ops.push(s);
    else if (s.equals(""-"")) ops.push(s);
    else if (s.equals(""*"")) ops.push(s);
    else if (s.equals(""/"")) ops.push(s);
    else if (s.equals("")""))
    {
    String op = ops.pop();
    if (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
    else if (op.equals(""-"")) vals.push(-(vals.pop() - vals.pop()));
    else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
    else if (op.equals(""/"")) vals.push(1/(vals.pop() / vals.pop()));
    }
    else vals.push(Double.parseDouble(s));
    }
      // please replace the following null to the answer you calculated.
      return vals.pop();
    }
}

@fdc4751ffe38fa5bb45d919dee9d303a@"
"r04631026","0","0.98","105760","@9111654e62ea1ae0cf2801d90bfa926d@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.io.FileReader;
import java.io.BufferedReader;
/**
 *
 * @author Yue
 */
public class Calculator {
    public static void main(String[] args) throws Exception {
        Calculator cct = new Calculator();
        cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "");
    }
    public Double ans (String e) {
        // please replace the following null to the answer you calculated.
//        Calculator cct = new Calculator();
        String[] data = e.split("" "");
        int Level=0;
        int MaxCal = 0;
        int[] index = new int[data.length];
        Stack LevelStack = new Stack();
        for (int i=0;i<data.length;i++){
            LevelStack.push(data[i]);
//            System.out.println(LevelStack.get(i));
            if (data[i].equals(""("")){
                Level++;
                index[i]=Level;
//                System.out.print(""hi"");
            }
            else if (data[i].equals("")"")){
                Level--;
                index[i]=Level;
            }
            else{
                index[i]=Level;
            }
//            System.out.print(index[i]);
//            System.out.println(LevelStack.get(i));
            
//            System.out.println(data[i]+i);
        }
        // Find maximum 
        MaxCal = index[0];
        for(int i=1;i<index.length;i++){
            if(index[i]>MaxCal){
                MaxCal = index[i];
            }
            else if (index[i]<MaxCal){
                MaxCal = MaxCal;
            }
        }
        String Count ="""";
//        String[] Temp = new String[data.length];
        double TempValue=0.0;
        int Zero=0;
        for(int k=0;k<MaxCal;k++){
            for(int i=4;i<data.length;i++){
                if(data[i-4].equals(""("") && data[i].equals("")"")){
                    if(data[i-2].equals(""+"")){
                        TempValue = Double.parseDouble(data[i-3])+Double.parseDouble(data[i-1]);
                    }
                    else if(data[i-2].equals(""-"")){
                        TempValue = Double.parseDouble(data[i-3])-Double.parseDouble(data[i-1]);
                    }
                    else if(data[i-2].equals(""*"")){
                        TempValue = Double.parseDouble(data[i-3])*Double.parseDouble(data[i-1]);
                    }
                    else if(data[i-2].equals(""/"")){
                        TempValue = Double.parseDouble(data[i-3])/Double.parseDouble(data[i-1]);
                    }
                    else{
                        System.out.print(""Error !"");
                    }
                    data[i-4] = String.valueOf(TempValue);
    //                System.out.println(data[i-4]);
                    Zero++;
                    for(int j=0;j<4;j++){
                        data[i-3+j]=""0"";
                    }
                }            
            }
            for(int j=0;j<Zero;j++){
                for(int i=4;i<data.length;i++){
                    if (((data[i-4].equals(""0"") && data[i-3].equals(""0"")) && data[i-2].equals(""0"")) && data[i-1].equals(""0"")){
                        data[i-4] = data[i];
                        data[i] = ""0"";
                    }
                }
            }
        }
        
        System.out.print(data[0]);
        
//        for(int j=0;j<MaxCal;j++){
//            for(int i=0;i<index.length;i++){
//                if (index[i]==(MaxCal-j)){
//                    if(data[i].equals("")"")){
//                        data[i]=String.valueOf(TempValue);
//                    }
//                    Count+=data[i]+"" "";
////                    System.out.print(data[i]);                
//                }
//            }
//            String[] Temp = Count.split("" ""); 
//            if(Temp[2].equals(""+"")){
//                for(int i=3;i<Temp.length;i+=2){
//                   TempValue = Double.parseDouble(Temp[i-2])+Double.parseDouble(Temp[i]);
//                }           
//            }
//            else if(Temp[2].equals(""-"")){
//                for(int i=3;i<Temp.length;i+=2){
//                    TempValue = Double.parseDouble(Temp[i-2])-Double.parseDouble(Temp[i]);   
//                }
//            }
//            else if(Temp[2].equals(""*"")){
//                for(int i=3;i<Temp.length;i+=2){
//                   TempValue = Double.parseDouble(Temp[i-2])*Double.parseDouble(Temp[i]);
//                }           
//            }
//            else if(Temp[2].equals(""/"")){
//                for(int i=3;i<Temp.length;i+=2){
//                   TempValue = Double.parseDouble(Temp[i-2])/Double.parseDouble(Temp[i]);
//                }           
//            }
//        }
//        System.out.print(TempValue);
        return Double.parseDouble(data[0]);
    }
}

@9111654e62ea1ae0cf2801d90bfa926d@"
"r04631026","0","0.99","105776","@379c26380750970ebd78ed38b144f927@import java.io.FileReader;
import java.io.BufferedReader;

public class Calculator {
    public static void main(String[] args) throws Exception {
        Calculator cct = new Calculator();
        cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "");
    }
    public Double ans (String e) {
        // please replace the following null to the answer you calculated.
//        Calculator cct = new Calculator();
        String[] data = e.split("" "");
        int Level=0;
        int MaxCal = 0;
        int[] index = new int[data.length];
        Stack LevelStack = new Stack();
        for (int i=0;i<data.length;i++){
            LevelStack.push(data[i]);
//            System.out.println(LevelStack.get(i));
            if (data[i].equals(""("")){
                Level++;
                index[i]=Level;
//                System.out.print(""hi"");
            }
            else if (data[i].equals("")"")){
                Level--;
                index[i]=Level;
            }
            else{
                index[i]=Level;
            }
//            System.out.print(index[i]);
//            System.out.println(LevelStack.get(i));
            
//            System.out.println(data[i]+i);
        }
        // Find maximum 
        MaxCal = index[0];
        for(int i=1;i<index.length;i++){
            if(index[i]>MaxCal){
                MaxCal = index[i];
            }
            else if (index[i]<MaxCal){
                MaxCal = MaxCal;
            }
        }
        String Count ="""";
//        String[] Temp = new String[data.length];
        double TempValue=0.0;
        int Zero=0;
        for(int k=0;k<MaxCal;k++){
            for(int i=4;i<data.length;i++){
                if(data[i-4].equals(""("") && data[i].equals("")"")){
                    if(data[i-2].equals(""+"")){
                        TempValue = Double.parseDouble(data[i-3])+Double.parseDouble(data[i-1]);
                    }
                    else if(data[i-2].equals(""-"")){
                        TempValue = Double.parseDouble(data[i-3])-Double.parseDouble(data[i-1]);
                    }
                    else if(data[i-2].equals(""*"")){
                        TempValue = Double.parseDouble(data[i-3])*Double.parseDouble(data[i-1]);
                    }
                    else if(data[i-2].equals(""/"")){
                        TempValue = Double.parseDouble(data[i-3])/Double.parseDouble(data[i-1]);
                    }
                    else{
                        System.out.print(""Error !"");
                    }
                    data[i-4] = String.valueOf(TempValue);
    //                System.out.println(data[i-4]);
                    Zero++;
                    for(int j=0;j<4;j++){
                        data[i-3+j]=""0"";
                    }
                }            
            }
            for(int j=0;j<Zero;j++){
                for(int i=4;i<data.length;i++){
                    if (((data[i-4].equals(""0"") && data[i-3].equals(""0"")) && data[i-2].equals(""0"")) && data[i-1].equals(""0"")){
                        data[i-4] = data[i];
                        data[i] = ""0"";
                    }
                }
            }
        }
        
        System.out.print(data[0]);
        
//        for(int j=0;j<MaxCal;j++){
//            for(int i=0;i<index.length;i++){
//                if (index[i]==(MaxCal-j)){
//                    if(data[i].equals("")"")){
//                        data[i]=String.valueOf(TempValue);
//                    }
//                    Count+=data[i]+"" "";
////                    System.out.print(data[i]);                
//                }
//            }
//            String[] Temp = Count.split("" ""); 
//            if(Temp[2].equals(""+"")){
//                for(int i=3;i<Temp.length;i+=2){
//                   TempValue = Double.parseDouble(Temp[i-2])+Double.parseDouble(Temp[i]);
//                }           
//            }
//            else if(Temp[2].equals(""-"")){
//                for(int i=3;i<Temp.length;i+=2){
//                    TempValue = Double.parseDouble(Temp[i-2])-Double.parseDouble(Temp[i]);   
//                }
//            }
//            else if(Temp[2].equals(""*"")){
//                for(int i=3;i<Temp.length;i+=2){
//                   TempValue = Double.parseDouble(Temp[i-2])*Double.parseDouble(Temp[i]);
//                }           
//            }
//            else if(Temp[2].equals(""/"")){
//                for(int i=3;i<Temp.length;i+=2){
//                   TempValue = Double.parseDouble(Temp[i-2])/Double.parseDouble(Temp[i]);
//                }           
//            }
//        }
//        System.out.print(TempValue);
    return Double.parseDouble(data[0]);
    }
}

@379c26380750970ebd78ed38b144f927@"
"r04631026","0","0.99","105520","@6a378cad4dd4fc53b4de1d6eaf289274@import java.io.FileReader;
import java.io.BufferedReader;

public class Calculator {
    public static void main(String[] args) throws Exception {
        Calculator cct = new Calculator();
        cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "");
    }
    public Double ans (String e) {
        // please replace the following null to the answer you calculated.
//        Calculator cct = new Calculator();
        String[] data = e.split("" "");
        int Level=0;
        int MaxCal = 0;
        int[] index = new int[data.length];
//        Stack LevelStack = new Stack();
        for (int i=0;i<data.length;i++){
//            LevelStack.push(data[i]);
//            System.out.println(LevelStack.get(i));
            if (data[i].equals(""("")){
                Level++;
                index[i]=Level;
//                System.out.print(""hi"");
            }
            else if (data[i].equals("")"")){
                Level--;
                index[i]=Level;
            }
            else{
                index[i]=Level;
            }
//            System.out.print(index[i]);
//            System.out.println(LevelStack.get(i));
            
//            System.out.println(data[i]+i);
        }
        // Find maximum 
        MaxCal = index[0];
        for(int i=1;i<index.length;i++){
            if(index[i]>MaxCal){
                MaxCal = index[i];
            }
            else if (index[i]<MaxCal){
                MaxCal = MaxCal;
            }
        }
        String Count ="""";
//        String[] Temp = new String[data.length];
        double TempValue=0.0;
        int Zero=0;
        for(int k=0;k<MaxCal;k++){
            for(int i=4;i<data.length;i++){
                if(data[i-4].equals(""("") && data[i].equals("")"")){
                    if(data[i-2].equals(""+"")){
                        TempValue = Double.parseDouble(data[i-3])+Double.parseDouble(data[i-1]);
                    }
                    else if(data[i-2].equals(""-"")){
                        TempValue = Double.parseDouble(data[i-3])-Double.parseDouble(data[i-1]);
                    }
                    else if(data[i-2].equals(""*"")){
                        TempValue = Double.parseDouble(data[i-3])*Double.parseDouble(data[i-1]);
                    }
                    else if(data[i-2].equals(""/"")){
                        TempValue = Double.parseDouble(data[i-3])/Double.parseDouble(data[i-1]);
                    }
                    else{
                        System.out.print(""Error !"");
                    }
                    data[i-4] = String.valueOf(TempValue);
    //                System.out.println(data[i-4]);
                    Zero++;
                    for(int j=0;j<4;j++){
                        data[i-3+j]=""0"";
                    }
                }            
            }
            for(int j=0;j<Zero;j++){
                for(int i=4;i<data.length;i++){
                    if (((data[i-4].equals(""0"") && data[i-3].equals(""0"")) && data[i-2].equals(""0"")) && data[i-1].equals(""0"")){
                        data[i-4] = data[i];
                        data[i] = ""0"";
                    }
                }
            }
        }
        
        System.out.print(data[0]);
        
//        for(int j=0;j<MaxCal;j++){
//            for(int i=0;i<index.length;i++){
//                if (index[i]==(MaxCal-j)){
//                    if(data[i].equals("")"")){
//                        data[i]=String.valueOf(TempValue);
//                    }
//                    Count+=data[i]+"" "";
////                    System.out.print(data[i]);                
//                }
//            }
//            String[] Temp = Count.split("" ""); 
//            if(Temp[2].equals(""+"")){
//                for(int i=3;i<Temp.length;i+=2){
//                   TempValue = Double.parseDouble(Temp[i-2])+Double.parseDouble(Temp[i]);
//                }           
//            }
//            else if(Temp[2].equals(""-"")){
//                for(int i=3;i<Temp.length;i+=2){
//                    TempValue = Double.parseDouble(Temp[i-2])-Double.parseDouble(Temp[i]);   
//                }
//            }
//            else if(Temp[2].equals(""*"")){
//                for(int i=3;i<Temp.length;i+=2){
//                   TempValue = Double.parseDouble(Temp[i-2])*Double.parseDouble(Temp[i]);
//                }           
//            }
//            else if(Temp[2].equals(""/"")){
//                for(int i=3;i<Temp.length;i+=2){
//                   TempValue = Double.parseDouble(Temp[i-2])/Double.parseDouble(Temp[i]);
//                }           
//            }
//        }
//        System.out.print(TempValue);
    return Double.parseDouble(data[0]);
    }
}

@6a378cad4dd4fc53b4de1d6eaf289274@"
"r04631026","0","0","0","@92b7008c1c27be2472198f3e62721944@public class Calculator {
    public static void main(String[] args) throws Exception {
        Calculator cct = new Calculator();
        System.out.print(cct.ans(""( ( ( 1 + 2 ) + 1 ) * ( 5 * 5.3 ) )""));
        
    }
    public String ans (String e) {
        // please replace the following null to the answer you calculated.
//        Calculator cct = new Calculator();
        String[] data = e.split("" "");
        int Level=0;
        int MaxCal = 0;
        int[] index = new int[data.length];

        for (int i=0;i<data.length;i++){

            if (data[i].equals(""("")){
                Level++;
                index[i]=Level;
            }
            else if (data[i].equals("")"")){
                Level--;
                index[i]=Level;
            }
            else{
                index[i]=Level;
            }
//            System.out.print(index[i]);

            
//            System.out.println(data[i]+i);
        }
        // Find maximum 
        MaxCal = index[0];
        for(int i=1;i<index.length;i++){
            if(index[i]>MaxCal){
                MaxCal = index[i];
            }
            else if (index[i]<MaxCal){
                MaxCal = MaxCal;
            }
        }
        String Count ="""";
//        String[] Temp = new String[data.length];
        double TempValue=0.0;
        int Zero=0;
        for(int k=0;k<MaxCal;k++){
            for(int i=4;i<data.length;i++){
                if(data[i-4].equals(""("") && data[i].equals("")"")){
                    if(data[i-2].equals(""+"")){
                        TempValue = Double.parseDouble(data[i-3])+Double.parseDouble(data[i-1]);
                    }
                    else if(data[i-2].equals(""-"")){
                        TempValue = Double.parseDouble(data[i-3])-Double.parseDouble(data[i-1]);
                    }
                    else if(data[i-2].equals(""*"")){
                        TempValue = Double.parseDouble(data[i-3])*Double.parseDouble(data[i-1]);
                    }
                    else if(data[i-2].equals(""/"")){
                        TempValue = Double.parseDouble(data[i-3])/Double.parseDouble(data[i-1]);
                    }
                    else{
                        System.out.print(""Error !"");
                    }
                    data[i-4] = String.valueOf(TempValue);
    //                System.out.println(data[i-4]);
                    Zero++;
                    for(int j=0;j<4;j++){
                        data[i-3+j]=""0"";
                    };
                }
//                System.out.print(data[i]);
            }
            for(int j=0;j<Zero;j++){
                for(int i=4;i<data.length;i++){
                    if (((data[i-4].equals(""0"") && data[i-3].equals(""0"")) && data[i-2].equals(""0"")) && data[i-1].equals(""0"")){
                        data[i-4] = data[i];
                        data[i] = ""0"";
                    }
                }
            }
        }
//        for(int i=0;i<data.length;i++){
//            System.out.print(data[i]);
//        }
        return data[0];
    }
}

@92b7008c1c27be2472198f3e62721944@"
"r04631026","5","1.02","105776","@ed44a2e4b5658caa73412f6bc614775f@import java.io.FileReader;
import java.io.BufferedReader;
import java.math.BigDecimal;

public class Calculator {
    public static void main(String[] args) throws Exception {
        Calculator cct = new Calculator();
        System.out.print(cct.ans(""( ( ( 1 + ( 12 * 5.1 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )""));       
    }
    public Double ans (String e) {
        // please replace the following null to the answer you calculated.
//        Calculator cct = new Calculator();
        String[] data = e.split("" "");
        int Level=0;
        int MaxCal = 0;
        int[] index = new int[data.length];

        for (int i=0;i<data.length;i++){

            if (data[i].equals(""("")){
                Level++;
                index[i]=Level;
            }
            else if (data[i].equals("")"")){
                Level--;
                index[i]=Level;
            }
            else{
                index[i]=Level;
            }
//            System.out.print(index[i]);

            
//            System.out.println(data[i]+i);
        }
        // Find maximum 
        MaxCal = index[0];
        for(int i=1;i<index.length;i++){
            if(index[i]>MaxCal){
                MaxCal = index[i];
            }
            else if (index[i]<MaxCal){
                MaxCal = MaxCal;
            }
        }
        String Count ="""";
//        String[] Temp = new String[data.length];
        double TempValue=0.0;
        int Zero=0;
        for(int k=0;k<MaxCal;k++){
            for(int i=4;i<data.length;i++){
                if(data[i-4].equals(""("") && data[i].equals("")"")){
                    if(data[i-2].equals(""+"")){
                        TempValue = Double.parseDouble(data[i-3])+Double.parseDouble(data[i-1]);
                    }
                    else if(data[i-2].equals(""-"")){
                        TempValue = Double.parseDouble(data[i-3])-Double.parseDouble(data[i-1]);
                    }
                    else if(data[i-2].equals(""*"")){
                        TempValue = Double.parseDouble(data[i-3])*Double.parseDouble(data[i-1]);
                    }
                    else if(data[i-2].equals(""/"")){
                        TempValue = Double.parseDouble(data[i-3])/Double.parseDouble(data[i-1]);
                    }
                    else{
                        System.out.print(""Error !"");
                    }
                    data[i-4] = String.valueOf(TempValue);
    //                System.out.println(data[i-4]);
                    Zero++;
                    for(int j=0;j<4;j++){
                        data[i-3+j]=""0"";
                    };
                }
//                System.out.print(data[i]);
            }
            for(int j=0;j<Zero;j++){
                for(int i=4;i<data.length;i++){
                    if (((data[i-4].equals(""0"") && data[i-3].equals(""0"")) && data[i-2].equals(""0"")) && data[i-1].equals(""0"")){
                        data[i-4] = data[i];
                        data[i] = ""0"";
                    }
                }
            }
        }
//        for(int i=0;i<data.length;i++){
//            System.out.print(data[i]);
//        }
        double b = new BigDecimal(Double.parseDouble(data[0])).setScale(1, BigDecimal.ROUND_HALF_UP).doubleValue();
        return b;
    }
}

@ed44a2e4b5658caa73412f6bc614775f@"
"r04631009","10","0.099","105888","@b1d83229c9ad856831db3342adc16181@import java.io.FileReader;
import java.io.BufferedReader;


/**
 *
 * @author Cyuan
 */
public class Calculator {
    
    private double ans;
    private double a , b;
    private char op;
    
    public Calculator() {
        ans = 0.0;
        a = 0.0;
        b = 0.0;
    }
    
    public Double ans (String e)
    {
       String [] data = e.split("" "");
       Stack<String> equation = new Stack<String>();
       Stack<Double> number = new Stack<Double>(); 
       Stack<String> operator = new Stack<String>();
       
       for (int i = 0; i < data.length; i++)
       {
          if ( data[i].equals(""(""))
              equation.push(data[i]);
          else if( data[i].equals(""+"") || data[i].equals(""-"") || data[i].equals(""*"") || data[i].equals(""/""))
              operator.push(data[i]);
          else if( data[i].equals("")""))
          {
              b = number.pop();
              op = operator.pop().charAt(0);
              a = number.pop();
              equation.pop();
              switch(op){
                  case '+':
                      ans = a + b;
                      number.push(ans);
                      break;
                  case '-':
                      ans = a - b;
                       number.push(ans);
                      break;
                  case '*':
                      ans = a * b;
                       number.push(ans);
                      break;
                  case '/':
                      ans = a / b;
                       number.push(ans);
                      break;
              }
          }
          else
              number.push(Double.parseDouble(data[i]));
       }
        return ans;
    }
    
    
    
    public static void main(String[] args) {
        String e = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "";

        Calculator cct = new Calculator();
        System.out.print(cct.ans(e));

    }
    
}
@b1d83229c9ad856831db3342adc16181@"
"r03849033","10","0.097","105584","@99cbf59bc5ca3cb21d36f3411787d2cf@
public class Calculator {
    public String a1=""+"";
    public String a2=""-"";
    public String a3=""*"";
    public String a4=""/"";
    public String a5=""("";
    public String a6="")"";

private static class Stack
{
	String [] stack;
	public int index;
	Stack(int max)
	{
		index = -1; //無元素
		stack = new String[max];
	}
	public void push(String data)
	{
		stack[++index] = data;
	}
	public String pop()
	{
		return stack[index--];
	}

        
}    
 
    public Double ans (String e) {
        String[] data = e.split("" "");
   	Stack s = new Stack(data.length);
        int count = 0;
        for(int i=0;i<data.length;i++){
            if(data[i].equals(a1)||data[i].equals(a2)||data[i].equals(a3)||data[i].equals(a4)){
                s.push(data[i]);
                count=1;    }   
            else if(data[i].equals(a5)) count=0;
            else if(data[i].equals(a6)){ count=0;
            if(s.index>1){
               Double b1 = Double.parseDouble(s.pop());
               String b2 = s.pop();
               Double b3 = Double.parseDouble(s.pop());
               if(b2.equals(a1)) s.push(""""+(b3+b1));
               if(b2.equals(a2)) s.push(""""+(b3-b1));
               if(b2.equals(a3)) s.push(""""+(b3*b1));
               if(b2.equals(a4)) s.push(""""+(b3/b1));
            }   } 
            else{
                s.push(data[i]);               
                if(count==1){
                count=0;    
               Double b1 = Double.parseDouble(s.pop());
               String b2 = s.pop();
               Double b3 = Double.parseDouble(s.pop());
               if(b2.equals(a1)) s.push(""""+(b3+b1));
               if(b2.equals(a2)) s.push(""""+(b3-b1));
               if(b2.equals(a3)) s.push(""""+(b3*b1));
               if(b2.equals(a4)) s.push(""""+(b3/b1));
                }
            }
        }
	return Double.parseDouble(s.pop());
}
    public static void main(String[] args) throws Exception {
        String a = ""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"";
        Calculator cct = new Calculator();
        System.out.println(cct.ans(a));
    }
}

@99cbf59bc5ca3cb21d36f3411787d2cf@"
"r04631034","10","0.098","105008","@d6df9f554af336d9c21f9abb9c355c8d@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

//import edu.princeton.cs.algs4.*;
/**
 *
 * @author user
 */
public class Calculator {

          public Double ans(String e) {
                    String[] line = e.split("" "");
                    Stack<String> num = new Stack<String>();
                    Stack<String> cha = new Stack<String>();

                    String add = ""+"";
                    String min = ""-"";
                    String time = ""*"";
                    String div = ""/"";
                    String right = "")"";
                    String left = ""("";

                    for (int i = 0; i < line.length; i++) {
//                              System.out.print(line[i] + "" "");
                    }
//                    System.out.println("""");

                    for (int i = 0; i < line.length; i++) {
                              if (line[i].equals(add) || line[i].equals(min) || line[i].equals(div) || line[i].equals(time) || line[i].equals(left)) {
                                        cha.push(line[i]);
//                                        System.out.println(""1 "" + line[i]);
                              } else if (line[i].equals(right)) {
                                        while (!cha.peek().equals(left)) {
                                                  num.push(cha.pop());
//                                                  System.out.println(""count"");
                                        }
                                        cha.pop();
//                                        System.out.println(""2 "" + line[i]);
                              } else {
                                        num.push(line[i]);
//                                        System.out.println(""3 "" + line[i]);
                              }
                    }

                    int storage = num.size();
                    for (int j = 0; j < storage; j++) {
                              cha.push(num.pop());
//                              System.out.println(num.pop());
                    }
                    String temp;
                    while (cha.isEmpty() == false) {
                              temp = cha.pop().toString();

                              if (temp.equals(add) || temp.equals(min) || temp.equals(div) || temp.equals(time)) {
                                        double cal_num_sce = Double.parseDouble(num.pop().toString());
                                        double cal_num_first = Double.parseDouble(num.pop().toString());

                                        if (temp.equals(add)) {
                                                  num.push(Double.toString(cal_num_first + cal_num_sce));
                                        } else if (temp.equals(min)) {
                                                  num.push(Double.toString(cal_num_first - cal_num_sce));
                                        } else if (temp.equals(time)) {
                                                  num.push(Double.toString(cal_num_first * cal_num_sce));
                                        } else if (temp.equals(div)) {
                                                  num.push(Double.toString(cal_num_first / cal_num_sce));
                                        }
                              } else {
                                        num.push(temp);
                              }

                    }
//                    System.out.println(num.pop());
//                    System.out.println(""""); 

                    return Double.valueOf(num.pop()).doubleValue();
          }

          public static void main(String[] args) {
                    // TODO code application logic here
//                    In in = new In(args[0]);
//                   Calculator ca = new Calculator();
//                    System.out.println(ca.ans(in.readLine()));
          }

}

@d6df9f554af336d9c21f9abb9c355c8d@"
"r02b48003","4","0.78","105840","@eccf0a25c0cc448ec8cce3f41c9a7ced@
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author clint
 */
public class Calculator {
    // for first method
    private Stack<Double>    stackVal = new Stack<Double>();
    private Stack<Character> stackOpr = new Stack<Character>();
    
    public void displayOpr() {
        /* print out stack of operator */
        System.out.println(""Print operand in Stack"");
        for (Character opr : stackOpr) { System.out.print(opr + "" ""); }
        System.out.println();
    } // end func displayOpr
    
    public void displayVal() {
        /* print out stack of value */
        System.out.println(""Print value in Stack"");
        for (Double val : stackVal) { System.out.print(val + "" ""); }
        System.out.println();
    } // end func displayVal
    
    
    //private Double cal(String str01, String str02, Character opr) {
    private Double cal(Double val01, Double val02, Character opr) {
        //Double val01 = Double.valueOf(str01);
        //Double val02 = Double.valueOf(str02);
        Double res = 0.0;
        
        switch(opr) {
            case '+':
                //System.out.println('+');
                res = val01 + val02;
                break;
            case '-':
                //System.out.println('-');
                res = val01 - val02;
                break;
            case '*':
                //System.out.println('*');
                res = val01 * val02;
                break;
            case '/':
                //System.out.println('/');
                //if (Double.valueOf(val02) == 0.0) return;
                res = val01 / val02;
                break;
        } // end switch
        return res;
    } // end function cal
            
    
    private void calculate(){
        /* perform calculation */
        // pop out two value and one operator from the stacks
        Character opr;
        //String val01, val02;
        Double val01, val02;
        Double res;
        //*
        if (stackVal.size() != 0){
            val02 = stackVal.pop();
        } else {
            val02 = null;
        } // end if-else
        
        if (stackVal.size() != 0){
            val01 = stackVal.pop();
        } else {
            val01 = null;
        } // end if-else
        
        // in case something happen
        if (val01 == null || val02 == null) return;
        //*/
        opr = stackOpr.pop();
        //val01 = 10.0;
        //val02 = 20.0;
        // calculate the result and push into stack of values
        //stackVal.push(String.valueOf(cal(val01, val02, opr)));
        stackVal.push(cal(val01, val02, opr));
        //*/
        
    } // end func cal
    
    public Double ans (String e) {
        /* iterate through the input string and perform calculation */
        // http://stackoverflow.com/questions/196830/what-is-the-easiest-best-most-correct-way-to-iterate-through-the-characters-of-a
        
        String  val = """";
        for (int i = 0; i < e.length(); i++){
            // foreach character in input string
            char c = e.charAt(i);
            
            // deal with space and bracket
            if (c == ' '){ continue; } // 如果不加上這一條，1, 6, 7 test 會當掉
            if (c == '('){ continue; }
            if (c == ')'){ 
                // two cases when encounter ')'
                // case 1: '(1+5)'      
                // => push 5 into value stack and perform calculation
                //                      
                // case 2: '(...(...))' sequential right bracket
                // => perform calculation only
                
                // push value if necessary
                if (!val.equals("""")) { 
                    //System.out.println("")"" + val);
                    stackVal.push(Double.valueOf(val));
                } // end inner if
                
                // perform calculation
                if (stackOpr.size() != 0){
                    calculate();
                } // end if
                
                // initialize value
                val = """";
                continue;
            } // end outer if
            
            // deal with operators
            if (c == '+' || c == '-' || c == '*' || c == '/'){
                // two cases when encounter operation
                // case 1: '5+...'      
                // => push 5 into value stack; push operator into oprator stack
                //                      
                // case 2: '...)+' right after right bracket
                // => push operator into oprator stack
                
                // case 1
                if (!val.equals("""")) {
                    //stackVal.push(val);
                    stackVal.push(Double.valueOf(val));
                    //System.out.println(c + val);
                } // end if
                
                // case 1&2
                stackOpr.push(c);
                
                // initialize value
                val = """";
                continue;
            } // end if
            
            // if nothing
            val += c;
            // http://stackoverflow.com/questions/8172420/how-to-convert-a-char-to-a-string-in-java   
        } // end for loop
        //displayVal();
        //displayOpr();
        if (stackVal.size() != 0){
            return Double.valueOf(stackVal.pop());
        } else {
            return 0.0;
        } // end if-else
    } // end func ans
    
    public static void main(String[] args) {
        Calculator cct = new Calculator();
        System.out.println(cct.ans(""(((1+(12*5))-(3*4))+(4/5))""));
        System.out.println(cct.ans(""(((1+(12*5))-(3*4))+((4/5)))""));
        System.out.println(cct.ans(""((((1+(12*5))-(3*4)))+((4/5)))""));
        System.out.println(cct.ans(""(5/0)""));
        System.out.println(cct.ans(""(-9)+8""));
        System.out.println(cct.ans(""()""));
        //cct.ans02(""(((1+(12*5))-(3*4))+(4/5))"");
        //System.out.println(Double.valueOf(""1"") == -1.0);
        //System.out.println(Double.valueOf(""-1"") == -1.0);
    } // end main
} // 

@eccf0a25c0cc448ec8cce3f41c9a7ced@"
"d04631001","0","0","0","@79ac167f51120749e9f6ac3bd7ea03f5@package calculator;

//import edu.princeton.cs.algs4.Stack;
import java.io.BufferedReader;
import java.io.FileReader;

public class Calculator {
    
    public Double ans(String e) {
        Stack<Double> vals = new Stack<Double>();
        Stack<String> ops = new Stack<String>();
        String[] ee = e.split("" "");
        for (int i = 0; i < ee.length; i++) {
            if (ee[i].equals(""("")) {             
            } else if (ee[i].equals(""+"")) {
                ops.push(ee[i]);
            } else if (ee[i].equals(""-"")) {
                ops.push(ee[i]);
            } else if (ee[i].equals(""*"")) {
                ops.push(ee[i]);
            } else if (ee[i].equals(""/"")) {
                ops.push(ee[i]);
            } else if (ee[i].equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } else if (op.equals(""-"")) {
                    vals.push((-1 * vals.pop()) + vals.pop());
                } else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                } else if (op.equals(""/"")) {
                    vals.push((1 / vals.pop()) * vals.pop());
                }
            } else {
                vals.push(Double.parseDouble(ee[i])); 
            }
        }
        return (vals.pop());
    }

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            Calculator cct = new Calculator();
            String b = br.readLine();
            System.out.print(cct.ans(b));
        }
    }
}

@79ac167f51120749e9f6ac3bd7ea03f5@"
"r04921074","0","0","0","@0043ffb9cb974b8f0a1f142700dcdb1d@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package whateverprj;
//I will fuck you up men!
/**
 *
 * @author LAB228
 */
public class Calculator {

public Double ans (String e) {
      // please replace the following null to the answer you calculated.
      java.util.Stack<String> inf = new java.util.Stack<String>();
      java.util.Stack<String> st1 = new java.util.Stack<String>();//save value
      java.util.Stack<Double> st2 = new java.util.Stack<Double>();//save operator
      String temp;
      String[] cal = e.split("" "");
     
      for(int i=0; i<cal.length ; i++){
              inf.push(cal[cal.length-1-i]);
      }
      
      
      while(!inf.empty()){        
            temp = inf.pop();
         
            if (temp.equals(""("")) ;
            else if (temp.equals(""+"")) st1.push(temp);
            
            else if (temp.equals(""*"")) st1.push(temp);
            else if (temp.equals(""-"")) st1.push(temp);
            else if (temp.equals(""/"")) st1.push(temp);
            else if (temp.equals("")"")){
                 String op = st1.pop();
                if (op.equals(""+"")) st2.push(st2.pop() + st2.pop());
                else if (op.equals(""*"")) st2.push(st2.pop() * st2.pop());
                else if (op.equals(""-"")){ double s = st2.pop();
                    st2.push(st2.pop() - s);}
                else if (op.equals(""/"")){ double s = st2.pop();
                    st2.push(st2.pop() / s);}
            }
             
                else st2.push(Double.parseDouble(temp));
                
        }
          
         //  System.out.print(st2.pop()); 
  
      
      return st2.pop();
}    
}

@0043ffb9cb974b8f0a1f142700dcdb1d@"
"d04631001","0","0.78","105840","@e86b2db77d4f026094a55d5b67063133@package calculator;

import edu.princeton.cs.algs4.Stack;
import java.io.BufferedReader;
import java.io.FileReader;

public class Calculator {
    
    public Double ans(String e) {
        Stack<Double> vals = new Stack<Double>();
        Stack<String> ops = new Stack<String>();
        String[] ee = e.split("" "");
        for (int i = 0; i < ee.length; i++) {
            if (ee[i].equals(""("")) {             
            } else if (ee[i].equals(""+"")) {
                ops.push(ee[i]);
            } else if (ee[i].equals(""-"")) {
                ops.push(ee[i]);
            } else if (ee[i].equals(""*"")) {
                ops.push(ee[i]);
            } else if (ee[i].equals(""/"")) {
                ops.push(ee[i]);
            } else if (ee[i].equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } else if (op.equals(""-"")) {
                    vals.push((-1 * vals.pop()) + vals.pop());
                } else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                } else if (op.equals(""/"")) {
                    vals.push((1 / vals.pop()) * vals.pop());
                }
            } else {
                vals.push(Double.parseDouble(ee[i])); 
            }
        }
        return (vals.pop());
    }

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            Calculator cct = new Calculator();
            String b = br.readLine();
            System.out.print(cct.ans(b));
        }
    }
}

@e86b2db77d4f026094a55d5b67063133@"
"d04631001","10","0.096","105808","@6635e61450c7db2c0b5acaae61502dc9@import java.io.BufferedReader;
import java.io.FileReader;

public class Calculator {
    public Double ans(String e) {
        Stack<Double> vals = new Stack<Double>();
        Stack<String> ops = new Stack<String>();
        String[] ee = e.split("" "");
        for (int i = 0; i < ee.length; i++) {
            if (ee[i].equals(""("")) {             
            } else if (ee[i].equals(""+"")) {
                ops.push(ee[i]);
            } else if (ee[i].equals(""-"")) {
                ops.push(ee[i]);
            } else if (ee[i].equals(""*"")) {
                ops.push(ee[i]);
            } else if (ee[i].equals(""/"")) {
                ops.push(ee[i]);
            } else if (ee[i].equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    vals.push(vals.pop() + vals.pop());
                } else if (op.equals(""-"")) {
                    vals.push((-1 * vals.pop()) + vals.pop());
                } else if (op.equals(""*"")) {
                    vals.push(vals.pop() * vals.pop());
                } else if (op.equals(""/"")) {
                    vals.push((1 / vals.pop()) * vals.pop());
                }
            } else {
                vals.push(Double.parseDouble(ee[i])); 
            }
        }
        return (vals.pop());
    }
}

@6635e61450c7db2c0b5acaae61502dc9@"
"r02b48003","4","0.76","105760","@ead291e499b65a54600c53605f848233@//import edu.princeton.cs.algs4.Stack;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author clint
 */
public class Calculator {
    // for first method
    private Stack<Double>    stackVal = new Stack<Double>();
    private Stack<Character> stackOpr = new Stack<Character>();
    
    public void displayOpr() {
        /* print out stack of operator */
        System.out.println(""Print operand in Stack"");
        for (Character opr : stackOpr) { System.out.print(opr + "" ""); }
        System.out.println();
    } // end func displayOpr
    
    public void displayVal() {
        /* print out stack of value */
        System.out.println(""Print value in Stack"");
        for (Double val : stackVal) { System.out.print(val + "" ""); }
        System.out.println();
    } // end func displayVal
    
    
    //private Double cal(String str01, String str02, Character opr) {
    private Double cal(Double val01, Double val02, Character opr) {
        //Double val01 = Double.valueOf(str01);
        //Double val02 = Double.valueOf(str02);
        Double res = 0.0;
        
        switch(opr) {
            case '+':
                //System.out.println('+');
                res = val01 + val02;
                break;
            case '-':
                //System.out.println('-');
                res = val01 - val02;
                break;
            case '*':
                //System.out.println('*');
                res = val01 * val02;
                break;
            case '/':
                //System.out.println('/');
                //if (Double.valueOf(val02) == 0.0) return;
                res = val01 / val02;
                break;
        } // end switch
        return res;
    } // end function cal
            
    
    private void calculate(){
        /* perform calculation */
        // pop out two value and one operator from the stacks
        Character opr;
        //String val01, val02;
        Double val01, val02;
        Double res;
        //*
        if (stackVal.size() != 0){
            val02 = stackVal.pop();
        } else {
            val02 = null;
        } // end if-else
        
        if (stackVal.size() != 0){
            val01 = stackVal.pop();
        } else {
            val01 = null;
        } // end if-else
        
        // in case something happen
        if (val01 == null || val02 == null) return;
        //*/
        opr = stackOpr.pop();
        //val01 = 10.0;
        //val02 = 20.0;
        // calculate the result and push into stack of values
        //stackVal.push(String.valueOf(cal(val01, val02, opr)));
        stackVal.push(cal(val01, val02, opr));
        //*/
        
    } // end func cal
    
    public Double ans (String e) {
        /* iterate through the input string and perform calculation */
        // http://stackoverflow.com/questions/196830/what-is-the-easiest-best-most-correct-way-to-iterate-through-the-characters-of-a
        
        String  val = """";
        for (int i = 0; i < e.length(); i++){
            // foreach character in input string
            char c = e.charAt(i);
            
            // deal with space and bracket
            if (c == ' '){ continue; } // 如果不加上這一條，1, 6, 7 test 會當掉
            if (c == '('){ continue; }
            if (c == ')'){ 
                // two cases when encounter ')'
                // case 1: '(1+5)'      
                // => push 5 into value stack and perform calculation
                //                      
                // case 2: '(...(...))' sequential right bracket
                // => perform calculation only
                
                // push value if necessary
                if (!val.equals("""")) { 
                    //System.out.println("")"" + val);
                    stackVal.push(Double.parseDouble(val));
                } // end inner if
                
                // perform calculation
                if (stackOpr.size() != 0){
                    calculate();
                } // end if
                
                // initialize value
                val = """";
                continue;
            } // end outer if
            
            // deal with operators
            if (c == '+' || c == '-' || c == '*' || c == '/'){
                // two cases when encounter operation
                // case 1: '5+...'      
                // => push 5 into value stack; push operator into oprator stack
                //                      
                // case 2: '...)+' right after right bracket
                // => push operator into oprator stack
                
                // case 1
                if (!val.equals("""")) {
                    //stackVal.push(val);
                    stackVal.push(Double.parseDouble(val));
                    //System.out.println(c + val);
                } // end if
                
                // case 1&2
                stackOpr.push(c);
                
                // initialize value
                val = """";
                continue;
            } // end if
            
            // if nothing
            val += c;
            // http://stackoverflow.com/questions/8172420/how-to-convert-a-char-to-a-string-in-java   
        } // end for loop
        //displayVal();
        //displayOpr();
        if (stackVal.size() != 0){
            return stackVal.pop();
        } else {
            return 0.0;
        } // end if-else
    } // end func ans
    
    public static void main(String[] args) {
        Calculator cct = new Calculator();
        System.out.println(cct.ans(""(((1+(12*5))-(3*4))+(4/5))""));
        System.out.println(cct.ans(""(1-3)""));
        System.out.println(cct.ans(""(1/3)""));
        System.out.println(cct.ans(""(((1+(12*5))-(3*4))+((4/5)))""));
        System.out.println(cct.ans(""((((1+(12*5))-(3*4)))+((4/5)))""));
        System.out.println(cct.ans(""(5/0)""));
        System.out.println(cct.ans(""(-9)+8""));
        System.out.println(cct.ans(""()""));
        //cct.ans02(""(((1+(12*5))-(3*4))+(4/5))"");
        //System.out.println(Double.valueOf(""1"") == -1.0);
        //System.out.println(Double.valueOf(""-1"") == -1.0);
    } // end main
} // 

@ead291e499b65a54600c53605f848233@"
"r02b48003","4","0.76","105824","@56d220ecaa5303dede1ff7f2ffac8cf3@//import edu.princeton.cs.algs4.Stack;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author clint
 */
public class Calculator {
    // for first method
    private Stack<Double>    stackVal = new Stack<Double>();
    private Stack<Character> stackOpr = new Stack<Character>();
    
    public void displayOpr() {
        /* print out stack of operator */
        System.out.println(""Print operand in Stack"");
        for (Character opr : stackOpr) { System.out.print(opr + "" ""); }
        System.out.println();
    } // end func displayOpr
    
    public void displayVal() {
        /* print out stack of value */
        System.out.println(""Print value in Stack"");
        for (Double val : stackVal) { System.out.print(val + "" ""); }
        System.out.println();
    } // end func displayVal
    
    
    //private Double cal(String str01, String str02, Character opr) {
    private Double cal(Double val01, Double val02, Character opr) {
        //Double val01 = Double.valueOf(str01);
        //Double val02 = Double.valueOf(str02);
        Double res = 0.0;
        
        switch(opr) {
            case '+':
                //System.out.println('+');
                res = val01 + val02;
                break;
            case '-':
                //System.out.println('-');
                res = val01 - val02;
                break;
            case '*':
                //System.out.println('*');
                res = val01 * val02;
                break;
            case '/':
                //System.out.println('/');
                //if (Double.valueOf(val02) == 0.0) return;
                res = val01 / val02;
                break;
        } // end switch
        return res;
    } // end function cal
            
    
    private void calculate(){
        /* perform calculation */
        // pop out two value and one operator from the stacks
        Character opr;
        //String val01, val02;
        Double val01, val02;
        Double res;
        //*
        if (stackVal.size() != 0){
            val02 = stackVal.pop();
        } else {
            val02 = null;
        } // end if-else
        
        if (stackVal.size() != 0){
            val01 = stackVal.pop();
        } else {
            val01 = null;
        } // end if-else
        
        // in case something happen
        if (val01 == null || val02 == null) return;
        //*/
        opr = stackOpr.pop();
        //val01 = 10.0;
        //val02 = 20.0;
        // calculate the result and push into stack of values
        //stackVal.push(String.valueOf(cal(val01, val02, opr)));
        stackVal.push(cal(val01, val02, opr));
        //*/
        
    } // end func cal
    
    public Double ans (String e) {
        /* iterate through the input string and perform calculation */
        // http://stackoverflow.com/questions/196830/what-is-the-easiest-best-most-correct-way-to-iterate-through-the-characters-of-a
        
        String  val = """";
        for (int i = 0; i < e.length(); i++){
            // foreach character in input string
            char c = e.charAt(i);
            
            // deal with space and bracket
            if (c == ' '){ continue; } // 如果不加上這一條，1, 6, 7 test 會當掉
            if (c == '('){ continue; }
            if (c == ')'){ 
                // two cases when encounter ')'
                // case 1: '(1+5)'      
                // => push 5 into value stack and perform calculation
                //                      
                // case 2: '(...(...))' sequential right bracket
                // => perform calculation only
                
                // push value if necessary
                if (!val.equals("""")) { 
                    //System.out.println("")"" + val);
                    stackVal.push(Double.parseDouble(val));
                } // end inner if
                
                // perform calculation
                if (stackOpr.size() != 0){
                    calculate();
                } // end if
                
                // initialize value
                val = """";
                continue;
            } // end outer if
            
            // deal with operators
            if (c == '+' || c == '-' || c == '*' || c == '/'){
                // two cases when encounter operation
                // case 1: '5+...'      
                // => push 5 into value stack; push operator into oprator stack
                //                      
                // case 2: '...)+' right after right bracket
                // => push operator into oprator stack
                
                // case 1
                if (!val.equals("""")) {
                    //stackVal.push(val);
                    stackVal.push(Double.parseDouble(val));
                    //System.out.println(c + val);
                } // end if
                
                // case 1&2
                stackOpr.push(c);
                
                // initialize value
                val = """";
                continue;
            } // end if
            
            // if nothing
            val += c;
            // http://stackoverflow.com/questions/8172420/how-to-convert-a-char-to-a-string-in-java   
        } // end for loop
        //displayVal();
        //displayOpr();
        if (stackVal.size() != 0){
            return stackVal.pop();
        } else {
            return 0.0;
        } // end if-else
    } // end func ans
    /*
    public static void main(String[] args) {
        Calculator cct = new Calculator();
        System.out.println(cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) ""));
        System.out.println(cct.ans(""( ( ( ( 2 / 3 ) + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) ""));
        System.out.println(cct.ans(""(0-3)""));
        System.out.println(cct.ans(""(((1+(12*5))-(3*4))+(4/5))""));
        System.out.println(cct.ans(""(1-3)""));
        System.out.println(cct.ans(""(1/3)""));
        System.out.println(cct.ans(""(((1+(12*5))-(3*4))+((4/5)))""));
        System.out.println(cct.ans(""((((1+(12*5))-(3*4)))+((4/5)))""));
        System.out.println(cct.ans(""(5/0)""));
        System.out.println(cct.ans(""(-9)+8""));
        System.out.println(cct.ans(""()""));
        //cct.ans02(""(((1+(12*5))-(3*4))+(4/5))"");
        //System.out.println(Double.valueOf(""1"") == -1.0);
        //System.out.println(Double.valueOf(""-1"") == -1.0);
    } // end main
    */
} // 

@56d220ecaa5303dede1ff7f2ffac8cf3@"
"r03222054","10","0.1","105616","@ea367e68bf28d697bc682091e101e1a6@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author LinWeiKuan
 */
import java.util.Stack;
import java.util.List;
import java.util.Vector;
import java.lang.Character;
public class Calculator 
{
    public static boolean isNumeric(String str)  
   {  
     try  
     {  
       double d = Double.parseDouble(str);  
     }  
     catch(NumberFormatException nfe)  
     {  
       return false;  
     }  
     return true;  
   }
    
    private Vector <String>postfix = new Vector<String>();
    private Stack<String> temp= new Stack<String>();
    
    public void toPostfix(String inputString)
    {
        String[] inputs = inputString.split("" "");        

        
        for (int i=0; i<inputs.length; i++)
        {
            if(inputs[i].equals(""(""))
             {
                temp.push(""("");
                i++;
                while(!inputs[i].equals("")""))
                {
                    if(isNumeric(inputs[i]))
                    {
                        postfix.add(inputs[i]);
                    }
                    else
                        temp.push(inputs[i]);
                    i++;  
                }
                i--;
             }
            else if(inputs[i].equals("")""))
            {
                while(true)
                {
                    if(temp.peek().equals(""(""))
                    {
                        temp.pop();
                        break;
                    }
                    else
                    {
                        postfix.add(temp.pop());
                    }
                }
              //  continue;
            }
            
            else if (inputs[i].equals(""+""))  
            {

                if (temp.peek().equals(""*"") || temp.peek().equals(""/"") || temp.peek().equals(""+"") || temp.peek().equals(""-""))
                {
                    postfix.add(temp.pop());
                     temp.push(""+"");
                }
                else 
                    temp.push(""+"");
            }

            else if(inputs[i].equals(""-""))  
            {
                if (temp.peek().equals(""*"") || temp.peek().equals(""/"") || temp.peek().equals(""+"") || temp.peek().equals(""-""))
                {
                    postfix.add(temp.pop());
                     temp.push(""-"");
                }
                else 
                    temp.push(""-"");
            }
            else if(inputs[i].equals(""*""))  
            {
                if(!temp.isEmpty())
                {
                    String symbol = temp.peek();
                    if (symbol.equals(""+"") || symbol.equals(""-"") || symbol.equals(""(""))
                     temp.push(""*"");
                    else if (symbol.equals(""*"") || symbol.equals(""/""))
                    {
                     postfix.add(temp.pop());    
                     temp.push(""*"");
                    }
                }
                else
                    temp.push(""*"");
            }
            
            else if(inputs[i].equals(""/""))  
            {
                if(!temp.isEmpty())
                {
                    String symbol = temp.peek();
                    if (symbol.equals(""+"") || symbol.equals(""-"") || symbol.equals(""(""))
                    temp.push(""/"");
                   else if (symbol.equals(""*"") || symbol.equals(""/""))
                   {
                    postfix.add(temp.pop());    
                    temp.push(""/"");
                   }
                }
                else 
                    temp.push(""/"");
            }
            
            else if(isNumeric(inputs[i]))
            {
                   postfix.add(inputs[i]);
            }
            
            else 
            {
               System.out.print(""error"");
                break;
            }
        }
     while (!temp.isEmpty() )   
     {
         postfix.add(temp.pop());
     }
     
     for (int i=0; i< postfix.size(); i++)
     {
      //   System.out.print(postfix.get(i));
     }
     
    }

    public Double ans( String inputString)
    {
        toPostfix(inputString);
        Stack <Double>values = new Stack<Double>();
        for(int i=0; i<postfix.size(); i++)
        {
            if(isNumeric(postfix.get(i)))
            {
                values.push(Double.parseDouble(postfix.get(i)));
            }
            else if(postfix.get(i).equals(""+""))  
            {
                    double val1=values.pop();
                    double val2=values.pop();
                    values.push(val1+val2);
            }
 
            else if(postfix.get(i).equals(""-""))  
            {
                    double val1=values.pop();
                    double val2=values.pop();
                    values.push(val2-val1);
            }
                       
            else if(postfix.get(i).equals(""*""))  
            {
                    double val1=values.pop();
                    double val2=values.pop();
                    values.push(val1*val2);
            }
            
            else if(postfix.get(i).equals(""/""))  
            {
                    double val1=values.pop();
                    double val2=values.pop();
                    values.push(val2/val1);
            } 
        }
        return values.get(0);
    }
    public static void main(String[] args) 
    {
       Calculator x= new Calculator();
      double z;
        z = x.ans(""( ( 1 + 2 ) - 3 ) * 4 "");
       System.out.print(""\n""+z);

    }
}

@ea367e68bf28d697bc682091e101e1a6@"
"r02b48003","10","0.098","104256","@0cc415bfe75b32d6fc999b13654b156a@//import edu.princeton.cs.algs4.Stack;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author clint
 */
public class Calculator {
    private Stack<String> stackOpr = new Stack<String>();
    private Stack<Double> stackVal = new Stack<Double>();
    
    public Double ans(String e){
        // split the Arithmetic expression
        String[] exprs = e.split("" "");        
        for (String s : exprs) {
            //System.out.println(s);
            
            // ignore the left bracket
            if (s.equals(""("")) { continue; }
            
            // push each operator into the stack of operators
            if (s.equals(""+"") || s.equals(""-"") || s.equals(""*"") || s.equals(""/"")) {
                stackOpr.push(s);
                continue;
            } // end if
            
            // calculate if right charactor
            if (s.equals("")"")) {
                Double res   = 0.0;
                Double val02 = stackVal.pop();
                Double val01 = stackVal.pop();
                String opr   = stackOpr.pop();
                if (opr.equals(""+"")){ res = val01 + val02; }
                if (opr.equals(""-"")){ res = val01 - val02; }
                if (opr.equals(""*"")){ res = val01 * val02; }
                if (opr.equals(""/"")){ res = val01 / val02; }
                stackVal.push(res);
                continue;
            } // end if
            
            // non of above, the string contains the value
            // push the value into the stack of value
            stackVal.push(Double.valueOf(s));
            
        } // end for loop
        
        // return the value remains in the stack of value
        // ideally, the stack should contain only
        return stackVal.pop();
    } // end func ans
    
    public static void main(String[] args){
        Calculator cct = new Calculator();
        //cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) "");
        System.out.println(cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) ""));
    } // end func main
}

@0cc415bfe75b32d6fc999b13654b156a@"
"r02b48003","4","0.75","105808","@025d08997be516462dabbe6c3556ba1d@//import edu.princeton.cs.algs4.Stack;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author clint
 */
public class Calculator {
    // for first method
    private Stack<Double> stackVal = new Stack<Double>();
    private Stack<String> stackOpr = new Stack<String>();
    
    public void displayOpr() {
        /* print out stack of operator */
        System.out.println(""Print operand in Stack"");
        for (String opr : stackOpr) { System.out.print(opr + "" ""); }
        System.out.println();
    } // end func displayOpr
    
    public void displayVal() {
        /* print out stack of value */
        System.out.println(""Print value in Stack"");
        for (Double val : stackVal) { System.out.print(val + "" ""); }
        System.out.println();
    } // end func displayVal
    
    public Double ans (String e) {
        /* iterate through the input string and perform calculation */
        // http://stackoverflow.com/questions/196830/what-is-the-easiest-best-most-correct-way-to-iterate-through-the-characters-of-a
        
        String  val = """";
        for (int i = 0; i < e.length(); i++){
            // foreach character in input string
            char c = e.charAt(i);
            
            // deal with space and bracket
            if (c == ' '){ continue; } // 如果不加上這一條，1, 6, 7 test 會當掉
            if (c == '('){ continue; }
            if (c == ')'){ 
                // two cases when encounter ')'
                // case 1: '(1+5)'      
                // => push 5 into value stack and perform calculation
                //                      
                // case 2: '(...(...))' sequential right bracket
                // => perform calculation only
                
                // push value if necessary
                if (!val.equals("""")) { 
                    //System.out.println("")"" + val);
                    stackVal.push(Double.parseDouble(val));
                } // end inner if
                
                // perform calculation
                if (stackOpr.size() != 0){
                    Double res   = 0.0;
                    Double val02 = stackVal.pop();
                    Double val01 = stackVal.pop();
                    String opr   = stackOpr.pop();
                    if (opr.equals(""+"")){ res = val01 + val02; }
                    if (opr.equals(""-"")){ res = val01 - val02; }
                    if (opr.equals(""*"")){ res = val01 * val02; }
                    if (opr.equals(""/"")){ res = val01 / val02; }
                    stackVal.push(res);
                } // end if
                
                // initialize value
                val = """";
                continue;
            } // end outer if
            
            // deal with operators
            if (c == '+' || c == '-' || c == '*' || c == '/'){
                // two cases when encounter operation
                // case 1: '5+...'      
                // => push 5 into value stack; push operator into oprator stack
                //                      
                // case 2: '...)+' right after right bracket
                // => push operator into oprator stack
                
                // case 1
                if (!val.equals("""")) {
                    //stackVal.push(val);
                    stackVal.push(Double.parseDouble(val));
                    //System.out.println(c + val);
                } // end if
                
                // case 1&2
                stackOpr.push(String.valueOf(c));
                
                // initialize value
                val = """";
                continue;
            } // end if
            
            // if nothing
            val += c;
            // http://stackoverflow.com/questions/8172420/how-to-convert-a-char-to-a-string-in-java   
        } // end for loop
        
        return stackVal.pop();
    } // end func ans
    //*
    public static void main(String[] args) {
        Calculator cct = new Calculator();
        System.out.println(cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) ""));
        System.out.println(cct.ans(""( ( ( ( 2 / 3 ) + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) ""));
        System.out.println(cct.ans(""(0-3)""));
        System.out.println(cct.ans(""(((1+(12*5))-(3*4))+(4/5))""));
        System.out.println(cct.ans(""(1-3)""));
        System.out.println(cct.ans(""(1/3)""));
        System.out.println(cct.ans(""(((1+(12*5))-(3*4))+((4/5)))""));
        System.out.println(cct.ans(""((((1+(12*5))-(3*4)))+((4/5)))""));
    } // end main
    //*/
} // 

@025d08997be516462dabbe6c3556ba1d@"
"b03611038","10","0.098","105808","@7e37c61593a753baa21db5a539b4daba@import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Scanner;

public class Calculator {
    public static void main(String args[]) throws Exception {
        
    }
    public  Double ans (String e) {
        String[]  q = e.split("" "");
        int i =0;
        int x=0;
        for(String w: q)
        {
            i++;
        }
    Stack<String> ops = new Stack<>();
    Stack<Double> vals = new Stack<>();
    while (x<i) {
    String s = q[x];
    if (s.equals(""("")) ;
    else if (s.equals(""+"")) ops.push(s);
    else if (s.equals(""-"")) ops.push(s);
    else if (s.equals(""*"")) ops.push(s);
    else if (s.equals(""/"")) ops.push(s);
    else if (s.equals("")""))
    {
    String op = ops.pop();
    if (op.equals(""+"")) vals.push(vals.pop() + vals.pop());
    else if (op.equals(""-"")) vals.push(-(vals.pop() - vals.pop()));
    else if (op.equals(""*"")) vals.push(vals.pop() * vals.pop());
    else if (op.equals(""/"")) vals.push(1/(vals.pop() / vals.pop()));
    }
    else vals.push(Double.parseDouble(s));
    x++;
    }
      // please replace the following null to the answer you calculated.
      return vals.pop();
    }
}


@7e37c61593a753baa21db5a539b4daba@"
"r04228027","10","0.098","105520","@e482e440272d305295e2d46985f2e460@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author chinweihsu
 */
public class Calculator {
    
    public class stack {
        private item head;
        
        private class item {
            String value;
            item next;
        }
        
        stack() {
            head = null;
        }
        
        public void push(String v){
             item insertItem = new item();
             insertItem.value = v;
             insertItem.next = head;
             head = insertItem;
        }
        
        public String pop(){
            if(!isEmpty()){
                item popItem = head;
                head = popItem.next;
                return popItem.value;
            }else
                return ""stack is empty"";
        }
        
        public boolean isEmpty(){
            return head == null;
        }
        public void show(){
            item temp = head;
            while(temp!=null){
                System.out.printf(temp.value);
                temp = temp.next;
            }
            System.out.printf(""\n"");
        }
        
    }
    
    public double ans (String e){
        double ans =0;
        stack theStack = new stack();
        String[] eq = e.split("" "");
        //for(String i :eq)
            //System.out.printf(i);
        //System.out.print(""\n"");
        for(int i=0; i<eq.length; i++){
            if(! eq[i].equals("")"")){
                if(! eq[i].equals(""("")){
                    theStack.push(eq[i]);
                    //System.out.printf(""push %s in stack\n"",eq[i]);
                    //theStack.show();
                }
            }
            else {
                double a = Double.parseDouble(theStack.pop());
                //System.out.printf(""pop %f from stack\n"",a);
                String m = theStack.pop();
                //System.out.printf(""pop %s from stack\n"",m);
                double b = Double.parseDouble(theStack.pop());
                //System.out.printf(""pop %f from stack\n"",b);
                    switch (m) {
                        case ""+"":
                            theStack.push(String.valueOf(b+a));
                            //System.out.printf(""push %s in stack\n"",b+a);
                            //theStack.show();
                            continue;
                        case ""-"":
                            theStack.push(String.valueOf(b-a));
                            //System.out.printf(""push %s in stack\n"",b-a);
                            continue;
                        case ""*"":
                            theStack.push(String.valueOf(b*a));
                            //System.out.printf(""push %s in stack\n"",b*a);
                            continue;
                        case ""/"":
                            theStack.push(String.valueOf(b/a));
                            //System.out.printf(""push %s in stack\n"",b/a);
                            continue;
                    }
            }
        }
        return Double.parseDouble(theStack.pop());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        
      Calculator a = new Calculator();
      System.out.print(a.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) ""));
              
    }
    
}

@e482e440272d305295e2d46985f2e460@"
"r04631035","0","0.098","105520","@feb9521d275d393a2402adc5f86274ba@    // please replace the following null to the answer you calculated.
        String line;
        String target = """";

        while ((line = in.readLine()) != null) {
            target += line + "" "";
        }
        String[] numbersArray = target.split("" "");
        //System.out.println(numbersArray[3]);
        Stack<String> S1 = new Stack<String>();
        Stack<String> S2 = new Stack<String>();
        Stack<String> S3 = new Stack<String>();
        Stack<String> S4 = new Stack<String>();
        int lon = numbersArray.length;

        for (int i = 0; i < lon; i++) {

            if (""+"".equals(numbersArray[i]) || ""-"".equals(numbersArray[i]) || ""*"".equals(numbersArray[i]) || ""/"".equals(numbersArray[i])) {
                S1.push(numbersArray[i]);

            } else if (""("".equals(numbersArray[i])) {
                S1.push(numbersArray[i]);

            } else if ("")"".equals(numbersArray[i])) {
                while (S1.peek() != ""("") {
                    S2.push(S1.pop());
                    S1.pop();
                    break;
                }
            } else if (i == (lon - 1)) {
                while (!S1.empty()) {
                    S2.push(S1.pop());
                    break;
                }
            } else {
                S2.push(numbersArray[i]);
            }
        }

        System.out.println(S2);
        while (!S2.empty()) {   //逆續輸出
            S3.push(S2.pop());
        }
        System.out.println(S3);

        while (!S3.empty()) {   //處理後綴
            String pop = S3.pop();
            if (""+"".equals(pop)) {
                double n1 = Double.parseDouble(S4.pop());
                double n2 = Double.parseDouble(S4.pop());
                double n3 = n2 + n1;
                S4.push(String.valueOf(n3));
            } else if (""-"".equals(pop)) {
                double n1 = Double.parseDouble(S4.pop());
                double n2 = Double.parseDouble(S4.pop());
                double n3 = n2 - n1;
                S4.push(String.valueOf(n3));
            } else if (""*"".equals(pop)) {
                double n1 = Double.parseDouble(S4.pop());
                double n2 = Double.parseDouble(S4.pop());
                double n3 = n2 * n1;
                S4.push(String.valueOf(n3));
            } else if (""/"".equals(pop)) {
                double n1 = Double.parseDouble(S4.pop());
                double n2 = Double.parseDouble(S4.pop());
                double n3 = n2 / n1;
                S4.push(String.valueOf(n3));
            } else {
                S4.push(pop);
            }
        }
        
        double ans = Double.parseDouble(S4.pop()); 
        return ans;
@feb9521d275d393a2402adc5f86274ba@"
"b01705003","0","0.155","172192","@b0e960dbc0103a47afc61a1d4618ddae@import java.io.FileReader;
import java.io.BufferedReader;
import java.io.Array;
import java.util.Arrays;
import java.util.Scanner;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;


public class Calculator {
    public static void main(String[] args) throws Exception {
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
			String strNum = br.readLine();
        }
    }
}

public Double ans (String e) {
      return eval(strNum)
}

public static double eval(final String str) {
    return new Object() {
        int pos = -1, ch;

        void eatChar() {
            ch = (++pos < str.length()) ? str.charAt(pos) : -1;
        }

        boolean eatChar(int ch) {
            if (this.ch == ch) {
                eatChar();
                return true;
            }
            return false;
        }

        void eatSpace() {
            while (Character.isWhitespace(ch)) eatChar();
        }

        double parse() {
            eatChar();
            double x = parseExpression();
            if (pos < str.length()) throw new RuntimeException(""Unexpected: "" + (char)ch);
            return x;
        }

        // Grammar:
        // expression = term | expression `+` term | expression `-` term
        // term = factor | term `*` factor | term `/` factor
        // factor = `+` factor | `-` factor | `(` expression `)`
        //        | number | functionName factor | factor `^` factor

        double parseExpression() {
            double x = parseTerm();
            for (;;) {
                eatSpace();
                if      (eatChar('+')) x += parseTerm(); // addition
                else if (eatChar('-')) x -= parseTerm(); // subtraction
                else return x;
            }
        }

        double parseTerm() {
            double x = parseFactor();
            for (;;) {
                eatSpace();
                if      (eatChar('*')) x *= parseFactor(); // multiplication
                else if (eatChar('/')) x /= parseFactor(); // division
                else return x;
            }
        }

        double parseFactor() {
            eatSpace();
            if (eatChar('+')) return parseFactor(); // unary plus
            if (eatChar('-')) return -parseFactor(); // unary minus

            double x;
            int startPos = this.pos;
            if (eatChar('(')) { // parentheses
                x = parseExpression();
                eatChar(')');
            } else if ((ch >= '0' && ch <= '9') || ch == '.') { // numbers
                while ((ch >= '0' && ch <= '9') || ch == '.') eatChar();
                x = Double.parseDouble(str.substring(startPos, this.pos));
            } else if (ch >= 'a' && ch <= 'z') { // functions
                while (ch >= 'a' && ch <= 'z') eatChar();
                String func = str.substring(startPos, this.pos);
                x = parseFactor();
                if (func.equals(""sqrt"")) x = Math.sqrt(x);
                else if (func.equals(""sin"")) x = Math.sin(Math.toRadians(x));
                else if (func.equals(""cos"")) x = Math.cos(Math.toRadians(x));
                else if (func.equals(""tan"")) x = Math.tan(Math.toRadians(x));
                else throw new RuntimeException(""Unknown function: "" + func);
            } else {
                throw new RuntimeException(""Unexpected: "" + (char)ch);
            }

            eatSpace();
            if (eatChar('^')) x = Math.pow(x, parseFactor()); // exponentiation

            return x;
        }
    }.parse();
}
@b0e960dbc0103a47afc61a1d4618ddae@"
"b01705003","0","1.39","177920","@6d4a6474ba7c48382f40cb826988cadd@import java.io.FileReader;
import java.io.BufferedReader;
import java.io.Array;


public class Calculator {
    public static void main(String[] args) throws Exception {
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
			String strNum = br.readLine();
        }
    }
}

public Double ans (String e) {
      return eval(strNum)
}

public static double eval(final String str) {
    return new Object() {
        int pos = -1, ch;

        void eatChar() {
            ch = (++pos < str.length()) ? str.charAt(pos) : -1;
        }

        boolean eatChar(int ch) {
            if (this.ch == ch) {
                eatChar();
                return true;
            }
            return false;
        }

        void eatSpace() {
            while (Character.isWhitespace(ch)) eatChar();
        }

        double parse() {
            eatChar();
            double x = parseExpression();
            if (pos < str.length()) throw new RuntimeException(""Unexpected: "" + (char)ch);
            return x;
        }

        // Grammar:
        // expression = term | expression `+` term | expression `-` term
        // term = factor | term `*` factor | term `/` factor
        // factor = `+` factor | `-` factor | `(` expression `)`
        //        | number | functionName factor | factor `^` factor

        double parseExpression() {
            double x = parseTerm();
            for (;;) {
                eatSpace();
                if      (eatChar('+')) x += parseTerm(); // addition
                else if (eatChar('-')) x -= parseTerm(); // subtraction
                else return x;
            }
        }

        double parseTerm() {
            double x = parseFactor();
            for (;;) {
                eatSpace();
                if      (eatChar('*')) x *= parseFactor(); // multiplication
                else if (eatChar('/')) x /= parseFactor(); // division
                else return x;
            }
        }

        double parseFactor() {
            eatSpace();
            if (eatChar('+')) return parseFactor(); // unary plus
            if (eatChar('-')) return -parseFactor(); // unary minus

            double x;
            int startPos = this.pos;
            if (eatChar('(')) { // parentheses
                x = parseExpression();
                eatChar(')');
            } else if ((ch >= '0' && ch <= '9') || ch == '.') { // numbers
                while ((ch >= '0' && ch <= '9') || ch == '.') eatChar();
                x = Double.parseDouble(str.substring(startPos, this.pos));
            } else if (ch >= 'a' && ch <= 'z') { // functions
                while (ch >= 'a' && ch <= 'z') eatChar();
                String func = str.substring(startPos, this.pos);
                x = parseFactor();
                if (func.equals(""sqrt"")) x = Math.sqrt(x);
                else if (func.equals(""sin"")) x = Math.sin(Math.toRadians(x));
                else if (func.equals(""cos"")) x = Math.cos(Math.toRadians(x));
                else if (func.equals(""tan"")) x = Math.tan(Math.toRadians(x));
                else throw new RuntimeException(""Unknown function: "" + func);
            } else {
                throw new RuntimeException(""Unexpected: "" + (char)ch);
            }

            eatSpace();
            if (eatChar('^')) x = Math.pow(x, parseFactor()); // exponentiation

            return x;
        }
    }.parse();
}
@6d4a6474ba7c48382f40cb826988cadd@"
"r04631035","0","1.39","177920","@47e079335520c03d2e0825bcb9547b31@    public Double ans (String e) {
    // please replace the following null to the answer you calculated.
        String line;
        String target = """";

        while ((line = in.readLine()) != null) {
            target += line + "" "";
        }
        String[] numbersArray = target.split("" "");
        //System.out.println(numbersArray[3]);
        Stack<String> S1 = new Stack<String>();
        Stack<String> S2 = new Stack<String>();
        Stack<String> S3 = new Stack<String>();
        Stack<String> S4 = new Stack<String>();
        int lon = numbersArray.length;

        for (int i = 0; i < lon; i++) {

            if (""+"".equals(numbersArray[i]) || ""-"".equals(numbersArray[i]) || ""*"".equals(numbersArray[i]) || ""/"".equals(numbersArray[i])) {
                S1.push(numbersArray[i]);

            } else if (""("".equals(numbersArray[i])) {
                S1.push(numbersArray[i]);

            } else if ("")"".equals(numbersArray[i])) {
                while (S1.peek() != ""("") {
                    S2.push(S1.pop());
                    S1.pop();
                    break;
                }
            } else if (i == (lon - 1)) {
                while (!S1.empty()) {
                    S2.push(S1.pop());
                    break;
                }
            } else {
                S2.push(numbersArray[i]);
            }
        }

        System.out.println(S2);
        while (!S2.empty()) {   //逆續輸出
            S3.push(S2.pop());
        }
        System.out.println(S3);

        while (!S3.empty()) {   //處理後綴
            String pop = S3.pop();
            if (""+"".equals(pop)) {
                double n1 = Double.parseDouble(S4.pop());
                double n2 = Double.parseDouble(S4.pop());
                double n3 = n2 + n1;
                S4.push(String.valueOf(n3));
            } else if (""-"".equals(pop)) {
                double n1 = Double.parseDouble(S4.pop());
                double n2 = Double.parseDouble(S4.pop());
                double n3 = n2 - n1;
                S4.push(String.valueOf(n3));
            } else if (""*"".equals(pop)) {
                double n1 = Double.parseDouble(S4.pop());
                double n2 = Double.parseDouble(S4.pop());
                double n3 = n2 * n1;
                S4.push(String.valueOf(n3));
            } else if (""/"".equals(pop)) {
                double n1 = Double.parseDouble(S4.pop());
                double n2 = Double.parseDouble(S4.pop());
                double n3 = n2 / n1;
                S4.push(String.valueOf(n3));
            } else {
                S4.push(pop);
            }
        }
        
        double ans = Double.parseDouble(S4.pop()); 
        return ans;
    }
@47e079335520c03d2e0825bcb9547b31@"
"b01705003","0","1.39","177920","@2f0e52053aecadb7aa1f539ee85ddb64@import java.io.FileReader;
import java.io.BufferedReader;
import java.io.Array;


public class Calculator {
    public static void main(String[] args) throws Exception {
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
			String strNum = br.readLine();
        }
    }
	
	public Double ans (String e) {
      return eval(strNum)
	}
	
}


public static double eval(final String str) {
    return new Object() {
        int pos = -1, ch;

        void eatChar() {
            ch = (++pos < str.length()) ? str.charAt(pos) : -1;
        }

        boolean eatChar(int ch) {
            if (this.ch == ch) {
                eatChar();
                return true;
            }
            return false;
        }

        void eatSpace() {
            while (Character.isWhitespace(ch)) eatChar();
        }

        double parse() {
            eatChar();
            double x = parseExpression();
            if (pos < str.length()) throw new RuntimeException(""Unexpected: "" + (char)ch);
            return x;
        }

        // Grammar:
        // expression = term | expression `+` term | expression `-` term
        // term = factor | term `*` factor | term `/` factor
        // factor = `+` factor | `-` factor | `(` expression `)`
        //        | number | functionName factor | factor `^` factor

        double parseExpression() {
            double x = parseTerm();
            for (;;) {
                eatSpace();
                if      (eatChar('+')) x += parseTerm(); // addition
                else if (eatChar('-')) x -= parseTerm(); // subtraction
                else return x;
            }
        }

        double parseTerm() {
            double x = parseFactor();
            for (;;) {
                eatSpace();
                if      (eatChar('*')) x *= parseFactor(); // multiplication
                else if (eatChar('/')) x /= parseFactor(); // division
                else return x;
            }
        }

        double parseFactor() {
            eatSpace();
            if (eatChar('+')) return parseFactor(); // unary plus
            if (eatChar('-')) return -parseFactor(); // unary minus

            double x;
            int startPos = this.pos;
            if (eatChar('(')) { // parentheses
                x = parseExpression();
                eatChar(')');
            } else if ((ch >= '0' && ch <= '9') || ch == '.') { // numbers
                while ((ch >= '0' && ch <= '9') || ch == '.') eatChar();
                x = Double.parseDouble(str.substring(startPos, this.pos));
            } else if (ch >= 'a' && ch <= 'z') { // functions
                while (ch >= 'a' && ch <= 'z') eatChar();
                String func = str.substring(startPos, this.pos);
                x = parseFactor();
                if (func.equals(""sqrt"")) x = Math.sqrt(x);
                else if (func.equals(""sin"")) x = Math.sin(Math.toRadians(x));
                else if (func.equals(""cos"")) x = Math.cos(Math.toRadians(x));
                else if (func.equals(""tan"")) x = Math.tan(Math.toRadians(x));
                else throw new RuntimeException(""Unknown function: "" + func);
            } else {
                throw new RuntimeException(""Unexpected: "" + (char)ch);
            }

            eatSpace();
            if (eatChar('^')) x = Math.pow(x, parseFactor()); // exponentiation

            return x;
        }
    }.parse();
}
@2f0e52053aecadb7aa1f539ee85ddb64@"
"b01705003","0","0.098","105520","@267ef2cc8d1f1b5c190a21b36d1ec686@import java.io.FileReader;
import java.io.BufferedReader;
import java.io.Array;


 public static void main(String[] args) throws Exception {
    try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
	String strNum = br.readLine();
    }
}
	
public Double ans (String e) {
    return eval(strNum)
}

public static double eval(final String str) {
    return new Object() {
        int pos = -1, ch;

        void eatChar() {
            ch = (++pos < str.length()) ? str.charAt(pos) : -1;
        }

        boolean eatChar(int ch) {
            if (this.ch == ch) {
                eatChar();
                return true;
            }
            return false;
        }

        void eatSpace() {
            while (Character.isWhitespace(ch)) eatChar();
        }

        double parse() {
            eatChar();
            double x = parseExpression();
            if (pos < str.length()) throw new RuntimeException(""Unexpected: "" + (char)ch);
            return x;
        }

        // Grammar:
        // expression = term | expression `+` term | expression `-` term
        // term = factor | term `*` factor | term `/` factor
        // factor = `+` factor | `-` factor | `(` expression `)`
        //        | number | functionName factor | factor `^` factor

        double parseExpression() {
            double x = parseTerm();
            for (;;) {
                eatSpace();
                if      (eatChar('+')) x += parseTerm(); // addition
                else if (eatChar('-')) x -= parseTerm(); // subtraction
                else return x;
            }
        }

        double parseTerm() {
            double x = parseFactor();
            for (;;) {
                eatSpace();
                if      (eatChar('*')) x *= parseFactor(); // multiplication
                else if (eatChar('/')) x /= parseFactor(); // division
                else return x;
            }
        }

        double parseFactor() {
            eatSpace();
            if (eatChar('+')) return parseFactor(); // unary plus
            if (eatChar('-')) return -parseFactor(); // unary minus

            double x;
            int startPos = this.pos;
            if (eatChar('(')) { // parentheses
                x = parseExpression();
                eatChar(')');
            } else if ((ch >= '0' && ch <= '9') || ch == '.') { // numbers
                while ((ch >= '0' && ch <= '9') || ch == '.') eatChar();
                x = Double.parseDouble(str.substring(startPos, this.pos));
            } else if (ch >= 'a' && ch <= 'z') { // functions
                while (ch >= 'a' && ch <= 'z') eatChar();
                String func = str.substring(startPos, this.pos);
                x = parseFactor();
                if (func.equals(""sqrt"")) x = Math.sqrt(x);
                else if (func.equals(""sin"")) x = Math.sin(Math.toRadians(x));
                else if (func.equals(""cos"")) x = Math.cos(Math.toRadians(x));
                else if (func.equals(""tan"")) x = Math.tan(Math.toRadians(x));
                else throw new RuntimeException(""Unknown function: "" + func);
            } else {
                throw new RuntimeException(""Unexpected: "" + (char)ch);
            }

            eatSpace();
            if (eatChar('^')) x = Math.pow(x, parseFactor()); // exponentiation

            return x;
        }
    }.parse();
}
@267ef2cc8d1f1b5c190a21b36d1ec686@"
"r04631035","0","0.155","172192","@39749e3d4434e65069f4cc90ea868974@public Double ans (String e) {
    // please replace the following null to the answer you calculated.
        String line;
        String target = """";

        //while ((line = in.readLine()) != null) {
        //    target += line + "" "";
        //}
        String[] numbersArray = e.split("" "");
        //System.out.println(numbersArray[3]);
        Stack<String> S1 = new Stack<String>();
        Stack<String> S2 = new Stack<String>();
        Stack<String> S3 = new Stack<String>();
        Stack<String> S4 = new Stack<String>();
        int lon = numbersArray.length;

        for (int i = 0; i < lon; i++) {

            if (""+"".equals(numbersArray[i]) || ""-"".equals(numbersArray[i]) || ""*"".equals(numbersArray[i]) || ""/"".equals(numbersArray[i])) {
                S1.push(numbersArray[i]);

            } else if (""("".equals(numbersArray[i])) {
                S1.push(numbersArray[i]);

            } else if ("")"".equals(numbersArray[i])) {
                while (S1.peek() != ""("") {
                    S2.push(S1.pop());
                    S1.pop();
                    break;
                }
            } else if (i == (lon - 1)) {
                while (!S1.empty()) {
                    S2.push(S1.pop());
                    break;
                }
            } else {
                S2.push(numbersArray[i]);
            }
        }

        //System.out.println(S2);
        while (!S2.empty()) {   //逆續輸出
            S3.push(S2.pop());
        }
        //System.out.println(S3);

        while (!S3.empty()) {   //處理後綴
            String pop = S3.pop();
            if (""+"".equals(pop)) {
                double n1 = Double.parseDouble(S4.pop());
                double n2 = Double.parseDouble(S4.pop());
                double n3 = n2 + n1;
                S4.push(String.valueOf(n3));
            } else if (""-"".equals(pop)) {
                double n1 = Double.parseDouble(S4.pop());
                double n2 = Double.parseDouble(S4.pop());
                double n3 = n2 - n1;
                S4.push(String.valueOf(n3));
            } else if (""*"".equals(pop)) {
                double n1 = Double.parseDouble(S4.pop());
                double n2 = Double.parseDouble(S4.pop());
                double n3 = n2 * n1;
                S4.push(String.valueOf(n3));
            } else if (""/"".equals(pop)) {
                double n1 = Double.parseDouble(S4.pop());
                double n2 = Double.parseDouble(S4.pop());
                double n3 = n2 / n1;
                S4.push(String.valueOf(n3));
            } else {
                S4.push(pop);
            }
        }
        
        double ans = Double.parseDouble(S4.pop()); 
        return ans;
    }
    public static void main(String[] args) {
        // TODO code application logic here
        In in = new In(args[0]);
        Calculator ca = new Calculator();
        System.out.println(ca.ans(in.readLine()));

    }
@39749e3d4434e65069f4cc90ea868974@"
"r04631035","10","0.093","105520","@0c31a7a118c5e4677aa464cfdbb34052@
import java.util.Stack;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author cypan
 */
public class Calculator {

    
    public Double ans (String e) {
    // please replace the following null to the answer you calculated.
        String line;
        String target = """";

        //while ((line = in.readLine()) != null) {
        //    target += line + "" "";
        //}
        String[] numbersArray = e.split("" "");
        //System.out.println(numbersArray[3]);
        Stack<String> S1 = new Stack<String>();
        Stack<String> S2 = new Stack<String>();
        Stack<String> S3 = new Stack<String>();
        Stack<String> S4 = new Stack<String>();
        int lon = numbersArray.length;

        for (int i = 0; i < lon; i++) {

            if (""+"".equals(numbersArray[i]) || ""-"".equals(numbersArray[i]) || ""*"".equals(numbersArray[i]) || ""/"".equals(numbersArray[i])) {
                S1.push(numbersArray[i]);

            } else if (""("".equals(numbersArray[i])) {
                S1.push(numbersArray[i]);

            } else if ("")"".equals(numbersArray[i])) {
                while (S1.peek() != ""("") {
                    S2.push(S1.pop());
                    S1.pop();
                    break;
                }
            } else if (i == (lon - 1)) {
                while (!S1.empty()) {
                    S2.push(S1.pop());
                    break;
                }
            } else {
                S2.push(numbersArray[i]);
            }
        }

        //System.out.println(S2);
        while (!S2.empty()) {   //逆續輸出
            S3.push(S2.pop());
        }
        //System.out.println(S3);

        while (!S3.empty()) {   //處理後綴
            String pop = S3.pop();
            if (""+"".equals(pop)) {
                double n1 = Double.parseDouble(S4.pop());
                double n2 = Double.parseDouble(S4.pop());
                double n3 = n2 + n1;
                S4.push(String.valueOf(n3));
            } else if (""-"".equals(pop)) {
                double n1 = Double.parseDouble(S4.pop());
                double n2 = Double.parseDouble(S4.pop());
                double n3 = n2 - n1;
                S4.push(String.valueOf(n3));
            } else if (""*"".equals(pop)) {
                double n1 = Double.parseDouble(S4.pop());
                double n2 = Double.parseDouble(S4.pop());
                double n3 = n2 * n1;
                S4.push(String.valueOf(n3));
            } else if (""/"".equals(pop)) {
                double n1 = Double.parseDouble(S4.pop());
                double n2 = Double.parseDouble(S4.pop());
                double n3 = n2 / n1;
                S4.push(String.valueOf(n3));
            } else {
                S4.push(pop);
            }
        }
        
        double ans = Double.parseDouble(S4.pop()); 
        return ans;
    }
    public static void main(String[] args) {
        // TODO code application logic here
        In in = new In(args[0]);
        Calculator ca = new Calculator();
        System.out.println(ca.ans(in.readLine()));

    }

}

@0c31a7a118c5e4677aa464cfdbb34052@"
"b01705003","0","0.098","105520","@32cfc897b548dd2a38f17d5cbacfcab6@import java.io.FileReader;
import java.io.BufferedReader;
import java.io.IOException;
public class test {
    public static void main(String [] argv) throws IOException {
        FileReader fr = new FileReader(""FileName"");
        BufferedReader br = newBufferedReader(fr);
        while (br.ready()) {
            System.out.println(br.readLine());
        }
        fr.close();
    }
}

@32cfc897b548dd2a38f17d5cbacfcab6@"
"b01705003","0","0.155","172192","@bbdead75bb6e887d97f5af773ae15a3e@public class HelloWorld {
    public static void main(String[] args) {
        System.out.println(""Hello! World!"");
    }
}
@bbdead75bb6e887d97f5af773ae15a3e@"
"b01705003","0","0.098","105520","@f5317f99224745240ab0c5d462cee865@public class Calculator {
    public static void main(String[] args) {
        System.out.println(""Hello! World!"");
    }
}
@f5317f99224745240ab0c5d462cee865@"
"r04921074","10","0.097","105520","@912983bf0ca28f9928bfb9ef9cbd6945@public class Calculator {

public Double ans (String e) {
      // please replace the following null to the answer you calculated.
      java.util.Stack<String> inf = new java.util.Stack<String>();
      java.util.Stack<String> st1 = new java.util.Stack<String>();//save value
      java.util.Stack<Double> st2 = new java.util.Stack<Double>();//save operator
      String temp;
      String[] cal = e.split("" "");
     
      for(int i=0; i<cal.length ; i++){
              inf.push(cal[cal.length-1-i]);
      }
      
      
      while(!inf.empty()){        
            temp = inf.pop();
         
            if (temp.equals(""("")) ;
            else if (temp.equals(""+"")) st1.push(temp);
            
            else if (temp.equals(""*"")) st1.push(temp);
            else if (temp.equals(""-"")) st1.push(temp);
            else if (temp.equals(""/"")) st1.push(temp);
            else if (temp.equals("")"")){
                 String op = st1.pop();
                if (op.equals(""+"")) st2.push(st2.pop() + st2.pop());
                else if (op.equals(""*"")) st2.push(st2.pop() * st2.pop());
                else if (op.equals(""-"")){ double s = st2.pop();
                    st2.push(st2.pop() - s);}
                else if (op.equals(""/"")){ double s = st2.pop();
                    st2.push(st2.pop() / s);}
            }
             
                else st2.push(Double.parseDouble(temp));
                
        }
         Double a =  st2.pop();
         //  System.out.print(st2.pop()); 
  
      
      return a;
}    
}
@912983bf0ca28f9928bfb9ef9cbd6945@"
"r03631015","0","0.6","105488","@52a7b35fbd7db28a63e2a2d4c43dc7d7@
import java.io.BufferedReader;
import java.io.FileReader;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author wayne17
 */
public class Calculator {
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws Exception {
        
          
    }
    public Double ans (String e) {
        // please replace the following null to the answer you calculated.
//        System.out.printf(e);
//        String[] input = e.split("" "");
        String[] input = e.replaceAll(""\\(\\s*"", """").replaceAll(""\\)\\s*"", """").split("" "");
        int size = input.length;
//        System.out.printf(e.replace(""("", """").replace("")"","""").replaceAll("" "",""""));
        
//        String[] num = e.replace(""("", """").replace("")"","""").replaceAll("" "","""").split(""\\D+"");
//        String[] operator = e.replace(""("", """").replace("")"","""").replaceFirst(""\\d+"","""").replaceAll("" "","""").split(""\\d+"");
        Double[] num = new Double[(size+1)/2];
        String[] operator = new String[(size-1)/2];
        int pos = 0;
        for(String i:input){
            if (pos%2 ==0 ){
                num[pos/2]=Double.parseDouble(i);
            }
            else {
                operator[(pos-1)/2]=i;
            }
            pos++;
        }
        boolean[] num_used = new boolean[num.length];
        int[] layer = new int[operator.length];
        boolean[] op_used = new boolean[operator.length];
        int layer_num = 0;
        int position = 0;
        int Max_layer = 0;

        String[] remove_num = e.replaceAll(""\\d+.?\\d*"","""").split("" "");
        for (String unit:remove_num){
            if (unit.equals(""("")){
                layer_num++;
                if (Max_layer < layer_num){
                    Max_layer = layer_num;
                }
            }
            else if (unit.equals("")"")){
                layer_num--;
            }
            else if (unit.equals(""*"") || unit.equals(""/"") || unit.equals(""+"") || unit.equals(""-"")) {
                layer[position] = layer_num;
//                System.out.print(layer[position]);
                position++;
            }
//            System.out.printf(""[%s,%d]"",unit,layer_num);
        }
//        System.out.print(operator.length);
        
        double tmp =0;
        //from max layer to min layer
        for (int lay = Max_layer; lay>=0;lay--){
            // x,/
            for (int op =0; op <operator.length;op++ ){
                if (layer[op] == lay && op_used[op]==false){
                    if (operator[op].equals(""*"") || operator[op].equals(""/"")){
                        for (int search=op+1;search<num.length;search++){
                            if(num_used[search] ==false){
                                if(operator[op].equals(""*"") ){
                                    num[search] = num[op]*num[search];
                                    num_used[op]=true;
                                    break;
                                }
                                else if (operator[op].equals(""/"")){
                                    num[search] = num[op]/num[search];
                                    num_used[op]=true;
                                    break;
                                }
                            }
                        }
                        op_used[op]=true;
                    }
                }
            }
            //+,-
            for (int op =0; op <operator.length;op++ ){
                if (layer[op] == lay && op_used[op]==false){
                    if (operator[op].equals(""+"") || operator[op].equals(""-"")){
                        for (int search=op+1;search<num.length;search++){
                            if(num_used[search] ==false){
                                if(operator[op].equals(""+"") ){
                                    num[search] = num[op]+num[search];
                                    num_used[op]=true;
                                    break;
                                }
                                else if (operator[op].equals(""-"")){
                                    num[search] = num[op]-num[search];
                                    num_used[op]=true;
                                    break;
                                }
                            }   
                        }
                        op_used[op]=true;
                    }
                }
            }
        }
        System.out.print(num[num.length-1]);
//        System.out.print(num.length);
//        for (String i:operator){
////        System.out.printf(""%d,"",Integer.parseInt(i));
//            System.out.print(i);
//        }
        return num[num.length-1];
    }

}

@52a7b35fbd7db28a63e2a2d4c43dc7d7@"
"r03631015","6","0.58","105472","@89944f7389f485e93eb47016ca2ddcd9@import java.io.BufferedReader;
import java.io.FileReader;

/**
 *
 * @author wayne17
 */
public class Calculator {
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws Exception {
        // read file from args[0] in Java 7 style
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        Calculator fk = new Calculator();
        fk.ans(br.readLine());
          
    }
    public Double ans (String e) {
        // please replace the following null to the answer you calculated.
//        System.out.printf(e);
//        String[] input = e.split("" "");
        String[] input = e.replaceAll(""\\(\\s*"", """").replaceAll(""\\)\\s*"", """").split("" "");
        int size = input.length;
//        System.out.printf(e.replace(""("", """").replace("")"","""").replaceAll("" "",""""));
        
//        String[] num = e.replace(""("", """").replace("")"","""").replaceAll("" "","""").split(""\\D+"");
//        String[] operator = e.replace(""("", """").replace("")"","""").replaceFirst(""\\d+"","""").replaceAll("" "","""").split(""\\d+"");
        Double[] num = new Double[(size+1)/2];
        String[] operator = new String[(size-1)/2];
        int pos = 0;
        for(String i:input){
            if (pos%2 ==0 ){
                num[pos/2]=Double.parseDouble(i);
            }
            else {
                operator[(pos-1)/2]=i;
            }
            pos++;
        }
        boolean[] num_used = new boolean[num.length];
        int[] layer = new int[operator.length];
        boolean[] op_used = new boolean[operator.length];
        int layer_num = 0;
        int position = 0;
        int Max_layer = 0;

        String[] remove_num = e.replaceAll(""\\d+.?\\d*"","""").split("" "");
        for (String unit:remove_num){
            if (unit.equals(""("")){
                layer_num++;
                if (Max_layer < layer_num){
                    Max_layer = layer_num;
                }
            }
            else if (unit.equals("")"")){
                layer_num--;
            }
            else if (unit.equals(""*"") || unit.equals(""/"") || unit.equals(""+"") || unit.equals(""-"")) {
                layer[position] = layer_num;
//                System.out.print(layer[position]);
                position++;
            }
//            System.out.printf(""[%s,%d]"",unit,layer_num);
        }
//        System.out.print(operator.length);
        
        double tmp =0;
        //from max layer to min layer
        for (int lay = Max_layer; lay>=0;lay--){
            // x,/
            for (int op =0; op <operator.length;op++ ){
                if (layer[op] == lay && op_used[op]==false){
                    if (operator[op].equals(""*"") || operator[op].equals(""/"")){
                        for (int search=op+1;search<num.length;search++){
                            if(num_used[search] ==false){
                                if(operator[op].equals(""*"") ){
                                    num[search] = num[op]*num[search];
                                    num_used[op]=true;
                                    break;
                                }
                                else if (operator[op].equals(""/"")){
                                    num[search] = num[op]/num[search];
                                    num_used[op]=true;
                                    break;
                                }
                            }
                        }
                        op_used[op]=true;
                    }
                }
            }
            //+,-
            for (int op =0; op <operator.length;op++ ){
                if (layer[op] == lay && op_used[op]==false){
                    if (operator[op].equals(""+"") || operator[op].equals(""-"")){
                        for (int search=op+1;search<num.length;search++){
                            if(num_used[search] ==false){
                                if(operator[op].equals(""+"") ){
                                    num[search] = num[op]+num[search];
                                    num_used[op]=true;
                                    break;
                                }
                                else if (operator[op].equals(""-"")){
                                    num[search] = num[op]-num[search];
                                    num_used[op]=true;
                                    break;
                                }
                            }   
                        }
                        op_used[op]=true;
                    }
                }
            }
        }
//        System.out.print(num[num.length-1]);
//        System.out.print(num.length);
//        for (String i:operator){
////        System.out.printf(""%d,"",Integer.parseInt(i));
//            System.out.print(i);
//        }
        return num[num.length-1];
    }
}

@89944f7389f485e93eb47016ca2ddcd9@"
"r04631031","0","0","0","@e15f167b6b6c793cff68c5a5a54eb833@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Stack;
/**
 *
 * @author
 */
public class Calculator {
    public static void main(String[] args) throws Exception {
        Calculator cct = new Calculator();
        System.out.print(cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) ) ""));
    }
    public Double ans (String e) {
        // please replace the following null to the answer you calculated.
        //Calculator cct = new Calculator();
        String[] data = e.split("" "");
        int Level=0;
        int MaxCal = 0;
        int[] index = new int[data.length];
        Stack LevelStack = new Stack();
        for (int i=0;i<data.length;i++){
            LevelStack.push(data[i]);
//            System.out.println(LevelStack.get(i));
            if (data[i].equals(""("")){
                Level++;
                index[i]=Level;
            }
            else if (data[i].equals("")"")){
                Level--;
                index[i]=Level;
            }
            else{
                index[i]=Level;
            }
        }
        // Find maximum 
        MaxCal = index[0];
        for(int i=1;i<index.length;i++){
            if(index[i]>MaxCal){
                MaxCal = index[i];
            }
            else if (index[i]<MaxCal){
                MaxCal = MaxCal;
            }
        }
        String Count ="""";
//        String[] Temp = new String[data.length];
        double TempValue=0.0;
        for(int i=2;i<data.length;i++){
            if(data[i-2].equals(""("") && data[i].equals("")"")){
                
            }
        }
//        for(int j=0;j<MaxCal;j++){
//            for(int i=0;i<index.length;i++){
//                if (index[i]==(MaxCal-j)){
//                    if(data[i].equals("")"")){
//                        data[i]=String.valueOf(TempValue);
//                    }
//                    Count+=data[i]+"" "";
////                    System.out.print(data[i]);                
//                }
//            }
//            String[] Temp = Count.split("" ""); 
//            if(Temp[2].equals(""+"")){
//                for(int i=3;i<Temp.length;i+=2){
//                   TempValue = Double.parseDouble(Temp[i-2])+Double.parseDouble(Temp[i]);
//                }           
//            }
//            else if(Temp[2].equals(""-"")){
//                for(int i=3;i<Temp.length;i+=2){
//                    TempValue = Double.parseDouble(Temp[i-2])-Double.parseDouble(Temp[i]);   
//                }
//            }
//            else if(Temp[2].equals(""*"")){
//                for(int i=3;i<Temp.length;i+=2){
//                   TempValue = Double.parseDouble(Temp[i-2])*Double.parseDouble(Temp[i]);
//                }           
//            }
//            else if(Temp[2].equals(""/"")){
//                for(int i=3;i<Temp.length;i+=2){
//                   TempValue = Double.parseDouble(Temp[i-2])/Double.parseDouble(Temp[i]);
//                }           
//            }
//        }
        System.out.print(TempValue);
        return null;
    }
}

@e15f167b6b6c793cff68c5a5a54eb833@"
"r04631031","0","0.6","103200","@665eb6178dbf7a7293c1d9082abdd645@import java.io.BufferedReader;
import java.io.FileReader;

/**
 *
 * @author wayne17
 */
public class Calculator {
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws Exception {
        // read file from args[0] in Java 7 style
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        Calculator fk = new Calculator();
        fk.ans(br.readLine());
          
    }
    public Double ans (String e) {
        // please replace the following null to the answer you calculated.
//        System.out.printf(e);
//        String[] input = e.split("" "");
        String[] input = e.replaceAll(""\\(\\s*"", """").replaceAll(""\\)\\s*"", """").split("" "");
        int size = input.length;
//        System.out.printf(e.replace(""("", """").replace("")"","""").replaceAll("" "",""""));
        
//        String[] num = e.replace(""("", """").replace("")"","""").replaceAll("" "","""").split(""\\D+"");
//        String[] operator = e.replace(""("", """").replace("")"","""").replaceFirst(""\\d+"","""").replaceAll("" "","""").split(""\\d+"");
        Double[] num = new Double[(size+1)/2];
        String[] operator = new String[(size-1)/2];
        int pos = 0;
        for(String i:input){
            if (pos%2 ==0 ){
                num[pos/2]=Double.parseDouble(i);
            }
            else {
                operator[(pos-1)/2]=i;
            }
            pos++;
        }
        boolean[] num_used = new boolean[num.length];
        int[] layer = new int[operator.length];
        boolean[] op_used = new boolean[operator.length];
        int layer_num = 0;
        int position = 0;
        int Max_layer = 0;

        String[] remove_num = e.replaceAll(""\\d+.?\\d*"","""").split("" "");
        for (String unit:remove_num){
            if (unit.equals(""("")){
                layer_num++;
                if (Max_layer < layer_num){
                    Max_layer = layer_num;
                }
            }
            else if (unit.equals("")"")){
                layer_num--;
            }
            else if (unit.equals(""*"") || unit.equals(""/"") || unit.equals(""+"") || unit.equals(""-"")) {
                layer[position] = layer_num;
//                System.out.print(layer[position]);
                position++;
            }
//            System.out.printf(""[%s,%d]"",unit,layer_num);
        }
//        System.out.print(operator.length);
        
        double tmp =0;
        //from max layer to min layer
        for (int lay = Max_layer; lay>=0;lay--){
            // x,/
            for (int op =0; op <operator.length;op++ ){
                if (layer[op] == lay && op_used[op]==false){
                    if (operator[op].equals(""*"") || operator[op].equals(""/"")){
                        for (int search=op+1;search<num.length;search++){
                            if(num_used[search] ==false){
                                if(operator[op].equals(""*"") ){
                                    num[search] = num[op]*num[search];
                                    num_used[op]=true;
                                    break;
                                }
                                else if (operator[op].equals(""/"")){
                                    num[search] = num[op]/num[search];
                                    num_used[op]=true;
                                    break;
                                }
                            }
                        }
                        op_used[op]=true;
                    }
                }
            }
            //+,-
            for (int op =0; op <operator.length;op++ ){
                if (layer[op] == lay && op_used[op]==false){
                    if (operator[op].equals(""+"") || operator[op].equals(""-"")){
                        for (int search=op+1;search<num.length;search++){
                            if(num_used[search] ==false){
                                if(operator[op].equals(""+"") ){
                                    num[search] = num[op]+num[search];
                                    num_used[op]=true;
                                    break;
                                }
                                else if (operator[op].equals(""-"")){
                                    num[search] = num[op]-num[search];
                                    num_used[op]=true;
                                    break;
                                }
                            }   
                        }
                        op_used[op]=true;
                    }
                }
            }
        }
        System.out.print(num[num.length-1]);
//        System.out.print(num.length);
//        for (String i:operator){
////        System.out.printf(""%d,"",Integer.parseInt(i));
//            System.out.print(i);
//        }
        return num[num.length-1];
    }
}

@665eb6178dbf7a7293c1d9082abdd645@"
"r03631015","6","0.59","104512","@f3736308828120d07330bd5acd042da5@import java.io.BufferedReader;
import java.io.FileReader;

/**
 *
 * @author wayne17
 */
public class Calculator {
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws Exception {
        // read file from args[0] in Java 7 style
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        Calculator fk = new Calculator();
        fk.ans(br.readLine());
          
    }
    public Double ans (String e) {
        // please replace the following null to the answer you calculated.
//        System.out.printf(e);
//        String[] input = e.split("" "");
        String[] input = e.replaceAll(""\\(\\s*"", """").replaceAll(""\\)\\s*"", """").split("" "");
        int size = input.length;
//        System.out.printf(e.replace(""("", """").replace("")"","""").replaceAll("" "",""""));
        
//        String[] num = e.replace(""("", """").replace("")"","""").replaceAll("" "","""").split(""\\D+"");
//        String[] operator = e.replace(""("", """").replace("")"","""").replaceFirst(""\\d+"","""").replaceAll("" "","""").split(""\\d+"");
        Double[] num = new Double[(size+1)/2];
        String[] operator = new String[(size-1)/2];
        int pos = 0;
        for(String i:input){
//            if (i.matches(""-?\\d+.?\\d*"")){
//                
//            }
            if (pos%2 ==0 ){
                num[pos/2]=Double.parseDouble(i);
            }
            else {
                operator[(pos-1)/2]=i;
            }
            pos++;
        }
        boolean[] num_used = new boolean[num.length];
        int[] layer = new int[operator.length];
        boolean[] op_used = new boolean[operator.length];
        int layer_num = 0;
        int position = 0;
        int Max_layer = 0;

        String[] remove_num = e.replaceAll(""\\d+.?\\d*"","""").split("" "");
        for (String unit:remove_num){
            if (unit.equals(""("")){
                layer_num++;
                if (Max_layer < layer_num){
                    Max_layer = layer_num;
                }
            }
            else if (unit.equals("")"")){
                layer_num--;
            }
            else if (unit.equals(""*"") || unit.equals(""/"") || unit.equals(""+"") || unit.equals(""-"")) {
                layer[position] = layer_num;
//                System.out.print(layer[position]);
                position++;
            }
//            System.out.printf(""[%s,%d]"",unit,layer_num);
        }
//        System.out.print(operator.length);
        
        double tmp =0;
        //from max layer to min layer
        for (int lay = Max_layer; lay>=0;lay--){
            // x,/
            for (int op =0; op <operator.length;op++ ){
                if (layer[op] == lay && op_used[op]==false){
                    if (operator[op].equals(""*"") || operator[op].equals(""/"")){
                        for (int search=op+1;search<num.length;search++){
                            if(num_used[search] ==false){
                                if(operator[op].equals(""*"") ){
                                    num[search] = num[op]*num[search];
                                    num_used[op]=true;
                                    break;
                                }
                                else if (operator[op].equals(""/"")){
                                    num[search] = num[op]/num[search];
                                    num_used[op]=true;
                                    break;
                                }
                            }
                        }
                        op_used[op]=true;
                    }
                }
            }
            //+,-
            for (int op =0; op <operator.length;op++ ){
                if (layer[op] == lay && op_used[op]==false){
                    if (operator[op].equals(""+"") || operator[op].equals(""-"")){
                        for (int search=op+1;search<num.length;search++){
                            if(num_used[search] ==false){
                                if(operator[op].equals(""+"") ){
                                    num[search] = num[op]+num[search];
                                    num_used[op]=true;
                                    break;
                                }
                                else if (operator[op].equals(""-"")){
                                    num[search] = num[op]-num[search];
                                    num_used[op]=true;
                                    break;
                                }
                            }   
                        }
                        op_used[op]=true;
                    }
                }
            }
        }
//        System.out.print(num[num.length-1]);
//        System.out.print(num.length);
//        for (String i:operator){
////        System.out.printf(""%d,"",Integer.parseInt(i));
//            System.out.print(i);
//        }
        return num[num.length-1];
    }
}

@f3736308828120d07330bd5acd042da5@"
"r04631031","0","0.58","105488","@665eb6178dbf7a7293c1d9082abdd645@import java.io.BufferedReader;
import java.io.FileReader;

/**
 *
 * @author wayne17
 */
public class Calculator {
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws Exception {
        // read file from args[0] in Java 7 style
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        Calculator fk = new Calculator();
        fk.ans(br.readLine());
          
    }
    public Double ans (String e) {
        // please replace the following null to the answer you calculated.
//        System.out.printf(e);
//        String[] input = e.split("" "");
        String[] input = e.replaceAll(""\\(\\s*"", """").replaceAll(""\\)\\s*"", """").split("" "");
        int size = input.length;
//        System.out.printf(e.replace(""("", """").replace("")"","""").replaceAll("" "",""""));
        
//        String[] num = e.replace(""("", """").replace("")"","""").replaceAll("" "","""").split(""\\D+"");
//        String[] operator = e.replace(""("", """").replace("")"","""").replaceFirst(""\\d+"","""").replaceAll("" "","""").split(""\\d+"");
        Double[] num = new Double[(size+1)/2];
        String[] operator = new String[(size-1)/2];
        int pos = 0;
        for(String i:input){
            if (pos%2 ==0 ){
                num[pos/2]=Double.parseDouble(i);
            }
            else {
                operator[(pos-1)/2]=i;
            }
            pos++;
        }
        boolean[] num_used = new boolean[num.length];
        int[] layer = new int[operator.length];
        boolean[] op_used = new boolean[operator.length];
        int layer_num = 0;
        int position = 0;
        int Max_layer = 0;

        String[] remove_num = e.replaceAll(""\\d+.?\\d*"","""").split("" "");
        for (String unit:remove_num){
            if (unit.equals(""("")){
                layer_num++;
                if (Max_layer < layer_num){
                    Max_layer = layer_num;
                }
            }
            else if (unit.equals("")"")){
                layer_num--;
            }
            else if (unit.equals(""*"") || unit.equals(""/"") || unit.equals(""+"") || unit.equals(""-"")) {
                layer[position] = layer_num;
//                System.out.print(layer[position]);
                position++;
            }
//            System.out.printf(""[%s,%d]"",unit,layer_num);
        }
//        System.out.print(operator.length);
        
        double tmp =0;
        //from max layer to min layer
        for (int lay = Max_layer; lay>=0;lay--){
            // x,/
            for (int op =0; op <operator.length;op++ ){
                if (layer[op] == lay && op_used[op]==false){
                    if (operator[op].equals(""*"") || operator[op].equals(""/"")){
                        for (int search=op+1;search<num.length;search++){
                            if(num_used[search] ==false){
                                if(operator[op].equals(""*"") ){
                                    num[search] = num[op]*num[search];
                                    num_used[op]=true;
                                    break;
                                }
                                else if (operator[op].equals(""/"")){
                                    num[search] = num[op]/num[search];
                                    num_used[op]=true;
                                    break;
                                }
                            }
                        }
                        op_used[op]=true;
                    }
                }
            }
            //+,-
            for (int op =0; op <operator.length;op++ ){
                if (layer[op] == lay && op_used[op]==false){
                    if (operator[op].equals(""+"") || operator[op].equals(""-"")){
                        for (int search=op+1;search<num.length;search++){
                            if(num_used[search] ==false){
                                if(operator[op].equals(""+"") ){
                                    num[search] = num[op]+num[search];
                                    num_used[op]=true;
                                    break;
                                }
                                else if (operator[op].equals(""-"")){
                                    num[search] = num[op]-num[search];
                                    num_used[op]=true;
                                    break;
                                }
                            }   
                        }
                        op_used[op]=true;
                    }
                }
            }
        }
        System.out.print(num[num.length-1]);
//        System.out.print(num.length);
//        for (String i:operator){
////        System.out.printf(""%d,"",Integer.parseInt(i));
//            System.out.print(i);
//        }
        return num[num.length-1];
    }
}

@665eb6178dbf7a7293c1d9082abdd645@"
"r04631031","6","0.59","105552","@f3736308828120d07330bd5acd042da5@import java.io.BufferedReader;
import java.io.FileReader;

/**
 *
 * @author wayne17
 */
public class Calculator {
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws Exception {
        // read file from args[0] in Java 7 style
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        Calculator fk = new Calculator();
        fk.ans(br.readLine());
          
    }
    public Double ans (String e) {
        // please replace the following null to the answer you calculated.
//        System.out.printf(e);
//        String[] input = e.split("" "");
        String[] input = e.replaceAll(""\\(\\s*"", """").replaceAll(""\\)\\s*"", """").split("" "");
        int size = input.length;
//        System.out.printf(e.replace(""("", """").replace("")"","""").replaceAll("" "",""""));
        
//        String[] num = e.replace(""("", """").replace("")"","""").replaceAll("" "","""").split(""\\D+"");
//        String[] operator = e.replace(""("", """").replace("")"","""").replaceFirst(""\\d+"","""").replaceAll("" "","""").split(""\\d+"");
        Double[] num = new Double[(size+1)/2];
        String[] operator = new String[(size-1)/2];
        int pos = 0;
        for(String i:input){
//            if (i.matches(""-?\\d+.?\\d*"")){
//                
//            }
            if (pos%2 ==0 ){
                num[pos/2]=Double.parseDouble(i);
            }
            else {
                operator[(pos-1)/2]=i;
            }
            pos++;
        }
        boolean[] num_used = new boolean[num.length];
        int[] layer = new int[operator.length];
        boolean[] op_used = new boolean[operator.length];
        int layer_num = 0;
        int position = 0;
        int Max_layer = 0;

        String[] remove_num = e.replaceAll(""\\d+.?\\d*"","""").split("" "");
        for (String unit:remove_num){
            if (unit.equals(""("")){
                layer_num++;
                if (Max_layer < layer_num){
                    Max_layer = layer_num;
                }
            }
            else if (unit.equals("")"")){
                layer_num--;
            }
            else if (unit.equals(""*"") || unit.equals(""/"") || unit.equals(""+"") || unit.equals(""-"")) {
                layer[position] = layer_num;
//                System.out.print(layer[position]);
                position++;
            }
//            System.out.printf(""[%s,%d]"",unit,layer_num);
        }
//        System.out.print(operator.length);
        
        double tmp =0;
        //from max layer to min layer
        for (int lay = Max_layer; lay>=0;lay--){
            // x,/
            for (int op =0; op <operator.length;op++ ){
                if (layer[op] == lay && op_used[op]==false){
                    if (operator[op].equals(""*"") || operator[op].equals(""/"")){
                        for (int search=op+1;search<num.length;search++){
                            if(num_used[search] ==false){
                                if(operator[op].equals(""*"") ){
                                    num[search] = num[op]*num[search];
                                    num_used[op]=true;
                                    break;
                                }
                                else if (operator[op].equals(""/"")){
                                    num[search] = num[op]/num[search];
                                    num_used[op]=true;
                                    break;
                                }
                            }
                        }
                        op_used[op]=true;
                    }
                }
            }
            //+,-
            for (int op =0; op <operator.length;op++ ){
                if (layer[op] == lay && op_used[op]==false){
                    if (operator[op].equals(""+"") || operator[op].equals(""-"")){
                        for (int search=op+1;search<num.length;search++){
                            if(num_used[search] ==false){
                                if(operator[op].equals(""+"") ){
                                    num[search] = num[op]+num[search];
                                    num_used[op]=true;
                                    break;
                                }
                                else if (operator[op].equals(""-"")){
                                    num[search] = num[op]-num[search];
                                    num_used[op]=true;
                                    break;
                                }
                            }   
                        }
                        op_used[op]=true;
                    }
                }
            }
        }
//        System.out.print(num[num.length-1]);
//        System.out.print(num.length);
//        for (String i:operator){
////        System.out.printf(""%d,"",Integer.parseInt(i));
//            System.out.print(i);
//        }
        return num[num.length-1];
    }
}

@f3736308828120d07330bd5acd042da5@"
"r04631026","6","0.59","105472","@f3736308828120d07330bd5acd042da5@import java.io.BufferedReader;
import java.io.FileReader;

/**
 *
 * @author wayne17
 */
public class Calculator {
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws Exception {
        // read file from args[0] in Java 7 style
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        Calculator fk = new Calculator();
        fk.ans(br.readLine());
          
    }
    public Double ans (String e) {
        // please replace the following null to the answer you calculated.
//        System.out.printf(e);
//        String[] input = e.split("" "");
        String[] input = e.replaceAll(""\\(\\s*"", """").replaceAll(""\\)\\s*"", """").split("" "");
        int size = input.length;
//        System.out.printf(e.replace(""("", """").replace("")"","""").replaceAll("" "",""""));
        
//        String[] num = e.replace(""("", """").replace("")"","""").replaceAll("" "","""").split(""\\D+"");
//        String[] operator = e.replace(""("", """").replace("")"","""").replaceFirst(""\\d+"","""").replaceAll("" "","""").split(""\\d+"");
        Double[] num = new Double[(size+1)/2];
        String[] operator = new String[(size-1)/2];
        int pos = 0;
        for(String i:input){
//            if (i.matches(""-?\\d+.?\\d*"")){
//                
//            }
            if (pos%2 ==0 ){
                num[pos/2]=Double.parseDouble(i);
            }
            else {
                operator[(pos-1)/2]=i;
            }
            pos++;
        }
        boolean[] num_used = new boolean[num.length];
        int[] layer = new int[operator.length];
        boolean[] op_used = new boolean[operator.length];
        int layer_num = 0;
        int position = 0;
        int Max_layer = 0;

        String[] remove_num = e.replaceAll(""\\d+.?\\d*"","""").split("" "");
        for (String unit:remove_num){
            if (unit.equals(""("")){
                layer_num++;
                if (Max_layer < layer_num){
                    Max_layer = layer_num;
                }
            }
            else if (unit.equals("")"")){
                layer_num--;
            }
            else if (unit.equals(""*"") || unit.equals(""/"") || unit.equals(""+"") || unit.equals(""-"")) {
                layer[position] = layer_num;
//                System.out.print(layer[position]);
                position++;
            }
//            System.out.printf(""[%s,%d]"",unit,layer_num);
        }
//        System.out.print(operator.length);
        
        double tmp =0;
        //from max layer to min layer
        for (int lay = Max_layer; lay>=0;lay--){
            // x,/
            for (int op =0; op <operator.length;op++ ){
                if (layer[op] == lay && op_used[op]==false){
                    if (operator[op].equals(""*"") || operator[op].equals(""/"")){
                        for (int search=op+1;search<num.length;search++){
                            if(num_used[search] ==false){
                                if(operator[op].equals(""*"") ){
                                    num[search] = num[op]*num[search];
                                    num_used[op]=true;
                                    break;
                                }
                                else if (operator[op].equals(""/"")){
                                    num[search] = num[op]/num[search];
                                    num_used[op]=true;
                                    break;
                                }
                            }
                        }
                        op_used[op]=true;
                    }
                }
            }
            //+,-
            for (int op =0; op <operator.length;op++ ){
                if (layer[op] == lay && op_used[op]==false){
                    if (operator[op].equals(""+"") || operator[op].equals(""-"")){
                        for (int search=op+1;search<num.length;search++){
                            if(num_used[search] ==false){
                                if(operator[op].equals(""+"") ){
                                    num[search] = num[op]+num[search];
                                    num_used[op]=true;
                                    break;
                                }
                                else if (operator[op].equals(""-"")){
                                    num[search] = num[op]-num[search];
                                    num_used[op]=true;
                                    break;
                                }
                            }   
                        }
                        op_used[op]=true;
                    }
                }
            }
        }
//        System.out.print(num[num.length-1]);
//        System.out.print(num.length);
//        for (String i:operator){
////        System.out.printf(""%d,"",Integer.parseInt(i));
//            System.out.print(i);
//        }
        return num[num.length-1];
    }
}

@f3736308828120d07330bd5acd042da5@"
"r03631015","4","0.38","105488","@0084173b1d044663041c22710921c8b8@import java.io.BufferedReader;
import java.io.FileReader;

/**
 *
 * @author wayne17
 */
public class Calculator {
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws Exception {
        // read file from args[0] in Java 7 style
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
        Calculator fk = new Calculator();
        fk.ans(br.readLine());
          
    }
    public Double ans (String e) {
        // please replace the following null to the answer you calculated.
        String[] input = e.replaceAll(""\\(\\s*"", """").replaceAll(""\\)\\s*"", """").split("" "");
        int size = input.length;
        Double[] num = new Double[(size+1)/2];
        String[] operator = new String[(size-1)/2];
        int pos = 0;
        int pos1 = 0;
        for(String i:input){
            if (i.matches(""-?\\d+.?\\d*"")){
                num[pos]=Double.parseDouble(i);
                pos++;
            }
            else {
                operator[pos1]=i;
                pos1++;
            }
            
//            if (pos%2 ==0 ){
//                num[pos/2]=Double.parseDouble(i);
//            }
//            else {
//                operator[(pos-1)/2]=i;
//            }
//            pos++;
        }
        boolean[] num_used = new boolean[num.length];
        int[] layer = new int[operator.length];
        boolean[] op_used = new boolean[operator.length];
        int layer_num = 0;
        int position = 0;
        int Max_layer = 0;

        String[] remove_num = e.replaceAll(""\\d+.?\\d*"","""").split("" "");
        for (String unit:remove_num){
            if (unit.equals(""("")){
                layer_num++;
                if (Max_layer < layer_num){
                    Max_layer = layer_num;
                }
            }
            else if (unit.equals("")"")){
                layer_num--;
            }
            else if (unit.equals(""*"") || unit.equals(""/"") || unit.equals(""+"") || unit.equals(""-"")) {
                layer[position] = layer_num;
//                System.out.print(layer[position]);
                position++;
            }
//            System.out.printf(""[%s,%d]"",unit,layer_num);
        }
//        System.out.print(operator.length);
        
        double tmp =0;
        //from max layer to min layer
        for (int lay = Max_layer; lay>=0;lay--){
            // x,/
            for (int op =0; op <operator.length;op++ ){
                if (layer[op] == lay && op_used[op]==false){
                    if (operator[op].equals(""*"") || operator[op].equals(""/"")){
                        for (int search=op+1;search<num.length;search++){
                            if(num_used[search] ==false){
                                if(operator[op].equals(""*"") ){
                                    num[search] = num[op]*num[search];
                                    num_used[op]=true;
                                    break;
                                }
                                else if (operator[op].equals(""/"")){
                                    num[search] = num[op]/num[search];
                                    num_used[op]=true;
                                    break;
                                }
                            }
                        }
                        op_used[op]=true;
                    }
                }
            }
            //+,-
            for (int op =0; op <operator.length;op++ ){
                if (layer[op] == lay && op_used[op]==false){
                    if (operator[op].equals(""+"") || operator[op].equals(""-"")){
                        for (int search=op+1;search<num.length;search++){
                            if(num_used[search] ==false){
                                if(operator[op].equals(""+"") ){
                                    num[search] = num[op]+num[search];
                                    num_used[op]=true;
                                    break;
                                }
                                else if (operator[op].equals(""-"")){
                                    num[search] = num[op]-num[search];
                                    num_used[op]=true;
                                    break;
                                }
                            }   
                        }
                        op_used[op]=true;
                    }
                }
            }
        }
//        System.out.print(num[num.length-1]);
//        System.out.print(num.length);
//        for (String i:operator){
////        System.out.printf(""%d,"",Integer.parseInt(i));
//            System.out.print(i);
//        }
        return num[num.length-1];
    }
}

@0084173b1d044663041c22710921c8b8@"
"r04631026","0","0.58","105488","@a047ccb21ff8ea3a9c8f8e35f24c0f9d@public class Calculator {
//----------------------------API from textbook-------------------------------//
    private Node first;
    private int[] a;
    private class Node
    {
    String item;
    Node next;
    }
    public boolean isEmpty()
    {return first==null;}
    public void push(String item)
    {
        Node oldfirst=first;
        first=new Node();
        first.item=item;
        first.next=oldfirst;
    }
    public String pop()
    {
        String item=first.item;
        first=first.next;
        return item;
    }
//--------------------------Self define function------------------------------//
    public Calculator(){
    first=null;
    }
    public String localcalculate (String[] data){
        double a=Double.parseDouble(data[2]);
        double b=Double.parseDouble(data[0]); 
        double tempans=0;
        if (data[1].equals(""+""))
            tempans=(a+b);
        else if (data[1].equals(""-""))
            tempans=(a-b);
        else if (data[1].equals(""*""))
            tempans=(a*b);
        else if (data[1].equals(""/""))
            tempans=(a/b);
        return (String.valueOf(tempans));
      }
    public double ans(String e) {
            String[] a=e.split("" "");
            for (int i=0 ; i<a.length ; i++){
                if (a[i].equals("")"")){
                    String[] tempdata=new String[4];
                    int tempi=0;
                    while (tempi<4){
                   tempdata[tempi]=pop();
                   tempi++;
                        }
                push(localcalculate(tempdata));   
                }
               else
                   push(a[i]); 
                }
            return(Double.parseDouble(pop()));
          }
    }
}
@a047ccb21ff8ea3a9c8f8e35f24c0f9d@"
"r04921115","10","0.099","105488","@4b8af7374b9c1eb7eadeb0a0beb2d6f5@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Stack;

public class Calculator {
	public boolean isOperator (String op){
		switch(op){
			case ""+"":
				//System.out.println(""+"");
				return true;
			case ""-"":
				//System.out.println(""-"");
				return true;
			case ""*"":
				//System.out.println(""*"");
				return true;
			case ""/"":
				//System.out.println(""/"");
				return true;
			case ""("":
				//System.out.println(""("");
				return true;
			case "")"":
				//System.out.println("")"");
				return true;
			default:
				return false;
		}
	}
	public Double ans (String e) {
		  Stack<String> stack_post = new Stack<String>();
		  String s = new String();
		  Stack<String> stack_string = new Stack<String>();
	      String[] data = e.split("" "");
	      String temp1 = """";
	      String temp2 = """";
	      String temp ="""";
	      double double1;
	      double double2;
	      double double_temp;
	      for(int i = 0; i<data.length; i++){
	    	  if(isOperator(data[i])){
	    		  if(data[i].equals("")"")){
	    			  while(!stack_string.isEmpty()){
	    				  	temp = stack_string.pop();
	    				  	//System.out.println(""temp:""+temp);
	    				  	if(temp.equals(""("")){
		    					break;
		    				}else{
		    					stack_post.push((temp));
		    					//s = s +"",""+ temp;
		    					if(temp.equals(""*"")){
		    						stack_post.pop();
		    						double1 = Double.parseDouble(stack_post.pop());
		    						double2 = Double.parseDouble(stack_post.pop());
		    						double_temp = double2*double1;
		    						stack_post.push(double_temp+"""");
		    					}if(temp.equals(""/"")){
		    						stack_post.pop();
		    						double1 = Double.parseDouble(stack_post.pop());
		    						double2 = Double.parseDouble(stack_post.pop());
		    						double_temp = double2/double1;
		    						stack_post.push(double_temp+"""");
		    					}if(temp.equals(""+"")){
		    						stack_post.pop();
		    						double1 = Double.parseDouble(stack_post.pop());
		    						double2 = Double.parseDouble(stack_post.pop());
		    						double_temp = double2+double1;
		    						stack_post.push(double_temp+"""");
		    					}if(temp.equals(""-"")){
		    						stack_post.pop();
		    						double1 = Double.parseDouble(stack_post.pop());
		    						double2 = Double.parseDouble(stack_post.pop());
		    						double_temp = double2-double1;
		    						stack_post.push(double_temp+"""");
		    					} 		    					
		    				}
	    			  }
	    		  }else{
	    			  stack_string.push(data[i]);
	    			  //s = s+ "",""+temp;
	    		  }
	    	  }else{
	    		  stack_post.push(data[i]);
	    		  //s = s + "",""+data[i];
	    	  }
	      }

//	      String[] post = s.split("","");
//
//	      for(int i=0; i<post.length;i++){
//	    	  
//	      }
	      return Double.parseDouble(stack_post.pop());
	}
	public static void main(String[] args) throws Exception{
        // read file from args[0] in Java 7 style
		Calculator cc = new Calculator();
		double answer;
		answer = cc.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"");
		//cc.ans(""( 1 + 2 ) * ( 3 + 4 ) "");
		System.out.println(answer);
	}
}

@4b8af7374b9c1eb7eadeb0a0beb2d6f5@"
"r04631026","10","0.099","105504","@b5fa190bc732e01b25d8e02dfdb46d5c@public class Calculator {
//----------------------------API from textbook-------------------------------//
    private Node first;
    private int[] a;
    private class Node
    {
    String item;
    Node next;
    }
    public boolean isEmpty()
    {return first==null;}
    public void push(String item)
    {
        Node oldfirst=first;
        first=new Node();
        first.item=item;
        first.next=oldfirst;
    }
    public String pop()
    {
        String item=first.item;
        first=first.next;
        return item;
    }
//--------------------------Self define function------------------------------//
    public Calculator(){
    first=null;
    }
    public String localcalculate (String[] data){
        double a=Double.parseDouble(data[2]);
        double b=Double.parseDouble(data[0]); 
        double tempans=0;
        if (data[1].equals(""+""))
            tempans=(a+b);
        else if (data[1].equals(""-""))
            tempans=(a-b);
        else if (data[1].equals(""*""))
            tempans=(a*b);
        else if (data[1].equals(""/""))
            tempans=(a/b);
        return (String.valueOf(tempans));
      }
    public double ans(String e) {
            String[] a=e.split("" "");
            for (int i=0 ; i<a.length ; i++){
                if (a[i].equals("")"")){
                    String[] tempdata=new String[4];
                    int tempi=0;
                    while (tempi<4){
                   tempdata[tempi]=pop();
                   tempi++;
                        }
                push(localcalculate(tempdata));   
                }
               else
                   push(a[i]); 
                }
            return(Double.parseDouble(pop()));
          }
    }
@b5fa190bc732e01b25d8e02dfdb46d5c@"
"r03631015","10","0.101","105536","@b5fa190bc732e01b25d8e02dfdb46d5c@public class Calculator {
//----------------------------API from textbook-------------------------------//
    private Node first;
    private int[] a;
    private class Node
    {
    String item;
    Node next;
    }
    public boolean isEmpty()
    {return first==null;}
    public void push(String item)
    {
        Node oldfirst=first;
        first=new Node();
        first.item=item;
        first.next=oldfirst;
    }
    public String pop()
    {
        String item=first.item;
        first=first.next;
        return item;
    }
//--------------------------Self define function------------------------------//
    public Calculator(){
    first=null;
    }
    public String localcalculate (String[] data){
        double a=Double.parseDouble(data[2]);
        double b=Double.parseDouble(data[0]); 
        double tempans=0;
        if (data[1].equals(""+""))
            tempans=(a+b);
        else if (data[1].equals(""-""))
            tempans=(a-b);
        else if (data[1].equals(""*""))
            tempans=(a*b);
        else if (data[1].equals(""/""))
            tempans=(a/b);
        return (String.valueOf(tempans));
      }
    public double ans(String e) {
            String[] a=e.split("" "");
            for (int i=0 ; i<a.length ; i++){
                if (a[i].equals("")"")){
                    String[] tempdata=new String[4];
                    int tempi=0;
                    while (tempi<4){
                   tempdata[tempi]=pop();
                   tempi++;
                        }
                push(localcalculate(tempdata));   
                }
               else
                   push(a[i]); 
                }
            return(Double.parseDouble(pop()));
          }
    }
@b5fa190bc732e01b25d8e02dfdb46d5c@"
"b01705003","0","0.38","105488","@0bbade84abd270e5d282c54fbdb96ffa@public class Calculator {
    public static void main(String[] args) {
        System.out.println(""0"");
    }
}

@0bbade84abd270e5d282c54fbdb96ffa@"
"r04631027","10","0.099","105504","@85175e7c383080ba6b74a4b9e306e340@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
import java.util.Scanner;
import java.util.Stack;
/**
 *
 * @author YuChing
 */
public class Calculator {

    /**
     * @param args the command line arguments
     */
    
    public static void main(String[] args) {
        // TODO code application logic here
        
        Calculator cct = new Calculator();
        Double ans1 = cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )"");
        System.out.print(""ohya""+ans1);
    }
    public Double ans(String e)
    {   
        Double finalans =0.0;
       String[] begin = e.split("" "");
        Stack cc = new Stack();
        for (int i=0;i<begin.length;i++) {
            if (begin[i].equalsIgnoreCase("")""))
            {
                Double one = Double.parseDouble(cc.pop());
                String sign = cc.pop();
                Double two = Double.parseDouble(cc.pop());
                if (sign.equals(""+""))
                    cc.push((two+one)+"""");
                if(sign.equals(""-""))
                    cc.push((two-one)+"""");
                if(sign.equals(""*""))
                    cc.push((two*one)+"""");
                if(sign.equals(""/""))
                    cc.push((two/one)+"""");
            }
            else if(begin[i].equalsIgnoreCase(""("")) {
              //  System.out.println(i);
            } else {
                cc.push(begin[i]);
            }
        }
       
        Double thisismyanswer =Double.parseDouble(cc.pop());
//System.out.println(cc.pop());         
return thisismyanswer;
        
}
    public class Stack {

        private Node first = null;
        private class Node {
            String item;
            Node next;
        }
        public boolean isEmpty() {
            return first == null;
        }
        public void push(String item) {
            Node oldfirst = first;
            first = new Node();
            first.item = item;
            first.next = oldfirst;
        }
        public String pop() {
            String item = first.item;
            first = first.next;
            return item;
        }
    }
}

@85175e7c383080ba6b74a4b9e306e340@"
"r04631046","0","0.83","102480","@3ed744b8dd3124e8903e266c8b6f66bd@import edu.princeton.cs.algs4.Stack;
import java.math.*;

public class Calculator {

    public static void main(String[] args) throws Exception {
        Calculator cct = new Calculator();
        System.out.print(cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )""));
    }

    public Double ans(String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String[] data = e.split("" "");

        for (int i = 0; i < data.length; i++) {
            if (data[i].equals(""("")) {
            } else if (data[i].equals(""+"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""-"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""*"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""/"")) {
                ops.push(data[i]);
            } else if (data[i].equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b + a);
                } else if (op.equals(""-"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b - a);
                } else if (op.equals(""*"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b * a);
                } else if (op.equals(""/"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b / a);
                }
            } else {
                vals.push(Double.parseDouble(data[i]));
            }

        }
        double output = new BigDecimal(vals.pop()).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
        return output;
    }
}

@3ed744b8dd3124e8903e266c8b6f66bd@"
"r04631046","10","0.099","105856","@81225dbf50cbbe0af52bf13a9759301b@import java.math.*;

public class Calculator {

    public static void main(String[] args) throws Exception {
        Calculator cct = new Calculator();
        System.out.print(cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )""));
    }

    public Double ans(String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String[] data = e.split("" "");

        for (int i = 0; i < data.length; i++) {
            if (data[i].equals(""("")) {
            } else if (data[i].equals(""+"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""-"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""*"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""/"")) {
                ops.push(data[i]);
            } else if (data[i].equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b + a);
                } else if (op.equals(""-"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b - a);
                } else if (op.equals(""*"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b * a);
                } else if (op.equals(""/"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b / a);
                }
            } else {
                vals.push(Double.parseDouble(data[i]));
            }

        }
        double output = new BigDecimal(vals.pop()).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
        return output;
    }
}

@81225dbf50cbbe0af52bf13a9759301b@"
"r04631026","0","0.142","177424","@46697b4d80967cdeb8556b92bf104200@import java.io.FileReader;
import java.io.BufferedReader;

public class Calculator {
    public static void main(String[] args) throws Exception {
        Calculator cct = new Calculator();
        System.out.print(cct.ans(""( ( ( 1 + ( 12 * 5.1 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )""));       
    }
    public Double ans (String e) {
        // please replace the following null to the answer you calculated.
//        Calculator cct = new Calculator();
        String[] data = e.split("" "");
        int Level=0;
        int MaxCal = 0;
        int[] index = new int[data.length];

        for (int i=0;i<data.length;i++){

            if (data[i].equals(""("")){
                Level++;
                index[i]=Level;
            }
            else if (data[i].equals("")"")){
                Level--;
                index[i]=Level;
            }
            else{
                index[i]=Level;
            }
//            System.out.print(index[i]);

            
//            System.out.println(data[i]+i);
        }
        // Find maximum 
        MaxCal = index[0];
        for(int i=1;i<index.length;i++){
            if(index[i]>MaxCal){
                MaxCal = index[i];
            }
            else if (index[i]<MaxCal){
                MaxCal = MaxCal;
            }
        }
        String Count ="""";
//        String[] Temp = new String[data.length];
        double TempValue=0.0;
        int Zero=0;
        for(int k=0;k<MaxCal;k++){
            for(int i=4;i<data.length;i++){
                if(data[i-4].equals(""("") && data[i].equals("")"")){
                    if(data[i-2].equals(""+"")){
                        TempValue = Double.parseDouble(data[i-3])+Double.parseDouble(data[i-1]);
                    }
                    else if(data[i-2].equals(""-"")){
                        TempValue = Double.parseDouble(data[i-3])-Double.parseDouble(data[i-1]);
                    }
                    else if(data[i-2].equals(""*"")){
                        TempValue = Double.parseDouble(data[i-3])*Double.parseDouble(data[i-1]);
                    }
                    else if(data[i-2].equals(""/"")){
                        TempValue = Double.parseDouble(data[i-3])/Double.parseDouble(data[i-1]);
                    }
                    else{
                        System.out.print(""Error !"");
                    }
                    data[i-4] = String.valueOf(TempValue);
    //                System.out.println(data[i-4]);
                    Zero++;
                    for(int j=0;j<4;j++){
                        data[i-3+j]=""0"";
                    };
                }
//                System.out.print(data[i]);
            }
            for(int j=0;j<Zero;j++){
                for(int i=4;i<data.length;i++){
                    if (((data[i-4].equals(""0"") && data[i-3].equals(""0"")) && data[i-2].equals(""0"")) && data[i-1].equals(""0"")){
                        data[i-4] = data[i];
                        data[i] = ""0"";
                    }
                }
            }
        }
//        for(int i=0;i<data.length;i++){
//            System.out.print(data[i]);
//        }
        double b = new BigDecimal(Double.parseDouble(data[0])).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
        return b;
    }
}

@46697b4d80967cdeb8556b92bf104200@"
"r04631026","10","0.099","108416","@436aef8f1854f2205e9464e274c30da7@import java.io.FileReader;
import java.io.BufferedReader;
import java.math.BigDecimal;

public class Calculator {
    public static void main(String[] args) throws Exception {
        Calculator cct = new Calculator();
        System.out.print(cct.ans(""( ( ( 1 + ( 12 * 5.1 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )""));       
    }
    public Double ans (String e) {
        // please replace the following null to the answer you calculated.
//        Calculator cct = new Calculator();
        String[] data = e.split("" "");
        int Level=0;
        int MaxCal = 0;
        int[] index = new int[data.length];

        for (int i=0;i<data.length;i++){

            if (data[i].equals(""("")){
                Level++;
                index[i]=Level;
            }
            else if (data[i].equals("")"")){
                Level--;
                index[i]=Level;
            }
            else{
                index[i]=Level;
            }
//            System.out.print(index[i]);

            
//            System.out.println(data[i]+i);
        }
        // Find maximum 
        MaxCal = index[0];
        for(int i=1;i<index.length;i++){
            if(index[i]>MaxCal){
                MaxCal = index[i];
            }
            else if (index[i]<MaxCal){
                MaxCal = MaxCal;
            }
        }
        String Count ="""";
//        String[] Temp = new String[data.length];
        double TempValue=0.0;
        int Zero=0;
        for(int k=0;k<MaxCal;k++){
            for(int i=4;i<data.length;i++){
                if(data[i-4].equals(""("") && data[i].equals("")"")){
                    if(data[i-2].equals(""+"")){
                        TempValue = Double.parseDouble(data[i-3])+Double.parseDouble(data[i-1]);
                    }
                    else if(data[i-2].equals(""-"")){
                        TempValue = Double.parseDouble(data[i-3])-Double.parseDouble(data[i-1]);
                    }
                    else if(data[i-2].equals(""*"")){
                        TempValue = Double.parseDouble(data[i-3])*Double.parseDouble(data[i-1]);
                    }
                    else if(data[i-2].equals(""/"")){
                        TempValue = Double.parseDouble(data[i-3])/Double.parseDouble(data[i-1]);
                    }
                    else{
                        System.out.print(""Error !"");
                    }
                    data[i-4] = String.valueOf(TempValue);
    //                System.out.println(data[i-4]);
                    Zero++;
                    for(int j=0;j<4;j++){
                        data[i-3+j]=""0"";
                    };
                }
//                System.out.print(data[i]);
            }
            for(int j=0;j<Zero;j++){
                for(int i=4;i<data.length;i++){
                    if (((data[i-4].equals(""0"") && data[i-3].equals(""0"")) && data[i-2].equals(""0"")) && data[i-1].equals(""0"")){
                        data[i-4] = data[i];
                        data[i] = ""0"";
                    }
                }
            }
        }
//        for(int i=0;i<data.length;i++){
//            System.out.print(data[i]);
//        }
        double b = new BigDecimal(Double.parseDouble(data[0])).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
        return b;
    }
}

@436aef8f1854f2205e9464e274c30da7@"
"r04631031","0","0.16","178368","@3ed744b8dd3124e8903e266c8b6f66bd@import edu.princeton.cs.algs4.Stack;
import java.math.*;

public class Calculator {

    public static void main(String[] args) throws Exception {
        Calculator cct = new Calculator();
        System.out.print(cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )""));
    }

    public Double ans(String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String[] data = e.split("" "");

        for (int i = 0; i < data.length; i++) {
            if (data[i].equals(""("")) {
            } else if (data[i].equals(""+"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""-"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""*"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""/"")) {
                ops.push(data[i]);
            } else if (data[i].equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b + a);
                } else if (op.equals(""-"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b - a);
                } else if (op.equals(""*"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b * a);
                } else if (op.equals(""/"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b / a);
                }
            } else {
                vals.push(Double.parseDouble(data[i]));
            }

        }
        double output = new BigDecimal(vals.pop()).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
        return output;
    }
}

@3ed744b8dd3124e8903e266c8b6f66bd@"
"r04631031","0","0.16","178368","@3ed744b8dd3124e8903e266c8b6f66bd@import edu.princeton.cs.algs4.Stack;
import java.math.*;

public class Calculator {

    public static void main(String[] args) throws Exception {
        Calculator cct = new Calculator();
        System.out.print(cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )""));
    }

    public Double ans(String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String[] data = e.split("" "");

        for (int i = 0; i < data.length; i++) {
            if (data[i].equals(""("")) {
            } else if (data[i].equals(""+"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""-"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""*"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""/"")) {
                ops.push(data[i]);
            } else if (data[i].equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b + a);
                } else if (op.equals(""-"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b - a);
                } else if (op.equals(""*"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b * a);
                } else if (op.equals(""/"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b / a);
                }
            } else {
                vals.push(Double.parseDouble(data[i]));
            }

        }
        double output = new BigDecimal(vals.pop()).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
        return output;
    }
}

@3ed744b8dd3124e8903e266c8b6f66bd@"
"r04631031","0","0.099","105856","@3ed744b8dd3124e8903e266c8b6f66bd@import edu.princeton.cs.algs4.Stack;
import java.math.*;

public class Calculator {

    public static void main(String[] args) throws Exception {
        Calculator cct = new Calculator();
        System.out.print(cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )""));
    }

    public Double ans(String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String[] data = e.split("" "");

        for (int i = 0; i < data.length; i++) {
            if (data[i].equals(""("")) {
            } else if (data[i].equals(""+"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""-"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""*"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""/"")) {
                ops.push(data[i]);
            } else if (data[i].equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b + a);
                } else if (op.equals(""-"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b - a);
                } else if (op.equals(""*"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b * a);
                } else if (op.equals(""/"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b / a);
                }
            } else {
                vals.push(Double.parseDouble(data[i]));
            }

        }
        double output = new BigDecimal(vals.pop()).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
        return output;
    }
}

@3ed744b8dd3124e8903e266c8b6f66bd@"
"r04631031","10","0.097","105440","@81225dbf50cbbe0af52bf13a9759301b@import java.math.*;

public class Calculator {

    public static void main(String[] args) throws Exception {
        Calculator cct = new Calculator();
        System.out.print(cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )""));
    }

    public Double ans(String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String[] data = e.split("" "");

        for (int i = 0; i < data.length; i++) {
            if (data[i].equals(""("")) {
            } else if (data[i].equals(""+"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""-"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""*"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""/"")) {
                ops.push(data[i]);
            } else if (data[i].equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b + a);
                } else if (op.equals(""-"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b - a);
                } else if (op.equals(""*"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b * a);
                } else if (op.equals(""/"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b / a);
                }
            } else {
                vals.push(Double.parseDouble(data[i]));
            }

        }
        double output = new BigDecimal(vals.pop()).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
        return output;
    }
}

@81225dbf50cbbe0af52bf13a9759301b@"
"r04631031","0","0.49","107856","@3ed744b8dd3124e8903e266c8b6f66bd@import edu.princeton.cs.algs4.Stack;
import java.math.*;

public class Calculator {

    public static void main(String[] args) throws Exception {
        Calculator cct = new Calculator();
        System.out.print(cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )""));
    }

    public Double ans(String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String[] data = e.split("" "");

        for (int i = 0; i < data.length; i++) {
            if (data[i].equals(""("")) {
            } else if (data[i].equals(""+"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""-"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""*"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""/"")) {
                ops.push(data[i]);
            } else if (data[i].equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b + a);
                } else if (op.equals(""-"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b - a);
                } else if (op.equals(""*"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b * a);
                } else if (op.equals(""/"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b / a);
                }
            } else {
                vals.push(Double.parseDouble(data[i]));
            }

        }
        double output = new BigDecimal(vals.pop()).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
        return output;
    }
}

@3ed744b8dd3124e8903e266c8b6f66bd@"
"r04631031","0","0.5","107760","@3ed744b8dd3124e8903e266c8b6f66bd@import edu.princeton.cs.algs4.Stack;
import java.math.*;

public class Calculator {

    public static void main(String[] args) throws Exception {
        Calculator cct = new Calculator();
        System.out.print(cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )""));
    }

    public Double ans(String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String[] data = e.split("" "");

        for (int i = 0; i < data.length; i++) {
            if (data[i].equals(""("")) {
            } else if (data[i].equals(""+"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""-"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""*"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""/"")) {
                ops.push(data[i]);
            } else if (data[i].equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b + a);
                } else if (op.equals(""-"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b - a);
                } else if (op.equals(""*"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b * a);
                } else if (op.equals(""/"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b / a);
                }
            } else {
                vals.push(Double.parseDouble(data[i]));
            }

        }
        double output = new BigDecimal(vals.pop()).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
        return output;
    }
}

@3ed744b8dd3124e8903e266c8b6f66bd@"
"r04631031","10","0.108","105904","@e6bbaa56c5a5a8c716cbff5330711890@import java.math.*;

public class Calculator {

    public static void main(String[] args) throws Exception {
        Calculator cct = new Calculator();
        System.out.print(cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )""));
    }

    public Double ans(String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String[] data = e.split("" "");

        for (int i = 0; i < data.length; i++) {
            if (data[i].equals(""("")) {
            } else if (data[i].equals(""+"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""-"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""*"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""/"")) {
                ops.push(data[i]);
            } else if (data[i].equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b + a);
                } else if (op.equals(""-"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b - a);
                } else if (op.equals(""*"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b * a);
                } else if (op.equals(""/"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b / a);
                }
            } else {
                vals.push(Double.parseDouble(data[i]));
            }

        }
        double output = new BigDecimal(vals.pop()).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
        return output;
    }
}
@e6bbaa56c5a5a8c716cbff5330711890@"
"r04631031","0","0.49","107856","@3ed744b8dd3124e8903e266c8b6f66bd@import edu.princeton.cs.algs4.Stack;
import java.math.*;

public class Calculator {

    public static void main(String[] args) throws Exception {
        Calculator cct = new Calculator();
        System.out.print(cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )""));
    }

    public Double ans(String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String[] data = e.split("" "");

        for (int i = 0; i < data.length; i++) {
            if (data[i].equals(""("")) {
            } else if (data[i].equals(""+"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""-"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""*"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""/"")) {
                ops.push(data[i]);
            } else if (data[i].equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b + a);
                } else if (op.equals(""-"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b - a);
                } else if (op.equals(""*"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b * a);
                } else if (op.equals(""/"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b / a);
                }
            } else {
                vals.push(Double.parseDouble(data[i]));
            }

        }
        double output = new BigDecimal(vals.pop()).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
        return output;
    }
}

@3ed744b8dd3124e8903e266c8b6f66bd@"
"r04631031","10","0.099","105888","@81225dbf50cbbe0af52bf13a9759301b@import java.math.*;

public class Calculator {

    public static void main(String[] args) throws Exception {
        Calculator cct = new Calculator();
        System.out.print(cct.ans(""( ( ( 1 + ( 12 * 5 ) ) - ( 3 * 4 ) ) + ( 4 / 5 ) )""));
    }

    public Double ans(String e) {
        Stack<String> ops = new Stack<String>();
        Stack<Double> vals = new Stack<Double>();
        String[] data = e.split("" "");

        for (int i = 0; i < data.length; i++) {
            if (data[i].equals(""("")) {
            } else if (data[i].equals(""+"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""-"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""*"")) {
                ops.push(data[i]);
            } else if (data[i].equals(""/"")) {
                ops.push(data[i]);
            } else if (data[i].equals("")"")) {
                String op = ops.pop();
                if (op.equals(""+"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b + a);
                } else if (op.equals(""-"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b - a);
                } else if (op.equals(""*"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b * a);
                } else if (op.equals(""/"")) {
                    double a = vals.pop();
                    double b = vals.pop();
                    vals.push(b / a);
                }
            } else {
                vals.push(Double.parseDouble(data[i]));
            }

        }
        double output = new BigDecimal(vals.pop()).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
        return output;
    }
}

@81225dbf50cbbe0af52bf13a9759301b@"
"b03611023","0","0.95","105856","@acb03d13f13ce2bfe802128266ff9214@public class Expression{
  
    private Node root;
    private int size;
    // DO NOT MODIFY THIS
    public Expression(){}

    // Build a Binary and Return the Root
    public Node Infix2BT(String infix){
        
        int len = infix.length();
        Stack<String> ops = new Stack<>();
        Stack<String> val = new Stack<>();
        Stack<Node> im = new Stack<>();
        root = null;
        for(int i = 0;i<len;i++){
            
            String temp = infix.substring(i, i+1);
            if(temp.equals(""("")) ;
            else if(temp.equals(""+"")) ops.push(temp);
            else if(temp.equals(""-"")) ops.push(temp);
            else if(temp.equals(""*"")) ops.push(temp);
            else if(temp.equals(""/"")) ops.push(temp);
           
            else if(temp.equals("")"")) {
                if(ops.isEmpty()){
                    if(val.isEmpty()){
                        root = null;
                        break;
                    }
                 String cc = val.pop();
                 Node b = new Node(null,null, cc);
                 root = b;
                 size = 1;
                 break;        
                }
                String op = ops.pop();
                if(root==null){
                    Node c = new Node(null,null,val.pop()); size++;
                    Node a = new Node(null,null,val.pop()); size++;
                    Node b = new Node(a,c,op);  
                    size++;
                    root = b;
                    val.push(root.getValue());
                }
                else{
                    String cc = val.pop();
                    String aa = val.pop();
                    if(this.find(aa)==true && this.find(cc)==true){
                        root.setValue(op);
                        val.push(root.getValue());
                    }
                    else if(this.find(cc)){
                        Node a = new Node(null,null,aa); size++;
                        Node b = new Node(a,root,op); size++;
                         root = b;
                    val.push(root.getValue());
                    }
                    else if(this.find(aa)){
                        Node c = new Node(null,null,cc); size++;
                        Node b = new Node(root,c,op); size++;
                         root = b;
                    val.push(root.getValue());
                    }
                    else{
                       Node c = new Node(null,null,cc); size++;
                       Node a = new Node(null,null,aa); size++;
                       Node b = new Node(a,c,op); size++;
                       val.push(b.getValue());
                       Node d = new Node(root,b,null); size++;
                       root = d;
                    }
                }               
            }                
            else{
                  int j = i+1;
                  String wa = infix.substring(j, j+1);
                  while(this.find(wa)!=true){
                      j++;
                      wa = infix.substring(j, j+1);
                  }
                  wa = infix.substring(i, j);
                  i = j-1;
                  val.push(wa);
                    }
        }
       
        return root;
    }

    public Node[] PrintPrefix(){
         if(root ==null) throw new NullPointerException();
         
        Node[] prefix = new Node[size];
        this.pre(root, prefix, 0);
        return prefix;
    }
  
    public Node[] PrintPostfix(){
        if(root ==null) throw new NullPointerException();
        
        Node[] postfix = new Node[size];
        this.post(root, postfix, 0);       
        return postfix;
    }
    
    public double Evaluation(){
         if(root ==null) throw new NullPointerException();
        double answer ;
        Node[] po = this.PrintPostfix();
        Stack<Double> ans = new Stack<>();
        for(int i = 0;i<size;i++){
            if(po[i].getValue().equals(""+"")){
                double a,b;
                b = ans.pop();
                a = ans.pop();
                ans.push(a+b);
            }
            else  if(po[i].getValue().equals(""-"")){
                double a,b;
                b = ans.pop();
                a = ans.pop();
                ans.push(a-b);
            }
            else  if(po[i].getValue().equals(""*"")){
                double a,b;
                b = ans.pop();
                a = ans.pop();
                ans.push(a*b);
            }
            else  if(po[i].getValue().equals(""/"")){
                double a,b;
                b = ans.pop();
                a = ans.pop();
                ans.push(a/b);
            }
            else{
                double a = Double.parseDouble(po[i].getValue());
                ans.push(a);
            }
        }
        answer = ans.pop();
        return answer;
    }
    
    public boolean find(String a){
        if(a.equals(""+"") || a.equals(""-"") || a.equals(""*"")
                || a.equals(""/"") || a.equals("")""))
        return true;
        else return false;
    }
    
   public int getsize(){
       return size;
   }
   public int pre(Node a, Node[] b, int i){
       b[i] = a;
       i++;
       if(a.getLeft()!=null)
           i = this.pre(a.getLeft(), b, i);
       if(a.getRight()!=null)
           i = this.pre(a.getRight(), b, i);
       return i;
   }
   public int post(Node a, Node[] b, int i){
        if(a.getLeft()!=null)
          i =this.post(a.getLeft(), b, i);          
        if(a.getRight()!=null)
          i =this.post(a.getRight(), b, i);           
       b[i] = a;
       i++;          
      return i;
   }
}

@acb03d13f13ce2bfe802128266ff9214@"
