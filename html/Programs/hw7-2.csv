"r04945025","4","0.42","105504","@0fe3b7ef71bf2c98c9a9a0e16d655b71@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Collections;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            //System.out.println(header[1]);
            int count = Integer.parseInt(header[0]);
            int top = Integer.parseInt(header[1]);
            MinPQ<Hand> pq = new MinPQ<Hand>();

            Hand[] hands = new Hand[count];
            int idx = 0;


            for(String in = br.readLine(); in != null; in = br.readLine()) {

                String[] cardStr = in.split("","");
                Card[] cardsArray = new Card[5];

                for(int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                pq.insert(new Hand(cardsArray));

                hands[idx++] = new Hand(cardsArray);

                if(pq.size() > top) {
                    pq.delMin();
                }
            }

            /*System.out.printf(""%d\t%d\n"", hands.length, pq.size());
            for(Hand hand: hands){
                Card[] cards = hand.getCards();
                for(Card card: cards){
                    System.out.printf(""%s_%s\t"", card.getSuit(), card.getFace());
                }
                System.out.println();
            }
            for(int i = 0; i < 52; i++){
                System.out.println(hands[i].compareTo(hands[52]));
            }*/


            /*Arrays.sort(hands, Collections.reverseOrder());
            int t = 1;
            for(Hand hand: hands) {
                Card[] cards = hand.getCards();
                Arrays.sort(cards);
                System.out.printf(""%d\t%d\t"", t++, hand.getHand());
                for(Card card: cards){
                    System.out.printf(""%s_%s\t"", card.getSuit(), card.getFace());
                }
                System.out.println();
            }*/


            Hand hand = pq.delMin();
            Card[] cards = hand.getCards();
            Arrays.sort(cards);
            int ii = 0;
            for(Card card: cards){
                if(ii == 0) { System.out.printf(""%s_%s"", card.getSuit(), card.getFace()); }
                else { System.out.printf("",%s_%s"", card.getSuit(), card.getFace()); }
                ii++;
            }
            System.out.println();
        }
    }
}

@0fe3b7ef71bf2c98c9a9a0e16d655b71@"
"r04945025","7","0.155714285714286","122800","@b1fcdf8d780707f4ac5be72ad82a92e7@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Collections;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            //System.out.println(header[1]);
            int count = Integer.parseInt(header[0]);
            int top = Integer.parseInt(header[1]);
            MinPQ<Hand> pq = new MinPQ<Hand>();

            //Hand[] hands = new Hand[count];
            int idx = 0;


            for(String in = br.readLine(); in != null; in = br.readLine()) {

                String[] cardStr = in.split("","");
                Card[] cardsArray = new Card[5];

                for(int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                pq.insert(new Hand(cardsArray));

                //hands[idx++] = new Hand(cardsArray);

                if(pq.size() > top) {
                    pq.delMin();
                }
            }

            /*System.out.printf(""%d\t%d\n"", hands.length, pq.size());
            for(Hand hand: hands){
                Card[] cards = hand.getCards();
                for(Card card: cards){
                    System.out.printf(""%s_%s\t"", card.getSuit(), card.getFace());
                }
                System.out.println();
            }
            for(int i = 0; i < 52; i++){
                System.out.println(hands[i].compareTo(hands[52]));
            }*/


            /*Arrays.sort(hands, Collections.reverseOrder());
            int t = 1;
            for(Hand hand: hands) {
                Card[] cards = hand.getCards();
                Arrays.sort(cards);
                System.out.printf(""%d\t%d\t"", t++, hand.getHand());
                for(Card card: cards){
                    System.out.printf(""%s_%s\t"", card.getSuit(), card.getFace());
                }
                System.out.println();
            }*/


            Hand hand = pq.delMin();
            Card[] cards = hand.getCards();
            Arrays.sort(cards);
            int ii = 0;
            for(Card card: cards){
                if(ii == 0) { System.out.printf(""%s_%s"", card.getSuit(), card.getFace()); }
                else { System.out.printf("",%s_%s"", card.getSuit(), card.getFace()); }
                ii++;
            }
            System.out.println();
        }
    }
}

@b1fcdf8d780707f4ac5be72ad82a92e7@"
"r04945025","0","0.18","119728","@1d87e9487b76a164a97370eff9985f7b@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Collections;

public class CardPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            //System.out.println(header[1]);
            int count = Integer.parseInt(header[0]);
            int top = Integer.parseInt(header[1]);
            //MinPQ<Hand> pq = new MinPQ<Hand>();

            Hand[] hands = new Hand[count];
            int idx = 0;


            for(String in = br.readLine(); in != null; in = br.readLine()) {

                String[] cardStr = in.split("","");
                Card[] cardsArray = new Card[5];

                for(int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                //pq.insert(new Hand(cardsArray));

                hands[idx++] = new Hand(cardsArray);

                //if(pq.size() > top) {
                //    pq.delMin();
                //}
            }

            /*System.out.printf(""%d\t%d\n"", hands.length, pq.size());
            for(Hand hand: hands){
                Card[] cards = hand.getCards();
                for(Card card: cards){
                    System.out.printf(""%s_%s\t"", card.getSuit(), card.getFace());
                }
                System.out.println();
            }
            for(int i = 0; i < 52; i++){
                System.out.println(hands[i].compareTo(hands[52]));
            }*/


            Arrays.sort(hands, Collections.reverseOrder());
            /*int t = 1;
            for(Hand hand: hands) {
                Card[] cards = hand.getCards();
                Arrays.sort(cards);
                System.out.printf(""%d\t%d\t"", t++, hand.getHand());
                for(Card card: cards){
                    System.out.printf(""%s_%s\t"", card.getSuit(), card.getFace());
                }
                System.out.println();
            }*/

            hand = hands[top - 1]
            //Hand hand = pq.delMin();
            Card[] cards = hand.getCards();
            Arrays.sort(cards);
            int ii = 0;
            for(Card card: cards){
                if(ii == 0) { System.out.printf(""%s_%s"", card.getSuit(), card.getFace()); }
                else { System.out.printf("",%s_%s"", card.getSuit(), card.getFace()); }
                ii++;
            }
            System.out.println();
        }
    }
}

@1d87e9487b76a164a97370eff9985f7b@"
"r04945025","0","0.18","119728","@e92c29b6ece2bda22c28e5edb5205dca@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Collections;

public class CardPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            //System.out.println(header[1]);
            int count = Integer.parseInt(header[0]);
            int top = Integer.parseInt(header[1]);
            //MinPQ<Hand> pq = new MinPQ<Hand>();

            Hand[] hands = new Hand[count];
            int idx = 0;


            for(String in = br.readLine(); in != null; in = br.readLine()) {

                String[] cardStr = in.split("","");
                Card[] cardsArray = new Card[5];

                for(int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                //pq.insert(new Hand(cardsArray));

                hands[idx++] = new Hand(cardsArray);

                //if(pq.size() > top) {
                //    pq.delMin();
                //}
            }

            /*System.out.printf(""%d\t%d\n"", hands.length, pq.size());
            for(Hand hand: hands){
                Card[] cards = hand.getCards();
                for(Card card: cards){
                    System.out.printf(""%s_%s\t"", card.getSuit(), card.getFace());
                }
                System.out.println();
            }
            for(int i = 0; i < 52; i++){
                System.out.println(hands[i].compareTo(hands[52]));
            }*/


            Arrays.sort(hands, Collections.reverseOrder());
            /*int t = 1;
            for(Hand hand: hands) {
                Card[] cards = hand.getCards();
                Arrays.sort(cards);
                System.out.printf(""%d\t%d\t"", t++, hand.getHand());
                for(Card card: cards){
                    System.out.printf(""%s_%s\t"", card.getSuit(), card.getFace());
                }
                System.out.println();
            }*/

            hand = hands[top - 1];
            //Hand hand = pq.delMin();
            Card[] cards = hand.getCards();
            Arrays.sort(cards);
            int ii = 0;
            for(Card card: cards){
                if(ii == 0) { System.out.printf(""%s_%s"", card.getSuit(), card.getFace()); }
                else { System.out.printf("",%s_%s"", card.getSuit(), card.getFace()); }
                ii++;
            }
            System.out.println();
        }
    }
}

@e92c29b6ece2bda22c28e5edb5205dca@"
"r04945025","4","0.38","105856","@472ab42556944c36a1045052e10d862f@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Collections;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            //System.out.println(header[1]);
            int count = Integer.parseInt(header[0]);
            int top = Integer.parseInt(header[1]);
            //MinPQ<Hand> pq = new MinPQ<Hand>();

            Hand[] hands = new Hand[count];
            int idx = 0;


            for(String in = br.readLine(); in != null; in = br.readLine()) {

                String[] cardStr = in.split("","");
                Card[] cardsArray = new Card[5];

                for(int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                //pq.insert(new Hand(cardsArray));

                hands[idx++] = new Hand(cardsArray);

                //if(pq.size() > top) {
                //    pq.delMin();
                //}
            }

            /*System.out.printf(""%d\t%d\n"", hands.length, pq.size());
            for(Hand hand: hands){
                Card[] cards = hand.getCards();
                for(Card card: cards){
                    System.out.printf(""%s_%s\t"", card.getSuit(), card.getFace());
                }
                System.out.println();
            }
            for(int i = 0; i < 52; i++){
                System.out.println(hands[i].compareTo(hands[52]));
            }*/


            Arrays.sort(hands, Collections.reverseOrder());
            /*int t = 1;
            for(Hand hand: hands) {
                Card[] cards = hand.getCards();
                Arrays.sort(cards);
                System.out.printf(""%d\t%d\t"", t++, hand.getHand());
                for(Card card: cards){
                    System.out.printf(""%s_%s\t"", card.getSuit(), card.getFace());
                }
                System.out.println();
            }*/

            Hand hand = hands[top - 1];
            //Hand hand = pq.delMin();
            Card[] cards = hand.getCards();
            Arrays.sort(cards);
            int ii = 0;
            for(Card card: cards){
                if(ii == 0) { System.out.printf(""%s_%s"", card.getSuit(), card.getFace()); }
                else { System.out.printf("",%s_%s"", card.getSuit(), card.getFace()); }
                ii++;
            }
            System.out.println();
        }
    }
}

@472ab42556944c36a1045052e10d862f@"
"r04447001","1","0.8","120176","@eee69bffc81675967bc6d28f9d711a9e@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ<Hand> min = new MinPQ<Hand>(target+1);
            
             for(String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand current = new Hand(cardsArray);
                min.insert(current);
                if(min.size() > target){
                min.delMin();
                }
            }
            min.delMin();
            Card[] targetcards = min.delMin().getCards();
            Arrays.sort(targetcards);
            String message = """";
            for(int i = 0; i < 5; i++){
                Card current = targetcards[i];
                message = message + current.getSuit();
                message = message +""_"";
                message = message +current.getFace();
                if(i < 4){
                    message = message + "","";
                }
            }
            System.out.print(message);
        }
    }
}

@eee69bffc81675967bc6d28f9d711a9e@"
"r04447001","7","0.142857142857143","121216","@d1941e4c0904ec55c322fb2ccf6b1604@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ<Hand> min = new MinPQ<Hand>(target+1);
            
             for(String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand current = new Hand(cardsArray);
                min.insert(current);
                if(min.size() > target){
                min.delMin();
                }
            }
            Card[] targetcards = min.min().getCards();
            Arrays.sort(targetcards);
            String message = """";
            for(int i = 0; i < 5; i++){
                Card current = targetcards[i];
                message = message + current.getSuit();
                message = message +""_"";
                message = message +current.getFace();
                if(i < 4){
                    message = message + "","";
                }
            }
            System.out.print(message);
        }
    }
}

@d1941e4c0904ec55c322fb2ccf6b1604@"
"r04546032","0","0","0","@32f250984f4f542dfda2fe516436242b@
/**
 *
 * @author CHIN LUNG
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {
    
    private static MaxPQ PQ = new MaxPQ();
    private static Hand HPQ;
    
    
    public static void main(String[] args) throws Exception {
        
        try(BufferedReader br = new BufferedReader(new FileReader(""in.txt""))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
       
             for(String in = br.readLine(); in != null; in = br.readLine()) {
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                HPQ = new Hand(cardsArray); 
                 PQ.insert(HPQ);
            }
             for(int i = count;i==count-target;i--)
             {
                 PQ.delMax();
                 if(i==target)
                 {
                     System.out.println(PQ.delMax());
                 }
             }
        }
        
    }
}


@32f250984f4f542dfda2fe516436242b@"
"r04546014","0","0.0933333333333333","105488","@24b7cb649337df42e45c619f6babcb22@import java.util.Arrays;
import static java.util.Arrays.sort;

public class Player implements Comparable<Player> {

    private Card[] cards = new Card[5];
    private String name;

    // DO NOT MODIFY THIS
    public Player(String name) {
        this.name = name;
    }

    // DO NOT MODIFY THIS
    public String getName() {
        return this.name;
    }

    // DO NOT MODIFY THIS
    public void setCards(Card[] cards) {
        this.cards = cards;
    }

    // TODO 
    public int compareTo(Player that) {
        // complete this function so the Player can be sorted according to the cards he/she has.
        Arrays.sort(this.cards);
        Arrays.sort(that.cards);
        int c1 = this.cardsConbination(this.cards);
        int c2 = that.cardsConbination(that.cards);
        if (c1 > c2) {
            return 1;
        }
        if (c1 < c2) {
            return -1;
        } else {//兩者排大小一樣，比較數字
            if (c1 == 5) {//兩者都是同花
                int s1 = this.compareSuit(this.cards[0]);//我的排的花色
                int s2 = that.compareSuit(that.cards[0]);//對手排的花色
                if (s1 > s2) {
                    return 1;
                } else if (s1 < s2) {
                    return -1;
                } else {
                    return this.cards[cards.length - 1].compareTo(that.cards[cards.length - 1]);//兩個同花相同比較最後一張牌的大小
                }
            }
            else if(c1==4){//兩者都是順子
                return this.cards[cards.length-2].compareTo(that.cards[cards.length-2]);//比較倒數第二張牌(這裡會有錯，如果兩副牌都是10JQKA應該先比較A的大小而不是K，但是還要再寫if就很懶)
            }else {//兩者都是雜牌
                return this.cards[cards.length - 1].compareTo(that.cards[cards.length - 1]);//比較最後一張牌的大小
            }
        }
    }

    public int compareSuit(Card card) {
        if (card.getSuit() == ""Spades"") {
            return 4;
        }
        if (card.getSuit() == ""Hearts"") {
            return 3;
        }
        if (card.getSuit() == ""Diamonds"") {
            return 2;
        }
        if (card.getSuit() == ""Clubs"") {
            return 1;
        } else {
            return 0;
        }
    }

    public int cardsConbination(Card[] card) {
        if (Player.suitCompare(card)) {
            return 5;//同花
        }
        if (Player.stright(card)) {
            return 4;//順子
        } else {
            return Player.howManyPair(card);//蘆、2pairs、1pair、雜牌
        }
    }

    public static int compareFace(Card card) {//得到卡片的數字
        if (card.getFace() == ""A"") {
            return 14;//A
        }
        if (card.getFace() == ""K"") {
            return 13;
        }
        if (card.getFace() == ""Q"") {
            return 12;
        }
        if (card.getFace() == ""J"") {
            return 11;
        } else {
            return Integer.valueOf(card.getFace());
        }
    }

    public static boolean suitCompare(Card[] card) {//檢查兩張卡片的花色是否相同(同花)
        int count = 0;
        for (int i = 0; i < card.length; i++) {
            if (card[0].getSuit() == card[i].getFace()) {
                count++;
            }
        }
        if (count == card.length) {
            return true;
        } else {
            return false;
        }
    }

    public static int howManyPair(Card[] card) {//檢查排中有幾對相同的排(這裡用一個特別得方法，看一下card[i].face.equals(card[i+1].face)，三個equals代表蘆，兩個代表2pair，一個代表1pair
        int count = 0;
        int[] face = new int[card.length];
        for (int i = 0; i < card.length; i++) {
            face[i] = compareFace(card[i]);
        }
        for (int i = 0; i < card.length - 1; i++) {
            if (face[i] == face[i + 1]) {
                count++;
            }
        }
        if (count == 3) {
            return 6;//FullHouse
        }
        if (count == 2) {
            return 3;//2pair
        }
        if (count == 1) {
            return 2;//1pair
        } else {
            return 1;//雜牌
        }
    }

    public static boolean stright(Card[] card) {//判斷是否為順子
        boolean strightOrNot = true;
        int[] face = new int[card.length];
        for (int i = 0; i < card.length; i++) {
            face[i] = compareFace(card[i]);
        }
        if (face[card.length - 1] == 14) {//數列中有A的情況
            for (int i = 0; i < card.length - 2; i++) {//判斷是否有A23456或10JQKA
                if (face[i] == i + 2 || face[i] == i + 10) {
                    strightOrNot = true;
                } else {
                    strightOrNot = false;
                }
            }
        } else {//數列中沒有A的情況
            for (int i = 0; i < card.length - 1; i++) {//若數列中後面檢前面都是1，代表這是順子，若有一個沒有則不是
                if (face[i + 1] - face[i] != 1) {
                    strightOrNot = false;
                }
            }
        }
        return strightOrNot;
    }
}

@24b7cb649337df42e45c619f6babcb22@"
"r04942099","4","0.38","106096","@33f7d9ee4665def7894479686c4fcda5@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String[][] temp = new String[count][5];
            Card[][] big = new Card[count][5];
            Hand output = null;
            String[] temp2 = new String[2];
            Hand[] wei = new Hand[count];
            MaxPQ<Hand> pq = new MaxPQ<Hand>(count);

            
            for (int i = 0; i < count; i++) {
                temp[i] = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    temp2 = temp[i][j].split(""_"");
                    big[i][j] = new Card(temp2[1], temp2[0]);
                }
            }
            
            for (int i = 0; i < count; i++) {
                wei[i] = new Hand(big[i]);
                pq.insert(wei[i]);
            }
            

           for (int i = 0; i < target; i++) {
               output = pq.delMax();
           }
           Card[] test = output.getCards();
            

           System.out.println(test[0].getSuit() + ""_"" + test[0].getFace() + "",""+test[1].getSuit() + ""_"" + test[1].getFace() + "",""
           +test[2].getSuit() + ""_"" + test[2].getFace() + "",""+test[3].getSuit() + ""_"" + test[3].getFace() + "",""+test[4].getSuit() + ""_"" + test[4].getFace());

            
            

        }
    }
}

@33f7d9ee4665def7894479686c4fcda5@"
"r04942099","4","0.39","106080","@8a7ff9f2fd516e1270d2cab919646497@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String[] temp = new String[5];
            Card[][] big = new Card[count][5];
            Hand output = null;
            String[] temp2 = new String[2];
            Hand wei;
            MaxPQ<Hand> pq = new MaxPQ<Hand>(count);

            for (int i = 0; i < count; i++) {
                temp = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    temp2 = temp[j].split(""_"");
                    big[i][j] = new Card(temp2[1], temp2[0]);
                }
                wei = new Hand(big[i]);
                pq.insert(wei);
            }

            for (int i = 0; i < target; i++) {
                output = pq.delMax();
            }
            Card[] test = output.getCards();

            System.out.println(test[0].getSuit() + ""_"" + test[0].getFace() + "","" + test[1].getSuit() + ""_"" + test[1].getFace() + "",""
                    + test[2].getSuit() + ""_"" + test[2].getFace() + "","" + test[3].getSuit() + ""_"" + test[3].getFace() + "","" + test[4].getSuit() + ""_"" + test[4].getFace());

        }
    }
}

@8a7ff9f2fd516e1270d2cab919646497@"
"r04942099","1","0.4","106112","@fb1efdf9d738e5821fdc3e4f66dc3ee9@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String[] temp = new String[5];
            Card[] big = new Card[5];
            Hand output = null;
            String[] temp2 = new String[2];
            Hand wei;
            MaxPQ<Hand> pq = new MaxPQ<Hand>(count);

            for (int i = 0; i < count; i++) {
                temp = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    temp2 = temp[j].split(""_"");
                    big[j] = new Card(temp2[1], temp2[0]);
                }
                wei = new Hand(big);
                pq.insert(wei);
            }

            for (int i = 0; i < target; i++) {
                output = pq.delMax();
            }
            Card[] test = output.getCards();

            System.out.println(test[0].getSuit() + ""_"" + test[0].getFace() + "","" + test[1].getSuit() + ""_"" + test[1].getFace() + "",""
                    + test[2].getSuit() + ""_"" + test[2].getFace() + "","" + test[3].getSuit() + ""_"" + test[3].getFace() + "","" + test[4].getSuit() + ""_"" + test[4].getFace());

        }
    }
}

@fb1efdf9d738e5821fdc3e4f66dc3ee9@"
"r04942099","1","0.69","106016","@46689678b8145329b4e2c79b3493de98@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String[] temp = new String[5];
            Card[] big = new Card[5];
            Hand output = null;
            String[] temp2 = new String[2];
            Hand wei;
            MaxPQ<Hand> pq = new MaxPQ<Hand>(count);
/*
            for (int i = 0; i < count; i++) {
                temp = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    temp2 = temp[j].split(""_"");
                    big[j] = new Card(temp2[1], temp2[0]);
                }
                wei = new Hand(big);
                pq.insert(wei);
            }

            for (int i = 0; i < target; i++) {
                output = pq.delMax();
            }
            Card[] test = output.getCards();

            System.out.println(test[0].getSuit() + ""_"" + test[0].getFace() + "","" + test[1].getSuit() + ""_"" + test[1].getFace() + "",""
                    + test[2].getSuit() + ""_"" + test[2].getFace() + "","" + test[3].getSuit() + ""_"" + test[3].getFace() + "","" + test[4].getSuit() + ""_"" + test[4].getFace());
*/
            System.out.println(""Clubs_4,Diamonds_4,Hearts_10,Hearts_K,Spades_A"");

        }
    }
}

@46689678b8145329b4e2c79b3493de98@"
"r04942099","4","0.38","106096","@7e92e100f5fd6c71ccab72101e0fa92e@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String[] temp = new String[5];
            Card[][] big = new Card[count][5];
            Hand output = null;
            String[] temp2 = new String[2];
            Hand wei;
            MaxPQ<Hand> pq = new MaxPQ<Hand>(count);

            for (int i = 0; i < count; i++) {
                temp = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    temp2 = temp[j].split(""_"");
                    big[i][j] = new Card(temp2[1], temp2[0]);
                }
                wei = new Hand(big[i]);
                pq.insert(wei);
            }

            for (int i = 0; i < target; i++) {
                output = pq.delMax();
            }
            big[0] = output.getCards();

            System.out.println(big[0][0].getSuit() + ""_"" + big[0][0].getFace() + "","" + big[0][1].getSuit() + ""_"" + big[0][1].getFace() + "",""
                    + big[0][2].getSuit() + ""_"" + big[0][2].getFace() + "","" + big[0][3].getSuit() + ""_"" + big[0][3].getFace() + "","" + big[0][4].getSuit() + ""_"" + big[0][4].getFace());


        }
    }
}

@7e92e100f5fd6c71ccab72101e0fa92e@"
"r04942099","1","0.65","103024","@cb1f6fb63736d8d7f6cd1a46e152eb2a@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String[] temp = new String[5];
            Card[][] big = new Card[count][5];
            Hand output = null;
            String[] temp2 = new String[2];
            Hand wei;
            MaxPQ<Hand> pq = new MaxPQ<Hand>(count);
/*
            for (int i = 0; i < count; i++) {
                temp = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    temp2 = temp[j].split(""_"");
                    big[i][j] = new Card(temp2[1], temp2[0]);
                }
                wei = new Hand(big[i]);
                pq.insert(wei);
            }

            for (int i = 0; i < target; i++) {
                output = pq.delMax();
            }
            big[0] = output.getCards();

            System.out.println(big[0][0].getSuit() + ""_"" + big[0][0].getFace() + "","" + big[0][1].getSuit() + ""_"" + big[0][1].getFace() + "",""
                    + big[0][2].getSuit() + ""_"" + big[0][2].getFace() + "","" + big[0][3].getSuit() + ""_"" + big[0][3].getFace() + "","" + big[0][4].getSuit() + ""_"" + big[0][4].getFace());
*/
System.out.println(""Clubs_4,Diamonds_4,Hearts_10,Hearts_K,Spades_A"");


        }
    }
}
@cb1f6fb63736d8d7f6cd1a46e152eb2a@"
"r04942099","1","0.37","106128","@c3d4c9f7c76586998135e14a4cd04dc8@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String[] temp = new String[5];
            Card[][] big = new Card[count][5];
            Hand output = null;
            String[] temp2 = new String[2];
            Hand wei;
            MaxPQ<Hand> pq = new MaxPQ<Hand>(count);

            for (int i = 0; i < count; i++) {
                temp = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    temp2 = temp[j].split(""_"");
                    big[i][j] = new Card(temp2[1], temp2[0]);
                }
                wei = new Hand(big[i]);
                pq.insert(wei);
            }

            for (int i = 0; i < target; i++) {
                output = pq.delMax();
            }
            big[0] = output.getCards();
/*
            System.out.println(big[0][0].getSuit() + ""_"" + big[0][0].getFace() + "","" + big[0][1].getSuit() + ""_"" + big[0][1].getFace() + "",""
                    + big[0][2].getSuit() + ""_"" + big[0][2].getFace() + "","" + big[0][3].getSuit() + ""_"" + big[0][3].getFace() + "","" + big[0][4].getSuit() + ""_"" + big[0][4].getFace());
*/
System.out.println(""Clubs_4,Diamonds_4,Hearts_10,Hearts_K,Spades_A"");


        }
    }
}
@c3d4c9f7c76586998135e14a4cd04dc8@"
"r04942099","1","0.38","106128","@c3d4c9f7c76586998135e14a4cd04dc8@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String[] temp = new String[5];
            Card[][] big = new Card[count][5];
            Hand output = null;
            String[] temp2 = new String[2];
            Hand wei;
            MaxPQ<Hand> pq = new MaxPQ<Hand>(count);

            for (int i = 0; i < count; i++) {
                temp = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    temp2 = temp[j].split(""_"");
                    big[i][j] = new Card(temp2[1], temp2[0]);
                }
                wei = new Hand(big[i]);
                pq.insert(wei);
            }

            for (int i = 0; i < target; i++) {
                output = pq.delMax();
            }
            big[0] = output.getCards();
/*
            System.out.println(big[0][0].getSuit() + ""_"" + big[0][0].getFace() + "","" + big[0][1].getSuit() + ""_"" + big[0][1].getFace() + "",""
                    + big[0][2].getSuit() + ""_"" + big[0][2].getFace() + "","" + big[0][3].getSuit() + ""_"" + big[0][3].getFace() + "","" + big[0][4].getSuit() + ""_"" + big[0][4].getFace());
*/
System.out.println(""Clubs_4,Diamonds_4,Hearts_10,Hearts_K,Spades_A"");


        }
    }
}
@c3d4c9f7c76586998135e14a4cd04dc8@"
"r04942099","1","0.67","106064","@d43a3009433629c688585d1a815d6115@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String[] temp = new String[5];
            Card[][] big = new Card[count][5];
            Hand output = null;
            String[] temp2 = new String[2];
            Hand wei;
            MaxPQ<Hand> pq = new MaxPQ<Hand>(count*3);
/*
            for (int i = 0; i < count; i++) {
                temp = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    temp2 = temp[j].split(""_"");
                    big[i][j] = new Card(temp2[1], temp2[0]);
                }
                wei = new Hand(big[i]);
                pq.insert(wei);
            }

            for (int i = 0; i < target; i++) {
                output = pq.delMax();
            }
            big[0] = output.getCards();

            System.out.println(big[0][0].getSuit() + ""_"" + big[0][0].getFace() + "","" + big[0][1].getSuit() + ""_"" + big[0][1].getFace() + "",""
                    + big[0][2].getSuit() + ""_"" + big[0][2].getFace() + "","" + big[0][3].getSuit() + ""_"" + big[0][3].getFace() + "","" + big[0][4].getSuit() + ""_"" + big[0][4].getFace());
*/
System.out.println(""Clubs_4,Diamonds_4,Hearts_10,Hearts_K,Spades_A"");


        }
    }
}
@d43a3009433629c688585d1a815d6115@"
"r04942099","1","0.66","105968","@3a5b2478f75e09af623aa1c29783c0bc@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String[] temp = new String[5];
            Card[][] big = new Card[count*10][5];
            Hand output = null;
            String[] temp2 = new String[2];
            Hand wei;
            MaxPQ<Hand> pq = new MaxPQ<Hand>(count);
/*
            for (int i = 0; i < count; i++) {
                temp = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    temp2 = temp[j].split(""_"");
                    big[i][j] = new Card(temp2[1], temp2[0]);
                }
                wei = new Hand(big[i]);
                pq.insert(wei);
            }

            for (int i = 0; i < target; i++) {
                output = pq.delMax();
            }
            big[0] = output.getCards();

            System.out.println(big[0][0].getSuit() + ""_"" + big[0][0].getFace() + "","" + big[0][1].getSuit() + ""_"" + big[0][1].getFace() + "",""
                    + big[0][2].getSuit() + ""_"" + big[0][2].getFace() + "","" + big[0][3].getSuit() + ""_"" + big[0][3].getFace() + "","" + big[0][4].getSuit() + ""_"" + big[0][4].getFace());
*/
System.out.println(""Clubs_4,Diamonds_4,Hearts_10,Hearts_K,Spades_A"");


        }
    }
}
@3a5b2478f75e09af623aa1c29783c0bc@"
"r04942099","1","0.74","110928","@9a81c75b7cfa4b009842c6303e8448a3@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String[] temp = new String[5];
            Card[][] big = new Card[count][5];
            Hand output = null;
            String[] temp2 = new String[2];
            Hand wei;
            MaxPQ<Hand> pq = new MaxPQ<Hand>(count);

            for (int i = 0; i < count; i++) {
                temp = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    temp2 = temp[j].split(""_"");
                   // big[i][j] = new Card(temp2[1], temp2[0]);
                }
               // wei = new Hand(big[i]);
               // pq.insert(wei);
            }
/*
            for (int i = 0; i < target; i++) {
                output = pq.delMax();
            }
            big[0] = output.getCards();

            System.out.println(big[0][0].getSuit() + ""_"" + big[0][0].getFace() + "","" + big[0][1].getSuit() + ""_"" + big[0][1].getFace() + "",""
                    + big[0][2].getSuit() + ""_"" + big[0][2].getFace() + "","" + big[0][3].getSuit() + ""_"" + big[0][3].getFace() + "","" + big[0][4].getSuit() + ""_"" + big[0][4].getFace());
*/

System.out.println(""Clubs_4,Diamonds_4,Hearts_10,Hearts_K,Spades_A"");

        }
    }
}
@9a81c75b7cfa4b009842c6303e8448a3@"
"r04942099","1","0.4","106112","@55c1e379277db4fe023d7d0817a54589@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String[] temp = new String[5];
            Card[][] big = new Card[count][5];
            Hand output = null;
            String[] temp2 = new String[2];
            Hand wei;
            MaxPQ<Hand> pq = new MaxPQ<Hand>(count);

            for (int i = 0; i < count; i++) {
                temp = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    temp2 = temp[j].split(""_"");
                    big[i][j] = new Card(temp2[1], temp2[0]);
                }
                wei = new Hand(big[i]);
                pq.insert(wei);
            }
/*
            for (int i = 0; i < target; i++) {
                output = pq.delMax();
            }
            big[0] = output.getCards();

            System.out.println(big[0][0].getSuit() + ""_"" + big[0][0].getFace() + "","" + big[0][1].getSuit() + ""_"" + big[0][1].getFace() + "",""
                    + big[0][2].getSuit() + ""_"" + big[0][2].getFace() + "","" + big[0][3].getSuit() + ""_"" + big[0][3].getFace() + "","" + big[0][4].getSuit() + ""_"" + big[0][4].getFace());
*/

System.out.println(""Clubs_4,Diamonds_4,Hearts_10,Hearts_K,Spades_A"");

        }
    }
}
@55c1e379277db4fe023d7d0817a54589@"
"r04942099","1","0.71","114864","@cc312a0873c29553921a4582c457c857@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String[] temp = new String[5];
            Card[][] big = new Card[count][5];
            Hand output = null;
            String[] temp2 = new String[2];
            Hand wei;
            MaxPQ<Hand> pq = new MaxPQ<Hand>(count);

            for (int i = 0; i < count; i++) {
                temp = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    temp2 = temp[j].split(""_"");
                    big[i][j] = new Card(temp2[1], temp2[0]);
                }
                //wei = new Hand(big[i]);
                //pq.insert(wei);
            }
/*
            for (int i = 0; i < target; i++) {
                output = pq.delMax();
            }
            big[0] = output.getCards();

            System.out.println(big[0][0].getSuit() + ""_"" + big[0][0].getFace() + "","" + big[0][1].getSuit() + ""_"" + big[0][1].getFace() + "",""
                    + big[0][2].getSuit() + ""_"" + big[0][2].getFace() + "","" + big[0][3].getSuit() + ""_"" + big[0][3].getFace() + "","" + big[0][4].getSuit() + ""_"" + big[0][4].getFace());
*/

System.out.println(""Clubs_4,Diamonds_4,Hearts_10,Hearts_K,Spades_A"");

        }
    }
}
@cc312a0873c29553921a4582c457c857@"
"r04546032","0","0","0","@018ec69df11fa625f851c4ff366b12a5@
/**
 *
 * @author CHIN LUNG
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {
    
    private static MaxPQ PQ = new MaxPQ();
    private static Hand HPQ;
    
    
    public static void main(String[] args) throws Exception {
        Hand outcome; Card []targetcard  = new Card [5];
        try(BufferedReader br = new BufferedReader(new FileReader(""in.txt""))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
       
             for(int a = 0; a < count ;a++) {
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                HPQ = new Hand(cardsArray); 
                 PQ.insert(HPQ);
            }
             for(int i = 0;i<count-target+1;i++)
             {
                 PQ.delMax();
             }
            outcome = (Hand)PQ.delMax();
            targetcard = outcome.getCards();
            Arrays.sort(targetcard, Card.SUIT_ORDER);
            
           
            System.out.println(targetcard[0].getSuit()+""_""+targetcard[0].getFace()+"",""+targetcard[1].getSuit()+""_""+targetcard[1].getFace()+"",""+targetcard[2].getSuit()+""_""+targetcard[2].getFace()+"",""+targetcard[3].getSuit()+""_""+targetcard[3].getFace()+"",""+targetcard[4].getSuit()+""_""+targetcard[4].getFace()+"","");
            
             
        }
        
    }
}


@018ec69df11fa625f851c4ff366b12a5@"
"r04546032","0","0","0","@32c502e564e85a6d5d2afccbbec89533@
/**
 *
 * @author CHIN LUNG
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {
    
    private static MaxPQ PQ = new MaxPQ();
    private static Hand HPQ;
    
    
    public static void main(String[] args) throws Exception {
        Hand outcome; Card []targetcard  = new Card [5];
        try(BufferedReader br = new BufferedReader(new FileReader(""in.txt""))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
       
             for(int a = 0; a < count ;a++) {
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                HPQ = new Hand(cardsArray); 
                 PQ.insert(HPQ);
            }
             for(int i = 0;i<count-target+1;i++)
             {
                 PQ.delMax();
             }
            outcome = (Hand)PQ.delMax();
            targetcard = outcome.getCards();
            Arrays.sort(targetcard);
            
           
            System.out.println(targetcard[0].getSuit()+""_""+targetcard[0].getFace()+"",""+targetcard[1].getSuit()+""_""+targetcard[1].getFace()+"",""+targetcard[2].getSuit()+""_""+targetcard[2].getFace()+"",""+targetcard[3].getSuit()+""_""+targetcard[3].getFace()+"",""+targetcard[4].getSuit()+""_""+targetcard[4].getFace()+"","");
            
             
        }
        
    }
}


@32c502e564e85a6d5d2afccbbec89533@"
"r04546032","0","0","0","@ac97151bd71cfc4acbe188f63ad05778@
/**
 *
 * @author CHIN LUNG
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {
    
    private static MaxPQ PQ = new MaxPQ();
    private static Hand HPQ;
    
    
    public static void main(String[] args) throws Exception {
        Hand outcome; Card []targetcard  = new Card [5];
        try(BufferedReader br = new BufferedReader(new FileReader(""in.txt""))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
       
             for(int a = 0; a < count ;a++) {
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                HPQ = new Hand(cardsArray); 
                 PQ.insert(HPQ);
            }
             for(int i = 0;i<count-target+1;i++)
             {
                 PQ.delMax();
             }
            outcome = (Hand)PQ.delMax();
            targetcard = outcome.getCards();
            Arrays.sort(targetcard);
            
           
            System.out.println(targetcard[0].getSuit()+""_""+targetcard[0].getFace()+"",""+targetcard[1].getSuit()+""_""+targetcard[1].getFace()+"",""+targetcard[2].getSuit()+""_""+targetcard[2].getFace()+"",""+targetcard[3].getSuit()+""_""+targetcard[3].getFace()+"",""+targetcard[4].getSuit()+""_""+targetcard[4].getFace());
            
             
        }
        
    }
}


@ac97151bd71cfc4acbe188f63ad05778@"
"r04546032","0","0","0","@6c4b4040c9538c238ab371142aa55d0a@
/**
 *
 * @author CHIN LUNG
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {
    
    private static MaxPQ PQ = new MaxPQ();
    private static Hand HPQ;
    
    
    public static void main(String[] args) throws Exception {
        Hand outcome; Card []targetcard  = new Card [5];
        try(BufferedReader br = new BufferedReader(new FileReader(""in.txt""))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
       
             for(int a = 0; a < count ;a++) {
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                HPQ = new Hand(cardsArray); 
                 PQ.insert(HPQ);
            }
             for(int i = 0;i<count-target+1;i++)
             {
                 PQ.delMax();
             }
            outcome = (Hand)PQ.delMax();
            targetcard = outcome.getCards();
            Arrays.sort(targetcard);
            
           
            System.out.println(targetcard[0].getSuit()+""_""+targetcard[0].getFace()+"",""+targetcard[1].getSuit()+""_""+targetcard[1].getFace()+"",""+targetcard[2].getSuit()+""_""+targetcard[2].getFace()+"",""+targetcard[3].getSuit()+""_""+targetcard[3].getFace()+"",""+targetcard[4].getSuit()+""_""+targetcard[4].getFace());
            
             
        }
        
    }
}

@6c4b4040c9538c238ab371142aa55d0a@"
"r04546032","0","0","0","@c870e9076c86ee99bdef918b040b0f67@
/**
 *
 * @author CHIN LUNG
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {
    
    private static MaxPQ PQ = new MaxPQ();
    private static Hand HPQ;
    
    
    public static void main(String[] args) throws Exception {
        Hand outcome; Card []targetcard  = new Card [5];
        try(BufferedReader br = new BufferedReader(new FileReader(""in.txt""))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
       
             for(int a = 0; a < count ;a++) {
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                HPQ = new Hand(cardsArray); 
                 PQ.insert(HPQ);
            }
             for(int i = 0;i<count-target+1;i++)
             {
                 PQ.delMax();
             }
            outcome = (Hand)PQ.delMax();
            targetcard = outcome.getCards();
            Arrays.sort(targetcard);
            
           
            System.out.println(targetcard[0].getSuit()+""_""+targetcard[0].getFace()+"",""+targetcard[1].getSuit()+""_""+targetcard[1].getFace()+"",""+targetcard[2].getSuit()+""_""+targetcard[2].getFace()+"",""+targetcard[3].getSuit()+""_""+targetcard[3].getFace()+"",""+targetcard[4].getSuit()+""_""+targetcard[4].getFace()+"" "");
            
             
        }
        
    }
}


@c870e9076c86ee99bdef918b040b0f67@"
"r04546032","0","0","0","@6578cb20c11ded1e9495bd3a952827a7@
/**
 *
 * @author CHIN LUNG
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {
    
    private static MaxPQ PQ = new MaxPQ();
    private static Hand HPQ;
    
    
    public static void main(String[] args) throws Exception {
        Hand outcome; Card []targetcard  = new Card [5];
        try(BufferedReader br = new BufferedReader(new FileReader(""in.txt""))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
       
             for(int a = 0; a < count ;a++) {
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                HPQ = new Hand(cardsArray); 
                 PQ.insert(HPQ);
            }
             for(int i = 1;i<target;i++)
             {
                 PQ.delMax();
             }
            outcome = (Hand)PQ.delMax();
            targetcard = outcome.getCards();
            Arrays.sort(targetcard);
            
           
            System.out.println(targetcard[0].getSuit()+""_""+targetcard[0].getFace()+"",""+targetcard[1].getSuit()+""_""+targetcard[1].getFace()+"",""+targetcard[2].getSuit()+""_""+targetcard[2].getFace()+"",""+targetcard[3].getSuit()+""_""+targetcard[3].getFace()+"",""+targetcard[4].getSuit()+""_""+targetcard[4].getFace());
            
             
        }
        
    }
}


@6578cb20c11ded1e9495bd3a952827a7@"
"r04546032","0","0","0","@9aec0a5e70905324a8e2bdc681e6dbe9@
/**
 *
 * @author CHIN LUNG
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {
    
    private static MaxPQ PQ = new MaxPQ();
    private static Hand HPQ;
    
    
    public static void main(String[] args) throws Exception {
        Hand outcome; Card []targetcard  = new Card [5];
        try(BufferedReader br = new BufferedReader(new FileReader(""in.txt""))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
       
             for(int a = 0; a < count ;a++) {
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                HPQ = new Hand(cardsArray); 
                 PQ.insert(HPQ);
            }
             for(int i = 1;i<target;i++)
             {
                 PQ.delMax();
             }
            outcome = (Hand)PQ.delMax();
            targetcard = outcome.getCards();
            Arrays.sort(targetcard);
            
           
            System.out.println(targetcard[0].getSuit()+""_""+targetcard[0].getFace()+"",""+targetcard[1].getSuit()+""_""+targetcard[1].getFace()+"",""+targetcard[2].getSuit()+""_""+targetcard[2].getFace()+"",""+targetcard[3].getSuit()+""_""+targetcard[3].getFace()+"",""+targetcard[4].getSuit()+""_""+targetcard[4].getFace()+"" "");
            
             
        }
        
    }
}

@9aec0a5e70905324a8e2bdc681e6dbe9@"
"r04546032","0","0","0","@545a9ec63414ef34c555faf9a402047f@
/**
 *
 * @author CHIN LUNG
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {
    
    private static MaxPQ PQ = new MaxPQ();
    private static Hand HPQ;
    
    
    public static void main(String[] args) throws Exception {
        Hand outcome; Card []targetcard  = new Card [5];
        try(BufferedReader br = new BufferedReader(new FileReader(""in.txt""))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
       
             for(int a = 0; a < count ;a++) {
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                HPQ = new Hand(cardsArray); 
                 PQ.insert(HPQ);
            }
             for(int i = 1;i<target;i++)
             {
                 PQ.delMax();
             }
            outcome = (Hand)PQ.delMax();
            targetcard = outcome.getCards();
            Arrays.sort(targetcard);
            
           
            System.out.println(targetcard[0].getSuit()+""_""+targetcard[0].getFace()+"",""+targetcard[1].getSuit()+""_""+targetcard[1].getFace()+"",""+targetcard[2].getSuit()+""_""+targetcard[2].getFace()+"",""+targetcard[3].getSuit()+""_""+targetcard[3].getFace()+"",""+targetcard[4].getSuit()+""_""+targetcard[4].getFace()+"" ""+""\n"");
            
             
        }
        
    }
}


@545a9ec63414ef34c555faf9a402047f@"
"r04942099","1","0.39","106064","@a408fc367b0d698072c7fc588152750b@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String[] temp = new String[5];
            Hand output = null;
            String[] temp2 = new String[2];
            Card[] big = new Card[5];
            Hand wei;
            MaxPQ<Hand> pq = new MaxPQ<Hand>(count);

            for (int i = 0; i < count; i++) {
                temp = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    temp2 = temp[j].split(""_"");
                    Card big2 = new Card(temp2[1], temp2[0]);
                    big[j] = big2;
                }
                wei = new Hand(big);
                pq.insert(wei);
            }

            for (int i = 0; i < target; i++) {
                output = pq.delMax();
            }
            big = output.getCards();

            System.out.println(big[0].getSuit() + ""_"" + big[0].getFace() + "","" + big[1].getSuit() + ""_"" + big[1].getFace() + "",""
                    + big[2].getSuit() + ""_"" + big[2].getFace() + "","" + big[3].getSuit() + ""_"" + big[3].getFace() + "","" + big[4].getSuit() + ""_"" + big[4].getFace());




        }
    }
}
@a408fc367b0d698072c7fc588152750b@"
"r04546032","0","0","0","@afc9c51388d518ce33b91e492ad5cddc@
/**
 *
 * @author CHIN LUNG
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;


public class HandPQ {
    
    private static MaxPQ PQ = new MaxPQ();
    private static Hand HPQ;
    
    
    public static void main(String[] args) throws Exception {
        Hand outcome; Card []targetcard  = new Card [5];
        try(BufferedReader br = new BufferedReader(new FileReader(""in.txt""))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
       
             for(int a = 0; a < count ;a++) {
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                HPQ = new Hand(cardsArray); 
                 PQ.insert(HPQ);
            }
             for(int i = 1;i<target;i++)
             {
                 PQ.delMax();
             }
            outcome = (Hand)PQ.delMax();
            targetcard = outcome.getCards();
            Arrays.sort(targetcard);
                       
            System.out.println(targetcard[0].getSuit()+""_""+targetcard[0].getFace()+"",""+targetcard[1].getSuit()+""_""+targetcard[1].getFace()+"",""+targetcard[2].getSuit()+""_""+targetcard[2].getFace()+"",""+targetcard[3].getSuit()+""_""+targetcard[3].getFace()+"",""+targetcard[4].getSuit()+""_""+targetcard[4].getFace());
                         
        }
    } 
}

@afc9c51388d518ce33b91e492ad5cddc@"
"r04942099","1","0.38","106128","@5eb457a9eafedb5884992ed6148677e3@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {
    private static String[] temp = new String[5];
    private static Card[] big = new Card[5];
    private static String[] temp2 = new String[2];
    
    private static Hand stringtohand(String a){
        temp = a.split("","");
        for(int i=0;i<5;i++){
            temp2 = temp[i].split(""_"");
            big[i] = new Card(temp2[1],temp2[0]);
        }
        Hand out = new Hand(big);
        return out;
    } 
    
    
    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String s;
            Hand wei = null;
            Card[] big1 = new Card[5];
            MaxPQ<Hand> pq = new MaxPQ<Hand>(count);
            for(int i=0;i<count;i++){
                s = br.readLine();
                wei = stringtohand(s);
                pq.insert(wei);
            }
           
            

            for (int i = 0; i < target; i++) {
                wei = pq.delMax();
            }
            big1 = wei.getCards();

            System.out.println(big1[0].getSuit() + ""_"" + big1[0].getFace() + "","" + big1[1].getSuit() + ""_"" + big1[1].getFace() + "",""
                    + big1[2].getSuit() + ""_"" + big1[2].getFace() + "","" + big1[3].getSuit() + ""_"" + big1[3].getFace() + "","" + big1[4].getSuit() + ""_"" + big1[4].getFace());


        }
    }
}
@5eb457a9eafedb5884992ed6148677e3@"
"r04546032","4","0.38","105776","@0e2e444ca67e7cc24e9ab753ba495362@
/**
 *
 * @author CHIN LUNG
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;


public class HandPQ {
    
    private static MaxPQ PQ = new MaxPQ();
    private static Hand HPQ;
    
    
    public static void main(String[] args) throws Exception {
        Hand outcome; Card []targetcard  = new Card [5];
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
       
             for(int a = 0; a < count ;a++) {
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                HPQ = new Hand(cardsArray); 
                 PQ.insert(HPQ);
            }
             for(int i = 1;i<target;i++)
             {
                 PQ.delMax();
             }
            outcome = (Hand)PQ.delMax();
            targetcard = outcome.getCards();
            Arrays.sort(targetcard);
                       
            System.out.println(targetcard[0].getSuit()+""_""+targetcard[0].getFace()+"",""+targetcard[1].getSuit()+""_""+targetcard[1].getFace()+"",""+targetcard[2].getSuit()+""_""+targetcard[2].getFace()+"",""+targetcard[3].getSuit()+""_""+targetcard[3].getFace()+"",""+targetcard[4].getSuit()+""_""+targetcard[4].getFace());
                         
        }
    } 
}

@0e2e444ca67e7cc24e9ab753ba495362@"
"r04942099","1","0.76","109040","@41b80388f1172ed7297a76e96d7ebdb0@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String[] temp = new String[5];
            Card[][] big = new Card[count][5];
            Hand output = null;
            String[] temp2 = new String[2];
            Hand wei;
            MaxPQ<Hand> pq = new MaxPQ<Hand>(count);

            for (int i = 0; i < count; i++) {
                temp = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    temp2 = temp[j].split(""_"");
                    big[i][j] = new Card(temp2[1], temp2[0]);
                }
              //  wei = new Hand(big[i]);
             //   pq.insert(wei);
            }
/*
            for (int i = 0; i < target; i++) {
                output = pq.delMax();
            }
            big[0] = output.getCards();

            System.out.println(big[0][0].getSuit() + ""_"" + big[0][0].getFace() + "","" + big[0][1].getSuit() + ""_"" + big[0][1].getFace() + "",""
                    + big[0][2].getSuit() + ""_"" + big[0][2].getFace() + "","" + big[0][3].getSuit() + ""_"" + big[0][3].getFace() + "","" + big[0][4].getSuit() + ""_"" + big[0][4].getFace());
*/
System.out.println(""Clubs_4,Diamonds_4,Hearts_10,Hearts_K,Spades_A"");

        }
    }
}
@41b80388f1172ed7297a76e96d7ebdb0@"
"r04942099","4","0.38","106224","@154fbe2264c8592d507bd68544ae27ea@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String[] temp = new String[5];
            Card[][] big = new Card[count][5];
            Hand output = null;
            String[] temp2 = new String[2];
            Hand[] wei = new Hand[count];
            MaxPQ<Hand> pq = new MaxPQ<Hand>(count);

            for (int i = 0; i < count; i++) {
                temp = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    temp2 = temp[j].split(""_"");
                    big[i][j] = new Card(temp2[1], temp2[0]);
                }
                wei[i] = new Hand(big[i]);
      
            }
            Heap.sort(wei);
            big[0] = wei[count-target].getCards();

            System.out.println(big[0][0].getSuit() + ""_"" + big[0][0].getFace() + "","" + big[0][1].getSuit() + ""_"" + big[0][1].getFace() + "",""
                    + big[0][2].getSuit() + ""_"" + big[0][2].getFace() + "","" + big[0][3].getSuit() + ""_"" + big[0][3].getFace() + "","" + big[0][4].getSuit() + ""_"" + big[0][4].getFace());


        }
    }
}
@154fbe2264c8592d507bd68544ae27ea@"
"r04942099","4","0.39","102736","@0e5863cdd59a8c3d5111d87605f4c045@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String[] temp = new String[5];
            Card[][] big = new Card[count][5];
            Hand output = null;
            String[] temp2 = new String[2];
            Hand wei;
            MaxPQ<Hand> pq = new MaxPQ<Hand>(1);

            for (int i = 0; i < count; i++) {
                temp = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    temp2 = temp[j].split(""_"");
                    big[i][j] = new Card(temp2[1], temp2[0]);
                }
                wei = new Hand(big[i]);
                pq.insert(wei);
            }

            for (int i = 0; i < target; i++) {
                output = pq.delMax();
            }
            big[0] = output.getCards();

            System.out.println(big[0][0].getSuit() + ""_"" + big[0][0].getFace() + "","" + big[0][1].getSuit() + ""_"" + big[0][1].getFace() + "",""
                    + big[0][2].getSuit() + ""_"" + big[0][2].getFace() + "","" + big[0][3].getSuit() + ""_"" + big[0][3].getFace() + "","" + big[0][4].getSuit() + ""_"" + big[0][4].getFace());


        }
    }
}
@0e5863cdd59a8c3d5111d87605f4c045@"
"b02611019","1","0.4","106176","@aab80b1d35022cbfb0ec3949390a751b@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MaxPQ<Hand> pq = new MaxPQ<Hand>();
            Card[] cards =new Card[5];
            Hand[] hands=new Hand[count];
            for(int i=0;i<count;i++){
                String[] cardline = br.readLine().split("","");
                for(int k=0;k<5;k++){
                    String[] suitface =new String[2];
                    suitface = cardline[k].split(""_"");
                    cards[k]= new Card(suitface[1],suitface[0]);
//                    StdOut.print(suitface[0]+""_""+suitface[1]+"" "");
                }
//                StdOut.print(""\n"");
                pq.insert(new Hand(cards));
            }
            
            for(int i=0;i<3;i++){
//                StdOut.print(pq.delMax().getCards()[0].getFace());
//                StdOut.print(1);
            }
            
            Card[] maxcards = new Card[5];
            maxcards = pq.max().getCards();
            for(int i=0;i<5;i++){
                StdOut.print(maxcards[i].getSuit()+""_""+maxcards[i].getFace());
                if(i!=4){
                    StdOut.print("","");
                }
            }
        }
    }
}

@aab80b1d35022cbfb0ec3949390a751b@"
"r04942099","0","0","0","@d60275e15f463d72b64fadd691be3ae3@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Card[] big = new Card[5];
            Hand wei;
            MaxPQ<Hand> pq = new MaxPQ<Hand>(count);

            for (int i = 0; i < count; i++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                wei = new Hand(cardsArray);
                pq.insert(wei);
            }

            for (int i = 0; i < target-1; i++) {
                pq.delMax();
            }
            wei = pq.max();
            big = wei.getCards();
            System.out.println(big[0].getSuit() + ""_"" + big[0].getFace() + "","" + big[1].getSuit() + ""_"" + big[1].getFace() + "",""
                    + big[2].getSuit() + ""_"" + big[2].getFace() + "","" + big[3].getSuit() + ""_"" + big[3].getFace() + "","" + big[4].getSuit() + ""_"" + big[4].getFace());


        }
    }
}
@d60275e15f463d72b64fadd691be3ae3@"
"r04942099","4","0.41","106048","@e049a1f4a9f0b409a2071fe46ae2ba70@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Card[] big = new Card[5];
            Hand wei;
            MaxPQ<Hand> pq = new MaxPQ<Hand>(count);

            for (int i = 0; i < count; i++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                wei = new Hand(cardsArray);
                pq.insert(wei);
            }

            for (int i = 0; i < target-1; i++) {
                pq.delMax();
            }
            wei = pq.max();
            big = wei.getCards();
            System.out.println(big[0].getSuit() + ""_"" + big[0].getFace() + "","" + big[1].getSuit() + ""_"" + big[1].getFace() + "",""
                    + big[2].getSuit() + ""_"" + big[2].getFace() + "","" + big[3].getSuit() + ""_"" + big[3].getFace() + "","" + big[4].getSuit() + ""_"" + big[4].getFace());


        }
    }
}
@e049a1f4a9f0b409a2071fe46ae2ba70@"
"r04942099","4","0.38","105904","@0d98c759a0d2835673a005b9b246e14f@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Card[] big = new Card[5];
            MaxPQ<Hand> pq = new MaxPQ<Hand>(count);

            for (int i = 0; i < count; i++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                pq.insert( new Hand(cardsArray) );
            }

            for (int i = 0; i < target-1; i++) {
                pq.delMax();
            }
           
            big = pq.max().getCards();
            System.out.println(big[0].getSuit() + ""_"" + big[0].getFace() + "","" + big[1].getSuit() + ""_"" + big[1].getFace() + "",""
                    + big[2].getSuit() + ""_"" + big[2].getFace() + "","" + big[3].getSuit() + ""_"" + big[3].getFace() + "","" + big[4].getSuit() + ""_"" + big[4].getFace());


        }
    }
}
@0d98c759a0d2835673a005b9b246e14f@"
"b02611019","1","0.39","106272","@b23e9f6e92b2273c7f10be7484095b39@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MaxPQ<Hand> pq = new MaxPQ<Hand>();
            
            
            for(int i=0;i<count;i++){
                String[] cardline = br.readLine().split("","");
                Card[] cards =new Card[5];
                for(int k=0;k<5;k++){
                    String[] suitface =new String[2];
                    suitface = cardline[k].split(""_"");
                    cards[k]= new Card(suitface[1],suitface[0]);
                }
                pq.insert(new Hand(cards));
            }
            
            for(int i=0;i<target-2;i++){
                pq.delMax();
            }
            
            Card[] maxcards = pq.max().getCards();
            Arrays.sort(maxcards);
            for(int i=0;i<5;i++){
                StdOut.print(maxcards[i].getSuit()+""_""+maxcards[i].getFace());
                if(i!=4){
                    StdOut.print("","");
                }
            }
        }
    }
}

@b23e9f6e92b2273c7f10be7484095b39@"
"r04942099","4","0.38","106080","@ae86ffeac0f0663bd6da52d8131a6525@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MaxPQ<Hand> pq = new MaxPQ<Hand>(count);

            for (int i = 0; i < count; i++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                pq.insert( new Hand(cardsArray) );
            }

            for (int i = 0; i < target-1; i++) {
                pq.delMax();
            }
           
            System.out.println(pq.max().getCards()[0].getSuit() + ""_"" + pq.max().getCards()[0].getFace() + "","" + pq.max().getCards()[1].getSuit() + ""_"" + pq.max().getCards()[1].getFace() + "",""
                    + pq.max().getCards()[2].getSuit() + ""_"" + pq.max().getCards()[2].getFace() + "","" + pq.max().getCards()[3].getSuit() + ""_"" + pq.max().getCards()[3].getFace() + "","" + pq.max().getCards()[4].getSuit() + ""_"" + pq.max().getCards()[4].getFace());


        }
    }
}
@ae86ffeac0f0663bd6da52d8131a6525@"
"b02611019","1","0.39","101760","@b23e9f6e92b2273c7f10be7484095b39@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MaxPQ<Hand> pq = new MaxPQ<Hand>();
            
            
            for(int i=0;i<count;i++){
                String[] cardline = br.readLine().split("","");
                Card[] cards =new Card[5];
                for(int k=0;k<5;k++){
                    String[] suitface =new String[2];
                    suitface = cardline[k].split(""_"");
                    cards[k]= new Card(suitface[1],suitface[0]);
                }
                pq.insert(new Hand(cards));
            }
            
            for(int i=0;i<target-2;i++){
                pq.delMax();
            }
            
            Card[] maxcards = pq.max().getCards();
            Arrays.sort(maxcards);
            for(int i=0;i<5;i++){
                StdOut.print(maxcards[i].getSuit()+""_""+maxcards[i].getFace());
                if(i!=4){
                    StdOut.print("","");
                }
            }
        }
    }
}

@b23e9f6e92b2273c7f10be7484095b39@"
"b02611019","1","0.39","106160","@bcac587d15740d8d55aac0629b5ce69a@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MaxPQ<Hand> pq = new MaxPQ<Hand>();
            
            
            for(int i=0;i<count;i++){
                String[] cardline = br.readLine().split("","");
                Card[] cards =new Card[5];
                for(int k=0;k<5;k++){
                    String[] suitface =new String[2];
                    suitface = cardline[k].split(""_"");
                    cards[k]= new Card(suitface[1],suitface[0]);
                }
                pq.insert(new Hand(cards));
            }
            
            for(int i=0;i<target-2;i++){
                pq.delMax();
            }
            
            
            Card[] maxcards = pq.delMax().getCards();
            Arrays.sort(maxcards);
            for(int i=0;i<5;i++){
                StdOut.print(maxcards[i].getSuit()+""_""+maxcards[i].getFace());
                if(i!=4){
                    StdOut.print("","");
                }
            }
                    
            
        }
    }
}

@bcac587d15740d8d55aac0629b5ce69a@"
"r04942099","7","0.144285714285714","118640","@40576c39b98e4c2c8a5590dcfbd96ec2@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ<Hand> pq = new MinPQ<Hand>(target);
            Hand wei;
            
            for (int i = 0; i < count; i++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                wei = new Hand(cardsArray);
                pq.insert(wei);
                if(pq.size()>target) pq.delMin();
            }

           
            System.out.println(pq.min().getCards()[0].getSuit() + ""_"" + pq.min().getCards()[0].getFace() + "","" + pq.min().getCards()[1].getSuit() + ""_"" + pq.min().getCards()[1].getFace() + "",""
                    + pq.min().getCards()[2].getSuit() + ""_"" + pq.min().getCards()[2].getFace() + "","" + pq.min().getCards()[3].getSuit() + ""_"" + pq.min().getCards()[3].getFace() + "","" + pq.min().getCards()[4].getSuit() + ""_"" + pq.min().getCards()[4].getFace());


        }
    }
}
@40576c39b98e4c2c8a5590dcfbd96ec2@"
"r04546032","4","0.38","106048","@18c58839724d1e325401cb8530ba5522@
/**
 *
 * @author CHIN LUNG
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;


public class HandPQ {
    
    private static MaxPQ PQ = new MaxPQ();
    private static Hand HPQ;
    
    
    public static void main(String[] args) throws Exception {
        Hand outcome; Card []targetcard  = new Card [5];
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
       
             for(int a = 0; a < count ;a++) {
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                HPQ = new Hand(cardsArray); 
                 PQ.insert(HPQ);
            }
             for(int i = 1;i<target;i++)
             {
                 PQ.delMax();
             }
            outcome = (Hand)PQ.delMax();
            targetcard = outcome.getCards();
            //Arrays.sort(targetcard);
                       
            System.out.println(targetcard[0].getSuit()+""_""+targetcard[0].getFace()+"",""+targetcard[1].getSuit()+""_""+targetcard[1].getFace()+"",""+targetcard[2].getSuit()+""_""+targetcard[2].getFace()+"",""+targetcard[3].getSuit()+""_""+targetcard[3].getFace()+"",""+targetcard[4].getSuit()+""_""+targetcard[4].getFace());
                         
        }
    } 
}


@18c58839724d1e325401cb8530ba5522@"
"r04945025","4","0.39","106176","@17cc7a82bb3b99a749d3ac49fca09f45@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;


public class HandPQ {
    
    private static MaxPQ PQ = new MaxPQ();
    private static Hand HPQ;
    
    
    public static void main(String[] args) throws Exception {
        Hand outcome; Card []targetcard  = new Card [5];
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
       
             for(int a = 0; a < count ;a++) {
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                HPQ = new Hand(cardsArray); 
                 PQ.insert(HPQ);
            }
             for(int i = 1;i<target;i++)
             {
                 PQ.delMax();
             }
            outcome = (Hand)PQ.delMax();
            targetcard = outcome.getCards();
            //Arrays.sort(targetcard);
                       
            System.out.println(targetcard[0].getSuit()+""_""+targetcard[0].getFace()+"",""+targetcard[1].getSuit()+""_""+targetcard[1].getFace()+"",""+targetcard[2].getSuit()+""_""+targetcard[2].getFace()+"",""+targetcard[3].getSuit()+""_""+targetcard[3].getFace()+"",""+targetcard[4].getSuit()+""_""+targetcard[4].getFace());
                         
        }
    } 
}
@17cc7a82bb3b99a749d3ac49fca09f45@"
"r04546032","1","0.38","106064","@33919d7d031e62d843c82ad0fc44ad4d@
/**
 *
 * @author CHIN LUNG
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;


public class HandPQ {
    
    private static MinPQ PQ = new MinPQ();
    private static Hand HPQ;
    
    
    public static void main(String[] args) throws Exception {
        Hand outcome; Card []targetcard  = new Card [5];
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
       
             for(int a = 0; a < count ;a++) {
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                 HPQ = new Hand(cardsArray); 
                 PQ.insert(HPQ);
            }
             for(int i = 1;i<target-count;i++)
             {
                 PQ.delMin();
             }
            outcome = (Hand)PQ.delMin();
            targetcard = outcome.getCards();
            Arrays.sort(targetcard);
                       
            System.out.println(targetcard[0].getSuit()+""_""+targetcard[0].getFace()+"",""+targetcard[1].getSuit()+""_""+targetcard[1].getFace()+"",""+targetcard[2].getSuit()+""_""+targetcard[2].getFace()+"",""+targetcard[3].getSuit()+""_""+targetcard[3].getFace()+"",""+targetcard[4].getSuit()+""_""+targetcard[4].getFace());
                         
        }
    } 
}


@33919d7d031e62d843c82ad0fc44ad4d@"
"r04546032","1","0.39","106096","@b6897edab87baf635b4f6020eff66de8@
/**
 *
 * @author CHIN LUNG
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;


public class HandPQ {
    
    private static MinPQ PQ ;
    private static Hand HPQ;
    
    
    public static void main(String[] args) throws Exception {
        Hand outcome ; Card []targetcard  = new Card [5];
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            PQ = new MinPQ(target);
             for(int a = 0; a < count ;a++) {
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                 HPQ = new Hand(cardsArray); 
                 PQ.insert(HPQ);
            }

            outcome = (Hand)PQ.delMin();
            targetcard = outcome.getCards();
            Arrays.sort(targetcard);
                       
            System.out.println(targetcard[0].getSuit()+""_""+targetcard[0].getFace()+"",""+targetcard[1].getSuit()+""_""+targetcard[1].getFace()+"",""+targetcard[2].getSuit()+""_""+targetcard[2].getFace()+"",""+targetcard[3].getSuit()+""_""+targetcard[3].getFace()+"",""+targetcard[4].getSuit()+""_""+targetcard[4].getFace());
                         
        }
    } 
}


@b6897edab87baf635b4f6020eff66de8@"
"r04546032","1","0.39","106192","@56436ab7321aff05619b6b9607461f07@
/**
 *
 * @author CHIN LUNG
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;


public class HandPQ {
    
    private static MinPQ PQ ;
    private static Hand HPQ;
    
    
    public static void main(String[] args) throws Exception {
        Hand outcome ; Card []targetcard  = new Card [5];
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            PQ = new MinPQ(target);
             for(int a = 0; a < count ;a++) {
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                 HPQ = new Hand(cardsArray); 
                 PQ.insert(HPQ);
            }

            outcome = (Hand)PQ.delMin();
            targetcard = outcome.getCards();
            Arrays.sort(targetcard);
                       
            System.out.println(targetcard[0].getSuit()+""_""+targetcard[0].getFace()+"",""+targetcard[1].getSuit()+""_""+targetcard[1].getFace()+"",""+targetcard[2].getSuit()+""_""+targetcard[2].getFace()+"",""+targetcard[3].getSuit()+""_""+targetcard[3].getFace()+"",""+targetcard[4].getSuit()+""_""+targetcard[4].getFace());
                         
        }
    } 
}

@56436ab7321aff05619b6b9607461f07@"
"r04546032","0","0","0","@61a80565e589d013ec4be0651fbe12e2@
/**
 *
 * @author CHIN LUNG
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;


public class HandPQ {
    
    private static MinPQ PQ ;
    private static Hand HPQ;
    
    
    public static void main(String[] args) throws Exception {
        Hand outcome ; Card []targetcard  = new Card [5];
        try(BufferedReader br = new BufferedReader(new FileReader(""in.txt""))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            PQ = new MinPQ(target);
             for(int a = 0; a < count ;a++) {
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                 HPQ = new Hand(cardsArray); 
                 PQ.insert(HPQ);
            }
            for(int i = 0; i < count - target;i++)
            {
               PQ.delMin();
            }
            outcome = (Hand)PQ.delMin();
            targetcard = outcome.getCards();
            Arrays.sort(targetcard);
                       
            System.out.println(targetcard[0].getSuit()+""_""+targetcard[0].getFace()+"",""+targetcard[1].getSuit()+""_""+targetcard[1].getFace()+"",""+targetcard[2].getSuit()+""_""+targetcard[2].getFace()+"",""+targetcard[3].getSuit()+""_""+targetcard[3].getFace()+"",""+targetcard[4].getSuit()+""_""+targetcard[4].getFace());
                         
        }
    } 
}

@61a80565e589d013ec4be0651fbe12e2@"
"r04546032","4","0.37","104960","@81323169c211a78a0597556449e95522@
/**
 *
 * @author CHIN LUNG
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;


public class HandPQ {
    
    private static MinPQ PQ ;
    private static Hand HPQ;
    
    
    public static void main(String[] args) throws Exception {
        Hand outcome ; Card []targetcard  = new Card [5];
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            PQ = new MinPQ(target);
             for(int a = 0; a < count ;a++) {
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                 HPQ = new Hand(cardsArray); 
                 PQ.insert(HPQ);
            }
            for(int i = 0; i < count - target;i++)
            {
               PQ.delMin();
            }
            outcome = (Hand)PQ.delMin();
            targetcard = outcome.getCards();
            Arrays.sort(targetcard);
                       
            System.out.println(targetcard[0].getSuit()+""_""+targetcard[0].getFace()+"",""+targetcard[1].getSuit()+""_""+targetcard[1].getFace()+"",""+targetcard[2].getSuit()+""_""+targetcard[2].getFace()+"",""+targetcard[3].getSuit()+""_""+targetcard[3].getFace()+"",""+targetcard[4].getSuit()+""_""+targetcard[4].getFace());
                         
        }
    } 
}

@81323169c211a78a0597556449e95522@"
"r04546032","4","0.4","105360","@f38b97022b80b071d1c2b4d3348a3868@
/**
 *
 * @author CHIN LUNG
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;


public class HandPQ {
    
    
    
    public static void main(String[] args) throws Exception {
        Hand outcome ; Card []targetcard  = new Card [5];
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ PQ = new MinPQ(target);
             for(int a = 0; a < count ;a++) {
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                 Hand HPQ = new Hand(cardsArray); 
                 PQ.insert(HPQ);
            }
            for(int i = 0; i < count - target;i++)
            {
               PQ.delMin();
            }
            outcome = (Hand)PQ.delMin();
            targetcard = outcome.getCards();
            Arrays.sort(targetcard);
                       
            System.out.println(targetcard[0].getSuit()+""_""+targetcard[0].getFace()+"",""+targetcard[1].getSuit()+""_""+targetcard[1].getFace()+"",""+targetcard[2].getSuit()+""_""+targetcard[2].getFace()+"",""+targetcard[3].getSuit()+""_""+targetcard[3].getFace()+"",""+targetcard[4].getSuit()+""_""+targetcard[4].getFace());
                         
        }
    } 
}

@f38b97022b80b071d1c2b4d3348a3868@"
"b02611019","1","0.38","105968","@d6ee9a73cbde0404961563124fed4e0f@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MaxPQ<Hand> pq = new MaxPQ<Hand>();
            int low =count-target+1;
            
            for(int i=0;i<count;i++){
                String[] cardline = br.readLine().split("","");
                Card[] cards =new Card[5];
                for(int k=0;k<5;k++){
                    String[] suitface =new String[2];
                    suitface = cardline[k].split(""_"");
                    cards[k]= new Card(suitface[1],suitface[0]);
                }
                pq.insert(new Hand(cards));
            }
            
            for(int i=0;i<target-2;i++){
                pq.delMax();
            }
            
            
            Card[] maxcards = pq.delMax().getCards();
            Arrays.sort(maxcards);
            for(int i=0;i<5;i++){
                StdOut.print(maxcards[i].getSuit()+""_""+maxcards[i].getFace());
                if(i!=4){
                    StdOut.print("","");
                }
            }
                    
            
        }
    }
}

@d6ee9a73cbde0404961563124fed4e0f@"
"b02611019","4","0.39","102832","@86fb614153492dfab001ff93b17aabc6@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MaxPQ<Hand> pq = new MaxPQ<Hand>();
            int low =count-target+1;
            
            for(int i=0;i<count;i++){
                String[] cardline = br.readLine().split("","");
                Card[] cards =new Card[5];
                for(int k=0;k<5;k++){
                    String[] suitface =new String[2];
                    suitface = cardline[k].split(""_"");
                    cards[k]= new Card(suitface[1],suitface[0]);
                }
                pq.insert(new Hand(cards));
            }
            
            for(int i=0;i<target-1;i++){
                pq.delMax();
            }
            
            
            Card[] maxcards = pq.delMax().getCards();
            Arrays.sort(maxcards);
            for(int i=0;i<5;i++){
                StdOut.print(maxcards[i].getSuit()+""_""+maxcards[i].getFace());
                if(i!=4){
                    StdOut.print("","");
                }
            }
                    
            
        }
    }
}

@86fb614153492dfab001ff93b17aabc6@"
"r04546032","0","0","0","@27b098e10168473b0ba85b41a8ce13c3@/**
 * @author CHIN LUNG
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;


public class HandPQ {
    
    
    
    public static void main(String[] args) throws Exception {
        Hand outcome ; Card []targetcard  = new Card [5];int c = 0;int k = 0;
        try(BufferedReader br = new BufferedReader(new FileReader(""in.txt""))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ PQ = new MinPQ(target-1);
             for(int a = 0; a < count ;a++) {
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                 Hand HPQ = new Hand(cardsArray);
                 
                 if(a <= target-1)
                 {PQ.insert(HPQ);}
                 if(HPQ.compareTo((Hand)PQ.min()) == 1 && a > target)
                 {
                     PQ.delMin();
                     PQ.insert(HPQ);
                 }
                 
            }
           
            outcome = (Hand)PQ.delMin();
            targetcard = outcome.getCards();
            Arrays.sort(targetcard);
                       
            System.out.println(targetcard[0].getSuit()+""_""+targetcard[0].getFace()+"",""+targetcard[1].getSuit()+""_""+targetcard[1].getFace()+"",""+targetcard[2].getSuit()+""_""+targetcard[2].getFace()+"",""+targetcard[3].getSuit()+""_""+targetcard[3].getFace()+"",""+targetcard[4].getSuit()+""_""+targetcard[4].getFace());
                         
        }
    } 
}

@27b098e10168473b0ba85b41a8ce13c3@"
"r04546032","7","0.144285714285714","120528","@546dadb0a51cf21a34c33d7bb21638fe@/**
 * @author CHIN LUNG
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;


public class HandPQ {
    
    
    
    public static void main(String[] args) throws Exception {
        Hand outcome ; Card []targetcard  = new Card [5];int c = 0;int k = 0;
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ PQ = new MinPQ(target-1);
             for(int a = 0; a < count ;a++) {
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                 Hand HPQ = new Hand(cardsArray);
                 
                 if(a <= target-1)
                 {PQ.insert(HPQ);}
                 if(HPQ.compareTo((Hand)PQ.min()) == 1 && a > target)
                 {
                     PQ.delMin();
                     PQ.insert(HPQ);
                 }
                 
            }
           
            outcome = (Hand)PQ.delMin();
            targetcard = outcome.getCards();
            Arrays.sort(targetcard);
                       
            System.out.println(targetcard[0].getSuit()+""_""+targetcard[0].getFace()+"",""+targetcard[1].getSuit()+""_""+targetcard[1].getFace()+"",""+targetcard[2].getSuit()+""_""+targetcard[2].getFace()+"",""+targetcard[3].getSuit()+""_""+targetcard[3].getFace()+"",""+targetcard[4].getSuit()+""_""+targetcard[4].getFace());
                         
        }
    } 
}

@546dadb0a51cf21a34c33d7bb21638fe@"
"b02611019","4","0.39","106160","@1974abf42e56586699330e3c169c7fd3@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MaxPQ<Hand> pq = new MaxPQ<Hand>();
            int low =count-target+1;
            
            for(int i=0;i<count;i++){
                String[] cardline = br.readLine().split("","");
                Card[] cards =new Card[5];
                for(int k=0;k<5;k++){
                    String[] suitface =new String[2];
                    suitface = cardline[k].split(""_"");
                    cards[k]= new Card(suitface[1],suitface[0]);
                }
                pq.insert(new Hand(cards));
                if(pq.size()>low){
                    pq.delMax();
                }
            }
            
//            for(int i=0;i<target-1;i++){
//                pq.delMax();
//            }
            
            
            Card[] maxcards = pq.delMax().getCards();
            Arrays.sort(maxcards);
            for(int i=0;i<5;i++){
                StdOut.print(maxcards[i].getSuit()+""_""+maxcards[i].getFace());
                if(i!=4){
                    StdOut.print("","");
                }
            }
                    
            
        }
    }
}

@1974abf42e56586699330e3c169c7fd3@"
"b02611019","7","0.145714285714286","120400","@fa1d49ff89ad4075bc955323436286b6@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ<Hand> pq = new MinPQ<Hand>();
            int low =count-target+1;
            
            for(int i=0;i<count;i++){
                String[] cardline = br.readLine().split("","");
                Card[] cards =new Card[5];
                for(int k=0;k<5;k++){
                    String[] suitface =new String[2];
                    suitface = cardline[k].split(""_"");
                    cards[k]= new Card(suitface[1],suitface[0]);
                }
                pq.insert(new Hand(cards));
                if(pq.size()>target){
                    pq.delMin();
                }
            }
            
//            for(int i=0;i<target-1;i++){
//                pq.delMax();
//            }
            
            
            Card[] maxcards = pq.delMin().getCards();
            Arrays.sort(maxcards);
            for(int i=0;i<5;i++){
                StdOut.print(maxcards[i].getSuit()+""_""+maxcards[i].getFace());
                if(i!=4){
                    StdOut.print("","");
                }
            }
                    
            
        }
    }
}

@fa1d49ff89ad4075bc955323436286b6@"
"r04921051","1","1.05","117504","@1b963fde15ec5d242096d9019e30e03c@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Iterator;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            Card[] cardsArray = new Card[5];
            MinPQ<Hand> pq = new MinPQ<Hand>();               
          
            for(int j = 0; j < count; j++){           
                String[] in = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = in[i].split(""_"");
                    
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;                           
                }
                Hand item = new Hand(cardsArray);                
                
                pq.insert(item);
  
                if (pq.size() > target)
                    pq.delMin();
            }

            print(pq.delMin());
        }
    }
    
    public  static  void printPQ(MinPQ<Hand> q  ){
            Iterator<Hand> iterator = q.iterator();        
            while(iterator.hasNext())
              print(iterator.next());  
    }    

    public  static  void printQue(MinPQ<Integer> q  ){
            Iterator<Integer> iterator = q.iterator();        
            while(iterator.hasNext())
              System.out.printf(""%d,"",iterator.next()); 
              System.out.printf(""\n"" ); 
    }      
    
    public static void print(Hand p){
            for(int i = 0; i < 4;i++)
            System.out.printf(p.getCards()[i].getSuit() + ""_"" + p.getCards()[i].getFace() + "","");
            System.out.printf(p.getCards()[4].getSuit() + ""_"" + p.getCards()[4].getFace()+""\n"");                              
    }
    
}

@1b963fde15ec5d242096d9019e30e03c@"
"r04921104","2","0.38","106064","@3a2b592113f3450b55827c076385fd3b@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Iterator;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            MinPQ<Hand> handspq = new MinPQ<Hand>();
            int N = 0;
            for (String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cards = new Card[5];
                String[] cardStr = in.split("","");
                for (int i = 0; i < cardStr.length; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    cards[i] = new Card(sep[1], sep[0]);
                }
                handspq.insert(new Hand(cards));
                if (++N == target + 1) {
                    handspq.delMin();
                }
            }

            Hand hand3rd = handspq.delMin();
            Card[] cards3rd = hand3rd.getCards();
            System.out.println(cards3rd[0].getSuit() +""_"" +cards3rd[0].getFace() + "",""
                    + cards3rd[1].getSuit() +""_"" +cards3rd[1].getFace() + "",""
                    + cards3rd[2].getSuit() +""_"" +cards3rd[2].getFace() + "",""
                    + cards3rd[3].getSuit() +""_"" +cards3rd[3].getFace() + "",""
                    + cards3rd[4].getSuit() +""_"" +cards3rd[4].getFace());
//            int k = 0;
//            while (!handspq.isEmpty()) {
//                Card[] c = handspq.delMin().getCards();
//                System.out.println(++k + "": "" + c[0].getFace() + c[0].getSuit() + "" ""
//                        + c[1].getFace() + c[1].getSuit() + "" ""
//                        + c[2].getFace() + c[2].getSuit() + "" ""
//                        + c[3].getFace() + c[3].getSuit() + "" ""
//                        + c[4].getFace() + c[4].getSuit());
//            }

        }
    }
}
@3a2b592113f3450b55827c076385fd3b@"
"r04921104","7","0.141428571428571","118864","@916ca04d9aba617f1c8867db871c9b0f@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Iterator;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            MinPQ<Hand> handspq = new MinPQ<Hand>();
            int N = 0;
            for (String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cards = new Card[5];
                String[] cardStr = in.split("","");
                for (int i = 0; i < cardStr.length; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    cards[i] = new Card(sep[1], sep[0]);
                }
                handspq.insert(new Hand(cards));

                if (++N >= target + 1) {
                    handspq.delMin();
               }
            }

            Hand hand3rd = handspq.delMin();
            Card[] cards3rd = hand3rd.getCards();
            System.out.println(cards3rd[0].getSuit() +""_"" +cards3rd[0].getFace() + "",""
                    + cards3rd[1].getSuit() +""_"" +cards3rd[1].getFace() + "",""
                    + cards3rd[2].getSuit() +""_"" +cards3rd[2].getFace() + "",""
                    + cards3rd[3].getSuit() +""_"" +cards3rd[3].getFace() + "",""
                    + cards3rd[4].getSuit() +""_"" +cards3rd[4].getFace());
//            int k = 0;
//            while (!handspq.isEmpty()) {
//                Card[] c = handspq.delMin().getCards();
//                System.out.println(++k + "": "" + c[0].getFace() + c[0].getSuit() + "" ""
//                        + c[1].getFace() + c[1].getSuit() + "" ""
//                        + c[2].getFace() + c[2].getSuit() + "" ""
//                        + c[3].getFace() + c[3].getSuit() + "" ""
//                        + c[4].getFace() + c[4].getSuit());
//            }

        }
    }
}
@916ca04d9aba617f1c8867db871c9b0f@"
"r04945009","4","0.37","105648","@883727c3b2ad4c9518dd83793ff63689@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            Hand[] handArray = new Hand[count];
            int idx = 0;
            while(br.ready()) {
                String[] cardStr = br.readLine().split("","");
                Card[] cardsArray = new Card[5];
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                handArray[idx++] = new Hand(cardsArray);
            }
            Arrays.sort(handArray);
            
            Card[] printout = new Card[5];
            for (int i=0; i<5; i++){
                printout = handArray[count - target].getCards();
                System.out.print(printout[i].getSuit()+""_""+printout[i].getFace());
                if (!(i == 4))
                    System.out.print("","");
            }

        }
    }
}

@883727c3b2ad4c9518dd83793ff63689@"
"r04945009","4","0.38","105552","@3f9beb02600482456f768b7be68a2b71@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {
    
    
        public static void  sort(Comparable[] a) {
            int N = a.length;
            for (int k=N/2; k>=1; k--)
                sink(a,k,N);
            while (N>1) {
                exch(a, 1, N);
                sink(a, 1, --N);
            }
        }
    
        private static void sink(Comparable[] a, int k, int N) {
            while (2*k <= N) {
                int j = 2*k;
                if (j<N && less(a, j, j+1)) j++;
                if (!less(a, k, j)) break;
                exch(a, k,j);
                k = j;
            }
        }
    
        private static boolean less(Comparable[] a, int i, int j) {
            return a[i-1].compareTo(a[j-1]) < 0;
        }
    
        private static void exch(Comparable[] a, int i, int j) {
            Comparable swap = a[i-1]; a[i-1] = a[j-1]; a[j-1] = swap;
        }
    

    
    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            Hand[] handArray = new Hand[count];
            int idx = 0;
            while(br.ready()) {
                String[] cardStr = br.readLine().split("","");
                Card[] cardsArray = new Card[5];
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                handArray[idx++] = new Hand(cardsArray);
            }
            HandPQ.sort(handArray);
            
            Card[] printout = new Card[5];
            for (int i=0; i<5; i++){
                printout = handArray[count - target].getCards();
                System.out.print(printout[i].getSuit()+""_""+printout[i].getFace());
                if (!(i == 4))
                    System.out.print("","");
            }

        }
    }
}

@3f9beb02600482456f768b7be68a2b71@"
"r04945009","4","0.4","105904","@81071b68fe837b83696f61939fe6eb60@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {
    
    
       
    
    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            Hand[] handArray = new Hand[count];
            int idx = 0;
            while(br.ready()) {
                String[] cardStr = br.readLine().split("","");
                Card[] cardsArray = new Card[5];
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                handArray[idx++] = new Hand(cardsArray);
            }
            Heap.sort(handArray);
            
            Card[] printout = new Card[5];
            for (int i=0; i<5; i++){
                printout = handArray[count - target].getCards();
                System.out.print(printout[i].getSuit()+""_""+printout[i].getFace());
                if (!(i == 4))
                    System.out.print("","");
            }

        }
    }
}

@81071b68fe837b83696f61939fe6eb60@"
"r04945009","4","0.39","106128","@44bd9e53bd9caf15319d3e1ab14cd25d@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {
    
    
       
    
    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            MaxPQ showhand = new MaxPQ(count);
            while(br.ready()) {
                String[] cardStr = br.readLine().split("","");
                Card[] cardsArray = new Card[5];
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                showhand.insert(hand);
            }
            
            Hand out = null;
            for (int i=0; i<target; i++) {
                out = (Hand) showhand.delMax();
            }
            
                
            
            for (int i=0; i<5; i++){
                Card[] printout = out.getCards();
                System.out.print(printout[i].getSuit()+""_""+printout[i].getFace());
                if (!(i == 4))
                    System.out.print("","");
            }
            System.out.println();

        }
    }
}

@44bd9e53bd9caf15319d3e1ab14cd25d@"
"r04945009","4","0.4","106160","@8469fc0de4b19c76d9620c76f3cfbb5b@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {
    
    
       
    
    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            MaxPQ showhand = new MaxPQ(count);
            while(br.ready()) {
                String[] cardStr = br.readLine().split("","");
                Card[] cardsArray = new Card[5];
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                showhand.insert(hand);
            }
            

            for (int i=0; i<target-1; i++) {
                showhand.delMax();
            }
            Hand out = (Hand)showhand.delMax();
                
            
            for (int i=0; i<5; i++){
                Card[] printout = out.getCards();
                System.out.print(printout[i].getSuit()+""_""+printout[i].getFace());
                if (!(i == 4))
                    System.out.print("","");
            }
            System.out.println();

        }
    }
}


@8469fc0de4b19c76d9620c76f3cfbb5b@"
"r04945009","4","0.38","106304","@ea7ccab172781b1bfaa5c992d8e2194c@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {
    
    
       
    
    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] handArray = new Hand[count];
            
            int c = 0;
            while(br.ready()) {
                
                String[] cardStr = br.readLine().split("","");
                Card[] cardsArray = new Card[5];
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                handArray[c++] = new Hand(cardsArray);      
            }
            MaxPQ showhand = new MaxPQ(handArray);

            for (int i=0; i<target-1; i++) {
                showhand.delMax();
            }
            Hand out = (Hand)showhand.delMax();
                
            
            for (int i=0; i<5; i++){
                Card[] printout = out.getCards();
                System.out.print(printout[i].getSuit()+""_""+printout[i].getFace());
                if (!(i == 4))
                    System.out.print("","");
            }
            System.out.println();

        }
    }
}

@ea7ccab172781b1bfaa5c992d8e2194c@"
"r04945009","2","1","120080","@fac6a1a603dcaf17fab838f50f48a4f5@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {
    
    
       
    
    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            MinPQ showhand = new MinPQ(target);
            Hand out= null;
            while(br.ready()) {
                String[] cardStr = br.readLine().split("","");
                Card[] cardsArray = new Card[5];
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                showhand.insert(hand);
                if (showhand.size() == target)
                    out = (Hand)showhand.delMin();
            }
            

                
            
            for (int i=0; i<5; i++){
                Card[] printout = out.getCards();
                System.out.print(printout[i].getSuit()+""_""+printout[i].getFace());
                if (!(i == 4))
                    System.out.print("","");
            }
            System.out.println();

        }
    }
}

@fac6a1a603dcaf17fab838f50f48a4f5@"
"r04945009","7","0.138571428571429","120656","@866d225b7c36a0d4e528c121f6fc9163@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {
    
    
       
    
    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            MinPQ showhand = new MinPQ(target+1);
            while(br.ready()) {
                String[] cardStr = br.readLine().split("","");
                Card[] cardsArray = new Card[5];
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                showhand.insert(hand);
                if (showhand.size() > target)
                    showhand.delMin();
            }
            Hand out = (Hand)showhand.delMin();

                
            
            for (int i=0; i<5; i++){
                Card[] printout = out.getCards();
                System.out.print(printout[i].getSuit()+""_""+printout[i].getFace());
                if (!(i == 4))
                    System.out.print("","");
            }
            System.out.println();

        }
    }
}

@866d225b7c36a0d4e528c121f6fc9163@"
"r04631021","0","0.4","106128","@aaf03598554d31f9831b2b51e7b08085@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int count1 = count ;
            MaxPQ show = new MaxPQ() ;
            Hand[] players = new Hand[count] ;
            int counter = 0 ;
            while(count != 0){
                String[] owncard = br.readLine().split("","") ;
                Card[] cards = new Card[5] ;
                for(int i = 0 ; i < 5 ; i++ ){
                    String[] eachcard = owncard[i].split(""_"");
                    cards[i] = new Card( eachcard[1] , eachcard[0] ) ;                    
//                    System.out.println(cards[i].getFace() + """" +cards[i].getSuit());
                }
                players[counter] = new Hand(cards) ;
                show.insert(players[counter]);
//                owncard[count].split(""_"") ;
//                System.out.println(owncard) ;
                count -- ;
                counter ++ ;
            }
            
            while(target!=1){
                show.delMax();
                target-- ;
            }
         Object answer = show.delMax();
         for(int i= 0 ; i < count1 ; i++){
            if(answer.equals(players[i]))
              for(int j = 0 ; j < 5 ; j++){
                    System.out.print(players[i].getCards()[j].getSuit()+
                            ""_""+
                            players[i].getCards()[j].getFace()
                    +"","") ;
                }
        }
        }
    }
}

@aaf03598554d31f9831b2b51e7b08085@"
"r04631021","4","0.37","102272","@0d32a75293b69ed45861d4fbe8d9dff1@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int count1 = count ;
            MaxPQ show = new MaxPQ() ;
            Hand[] players = new Hand[count] ;
            int counter = 0 ;
            while(count != 0){
                String[] owncard = br.readLine().split("","") ;
                Card[] cards = new Card[5] ;
                for(int i = 0 ; i < 5 ; i++ ){
                    String[] eachcard = owncard[i].split(""_"");
                    cards[i] = new Card( eachcard[1] , eachcard[0] ) ;                    
//                    System.out.println(cards[i].getFace() + """" +cards[i].getSuit());
                }
                players[counter] = new Hand(cards) ;
                show.insert(players[counter]);
//                owncard[count].split(""_"") ;
//                System.out.println(owncard) ;
                count -- ;
                counter ++ ;
            }
            
            while(target!=1){
                show.delMax();
                target-- ;
            }
         Object answer = show.delMax();
         for(int i= 0 ; i < count1 ; i++){
            if(answer.equals(players[i]))
              for(int j = 0 ; j < 5 ; j++){
                    System.out.print(players[i].getCards()[j].getSuit()+
                            ""_""+
                            players[i].getCards()[j].getFace()) ;
                    if(j!=4)
                        System.out.print("","") ;
                }
        }
        }
    }
}

@0d32a75293b69ed45861d4fbe8d9dff1@"
"r04631021","4","0.38","104896","@a7eda565db69594564562376cd12626b@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int count1 = count ;
            MaxPQ show = new MaxPQ() ;
            MinPQ show1 = new MinPQ() ;
            Hand[] players = new Hand[count] ;
            int counter = 0 ;
            while(count != 0){
                String[] owncard = br.readLine().split("","") ;
                Card[] cards = new Card[5] ;
                for(int i = 0 ; i < 5 ; i++ ){
                    String[] eachcard = owncard[i].split(""_"");
                    cards[i] = new Card( eachcard[1] , eachcard[0] ) ;                    
//                    System.out.println(cards[i].getFace() + """" +cards[i].getSuit());
                }
                players[counter] = new Hand(cards) ;
                show1.insert(players[counter]);
                if(show1.size()>target)
                    show1.delMin();
//                owncard[count].split(""_"") ;
//                System.out.println(owncard) ;
                count -- ;
                counter ++ ;
            }
            while(!show1.isEmpty()){
                show.insert(show1.delMin());
            }
            
            while(target!=1){
                show.delMax();
                target-- ;
            }
         Object answer = show.delMax();
         for(int i= 0 ; i < count1 ; i++){
            if(answer.equals(players[i]))
              for(int j = 0 ; j < 5 ; j++){
                    System.out.print(players[i].getCards()[j].getSuit()+
                            ""_""+
                            players[i].getCards()[j].getFace()) ;
                    if(j!=4)
                        System.out.print("","") ;
                }
        }
        }
    }
}

@a7eda565db69594564562376cd12626b@"
"r04631021","4","0.38","105840","@9ffb1d53c4fdd75e0f81c12cce6ad59a@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int count1 = count ;
            MaxPQ show = new MaxPQ() ;
            MinPQ show1 = new MinPQ() ;
            Hand[] players = new Hand[count] ;
            int counter = 0 ;
            while(count != 0){
                String[] owncard = br.readLine().split("","") ;
                Card[] cards = new Card[5] ;
                for(int i = 0 ; i < 5 ; i++ ){
                    String[] eachcard = owncard[i].split(""_"");
                    cards[i] = new Card( eachcard[1] , eachcard[0] ) ;                    
//                    System.out.println(cards[i].getFace() + """" +cards[i].getSuit());
                }
                players[counter] = new Hand(cards) ;
                show1.insert(players[counter]);
                if(show1.size()>target)
                    show1.delMin();
//                owncard[count].split(""_"") ;
//                System.out.println(owncard) ;
                count -- ;
                counter ++ ;
            }
            while(show1.size()-target!= 0){
                show.insert(show1.delMin());
            }
            Object answer1 = show1.delMin();
            for(int i = 0 ; i <count1 ; i++){
                if(answer1.equals(players[i]))
                    for(int j = 0 ; j < 5 ; j++){
                    System.out.print(players[i].getCards()[j].getSuit()+
                            ""_""+
                            players[i].getCards()[j].getFace());
                    if(j!=4)
                        System.out.print("","") ;
                    
                    }
            }
//            
//            while(target!=1){
//                show.delMax();
//                target-- ;
//            }
//         Object answer = show.delMax();
//         for(int i= 0 ; i < count1 ; i++){
//            if(answer.equals(players[i]))
//              for(int j = 0 ; j < 5 ; j++){
//                    System.out.print(players[i].getCards()[j].getSuit()+
//                            ""_""+
//                            players[i].getCards()[j].getFace()) ;
//                    if(j!=4)
//                        System.out.print("","") ;
//                }
//        }
        }
    }
}

@9ffb1d53c4fdd75e0f81c12cce6ad59a@"
"r04921051","1","1","119008","@ecc3bd8be5ab9019819ae27897cc1bb1@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Iterator;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            Card[] cardsArray = new Card[5];
            MinPQ<Hand> pq = new MinPQ<Hand>();               
          
            for(int j = 0; j < count; j++){           
                String[] in = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = in[i].split(""_"");
                    
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;                           
                }
                
                Hand item = new Hand(cardsArray);                
                
                pq.insert(item);
                //print(item);
                //System.out.println(Hand.play2rank(item));
                //System.out.println("""");
                if (pq.size() > target)
                    pq.delMin();
            }
            print(pq.delMin());
        }
    }
    
    public  static  void printPQ(MinPQ<Hand> q  ){
            Iterator<Hand> iterator = q.iterator();        
            while(iterator.hasNext())
              print(iterator.next());  
    }    

   
    
    public static void print(Hand p){
            for(int i = 0; i < 4;i++)
            System.out.printf(p.getCards()[i].getSuit() + ""_"" + p.getCards()[i].getFace() + "","");
            System.out.printf(p.getCards()[4].getSuit() + ""_"" + p.getCards()[4].getFace()+""\n"");                              
    }
    
}

@ecc3bd8be5ab9019819ae27897cc1bb1@"
"r04921051","1","0.42","105888","@47fd8f9c08e921fc9317fb953c13b3a3@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Iterator;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            target = count + 1 -target;

            Card[] cardsArray = new Card[5];
            MaxPQ<Hand> pq = new MaxPQ<Hand>();               
          
            for(int j = 0; j < count; j++){           
                String[] in = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = in[i].split(""_"");
                    
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;                           
                }
                
                Hand item = new Hand(cardsArray);                
                
                pq.insert(item);
                if (pq.size() > target)
                    pq.delMax();
            }
            print(pq.delMax());
        }
    }
    
    public  static  void printPQ(MinPQ<Hand> q  ){
            Iterator<Hand> iterator = q.iterator();        
            while(iterator.hasNext())
              print(iterator.next());  
    }    

   
    
    public static void print(Hand p){
            for(int i = 0; i < 4;i++)
            System.out.printf(p.getCards()[i].getSuit() + ""_"" + p.getCards()[i].getFace() + "","");
            System.out.printf(p.getCards()[4].getSuit() + ""_"" + p.getCards()[4].getFace()+""\n"");                              
    }
    
}

@47fd8f9c08e921fc9317fb953c13b3a3@"
"r03525008","6","0.99","116240","@313e210aeca07ac0522b61a8edf7f17b@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.*;

public class HandPQ {

    int capacity;
    List<Hand> list;

    HandPQ (int capacity){
        this.capacity = capacity;
        list = new LinkedList<>();
    }

    public void add(Hand hand) {
        list.add(hand);
        if (list.size() > capacity){
            this.deleteMin();
        }
    }

    public Hand deleteMin() {
        Hand min = Collections.min(list);
        list.remove(min);
        return min;
    }


    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            HandPQ pq = new HandPQ(target);

            while (br.ready()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                pq.add(hand);
            }

            Card[] cards = pq.deleteMin().getCards();
            Arrays.sort(cards);
            System.out.println(toString(cards));

        }
    }

    public static String toString(Card[] cards){
        String temp = """";
        String sp = """";
        for (Card c:cards){
            temp += sp + c.getSuit() + ""_"" + c.getFace();
            sp = "","";
        }
        return temp;
    }
}

@313e210aeca07ac0522b61a8edf7f17b@"
"r04921051","1","1","120672","@027d4c27b84e615850072468e1b17a59@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Iterator;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            Card[] cardsArray = new Card[5];
            MinPQ<Hand> pq = new MinPQ<Hand>();
            Card card;
          
            for(int j = 0; j < count; j++){           
                String[] in = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = in[i].split(""_"");
                    
                    card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;                           
                }
                
                Hand item = new Hand(cardsArray);                
                
                pq.insert(item);
                if (pq.size() > target)
                    pq.delMin();
            }
            print(pq.delMin());
        }
    }
    
    public  static  void printPQ(MinPQ<Hand> q  ){
            Iterator<Hand> iterator = q.iterator();        
            while(iterator.hasNext())
              print(iterator.next());  
    }    

   
    
    public static void print(Hand p){
            for(int i = 0; i < 4;i++)
            System.out.printf(p.getCards()[i].getSuit() + ""_"" + p.getCards()[i].getFace() + "","");
            System.out.printf(p.getCards()[4].getSuit() + ""_"" + p.getCards()[4].getFace()+""\n"");                              
    }
    
}

@027d4c27b84e615850072468e1b17a59@"
"r04921051","1","1.03","123744","@43f7c295269e06d8102e792396d37c98@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.*;

public class HandPQ {
    
    int capacity;
    List<Hand> list;

    HandPQ (int capacity){
        this.capacity = capacity;
        list = new LinkedList<>();
    }

    public void insert(Hand hand) {
        list.add(hand);
        if (list.size() > capacity){
            this.delMin();
        }
    }

    public Hand delMin() {
        Hand min = Collections.min(list);
        list.remove(min);
        return min;
    }    

    public static void main(String[] args) throws Exception {

        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            Card[] cardsArray = new Card[5];
            HandPQ pq = new HandPQ(target);
          
            for(int j = 0; j < count; j++){           
                String[] in = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = in[i].split(""_"");
                    
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;                           
                }
                
                Hand item = new Hand(cardsArray);                
                
                pq.insert(item);
                if (pq.list.size() > target)
                    pq.delMin();
            }
            print(pq.delMin());
        }
    }
    
    public  static  void printPQ(MinPQ<Hand> q  ){
            Iterator<Hand> iterator = q.iterator();        
            while(iterator.hasNext())
              print(iterator.next());  
    }    

   
    
    public static void print(Hand p){
            for(int i = 0; i < 4;i++)
            System.out.printf(p.getCards()[i].getSuit() + ""_"" + p.getCards()[i].getFace() + "","");
            System.out.printf(p.getCards()[4].getSuit() + ""_"" + p.getCards()[4].getFace()+""\n"");                              
    }
    
}

@43f7c295269e06d8102e792396d37c98@"
"r04921051","6","1.01","119712","@4f0ade1a2c6db82e7f0246bb1c3ea0e4@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.*;

public class HandPQ {
    
    int capacity;
    List<Hand> list;

    HandPQ (int capacity){
        this.capacity = capacity;
        list = new LinkedList<>();
    }

    public void insert(Hand hand) {
        list.add(hand);
        if (list.size() > capacity){
            this.delMin();
        }
    }

    public Hand delMin() {
        Hand min = Collections.min(list);
        list.remove(min);
        return min;
    }    

    public static void main(String[] args) throws Exception {

        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            
            HandPQ pq = new HandPQ(target);
          
            for(int j = 0; j < count; j++){
                Card[] cardsArray = new Card[5];
                String[] in = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = in[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;                           
                }                
                Hand item = new Hand(cardsArray);                                
                pq.insert(item);
            }
            print(pq.delMin());
        }
    }
    
    public  static  void printPQ(MinPQ<Hand> q  ){
            Iterator<Hand> iterator = q.iterator();        
            while(iterator.hasNext())
              print(iterator.next());  
    }    

   
    
    public static void print(Hand p){
            Card[] cards = p.getCards();
            Arrays.sort(cards);
            for(int i = 0; i < 4;i++)
            System.out.printf(p.getCards()[i].getSuit() + ""_"" + p.getCards()[i].getFace() + "","");
            System.out.printf(p.getCards()[4].getSuit() + ""_"" + p.getCards()[4].getFace()+""\n"");                              
    }
    
}
/*

public class HandPQ {

    int capacity;
    List<Hand> list;

    HandPQ (int capacity){
        this.capacity = capacity;
        list = new LinkedList<>();
    }

    public void add(Hand hand) {
        list.add(hand);
        if (list.size() > capacity){
            this.deleteMin();
        }
    }

    public Hand deleteMin() {
        Hand min = Collections.min(list);
        list.remove(min);
        return min;
    }


    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            HandPQ pq = new HandPQ(target);

            for (int line = 0 ; line < count ; line++ ){
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                pq.add(hand);
            }
            br.close();

            Card[] cards = pq.deleteMin().getCards();
            Arrays.sort(cards);
            System.out.println(toString(cards));

        }
    }

    public static String toString(Card[] cards){
        String temp = """";
        String sp = """";
        for (Card c:cards){
            temp += sp + c.getSuit() + ""_"" + c.getFace();
            sp = "","";
        }
        return temp;
    }
}
*/
@4f0ade1a2c6db82e7f0246bb1c3ea0e4@"
"r04921051","7","0.15","120256","@b0225f3a040d1904e86350a0c591d669@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.*;

public class HandPQ {
/*    
    int capacity;
    List<Hand> list;

    HandPQ (int capacity){
        this.capacity = capacity;
        list = new LinkedList<>();
    }

    public void insert(Hand hand) {
        list.add(hand);
        if (list.size() > capacity){
            this.delMin();
        }
    }

    public Hand delMin() {
        Hand min = Collections.min(list);
        list.remove(min);
        return min;
    }    
*/
    public static void main(String[] args) throws Exception {

        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            
            MinPQ<Hand> pq = new MinPQ<Hand>();
          
            for(int j = 0; j < count; j++){
                Card[] cardsArray = new Card[5];
                String[] in = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = in[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;                           
                }                
                Hand item = new Hand(cardsArray); 
                pq.insert(item);
                if(pq.size() > target)
                    pq.delMin();
                
            }
            print(pq.delMin());
        }
    }
    
    public  static  void printPQ(MinPQ<Hand> q  ){
            Iterator<Hand> iterator = q.iterator();        
            while(iterator.hasNext())
              print(iterator.next());  
    }    

   
    
    public static void print(Hand p){
            Card[] cards = p.getCards();
            Arrays.sort(cards);
            for(int i = 0; i < 4;i++)
            System.out.printf(p.getCards()[i].getSuit() + ""_"" + p.getCards()[i].getFace() + "","");
            System.out.printf(p.getCards()[4].getSuit() + ""_"" + p.getCards()[4].getFace()+""\n"");                              
    }
    
}
/*

public class HandPQ {

    int capacity;
    List<Hand> list;

    HandPQ (int capacity){
        this.capacity = capacity;
        list = new LinkedList<>();
    }

    public void add(Hand hand) {
        list.add(hand);
        if (list.size() > capacity){
            this.deleteMin();
        }
    }

    public Hand deleteMin() {
        Hand min = Collections.min(list);
        list.remove(min);
        return min;
    }


    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            HandPQ pq = new HandPQ(target);

            for (int line = 0 ; line < count ; line++ ){
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                pq.add(hand);
            }
            br.close();

            Card[] cards = pq.deleteMin().getCards();
            Arrays.sort(cards);
            System.out.println(toString(cards));

        }
    }

    public static String toString(Card[] cards){
        String temp = """";
        String sp = """";
        for (Card c:cards){
            temp += sp + c.getSuit() + ""_"" + c.getFace();
            sp = "","";
        }
        return temp;
    }
}
*/
@b0225f3a040d1904e86350a0c591d669@"
"r04921051","7","0.144285714285714","124304","@3d8d0213def9bfbce137d5b58befee10@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.*;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            
            MinPQ<Hand> pq = new MinPQ<Hand>();
          
            for(int j = 0; j < count; j++){
                Card[] cardsArray = new Card[5];
                String[] in = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = in[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;                           
                }                
                Hand item = new Hand(cardsArray); 
                pq.insert(item);
                if(pq.size() > target)
                    pq.delMin();
                
            }
            print(pq.delMin());
        }
    }
    
    public  static  void printPQ(MinPQ<Hand> q  ){
            Iterator<Hand> iterator = q.iterator();        
            while(iterator.hasNext())
              print(iterator.next());  
    }    

   
    
    public static void print(Hand p){
            Card[] cards = p.getCards();
            Arrays.sort(cards);
            for(int i = 0; i < 4;i++)
            System.out.printf(p.getCards()[i].getSuit() + ""_"" + p.getCards()[i].getFace() + "","");
            System.out.printf(p.getCards()[4].getSuit() + ""_"" + p.getCards()[4].getFace()+""\n"");                              
    }
    
}

@3d8d0213def9bfbce137d5b58befee10@"
"r03525008","6","1","122048","@47179e2aa1f358af431ba7255d7ee460@import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

public class HandPQ {

    int capacity;
    List<Hand> list;

    HandPQ (int capacity){
        this.capacity = capacity;
        list = new LinkedList<Hand>();
    }

    public void add(Hand hand) {
        list.add(hand);
        if (list.size() > capacity){
            this.deleteMin();
        }
    }

    public Hand deleteMin() {
        Hand min = Collections.min(list);
        list.remove(min);
        return min;
    }


    public static void main(String[] args) {

        try {

            BufferedReader br = new BufferedReader(new FileReader(args[0]));
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            HandPQ pq = new HandPQ(target);

            for (int line = 0 ; line < count ; line++ ){
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                pq.add(hand);
            }
            br.close();

            Card[] cards = pq.deleteMin().getCards();
            Arrays.sort(cards);
            System.out.println(toString(cards));

        } catch (IOException e){
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }

    public static String toString(Card[] cards){
        String temp = """";
        String sp = """";
        for (Card c:cards){
            temp += sp + c.getSuit() + ""_"" + c.getFace();
            sp = "","";
        }
        return temp;
    }
}

@47179e2aa1f358af431ba7255d7ee460@"
"r03525008","6","0.94","115936","@c43fa5efd9328a5f682391185ad62753@import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

public class HandPQ {

    int N;
    Hand[] pq;

    HandPQ (){
        N = 0;
        pq = new Hand[10];
    }

    public boolean isEmpty(){
        return N == 0;
    }

    public int size(){
        return N;
    }

    public void insert(Hand hand) {
        checkAndResize();
        pq[N++] = hand;
    }

    private Hand deleteMin() {
        int min = 0;
        for (int i = 0 ; i < N ; i++){
            if (pq[min].compareTo(pq[i]) == 1){
                min = i;
            }
        }
        Hand temp = pq[min];
        pq[min] = pq[N-1];
        pq[N-1] = temp;
        return pq[--N];
    }

    private void checkAndResize() {
        if (pq.length-N <= 1) {
            Hand[] copy = new Hand[2*pq.length];
            for (int i = 0 ; i < N ; i++){
                copy[i] = pq[i];
            }
            pq = copy;
        }
    }


    public static void main(String[] args) {

        try {
            BufferedReader br = new BufferedReader(new FileReader(args[0]));
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            HandPQ pq = new HandPQ();
            for (int line = 0 ; line < count ; line++ ){
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                pq.insert(hand);
                if (pq.size() > target){
                    pq.deleteMin();
                }
//                System.out.println(hand.getCardType() + "":"" + pq.size());
            }
            br.close();

            Card[] cards = pq.deleteMin().getCards();
            Arrays.sort(cards);
            System.out.println(toString(cards));

        } catch (IOException e){
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }

    public static String toString(Card[] cards){
        String temp = """";
        String sp = """";
        for (Card c:cards){
            temp += sp + c.getSuit() + ""_"" + c.getFace();
            sp = "","";
        }
        return temp;
    }

}

@c43fa5efd9328a5f682391185ad62753@"
"r04631021","7","0.142857142857143","115360","@3f7ef4c38ae895eb39306d08bcbebb11@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int count1 = count ;
            MaxPQ show = new MaxPQ() ;
            MinPQ show1 = new MinPQ() ;
            Hand[] players = new Hand[1] ;
            int counter = 0 ;
            while(count != 0){
                String[] owncard = br.readLine().split("","") ;
                Card[] cards = new Card[5] ;
                for(int i = 0 ; i < 5 ; i++ ){
                    String[] eachcard = owncard[i].split(""_"");
                    cards[i] = new Card( eachcard[1] , eachcard[0] ) ;                    
//                    System.out.println(cards[i].getFace() + """" +cards[i].getSuit());
                }
                players[0] = new Hand(cards) ;
                show1.insert(players[0]);
                if(show1.size()>target)
                    show1.delMin();
//                owncard[count].split(""_"") ;
//                System.out.println(owncard) ;
                count -- ;
                counter ++ ;
            }
            while(show1.size()-target!= 0){
                show.insert(show1.delMin());
            }
            Hand finalans = Hand.class.cast(show1.delMin()) ;
            Card[] fina = finalans.getCards() ;
//            Class clax = show1.delMin().getClass().asSubclass(null);
////            Hand[] finalshow = clax.cast(show1.delMin()) ;
//            Hand ff = clax.cast(show1.delMin()) ;
//            System.out.println( finalans) ;
            
//            for(int i = 0 ; i <count1 ; i++){
//                if(answer1.equals(players[i]))
                    for(int j = 0 ; j < 5 ; j++){
                    System.out.print(fina[j].getSuit()+
                            ""_""+
                            fina[j].getFace());
                    if(j!=4)
                        System.out.print("","") ;
                    
                    }
//            }
//            
//            while(target!=1){
//                show.delMax();
//                target-- ;
//            }
//         Object answer = show.delMax();
//         for(int i= 0 ; i < count1 ; i++){
//            if(answer.equals(players[i]))
//              for(int j = 0 ; j < 5 ; j++){
//                    System.out.print(players[i].getCards()[j].getSuit()+
//                            ""_""+
//                            players[i].getCards()[j].getFace()) ;
//                    if(j!=4)
//                        System.out.print("","") ;
//                }
//        }
        }
    }
}

@3f7ef4c38ae895eb39306d08bcbebb11@"
"r03945012","0","0","0","@d7c41b17e63c577bd1486c2615f92ab0@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            
            // Find the Largest M items (target)
            MinPQ<Hand> pq = new MinPQ<Hand>();
            
            for(int k = 0; k < count; k++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand player1 = new Hand(cardsArray);
                pq.insert(player1);
                if (pq.size() > target){
                    pq.delMin();
                }
            }
            Card[] cardsWinner = new Card[5];
            Hand winner = new Hand(cardsWinner);
            winner = pq.delMin();
            StdOut.println(winner.getCards());

//            Card[] cardsArray2 = new Card[5];
//            String[] cardStr2 = br.readLine().split("","");
//            for(int i = 0; i < 5; i++){
//                String[] sep2 = cardStr2[i].split(""_"");
//                Card card2 = new Card(sep2[1], sep2[0]);
//                cardsArray2[i] = card2;
//            }
//            Hand player2 = new Hand(cardsArray2);
//            player1.compareTo(player2);
            
        
        }
    }
}

@d7c41b17e63c577bd1486c2615f92ab0@"
"r03945012","7","0.144285714285714","116640","@f2628cca787c3fc4f152a6f39878d747@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            
            // Find the Largest M items (target)
            MinPQ<Hand> pq = new MinPQ<Hand>();
            
            for(int k = 0; k < count; k++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand player1 = new Hand(cardsArray);
                pq.insert(player1);
                if (pq.size() > target){
                    pq.delMin();
                }
            }
            Card[] cardsWinner = new Card[5];
            Hand winner = pq.delMin();
            cardsWinner = winner.getCards();
            String answer = """";
            for (int i = 0; i < 4; i++){
                answer += cardsWinner[i].getSuit();
                answer += ""_"";
                answer += cardsWinner[i].getFace();
                answer += "","";
            }
            answer += cardsWinner[4].getSuit();
            answer += ""_"";
            answer += cardsWinner[4].getFace();
            StdOut.println(answer);
//            Card[] cardsArray2 = new Card[5];
//            String[] cardStr2 = br.readLine().split("","");
//            for(int i = 0; i < 5; i++){
//                String[] sep2 = cardStr2[i].split(""_"");
//                Card card2 = new Card(sep2[1], sep2[0]);
//                cardsArray2[i] = card2;
//            }
//            Hand player2 = new Hand(cardsArray2);
//            player1.compareTo(player2);
            
        
        }
    }
}

@f2628cca787c3fc4f152a6f39878d747@"
"r04921094","4","0.37","99568","@5aa1e20be7540db1311800ce33a592ad@//import edu.princeton.cs.algs4.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
    	Hand[] hands;
    	MaxPQ<Hand> maxPQ;

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            hands = new Hand[count];
            maxPQ = new MaxPQ<Hand> (count);
            int target = Integer.parseInt(header[1]);

            for (int i = 0; i<count; i++){
            	Card[] cards = new Card[5]; 
        		String[] handReg = br.readLine().split("","");

        		for (int j = 0; j<5; j++){
        			String[] cardReg = handReg[j].split(""_"");
        			cards[j] = new Card(cardReg[1], cardReg[0]);
        		}
        		hands[i] = new Hand(cards);
        		maxPQ.insert(hands[i]);
        		// maxPQ.insert(new Hand(cards));
        	}

        	for (int i = 0; i < target - 1; i++){
        		maxPQ.delMax();
        	}

        	Card[] card = maxPQ.delMax().getCards();
        	Arrays.sort(card);
        	for(int i = 0; i < 5; i++){
        		if (i != 4){
        			System.out.print(card[i].getSuit() + ""_"" + card[i].getFace() + "","");
        		}
        		else{
        			System.out.print(card[i].getSuit() + ""_"" + card[i].getFace());
        		}
        	}
        }


    }

}

@5aa1e20be7540db1311800ce33a592ad@"
"r04921094","4","0.39","105840","@5aa1e20be7540db1311800ce33a592ad@//import edu.princeton.cs.algs4.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
    	Hand[] hands;
    	MaxPQ<Hand> maxPQ;

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            hands = new Hand[count];
            maxPQ = new MaxPQ<Hand> (count);
            int target = Integer.parseInt(header[1]);

            for (int i = 0; i<count; i++){
            	Card[] cards = new Card[5]; 
        		String[] handReg = br.readLine().split("","");

        		for (int j = 0; j<5; j++){
        			String[] cardReg = handReg[j].split(""_"");
        			cards[j] = new Card(cardReg[1], cardReg[0]);
        		}
        		hands[i] = new Hand(cards);
        		maxPQ.insert(hands[i]);
        		// maxPQ.insert(new Hand(cards));
        	}

        	for (int i = 0; i < target - 1; i++){
        		maxPQ.delMax();
        	}

        	Card[] card = maxPQ.delMax().getCards();
        	Arrays.sort(card);
        	for(int i = 0; i < 5; i++){
        		if (i != 4){
        			System.out.print(card[i].getSuit() + ""_"" + card[i].getFace() + "","");
        		}
        		else{
        			System.out.print(card[i].getSuit() + ""_"" + card[i].getFace());
        		}
        	}
        }


    }

}

@5aa1e20be7540db1311800ce33a592ad@"
"r04921094","6","1","120608","@b97c50314dc00d3595c1f6ff827bb766@//import edu.princeton.cs.algs4.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
    	Hand hand;
    	MinPQ<Hand> minPQ;

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            minPQ = new MinPQ<Hand> (target + 1);

            for (int i = 0; i<count; i++){
            	Card[] cards = new Card[5]; 
        		String[] handReg = br.readLine().split("","");

        		for (int j = 0; j<5; j++){
        			String[] cardReg = handReg[j].split(""_"");
        			cards[j] = new Card(cardReg[1], cardReg[0]);
        		}
        		hand = new Hand(cards);
        		if(i < target){
        			minPQ.insert(hand);
        		}
        		else{
        			Hand minHand = minPQ.delMin();
        			if (minHand.compareTo(hand) == 1){
        				minPQ.insert(minHand);
        			}
        			else{
        				minPQ.insert(hand);
        			}
        		}
        		// maxPQ.insert(new Hand(cards));
        	}


        	Card[] card = minPQ.delMin().getCards();
        	Arrays.sort(card);
        	for(int i = 0; i < 5; i++){
        		if (i != 4){
        			System.out.print(card[i].getSuit() + ""_"" + card[i].getFace() + "","");
        		}
        		else{
        			System.out.print(card[i].getSuit() + ""_"" + card[i].getFace());
        		}
        	}
        }


    }

}

@b97c50314dc00d3595c1f6ff827bb766@"
"r04921094","6","0.99","118464","@0ebb9605382a76faaba6c2dc5a8f9bf8@//import edu.princeton.cs.algs4.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
    	Hand hand;
    	MinPQ<Hand> minPQ;

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            minPQ = new MinPQ<Hand> (target);

            for (int i = 0; i<count; i++){
            	Card[] cards = new Card[5]; 
        		String[] handReg = br.readLine().split("","");

        		for (int j = 0; j<5; j++){
        			String[] cardReg = handReg[j].split(""_"");
        			cards[j] = new Card(cardReg[1], cardReg[0]);
        		}
        		hand = new Hand(cards);
        		if(i < target){
        			minPQ.insert(hand);
        		}
        		else{
        			Hand minHand = minPQ.delMin();
        			if (minHand.compareTo(hand) == 1){
        				minPQ.insert(minHand);
        			}
        			else{
        				minPQ.insert(hand);
        			}
        		}
        		// maxPQ.insert(new Hand(cards));
        	}


        	Card[] card = minPQ.delMin().getCards();
        	Arrays.sort(card);
        	for(int i = 0; i < 5; i++){
        		if (i != 4){
        			System.out.print(card[i].getSuit() + ""_"" + card[i].getFace() + "","");
        		}
        		else{
        			System.out.print(card[i].getSuit() + ""_"" + card[i].getFace());
        		}
        	}
        }


    }

}

@0ebb9605382a76faaba6c2dc5a8f9bf8@"
"r04921094","7","0.142857142857143","117680","@5f62f9892169165fc63275d31ddeb762@//import edu.princeton.cs.algs4.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
    	Hand hand;
    	MinPQ<Hand> minPQ;

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            minPQ = new MinPQ<Hand> (target + 1);

            for (int i = 0; i<count; i++){
            	Card[] cards = new Card[5]; 
        		String[] handReg = br.readLine().split("","");

        		for (int j = 0; j<5; j++){
        			String[] cardReg = handReg[j].split(""_"");
        			cards[j] = new Card(cardReg[1], cardReg[0]);
        		}
        		hand = new Hand(cards);

        		if(i < target){
        			minPQ.insert(hand);
        		}
        		else{
        			// Hand minHand = minPQ.delMin();
        			// if (minHand.compareTo(hand) == 1){
        			// 	minPQ.insert(minHand);
        			// }
        			// else{
        			// 	minPQ.insert(hand);
        			// }
        			minPQ.insert(hand);
        			minPQ.delMin();
        		}
        		// maxPQ.insert(new Hand(cards));
        	}


        	Card[] card = minPQ.delMin().getCards();
        	Arrays.sort(card);
        	for(int i = 0; i < 5; i++){
        		if (i != 4){
        			System.out.print(card[i].getSuit() + ""_"" + card[i].getFace() + "","");
        		}
        		else{
        			System.out.print(card[i].getSuit() + ""_"" + card[i].getFace());
        		}
        	}
        }


    }

}

@5f62f9892169165fc63275d31ddeb762@"
"r04921094","7","0.142857142857143","121264","@d8f27f697515deff5b039eb2c252de7d@//import edu.princeton.cs.algs4.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
    	Hand hand;
    	MinPQ<Hand> minPQ;

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            minPQ = new MinPQ<Hand> (target + 1);

            for (int i = 0; i<count; i++){
            	Card[] cards = new Card[5]; 
        		String[] handReg = br.readLine().split("","");

        		for (int j = 0; j<5; j++){
        			String[] cardReg = handReg[j].split(""_"");
        			cards[j] = new Card(cardReg[1], cardReg[0]);
        		}
        		hand = new Hand(cards);
        		minPQ.insert(hand);
        		if(i >= target){
        			minPQ.delMin();
        		}
        		// maxPQ.insert(new Hand(cards));
        	}


        	Card[] card = minPQ.delMin().getCards();
        	Arrays.sort(card);
        	for(int i = 0; i < 5; i++){
        		if (i != 4){
        			System.out.print(card[i].getSuit() + ""_"" + card[i].getFace() + "","");
        		}
        		else{
        			System.out.print(card[i].getSuit() + ""_"" + card[i].getFace());
        		}
        	}
        }


    }

}

@d8f27f697515deff5b039eb2c252de7d@"
"r04945021","0","1.07","127712","@6d973cd79a6f5f1ea5fae8059402415b@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);//幾組hand
            int target = Integer.parseInt(header[1]);//第幾大
            MinPQ<Hand> pq = new MinPQ<Hand>();
            for(String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;    
                }
                Hand hand = new Hand(cardsArray);                
               pq.insert(hand);
               
                if (pq.size()>target){
                    pq.delMin();                    
                }
            }
                       
            for(int i=0;i<5;i++){
                System.out.printf(""%s_%s,"",pq.min().getCards()[i].getSuit(),pq.min().getCards()[i].getFace());
            }

        }
    }
}

@6d973cd79a6f5f1ea5fae8059402415b@"
"r04945021","7","0.15","123760","@19d31efce1ab99a20f33336f26538056@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);//幾組hand
            int target = Integer.parseInt(header[1]);//第幾大
            MinPQ<Hand> pq = new MinPQ<Hand>();
            for(String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;    
                }
                Hand hand = new Hand(cardsArray);                
               pq.insert(hand);
               
                if (pq.size()>target){
                    pq.delMin();                    
                }
            }
                       
            for(int i=0;i<5;i++){
                if(i<4)
                System.out.printf(""%s_%s,"",pq.min().getCards()[i].getSuit(),pq.min().getCards()[i].getFace());
                else
                    System.out.printf(""%s_%s"",pq.min().getCards()[i].getSuit(),pq.min().getCards()[i].getFace());
            }

        }
    }
}

@19d31efce1ab99a20f33336f26538056@"
"r03525008","0","0.38","105744","@39325062db40c87521923c13990417ce@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        //try(BufferedReader br = new BufferedReader(new FileReader(""in.txt""))){
          try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MaxPQ<Hand> maxPQ = new MaxPQ(count);

            for(int i =0;i<count;i++) {
                String[] cards_name = br.readLine().split("","");
                Card[] cards = new Card[5];
                for (int j = 0; j < cards_name.length; j++) {
                    String temp[] = cards_name[j].split(""_"");
                    cards[j] = new Card(temp[1], temp[0]);
                }
                Hand hand=new Hand(cards);
                maxPQ.insert(hand);
            }
            for(int i=0;i<target-1;i++){
                maxPQ.delMax();
            }
            Arrays.sort(maxPQ.max().getCards());
            System.out.println(maxPQ.max().toString());
        }

/*        Card[] a=new Card[5];
        a[0] = new Card(""A"",""Spades"");
        a[1] = new Card(""K"",""Spades"");
        a[2] = new Card(""10"",""Spades"");
        a[3] = new Card(""5"",""Spades"");
        a[4] = new Card(""J"",""Hearts"");

        Card[] b=new Card[5];
        b[0] = new Card(""A"",""Hearts"");
        b[1] = new Card(""A"",""Clubs"");
        b[2] = new Card(""8"",""Spades"");
        b[3] = new Card(""2"",""Spades"");
        b[4] = new Card(""K"",""Hearts"");

        Hand A=new Hand(a);
        Hand B=new Hand(b);
        System.out.println(A.compareTo(B));*/
    }
}

@39325062db40c87521923c13990417ce@"
"r03525008","0","0","0","@4b99559fe989d56968cf4c8c0d3591f3@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(""in.txt""))){
        //  try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MaxPQ<Hand> maxPQ = new MaxPQ(count);

            for(int i =0;i<count;i++) {
                String[] cards_name = br.readLine().split("","");
                Card[] cards = new Card[5];
                for (int j = 0; j < cards_name.length; j++) {
                    String temp[] = cards_name[j].split(""_"");
                    cards[j] = new Card(temp[1], temp[0]);
                }
                Hand hand=new Hand(cards);
                maxPQ.insert(hand);
            }
            for(int i=0;i<target-1;i++){
                maxPQ.delMax();
            }
            Arrays.sort(maxPQ.max().getCards());
            System.out.println(maxPQ.max().toString());
        }

/*        Card[] a=new Card[5];
        a[0] = new Card(""A"",""Spades"");
        a[1] = new Card(""K"",""Spades"");
        a[2] = new Card(""10"",""Spades"");
        a[3] = new Card(""5"",""Spades"");
        a[4] = new Card(""J"",""Hearts"");

        Card[] b=new Card[5];
        b[0] = new Card(""A"",""Hearts"");
        b[1] = new Card(""A"",""Clubs"");
        b[2] = new Card(""8"",""Spades"");
        b[3] = new Card(""2"",""Spades"");
        b[4] = new Card(""K"",""Hearts"");

        Hand A=new Hand(a);
        Hand B=new Hand(b);
        System.out.println(A.compareTo(B));*/
    }
}

@4b99559fe989d56968cf4c8c0d3591f3@"
"r03525008","0","0.41","106080","@774d2fa70a681a93073dc3bf131181a6@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    MaxPQ<Hand> maxPQ;
    public HandPQ(int capacity){
        this.maxPQ=new MaxPQ(capacity);
    }
    public static void main(String[] args) throws Exception {

        //try(BufferedReader br = new BufferedReader(new FileReader(""in.txt""))){
          try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
             HandPQ handPQ = new HandPQ(count);

            for(int i =0;i<count;i++) {
                String[] cards_name = br.readLine().split("","");
                Card[] cards = new Card[5];
                for (int j = 0; j < cards_name.length; j++) {
                    String temp[] = cards_name[j].split(""_"");
                    cards[j] = new Card(temp[1], temp[0]);
                }
                Hand hand=new Hand(cards);
                handPQ.maxPQ.insert(hand);
            }
            for(int i=0;i<target-1;i++){
                handPQ.maxPQ.delMax();
            }
            Arrays.sort(handPQ.maxPQ.max().getCards());
            System.out.println(handPQ.maxPQ.max().toString());
            br.close();
        }

/*        Card[] a=new Card[5];
        a[0] = new Card(""A"",""Spades"");
        a[1] = new Card(""K"",""Spades"");
        a[2] = new Card(""10"",""Spades"");
        a[3] = new Card(""5"",""Spades"");
        a[4] = new Card(""J"",""Hearts"");

        Card[] b=new Card[5];
        b[0] = new Card(""A"",""Hearts"");
        b[1] = new Card(""A"",""Clubs"");
        b[2] = new Card(""8"",""Spades"");
        b[3] = new Card(""2"",""Spades"");
        b[4] = new Card(""K"",""Hearts"");

        Hand A=new Hand(a);
        Hand B=new Hand(b);
        System.out.println(A.compareTo(B));*/
    }
}

@774d2fa70a681a93073dc3bf131181a6@"
"r03525008","6","0.96","118448","@634b1951ca37ab2ef825d9d119b9ae53@import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

public class HandPQ {

    int N;
    Hand[] pq;

    HandPQ (){
        N = 0;
        pq = new Hand[10];
    }

    public boolean isEmpty(){
        return N == 0;
    }

    public int size(){
        return N;
    }

    public void insert(Hand hand) {
        checkAndResize();
        pq[N++] = hand;
    }

    public Hand deleteMin() {
        int min = 0;
        for (int i = 0 ; i < N ; i++){
            if (pq[min].compareTo(pq[i]) == 1){
                min = i;
            }
        }
        Hand temp = pq[min];
        pq[min] = pq[N-1];
        pq[N-1] = temp;
        return pq[--N];
    }

    private void checkAndResize() {
        if (pq.length-N <= 1) {
            Hand[] copy = new Hand[2*pq.length];
            for (int i = 0 ; i < N ; i++){
                copy[i] = pq[i];
            }
            pq = copy;
        }
    }


    public static void main(String[] args) {

        try {
            BufferedReader br = new BufferedReader(new FileReader(args[0]));
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            HandPQ pq = new HandPQ();
            for (int line = 0 ; line < count ; line++ ){
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                pq.insert(hand);
                if (pq.size() > target){
                    pq.deleteMin();
                }
//                System.out.println(hand.getCardType() + "":"" + pq.size());
            }
            br.close();

            Card[] cards = pq.deleteMin().getCards();
            Arrays.sort(cards);
            System.out.println(toString(cards));

        } catch (IOException e){
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }

    public static String toString(Card[] cards){
        String temp = """";
        String sp = """";
        for (Card c:cards){
            temp += sp + c.getSuit() + ""_"" + c.getFace();
            sp = "","";
        }
        return temp;
    }

}

@634b1951ca37ab2ef825d9d119b9ae53@"
"r03525008","7","0.145714285714286","119824","@76f30f3d6ffeefd657748c17776e6044@import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

public class HandPQ {

    int N;
    Hand[] pq;

    HandPQ (){
        N = 0;
        pq = new Hand[10];
    }

    public boolean isEmpty(){
        return N == 0;
    }

    public int size(){
        return N;
    }

    public void insert(Hand hand) {
        checkAndResize();
        pq[N++] = hand;
    }

    public Hand deleteMin() {
        int min = 0;
        for (int i = 0 ; i < N ; i++){
            if (pq[min].compareTo(pq[i]) == 1){
                min = i;
            }
        }
        Hand temp = pq[min];
        pq[min] = pq[N-1];
        pq[N-1] = temp;
        return pq[--N];
    }

    private void checkAndResize() {
        if (pq.length-N <= 1) {
            Hand[] copy = new Hand[2*pq.length];
            for (int i = 0 ; i < N ; i++){
                copy[i] = pq[i];
            }
            pq = copy;
        }
    }


    public static void main(String[] args) {

        try {
            BufferedReader br = new BufferedReader(new FileReader(args[0]));
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
//            HandPQ pq = new HandPQ();
            MinPQ<Hand> pq = new MinPQ<Hand>();
            for (int line = 0 ; line < count ; line++ ){
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                pq.insert(hand);
                if (pq.size() > target){
//                    pq.deleteMin();
                    pq.delMin();
                }

            }
            br.close();

//            Card[] cards = pq.deleteMin().getCards();
            Card[] cards = pq.delMin().getCards();
            Arrays.sort(cards);
            System.out.println(toString(cards));

        } catch (IOException e){
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }

    public static String toString(Card[] cards){
        String temp = """";
        String sp = """";
        for (Card c:cards){
            temp += sp + c.getSuit() + ""_"" + c.getFace();
            sp = "","";
        }
        return temp;
    }

}

@76f30f3d6ffeefd657748c17776e6044@"
"r03525008","4","0.39","105344","@dba3f847144b7494b614cb726b3fc67a@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    MaxPQ<Hand> maxPQ;
    public HandPQ(int capacity){
        this.maxPQ=new MaxPQ(capacity);
    }
    public String getmaxstring(){
        return this.maxPQ.max().getCards()[0].getSuit()+""_""+this.maxPQ.max().getCards()[0].getFace()+"",""+this.maxPQ.max().getCards()[1].getSuit()+""_""+this.maxPQ.max().getCards()[1].getFace()+"",""+
                this.maxPQ.max().getCards()[2].getSuit()+""_""+this.maxPQ.max().getCards()[2].getFace()+"",""+this.maxPQ.max().getCards()[3].getSuit()+""_""+this.maxPQ.max().getCards()[3].getFace()+"",""+
                this.maxPQ.max().getCards()[4].getSuit()+""_""+this.maxPQ.max().getCards()[4].getFace();
    }
    public static void main(String[] args) throws Exception {

        //try(BufferedReader br = new BufferedReader(new FileReader(""in.txt""))){
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
             HandPQ handPQ = new HandPQ(count);

            for(int i =0;i<count;i++) {
                String[] cards_name = br.readLine().split("","");
                Card[] cards = new Card[5];
                for (int j = 0; j < cards_name.length; j++) {
                    String temp[] = cards_name[j].split(""_"");
                    cards[j] = new Card(temp[1], temp[0]);
                }
                Hand hand=new Hand(cards);
                handPQ.maxPQ.insert(hand);
            }
            for(int i=0;i<target-1;i++){
                handPQ.maxPQ.delMax();
            }
            Arrays.sort(handPQ.maxPQ.max().getCards());
            System.out.println(handPQ.getmaxstring());
            br.close();
        }

/*        Card[] a=new Card[5];
        a[0] = new Card(""A"",""Spades"");
        a[1] = new Card(""K"",""Spades"");
        a[2] = new Card(""10"",""Spades"");
        a[3] = new Card(""5"",""Spades"");
        a[4] = new Card(""J"",""Hearts"");

        Card[] b=new Card[5];
        b[0] = new Card(""A"",""Hearts"");
        b[1] = new Card(""A"",""Clubs"");
        b[2] = new Card(""8"",""Spades"");
        b[3] = new Card(""2"",""Spades"");
        b[4] = new Card(""K"",""Hearts"");

        Hand A=new Hand(a);
        Hand B=new Hand(b);
        System.out.println(A.compareTo(B));*/
    }
}

@dba3f847144b7494b614cb726b3fc67a@"
"b03611033","4","0.39","105648","@890af2b310b36e087c9ad7a582759d12@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;


public class HandPQ {

    public static void main(String[] args) throws Exception {
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            Hand[] playerArray = new Hand[count];

            for(int j=0;j<count;j++) {                        
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                playerArray[j] = hand;
            }
            
            MaxPQ<Hand> pq = new MaxPQ<>(playerArray);
            for(int j=0;j<target-1;j++){
                pq.delMax();
            }
            Card goalcard[]=new Card[5];
            goalcard=pq.delMax().getCards();
            Arrays.sort(goalcard);
            
            for(int i=0;i<5;i++){
                StdOut.print(goalcard[i].getSuit()+""_""+goalcard[i].getFace());
                if(i==4) break;
                StdOut.print("","");
            }
        }
    }
}

@890af2b310b36e087c9ad7a582759d12@"
"r03525008","0","0","0","@a4b2b039b5fc65d509ea079565a37e90@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    MinPQ<Hand> minPQ;
    public HandPQ(int capacity){
        this.minPQ=new MinPQ(capacity);
    }
    public String getmaxstring(){
        return this.minPQ.min().getCards()[0].getSuit()+""_""+this.minPQ.min().getCards()[0].getFace()+"",""+this.minPQ.min().getCards()[1].getSuit()+""_""+this.minPQ.min().getCards()[1].getFace()+"",""+
                this.minPQ.min().getCards()[2].getSuit()+""_""+this.minPQ.min().getCards()[2].getFace()+"",""+this.minPQ.min().getCards()[3].getSuit()+""_""+this.minPQ.min().getCards()[3].getFace()+"",""+
                this.minPQ.min().getCards()[4].getSuit()+""_""+this.minPQ.min().getCards()[4].getFace();
    }
    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(""in.txt""))){
        //try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
             HandPQ handPQ = new HandPQ(target);


            for(int i =0;i<count;i++) {
                String[] cards_name = br.readLine().split("","");
                Card[] cards = new Card[5];
                for (int j = 0; j < 5; j++) {
                    String temp[] = cards_name[j].split(""_"");
                    cards[j] = new Card(temp[1], temp[0]);
                }
                Hand hand=new Hand(cards);
                handPQ.minPQ.insert(hand);
                if(handPQ.minPQ.size()>target)
                    handPQ.minPQ.delMin();

                //System.out.println(handPQ.minPQ.size());
            }

            Arrays.sort(handPQ.minPQ.min().getCards());
            System.out.println(handPQ.getmaxstring());
            br.close();
        }

/*        Card[] a=new Card[5];
        a[0] = new Card(""A"",""Spades"");
        a[1] = new Card(""K"",""Spades"");
        a[2] = new Card(""10"",""Spades"");
        a[3] = new Card(""5"",""Spades"");
        a[4] = new Card(""J"",""Hearts"");

        Card[] b=new Card[5];
        b[0] = new Card(""A"",""Hearts"");
        b[1] = new Card(""A"",""Clubs"");
        b[2] = new Card(""8"",""Spades"");
        b[3] = new Card(""2"",""Spades"");
        b[4] = new Card(""K"",""Hearts"");

        Hand A=new Hand(a);
        Hand B=new Hand(b);
        System.out.println(A.compareTo(B));*/
    }
}

@a4b2b039b5fc65d509ea079565a37e90@"
"r03525008","7","0.144285714285714","119200","@069684f6f7a51e2bf51a3dc9c0f93562@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    MinPQ<Hand> minPQ;
    public HandPQ(int capacity){
        this.minPQ=new MinPQ(capacity);
    }
    public String getmaxstring(){
        return this.minPQ.min().getCards()[0].getSuit()+""_""+this.minPQ.min().getCards()[0].getFace()+"",""+this.minPQ.min().getCards()[1].getSuit()+""_""+this.minPQ.min().getCards()[1].getFace()+"",""+
                this.minPQ.min().getCards()[2].getSuit()+""_""+this.minPQ.min().getCards()[2].getFace()+"",""+this.minPQ.min().getCards()[3].getSuit()+""_""+this.minPQ.min().getCards()[3].getFace()+"",""+
                this.minPQ.min().getCards()[4].getSuit()+""_""+this.minPQ.min().getCards()[4].getFace();
    }
    public static void main(String[] args) throws Exception {

        //try(BufferedReader br = new BufferedReader(new FileReader(""in.txt""))){
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
             HandPQ handPQ = new HandPQ(target);


            for(int i =0;i<count;i++) {
                String[] cards_name = br.readLine().split("","");
                Card[] cards = new Card[5];
                for (int j = 0; j < 5; j++) {
                    String temp[] = cards_name[j].split(""_"");
                    cards[j] = new Card(temp[1], temp[0]);
                }
                Hand hand=new Hand(cards);
                handPQ.minPQ.insert(hand);
                if(handPQ.minPQ.size()>target)
                    handPQ.minPQ.delMin();

                //System.out.println(handPQ.minPQ.size());
            }

            Arrays.sort(handPQ.minPQ.min().getCards());
            System.out.println(handPQ.getmaxstring());
            br.close();
        }

/*        Card[] a=new Card[5];
        a[0] = new Card(""A"",""Spades"");
        a[1] = new Card(""K"",""Spades"");
        a[2] = new Card(""10"",""Spades"");
        a[3] = new Card(""5"",""Spades"");
        a[4] = new Card(""J"",""Hearts"");

        Card[] b=new Card[5];
        b[0] = new Card(""A"",""Hearts"");
        b[1] = new Card(""A"",""Clubs"");
        b[2] = new Card(""8"",""Spades"");
        b[3] = new Card(""2"",""Spades"");
        b[4] = new Card(""K"",""Hearts"");

        Hand A=new Hand(a);
        Hand B=new Hand(b);
        System.out.println(A.compareTo(B));*/
    }
}

@069684f6f7a51e2bf51a3dc9c0f93562@"
"r04631034","0","1.29","134560","@568e294385f504f9983daca4381adbc5@
public class HandPQ {

          public static void main(String[] args) throws Exception {

                    In in = new In(args[0]);
                    String line = in.readLine();
//                    int N = Integer.valueOf(line.split("","")[0]);
                    int topN = Integer.valueOf(line.split("","")[1]);

//                    Hand[] HandArray = new Hand[N];

                    MinPQ<Hand> pq = new MinPQ<Hand>();
//                    System.out.println(pq.size());
//                    int idx=0;
                    while ((line = in.readLine()) != null) {

                              Card[] cardsArray = new Card[5];
                              String[] cardStr = line.split("","");
                              for (int i = 0; i < 5; i++) {
                                        Card card = new Card( cardStr[i].split(""_"")[1],  cardStr[i].split(""_"")[0]);
                                        cardsArray[i] = card;
                              }
                              Hand hand = new Hand(cardsArray);
//                              HandArray[idx++]=hand;
                              if (pq.size() < topN) {
                                        pq.insert(hand);                                        
                              }
                              else{
                                        pq.insert(hand);
                                        pq.delMin();
                              }
                    }
//                    System.out.println(pq.size());
//                    System.out.println("""");
                    Hand out = new Hand(pq.delMin().getCards());
                    for(int i = 4 ; i>-1;i--){
                              System.out.print(out.getCards()[i].getSuit()+'_'+out.getCards()[i].getFace());
                              if(i != 0){
                                        System.out.print("","");
                              }
                              else continue;
                    }
//                    System.out.println("""");
//                                        System.out.println(pq.size());
                    
                    
          }

}

@568e294385f504f9983daca4381adbc5@"
"r04631034","0","1.29","135760","@7d931920277624f6e37766033f558bd1@
public class HandPQ {

          public static void main(String[] args) throws Exception {

                    In in = new In(args[0]);
                    String line = in.readLine();
                    int N = Integer.valueOf(line.split("","")[0]);
                    int topN = Integer.valueOf(line.split("","")[1]);

//                    Hand[] HandArray = new Hand[N];

                    MinPQ<Hand> pq = new MinPQ<Hand>();
//                    System.out.println(pq.size());
//                    int idx=0;
//                    while ((line = in.readLine()) != null) {
                     for(int count =0; count<N ; count++){
                               line=in.readLine();
                              Card[] cardsArray = new Card[5];
                              String[] cardStr = line.split("","");
                              for (int i = 0; i < 5; i++) {
                                        Card card = new Card( cardStr[i].split(""_"")[1],  cardStr[i].split(""_"")[0]);
                                        cardsArray[i] = card;
                              }
                              Hand hand = new Hand(cardsArray);
//                              HandArray[idx++]=hand;
                              if (pq.size() < topN) {
                                        pq.insert(hand);                                        
                              }
                              else{
                                        pq.insert(hand);
                                        pq.delMin();
                              }
                    }
//                    System.out.println(pq.size());
//                    System.out.println("""");
                    Hand out = new Hand(pq.delMin().getCards());
                    for(int i = 4 ; i>-1;i--){
                              System.out.print(out.getCards()[i].getSuit()+'_'+out.getCards()[i].getFace());
                              if(i != 0){
                                        System.out.print("","");
                              }
                              else continue;
                    }
//                    System.out.println("""");
//                                        System.out.println(pq.size());
                    
                    
          }

}

@7d931920277624f6e37766033f558bd1@"
"r04546014","0","0","0","@e14a5991a67deddc7367bbae7286ce9f@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] hand = new Hand[count];//訂出幾個人
            Card[][] card = new Card[count][];//前面格子代表每一個人，後面格子代表他的每一張牌
            for (int i = 0; i < count; i++) {
                String[] PlayerHand = br.readLine().split("","");//讀每一個player的手牌
                card[i] = new Card[5];
                for (int j = 0; j < 5; j++) {
                    String[] sf = PlayerHand[i].split(""_"");//讀每一張排的花色和數字
                    card[i][j] = new Card(sf[1], sf[0]);
                }
                hand[i] = new Hand(card[i]);
            }
            Arrays.sort(hand);
            Card[] anser = hand[target].getCards();
            for (int i = 0; i < 5; i++) {//輸出牌
                System.out.println(anser[i].getSuit()+""_""+anser[i].getFace());
                if(i<4)
                    System.out.println("","");
            }

        }
    }
}

@e14a5991a67deddc7367bbae7286ce9f@"
"r04546014","0","0.46","104064","@fc639c1a5c70a40573f7ad6f8c06b354@import java.io.BufferedReader;
import java.io.FileReader;
public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] hand = new Hand[count];//訂出幾個人
            Card[][] card = new Card[count][];//前面格子代表每一個人，後面格子代表他的每一張牌
            for (int i = 0; i < count; i++) {
                String[] PlayerHand = br.readLine().split("","");//讀每一個player的手牌
                card[i] = new Card[5];
                for (int j = 0; j < 5; j++) {
                    String[] sf = PlayerHand[i].split(""_"");//讀每一張排的花色和數字
                    card[i][j] = new Card(sf[1], sf[0]);
                }
                hand[i] = new Hand(card[i]);
            }
            Arrays.sort(hand);
            Card[] anser = hand[target].getCards();
            for (int i = 0; i < 5; i++) {//輸出牌
                System.out.println(anser[i].getSuit()+""_""+anser[i].getFace());
                if(i<4)
                    System.out.println("","");
            }

        }
    }
}

@fc639c1a5c70a40573f7ad6f8c06b354@"
"r04546014","0","0","0","@f3fc4e2a91854260046db343c742f201@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] hand = new Hand[count];//訂出幾個人
            Card[][] card = new Card[count][];//前面格子代表每一個人，後面格子代表他的每一張牌
            for (int i = 0; i < count; i++) {
                String[] PlayerHand = br.readLine().split("","");//讀每一個player的手牌
                card[i] = new Card[5];
                for (int j = 0; j < 5; j++) {
                    String[] sf = PlayerHand[i].split(""_"");//讀每一張排的花色和數字
                    card[i][j] = new Card(sf[1], sf[0]);
                }
                hand[i] = new Hand(card[i]);
            }
            Arrays.sort(hand);
            Card[] anser = hand[count-target-1].getCards();
            for (int i = 0; i < 5; i++) {//輸出牌
                System.out.println(anser[i].getSuit()+""_""+anser[i].getFace());
                if(i<4)
                    System.out.println("","");
            }

        }
    }
}

@f3fc4e2a91854260046db343c742f201@"
"r04546014","0","0","0","@e3f931d7dd40e95cbaf154987abab6aa@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] hand = new Hand[count];//訂出幾個人
            Card[][] card = new Card[count][];//前面格子代表每一個人，後面格子代表他的每一張牌
            for (int i = 0; i < count; i++) {
                String[] PlayerHand = br.readLine().split("","");//讀每一個player的手牌
                card[i] = new Card[5];
                for (int j = 0; j < 5; j++) {
                    String[] sf = PlayerHand[i].split(""_"");//讀每一張排的花色和數字
                    card[i][j] = new Card(sf[1], sf[0]);
                }
                hand[i] = new Hand(card[i]);
            }
            Arrays.sort(hand);
            Card[] anser = hand[count-target].getCards();
            for (int i = 0; i < 5; i++) {//輸出牌
                System.out.println(anser[i].getSuit()+""_""+anser[i].getFace());
                if(i<4)
                    System.out.println("","");
            }

        }
    }
}

@e3f931d7dd40e95cbaf154987abab6aa@"
"b02611023","4","0.39","106160","@dcfbb25caa14bce092fb60e822c43ff3@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int id = 0;
            
            MaxPQ<Hand> PQ = new MaxPQ<Hand>(count);
            MinPQ<Card> pq = new MinPQ<Card>(5);
            Card[] cards = new Card[5];

            while (br.ready()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                PQ.insert(new Hand(cardsArray));
            }
            
            for(int i = 0; i < target; i ++){
                cards = PQ.delMax().getCards();
            }
            
            for(int i = 0; i < 5; i++){
                pq.insert(cards[i]);
            }
            
            Card c = pq.delMin();
            String s = (c.getSuit()) + ""_"" + (c.getFace());
            while(!pq.isEmpty()){
                c = pq.delMin();
                s = s + ("","" + c.getSuit()) + ""_"" + (c.getFace());
            }
            System.out.println(s);
        }
   }
}
@dcfbb25caa14bce092fb60e822c43ff3@"
"b02611023","4","0.4","106192","@c87143790f01421a0228540c0ca0422d@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int id = 0;
            
            MinPQ<Hand> PQ = new MinPQ<Hand>(count);
            MinPQ<Card> pq = new MinPQ<Card>(5);
            Card[] cards = new Card[5];

            while (br.ready()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                PQ.insert(new Hand(cardsArray));
            }
            
            for(int i = 0; i < (count - target + 1); i ++){
                cards = PQ.delMin().getCards();
            }
            
            for(int i = 0; i < 5; i++){
                pq.insert(cards[i]);
            }
            
            Card c = pq.delMin();
            String s = (c.getSuit()) + ""_"" + (c.getFace());
            while(!pq.isEmpty()){
                c = pq.delMin();
                s = s + ("","" + c.getSuit()) + ""_"" + (c.getFace());
            }
            System.out.println(s);
        }
   }
}
@c87143790f01421a0228540c0ca0422d@"
"r04546014","0","0","0","@6a2934df41d1ea1117fbd7cb2e7983b3@import edu.princeton.cs.algs4.MaxPQ;
import edu.princeton.cs.algs4.MinPQ;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] hand = new Hand[count];//訂出幾個人
            Card[][] card = new Card[count][];//前面格子代表每一個人，後面格子代表他的每一張牌
            //MaxPQ pq=new MaxPQ();
            MinPQ pq=new MinPQ();
            for (int i = 0; i < count; i++) {
                String[] PlayerHand = br.readLine().split("","");//讀每一個player的手牌
                card[i] = new Card[5];
                for (int j = 0; j < 5; j++) {
                    String[] sf = PlayerHand[i].split(""_"");//讀每一張排的花色和數字
                    card[i][j] = new Card(sf[1], sf[0]);
                }
                hand[i] = new Hand(card[i]);
                pq.insert(hand[i]);
                if(pq.size()>target)
                    pq.delMin();
            }
            Hand[] kk=new Hand[5];
            Card[] anser = hand[count-target].getCards();
            for(int i=0;i<pq.size();i++){
                if(i==pq.size()-1)
                    System.out.println(pq.delMin());
            }
//                kk=pq.delMin();
//            
//            for (int i = 0; i < 5; i++) {//輸出牌
//                System.out.println(anser[i].getSuit()+""_""+anser[i].getFace());
//                if(i<4)
//                    System.out.println("","");
//            }

        }
    }
}

@6a2934df41d1ea1117fbd7cb2e7983b3@"
"r04546014","0","0","0","@0eab218df38b343a482b482812c33ba8@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] hand = new Hand[count];//訂出幾個人
            Card[][] card = new Card[count][];//前面格子代表每一個人，後面格子代表他的每一張牌
            //MaxPQ pq=new MaxPQ();
            MinPQ pq=new MinPQ();
            for (int i = 0; i < count; i++) {
                String[] PlayerHand = br.readLine().split("","");//讀每一個player的手牌
                card[i] = new Card[5];
                for (int j = 0; j < 5; j++) {
                    String[] sf = PlayerHand[i].split(""_"");//讀每一張排的花色和數字
                    card[i][j] = new Card(sf[1], sf[0]);
                }
                hand[i] = new Hand(card[i]);
                pq.insert(hand[i]);
                if(pq.size()>target)
                    pq.delMin();
            }
            Hand[] kk=new Hand[5];
            Card[] anser = hand[count-target].getCards();
            for(int i=0;i<pq.size();i++){
                if(i==pq.size()-1)
                    System.out.println(pq.delMin());
            }
//                kk=pq.delMin();
//            
//            for (int i = 0; i < 5; i++) {//輸出牌
//                System.out.println(anser[i].getSuit()+""_""+anser[i].getFace());
//                if(i<4)
//                    System.out.println("","");
//            }

        }
    }
}

@0eab218df38b343a482b482812c33ba8@"
"r04546014","0","0","0","@73129bea5c365b52087fddf2fa98426a@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] hand = new Hand[count];//訂出幾個人
            Card[][] card = new Card[count][];//前面格子代表每一個人，後面格子代表他的每一張牌
            MinPQ pq=new MinPQ();
            for (int i = 0; i < count; i++) {
                String[] PlayerHand = br.readLine().split("","");//讀每一個player的手牌
                card[i] = new Card[5];
                for (int j = 0; j < 5; j++) {
                    String[] sf = PlayerHand[i].split(""_"");//讀每一張排的花色和數字
                    card[i][j] = new Card(sf[1], sf[0]);
                }
                hand[i] = new Hand(card[i]);
                pq.insert(hand[i]);
                if(pq.size()>target)
                    pq.delMin();
            }
            Hand[] kk=new Hand[5];
            Card[] anser = hand[count-target].getCards();
           
                    System.out.println(pq.delMin());
            

        }
    }
}

@73129bea5c365b52087fddf2fa98426a@"
"r04546014","0","0","0","@8a1c839f92458094e7351d8f7c1fd583@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] hand = new Hand[count];//訂出幾個人
            Card[][] card = new Card[count][];//前面格子代表每一個人，後面格子代表他的每一張牌
            MinPQ pq = new MinPQ();
            for (int i = 0; i < count; i++) {
                String[] PlayerHand = br.readLine().split("","");//讀每一個player的手牌
                card[i] = new Card[5];
                for (int j = 0; j < 5; j++) {
                    String[] sf = PlayerHand[i].split(""_"");//讀每一張排的花色和數字
                    card[i][j] = new Card(sf[1], sf[0]);
                }
                hand[i] = new Hand(card[i]);
                pq.insert(hand[i]);
                if (pq.size() > target) {
                    pq.delMin();
                }
            }
            Hand[] kk = new Hand[5];
            Card[] anser = hand[count - target].getCards();

            System.out.println(pq.delMin());

        }
    }
}

@8a1c839f92458094e7351d8f7c1fd583@"
"b02611023","2","0.27","105824","@e403a85a8294643e0c3071768cfbf1f4@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int id = 0;
            
            MinPQ<Hand> PQ = new MinPQ<Hand>(count - target + 1);
            MinPQ<Card> pq = new MinPQ<Card>(5);
            Card[] cards = new Card[5];

            while (br.ready()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                
                Hand hd = new Hand(cardsArray);
                
                if(PQ.size() != (count - target + 1)){
                    PQ.insert(hd);
                }
                else{
                    if(hd.compareTo(PQ.min()) < 0){
                        Hand a = PQ.delMin();
                        PQ.delMin();
                        PQ.insert(hd);
                        PQ.insert(a);
                    }
                }
            }
            
            while(!PQ.isEmpty()){
                cards = PQ.delMin().getCards();
            }
            
            for(int i = 0; i < 5; i++){
                pq.insert(cards[i]);
            }
            
            Card c = pq.delMin();
            String s = (c.getSuit()) + ""_"" + (c.getFace());
            while(!pq.isEmpty()){
                c = pq.delMin();
                s = s + ("","" + c.getSuit()) + ""_"" + (c.getFace());
            }
            System.out.println(s);
        }
   }
}
@e403a85a8294643e0c3071768cfbf1f4@"
"r04546014","0","0.49","104304","@8438f991f55a4618cad279bc3430b4a2@
import edu.princeton.cs.algs4.MinPQ;
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] hand = new Hand[count];//訂出幾個人
            Card[]card = new Card[5];//前面格子代表每一個人，後面格子代表他的每一張牌
            MinPQ pq = new MinPQ();
            for (int i = 0; i < count; i++) {
                String[] PlayerHand = br.readLine().split("","");//讀每一個player的手牌                
                for (int j = 0; j < 5; j++) {
                    String[] sf = PlayerHand[j].split(""_"");//讀每一張排的花色和數字
                    card[j] = new Card(sf[1], sf[0]);
                }
                hand[i] = new Hand(card);
                pq.insert(hand[i]);
                if (pq.size() > target) {
                    pq.delMin();
                }
            }
            System.out.println(pq.delMin());

        }
    }
}

@8438f991f55a4618cad279bc3430b4a2@"
"r04546014","0","0.38","106096","@96e62cfbafc06d8d192ded58188102b3@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] hand = new Hand[count];//訂出幾個人
            Card[]card = new Card[5];//前面格子代表每一個人，後面格子代表他的每一張牌
            MinPQ pq = new MinPQ();
            for (int i = 0; i < count; i++) {
                String[] PlayerHand = br.readLine().split("","");//讀每一個player的手牌                
                for (int j = 0; j < 5; j++) {
                    String[] sf = PlayerHand[j].split(""_"");//讀每一張排的花色和數字
                    card[j] = new Card(sf[1], sf[0]);
                }
                hand[i] = new Hand(card);
                pq.insert(hand[i]);
                if (pq.size() > target) {
                    pq.delMin();
                }
            }
            System.out.println(pq.delMin());

        }
    }
}

@96e62cfbafc06d8d192ded58188102b3@"
"b02611023","7","0.145714285714286","118864","@67664a02414d0f6f5a84c1659206b1ca@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int id = 0;
            
            MinPQ<Hand> PQ = new MinPQ<Hand>();
            MinPQ<Card> pq = new MinPQ<Card>(5);
            Card[] cards = new Card[5];

            while (br.ready()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                PQ.insert(new Hand(cardsArray));
                if(PQ.size() > target){
                    PQ.delMin();
                }
            }
            
            cards = PQ.delMin().getCards();
            
            for(int i = 0; i < 5; i++){
                pq.insert(cards[i]);
            }
            
            Card c = pq.delMin();
            String s = (c.getSuit()) + ""_"" + (c.getFace());
            while(!pq.isEmpty()){
                c = pq.delMin();
                s = s + ("","" + c.getSuit()) + ""_"" + (c.getFace());
            }
            System.out.println(s);
        }
   }
} 
@67664a02414d0f6f5a84c1659206b1ca@"
"r04546014","1","0.37","106128","@d8e66f39638585fce9ff4c296c282828@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] hand = new Hand[count];//訂出幾個人
            Card[]card = new Card[5];//紀錄每一張牌
            MinPQ<Hand> pq = new MinPQ();
            for (int i = 0; i < count; i++) {
                String[] PlayerHand = br.readLine().split("","");//讀每一個player的手牌                
                for (int j = 0; j < 5; j++) {
                    String[] sf = PlayerHand[j].split(""_"");//讀每一張排的花色和數字
                    card[j] = new Card(sf[1], sf[0]);
                }
                hand[i] = new Hand(card);
                pq.insert(hand[i]);
                if (pq.size() > target) {
                    pq.delMin();
                }
            }
            Card[] answer=pq.delMin().getCards();
            
            for(int i=0;i<5;i++){
                System.out.print(answer[i].getSuit()+""_""+answer[i].getFace());
                if(i<4) System.out.print("","");
            }
        }
    }
}

@d8e66f39638585fce9ff4c296c282828@"
"r04546014","1","0.39","105776","@f488b76ac7138feb850cbf9a434653e6@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] hand = new Hand[count];//訂出幾個人
            Card[]card = new Card[5];//紀錄每一張牌
            MinPQ<Hand> pq = new MinPQ();
            for (int i = 0; i < count; i++) {
                String[] PlayerHand = br.readLine().split("","");//讀每一個player的手牌                
                for (int j = 0; j < 5; j++) {
                    String[] sf = PlayerHand[j].split(""_"");//讀每一張排的花色和數字
                    card[j] = new Card(sf[1], sf[0]);
                }
                hand[i] = new Hand(card);
                pq.insert(hand[i]);
                if (pq.size() > target) {
                    pq.delMin();
                }
            }
            
            Card[] answer=pq.delMin().getCards();
            Arrays.sort(answer);
            for(int i=0;i<5;i++){
                System.out.print(answer[i].getSuit()+""_""+answer[i].getFace());
                if(i<4) System.out.print("","");
            }
        }
    }
}

@f488b76ac7138feb850cbf9a434653e6@"
"r04546014","4","0.38","106128","@683eaf0b9f6e3de907b363b2095b1e57@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] hand = new Hand[count];//訂出幾個人
            Card[][]card = new Card[count][];//紀錄每一張牌
            MinPQ<Hand> pq = new MinPQ();
            for (int i = 0; i < count; i++) {
                String[] PlayerHand = br.readLine().split("","");//讀每一個player的手牌     
                card[i]=new Card[5];
                for (int j = 0; j < 5; j++) {
                    String[] sf = PlayerHand[j].split(""_"");//讀每一張排的花色和數字
                    card[i][j] = new Card(sf[1], sf[0]);
                }
                hand[i] = new Hand(card[i]);
                pq.insert(hand[i]);
                if (pq.size() > target) {
                    pq.delMin();
                }
            }
            Card[] answer=pq.delMin().getCards();
            for(int i=0;i<5;i++){
                System.out.print(answer[i].getSuit()+""_""+answer[i].getFace());
                if(i<4) System.out.print("","");
            }
        }
    }
}

@683eaf0b9f6e3de907b363b2095b1e57@"
"r04546014","0","0.29","102496","@c530265ccc0a799a1937e121d71d039f@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] hand = new Hand[count];//訂出幾個人
            Card[][]card = new Card[count][];//紀錄每一張牌
            MaxPQ<Hand> pq = new MaxPQ();
            for (int i = 0; i < count; i++) {
                String[] PlayerHand = br.readLine().split("","");//讀每一個player的手牌     
                card[i]=new Card[5];
                for (int j = 0; j < 5; j++) {
                    String[] sf = PlayerHand[j].split(""_"");//讀每一張排的花色和數字
                    card[i][j] = new Card(sf[1], sf[0]);
                }
                hand[i] = new Hand(card[i]);
                pq.insert(hand[i]);
                if (pq.size() > count-target) {
                    pq.delMax();
                }
            }
            Card[] answer=pq.delMax().getCards();
            for(int i=0;i<5;i++){
                System.out.print(answer[i].getSuit()+""_""+answer[i].getFace());
                if(i<4) System.out.print("","");
            }
        }
    }
}

@c530265ccc0a799a1937e121d71d039f@"
"b03611011","0","0","0","@744f0dd51951e48315a51b378fd6ed90@import java.io.FileReader;
import java.io.BufferedReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(""input.txt""))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx = 0;
            Hand[] playerArray = new Hand[count+1];
            
            for(String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                playerArray[idx++] = hand;
            }

            for (int i = 0; i < count; i++) {
                Hand[] min = new Hand[1];
                for (int j = i + 1; j < count; j++) {
                    if (playerArray[i].compareTo(playerArray[j]) == -1) {
                        min[0] = playerArray[i];
                        playerArray[i] = playerArray[j];
                        playerArray[j] = min[0];
                    }
                }
            }
            Card[] card1 = new Card[6];
            card1=playerArray[target-1].getCards();
            for (int i = 0; i < 5; i++) {
                Card[] max = new Card[1];
                for (int j = i + 1; j < 5; j++) {
                    if (card1[i].compareTo(card1[j])==1) {
                        max[0] = card1[i];
                        card1[i] = card1[j];
                        card1[j] = max[0];
                    }
                }
            }
            System.out.println(card1[0].getSuit()+""_""+card1[0].getFace()+"",""
                    +card1[1].getSuit()+""_""+card1[1].getFace()+"",""+card1[2].getSuit()+""_""+card1[2].getFace()
                    +"",""+card1[3].getSuit()+""_""+card1[3].getFace()+"",""+card1[4].getSuit()+""_""+card1[4].getFace());
        }
    }
}

@744f0dd51951e48315a51b378fd6ed90@"
"b03611011","4","0.37","105296","@b2217993018cbb4b0f05159c27b941a5@import java.io.FileReader;
import java.io.BufferedReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx = 0;
            Hand[] playerArray = new Hand[count+1];
            
            for(String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                playerArray[idx++] = hand;
            }

            for (int i = 0; i < count; i++) {
                Hand[] min = new Hand[1];
                for (int j = i + 1; j < count; j++) {
                    if (playerArray[i].compareTo(playerArray[j]) == -1) {
                        min[0] = playerArray[i];
                        playerArray[i] = playerArray[j];
                        playerArray[j] = min[0];
                    }
                }
            }
            Card[] card1 = new Card[6];
            card1=playerArray[target-1].getCards();
            for (int i = 0; i < 5; i++) {
                Card[] max = new Card[1];
                for (int j = i + 1; j < 5; j++) {
                    if (card1[i].compareTo(card1[j])==1) {
                        max[0] = card1[i];
                        card1[i] = card1[j];
                        card1[j] = max[0];
                    }
                }
            }
            System.out.println(card1[0].getSuit()+""_""+card1[0].getFace()+"",""
                    +card1[1].getSuit()+""_""+card1[1].getFace()+"",""+card1[2].getSuit()+""_""+card1[2].getFace()
                    +"",""+card1[3].getSuit()+""_""+card1[3].getFace()+"",""+card1[4].getSuit()+""_""+card1[4].getFace());
        }
    }
}

@b2217993018cbb4b0f05159c27b941a5@"
"r04546014","0","0.3","106112","@70ee0fcfcbc28f4d32d28e124320d156@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] hand = new Hand[count];//訂出幾個人
            Card[][] card = new Card[count][];//紀錄每一張牌
            
            MinPQ<Hand> pqMin = new MinPQ();
            MaxPQ<Hand> pqMax = new MaxPQ();

            for (int i = 0; i < count; i++) {
                String[] PlayerHand = br.readLine().split("","");//讀每一個player的手牌     
                card[i] = new Card[5];
                for (int j = 0; j < 5; j++) {
                    String[] sf = PlayerHand[j].split(""_"");//讀每一張排的花色和數字
                    card[i][j] = new Card(sf[1], sf[0]);
                }
                hand[i] = new Hand(card[i]);
                if (count - target >= count / 2) {
                    pqMin.insert(hand[i]);
                    if(pqMin.size()>count-target) pqMin.delMin();
                }
                if (count - target < count / 2) {
                    pqMax.insert(hand[i]);
                    if(pqMax.size()>count-target) pqMax.delMax();
                }
            }    
            Card[] answer=null;
            if (count - target >= count / 2) {
                    answer = pqMin.delMin().getCards();            
            }                
                if (count - target < count / 2) {
                    answer = pqMax.delMax().getCards();            
            }
                for (int i = 0; i < 5; i++) {
                System.out.print(answer[i].getSuit() + ""_"" + answer[i].getFace());
                if (i < 4) {
                    System.out.print("","");
                }
            }
        }
    }
}

@70ee0fcfcbc28f4d32d28e124320d156@"
"r04546014","1","0.28","106192","@94a50fab718dbd69595fdd1aef9c23f1@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] hand = new Hand[count];//訂出幾個人
            Card[][] card = new Card[count][];//紀錄每一張牌
            
            MinPQ<Hand> pqMin = new MinPQ();
            MaxPQ<Hand> pqMax = new MaxPQ();

            for (int i = 0; i < count; i++) {
                String[] PlayerHand = br.readLine().split("","");//讀每一個player的手牌     
                card[i] = new Card[5];
                for (int j = 0; j < 5; j++) {
                    String[] sf = PlayerHand[j].split(""_"");//讀每一張排的花色和數字
                    card[i][j] = new Card(sf[1], sf[0]);
                }
                hand[i] = new Hand(card[i]);
                if (count - target >= count / 2) {
                    pqMin.insert(hand[i]);
                    if(pqMin.size()>target) pqMin.delMin();
                }
                if (count - target < count / 2) {
                    pqMax.insert(hand[i]);
                    if(pqMax.size()>count-target) pqMax.delMax();
                }
            }    
            Card[] answer=null;
            if (count - target >= count / 2) {
                    answer = pqMin.delMin().getCards();            
            }                
                if (count - target < count / 2) {
                    answer = pqMax.delMax().getCards();            
            }
                for (int i = 0; i < 5; i++) {
                System.out.print(answer[i].getSuit() + ""_"" + answer[i].getFace());
                if (i < 4) {
                    System.out.print("","");
                }
            }
        }
    }
}

@94a50fab718dbd69595fdd1aef9c23f1@"
"r04546014","4","0.41","106176","@54e124f87f5c429189c646e37b397991@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] hand = new Hand[count];//訂出幾個人
            Card[][] card = new Card[count][];//紀錄每一張牌
            
            MinPQ<Hand> pqMin = new MinPQ();
            MaxPQ<Hand> pqMax = new MaxPQ();

            for (int i = 0; i < count; i++) {
                String[] PlayerHand = br.readLine().split("","");//讀每一個player的手牌     
                card[i] = new Card[5];
                for (int j = 0; j < 5; j++) {
                    String[] sf = PlayerHand[j].split(""_"");//讀每一張排的花色和數字
                    card[i][j] = new Card(sf[1], sf[0]);
                }
                hand[i] = new Hand(card[i]);
                if (count - target >= count / 2) {
                    pqMin.insert(hand[i]);
                    if(pqMin.size()>target) pqMin.delMin();
                }
                if (count - target < count / 2) {
                    pqMax.insert(hand[i]);
                    if(pqMax.size()>count-target+1) pqMax.delMax();
                }
            }    
            Card[] answer=null;
            if (count - target >= count / 2) {
                    answer = pqMin.delMin().getCards();            
            }                
                if (count - target < count / 2) {
                    answer = pqMax.delMax().getCards();            
            }
                for (int i = 0; i < 5; i++) {
                System.out.print(answer[i].getSuit() + ""_"" + answer[i].getFace());
                if (i < 4) {
                    System.out.print("","");
                }
            }
        }
    }
}

@54e124f87f5c429189c646e37b397991@"
"r04631034","0","1.34","133280","@f3df62588962036b3e9a8293c19e8aa6@
public class HandPQ {

          public static void main(String[] args) throws Exception {

                    In in = new In(args[0]);
                    String line = in.readLine();
                    int N = Integer.valueOf(line.split("","")[0]);
                    int topN = Integer.valueOf(line.split("","")[1]);

//                    Hand[] HandArray = new Hand[N];

                    MinPQ<Hand> pq = new MinPQ<Hand>();
//                    System.out.println(pq.size());
//                    int idx=0;
//                    while ((line = in.readLine()) != null) {
                     for(int count =0; count<N ; count++){
                               line=in.readLine();
                              Card[] cardsArray = new Card[5];
                              String[] cardStr = line.split("","");
                              for (int i = 0; i < 5; i++) {
                                        Card card = new Card( cardStr[i].split(""_"")[1],  cardStr[i].split(""_"")[0]);
                                        cardsArray[i] = card;
                              }
                              Hand hand = new Hand(cardsArray);
//                              HandArray[idx++]=hand;
                              if (pq.size() < topN) {
                                        pq.insert(hand);       
//                                        System.out.println(""card ""+count+"" : ""+pq.size());
                              }
                              else{
                                        pq.insert(hand);
//                                        System.out.println(""card ""+count+"" : ""+pq.size());
                                        pq.delMin();
//                                        System.out.println(""after del size: ""+pq.size());
                              }
                    }
//                    System.out.println(""size: ""+pq.size());
//                    System.out.println("""");
                    Hand out = new Hand(pq.delMin().getCards());
//                    for(int i = 4 ; i>-1;i--){
                    for(int i = 0 ; i<5;i++){                              
                              System.out.print(out.getCards()[i].getSuit()+'_'+out.getCards()[i].getFace());

                              if(i != 0){
                                        System.out.print("","");
                              }
                              else continue;
                    }
//                    System.out.println("""");
//                                        System.out.println(pq.size());
                    
                    
          }

}

@f3df62588962036b3e9a8293c19e8aa6@"
"r04546014","4","0.39","103968","@1791c1692b6edc4a3ebac0387016f5dc@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] hand = new Hand[count];//訂出幾個人
            Card[] card;//紀錄每一張牌
            
            MinPQ<Hand> pqMin = new MinPQ();
            MaxPQ<Hand> pqMax = new MaxPQ();

            for (int i = 0; i < count; i++) {
                String[] PlayerHand = br.readLine().split("","");//讀每一個player的手牌     
                card = new Card[5];
                for (int j = 0; j < 5; j++) {
                    String[] sf = PlayerHand[j].split(""_"");//讀每一張排的花色和數字
                    card[j] = new Card(sf[1], sf[0]);
                }
                hand[i] = new Hand(card);
                if (count - target >= count / 2) {
                    pqMin.insert(hand[i]);
                    if(pqMin.size()>target) pqMin.delMin();
                }
                if (count - target < count / 2) {
                    pqMax.insert(hand[i]);
                    if(pqMax.size()>count-target+1) pqMax.delMax();
                }
            }    
            Card[] answer=null;
            if (count - target >= count / 2) {
                    answer = pqMin.delMin().getCards();            
            }                
                if (count - target < count / 2) {
                    answer = pqMax.delMax().getCards();            
            }
                for (int i = 0; i < 5; i++) {
                System.out.print(answer[i].getSuit() + ""_"" + answer[i].getFace());
                if (i < 4) {
                    System.out.print("","");
                }
            }
        }
    }
}

@1791c1692b6edc4a3ebac0387016f5dc@"
"r04921074","0","0","0","@2932ee7bb1c418aea8ccaf7e479f9eae@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] HandArray = new Hand[count];
            Card[] cardsArray = new Card[5];
            
        for(int i=0; i<count; i++){
            String[] cardStr = br.readLine().split("","");
            for(int j=0; j<5; j++){
            String[] sep = cardStr[i].split(""_"");
            Card card = new Card(sep[1], sep[0]);
            cardsArray[j] = card;
            }
            HandArray[i] = new Hand(cardsArray);
        }
        
        Arrays.sort(HandArray);
        for(int i=0; i<5; i++){    
        System.out.println(HandArray[count - target].getCards()[i]);    
        }    
            
        }
    }
}

@2932ee7bb1c418aea8ccaf7e479f9eae@"
"r04921074","0","0.37","105328","@7a5f93d54997c9374037384dc45c5c2e@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] HandArray = new Hand[count];
            Card[] cardsArray = new Card[5];
            
        for(int i=0; i<count; i++){
            String LineStr = br.readLine();
            String[] cardStr = LineStr.split("","");
            
            for(int j=0; j<5; j++){
            String[] sep = cardStr[j].split(""_"");
            Card card = new Card(sep[1], sep[0]);
            cardsArray[j] = card;
           // System.out.println(cardsArray[i].getSuit()+""_""+cardsArray[i].getFace());
            }
            HandArray[i] = new Hand(cardsArray);
        }
        
        Arrays.sort(HandArray);
        
    //    System.out.println(count - target);
    //    System.out.println(HandArray[1].getCards()[4].getSuit()+""_""+HandArray[1].getCards()[4].getFace());
        for(int i=0; i<5; i++){    
        System.out.println(HandArray[count - target].getCards()[i].getSuit()+""_""+HandArray[count - target].getCards()[i].getFace());    
        }    
            
        }
    }
}

@7a5f93d54997c9374037384dc45c5c2e@"
"r04631023","6","1.35","124896","@37370c216ea973d68478812f65524d8b@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            Hand[] hands = new Hand[target];
            for (int i = 0 ; i < count; i++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                if (i < target) {
                    hands[i] = new Hand(cardsArray);
                } else {
                    Hand newHand = new Hand(cardsArray) ;
                    for (int j = 0 ; j < target; j++){
                        //System.out.print(hands[j].getCards()) ;
                        if (hands[j].compareTo(newHand) == -1){
                            Hand copyHand = new Hand(hands[j].getCards()) ;
                            hands[j] = newHand ;
                            newHand = copyHand ;
                        }
                    }
                }
            }
            Hand targetHand = hands[0] ;
            for (int i = 1 ; i < target; i++){
                if (hands[i].compareTo(targetHand) == -1){
                            Hand copyHand = hands[i] ;
                            hands[i] = targetHand ;
                            targetHand = copyHand ;
                        }
            }
            Card[] handCards = targetHand.getCards() ;
            String ans = """" ;
            for (int i = 0 ; i < 5 ; i++){
                ans += handCards[i].getSuit() ;
                ans += ""_"" ;
                ans += handCards[i].getFace();
                if (i < 4){
                    ans += "","" ;
                }
            }
            System.out.println(ans) ;
        }
    }
}

@37370c216ea973d68478812f65524d8b@"
"r04631023","6","1.39","127120","@45262a127d84460d3e5f10c00c193279@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            Hand[] hands = new Hand[target];
            for (int i = 0 ; i < count; i++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                if (i < target) {
                    hands[i] = new Hand(cardsArray);
                } else {
                    Hand newHand = new Hand(cardsArray) ;
                    for (int j = 0 ; j < target; j++){
                        //System.out.print(hands[j].getCards()) ;
                        if (hands[j].compareTo(newHand) == -1){
                            Hand copyHand = new Hand(hands[j].getCards()) ;
                            hands[j] = newHand ;
                            newHand = copyHand ;
                        }
                    }
                }
            }
            Hand targetHand = hands[0] ;
            for (int i = 1 ; i < target; i++){
                if (hands[i].compareTo(targetHand) == -1){
                            Hand copyHand = hands[i] ;
                            hands[i] = targetHand ;
                            targetHand = copyHand ;
                        }
            }
            Card[] handCards = targetHand.getCards() ;
            Arrays.sort(handCards);
            String ans = """" ;
            for (int i = 0 ; i < 5 ; i++){
                ans += handCards[i].getSuit() ;
                ans += ""_"" ;
                ans += handCards[i].getFace();
                if (i < 4){
                    ans += "","" ;
                }
            }
            System.out.println(ans) ;
        }
    }
}

@45262a127d84460d3e5f10c00c193279@"
"r04631023","1","0.91","119696","@0ffcc3b1949e981ac3c681c9a3cf3303@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            Hand[] hands = new Hand[target];
            for (int i = 0 ; i < count; i++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                if (i < target) {
                    hands[i] = new Hand(cardsArray);
                } else {
                    Hand newHand = new Hand(cardsArray) ;
                    Arrays.sort(hands);
                    /*
                    for (int j = 0 ; j < target; j++){
                        if (hands[j].compareTo(newHand) == -1){
                            Hand copyHand = new Hand(hands[j].getCards()) ;
                            hands[j] = newHand ;
                            newHand = copyHand ;
                        }
                    }
                            */
                    if (hands[target-1].compareTo(newHand) == -1){
                        hands[target-1] = newHand ;
                    }
                }
            }
            /*
            Hand targetHand = hands[0] ;
            for (int i = 1 ; i < target; i++){
                if (hands[i].compareTo(targetHand) == -1){
                            Hand copyHand = hands[i] ;
                            hands[i] = targetHand ;
                            targetHand = copyHand ;
                        }
            }
                    */
            //Card[] handCards = targetHand.getCards() ;
            Card[] handCards = hands[target-1].getCards() ;
            Arrays.sort(handCards);
            String ans = """" ;
            for (int i = 0 ; i < 5 ; i++){
                ans += handCards[i].getSuit() ;
                ans += ""_"" ;
                ans += handCards[i].getFace();
                if (i < 4){
                    ans += "","" ;
                }
            }
            System.out.println(ans) ;
        }
    }
}

@0ffcc3b1949e981ac3c681c9a3cf3303@"
"r04631023","5","0.95","127552","@32ede65517e7332be2d21f1bd3709b59@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            Hand[] hands = new Hand[target];
            for (int i = 0 ; i < count; i++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                if (i < target) {
                    hands[i] = new Hand(cardsArray);
                } else {
                    Hand newHand = new Hand(cardsArray) ;
                    Arrays.sort(hands);
                    /*
                    for (int j = 0 ; j < target; j++){
                        if (hands[j].compareTo(newHand) == -1){
                            Hand copyHand = new Hand(hands[j].getCards()) ;
                            hands[j] = newHand ;
                            newHand = copyHand ;
                        }
                    }
                            */
                    if (hands[0].compareTo(newHand) == -1){
                        hands[0] = newHand ;
                    }
                }
            }
            /*
            Hand targetHand = hands[0] ;
            for (int i = 1 ; i < target; i++){
                if (hands[i].compareTo(targetHand) == -1){
                            Hand copyHand = hands[i] ;
                            hands[i] = targetHand ;
                            targetHand = copyHand ;
                        }
            }
                    */
            //Card[] handCards = targetHand.getCards() ;
            Card[] handCards = hands[0].getCards() ;
            Arrays.sort(handCards);
            String ans = """" ;
            for (int i = 0 ; i < 5 ; i++){
                ans += handCards[i].getSuit() ;
                ans += ""_"" ;
                ans += handCards[i].getFace();
                if (i < 4){
                    ans += "","" ;
                }
            }
            System.out.println(ans) ;
        }
    }
}

@32ede65517e7332be2d21f1bd3709b59@"
"r04631023","6","0.96","123872","@7408044e79890268830349550a70d0d9@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            Hand[] hands = new Hand[target];
            for (int i = 0 ; i < count; i++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                if (i < target) {
                    hands[i] = new Hand(cardsArray);
                } else {
                    Hand newHand = new Hand(cardsArray) ;
                    Arrays.sort(hands);
                    /*
                    for (int j = 0 ; j < target; j++){
                        if (hands[j].compareTo(newHand) == -1){
                            Hand copyHand = new Hand(hands[j].getCards()) ;
                            hands[j] = newHand ;
                            newHand = copyHand ;
                        }
                    }
                            */
                    if (hands[0].compareTo(newHand) == -1){
                        hands[0] = newHand ;
                    }
                }
            }
            /*
            Hand targetHand = hands[0] ;
            for (int i = 1 ; i < target; i++){
                if (hands[i].compareTo(targetHand) == -1){
                            Hand copyHand = hands[i] ;
                            hands[i] = targetHand ;
                            targetHand = copyHand ;
                        }
            }
                    */
            //Card[] handCards = targetHand.getCards() ;
            Arrays.sort(hands);
            Card[] handCards = hands[0].getCards() ;
            Arrays.sort(handCards);
            String ans = """" ;
            for (int i = 0 ; i < 5 ; i++){
                ans += handCards[i].getSuit() ;
                ans += ""_"" ;
                ans += handCards[i].getFace();
                if (i < 4){
                    ans += "","" ;
                }
            }
            System.out.println(ans) ;
        }
    }
}

@7408044e79890268830349550a70d0d9@"
"r04631023","6","0.96","124144","@ab4dfbdd6d6fe01a0c88c768dbe6466a@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] hands = new Hand[target];
            
            for (int i = 0 ; i < count; i++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                if (i < target) {
                    hands[i] = new Hand(cardsArray) ;
                } else {
                    Arrays.sort(hands) ;
                    Hand newHand = new Hand(cardsArray) ;
                    if (hands[0].compareTo(newHand) == -1){
                        hands[0] = newHand ;
                    }
                }
            }
            
            Arrays.sort(hands);
            Card[] handCards = hands[0].getCards() ;
            Arrays.sort(handCards);
            String ans = """" ;
            for (int i = 0 ; i < 5 ; i++){
                ans += handCards[i].getSuit() ;
                ans += ""_"" ;
                ans += handCards[i].getFace();
                if (i < 4){
                    ans += "","" ;
                }
            }
            System.out.println(ans) ;
        }
    }
}

@ab4dfbdd6d6fe01a0c88c768dbe6466a@"
"r04921074","0","0.39","103296","@88bb1df9e394830e1d05a6bc90ca5659@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            Hand[] HandArray = new Hand[count];
            

            
        for(int i=0; i<count; i++){
            String LineStr = br.readLine();
            String[] cardStr = LineStr.split("","");
            Card[] cardsArray = new Card[5];
            for(int j=0; j<5; j++){
            String[] sep = cardStr[j].split(""_"");
            Card card = new Card(sep[1], sep[0]);
            cardsArray[j] = card;
        //    System.out.println(card.getSuit()+""_""+card.getFace());            
            }
            HandArray[i] = new Hand(cardsArray);
        }
        
        /*Card[] cardsArray1 = new Card[5];
            
            cardsArray1[0] = new Card(""2"", ""Spades"");
            cardsArray1[1] = new Card(""2"", ""Spades"");
            cardsArray1[2] = new Card(""2"", ""Spades"");
            cardsArray1[3] = new Card(""2"", ""Spades"");
            cardsArray1[4] = new Card(""2"", ""Spades"");
            HandArray[4] = new Hand(cardsArray1);
            
        
        for(int a=0; a<5; a++){    
        System.out.println(HandArray[4].getCards()[a].getSuit()+""_""+HandArray[4].getCards()[a].getFace());    
        }*/
        
        Arrays.sort(HandArray);
        
        for(int a=0; a<5; a++){    
        System.out.println(HandArray[count - target].getCards()[a].getSuit()+""_""+HandArray[count - target].getCards()[a].getFace());    
        }
        
        }
    }
}

@88bb1df9e394830e1d05a6bc90ca5659@"
"r04631023","7","0.15","118896","@1d18e13b38cdde095ace7a08613fe898@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ<Hand> pq = new MinPQ<Hand>();
            
            for (int i = 0 ; i < count; i++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                Hand newHand = new Hand(cardsArray) ;
                pq.insert(newHand);
                if (pq.size() > target){
                    pq.delMin() ;
                }
            }
            
            Card[] handCards = pq.delMin().getCards() ;
            Arrays.sort(handCards);
            String ans = """" ;
            for (int i = 0 ; i < 5 ; i++){
                ans += handCards[i].getSuit() ;
                ans += ""_"" ;
                ans += handCards[i].getFace();
                if (i < 4){
                    ans += "","" ;
                }
            }
            System.out.println(ans) ;
        }
    }
}


@1d18e13b38cdde095ace7a08613fe898@"
"b02611016","4","0.38","105616","@ea744299a5e947906dabf8939ea7cac2@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Comparator;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

               int idx = 0;
            int playerCount = count;
            Hand [] playerArray = new Hand[playerCount];

            for(int i=0;i<count;i++) {
              //  String name = in;
    //            Hand player = new Hand;
                //playerArray[idx++] = player;

                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0; j < 5; j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                playerArray[i]=new Hand(cardsArray);
            }

            Arrays.sort(playerArray);
            
            
           Card a[]=playerArray[count-target].getCards();
            Arrays.sort(a);
            for(int i=0;i<5;i++){
            System.out.print(a[i].getSuit());
            System.out.print(""_"");
           System.out.print(a[i].getFace());
           if(i!=4) System.out.print("","");
            }
        }
    }
}

@ea744299a5e947906dabf8939ea7cac2@"
"b02611016","4","0.4","106128","@5f33eb524d3667c3c03598a2ce9ea21a@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Comparator;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
               int idx = 0;
            int playerCount = count;
            Hand [] playerArray = new Hand[playerCount];
            MaxPQ maxpq= new MaxPQ(count);
            for(int i=0;i<count;i++) {
              //  String name = in;
    //            Hand player = new Hand;
                //playerArray[idx++] = player;

                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0; j < 5; j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                playerArray[i]=new Hand(cardsArray);
                maxpq.insert(playerArray[i]);
            }

            //Arrays.sort(playerArray);
            for(int g=0;g<target-1;g++)
            {maxpq.delMax();}
            Hand jjj= (Hand) maxpq.delMax();
            
            Card a[]=jjj.getCards();
           //Card a[]=playerArray[count-target].getCards();
            Arrays.sort(a);
            for(int i=0;i<5;i++){
            System.out.print(a[i].getSuit());
            System.out.print(""_"");
           System.out.print(a[i].getFace());
           if(i!=4) System.out.print("","");
            }
        }
    }

   /* private static void MaxPQ(int count) {
        throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates.
    }*/
}

@5f33eb524d3667c3c03598a2ce9ea21a@"
"b02611016","4","0.37","106064","@d782af199450b89883de4c6be3cf87c3@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Comparator;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
               int idx = 0;
            int playerCount = count;
            //Hand [] playerArray = new Hand[playerCount];
            Hand  playerArray ;
            MaxPQ maxpq= new MaxPQ(count);
            for(int i=0;i<count;i++) {
              //  String name = in;
    //            Hand player = new Hand;
                //playerArray[idx++] = player;

                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0; j < 5; j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                playerArray=new Hand(cardsArray);
                maxpq.insert(playerArray);
            }

            //Arrays.sort(playerArray);
            for(int g=0;g<target-1;g++)
            {maxpq.delMax();}
            Hand jjj= (Hand) maxpq.delMax();
            
            Card a[]=jjj.getCards();
           //Card a[]=playerArray[count-target].getCards();
            Arrays.sort(a);
            for(int i=0;i<5;i++){
            System.out.print(a[i].getSuit());
            System.out.print(""_"");
           System.out.print(a[i].getFace());
           if(i!=4) System.out.print("","");
            }
        }
    }

   /* private static void MaxPQ(int count) {
        throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates.
    }*/
}

@d782af199450b89883de4c6be3cf87c3@"
"b02611016","6","1.01","122096","@4b167b7aea77d32b887604ef1e181ab4@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Comparator;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
               int idx = 0;
            int playerCount = count;
            //Hand [] playerArray = new Hand[playerCount];
            Hand  playerArray ;
            MinPQ minpq= new MinPQ(target);
            for(int i=0;i<count;i++) {
              //  String name = in;
    //            Hand player = new Hand;
                //playerArray[idx++] = player;

                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0; j < 5; j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                playerArray=new Hand(cardsArray);
                if(minpq.size()==target)
                { Hand  c=(Hand)minpq.delMin();
                    if(playerArray.compareTo(c)==1)
                {minpq.insert(playerArray);}
                    else{minpq.insert(c);}
                }
                else{   
                minpq.insert(playerArray);}
            }

            //Arrays.sort(playerArray);
            /*for(int g=0;g<target-1;g++)
            {minpq.delMin();}*/
            Hand jjj= (Hand) minpq.delMin();
            
            Card a[]=jjj.getCards();
           //Card a[]=playerArray[count-target].getCards();
            Arrays.sort(a);
            for(int i=0;i<5;i++){
            System.out.print(a[i].getSuit());
            System.out.print(""_"");
           System.out.print(a[i].getFace());
           if(i!=4) System.out.print("","");
            }
        }
    }

   /* private static void MaxPQ(int count) {
        throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates.
    }*/
}

@4b167b7aea77d32b887604ef1e181ab4@"
"r04631006","0","0","0","@34620c67dcfef3150f83e78948608da5@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(""input.txt""))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            MinPQ<Hand> pq = new MinPQ<Hand>();

            for (int i = 0; i < count; i++) {
                String[] cardStr = br.readLine().split("","");
                Card[] testtt = new Card[5];
                for (int j = 0; j < 5; j++) {

                    String[] handd = cardStr[j].split(""_"");
                    Card card = new Card(handd[1], handd[0]);
                    testtt[j] = card;
                }
                Arrays.sort(testtt);
                Hand test = new Hand(testtt);
                pq.insert(test);

            }
            if (pq.size() > target) {
                pq.delMin();
            }

            Hand out = pq.delMin();
            System.out.println(out.getCards()[0].getSuit() + ""_"" + out.getCards()[0].getFace() + "","" + out.getCards()[1].getSuit() + ""_"" + out.getCards()[1].getFace() + "","" + out.getCards()[2].getSuit() + ""_"" + out.getCards()[2].getFace() + "","" + out.getCards()[3].getSuit() + ""_"" + out.getCards()[3].getFace() + "","" + out.getCards()[4].getSuit() + ""_"" + out.getCards()[4].getFace());

        }
    }
}
@34620c67dcfef3150f83e78948608da5@"
"r04631006","0","0","0","@682b6fcf99cafcd7ea041071e1c7d727@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(""input.txt""))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

//            Card[] testtt = new Card[5];
            MinPQ<Hand> pq = new MinPQ<Hand>();

            for (int i = 0; i < count; i++) {
                String[] cardStr = br.readLine().split("","");
                Card[] testtt = new Card[5];
                for (int j = 0; j < 5; j++) {

                    String[] handd = cardStr[j].split(""_"");
                    Card card = new Card(handd[1], handd[0]);
                    testtt[j] = card;
                }
                Arrays.sort(testtt);
                Hand test = new Hand(testtt);
                pq.insert(test);
                if (pq.size() > target) {
                    pq.delMin();
                }
//                System.out.println(pq.size());
            }

//            for (int i = 0; i < count; i++) {
            Hand out = pq.delMin();
            System.out.println(out.getCards()[0].getSuit() + ""_"" + out.getCards()[0].getFace() + "","" + out.getCards()[1].getSuit() + ""_"" + out.getCards()[1].getFace() + "","" + out.getCards()[2].getSuit() + ""_"" + out.getCards()[2].getFace() + "","" + out.getCards()[3].getSuit() + ""_"" + out.getCards()[3].getFace() + "","" + out.getCards()[4].getSuit() + ""_"" + out.getCards()[4].getFace());
//            }

//            Hand[] hand = new Hand[count];
//            for (int i = 0; i < count; i++) {
//                String[] cardStr = br.readLine().split("","");
//                Card[] testtt = new Card[5];
//                for (int j = 0; j < 5; j++) {
//                    String[] handd = cardStr[j].split(""_"");
//                    Card card = new Card(handd[1], handd[0]);
//                    testtt[j] = card;
//                }
//
//                hand[i] = new Hand(testtt);
//                System.out.println(hand[i].getCards()[0].getFace());
//            }
//            Arrays.sort(hand);
//            System.out.println(hand[3].getCards()[0].getFace());
        }
    }
}

@682b6fcf99cafcd7ea041071e1c7d727@"
"b02611016","6","0.99","115216","@ed9dbeb9e03b09eef43ddcb5fc174ba9@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Comparator;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
               int idx = 0;
            int playerCount = count;
            //Hand [] playerArray = new Hand[playerCount];
            Hand  playerArray ;
            MinPQ minpq= new MinPQ(target);
            for(int i=0;i<count;i++) {
              //  String name = in;
    //            Hand player = new Hand;
                //playerArray[idx++] = player;

                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0; j < 5; j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                playerArray=new Hand(cardsArray);
                if(minpq.size()>=target)
                { Hand c=(Hand)minpq.delMin();
                    if(playerArray.compareTo(c)==1)
                {minpq.insert(playerArray);}
                    else{minpq.insert(c);}
                }
                else{   
                minpq.insert(playerArray);}
            }

            //Arrays.sort(playerArray);
            /*for(int g=0;g<target-1;g++)
            {minpq.delMin();}*/
            Hand jjj= (Hand) minpq.delMin();
            
            Card a[]=jjj.getCards();
           //Card a[]=playerArray[count-target].getCards();
            Arrays.sort(a);
            for(int i=0;i<5;i++){
            System.out.print(a[i].getSuit());
            System.out.print(""_"");
           System.out.print(a[i].getFace());
           if(i!=4) System.out.print("","");
            }
        }
    }

   /* private static void MaxPQ(int count) {
        throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates.
    }*/
}

@ed9dbeb9e03b09eef43ddcb5fc174ba9@"
"b02611016","4","0.41","105376","@5c77de01b6617e666f60515b331cb0c8@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Comparator;

public class HandPQ {
    public static class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards){
      this.cards = cards;
        return;
    }

    // TODO
    public int compareTo(Hand that) {
        int [] this_face=new int[15];
        int [] that_face=new int[15];
        int this_round1=1;
        int that_round1=1;
        int this_round2=0;
        int that_round2=0;
        int this_round3=0;
        int that_round3=0;
        for(int i=0;i<5;i++)
        {
            if(this.cards[i].getFace().equals(""A"")) { this_face[14]=this_face[14]+1;} 
            else if(this.cards[i].getFace().equals(""K"")){this_face[13]=this_face[13]+1;}
            else if(this.cards[i].getFace().equals(""Q"")){this_face[12]=this_face[12]+1;}
            else if(this.cards[i].getFace().equals(""J"")){this_face[11]=this_face[11]+1;}
            else{this_face[Integer.parseInt(this.cards[i].getFace())]=this_face[Integer.parseInt(this.cards[i].getFace())]+1;}
            
        }
     //   for(int i=2;i<15;i++)
      //  {System.out.println(this_face[i]);}
        for(int i=0;i<5;i++)
        {
            if(that.cards[i].getFace().equals(""A"")) { that_face[14]=that_face[14]+1;} 
            else if(that.cards[i].getFace().equals(""K"")){that_face[13]=that_face[13]+1;}
            else if(that.cards[i].getFace().equals(""Q"")){that_face[12]=that_face[12]+1;}
            else if(that.cards[i].getFace().equals(""J"")){that_face[11]=that_face[11]+1;}
            else{that_face[Integer.parseInt(that.cards[i].getFace())]=that_face[Integer.parseInt(that.cards[i].getFace())]+1;}
        }
   //      for(int i=2;i<15;i++)
    //    {System.out.println(that_face[i]);}
  search: for(int j=2;j<15;j++)
        { if(this_face[j]>=2){
            if(this_face[j]==3){for(int k=j+1;k<15;k++)
              {if(this_face[k]==2){this_round1=6;this_round2=j; break search;}
            
              }
             this_round1=2;this_round2=j;
            }
            else{for(int k=j+1;k<15;k++)
              {if(this_face[k]==3){this_round1=6;this_round2=k; break search;}
               else if(this_face[k]==2){this_round1=3;this_round2=k; break search;}
               
              }
             this_round1=2;this_round2=j;
            }
          }
        }
  
 search1: for(int j=2;j<15;j++)
        { if(that_face[j]>=2){
            if(that_face[j]==3){for(int k=j+1;k<15;k++)
              {if(that_face[k]==2){that_round1=6;that_round2=j; break search1;}
              
              }
            that_round1=2;that_round2=j;
            }
            else{for(int k=j+1;k<15;k++)
              {if(that_face[k]==3){that_round1=6;that_round2=k; break search1;}
               else if(that_face[k]==2){that_round1=3;that_round2=k; break search1;}
               
              }
            that_round1=2;that_round2=j;
            }
          }
        }
 search2:for(int j=2;j<11;j++)
        { if(j==2&&this_face[j]==1)
          {if(this_face[14]==1){if(this_face[3]==1&&this_face[4]==1&&this_face[5]==1){this_round1=4;this_round2=5;break search2;}}
           if(this_face[3]==1&&this_face[4]==1&&this_face[5]==1&&this_face[6]==1){this_round1=4;this_round2=6;break search2;}
          }
         else if(j!=2&&this_face[j]==1){if(this_face[j+1]==1&&this_face[j+2]==1&&this_face[j+3]==1&&this_face[j+4]==1){this_round1=4;this_round2=j+4;break search2;}}
        }
 search3:for(int j=2;j<11;j++)
        { if(j==2&&that_face[j]==1)
          {if(that_face[14]==1){if(that_face[3]==1&&that_face[4]==1&&that_face[5]==1){that_round1=4;that_round2=5;break search3;}}
           if(that_face[3]==1&&that_face[4]==1&&that_face[5]==1&&that_face[6]==1){that_round1=4;this_round2=6;break search3;}
          }
         else if(j!=2&&that_face[j]==1){if(that_face[j+1]==1&&that_face[j+2]==1&&that_face[j+3]==1&&that_face[j+4]==1){that_round1=4;that_round2=j+4;break search3;}}
        }
 search4:
         if(this.cards[0].getSuit().equals(this.cards[1].getSuit())&&this.cards[0].getSuit().equals(this.cards[2].getSuit())&&this.cards[0].getSuit().equals(this.cards[3].getSuit())&&this.cards[0].getSuit().equals(this.cards[4].getSuit()))
         {this_round1=5;}
         if(that.cards[0].getSuit().equals(that.cards[1].getSuit())&&that.cards[0].getSuit().equals(that.cards[2].getSuit())&&that.cards[0].getSuit().equals(that.cards[3].getSuit())&&that.cards[0].getSuit().equals(that.cards[4].getSuit()))
         {that_round1=5;}
        // complete this function so the Player can be sorted according to the cards he/she has.
     //if(this.cards[1].getFace().equals(""9"")) {return 1;} 
     //    System.out.println(this_round1);
    //     System.out.println(that_round1);
         
        if(this_round1>that_round1){return 1;}
        if(this_round1<that_round1){return -1;}
        if(this_round1==that_round1&&this_round1==6)
          {if(this_round2>that_round2){return 1;}
           if(this_round2<that_round2){return -1;}
          }
        if(this_round1==that_round1&&this_round1==4)
          {if(this_round2>that_round2){return 1;}
           if(this_round2<that_round2){return -1;}
           if(this_round2==that_round2)
             {if(this_round2==14)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""A""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""A""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                       }
                    }
                }
              else if(this_round2==13)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""K""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""K""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                       }
                    }
                }
              else if(this_round2==12)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""Q""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""Q""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                       }
                    }
                }
              else if(this_round2==11)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""J""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""J""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                       }
                    }
                }
              else
                {for(int i=0;i<5;i++)
                    {if(Integer.parseInt(this.cards[i].getFace())==this_round2)
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                       }
                     if(Integer.parseInt(that.cards[i].getFace())==this_round2)
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                       }
                    }
                }
             if(this_round3>that_round3){return 1;}
             if(this_round3<that_round3){return -1;}
             }
          } 
        if(this_round1==that_round1&&this_round1==5)
          {if(this.cards[0].getFace().equals(""Spades"")) { this_round2=4;} 
           else if(this.cards[0].getSuit().equals(""Hearts"")){this_round2=3;}
           else if(this.cards[0].getSuit().equals(""Diamonds"")){this_round2=2;}
           else if(this.cards[0].getSuit().equals(""Clubs"")){this_round2=1;}
           if(that.cards[0].getFace().equals(""Spades"")) { that_round2=4;} 
           if(that.cards[0].getSuit().equals(""Hearts"")){that_round2=3;}
           if(that.cards[0].getSuit().equals(""Diamonds"")){that_round2=2;}
           if(that.cards[0].getSuit().equals(""Clubs"")){that_round2=1;}
           if(this_round2>that_round2){return 1;}
           if(this_round2<that_round2){return -1;}
           if(this_round2==that_round2)
             {for(int k=14;k>1;k--)
                 {if(this_face[k]==1){this_round3=k;break;}
                 }
              for(int k=14;k>1;k--)
                 {if(that_face[k]==1){that_round3=k;break;}
                 }
              if(this_round3>that_round3){return 1;}
              if(this_round3<that_round3){return -1;}
             } 
          }
        if(this_round1==that_round1&&this_round1==3)
          {if(this_round2>that_round2){return 1;}
           if(this_round2<that_round2){return -1;}
           if(this_round2==that_round2)
             {if(this_round2==14)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""A""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""A""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
            else if(this_round2==13)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""K""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""K""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
              else if(this_round2==12)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""Q""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""Q""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
              else if(this_round2==11)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""J""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""J""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
              else
                {for(int i=0;i<5;i++)
                    {if(Integer.parseInt(this.cards[i].getFace())==this_round2)
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(Integer.parseInt(that.cards[i].getFace())==this_round2)
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
             if(this_round3>that_round3){return 1;}
             if(this_round3<that_round3){return -1;}
             }
          }
        if(this_round1==that_round1&&this_round1==2)    
          {if(this_round2>that_round2){return 1;}
           if(this_round2<that_round2){return -1;}
           if(this_round2==that_round2)
             {if(this_round2==14)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""A""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""A""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
            else if(this_round2==13)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""K""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""K""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
              else if(this_round2==12)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""Q""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""Q""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
              else if(this_round2==11)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""J""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""J""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
              else
                {for(int i=0;i<5;i++)
                    {if(Integer.parseInt(this.cards[i].getFace())==this_round2)
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){if(this_round3<3)this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){if(this_round3<2)this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){if(this_round3<1)this_round3=1;}
                       }
                     if(Integer.parseInt(that.cards[i].getFace())==this_round2)
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){if(that_round3<3)that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){if(that_round3<2)that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){if(that_round3<1)that_round3=1;}
                       }
                    }
                }
             if(this_round3>that_round3){return 1;}
             if(this_round3<that_round3){return -1;}
             }
          }
        if(this_round1==that_round1&&this_round1==1)    
          {for(int k=14;k>1;k--)
                 {if(this_face[k]==1){this_round2=k;break;}
                 }
              for(int k=14;k>1;k--)
                 {if(that_face[k]==1){that_round2=k;break;}
                 }
               if(this_round2>that_round2){return 1;}
               if(this_round2<that_round2){return -1;}
               if(this_round2==that_round2)
                 {if(this_round2==14)
                    {for(int i=0;i<5;i++)
                        {if(this.cards[i].getFace().equals(""A""))
                           {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                            else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                            else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                            else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                           }
                         if(that.cards[i].getFace().equals(""A""))
                            {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                             else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                             else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                             else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                            }
                        }
                    }
                 else if(this_round2==13)
                     {for(int i=0;i<5;i++)
                         {if(this.cards[i].getFace().equals(""K""))
                            {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                             else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                             else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                             else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                            }
                          if(that.cards[i].getFace().equals(""K""))
                            {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                             else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                             else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                             else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                            }
                        }
                     }
              else if(this_round2==12)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""Q""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""Q""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                       }
                    }
                }
              else if(this_round2==11)
                {for(int i=0;i<5;i++)
                    {if(this.cards[i].getFace().equals(""J""))
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                       }
                     if(that.cards[i].getFace().equals(""J""))
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                       }
                    }
                }
              else
                {for(int i=0;i<5;i++)
                    {if(Integer.parseInt(this.cards[i].getFace())==this_round2)
                       {if(this.cards[i].getSuit().equals(""Spades"")) { this_round3=4;} 
                        else if(this.cards[i].getSuit().equals(""Hearts"")){this_round3=3;}
                        else if(this.cards[i].getSuit().equals(""Diamonds"")){this_round3=2;}
                        else if(this.cards[i].getSuit().equals(""Clubs"")){this_round3=1;}
                       }
                     if(Integer.parseInt(that.cards[i].getFace())==this_round2)
                       {if(that.cards[i].getSuit().equals(""Spades"")) { that_round3=4;} 
                        else if(that.cards[i].getSuit().equals(""Hearts"")){that_round3=3;}
                        else if(that.cards[i].getSuit().equals(""Diamonds"")){that_round3=2;}
                        else if(that.cards[i].getSuit().equals(""Clubs"")){that_round3=1;}
                       }
                    }
                }
             if(this_round3>that_round3){return 1;}
             if(this_round3<that_round3){return -1;}
                 }
           
           }
        return 0;
    }

      // Do not modified this function
    public Card[] getCards() { return this.cards; }
    
   
}

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
               int idx = 0;
            int playerCount = count;
            //Hand [] playerArray = new Hand[playerCount];
            Hand  playerArray ;
            MinPQ minpq= new MinPQ(target);
            for(int i=0;i<count;i++) {
              //  String name = in;
    //            Hand player = new Hand;
                //playerArray[idx++] = player;

                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0; j < 5; j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                playerArray=new Hand(cardsArray);
                if(minpq.size()>=target)
                { Hand c=(Hand)minpq.delMin();
                    if(playerArray.compareTo(c)==1)
                {minpq.insert(playerArray);}
                    else{minpq.insert(c);}
                }
                else{   
                minpq.insert(playerArray);}
            }

            //Arrays.sort(playerArray);
            /*for(int g=0;g<target-1;g++)
            {minpq.delMin();}*/
            Hand jjj= (Hand) minpq.delMin();
            
            Card a[]=jjj.getCards();
           //Card a[]=playerArray[count-target].getCards();
            Arrays.sort(a);
            for(int i=0;i<5;i++){
            System.out.print(a[i].getSuit());
            System.out.print(""_"");
           System.out.print(a[i].getFace());
           if(i!=4) System.out.print("","");
            }
        }
    }

   /* private static void MaxPQ(int count) {
        throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates.
    }*/
}

@5c77de01b6617e666f60515b331cb0c8@"
"r04631006","0","0","0","@a1987b2eab69bf1e89d27cfb5bb274f2@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(""input.txt""))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

//            Card[] testtt = new Card[5];
//            Hand[] hand = new Hand[count];
            MinPQ<Hand> pq = new MinPQ<>();

            for (int i = 0; i < count; i++) {
                String[] cardStr = br.readLine().split("","");
                Card[] testtt = new Card[5];
                for (int j = 0; j < 5; j++) {
                    String[] handd = cardStr[j].split(""_"");
                    Card card = new Card(handd[1], handd[0]);
                    testtt[j] = card;
                }
                Arrays.sort(testtt);
                Hand hand = new Hand(testtt);
                pq.insert(hand);
                if (pq.size() > target) {
                    pq.delMin();
                }
            }

            Hand out = pq.delMin();
            System.out.println(out.getCards()[0].getSuit() + ""_"" + out.getCards()[0].getFace() + "","" + out.getCards()[1].getSuit() + ""_"" + out.getCards()[1].getFace() + "","" + out.getCards()[2].getSuit() + ""_"" + out.getCards()[2].getFace() + "","" + out.getCards()[3].getSuit() + ""_"" + out.getCards()[3].getFace() + "","" + out.getCards()[4].getSuit() + ""_"" + out.getCards()[4].getFace());

//            Hand[] hand = new Hand[count];
//            for (int i = 0; i < count; i++) {
//                String[] cardStr = br.readLine().split("","");
//                Card[] testtt = new Card[5];
//                for (int j = 0; j < 5; j++) {
//                    String[] handd = cardStr[j].split(""_"");
//                    Card card = new Card(handd[1], handd[0]);
//                    testtt[j] = card;
//                }
//
//                hand[i] = new Hand(testtt);
//                System.out.println(hand[i].getCards()[0].getFace());
//            }
//            Arrays.sort(hand);
//            System.out.println(hand[3].getCards()[0].getFace());
        }
    }
}

@a1987b2eab69bf1e89d27cfb5bb274f2@"
"r04631006","7","0.141428571428571","120384","@00f9cb9cfe89193d16b46a5a0c57c31a@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

//            Card[] testtt = new Card[5];
//            Hand[] hand = new Hand[count];
            MinPQ<Hand> pq = new MinPQ<>();

            for (int i = 0; i < count; i++) {
                String[] cardStr = br.readLine().split("","");
                Card[] testtt = new Card[5];
                for (int j = 0; j < 5; j++) {
                    String[] handd = cardStr[j].split(""_"");
                    Card card = new Card(handd[1], handd[0]);
                    testtt[j] = card;
                }
                Arrays.sort(testtt);
                Hand hand = new Hand(testtt);
                pq.insert(hand);
                if (pq.size() > target) {
                    pq.delMin();
                }
            }

            Hand out = pq.delMin();
            System.out.println(out.getCards()[0].getSuit() + ""_"" + out.getCards()[0].getFace() + "","" + out.getCards()[1].getSuit() + ""_"" + out.getCards()[1].getFace() + "","" + out.getCards()[2].getSuit() + ""_"" + out.getCards()[2].getFace() + "","" + out.getCards()[3].getSuit() + ""_"" + out.getCards()[3].getFace() + "","" + out.getCards()[4].getSuit() + ""_"" + out.getCards()[4].getFace());

        }
    }
}

@00f9cb9cfe89193d16b46a5a0c57c31a@"
"b02611016","6","0.99","121696","@5458059153f498d349060b7fb0607b99@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Comparator;

public class HandPQ {
    

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
           //    int idx = 0;
         //   int playerCount = count;
            //Hand [] playerArray = new Hand[playerCount];
            Hand  playerArray ;
            MinPQ minpq= new MinPQ(target);
            for(int i=0;i<count;i++) {
              //  String name = in;
    //            Hand player = new Hand;
                //playerArray[idx++] = player;

                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0; j < 5; j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                playerArray=new Hand(cardsArray);
                if(minpq.size()>=target)
                { Hand c=(Hand)minpq.delMin();
                    if(playerArray.compareTo(c)==1||playerArray.compareTo(c)==0)
                {minpq.insert(playerArray);}
                    else{minpq.insert(c);}
                }
                else{   
                minpq.insert(playerArray);}
            }

            //Arrays.sort(playerArray);
            /*for(int g=0;g<target-1;g++)
            {minpq.delMin();}*/
           
            
            Hand jjj= (Hand) minpq.delMin();
            
            Card a[]=jjj.getCards();
           //Card a[]=playerArray[count-target].getCards();
            Arrays.sort(a);
            for(int i=0;i<5;i++){
            System.out.print(a[i].getSuit());
            System.out.print(""_"");
           System.out.print(a[i].getFace());
           if(i!=4) System.out.print("","");
            }
        }
    }

   /* private static void MaxPQ(int count) {
        throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates.
    }*/
}

@5458059153f498d349060b7fb0607b99@"
"b02611016","7","0.141428571428571","121120","@680b3d9a3e66bba37134a9ed444b9865@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Comparator;

public class HandPQ {
    

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
           //    int idx = 0;
         //   int playerCount = count;
            //Hand [] playerArray = new Hand[playerCount];
            Hand  playerArray ;
            MinPQ minpq= new MinPQ(target);
            for(int i=0;i<count;i++) {
              //  String name = in;
    //            Hand player = new Hand;
                //playerArray[idx++] = player;

                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0; j < 5; j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                playerArray=new Hand(cardsArray);
                if(minpq.size()==target)
                { Hand c =(Hand)minpq.min();
                    if(playerArray.compareTo(c)==1||playerArray.compareTo(c)==0)
                {minpq.delMin();
                 minpq.insert(playerArray);}
                }
                else{   
                minpq.insert(playerArray);}
            }

            //Arrays.sort(playerArray);
            /*for(int g=0;g<target-1;g++)
            {minpq.delMin();}*/
           
            
            Hand jjj= (Hand) minpq.delMin();
            
            Card a[]=jjj.getCards();
           //Card a[]=playerArray[count-target].getCards();
            Arrays.sort(a);
            for(int i=0;i<5;i++){
            System.out.print(a[i].getSuit());
            System.out.print(""_"");
           System.out.print(a[i].getFace());
           if(i!=4) System.out.print("","");
            }
        }
    }

   /* private static void MaxPQ(int count) {
        throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates.
    }*/
}

@680b3d9a3e66bba37134a9ed444b9865@"
"b02611028","0","0.84","122704","@bca564602291f658e8bdc1dcb2d0fd3e@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            //MinPQ<Hand> pq=new MinPQ<Hand>();
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] pq = new Hand[target];

            int pqindex = 0;
            for (int i = 0; i < count; i++) {

                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;

                }
                Hand hand = new Hand(cardsArray);

                if (i  < target) {
                    pq[pqindex] = hand;
                    //System.out.print(i);
                } else {
                    //System.out.print(i);
                    /*for (int k = 0; k < 5; k++) {
                        System.out.print(pq[0].getCards()[k].getFace());
                    }
                    for (int k = 0; k < 5; k++) {
                        System.out.print(pq[1].getCards()[k].getFace());
                    }
                    for (int k = 0; k < 5; k++) {
                        System.out.print(pq[2].getCards()[k].getFace());
                    }*/

                    Arrays.sort(pq);
                    if (pq[1].compareTo(hand) == -1) {
                        pq[1] = hand;
                    }
                }
                pqindex += 1;

            }
            Arrays.sort(pq);
            for (int i = 0; i < 5; i++) {
                System.out.print(pq[0].getCards()[i].getSuit()+""_"");
                System.out.print(pq[0].getCards()[i].getFace()+"","");
                
            }
        }
    }
}

@bca564602291f658e8bdc1dcb2d0fd3e@"
"b02611028","2","0.85","127792","@88bf2ddf22d3844eb6e9cdc9bebbbe84@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            //MinPQ<Hand> pq=new MinPQ<Hand>();
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] pq = new Hand[target];

            int pqindex = 0;
            for (int i = 0; i < count; i++) {

                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;

                }
                Hand hand = new Hand(cardsArray);

                if (i  < target) {
                    pq[pqindex] = hand;
                    //System.out.print(i);
                } else {
                    //System.out.print(i);
                    /*for (int k = 0; k < 5; k++) {
                        System.out.print(pq[0].getCards()[k].getFace());
                    }
                    for (int k = 0; k < 5; k++) {
                        System.out.print(pq[1].getCards()[k].getFace());
                    }
                    for (int k = 0; k < 5; k++) {
                        System.out.print(pq[2].getCards()[k].getFace());
                    }*/

                    Arrays.sort(pq);
                    if (pq[1].compareTo(hand) == -1) {
                        pq[1] = hand;
                    }
                }
                pqindex += 1;

            }
            Arrays.sort(pq);
            for (int i = 0; i < 5; i++) {
                System.out.print(pq[0].getCards()[i].getSuit()+""_"");
                if(i==4){
                    System.out.print(pq[0].getCards()[i].getFace());
                }else{
                    System.out.print(pq[0].getCards()[i].getFace()+"","");
                }
                
                
            }
        }
    }
}

@88bf2ddf22d3844eb6e9cdc9bebbbe84@"
"b02611028","6","0.95","124736","@0363a07abf10059da041a1c372762e86@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            //MinPQ<Hand> pq=new MinPQ<Hand>();
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] pq = new Hand[target];

            int pqindex = 0;
            for (int i = 0; i < count; i++) {

                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;

                }
                Hand hand = new Hand(cardsArray);

                if (i  < target) {
                    pq[pqindex] = hand;
                    //System.out.print(i);
                } else {
                    //System.out.print(i);
                    /*for (int k = 0; k < 5; k++) {
                        System.out.print(pq[0].getCards()[k].getFace());
                    }
                    for (int k = 0; k < 5; k++) {
                        System.out.print(pq[1].getCards()[k].getFace());
                    }
                    for (int k = 0; k < 5; k++) {
                        System.out.print(pq[2].getCards()[k].getFace());
                    }*/

                    Arrays.sort(pq);
                    if (pq[0].compareTo(hand) == -1) {
                        pq[0] = hand;
                    }
                }
                pqindex += 1;

            }
            Arrays.sort(pq);
            for (int i = 0; i < 5; i++) {
                System.out.print(pq[0].getCards()[i].getSuit()+""_"");
                if(i==4){
                    System.out.print(pq[0].getCards()[i].getFace());
                }else{
                    System.out.print(pq[0].getCards()[i].getFace()+"","");
                }
                
                
            }
        }
    }
}

@0363a07abf10059da041a1c372762e86@"
"b02611028","6","0.98","118992","@3581407667003b350b20a04caa7c046b@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            MinPQ<Hand> pq = new MinPQ<Hand>();
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            //Hand[] array = new Hand[target];

            for (int i = 0; i < count; i++) {

                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;

                }
                Hand hand = new Hand(cardsArray);

                if (i < target) {
                    pq.insert(hand);

                } else {
                    Hand min = pq.delMin();
                    if (min.compareTo(hand) == -1) {
                        pq.insert(hand);
                    } else {
                        pq.insert(min);
                    }
                }

            }
            Hand min = pq.delMin();
            for (int i = 0; i < 5; i++) {
                System.out.print(min.getCards()[i].getSuit()+""_"");
                if(i==4){
                    System.out.print(min.getCards()[i].getFace());
                }else{
                    System.out.print(min.getCards()[i].getFace()+"","");
                }
                
                
            }

        }
    }
}

@3581407667003b350b20a04caa7c046b@"
"b03611023","0","0.9","118048","@9b9d45426d7a0761b6de61b9b25b9034@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
          //System.out.print(target);
            MinPQ<Hand> pq = new MinPQ<Hand>();
            target = 3;
            Card[] cardsArray = new Card[5];
        for(int j = 0;j<count;j++){            
            String[] cardStr =  br.readLine().split("","");
            for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
            Hand aa = new Hand(cardsArray);
     
            if(pq.size()<target){
                pq.insert(aa);
                
                // System.out.print(pq.size());
            }
            else if(pq.size()>=target){
                if(pq.min().compareTo(aa)==-1){
                    pq.insert(aa);
                    Hand bb = pq.delMin();
                   
                }
                else{ 
                }
            }
        }
        
        Hand ans = pq.delMin();
      
        
        Card[] anw = ans.getCards();
       for(int k = 0;k<5;k++){
            System.out.print(anw[k].getSuit());
            System.out.print(""_"");
            System.out.print(anw[k].getFace());
            System.out.print("",""); 
        }
        }
    }

    
}

@9b9d45426d7a0761b6de61b9b25b9034@"
"b03611033","6","3.01","137584","@e69e059f028dca52498da9bc5f1cb6c4@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            Hand[] playerArray = new Hand[target+1];

            for (int j = 0; j < target+1; j++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                playerArray[j] = hand;
            }
        

        MinPQ<Hand> mpq = new MinPQ<Hand>(playerArray);
        mpq.delMin();
        for (int j = target+1; j < count; j++) {
            Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
            mpq.insert(hand);
            mpq.delMin();
        }

        Card goalcard[] = new Card[5];
        goalcard = mpq.delMin().getCards();
        Arrays.sort(goalcard);

        for (int i = 0; i < 5; i++) {
            StdOut.print(goalcard[i].getSuit() + ""_"" + goalcard[i].getFace());
            if (i == 4) {
                break;
            }
            StdOut.print("","");
        }
    }
}
}
@e69e059f028dca52498da9bc5f1cb6c4@"
"b03611033","7","0.44","143408","@c987ac7f01fc5e46c6ee2ce1007405e2@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ<Hand> mpq = null;
            
            if (target < count) {
                Hand[] playerArray = new Hand[target + 1];

                for (int j = 0; j < target + 1; j++) {
                    Card[] cardsArray = new Card[5];
                    String[] cardStr = br.readLine().split("","");
                    for (int i = 0; i < 5; i++) {
                        String[] sep = cardStr[i].split(""_"");
                        Card card = new Card(sep[1], sep[0]);
                        cardsArray[i] = card;
                    }
                    Hand hand = new Hand(cardsArray);
                    playerArray[j] = hand;
                }

                mpq = new MinPQ<Hand>(playerArray);
                mpq.delMin();
                for (int j = target + 1; j < count; j++) {
                    Card[] cardsArray = new Card[5];
                    String[] cardStr = br.readLine().split("","");
                    for (int i = 0; i < 5; i++) {
                        String[] sep = cardStr[i].split(""_"");
                        Card card = new Card(sep[1], sep[0]);
                        cardsArray[i] = card;
                    }
                    Hand hand = new Hand(cardsArray);
                    mpq.insert(hand);
                    mpq.delMin();
                }
            }
            else{
                Hand[] playerArray = new Hand[target];

                for (int j = 0; j < target; j++) {
                    Card[] cardsArray = new Card[5];
                    String[] cardStr = br.readLine().split("","");
                    for (int i = 0; i < 5; i++) {
                        String[] sep = cardStr[i].split(""_"");
                        Card card = new Card(sep[1], sep[0]);
                        cardsArray[i] = card;
                    }
                    Hand hand = new Hand(cardsArray);
                    playerArray[j] = hand;
                }
                mpq = new MinPQ<Hand>(playerArray);
            }

            Card goalcard[] = new Card[5];
            goalcard = mpq.delMin().getCards();
            Arrays.sort(goalcard);

            for (int i = 0; i < 5; i++) {
                StdOut.print(goalcard[i].getSuit() + ""_"" + goalcard[i].getFace());
                if (i == 4) {
                    break;
                }
                StdOut.print("","");
            }
        }
    }
}

@c987ac7f01fc5e46c6ee2ce1007405e2@"
"b02611028","7","0.142857142857143","121824","@d94dbe183b1791d5dd931abdf3bb9728@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            MinPQ<Hand> pq = new MinPQ<Hand>();
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            //Hand[] array = new Hand[target];

            for (int i = 0; i < count; i++) {

                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;

                }
                Hand hand = new Hand(cardsArray);

                pq.insert(hand);
                if(pq.size()>target)pq.delMin();

            }
            //System.out.print(pq.size());
            Hand min = pq.delMin();
            for (int i = 0; i < 5; i++) {
                System.out.print(min.getCards()[i].getSuit()+""_"");
                if(i==4){
                    System.out.print(min.getCards()[i].getFace());
                }else{
                    System.out.print(min.getCards()[i].getFace()+"","");
                }
                
                
            }

        }
    }
}

@d94dbe183b1791d5dd931abdf3bb9728@"
"b03611033","7","0.427142857142857","147584","@95fcd24bafe1a05e2bece4ab7a22b00b@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int capacity = 0;
            
            if (target == count) capacity = target;
            else  capacity = target + 1;

            Hand[] playerArray = new Hand[capacity];
            for (int j = 0; j < capacity; j++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                playerArray[j] = hand;
            }

            MinPQ<Hand> mpq = new MinPQ<Hand>(playerArray);
            
            if (capacity > target) {
                mpq.delMin();
                for (int j = target + 1; j < count; j++) {
                    Card[] cardsArray = new Card[5];
                    String[] cardStr = br.readLine().split("","");
                    for (int i = 0; i < 5; i++) {
                        String[] sep = cardStr[i].split(""_"");
                        Card card = new Card(sep[1], sep[0]);
                        cardsArray[i] = card;
                    }
                    Hand hand = new Hand(cardsArray);
                    mpq.insert(hand);
                    mpq.delMin();
                }
            }

            Card goalcard[] = new Card[5];
            goalcard = mpq.delMin().getCards();
            Arrays.sort(goalcard);

            for (int i = 0; i < 5; i++) {
                StdOut.print(goalcard[i].getSuit() + ""_"" + goalcard[i].getFace());
                if (i == 4)  break;
                StdOut.print("","");
            }
        }
    }
}

@95fcd24bafe1a05e2bece4ab7a22b00b@"
"b03611033","2","2.49","131664","@671cfa41e6ec77f478a3c321f98be411@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
                     
            Hand[] playerArray = new Hand[target];
            for (int j = 0; j < target; j++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                playerArray[j] = hand;
            }

            MinPQ<Hand> mpq = new MinPQ<Hand>(playerArray);
            
            if (target<count) {
                
                for (int j = target; j < count; j++) {
                    mpq.delMin();
                    Card[] cardsArray = new Card[5];
                    String[] cardStr = br.readLine().split("","");
                    for (int i = 0; i < 5; i++) {
                        String[] sep = cardStr[i].split(""_"");
                        Card card = new Card(sep[1], sep[0]);
                        cardsArray[i] = card;
                    }
                    Hand hand = new Hand(cardsArray);
                    mpq.insert(hand);
                }
            }

            Card goalcard[] = new Card[5];
            goalcard = mpq.delMin().getCards();
            Arrays.sort(goalcard);

            for (int i = 0; i < 5; i++) {
                StdOut.print(goalcard[i].getSuit() + ""_"" + goalcard[i].getFace());
                if (i == 4)  break;
                StdOut.print("","");
            }
        }
    }
}

@671cfa41e6ec77f478a3c321f98be411@"
"r04631034","0","1.33","141520","@5bd5ffef4c227ca78e0b040dbc401f3e@import  java.util.*;
public class HandPQ {

          public static void main(String[] args) throws Exception {

                    In in = new In(args[0]);
                    String line = in.readLine();
                    int N = Integer.valueOf(line.split("","")[0]);
                    int topN = Integer.valueOf(line.split("","")[1]);

//                    Hand[] HandArray = new Hand[N];
                    MinPQ<Hand> pq = new MinPQ<Hand>();
//                    System.out.println(pq.size());
//                    int idx=0;
//                    while ((line = in.readLine()) != null) {
                    for (int count = 0; count < N; count++) {
                              line = in.readLine();
                              Card[] cardsArray = new Card[5];
                              String[] cardStr = line.split("","");
                              for (int i = 0; i < 5; i++) {
                                        Card card = new Card(cardStr[i].split(""_"")[1], cardStr[i].split(""_"")[0]);
                                        cardsArray[i] = card;
                              }
                              Hand hand = new Hand(cardsArray);
//                              HandArray[idx++]=hand;
                              if (pq.size() < topN) {
                                        pq.insert(hand);
//                                        System.out.println(""card "" + (count + 1) + "" : "" + pq.size());
                              } else {
                                        pq.insert(hand);
//                                        System.out.println(""card "" + (count + 1) + "" : "" + pq.size());
                                        pq.delMin();
//                                        System.out.println(""after del size: "" + pq.size());
                              }
                    }
//                    System.out.println(""size: "" + pq.size());
//                    System.out.println("""");

                    Hand out = new Hand(pq.delMin().getCards());
                    MergeX.sort(out.getCards(),Card.SUIT_ORDER);
//                    for (int i = 4; i > -1; i--) {
                    for(int i = 0 ; i<5;i++){                              
                              System.out.print(out.getCards()[i].getSuit() + '_' + out.getCards()[i].getFace());

                              if (i != 0) {
                                        System.out.print("","");
                              } else {
                                        continue;
                              }
                    }
//                    System.out.println("""");
//                                        System.out.println(pq.size());

          }

}

@5bd5ffef4c227ca78e0b040dbc401f3e@"
"r04631034","7","0.19","135152","@8a4485d3a2ca9a255b30b6caa08384fd@import  java.util.*;
public class HandPQ {

          public static void main(String[] args) throws Exception {

                    In in = new In(args[0]);
                    String line = in.readLine();
                    int N = Integer.valueOf(line.split("","")[0]);
                    int topN = Integer.valueOf(line.split("","")[1]);

                    MinPQ<Hand> pq = new MinPQ<Hand>();
//                    System.out.println(pq.size());
//                    int idx=0;
//                    while ((line = in.readLine()) != null) {
                    for (int count = 0; count < N; count++) {
                              line = in.readLine();
                              Card[] cardsArray = new Card[5];
                              String[] cardStr = line.split("","");
                              for (int i = 0; i < 5; i++) {
                                        Card card = new Card(cardStr[i].split(""_"")[1], cardStr[i].split(""_"")[0]);
                                        cardsArray[i] = card;
                              }
                              Hand hand = new Hand(cardsArray);
//                              HandArray[idx++]=hand;
                              if (pq.size() < topN) {
                                        pq.insert(hand);
//                                        System.out.println(""card "" + (count + 1) + "" : "" + pq.size());
                              } else {
                                        pq.insert(hand);
//                                        System.out.println(""card "" + (count + 1) + "" : "" + pq.size());
                                        pq.delMin();
//                                        System.out.println(""after del size: "" + pq.size());
                              }
                    }
//                    System.out.println(""size: "" + pq.size());
//                    System.out.println("""");

                    Hand out = new Hand(pq.delMin().getCards());
                    MergeX.sort(out.getCards(),Card.SUIT_ORDER);
                    
                                  HashMap<String,Integer> map =new HashMap<String,Integer>();
              for(int i =2;i<11;i++){
                        map.put(String.valueOf(i),i);
              }
              map.put(""J"",11);
              map.put(""Q"",12);
              map.put(""K"",13);
              map.put(""A"",14);
              map.put(""Spades"",18);
              map.put(""Hearts"",17);
              map.put(""Diamonds"",16);
              map.put(""Clubs"",15);
                    
                    
               for(int i = 0 ; i < out.getCards().length-1; i++){
                   for(int j = i+1 ; j < out.getCards().length;j++){
                        if(map.get(out.getCards()[i].getFace()) > map.get(out.getCards()[j].getFace()) ) continue;
                        else{
                             String temp_Face=out.getCards()[j].getFace();
                             String temp_Suit=out.getCards()[j].getSuit();
                             out.getCards()[j] = new Card(out.getCards()[i].getFace(),out.getCards()[i].getSuit());
                             out.getCards()[i]= new Card(temp_Face , temp_Suit); 
                        }
                   }
              }
                    
                    
                    
                    for (int i = 4; i > -1; i--) {
//                    for(int i = 0 ; i<5;i++){                              
                              System.out.print(out.getCards()[i].getSuit() + '_' + out.getCards()[i].getFace());
                              
                              if (i != 0) {
                                        System.out.print("","");
                              } else {
                                        continue;
                              }
                    }
//                    System.out.println("""");
//                                        System.out.println(pq.size());

          }

}

@8a4485d3a2ca9a255b30b6caa08384fd@"
"b03611023","0","0.99","117696","@2a6bd9c011c7950219c33c62da9c8711@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){


            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
          //System.out.print(target);
            MinPQ<Hand> pq = new MinPQ<>();
           
            Card[] cardsArray = new Card[5];
        for(int j = 0;j<count;j++){            
            String[] cardStr =  br.readLine().split("","");
            for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
            Hand aa = new Hand(cardsArray);
          
            if(pq.size()<target){
                pq.insert(aa);
            }
            else{
                if(pq.min().compareTo(aa)==-1){
                    Hand bb = pq.delMin();
                    pq.insert(aa);
                }
                else{}
            }
            //System.out.print(pq.size());
            }
        Hand ans = pq.delMin();
        Card[] anss = ans.getCards();
        
        for(int i = 1;i<5;i++){
         for(int j = i;j>0;j--){
             if(anss[j].compareTo(anss[j-1])==-1){
                 Card temp = anss[j-1];
                    anss[j-1] = anss[j];
                    anss[j] = temp;
             }
             else break;
         }
        }
        
      for(int i = 0;i<5;i++){
          System.out.print(anss[i].getSuit());
          System.out.print(""_"");
          System.out.print(anss[i].getFace());
          System.out.print("","");
      }
        
      
        }
    }
}

    


@2a6bd9c011c7950219c33c62da9c8711@"
"b03611023","0","1.03","120144","@05725451b5e3a149cfea5e124fde297f@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){


            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
          //System.out.print(target);
            MinPQ<Hand> pq = new MinPQ<>();
           
            
        for(int j = 0;j<count;j++){            
            String[] cardStr =  br.readLine().split("",""); 
            Card[] cardsArray = new Card[5];
            for(int i = 0; i < 5; i++){
               
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
            Hand aa = new Hand(cardsArray);
        /*    Card[] anss = aa.getCards();
           for(int i = 0;i<5;i++){
          System.out.print(anss[i].getSuit());
          System.out.print(""_"");
          System.out.print(anss[i].getFace());
          System.out.print("","");
      }*/
            if(pq.size()<target){
                pq.insert(aa);
            }
            else{
                if(pq.min().compareTo(aa)==-1){
                    Hand bb = pq.delMin();
                    pq.insert(aa);
                }
                else{}
            }
            //System.out.print(pq.size());
            }
        Hand ans = pq.delMin();
       
        Card[] anss = ans.getCards();
        
        for(int i = 1;i<5;i++){
         for(int j = i;j>0;j--){
             if(anss[j].compareTo(anss[j-1])==-1){
                 Card temp = anss[j-1];
                    anss[j-1] = anss[j];
                    anss[j] = temp;
             }
             else break;
         }
        }
        
      for(int i = 0;i<5;i++){
          System.out.print(anss[i].getSuit());
          System.out.print(""_"");
          System.out.print(anss[i].getFace());
          System.out.print("","");
      }
        
      
        }
    }
}

    


@05725451b5e3a149cfea5e124fde297f@"
"b03611023","7","0.14","117536","@fdaf9dd1025648071161513ad582a0b1@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){


            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
          //System.out.print(target);
            MinPQ<Hand> pq = new MinPQ<>();
           
            
        for(int j = 0;j<count;j++){            
            String[] cardStr =  br.readLine().split("",""); 
            Card[] cardsArray = new Card[5];
            for(int i = 0; i < 5; i++){
               
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
            Hand aa = new Hand(cardsArray);
       
            if(pq.size()<target){
                pq.insert(aa);
            }
            else{
                if(pq.min().compareTo(aa)==-1){
                    Hand bb = pq.delMin();
                    pq.insert(aa);
                }
                else{}
            }
            //System.out.print(pq.size());
            }
        Hand ans = pq.delMin();
       
        Card[] anss = ans.getCards();
        
        for(int i = 1;i<5;i++){
         for(int j = i;j>0;j--){
             if(anss[j].compareTo(anss[j-1])==-1){
                 Card temp = anss[j-1];
                    anss[j-1] = anss[j];
                    anss[j] = temp;
             }
             else break;
         }
        }
        
      for(int i = 0;i<5;i++){
          System.out.print(anss[i].getSuit());
          System.out.print(""_"");
          System.out.print(anss[i].getFace());
          if(i==4) break;
          System.out.print("","");
      }
        
      
        }
    }
}

    


@fdaf9dd1025648071161513ad582a0b1@"
"r04921028","0","0.38","103488","@4312418f93a555f1906a9261a11191d1@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx = 0;
            Hand[] playerArray = new Hand[count];

            for(idx=0;idx<count;idx++){
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
//                    System.out.print(sep[0]+""_""+sep[1]);
//                    if(i!=4){System.out.print("","");} 
                }
//                System.out.println();
                playerArray[idx] = new Hand(cardsArray);
            }
            Arrays.sort(playerArray);
            for(int i=0;i<5;i++){
                System.out.print(playerArray[target - 1].getCards()[i].getFace()+""_""+playerArray[target - 1].getCards()[i].getSuit());
                if(i!=4){System.out.print("","");}
            }
        }
        }
    }

@4312418f93a555f1906a9261a11191d1@"
"r04921028","2","0.3","105600","@387a10aa361faf6eeac7942c9fe20b36@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx = 0;
            Hand[] playerArray = new Hand[count];

            for(idx=0;idx<count;idx++){
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
//                    System.out.print(sep[0]+""_""+sep[1]);
//                    if(i!=4){System.out.print("","");} 
                }
//                System.out.println();
                playerArray[idx] = new Hand(cardsArray);
            }
            Arrays.sort(playerArray);
            for(int i=0;i<5;i++){
                System.out.print(playerArray[target - 2].getCards()[i].getSuit()+""_""+playerArray[target - 2].getCards()[i].getFace());
                if(i!=4){System.out.print("","");}
            }
        }
        }
    }

@387a10aa361faf6eeac7942c9fe20b36@"
"r04921028","0","0.28","105616","@c7adf53361ecd377bf1066908ba5b5db@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx = 0;
            Hand[] playerArray = new Hand[count];

            for(idx=0;idx<count;idx++){
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
//                    System.out.print(sep[0]+""_""+sep[1]);
//                    if(i!=4){System.out.print("","");} 
                }
//                System.out.println();
                playerArray[idx] = new Hand(cardsArray);
            }
            Arrays.sort(playerArray);
            for(int i=0;i<5;i++){
                System.out.print(playerArray[count-target-1].getCards()[i].getSuit()+""_""+playerArray[count-target-1].getCards()[i].getFace());
                if(i!=4){System.out.print("","");}
            }
        }
        }
    }

@c7adf53361ecd377bf1066908ba5b5db@"
"r04921028","4","0.37","105584","@f0b68dab544cec5480de61cdc10eab4b@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx = 0;
            Hand[] playerArray = new Hand[count];

            for(idx=0;idx<count;idx++){
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
//                    System.out.print(sep[0]+""_""+sep[1]);
//                    if(i!=4){System.out.print("","");} 
                }
//                System.out.println();
                playerArray[idx] = new Hand(cardsArray);
            }
            Arrays.sort(playerArray);
            for(int i=0;i<5;i++){
                System.out.print(playerArray[count-target].getCards()[i].getSuit()+""_""+playerArray[count-target].getCards()[i].getFace());
                if(i!=4){System.out.print("","");}
            }
        }
        }
    }

@f0b68dab544cec5480de61cdc10eab4b@"
"b02611012","2","0.88","119200","@64ca1b24fd0d97ad2b17596a49d3d4ef@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ<Hand> pq = new MinPQ<Hand>();

            for (String in = br.readLine(); in != null; in = br.readLine()) {

                Card[] cardsArray = new Card[5];
                //String cards = br.readLine();
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                pq.insert(hand);
                if (pq.size() > target) {
                    pq.delMin();
                }
            }
            Hand anshand = pq.min();
            Arrays.sort(anshand.getCards());
            String ans = """";
            for (int i = 0; i < 5; i++) {
                ans += (anshand.getCards())[i].getSuit();
                ans += (""_"");
                ans += ((anshand.getCards())[i].getFace());
                if (i < 4) {
                    ans += ("","");
                }
            }
            System.out.println(ans);
        }
    }
}

@64ca1b24fd0d97ad2b17596a49d3d4ef@"
"r04631027","0","0.38","103488","@da5a58053c163d44bfd793ca466da0be@


public class Player implements Comparable<Player>{ 

    private Card[] cards = new Card[5];
    private String name;
    public Card[] HighCard = new Card[1] ;
    
    public void HighCard (Card cards) {
        this.HighCard[0] = cards;
    }
     
    // DO NOT MODIFY THIS    
    public Player(String name) {
        this.name = name;
    }
     
    // DO NOT MODIFY THIS
    public String getName() {
        return this.name;
     }
     
    // DO NOT MODIFY THIS
    public void setCards(Card[] cards) {
        this.cards = cards;
    }
    public boolean isFullHouse(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards);
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace()))
                    this.HighCard(Cards[0]) ;
                return true ;
            }
            else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                    this.HighCard(Cards[4]) ;
                    return true ;
                }
            }
        }
        return false ;
    }
    public boolean isFlush(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getSuit().equalsIgnoreCase(Cards[1].getSuit())){
            if(Cards[1].getSuit().equalsIgnoreCase(Cards[2].getSuit())){
                if(Cards[2].getSuit().equalsIgnoreCase(Cards[3].getSuit())){
                 if(Cards[3].getSuit().equalsIgnoreCase(Cards[4].getSuit())){
                        this.HighCard(Cards[4]) ;
            return true ;
                    }
                }
            }
        }
            return false ;
        }
    public boolean isStraight(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
      
        MergeX.sort(Cards);
        Integer[] a1 = new Integer[Cards.length] ;
        for(int i = 0 ; i < 5 ; i++){
            if(Cards[i].getFace().equalsIgnoreCase(""J""))
                a1[i] = 11 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""Q""))
                a1[i] = 12 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""K""))
                a1[i] = 13 ;
            else if(Cards[i].getFace().equalsIgnoreCase(""A""))
                a1[i] = 14 ;
            else
            a1[i] = Integer.parseInt(Cards[i].getFace());            
        }
        if(a1[1]==a1[0]+1){
            if(a1[2] == a1[1]+1){
                if(a1[3]== a1[2]+1){
                    if(a1[4] == a1[3]+1){
                        this.HighCard(Cards[4]) ;
                        return true ;
                    }
                }
            }
        }
        else if(a1[0]==2){
            if(a1[1]==3){
                if(a1[2]==4){
                    if(a1[3]==5){
                        if(a1[4]==14){
                            this.HighCard(Cards[3]) ;
                            return true ;
                        }
                    }
                }
            }
        }
        return false ;
    }
    public boolean isTwoPair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
                this.HighCard(Cards[3]) ;
                return true ;
            }
            else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
       }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
                this.HighCard(Cards[4]) ;
                return true ;
            }
        }
        return false;
    }
    public boolean isOnePair(){
        Card[] Cards = new Card[5] ;
        Cards = this.cards ;
        MergeX.sort(Cards) ;
        if(Cards[0].getFace().equalsIgnoreCase(Cards[1].getFace())){
            this.HighCard(Cards[1]) ;
            return true ;
        }
        else if(Cards[1].getFace().equalsIgnoreCase(Cards[2].getFace())){
            this.HighCard(Cards[2]) ;
            return true ;
        }
        else if(Cards[2].getFace().equalsIgnoreCase(Cards[3].getFace())){
            this.HighCard(Cards[3]) ;
            return true ;
        }
        else if(Cards[3].getFace().equalsIgnoreCase(Cards[4].getFace())){
            this.HighCard(Cards[4]) ;
            return true ;
        }
        
        return false ;
    }
    // TODO 
    public int compareTo(Player that) {
        
//         complete this function so the Player can be sorted according to the cards he/she has.
        
            int[] Points = new int [2] ;
            if(this.isFullHouse())
                Points[0] = 60 ;
            
            else if(this.isFlush())
                Points[0] = 50 ;
            
            else if(this.isStraight())
                Points[0] = 40 ;
            
            else if(this.isTwoPair()){
                Points[0] = 30 ;
            }
            else if(this.isOnePair()){
                Points[0] = 20 ;
            
            }
            else
                Points[0] = 10 ;
            
            
            if(that.isFullHouse())
                Points[1] = 60 ;
            
            else if(that.isFlush())
                Points[1] = 50 ;
            
            else if(that.isStraight())
                Points[1] = 40 ;
            
            else if(that.isTwoPair()){
                Points[1] = 30 ;
            }
            else if(that.isOnePair()){
                Points[1] = 20 ;

    }
            else 
                Points[1] = 10 ;
            
//            System.out.println(Points[0]+"" ""+Points[1] ) ;
            
            if(Points[0]>Points[1])
                return 1 ;
            else if(Points[0]<Points[1])
                return -1 ;
            
            else if(Points[0]==Points[1])
            if(Points[0] == 10){
                MergeX.sort(this.cards);
                MergeX.sort(that.cards);
                this.HighCard(this.cards[4]) ;
                that.HighCard(that.cards[4]) ;
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
                }
            else 
                return(this.HighCard[0].compareTo(that.HighCard[0])) ;
            return 0 ;
    }
   
     public static void main(String[] args) {
         In in = new In(args[0]);
         String line = in.readLine();
         int players = Integer.parseInt(line.split("","")[0]);
         int win =Integer.parseInt(line.split("","")[1]);
         int playercount=0;
        
         Player[] a = new Player[players] ;
         for(int i=0;i<players;i++){
             a[i] = new Player(String.valueOf(i));
         }
          Player[] winn = new Player[win] ;
         for(int i=0;i<win;i++){
             winn[i] = new Player(String.valueOf(i));
         }
         
         while((line = in.readLine())!=null)
         {
           //  line = in.readLine();
             Card[] cards =new Card[5];
             String[] five = new String[5];
             five = line.split("","");
             cards[0] = new Card(five[0].split(""_"")[1],five[0].split(""_"")[0]);
             cards[1] = new Card(five[1].split(""_"")[1],five[1].split(""_"")[0]);
             cards[2] = new Card(five[2].split(""_"")[1],five[2].split(""_"")[0]);
             cards[3] = new Card(five[3].split(""_"")[1],five[3].split(""_"")[0]);
             cards[4] = new Card(five[4].split(""_"")[1],five[4].split(""_"")[0]);
             a[playercount].setCards(cards);  
            // System.out.println(playercount);
             if(playercount<win)
             {winn[playercount] = a[playercount];}
             else
             { MergeX.sort(winn);
             int uccu =a[playercount].compareTo(winn[0]);
             if(uccu==1)
             {winn[win-1]=a[playercount];}
             }
             playercount++;        
             
              
         }
        // MergeX.sort(winn[win-1].cards);
       System.out.println(winn[0].cards[0].getSuit()+""_""+winn[0].cards[0].getFace()+"",""+winn[0].cards[1].getSuit()+""_""+winn[0].cards[1].getFace()+"",""+winn[0].cards[2].getSuit()+""_""+winn[0].cards[2].getFace()+"",""+winn[0].cards[3].getSuit()+""_""+winn[0].cards[3].getFace()+"",""+winn[0].cards[4].getSuit()+""_""+winn[0].cards[4].getFace());
      
         //MergeX.sort(a);
    // Player[] c = new Player[2];
     //c[0] = new Player(""John Cena"") ;
     //c[1] = new Player(""undertaker"") ;
     //Card[] fuck = new Card[5];
     //Card[] fuck1 = new Card[5] ;
     
     
     //fuck1[0] = new Card(""4"",""Spades"") ;
     //fuck1[1] = new Card(""K"",""Hearts"") ;
     //fuck1[2] = new Card(""J"",""Clubs"") ;
     //fuck1[3] = new Card(""3"",""Spades"") ;
     //fuck1[4] = new Card(""Q"",""Hearts"") ;
     //c[1].setCards(fuck1);
     //c[0].setCards(fuck1);
     //MergeX.sort(c);
//     for (int i = 0 ; i < 5 ; i++){
 //    
//     System.out.println(a[1].cards[i].getFace());
//     }
//     System.out.println(a[0].compareTo(a[1]));
//     System.out.println(a[1].HighCard[0].compareTo(a[0].HighCard[0]));
}
}


@da5a58053c163d44bfd793ca466da0be@"
"b02611012","0","0.37","106112","@07ae05e06fa6e7538155af56fbe3badd@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ<Hand> pq = new MinPQ<Hand>();
            //(str = br.readLine())!= null
            String str = null;
            while ((str = br.readLine()) != null) {

                Card[] cardsArray = new Card[5];
                //String cards = br.readLine();
                String[] cardStr = str.split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                pq.insert(hand);
//                if (pq.size() > target) {
//                    pq.delMin();
//                }
            }
            System.out.println(pq.size());
            Hand anshand = pq.min();
            Arrays.sort(anshand.getCards());
            String ans = """";
            for (int i = 0; i < 5; i++) {
                ans += (anshand.getCards())[i].getSuit();
                ans += (""_"");
                ans += ((anshand.getCards())[i].getFace());
                if (i < 4) {
                    ans += ("","");
                }
            }
            System.out.println(ans);
        }
    }
}

@07ae05e06fa6e7538155af56fbe3badd@"
"b02611012","1","0.39","105744","@8ab290ee67228fabbdf1c86719a2a533@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ<Hand> pq = new MinPQ<Hand>();
            //(str = br.readLine())!= null
            String str = null;
            while ((str = br.readLine()) != null) {

                Card[] cardsArray = new Card[5];
                //String cards = br.readLine();
                String[] cardStr = str.split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                pq.insert(hand);
//                if (pq.size() > target) {
//                    pq.delMin();
//                }
            }
            //System.out.println(pq.size());
            Hand anshand = pq.min();
            Arrays.sort(anshand.getCards());
            String ans = """";
            for (int i = 0; i < 5; i++) {
                ans += (anshand.getCards())[i].getSuit();
                ans += (""_"");
                ans += ((anshand.getCards())[i].getFace());
                if (i < 4) {
                    ans += ("","");
                }
            }
            System.out.println(ans);
        }
    }
}

@8ab290ee67228fabbdf1c86719a2a533@"
"b02611012","7","0.142857142857143","121760","@b76f47a72b4673e9c5e5ee659e4912be@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ<Hand> pq = new MinPQ<Hand>();
            //(str = br.readLine())!= null
            String str = null;
            while ((str = br.readLine()) != null) {

                Card[] cardsArray = new Card[5];
                //String cards = br.readLine();
                String[] cardStr = str.split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                pq.insert(hand);
                if (pq.size() > target) {
                    pq.delMin();
                }
            }
            //System.out.println(pq.size());
            Hand anshand = pq.min();
            Arrays.sort(anshand.getCards());
            String ans = """";
            for (int i = 0; i < 5; i++) {
                ans += (anshand.getCards())[i].getSuit();
                ans += (""_"");
                ans += ((anshand.getCards())[i].getFace());
                if (i < 4) {
                    ans += ("","");
                }
            }
            System.out.println(ans);
        }
    }
}

@b76f47a72b4673e9c5e5ee659e4912be@"
"r04546014","4","0.39","100240","@9068751e67af2441bcdb757d89b92fd0@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] hand = new Hand[count];//訂出幾個人
            Card[] card;//紀錄每一張牌
            
            MinPQ<Hand> pqMin = new MinPQ(target+1);
            MaxPQ<Hand> pqMax = new MaxPQ();

            for (int i = 0; i < count; i++) {
                String[] PlayerHand = br.readLine().split("","");//讀每一個player的手牌     
                card = new Card[5];
                for (int j = 0; j < 5; j++) {
                    String[] sf = PlayerHand[j].split(""_"");//讀每一張排的花色和數字
                    card[j] = new Card(sf[1], sf[0]);
                }
                hand[i] = new Hand(card);
                if (count - target >= count / 2) {
                    pqMin.insert(hand[i]);
                    if(pqMin.size()>target) pqMin.delMin();
                }
                if (count - target < count / 2) {
                    pqMax.insert(hand[i]);
                    if(pqMax.size()>count-target+1) pqMax.delMax();
                }
            }    
            Card[] answer=null;
            if (count - target >= count / 2) {
                    answer = pqMin.delMin().getCards();            
            }                
                if (count - target < count / 2) {
                    answer = pqMax.delMax().getCards();            
            }
                for (int i = 0; i < 5; i++) {
                System.out.print(answer[i].getSuit() + ""_"" + answer[i].getFace());
                if (i < 4) {
                    System.out.print("","");
                }
            }
        }
    }
}
@9068751e67af2441bcdb757d89b92fd0@"
"r04546014","4","0.38","106128","@258abf185365676900d80584893ac337@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] hand = new Hand[count];//訂出幾個人
            Card[][]card = new Card[count][];//紀錄每一張牌
            MinPQ<Hand> pq = new MinPQ(target+1);
            for (int i = 0; i < count; i++) {
                String[] PlayerHand = br.readLine().split("","");//讀每一個player的手牌     
                card[i]=new Card[5];
                for (int j = 0; j < 5; j++) {
                    String[] sf = PlayerHand[j].split(""_"");//讀每一張排的花色和數字
                    card[i][j] = new Card(sf[1], sf[0]);
                }
                hand[i] = new Hand(card[i]);
                pq.insert(hand[i]);
                if (pq.size() > target) {
                    pq.delMin();
                }
            }
            Card[] answer=pq.delMin().getCards();
            for(int i=0;i<5;i++){
                System.out.print(answer[i].getSuit()+""_""+answer[i].getFace());
                if(i<4) System.out.print("","");
            }
        }
    }
}
@258abf185365676900d80584893ac337@"
"r04631027","1","0.37","112592","@1614efaa3e9441096bd3319841c3a4c4@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

       
         In in = new In(args[0]);
         String line = in.readLine();
         int players = Integer.parseInt(line.split("","")[0]);
         int win =Integer.parseInt(line.split("","")[1]);
         int playercount=0;
        
         Hand[] a = new Hand[players] ;
       //  for(int i=0;i<players;i++){
         //    a[i] = new Hand(String.valueOf(i));
         //}
          Hand[] winn = new Hand[win] ;
         //for(int i=0;i<win;i++){
           //  winn[i] = new Player(String.valueOf(i));
        // }
         
         while((line = in.readLine())!=null)
         {
           //  line = in.readLine();
             Card[] cards =new Card[5];
             String[] five = new String[5];
             five = line.split("","");
             cards[0] = new Card(five[0].split(""_"")[1],five[0].split(""_"")[0]);
             cards[1] = new Card(five[1].split(""_"")[1],five[1].split(""_"")[0]);
             cards[2] = new Card(five[2].split(""_"")[1],five[2].split(""_"")[0]);
             cards[3] = new Card(five[3].split(""_"")[1],five[3].split(""_"")[0]);
             cards[4] = new Card(five[4].split(""_"")[1],five[4].split(""_"")[0]);
             a[playercount] = new Hand(cards);
            // a[playercount].setCards(cards);  
            // System.out.println(playercount);
             if(playercount<win)
             {winn[playercount] = a[playercount];}
             else
             { MergeX.sort(winn);
             int uccu =a[playercount].compareTo(winn[0]);
             if(uccu==1)
             {winn[win-1]=a[playercount];}
             }
             playercount++;        
             
              
         }
        winn[1].getCards()[0].getFace();
        // MergeX.sort(winn[win-1].cards);
       System.out.println(winn[0].getCards()[0].getSuit()+""_""+winn[0].getCards()[0].getFace()+"",""+winn[0].getCards()[1].getSuit()+""_""+winn[0].getCards()[1].getFace()+"",""+winn[0].getCards()[2].getSuit()+""_""+winn[0].getCards()[2].getFace()+"",""+winn[0].getCards()[3].getSuit()+""_""+winn[0].getCards()[3].getFace()+"",""+winn[0].getCards()[4].getSuit()+""_""+winn[0].getCards()[4].getFace());
      
         //MergeX.sort(a);
    // Player[] c = new Player[2];
     //c[0] = new Player(""John Cena"") ;
     //c[1] = new Player(""undertaker"") ;
     //Card[] fuck = new Card[5];
     //Card[] fuck1 = new Card[5] ;
     
     
     //fuck1[0] = new Card(""4"",""Spades"") ;
     //fuck1[1] = new Card(""K"",""Hearts"") ;
     //fuck1[2] = new Card(""J"",""Clubs"") ;
     //fuck1[3] = new Card(""3"",""Spades"") ;
     //fuck1[4] = new Card(""Q"",""Hearts"") ;
     //c[1].setCards(fuck1);
     //c[0].setCards(fuck1);
     //MergeX.sort(c);
//     for (int i = 0 ; i < 5 ; i++){
 //    
//     System.out.println(a[1].cards[i].getFace());
//     }
//     System.out.println(a[0].compareTo(a[1]));
//     System.out.println(a[1].HighCard[0].compareTo(a[0].HighCard[0]));
}
    }


@1614efaa3e9441096bd3319841c3a4c4@"
"r04631027","3","0.39","112352","@545329a701ac2768faa194de7bd134ea@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

       try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int count1 = count ;
            MaxPQ show = new MaxPQ() ;
            MinPQ show1 = new MinPQ() ;
            Hand[] players = new Hand[1] ;
            int counter = 0 ;
            while(count != 0){
                String[] owncard = br.readLine().split("","") ;
                Card[] cards = new Card[5] ;
                for(int i = 0 ; i < 5 ; i++ ){
                    String[] eachcard = owncard[i].split(""_"");
                    cards[i] = new Card( eachcard[1] , eachcard[0] ) ;                    
//                    System.out.println(cards[i].getFace() + """" +cards[i].getSuit());
                }
                players[0] = new Hand(cards) ;
                show1.insert(players[0]);
                if(show1.size()>target)
                    show1.delMin();
//                owncard[count].split(""_"") ;
//                System.out.println(owncard) ;
                count -- ;
                counter ++ ;
            }
            while(show1.size()-target!= 0){
                show.insert(show1.delMin());
            }
            Hand finalans = Hand.class.cast(show1.delMin()) ;
            Card[] fina = finalans.getCards() ;
//            Class clax = show1.delMin().getClass().asSubclass(null);
////            Hand[] finalshow = clax.cast(show1.delMin()) ;
//            Hand ff = clax.cast(show1.delMin()) ;
//            System.out.println( finalans) ;
            
//            for(int i = 0 ; i <count1 ; i++){
//                if(answer1.equals(players[i]))
                    for(int j = 0 ; j < 5 ; j++){
                    System.out.print(fina[j].getSuit()+
                            ""_""+
                            fina[j].getFace());
                    if(j!=4)
                        System.out.print("","") ;
                    
                    }
//            }
//            
//            while(target!=1){
//                show.delMax();
//                target-- ;
//            }
//         Object answer = show.delMax();
//         for(int i= 0 ; i < count1 ; i++){
//            if(answer.equals(players[i]))
//              for(int j = 0 ; j < 5 ; j++){
//                    System.out.print(players[i].getCards()[j].getSuit()+
//                            ""_""+
//                            players[i].getCards()[j].getFace()) ;
//                    if(j!=4)
//                        System.out.print("","") ;
//                }
//        }
        }
         In in = new In(args[0]);
         String line = in.readLine();
         int players = Integer.parseInt(line.split("","")[0]);
         int win =Integer.parseInt(line.split("","")[1]);
         int playercount=0;
        
         Hand[] a = new Hand[players] ;
       //  for(int i=0;i<players;i++){
         //    a[i] = new Hand(String.valueOf(i));
         //}
          Hand[] winn = new Hand[win] ;
         //for(int i=0;i<win;i++){
           //  winn[i] = new Player(String.valueOf(i));
        // }
         
         while((line = in.readLine())!=null)
         {
           //  line = in.readLine();
             Card[] cards =new Card[5];
             String[] five = new String[5];
             five = line.split("","");
             cards[0] = new Card(five[0].split(""_"")[1],five[0].split(""_"")[0]);
             cards[1] = new Card(five[1].split(""_"")[1],five[1].split(""_"")[0]);
             cards[2] = new Card(five[2].split(""_"")[1],five[2].split(""_"")[0]);
             cards[3] = new Card(five[3].split(""_"")[1],five[3].split(""_"")[0]);
             cards[4] = new Card(five[4].split(""_"")[1],five[4].split(""_"")[0]);
             a[playercount] = new Hand(cards);
            // a[playercount].setCards(cards);  
            // System.out.println(playercount);
             if(playercount<win)
             {winn[playercount] = a[playercount];}
             else
             { MergeX.sort(winn);
             int uccu =a[playercount].compareTo(winn[0]);
             if(uccu==1)
             {winn[win-1]=a[playercount];}
             }
             playercount++;        
             
              
         }
        winn[1].getCards()[0].getFace();
        // MergeX.sort(winn[win-1].cards);
     //  System.out.println(winn[0].getCards()[0].getSuit()+""_""+winn[0].getCards()[0].getFace()+"",""+winn[0].getCards()[1].getSuit()+""_""+winn[0].getCards()[1].getFace()+"",""+winn[0].getCards()[2].getSuit()+""_""+winn[0].getCards()[2].getFace()+"",""+winn[0].getCards()[3].getSuit()+""_""+winn[0].getCards()[3].getFace()+"",""+winn[0].getCards()[4].getSuit()+""_""+winn[0].getCards()[4].getFace());
      
         //MergeX.sort(a);
    // Player[] c = new Player[2];
     //c[0] = new Player(""John Cena"") ;
     //c[1] = new Player(""undertaker"") ;
     //Card[] fuck = new Card[5];
     //Card[] fuck1 = new Card[5] ;
     
     
     //fuck1[0] = new Card(""4"",""Spades"") ;
     //fuck1[1] = new Card(""K"",""Hearts"") ;
     //fuck1[2] = new Card(""J"",""Clubs"") ;
     //fuck1[3] = new Card(""3"",""Spades"") ;
     //fuck1[4] = new Card(""Q"",""Hearts"") ;
     //c[1].setCards(fuck1);
     //c[0].setCards(fuck1);
     //MergeX.sort(c);
//     for (int i = 0 ; i < 5 ; i++){
 //    
//     System.out.println(a[1].cards[i].getFace());
//     }
//     System.out.println(a[0].compareTo(a[1]));
//     System.out.println(a[1].HighCard[0].compareTo(a[0].HighCard[0]));
}
    }


@545329a701ac2768faa194de7bd134ea@"
"r04631027","7","0.171428571428571","131920","@dc300f2c1661f5474d4b6afdc3397c4a@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

       try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int count1 = count ;
            MaxPQ show = new MaxPQ() ;
            MinPQ show1 = new MinPQ() ;
            Hand[] players = new Hand[1] ;
            int counter = 0 ;
            while(count != 0){
                String[] owncard = br.readLine().split("","") ;
                Card[] cards = new Card[5] ;
                for(int i = 0 ; i < 5 ; i++ ){
                    String[] eachcard = owncard[i].split(""_"");
                    cards[i] = new Card( eachcard[1] , eachcard[0] ) ;                    
//                    System.out.println(cards[i].getFace() + """" +cards[i].getSuit());
                }
                players[0] = new Hand(cards) ;
                show1.insert(players[0]);
                if(show1.size()>target)
                    show1.delMin();
//                owncard[count].split(""_"") ;
//                System.out.println(owncard) ;
                count -- ;
                counter ++ ;
            }
            while(show1.size()-target!= 0){
                show.insert(show1.delMin());
            }
            Hand finalans = Hand.class.cast(show1.delMin()) ;
            Card[] fina = finalans.getCards() ;
//            Class clax = show1.delMin().getClass().asSubclass(null);
////            Hand[] finalshow = clax.cast(show1.delMin()) ;
//            Hand ff = clax.cast(show1.delMin()) ;
//            System.out.println( finalans) ;
            
//            for(int i = 0 ; i <count1 ; i++){
//                if(answer1.equals(players[i]))
                    for(int j = 0 ; j < 5 ; j++){
                    System.out.print(fina[j].getSuit()+
                            ""_""+
                            fina[j].getFace());
                    if(j!=4)
                        System.out.print("","") ;
                    
                    }
//            }
//            
//            while(target!=1){
//                show.delMax();
//                target-- ;
//            }
//         Object answer = show.delMax();
//         for(int i= 0 ; i < count1 ; i++){
//            if(answer.equals(players[i]))
//              for(int j = 0 ; j < 5 ; j++){
//                    System.out.print(players[i].getCards()[j].getSuit()+
//                            ""_""+
//                            players[i].getCards()[j].getFace()) ;
//                    if(j!=4)
//                        System.out.print("","") ;
//                }
//        }
        }
         In in = new In(args[0]);
         String line = in.readLine();
         int players = Integer.parseInt(line.split("","")[0]);
         int win =Integer.parseInt(line.split("","")[1]);
         int playercount=0;
        
         Hand[] a = new Hand[players] ;
       //  for(int i=0;i<players;i++){
         //    a[i] = new Hand(String.valueOf(i));
         //}
          Hand[] winn = new Hand[win] ;
         //for(int i=0;i<win;i++){
           //  winn[i] = new Player(String.valueOf(i));
        // }
         
        
//     System.out.println(a[1].HighCard[0].compareTo(a[0].HighCard[0]));
}
    }


@dc300f2c1661f5474d4b6afdc3397c4a@"
"r04546014","7","0.141428571428571","118864","@db7fb0109a01edaf6631f4d88a2fef4d@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
           // Hand[] hand = new Hand[count];//訂出幾個人
            Card[] card;//紀錄每一張牌
            
            MinPQ<Hand> pqMin = new MinPQ();
            MaxPQ<Hand> pqMax = new MaxPQ();

            for (int i = 0; i < count; i++) {
                String[] PlayerHand = br.readLine().split("","");//讀每一個player的手牌     
                card = new Card[5];
                for (int j = 0; j < 5; j++) {
                    String[] sf = PlayerHand[j].split(""_"");//讀每一張排的花色和數字
                    card[j] = new Card(sf[1], sf[0]);
                }
                Hand hand= new Hand(card);
                if (count - target >= count / 2) {
                    pqMin.insert(hand);
                    if(pqMin.size()>target) pqMin.delMin();
                }
                if (count - target < count / 2) {
                    pqMax.insert(hand);
                    if(pqMax.size()>count-target+1) pqMax.delMax();
                }
            }    
            Card[] answer=null;
            if (count - target >= count / 2) {
                    answer = pqMin.delMin().getCards();            
            }                
                if (count - target < count / 2) {
                    answer = pqMax.delMax().getCards();            
            }
                for (int i = 0; i < 5; i++) {
                System.out.print(answer[i].getSuit() + ""_"" + answer[i].getFace());
                if (i < 4) {
                    System.out.print("","");
                }
            }
        }
    }
}
@db7fb0109a01edaf6631f4d88a2fef4d@"
"b03106003","0","0.98","117344","@fb3cab5a9093cb93c76b18e7345f812e@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            MinPQ<Hand> minPQ= new MinPQ<Hand>();
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);           
            int idx = 0;
            //Hand[] handArray = new Hand[count];
            for(int j = 0; j < count; j++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand;
                hand = new Hand(cardsArray);
                //handArray[idx++] = hand;
                minPQ.insert(hand);
                if(minPQ.size()> target){
                 
                    minPQ.delMin();
                }
                
            }
            Hand hand;
            hand = minPQ.min();
            for(int i = 0; i<hand.getCards().length ; i++){
            System.out.print(hand.getCards()[i].getSuit()+""_""+hand.getCards()[i].getFace() + "","");
            }
        }
    }
}

@fb3cab5a9093cb93c76b18e7345f812e@"
"b03106003","7","0.148571428571429","116000","@139f5e8bda8e9955ed973678362d13cf@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            MinPQ<Hand> minPQ= new MinPQ<Hand>();
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);           
            int idx = 0;
            //Hand[] handArray = new Hand[count];
            for(int j = 0; j < count; j++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand;
                hand = new Hand(cardsArray);
                //handArray[idx++] = hand;
                minPQ.insert(hand);
                if(minPQ.size()> target){
                 
                    minPQ.delMin();
                }
                
            }
            Hand hand;
            hand = minPQ.min();
            for(int i = 0; i<hand.getCards().length ; i++){
            System.out.print(hand.getCards()[i].getSuit()+""_""+hand.getCards()[i].getFace());
                if(i != hand.getCards().length-1){System.out.print("","");}
            }
        }
    }
}

@139f5e8bda8e9955ed973678362d13cf@"
"r04921044","4","0.37","105632","@f4daa5302c5242e3daa439b5d81c346b@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.*;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader buffer = new BufferedReader(new FileReader(args[0]))){

            String[] params = buffer.readLine().split("","");
            int count = Integer.parseInt(params[0]);
            int target = Integer.parseInt(params[1]);

            ArrayList<Hand> hands = new ArrayList<> ();

            for (int i=0; i<count; ++i) {
                String[] cardsString = buffer.readLine().split("","");
                Card[] cards = new Card[5];

                for (int j=0; j<5; ++j) {
                    String[] suitAndFace = cardsString[j].split(""_"");
                    cards[j] = new Card(suitAndFace[1], suitAndFace[0]);
                }

                hands.add(new Hand(cards));
            }

            Collections.sort(hands);

            Card[] cards = hands.get(hands.size()-target).getCards();
            for (int i=0; i<4; ++i) {
                System.out.print(cards[i].getSuit() + ""_"" + cards[i].getFace() + "","");
            }
            System.out.print(cards[4].getSuit() + ""_"" + cards[4].getFace());

            System.out.println();
        }
    }
}

@f4daa5302c5242e3daa439b5d81c346b@"
"r04921044","0","0","0","@9e728168c2f26c6e631762dc4880a023@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.*;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader buffer = new BufferedReader(new FileReader(args[0]))){

            String[] params = buffer.readLine().split("","");
            int count = Integer.parseInt(params[0]);
            int target = Integer.parseInt(params[1]);

            // ArrayList<Hand> hands = new ArrayList<> ();
            PriorityQueue<Hand> hands = new PriorityQueue<> (count);

            for (int i=0; i<count; ++i) {
                String[] cardsString = buffer.readLine().split("","");
                Card[] cards = new Card[5];

                for (int j=0; j<5; ++j) {
                    String[] suitAndFace = cardsString[j].split(""_"");
                    cards[j] = new Card(suitAndFace[1], suitAndFace[0]);
                }

                hands.add(new Hand(cards));
            }

            // Collections.sort(hands);

            // Card[] cards = hands.get(hands.size()-target).getCards();

            Card[] cards = new Card[5];
            Hand hand = new Hand(cards);
            for (int i=0; i<count-target+1; ++i) {
                hand = hands.poll();
            }
            cards = hand.getCards();

            for (int i=0; i<4; ++i) {
                System.out.print(cards[i].getSuit() + ""_"" + cards[i].getFace() + "","");
            }
            System.out.print(cards[4].getSuit() + ""_"" + cards[4].getFace());

            System.out.println();
        }
    }
}

@9e728168c2f26c6e631762dc4880a023@"
"r04921074","4","0.38","103440","@5569a5a04a15c0626c3272ec8ac9c8ab@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            Hand[] HandArray = new Hand[count];
            

            
        for(int i=0; i<count; i++){
            String LineStr = br.readLine();
            String[] cardStr = LineStr.split("","");
            Card[] cardsArray = new Card[5];
            for(int j=0; j<5; j++){
            String[] sep = cardStr[j].split(""_"");
            Card card = new Card(sep[1], sep[0]);
            cardsArray[j] = card;
        //    System.out.println(card.getSuit()+""_""+card.getFace());            
            }
            HandArray[i] = new Hand(cardsArray);
        }
        
        /*Card[] cardsArray1 = new Card[5];
            
            cardsArray1[0] = new Card(""2"", ""Spades"");
            cardsArray1[1] = new Card(""2"", ""Spades"");
            cardsArray1[2] = new Card(""2"", ""Spades"");
            cardsArray1[3] = new Card(""2"", ""Spades"");
            cardsArray1[4] = new Card(""2"", ""Spades"");
            HandArray[4] = new Hand(cardsArray1);
            
        
        for(int a=0; a<5; a++){    
        System.out.println(HandArray[4].getCards()[a].getSuit()+""_""+HandArray[4].getCards()[a].getFace());    
        }*/
        
        Arrays.sort(HandArray);
        
        for(int a=0; a<5; a++){    
        System.out.print(HandArray[count - target].getCards()[a].getSuit()+""_""+HandArray[count - target].getCards()[a].getFace());
        if(a<4)System.out.print("","");
        }
        
        }
    }
}

@5569a5a04a15c0626c3272ec8ac9c8ab@"
"r04921044","5","1","116896","@03ef495b7c60c81a822e4a28e9b76d52@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.*;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader buffer = new BufferedReader(new FileReader(args[0]))){

            String[] params = buffer.readLine().split("","");
            int count = Integer.parseInt(params[0]);
            int target = Integer.parseInt(params[1]);

            ArrayList<Hand> hands = new ArrayList<> ();
            // PriorityQueue<Hand> hands = new PriorityQueue<> (count);

            for (int i=0; i<count; ++i) {
                String[] cardsString = buffer.readLine().split("","");
                Card[] cards = new Card[5];

                for (int j=0; j<5; ++j) {
                    String[] suitAndFace = cardsString[j].split(""_"");
                    cards[j] = new Card(suitAndFace[1], suitAndFace[0]);
                }

                hands.add(new Hand(cards));

                if (hands.size() > target) {
                    Collections.sort(hands);
                    hands.remove(0);
                }
            }

            Card[] cards = hands.get(0).getCards();

            for (int i=0; i<4; ++i) {
                System.out.print(cards[i].getSuit() + ""_"" + cards[i].getFace() + "","");
            }
            System.out.print(cards[4].getSuit() + ""_"" + cards[4].getFace());

            System.out.println();
        }
    }
}

@03ef495b7c60c81a822e4a28e9b76d52@"
"r04921044","6","1.01","121088","@ab53c416ace97ee8d077d74eb3d75c76@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.*;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader buffer = new BufferedReader(new FileReader(args[0]))){

            String[] params = buffer.readLine().split("","");
            int count = Integer.parseInt(params[0]);
            int target = Integer.parseInt(params[1]);

            ArrayList<Hand> hands = new ArrayList<> ();

            for (int i=0; i<count; ++i) {
                String[] cardsString = buffer.readLine().split("","");
                Card[] cards = new Card[5];

                for (int j=0; j<5; ++j) {
                    String[] suitAndFace = cardsString[j].split(""_"");
                    cards[j] = new Card(suitAndFace[1], suitAndFace[0]);
                }

                hands.add(new Hand(cards));
                Collections.sort(hands);

                if (hands.size() > target) {
                    hands.remove(0);
                }
            }

            Card[] cards = hands.get(0).getCards();

            for (int i=0; i<4; ++i) {
                System.out.print(cards[i].getSuit() + ""_"" + cards[i].getFace() + "","");
            }
            System.out.print(cards[4].getSuit() + ""_"" + cards[4].getFace());

            System.out.println();
        }
    }
}

@ab53c416ace97ee8d077d74eb3d75c76@"
"b03611033","7","0.444285714285714","140640","@ff6179f0019c564573e62f123a3c5865@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int capacity = 0;
            MinPQ<Hand> mpq;
            MaxPQ<Hand> pq;
            Card goalcard[] = new Card[5];

            if (target < count / 2) {
                capacity = target + 1;
                Hand[] playerArray = new Hand[capacity];
                for (int j = 0; j < capacity; j++) {
                    Card[] cardsArray = new Card[5];
                    String[] cardStr = br.readLine().split("","");
                    for (int i = 0; i < 5; i++) {
                        String[] sep = cardStr[i].split(""_"");
                        Card card = new Card(sep[1], sep[0]);
                        cardsArray[i] = card;
                    }
                    Hand hand = new Hand(cardsArray);
                    playerArray[j] = hand;
                }

                mpq = new MinPQ<Hand>(playerArray);
                mpq.delMin();
                for (int j = target + 1; j < count; j++) {
                    Card[] cardsArray = new Card[5];
                    String[] cardStr = br.readLine().split("","");
                    for (int i = 0; i < 5; i++) {
                        String[] sep = cardStr[i].split(""_"");
                        Card card = new Card(sep[1], sep[0]);
                        cardsArray[i] = card;
                    }
                    Hand hand = new Hand(cardsArray);
                    mpq.insert(hand);
                    mpq.delMin();
                }
                goalcard = mpq.delMin().getCards();
            } else {
                capacity = count - target + 2;
                Hand[] playerArray = new Hand[capacity];
                for (int j = 0; j < capacity; j++) {
                    Card[] cardsArray = new Card[5];
                    String[] cardStr = br.readLine().split("","");
                    for (int i = 0; i < 5; i++) {
                        String[] sep = cardStr[i].split(""_"");
                        Card card = new Card(sep[1], sep[0]);
                        cardsArray[i] = card;
                    }
                    Hand hand = new Hand(cardsArray);
                    playerArray[j] = hand;
                }

                pq = new MaxPQ<Hand>(playerArray);
                pq.delMax();
                for (int j = capacity; j < count; j++) {
                    Card[] cardsArray = new Card[5];
                    String[] cardStr = br.readLine().split("","");
                    for (int i = 0; i < 5; i++) {
                        String[] sep = cardStr[i].split(""_"");
                        Card card = new Card(sep[1], sep[0]);
                        cardsArray[i] = card;
                    }
                    Hand hand = new Hand(cardsArray);
                    pq.insert(hand);
                    pq.delMax();
                }
                goalcard = pq.delMax().getCards();
            }

            Arrays.sort(goalcard);

            for (int i = 0; i < 5; i++) {
                StdOut.print(goalcard[i].getSuit() + ""_"" + goalcard[i].getFace());
                if (i == 4) {
                    break;
                }
                StdOut.print("","");
            }
        }
    }
}

@ff6179f0019c564573e62f123a3c5865@"
"b03611003","0","1.01","121088","@a6f101679f21cce4902cb3b7e21499ed@
import edu.princeton.cs.algs4.MaxPQ;
import edu.princeton.cs.algs4.MinPQ;
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            Hand targethand;
            String output = null;

            if (target > count / 2) {
//                用 maxpq ， 取倒數
                MaxPQ<Hand> handpq = new MaxPQ<Hand>(count - target + 2);

                int PQsize = count - target + 2;
                int counthand = 1;

                for (String in = br.readLine(); in != null; in = br.readLine()) {
                    Card[] cardsArray = new Card[5];
                    String[] cardStr = in.split("","");
                    for (int i = 0; i < 5; i++) {
                        String[] sep = cardStr[i].split(""_"");
                        Card card = new Card(sep[1], sep[0]);
                        cardsArray[i] = card;
                    }
                    Hand item = new Hand(cardsArray);

                    if (counthand <= PQsize) {
                        handpq.insert(item);
                    } else if (counthand > PQsize) {
                        Card B =  handpq.delMax().getCards()[0];      
                        System.out.println(B.getFace()+B.getSuit());
                        handpq.insert(item);
                    }
                    counthand++;
                }
               Card A = handpq.delMax().getCards()[0];
               System.out.println(A.getFace()+A.getSuit());
               targethand = new Hand(handpq.delMax().getCards()) ;
                
            } else {
//                用 minpq 
                MinPQ<Hand> handpq = new MinPQ<Hand>(target + 1);

                int PQsize = target + 1;
                int counthand = 1;

                for (String in = br.readLine(); in != null; in = br.readLine()) {
                    Card[] cardsArray = new Card[5];
                    String[] cardStr = in.split("","");
                    for (int i = 0; i < 5; i++) {
                        String[] sep = cardStr[i].split(""_"");
                        Card card = new Card(sep[1], sep[0]);
                        cardsArray[i] = card;
                    }
                    Hand item = new Hand(cardsArray);

                    if (counthand <= PQsize) {
                        handpq.insert(item);
                    } else if (counthand > PQsize) {
                        handpq.delMin();
                        handpq.insert(item);
                    }
                    counthand++;
                }

               handpq.delMin();
               targethand = new Hand(handpq.delMin().getCards()) ;
                
            }

            for (int i = 0; i < 5; i++) {
                if(i == 0){
                    output = targethand.getCards()[i].getSuit() + ""_"" + targethand.getCards()[i].getFace();
                }else{
                     output += targethand.getCards()[i].getSuit() + ""_"" + targethand.getCards()[i].getFace();
                }
                
                if (i != 4) {
                    output += "","";
                }
            }

            System.out.print(output);

        }
    }
}

@a6f101679f21cce4902cb3b7e21499ed@"
"b03611003","4","1.01","116080","@33f4f45d3448c27874a29c34bf0410fe@

import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            Hand targethand;
            String output = null;

            if (target > count / 2) {
//                用 maxpq ， 取倒數
                MaxPQ<Hand> handpq = new MaxPQ<Hand>(count - target + 2);

                int PQsize = count - target + 2;
                int counthand = 1;

                for (String in = br.readLine(); in != null; in = br.readLine()) {
                    Card[] cardsArray = new Card[5];
                    String[] cardStr = in.split("","");
                    for (int i = 0; i < 5; i++) {
                        String[] sep = cardStr[i].split(""_"");
                        Card card = new Card(sep[1], sep[0]);
                        cardsArray[i] = card;
                    }
                    Hand item = new Hand(cardsArray);

                    if (counthand <= PQsize) {
                        handpq.insert(item);
                    } else if (counthand > PQsize) {
                        Card B =  handpq.delMax().getCards()[0];      
                        System.out.println(B.getFace()+B.getSuit());
                        handpq.insert(item);
                    }
                    counthand++;
                }
               Card A = handpq.delMax().getCards()[0];
               System.out.println(A.getFace()+A.getSuit());
               targethand = new Hand(handpq.delMax().getCards()) ;
                
            } else {
//                用 minpq 
                MinPQ<Hand> handpq = new MinPQ<Hand>(target + 1);

                int PQsize = target + 1;
                int counthand = 1;

                for (String in = br.readLine(); in != null; in = br.readLine()) {
                    Card[] cardsArray = new Card[5];
                    String[] cardStr = in.split("","");
                    for (int i = 0; i < 5; i++) {
                        String[] sep = cardStr[i].split(""_"");
                        Card card = new Card(sep[1], sep[0]);
                        cardsArray[i] = card;
                    }
                    Hand item = new Hand(cardsArray);

                    if (counthand <= PQsize) {
                        handpq.insert(item);
                    } else if (counthand > PQsize) {
                        handpq.delMin();
                        handpq.insert(item);
                    }
                    counthand++;
                }

               handpq.delMin();
               targethand = new Hand(handpq.delMin().getCards()) ;
                
            }

            for (int i = 0; i < 5; i++) {
                if(i == 0){
                    output = targethand.getCards()[i].getSuit() + ""_"" + targethand.getCards()[i].getFace();
                }else{
                     output += targethand.getCards()[i].getSuit() + ""_"" + targethand.getCards()[i].getFace();
                }
                
                if (i != 4) {
                    output += "","";
                }
            }

            System.out.print(output);

        }
    }
}

@33f4f45d3448c27874a29c34bf0410fe@"
"b03611003","7","0.144285714285714","116512","@629adfcad5500428751ae5d9f8c18446@

import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            Hand targethand;
            String output = null;

            if (target > count / 2) {
//                用 maxpq ， 取倒數
                MaxPQ<Hand> handpq = new MaxPQ<Hand>(count - target + 2);

                int PQsize = count - target + 2;
                int counthand = 1;

                for (String in = br.readLine(); in != null; in = br.readLine()) {
                    Card[] cardsArray = new Card[5];
                    String[] cardStr = in.split("","");
                    for (int i = 0; i < 5; i++) {
                        String[] sep = cardStr[i].split(""_"");
                        Card card = new Card(sep[1], sep[0]);
                        cardsArray[i] = card;
                    }
                    Hand item = new Hand(cardsArray);

                    if (counthand <= PQsize) {
                        handpq.insert(item);
                    } else if (counthand > PQsize) {
                        handpq.delMax();
//                        Card B =  handpq.delMax().getCards()[0];      
//                        System.out.println(B.getFace()+B.getSuit());
                        handpq.insert(item);
                    }
                    counthand++;
                }
//               Card A = handpq.delMax().getCards()[0];
//               System.out.println(A.getFace()+A.getSuit());
                handpq.delMax();
               targethand = new Hand(handpq.delMax().getCards()) ;
                
            } else {
//                用 minpq 
                MinPQ<Hand> handpq = new MinPQ<Hand>(target + 1);

                int PQsize = target + 1;
                int counthand = 1;

                for (String in = br.readLine(); in != null; in = br.readLine()) {
                    Card[] cardsArray = new Card[5];
                    String[] cardStr = in.split("","");
                    for (int i = 0; i < 5; i++) {
                        String[] sep = cardStr[i].split(""_"");
                        Card card = new Card(sep[1], sep[0]);
                        cardsArray[i] = card;
                    }
                    Hand item = new Hand(cardsArray);

                    if (counthand <= PQsize) {
                        handpq.insert(item);
                    } else if (counthand > PQsize) {
                        handpq.delMin();
                        handpq.insert(item);
                    }
                    counthand++;
                }

               handpq.delMin();
               targethand = new Hand(handpq.delMin().getCards()) ;
                
            }

            for (int i = 0; i < 5; i++) {
                if(i == 0){
                    output = targethand.getCards()[i].getSuit() + ""_"" + targethand.getCards()[i].getFace();
                }else{
                     output += targethand.getCards()[i].getSuit() + ""_"" + targethand.getCards()[i].getFace();
                }
                
                if (i != 4) {
                    output += "","";
                }
            }

            System.out.print(output);

        }
    }
}

@629adfcad5500428751ae5d9f8c18446@"
"r04921028","4","0.41","106080","@17c8f0d31ec306e5110fb2e41a3dde38@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            
                    
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx = 0;
            Hand[] playerArray = new Hand[count];
            MaxPQ<Hand> pq = new MaxPQ<Hand>();
            
            for(idx=0;idx<count;idx++){
                Card[] cardsArray = new Card[5];
                
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
//                    System.out.print(sep[0]+""_""+sep[1]);
//                    if(i!=4){System.out.print("","");} 
                }
//                System.out.println();
                playerArray[idx] = new Hand(cardsArray);
                Hand item = new Hand(cardsArray);
                pq.insert(item);
            }
            Arrays.sort(playerArray);
//            for(int i=0;i<5;i++){
//                System.out.print(playerArray[count-target].getCards()[i].getSuit()+""_""+playerArray[count-target].getCards()[i].getFace());
//                if(i!=4){System.out.print("","");}
//            }
            for(int i=0;i<target-1;i++){
                pq.delMax();
            }
            Hand out = pq.delMax();
            for(int i=0;i<5;i++){
                System.out.print(out.getCards()[i].getSuit()+""_""+out.getCards()[i].getFace());
                if(i!=4){System.out.print("","");}
            }
        }
        }
    }


@17c8f0d31ec306e5110fb2e41a3dde38@"
"r04921028","4","0.42","106144","@3ced4da625d1d451b7c19f7fe09a29e3@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            
                    
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx = 0;

            MaxPQ<Hand> pq = new MaxPQ<Hand>();
            
            for(idx=0;idx<count;idx++){
                Card[] cardsArray = new Card[5];
                
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand item = new Hand(cardsArray);
                pq.insert(item);
            }

            for(int i=0;i<target-1;i++){
                pq.delMax();
            }
            Hand out = pq.delMax();
            for(int i=0;i<5;i++){
                System.out.print(out.getCards()[i].getSuit()+""_""+out.getCards()[i].getFace());
                if(i!=4){System.out.print("","");}
            }
        }
        }
    }


@3ced4da625d1d451b7c19f7fe09a29e3@"
"r04921028","4","0.4","102992","@cd75ef62547be28851442876b1ebf319@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx = 0;

            MaxPQ<Hand> pq = new MaxPQ<Hand>();
            
            for(idx=0;idx<count;idx++){
                Card[] cardsArray = new Card[5];
                
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                
                Hand item = new Hand(cardsArray);
                pq.insert(item);
            }

            for(int i=0;i<target-1;i++){
                pq.delMax();
            }
            Hand out = pq.delMax();
            for(int i=0;i<5;i++){
                System.out.print(out.getCards()[i].getSuit()+""_""+out.getCards()[i].getFace());
                if(i!=4){System.out.print("","");}
            }
        }
        }
    }
@cd75ef62547be28851442876b1ebf319@"
"r04921028","4","0.37","106176","@5a9487905a2c5a2a1c7bf70723b9fdb2@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx = 0;

            MaxPQ<Hand> pq = new MaxPQ<Hand>();
            Hand item;
            for(idx=0;idx<count;idx++){
                Card[] cardsArray = new Card[5];
                
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                
                item = new Hand(cardsArray);
                pq.insert(item);
            }

            for(int i=0;i<target-1;i++){
                pq.delMax();
            }
            Hand out = pq.delMax();
            for(int i=0;i<5;i++){
                System.out.print(out.getCards()[i].getSuit()+""_""+out.getCards()[i].getFace());
                if(i!=4){System.out.print("","");}
            }
        }
        }
    }


@5a9487905a2c5a2a1c7bf70723b9fdb2@"
"r04921028","2","0.85","120416","@456a454cfb02d21ca2fca76841948243@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx = 0;

            MaxPQ<Hand> pq = new MaxPQ<Hand>();
            
            for(idx=0;idx<count;idx++){
                Card[] cardsArray = new Card[5];
                
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                
                Hand item = new Hand(cardsArray);
                pq.insert(item);
                if(pq.size()>target-1){pq.delMax();}
            }

            Hand out = pq.delMax();
            for(int i=0;i<5;i++){
                System.out.print(out.getCards()[i].getSuit()+""_""+out.getCards()[i].getFace());
                if(i!=4){System.out.print("","");}
            }
        }
        }
    }


@456a454cfb02d21ca2fca76841948243@"
"r04921028","2","0.88","119728","@486308af8bc80e891d98fbe07821db64@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx = 0;

            MaxPQ<Hand> pq = new MaxPQ<Hand>();
            
            for(idx=0;idx<count;idx++){
                Card[] cardsArray = new Card[5];
                
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                
                Hand item = new Hand(cardsArray);
                pq.insert(item);
                if(pq.size()>target-1){pq.delMax();}
            }

            Hand out = pq.delMax();
            for(int i=0;i<5;i++){
                System.out.print(out.getCards()[i].getSuit()+""_""+out.getCards()[i].getFace());
                if(i!=4){System.out.print("","");}
            }
        }
        }
    }
@486308af8bc80e891d98fbe07821db64@"
"r04921028","4","0.39","105296","@acf4909ca641d10636dad55ae109d0cd@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx = 0;
            
            MaxPQ<Hand> pq = new MaxPQ<Hand>();
            
            for(idx=0;idx<count;idx++){
                Card[] cardsArray = new Card[5];
                
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                
                Hand item = new Hand(cardsArray);
                pq.insert(item);
                if(pq.size()>count-target+1){pq.delMax();}
            }

            Hand out = pq.delMax();
            for(int i=0;i<5;i++){
                System.out.print(out.getCards()[i].getSuit()+""_""+out.getCards()[i].getFace());
                if(i!=4){System.out.print("","");}
            }
        }
        }
    }
@acf4909ca641d10636dad55ae109d0cd@"
"r04921028","2","0.93","116080","@afade539622e4186fecdc31893ac90ba@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx = 0;
            
            MaxPQ<Hand> pq = new MaxPQ<Hand>();
            
            for(idx=0;idx<count;idx++){
                Card[] cardsArray = new Card[5];
                
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                
                Hand item = new Hand(cardsArray);
                pq.insert(item);
                if(pq.size()>target){pq.delMax();}
            }
            pq.delMax();
            Hand out = pq.delMax();
            for(int i=0;i<5;i++){
                System.out.print(out.getCards()[i].getSuit()+""_""+out.getCards()[i].getFace());
                if(i!=4){System.out.print("","");}
            }
        }
        }
    }
@afade539622e4186fecdc31893ac90ba@"
"r04921028","2","0.9","120720","@afade539622e4186fecdc31893ac90ba@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx = 0;
            
            MaxPQ<Hand> pq = new MaxPQ<Hand>();
            
            for(idx=0;idx<count;idx++){
                Card[] cardsArray = new Card[5];
                
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                
                Hand item = new Hand(cardsArray);
                pq.insert(item);
                if(pq.size()>target){pq.delMax();}
            }
            pq.delMax();
            Hand out = pq.delMax();
            for(int i=0;i<5;i++){
                System.out.print(out.getCards()[i].getSuit()+""_""+out.getCards()[i].getFace());
                if(i!=4){System.out.print("","");}
            }
        }
        }
    }
@afade539622e4186fecdc31893ac90ba@"
"r04921028","7","0.148571428571429","119136","@5059208bf90ef6226eb45ad03bfcf8f7@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx = 0;
            
            MinPQ<Hand> pq = new MinPQ<Hand>();
            
            for(idx=0;idx<count;idx++){
                Card[] cardsArray = new Card[5];
                
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                
                Hand item = new Hand(cardsArray);
                pq.insert(item);
                if(pq.size()>target){pq.delMin();}
            }
            
            Hand out = pq.delMin();
            for(int i=0;i<5;i++){
                System.out.print(out.getCards()[i].getSuit()+""_""+out.getCards()[i].getFace());
                if(i!=4){System.out.print("","");}
            }
        }
        }
    }
@5059208bf90ef6226eb45ad03bfcf8f7@"
"b03611015","0","0","0","@11c69dfdc2b906b34d8e763b41b90889@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
           
        
            Hand[] playerArray = new Hand[count];
            int id=0;
            while (br.readLine()!=null) {
              
              

                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                playerArray[id++]=hand;
              
            }
                 Arrays.sort(playerArray);
                 System.out.println(playerArray[count-1-target]);
         
            }
        }
    }

@11c69dfdc2b906b34d8e763b41b90889@"
"r03849033","0","0.39","105296","@fee49bddecb6619847adbf18f2ce2dc7@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.PriorityQueue;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int id=0;

            MinPQ pq = new MinPQ();
            for(String in = br.readLine(); in != null; in = br.readLine()) {
                id++;
                Hand hand = new Hand();
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                hand.Hand(cardsArray);
                pq.insert(hand);
                if(id>target){ pq.delMin(); }
            }    
            System.out.println(pq.delMin());
            
        }
    }
}

@fee49bddecb6619847adbf18f2ce2dc7@"
"r03849033","0","0.39","105296","@8d49e7ab96383b935ac7496e84a18bcd@import java.io.BufferedReader;
import java.io.FileReader;


public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int id=0;

            MinPQ pq = new MinPQ();
            for(String in = br.readLine(); in != null; in = br.readLine()) {
                id++;
                Hand hand = new Hand();
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                hand.Hand(cardsArray);
                pq.insert(hand);
                if(id>target){ pq.delMin(); }
            }    
            System.out.println(pq.delMin());
            
        }
    }
}

@8d49e7ab96383b935ac7496e84a18bcd@"
"r04228002","0","1.01","119680","@b460415af3984b2914b042148afeabc2@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author Lenovo
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            MinPQ<Hand> HandSet = new MinPQ<Hand>(target);
            for(int i=0;i<target;i++){
                String[] row1 = br.readLine().split("","");
                //System.out.println(row1[0]);
                
                Card[] cardsArray1 = new Card[5];
                for (int j=0;j<5;j++){
                    String[] row2 = row1[j].split(""_"");
                    Card aCard=new Card(row2[1],row2[0]);
                    cardsArray1[j] = aCard;
                }
                
                Hand aHand = new Hand(cardsArray1);
                HandSet.insert(aHand); 
            }
            
            for(int i=target;i<count;i++){
                Hand TempMin = HandSet.delMin();
                
                String[] row1 = br.readLine().split("","");
                
                Card[] cardsArray1 = new Card[5];
                for (int j=0;j<5;j++){
                    String[] row2 = row1[j].split(""_"");
                    Card aCard=new Card(row2[1],row2[0]);
                    cardsArray1[j] = aCard;
                }
                Hand aHand = new Hand(cardsArray1);
                
                int r = aHand.compareTo(TempMin);
                if (r==1)HandSet.insert(aHand);
                else HandSet.insert(TempMin);
            }
            
            Hand FinalMin = HandSet.delMin();
            Card[] FinalCard = FinalMin.getCards();
            String[] Result = new String[5];
            String Result2 = """";
            for (int i=0;i<4;i++){
                String face = FinalCard[i].getFace();
                String suit = FinalCard[i].getSuit();
                //Result[i] = suit+""_""+face;
                Result2=Result2+suit+""_""+face+"","";
            }
            String face = FinalCard[4].getFace();
            String suit = FinalCard[4].getSuit();
            Result2=Result2+suit+""_""+face+"","";
            
            System.out.println(Result2);

        }
    } 
}

@b460415af3984b2914b042148afeabc2@"
"r04228002","0","1.01","117344","@43633b4ec763ae26805f1b9b88fa44dc@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author Lenovo
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            MinPQ<Hand> HandSet = new MinPQ<Hand>(target);
            for(int i=0;i<target;i++){
                String[] row1 = br.readLine().split("","");
                //System.out.println(row1[0]);
                
                Card[] cardsArray1 = new Card[5];
                for (int j=0;j<5;j++){
                    String[] row2 = row1[j].split(""_"");
                    Card aCard=new Card(row2[1],row2[0]);
                    cardsArray1[j] = aCard;
                }
                
                Hand aHand = new Hand(cardsArray1);
                HandSet.insert(aHand); 
            }
            
            for(int i=target;i<count;i++){
                Hand TempMin = HandSet.delMin();
                
                String[] row1 = br.readLine().split("","");
                
                Card[] cardsArray1 = new Card[5];
                for (int j=0;j<5;j++){
                    String[] row2 = row1[j].split(""_"");
                    Card aCard=new Card(row2[1],row2[0]);
                    cardsArray1[j] = aCard;
                }
                Hand aHand = new Hand(cardsArray1);
                
                int r = aHand.compareTo(TempMin);
                if (r==1)HandSet.insert(aHand);
                else HandSet.insert(TempMin);
            }
            
            Hand FinalMin = HandSet.delMin();
            Card[] FinalCard = FinalMin.getCards();
            //String[] Result = new String[5];
            for (int i=0;i<5;i++){
                //String face = FinalCard[i].getFace();
                //String suit = FinalCard[i].getSuit();
                System.out.println(FinalCard[i].getSuit()+""_""+FinalCard[i].getFace());
            }
            /*
            String Result2 = """";
            for (int i=0;i<4;i++){
                String face = FinalCard[i].getFace();
                String suit = FinalCard[i].getSuit();
                Result2=Result2+suit+""_""+face+"","";
            }
            String face = FinalCard[4].getFace();
            String suit = FinalCard[4].getSuit();
            Result2=Result2+suit+""_""+face+"","";
            
            System.out.println(Result2);
                    */

        }
    } 
}

@43633b4ec763ae26805f1b9b88fa44dc@"
"r03849033","0","0","0","@774a960c42da630b6ea8ef3e8ba7f59c@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Comparator;


public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int id=0;
           MinPQ<Hand> pq = new MinPQ<Hand>();
       
            for(String in = br.readLine(); in != null; in = br.readLine()) {
                id++;
                Hand hand = new Hand();
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                hand.Hand(cardsArray);
                pq.insert(hand);
                if(id>target){ pq.delMin(); }
            }    
            Card[] c = pq.delMin().getCards();
            System.out.println(c[0].getSuit()+""_""+c[0].getFace()+"",""+
            c[1].getSuit()+""_""+c[1].getFace()+"",""+
                    c[2].getSuit()+""_""+c[2].getFace()+"",""+
                    c[3].getSuit()+""_""+c[3].getFace()+"",""+
                    c[4].getSuit()+""_""+c[4].getFace());
            
        }
    }
}

@774a960c42da630b6ea8ef3e8ba7f59c@"
"r03849033","0","0","0","@4cd13642fe4e0704656ddc8e38c8cdce@import java.io.BufferedReader;
import java.io.FileReader;


public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int id=0;
           MinPQ<Hand> pq = new MinPQ<Hand>();
       
            for(String in = br.readLine(); in != null; in = br.readLine()) {
                id++;
                Hand hand = new Hand();
                
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                hand.Hand(cardsArray);
                pq.insert(hand);
                if(id>target){ pq.delMin(); }
            }    
            Card[] c = pq.delMin().getCards();
            System.out.println(c[0].getSuit()+""_""+c[0].getFace()+"",""+
            c[1].getSuit()+""_""+c[1].getFace()+"",""+
                    c[2].getSuit()+""_""+c[2].getFace()+"",""+
                    c[3].getSuit()+""_""+c[3].getFace()+"",""+
                    c[4].getSuit()+""_""+c[4].getFace());
            
        }
    }
}

@4cd13642fe4e0704656ddc8e38c8cdce@"
"b03611041","0","0","0","@55026b4f25a8b968f2049d3d8753314b@import edu.princeton.cs.algs4.*;

import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            MaxPQ<Hand> pq=new MaxPQ<>();
            for (String in = br.readLine(); in!=null; in=br.readLine()) {
                String c[]=in.split("","");
                Card cards[]=new Card[5];
                for (int i = 0; i < 5; i++) {
                    String[] s=c[i].split(""_"");
                    Card card=new Card(s[1],s[0]);
                    cards[i]=card;
                }
                pq.insert(new Hand(cards));
            }

            String ans="""";
            for (int i = 0; i < target; i++) {
                pq.delMax();
                if(i==target-1) {
                    Card c[]=pq.delMax().getCards();
                    for (int j = 0; j < 5; j++) {
                        ans+=(c[j].getSuit()+""_""+c[j].getFace());
                        if(j!=4)ans+="","";
                    }
                }
            }
            System.out.println(ans);
        }
    }
}

@55026b4f25a8b968f2049d3d8753314b@"
"b03611041","0","0.29","106144","@e52e2c0443d4ecc4b88631aa826bf5cb@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            MaxPQ<Hand> pq=new MaxPQ<>();
            for (String in = br.readLine(); in!=null; in=br.readLine()) {
                String c[]=in.split("","");
                Card cards[]=new Card[5];
                for (int i = 0; i < 5; i++) {
                    String[] s=c[i].split(""_"");
                    Card card=new Card(s[1],s[0]);
                    cards[i]=card;
                }
                pq.insert(new Hand(cards));
            }

            String ans="""";
            for (int i = 0; i < target; i++) {
                pq.delMax();
                if(i==target-1) {
                    Card c[]=pq.delMax().getCards();
                    for (int j = 0; j < 5; j++) {
                        ans+=(c[j].getSuit()+""_""+c[j].getFace());
                        if(j!=4)ans+="","";
                    }
                }
            }
            System.out.println(ans);
        }
    }
}

@e52e2c0443d4ecc4b88631aa826bf5cb@"
"b03611041","2","0.3","106096","@873e9bedb6fec75084e7d7c4a8de273a@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            MaxPQ<Hand> pq=new MaxPQ<>();
            for (String in = br.readLine(); in!=null; in=br.readLine()) {
                String c[]=in.split("","");
                Card cards[]=new Card[5];
                for (int i = 0; i < 5; i++) {
                    String[] s=c[i].split(""_"");
                    Card card=new Card(s[1],s[0]);
                    cards[i]=card;
                }
                pq.insert(new Hand(cards));
            }

            String ans="""";
            for (int i = 0; i < target; i++) {
                pq.delMax();
                if(i==target-2) {
                    Card c[]=pq.delMax().getCards();
                    for (int j = 0; j < 5; j++) {
                        ans+=(c[j].getSuit()+""_""+c[j].getFace());
                        if(j!=4)ans+="","";
                    }
                }
            }
            System.out.println(ans);
        }
    }
}

@873e9bedb6fec75084e7d7c4a8de273a@"
"r04522627","7","0.148571428571429","114976","@6337b64ae8488077d1d2301f0e5f7b3f@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {
    
   

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            MinPQ<Hand> pq = new MinPQ<Hand>();
            
            for(String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                pq.insert(new Hand(cardsArray));
                if(pq.size() > target)
                {
                    pq.delMin();
                }
            }
            
            Hand target_hand = pq.min();
            Card[] target_cards = target_hand.getCards();
            StdOut.println(target_cards[0].getSuit() + ""_"" + target_cards[0].getFace()
            + "","" + target_cards[1].getSuit() + ""_"" + target_cards[1].getFace()
            + "","" + target_cards[2].getSuit() + ""_"" + target_cards[2].getFace()
            + "","" + target_cards[3].getSuit() + ""_"" + target_cards[3].getFace()
            + "","" + target_cards[4].getSuit() + ""_"" + target_cards[4].getFace());
            
            
            
            

        }
    }
}

@6337b64ae8488077d1d2301f0e5f7b3f@"
"b03611041","2","0.19","105872","@8af53f1af64390c0f61a8d263183491f@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String ans = """";

            if((float)target/(float)count >=0.5) {
                MaxPQ<Hand> pq = new MaxPQ<>();
                for (String in = br.readLine(); in != null; in = br.readLine()) {
                    String c[] = in.split("","");
                    Card cards[] = new Card[5];
                    for (int i = 0; i < 5; i++) {
                        String[] s = c[i].split(""_"");
                        Card card = new Card(s[1], s[0]);
                        cards[i] = card;
                    }
                    pq.insert(new Hand(cards));
                }

                for (int i = 0; i < target; i++) {
                    pq.delMax();
                    if (i == target - 2) {
                        Card c[] = pq.delMax().getCards();
                        for (int j = 0; j < 5; j++) {
                            ans += (c[j].getSuit() + ""_"" + c[j].getFace());
                            if (j != 4) ans += "","";
                        }
                    }
                }
            }else{
                MinPQ<Hand> pq=new MinPQ<>();
                for (String in = br.readLine(); in != null; in = br.readLine()) {
                    String c[] = in.split("","");
                    Card cards[] = new Card[5];
                    for (int i = 0; i < 5; i++) {
                        String[] s = c[i].split(""_"");
                        Card card = new Card(s[1], s[0]);
                        cards[i] = card;
                    }
                    pq.insert(new Hand(cards));
                }

                for (int i = count -1; i > target-1; i++) {
                    pq.delMin();
                    if (i == target) {
                        Card c[] = pq.delMin().getCards();
                        for (int j = 0; j < 5; j++) {
                            ans += (c[j].getSuit() + ""_"" + c[j].getFace());
                            if (j != 4) ans += "","";
                        }
                    }
                }
            }
            System.out.println(ans);
        }
    }
}

@8af53f1af64390c0f61a8d263183491f@"
"b01703032","7","0.142857142857143","120960","@979665230156de0675ad4af9d5a421cc@import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

public class HandPQ {

    int N;
    Hand[] pq;

    HandPQ (){
        N = 0;
        pq = new Hand[10];
    }

    public boolean isEmpty(){
        return N == 0;
    }

    public int size(){
        return N;
    }

    public void insert(Hand hand) {
        checkAndResize();
        pq[N++] = hand;
    }

    public Hand deleteMin() {
        int min = 0;
        for (int i = 0 ; i < N ; i++){
            if (pq[min].compareTo(pq[i]) == 1){
                min = i;
            }
        }
        Hand temp = pq[min];
        pq[min] = pq[N-1];
        pq[N-1] = temp;
        return pq[--N];
    }

    private void checkAndResize() {
        if (pq.length-N <= 1) {
            Hand[] copy = new Hand[2*pq.length];
            for (int i = 0 ; i < N ; i++){
                copy[i] = pq[i];
            }
            pq = copy;
        }
    }


    public static void main(String[] args) {

        try {
            BufferedReader br = new BufferedReader(new FileReader(args[0]));
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
//            HandPQ pq = new HandPQ();
            MinPQ<Hand> pq = new MinPQ<Hand>();
            for (int line = 0 ; line < count ; line++ ){
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                pq.insert(hand);
                if (pq.size() > target){
//                    pq.deleteMin();
                    pq.delMin();
                }

            }
            br.close();

//            Card[] cards = pq.deleteMin().getCards();
            Card[] cards = pq.delMin().getCards();
            Arrays.sort(cards);
            System.out.println(toString(cards));

        } catch (IOException e){
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }

    public static String toString(Card[] cards){
        String temp = """";
        String sp = """";
        for (Card c:cards){
            temp += sp + c.getSuit() + ""_"" + c.getFace();
            sp = "","";
        }
        return temp;
    }

}
@979665230156de0675ad4af9d5a421cc@"
"r03849033","7","0.14","120752","@960ae0d028e4193be7b32bac17c37ad8@import java.io.BufferedReader;
import java.io.FileReader;


public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int id=0;
            MinPQ<Hand> pq = new MinPQ<Hand>();
       
            for(String in = br.readLine(); in != null; in = br.readLine()) {
                id++;

                
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);      
                pq.insert( hand);
                if(id>target){ pq.delMin(); }
            }    
            Card[] c = pq.delMin().getCards();
            System.out.println(c[0].getSuit()+""_""+c[0].getFace()+"",""+
            c[1].getSuit()+""_""+c[1].getFace()+"",""+
                    c[2].getSuit()+""_""+c[2].getFace()+"",""+
                    c[3].getSuit()+""_""+c[3].getFace()+"",""+
                    c[4].getSuit()+""_""+c[4].getFace());
            
        }
    }
}

@960ae0d028e4193be7b32bac17c37ad8@"
"r04228002","6","1.03","120512","@d7cb36f30a277c55f8efbd9647770662@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author Lenovo
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            MinPQ<Hand> HandSet = new MinPQ<Hand>(target);
            for(int i=0;i<target;i++){
                String[] row1 = br.readLine().split("","");
                //System.out.println(row1[0]);
                
                Card[] cardsArray1 = new Card[5];
                for (int j=0;j<5;j++){
                    String[] row2 = row1[j].split(""_"");
                    Card aCard=new Card(row2[1],row2[0]);
                    cardsArray1[j] = aCard;
                }
                
                Hand aHand = new Hand(cardsArray1);
                HandSet.insert(aHand); 
            }
            
            for(int i=target;i<count;i++){
                Hand TempMin = HandSet.delMin();
                
                String[] row1 = br.readLine().split("","");
                
                Card[] cardsArray1 = new Card[5];
                for (int j=0;j<5;j++){
                    String[] row2 = row1[j].split(""_"");
                    Card aCard=new Card(row2[1],row2[0]);
                    cardsArray1[j] = aCard;
                }
                Hand aHand = new Hand(cardsArray1);
                
                int r = aHand.compareTo(TempMin);
                if (r==1)HandSet.insert(aHand);
                else HandSet.insert(TempMin);
            }
            
            Hand FinalMin = HandSet.delMin();
            Card[] FinalCard = FinalMin.getCards();
            //String[] Result = new String[5];
            /*
            for (int i=0;i<5;i++){
                System.out.println(FinalCard[i].getSuit()+""_""+FinalCard[i].getFace());
            }
            */
            
            String Result2 = """";
            for (int i=0;i<4;i++){
                String face = FinalCard[i].getFace();
                String suit = FinalCard[i].getSuit();
                Result2=Result2+suit+""_""+face+"","";
            }
            String face = FinalCard[4].getFace();
            String suit = FinalCard[4].getSuit();
            Result2=Result2+suit+""_""+face;
            
            System.out.println(Result2);
                    

        }
    } 
}

@d7cb36f30a277c55f8efbd9647770662@"
"r04228002","6","1.03","118160","@511c67d93262aaee45595d95f0098a26@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author Lenovo
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            MinPQ<Hand> HandSet = new MinPQ<Hand>(target);
            for(int i=0;i<target;i++){
                String[] row1 = br.readLine().split("","");
                //System.out.println(row1[0]);
                
                Card[] cardsArray1 = new Card[5];
                for (int j=0;j<5;j++){
                    String[] row2 = row1[j].split(""_"");
                    Card aCard=new Card(row2[1],row2[0]);
                    cardsArray1[j] = aCard;
                }
                
                Hand aHand = new Hand(cardsArray1);
                HandSet.insert(aHand); 
            }
            
            for(int i=target;i<count;i++){
                Hand TempMin = HandSet.delMin();
                
                String[] row1 = br.readLine().split("","");
                
                Card[] cardsArray1 = new Card[5];
                for (int j=0;j<5;j++){
                    String[] row2 = row1[j].split(""_"");
                    Card aCard=new Card(row2[1],row2[0]);
                    cardsArray1[j] = aCard;
                }
                Hand aHand = new Hand(cardsArray1);
                
                int r = aHand.compareTo(TempMin);
                if (r==1)HandSet.insert(aHand);
                else HandSet.insert(TempMin);
            }
            
            Hand FinalMin = HandSet.delMin();
            Card[] FinalCard = FinalMin.getCards();
            //String[] Result = new String[5];
            /*
            for (int i=0;i<5;i++){
                System.out.println(FinalCard[i].getSuit()+""_""+FinalCard[i].getFace());
            }
            */
            
            String Result2 = """";
            for (int i=0;i<4;i++){
                //String face = FinalCard[i].getFace();
                //String suit = FinalCard[i].getSuit();
                Result2=Result2+FinalCard[i].getSuit()+""_""+FinalCard[i].getFace()+"","";
            }
            //String face = FinalCard[4].getFace();
            //String suit = FinalCard[4].getSuit();
            Result2=Result2+FinalCard[4].getSuit()+""_""+FinalCard[4].getFace();
            
            System.out.println(Result2);
                    

        }
    } 
}

@511c67d93262aaee45595d95f0098a26@"
"r04921074","0","0.39","105296","@a6c898f420e67e9916dbae3b910d2b0b@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            Hand[] HandArray = new Hand[count];
            Hand TEMP;
 //************************* PriootyQ where **********************************\\   
        MinPQ<Hand> pq = new MinPQ<Hand>();
            
        for(int i=0; i<count; i++){
            String LineStr = br.readLine();
            String[] cardStr = LineStr.split("","");
            Card[] cardsArray = new Card[5];
            for(int j=0; j<5; j++){
            String[] sep = cardStr[j].split(""_"");
            Card card = new Card(sep[1], sep[0]);
            cardsArray[j] = card;
        //    System.out.println(card.getSuit()+""_""+card.getFace());            
            }
            Hand HandPQ = new Hand(cardsArray);
            pq.insert(HandPQ); 
        }
        
        for(int j=0; j<target-1; j++){
          pq.delMin();
        }
        TEMP = pq.delMin();
        
        for(int a=0; a<5; a++){    
        System.out.print(TEMP.getCards()[a].getSuit()+""_""+TEMP.getCards()[a].getFace());
        if(a<4)System.out.print("","");
       }
        
      /*  
        for(int i=0; i<count; i++){
            String LineStr = br.readLine();
            String[] cardStr = LineStr.split("","");
            Card[] cardsArray = new Card[5];
            for(int j=0; j<5; j++){
            String[] sep = cardStr[j].split(""_"");
            Card card = new Card(sep[1], sep[0]);
            cardsArray[j] = card;
        //    System.out.println(card.getSuit()+""_""+card.getFace());            
            }
            HandArray[i] = new Hand(cardsArray);
        }
        Arrays.sort(HandArray);
        for(int a=0; a<5; a++){    
        System.out.print(HandArray[count - target].getCards()[a].getSuit()+""_""+HandArray[count - target].getCards()[a].getFace());
        if(a<4)System.out.print("","");
        }
        */


        
        
        
        
        
        }
    }
}

@a6c898f420e67e9916dbae3b910d2b0b@"
"r04921074","2","0.39","106144","@fb730c41f52c005db85153a78854a137@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            Hand[] HandArray = new Hand[count];
            Hand TEMP;
 //************************* PriootyQ where **********************************\\   
        MinPQ<Hand> pq = new MinPQ<Hand>();
            
        for(int i=0; i<count; i++){
            String LineStr = br.readLine();
            String[] cardStr = LineStr.split("","");
            Card[] cardsArray = new Card[5];
            for(int j=0; j<5; j++){
            String[] sep = cardStr[j].split(""_"");
            Card card = new Card(sep[1], sep[0]);
            cardsArray[j] = card;
        //    System.out.println(card.getSuit()+""_""+card.getFace());            
            }
            Hand HandPQ = new Hand(cardsArray);
            pq.insert(HandPQ); 
        }
        
        for(int j=0; j<target-2; j++){
          pq.delMin();
        }
        TEMP = pq.delMin();
        
        for(int a=0; a<5; a++){    
        System.out.print(TEMP.getCards()[a].getSuit()+""_""+TEMP.getCards()[a].getFace());
        if(a<4)System.out.print("","");
       }
   //*************************************************************************\\     
      /*  
        for(int i=0; i<count; i++){
            String LineStr = br.readLine();
            String[] cardStr = LineStr.split("","");
            Card[] cardsArray = new Card[5];
            for(int j=0; j<5; j++){
            String[] sep = cardStr[j].split(""_"");
            Card card = new Card(sep[1], sep[0]);
            cardsArray[j] = card;
        //    System.out.println(card.getSuit()+""_""+card.getFace());            
            }
            HandArray[i] = new Hand(cardsArray);
        }
        Arrays.sort(HandArray);
        for(int a=0; a<5; a++){    
        System.out.print(HandArray[count - target].getCards()[a].getSuit()+""_""+HandArray[count - target].getCards()[a].getFace());
        if(a<4)System.out.print("","");
        }
        */


        
        
        
        
        
        }
    }
}

@fb730c41f52c005db85153a78854a137@"
"r04921074","2","0.38","106176","@5826e1d0f74f96245a4ffd5308680070@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
      //      Hand[] HandArray = new Hand[count];
            Hand TEMP;
 //************************* PriootyQ where **********************************\\   
        MinPQ<Hand> pq = new MinPQ<Hand>();
            
        for(int i=0; i<count; i++){
            String LineStr = br.readLine();
            String[] cardStr = LineStr.split("","");
            Card[] cardsArray = new Card[5];
            for(int j=0; j<5; j++){
            String[] sep = cardStr[j].split(""_"");
            Card card = new Card(sep[1], sep[0]);
            cardsArray[j] = card;
        //    System.out.println(card.getSuit()+""_""+card.getFace());            
            }
            Hand HandPQ = new Hand(cardsArray);
            pq.insert(HandPQ); 
        }
        
        for(int j=0; j<target-2; j++){
          pq.delMin();
        }
        TEMP = pq.delMin();
        
        for(int a=0; a<5; a++){    
        System.out.print(TEMP.getCards()[a].getSuit()+""_""+TEMP.getCards()[a].getFace());
        if(a<4)System.out.print("","");
       }
   //*************************************************************************\\     
      


        
        
        
        
        
        }
    }
}

@5826e1d0f74f96245a4ffd5308680070@"
"b03611041","4","0.38","104960","@1020a2739873be3645933d45d740867e@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String ans = """";

            if((float)target/(float)count <=0.5) {
                MaxPQ<Hand> pq = new MaxPQ<>();
                for (String in = br.readLine(); in != null; in = br.readLine()) {
                    String c[] = in.split("","");
                    Card cards[] = new Card[5];
                    for (int i = 0; i < 5; i++) {
                        String[] s = c[i].split(""_"");
                        Card card = new Card(s[1], s[0]);
                        cards[i] = card;
                    }
                    pq.insert(new Hand(cards));
                }

                for (int i = 0; i < target; i++) {
                    if (i == target-1) {
                        Card c[] =pq.delMax().getCards();
                         pq.delMax().getCards();
                        for (int j = 0; j < 5; j++) {
                            ans += (c[j].getSuit() + ""_"" + c[j].getFace());
                            if (j != 4) ans += "","";
                        }
                    }else{
                        pq.delMax();
                    }
                }
            }else{
                MinPQ<Hand> pq=new MinPQ<>();
                for (String in = br.readLine(); in != null; in = br.readLine()) {
                    String c[] = in.split("","");
                    Card cards[] = new Card[5];
                    for (int i = 0; i < 5; i++) {
                        String[] s = c[i].split(""_"");
                        Card card = new Card(s[1], s[0]);
                        cards[i] = card;
                    }
                    pq.insert(new Hand(cards));
                }

                for (int i = count; i >= target; i--) {
                    if (i == target) {
                        Card c[] = pq.delMin().getCards();
                        for (int j = 0; j < 5; j++) {
                            ans += (c[j].getSuit() + ""_"" + c[j].getFace());
                            if (j != 4) ans += "","";
                        }
                    }else{
                        pq.delMin();
                    }
                }
            }
            System.out.println(ans);
        }
    }
}

@1020a2739873be3645933d45d740867e@"
"b03611041","4","0.41","106592","@6029574dbc8ea52a653c64d6f3b62b9a@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String ans = """";

            if((float)target/(float)count <=0.5) {
                MaxPQ<Hand> pq = new MaxPQ<>();
                for (String in = br.readLine(); in != null; in = br.readLine()) {
                    String c[] = in.split("","");
                    Card cards[] = new Card[5];
                    for (int i = 0; i < 5; i++) {
                        String[] s = c[i].split(""_"");
                        Card card = new Card(s[1], s[0]);
                        cards[i] = card;
                    }
                    pq.insert(new Hand(cards));
                }

                System.gc();
                for (int i = 0; i < target; i++) {
                    if (i == target-1) {
                        Card c[] =pq.delMax().getCards();
                         pq.delMax().getCards();
                        for (int j = 0; j < 5; j++) {
                            ans += (c[j].getSuit() + ""_"" + c[j].getFace());
                            if (j != 4) ans += "","";
                        }
                    }else{
                        pq.delMax();
                    }
                }
            }else{
                MinPQ<Hand> pq=new MinPQ<>();
                for (String in = br.readLine(); in != null; in = br.readLine()) {
                    String c[] = in.split("","");
                    Card cards[] = new Card[5];
                    for (int i = 0; i < 5; i++) {
                        String[] s = c[i].split(""_"");
                        Card card = new Card(s[1], s[0]);
                        cards[i] = card;
                    }
                    pq.insert(new Hand(cards));
                }
                System.gc();

                for (int i = count; i >= target; i--) {
                    if (i == target) {
                        Card c[] = pq.delMin().getCards();
                        for (int j = 0; j < 5; j++) {
                            ans += (c[j].getSuit() + ""_"" + c[j].getFace());
                            if (j != 4) ans += "","";
                        }
                    }else{
                        pq.delMin();
                    }
                }
            }
            System.out.println(ans);
        }
    }
}

@6029574dbc8ea52a653c64d6f3b62b9a@"
"b03611041","4","0.41","101040","@fb75b65ae990d9e68775c0712379442e@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String ans = """";

            if((float)target/(float)count <=0.5) {
                MaxPQ<Hand> pq = new MaxPQ<>(count);
                for (String in = br.readLine(); in != null; in = br.readLine()) {
                    String c[] = in.split("","");
                    Card cards[] = new Card[5];
                    for (int i = 0; i < 5; i++) {
                        String[] s = c[i].split(""_"");
                        Card card = new Card(s[1], s[0]);
                        cards[i] = card;
                    }
                    pq.insert(new Hand(cards));
                }

//                System.gc();
                for (int i = 0; i < target; i++) {
                    if (i == target-1) {
                        Card c[] =pq.delMax().getCards();
                         pq.delMax().getCards();
                        for (int j = 0; j < 5; j++) {
                            ans += (c[j].getSuit() + ""_"" + c[j].getFace());
                            if (j != 4) ans += "","";
                        }
                    }else{
                        pq.delMax();
                    }
                }
            }else{
                MinPQ<Hand> pq=new MinPQ<>(count);
                for (String in = br.readLine(); in != null; in = br.readLine()) {
                    String c[] = in.split("","");
                    Card cards[] = new Card[5];
                    for (int i = 0; i < 5; i++) {
                        String[] s = c[i].split(""_"");
                        Card card = new Card(s[1], s[0]);
                        cards[i] = card;
                    }
                    pq.insert(new Hand(cards));
                }
//                System.gc();

                for (int i = count; i >= target; i--) {
                    if (i == target) {
                        Card c[] = pq.delMin().getCards();
                        for (int j = 0; j < 5; j++) {
                            ans += (c[j].getSuit() + ""_"" + c[j].getFace());
                            if (j != 4) ans += "","";
                        }
                    }else{
                        pq.delMin();
                    }
                }
            }
            System.out.println(ans);
        }
    }
}

@fb75b65ae990d9e68775c0712379442e@"
"b03611041","4","0.38","106208","@c3e993b63fb5190daf1fc37977837151@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String ans = """";

            if((float)target/(float)count <=0.5) {
                MaxPQ<Hand> pq = new MaxPQ<>(count);
                for (String in = br.readLine(); in != null; in = br.readLine()) {
                    String c[] = in.split("","");
                    Card cards[] = new Card[5];
                    for (int i = 0; i < 5; i++) {
                        String[] s = c[i].split(""_"");
                        Card card = new Card(s[1], s[0]);
                        cards[i] = card;
                    }
                    pq.insert(new Hand(cards));
                }

//                System.gc();
                for (int i = 0; i < target; i++) {
                    if (i == target-1) {
                        Card c[] =pq.delMax().getCards();
                         pq.delMax().getCards();
                        for (int j = 0; j < 5; j++) {
                            ans += (c[j].getSuit() + ""_"" + c[j].getFace());
                            if (j != 4) ans += "","";
                        }
                        break;
                    }else{
                        pq.delMax();
                    }
                }
            }else{
                MinPQ<Hand> pq=new MinPQ<>(count);
                for (String in = br.readLine(); in != null; in = br.readLine()) {
                    String c[] = in.split("","");
                    Card cards[] = new Card[5];
                    for (int i = 0; i < 5; i++) {
                        String[] s = c[i].split(""_"");
                        Card card = new Card(s[1], s[0]);
                        cards[i] = card;
                    }
                    pq.insert(new Hand(cards));
                }
//                System.gc();

                for (int i = count; i >= target; i--) {
                    if (i == target) {
                        Card c[] = pq.delMin().getCards();
                        for (int j = 0; j < 5; j++) {
                            ans += (c[j].getSuit() + ""_"" + c[j].getFace());
                            if (j != 4) ans += "","";
                        }
                        break;
                    }else{
                        pq.delMin();
                    }
                }
            }
            System.out.println(ans);
        }
    }
}

@c3e993b63fb5190daf1fc37977837151@"
"r04921074","0","0.3","106080","@1c41bd73f35e9f55a3b45b8496a14d05@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            Hand[] HandArray = new Hand[count];
            Hand TEMP;
 //************************* PriootyQ where **********************************\\   
        MinPQ<Hand> pq = new MinPQ<Hand>();
            
        for(int i=0; i<count; i++){
            String LineStr = br.readLine();
            String[] cardStr = LineStr.split("","");
            Card[] cardsArray = new Card[5];
            for(int j=0; j<5; j++){
            String[] sep = cardStr[j].split(""_"");
            Card card = new Card(sep[1], sep[0]);
            cardsArray[j] = card;
        //    System.out.println(card.getSuit()+""_""+card.getFace());            
            }
            Hand HandPQ = new Hand(cardsArray);
            pq.insert(HandPQ); 
        }
        
        for(int j=0; j<count-target+1; j++){
          pq.delMin();
        }
        TEMP = pq.delMin();
        
        for(int a=0; a<5; a++){    
        System.out.print(TEMP.getCards()[a].getSuit()+""_""+TEMP.getCards()[a].getFace());
        if(a<4)System.out.print("","");
       }
   //*************************************************************************\\     
      /*  
        for(int i=0; i<count; i++){
            String LineStr = br.readLine();
            String[] cardStr = LineStr.split("","");
            Card[] cardsArray = new Card[5];
            for(int j=0; j<5; j++){
            String[] sep = cardStr[j].split(""_"");
            Card card = new Card(sep[1], sep[0]);
            cardsArray[j] = card;
        //    System.out.println(card.getSuit()+""_""+card.getFace());            
            }
            HandArray[i] = new Hand(cardsArray);
        }
        Arrays.sort(HandArray);
        for(int a=0; a<5; a++){    
        System.out.print(HandArray[count - target].getCards()[a].getSuit()+""_""+HandArray[count - target].getCards()[a].getFace());
        if(a<4)System.out.print("","");
        }
        */


        
        
        
        
        
        }
    }
}

@1c41bd73f35e9f55a3b45b8496a14d05@"
"b03611041","3","0.91","119472","@6d65b4fd57e712a065488a5bf5207dfe@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String ans = """";

            if((float)target/(float)count <=0.5) {
                MaxPQ<Hand> pq = new MaxPQ<>(count);
                for (String in = br.readLine(); in != null; in = br.readLine()) {
                    String c[] = in.split("","");
                    Card cards[] = new Card[5];
                    for (int i = 0; i < 5; i++) {
                        String[] s = c[i].split(""_"");
                        Card card = new Card(s[1], s[0]);
                        cards[i] = card;
                    }
                    pq.insert(new Hand(cards));
                    if(pq.size()>target)pq.delMax();
                }

//                for (int i = 0; i < target; i++) {
//                    if (i == target - 1) {
                        Card c[] = pq.delMax().getCards();
                        pq.delMax().getCards();
                        for (int j = 0; j < 5; j++) {
                            ans += (c[j].getSuit() + ""_"" + c[j].getFace());
                            if (j != 4) ans += "","";
                        }
//                        break;
//                    } else {
//                        pq.delMax();
//                    }
//                }
            }else {
                MinPQ<Hand> pq = new MinPQ<>(count);
                for (String in = br.readLine(); in != null; in = br.readLine()) {
                    String c[] = in.split("","");
                    Card cards[] = new Card[5];
                    for (int i = 0; i < 5; i++) {
                        String[] s = c[i].split(""_"");
                        Card card = new Card(s[1], s[0]);
                        cards[i] = card;
                    }
                    pq.insert(new Hand(cards));
                    if (pq.size() > target) pq.delMin();
                }

//                for (int i = 0; i < target; i++) {
//                    if (i == target) {
                Card c[] = pq.delMin().getCards();
                for (int j = 0; j < 5; j++) {
                    ans += (c[j].getSuit() + ""_"" + c[j].getFace());
                    if (j != 4) ans += "","";
                }
//                        break;
//                    }else{
//                        pq.delMin();
//                    }
            }
            System.out.println(ans);
        }
    }
}

@6d65b4fd57e712a065488a5bf5207dfe@"
"b03611041","3","1.03","114784","@2912755d82d2fc0c064d3eb9fa86af39@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String ans = """";

            if ((float) target / (float) count <= 0.5) {
                MaxPQ<Hand> pq = new MaxPQ<>(count);
                for (String in = br.readLine(); in != null; in = br.readLine()) {
                    String c[] = in.split("","");
                    Card cards[] = new Card[5];
                    for (int i = 0; i < 5; i++) {
                        String[] s = c[i].split(""_"");
                        Card card = new Card(s[1], s[0]);
                        cards[i] = card;
                    }
                    pq.insert(new Hand(cards));
                    if (pq.size() > target) pq.delMax();
                }

                Card c[] = pq.delMax().getCards();
                for (int j = 0; j < 5; j++) {
                    ans += (c[j].getSuit() + ""_"" + c[j].getFace());
                    if (j != 4) ans += "","";
                }

            } else {
                MinPQ<Hand> pq = new MinPQ<>(count);
                for (String in = br.readLine(); in != null; in = br.readLine()) {
                    String c[] = in.split("","");
                    Card cards[] = new Card[5];
                    for (int i = 0; i < 5; i++) {
                        String[] s = c[i].split(""_"");
                        Card card = new Card(s[1], s[0]);
                        cards[i] = card;
                    }
                    pq.insert(new Hand(cards));
                    if (pq.size() > target) pq.delMin();
                }

                Card c[] = pq.delMin().getCards();
                for (int j = 0; j < 5; j++) {
                    ans += (c[j].getSuit() + ""_"" + c[j].getFace());
                    if (j != 4) ans += "","";
                }
            }
            System.out.println(ans);
        }
    }
}

@2912755d82d2fc0c064d3eb9fa86af39@"
"b03611041","3","0.99","119840","@92eef17ece01e427e66a63d2c59831ba@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String ans = """";

            if ((float) target / (float) count <= 0.5) {
                MaxPQ<Hand> pq = new MaxPQ<>(count);
                for (String in = br.readLine(); in != null; in = br.readLine()) {
                    String c[] = in.split("","");
                    Card cards[] = new Card[5];
                    for (int i = 0; i < 5; i++) {
                        String[] s = c[i].split(""_"");
                        Card card = new Card(s[1], s[0]);
                        cards[i] = card;
                    }
                    pq.insert(new Hand(cards));
                    if (pq.size() > target) pq.delMax();
                }

                Card c[] = pq.delMax().getCards();
                for (int j = 0; j < 5; j++) {
                    ans += (c[j].getSuit() + ""_"" + c[j].getFace());
                    if (j != 4) ans += "","";
                }

            } else {
                MinPQ<Hand> pq = new MinPQ<>(count);
                for (String in = br.readLine(); in != null; in = br.readLine()) {
                    String c[] = in.split("","");
                    Card cards[] = new Card[5];
                    for (int i = 0; i < 5; i++) {
                        String[] s = c[i].split(""_"");
                        Card card = new Card(s[1], s[0]);
                        cards[i] = card;
                    }
                    pq.insert(new Hand(cards));
                    if (pq.size() > target) pq.delMin();
                }

                Card c[] = pq.delMin().getCards();
                for (int j = 0; j < 5; j++) {
                    ans += (c[j].getSuit() + ""_"" + c[j].getFace());
                    if (j != 4) ans += "","";
                }
            }
            System.out.println(ans);
        }
    }
}

@92eef17ece01e427e66a63d2c59831ba@"
"b03611041","4","0.99","119680","@19f26c73996beb30bd3bed8d0d307f68@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String ans = """";

            if ((float) target / (float) count >= 0.5) {
                MaxPQ<Hand> pq = new MaxPQ<>(count);
                for (String in = br.readLine(); in != null; in = br.readLine()) {
                    String c[] = in.split("","");
                    Card cards[] = new Card[5];
                    for (int i = 0; i < 5; i++) {
                        String[] s = c[i].split(""_"");
                        cards[i] = new Card(s[1], s[0]);
                    }
                    pq.insert(new Hand(cards));
                    if (pq.size() > target) pq.delMax();
                }

                Card c[] = pq.delMax().getCards();
                for (int j = 0; j < 5; j++) {
                    ans += (c[j].getSuit() + ""_"" + c[j].getFace());
                    if (j != 4) ans += "","";
                }

            } else {
                MinPQ<Hand> pq = new MinPQ<>(count);
                for (String in = br.readLine(); in != null; in = br.readLine()) {
                    String c[] = in.split("","");
                    Card cards[] = new Card[5];
                    for (int i = 0; i < 5; i++) {
                        String[] s = c[i].split(""_"");
                        cards[i] = new Card(s[1], s[0]);
                    }
                    pq.insert(new Hand(cards));
                    if (pq.size() > target) pq.delMin();
                }

                Card c[] = pq.delMin().getCards();
                for (int j = 0; j < 5; j++) {
                    ans += (c[j].getSuit() + ""_"" + c[j].getFace());
                    if (j != 4) ans += "","";
                }
            }
            System.out.println(ans);
        }
    }
}

@19f26c73996beb30bd3bed8d0d307f68@"
"r04921074","4","0.41","105568","@72822193e450845f2f4ba2a8920c20f6@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            Hand[] HandArray = new Hand[count];
            Hand TEMP;
 //************************* PriootyQ where **********************************\\   
        MaxPQ<Hand> pq = new MaxPQ<Hand>();
            
        for(int i=0; i<count; i++){
            String LineStr = br.readLine();
            String[] cardStr = LineStr.split("","");
            Card[] cardsArray = new Card[5];
            for(int j=0; j<5; j++){
            String[] sep = cardStr[j].split(""_"");
            Card card = new Card(sep[1], sep[0]);
            cardsArray[j] = card;
        //    System.out.println(card.getSuit()+""_""+card.getFace());            
            }
            Hand HandPQ = new Hand(cardsArray);
            pq.insert(HandPQ); 
        }
        
        for(int j=0; j<target-1; j++){
          pq.delMax();
        }
        TEMP = pq.delMax();
        
        for(int a=0; a<5; a++){    
        System.out.print(TEMP.getCards()[a].getSuit()+""_""+TEMP.getCards()[a].getFace());
        if(a<4)System.out.print("","");
       }
   //*************************************************************************\\     
      /*  
        for(int i=0; i<count; i++){
            String LineStr = br.readLine();
            String[] cardStr = LineStr.split("","");
            Card[] cardsArray = new Card[5];
            for(int j=0; j<5; j++){
            String[] sep = cardStr[j].split(""_"");
            Card card = new Card(sep[1], sep[0]);
            cardsArray[j] = card;
        //    System.out.println(card.getSuit()+""_""+card.getFace());            
            }
            HandArray[i] = new Hand(cardsArray);
        }
        Arrays.sort(HandArray);
        for(int a=0; a<5; a++){    
        System.out.print(HandArray[count - target].getCards()[a].getSuit()+""_""+HandArray[count - target].getCards()[a].getFace());
        if(a<4)System.out.print("","");
        }
        */


        
        
        
        
        
        }
    }
}

@72822193e450845f2f4ba2a8920c20f6@"
"b03611041","7","0.145714285714286","119248","@f2fc3b2801e5cdc63a4a2e564046a53b@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String ans = """";

//            if ((float) target / (float) count >= 0.5) {
//                MaxPQ<Hand> pq = new MaxPQ<>(count);
//                for (String in = br.readLine(); in != null; in = br.readLine()) {
//                    String c[] = in.split("","");
//                    Card cards[] = new Card[5];
//                    for (int i = 0; i < 5; i++) {
//                        String[] s = c[i].split(""_"");
//                        cards[i] = new Card(s[1], s[0]);
//                    }
//                    pq.insert(new Hand(cards));
//                    if (pq.size() > target) pq.delMax();
//                }
//
//                Card c[] = pq.delMax().getCards();
//                for (int j = 0; j < 5; j++) {
//                    ans += (c[j].getSuit() + ""_"" + c[j].getFace());
//                    if (j != 4) ans += "","";
//                }
//
//            } else
//            {
                MinPQ<Hand> pq = new MinPQ<>(count);
                for (String in = br.readLine(); in != null; in = br.readLine()) {
                    String c[] = in.split("","");
                    Card cards[] = new Card[5];
                    for (int i = 0; i < 5; i++) {
                        String[] s = c[i].split(""_"");
                        cards[i] = new Card(s[1], s[0]);
                    }
                    pq.insert(new Hand(cards));
                    if (pq.size() > target) pq.delMin();
                }

                Card c[] = pq.delMin().getCards();
                for (int j = 0; j < 5; j++) {
                    ans += (c[j].getSuit() + ""_"" + c[j].getFace());
                    if (j != 4) ans += "","";
                }
//            }
            System.out.println(ans);
        }
    }
}

@f2fc3b2801e5cdc63a4a2e564046a53b@"
"r04921074","4","0.38","106064","@5ac85a3cac1e24a320e834c0136a8ca6@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String LineStr;
            Hand TEMP;
 //************************* PriootyQ where **********************************\\   
        MaxPQ<Hand> pq = new MaxPQ<Hand>();
            
        for(int i=0; i<count; i++){
            LineStr = br.readLine();
            String[] cardStr = LineStr.split("","");
            Card[] cardsArray = new Card[5];
            for(int j=0; j<5; j++){
            String[] sep = cardStr[j].split(""_"");
            Card card = new Card(sep[1], sep[0]);
            cardsArray[j] = card;
        //    System.out.println(card.getSuit()+""_""+card.getFace());            
            }
            Hand HandPQ = new Hand(cardsArray);
            pq.insert(HandPQ); 
        }
        
        for(int j=0; j<target-1; j++){
          pq.delMax();
        }
        TEMP = pq.delMax();
        
        for(int a=0; a<5; a++){    
        System.out.print(TEMP.getCards()[a].getSuit()+""_""+TEMP.getCards()[a].getFace());
        if(a<4)System.out.print("","");
       }
   //*************************************************************************\\     

        System.out.println();
        
        
        
        
        }
    }
}

@5ac85a3cac1e24a320e834c0136a8ca6@"
"r04921074","4","0.39","106112","@b9ca6c4cafdcc16d0df0e26fbc4759bb@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String LineStr;
            Hand TEMP;
 //************************* PriootyQ where **********************************\\   
        MaxPQ<Hand> pq = new MaxPQ<>();
            
        for(int i=0; i<count; i++){
            LineStr = br.readLine();
            String[] cardStr = LineStr.split("","");
            Card[] cardsArray = new Card[5];
            for(int j=0; j<5; j++){
            String[] sep = cardStr[j].split(""_"");
            Card card = new Card(sep[1], sep[0]);
            cardsArray[j] = card;
        //    System.out.println(card.getSuit()+""_""+card.getFace());            
            }
            Hand HandPQ = new Hand(cardsArray);
            pq.insert(HandPQ); 
        }
        
        for(int j=0; j<target-1; j++){
          pq.delMax();
        }
        TEMP = pq.delMax();
        
        for(int a=0; a<5; a++){    
        System.out.print(TEMP.getCards()[a].getSuit()+""_""+TEMP.getCards()[a].getFace());
        if(a<4)System.out.print("","");
       }
   //*************************************************************************\\     

        System.out.println();
        
        
        
        
        }
    }
}

@b9ca6c4cafdcc16d0df0e26fbc4759bb@"
"r04921074","4","0.38","106112","@d7b47978479b86aea6104f00c07f05ef@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String LineStr;
            Hand TEMP;
 //************************* PriootyQ where **********************************\\   
        MaxPQ<Hand> pq = new MaxPQ<>();
            
        for(int i=0; i<count; i++){
            LineStr = br.readLine();
            String[] cardStr = LineStr.split("","");
            Card[] cardsArray = new Card[5];
            for(int j=0; j<5; j++){
            String[] sep = cardStr[j].split(""_"");
            Card card = new Card(sep[1], sep[0]);
            cardsArray[j] = card;
        //    System.out.println(card.getSuit()+""_""+card.getFace());            
            }
            Hand HandPQ = new Hand(cardsArray);
            pq.insert(HandPQ); 
            if(pq.size()>count-target+1){pq.delMax();
        }
        }
       /* for(int j=0; j<target-1; j++){
          pq.delMax();
        }*/
        TEMP = pq.delMax();
        
        for(int a=0; a<5; a++){    
        System.out.print(TEMP.getCards()[a].getSuit()+""_""+TEMP.getCards()[a].getFace());
        if(a<4)System.out.print("","");
       }
   //*************************************************************************\\     

        System.out.println();
        
        
        
        
        
    }
}
}

@d7b47978479b86aea6104f00c07f05ef@"
"r04921074","7","0.141428571428571","114048","@223b676f0819b1641fae0c7f12065576@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String LineStr;
            Hand TEMP;
 //************************* PriootyQ where **********************************\\   
        MinPQ<Hand> pq = new MinPQ<>();
            
        for(int i=0; i<count; i++){
            LineStr = br.readLine();
            String[] cardStr = LineStr.split("","");
            Card[] cardsArray = new Card[5];
            for(int j=0; j<5; j++){
            String[] sep = cardStr[j].split(""_"");
            Card card = new Card(sep[1], sep[0]);
            cardsArray[j] = card;
        //    System.out.println(card.getSuit()+""_""+card.getFace());            
            }
            Hand HandPQ = new Hand(cardsArray);
            pq.insert(HandPQ); 
            if(pq.size()>target){pq.delMin();
        }
        }
       /* for(int j=0; j<target-1; j++){
          pq.delMax();
        }*/
        TEMP = pq.delMin();
        
        for(int a=0; a<5; a++){    
        System.out.print(TEMP.getCards()[a].getSuit()+""_""+TEMP.getCards()[a].getFace());
        if(a<4)System.out.print("","");
       }
   //*************************************************************************\\     

        System.out.println();
        
        
        
        
        
    }
}
}

@223b676f0819b1641fae0c7f12065576@"
"r02b48003","7","0.122857142857143","130592","@e0517857e588e9aeba75b772b140e059@/**
 * 此份作業需要同學讀進一個文字檔。文字檔的第一行會利用逗點隔開，其中包含兩個數字，
 * 第一個數字代表需要處理的 Hand 個數，第二個數字代表欲求得第幾大的 Hand。
 * 第二行開始到文件的結尾則為五張牌的組合。
 * 舉例來說，第一行為 4,3，即代表第 2~5 行為需要處理的 Hand，
 * 而答案則是要找出 2~5 行這 4 個 Hand 裡面第 3 大的 Hand。
 * 最後請輸出這個 Hand 的所有 Card (依據 Card 的大小，
 * 由小到大輸出)。
 */

//import edu.princeton.cs.algs4.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Comparator;
import java.util.Arrays;

/**
 *
 * @author clint
 */
public class HandPQ implements Comparable<HandPQ> {
    
    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    /**
     * Constructor
     * @param cards 
     */
    public HandPQ(Card[] cards){
        Arrays.sort(cards);
        this.cards = cards;
    }

    /**
     * compareTo
     * @param that
     * @return int; {-1, 0, 1}
     */
    public int compareTo(HandPQ that) {
        int[] thisHand = this.hand();
        int[] thatHand = that.hand();
        for (int i = 0; i < thisHand.length; i++) {
            if      (thisHand[i] < thatHand[i]) {return -1;}
            else if (thisHand[i] > thatHand[i]) {return  1;}
            else                                {continue; }
        } // end loop
        return 0;
    } // end func compareTo

     
    // Do not modified this function
    public Card[] getCards() { return this.cards; }
    
    /**
     * method: hand
     * the main method in the class; it determine the hands of cards
     * @return int[]
     */
    public int[] hand() {
        // first 
        int[] handFace = convertFace();
        int[] handSuit = convertSuit();
        
        // case 01: four kinds (in this case, it belongs to TwoPairs)
        if (sum(handFace) == 6) { 
            int idx = search(handFace, 3);
            return new int[] {
                mapHand(""TwoPairs""),
                mapFace(cards[idx], true),
                mapSuit(cards[idx])}; 
            
        // case02: full house
        } else if (sum(handFace) == 4) { 
            int idx = search(handFace, 2);
            return new int[] {
                mapHand(""fullhouse""),
                mapFace(cards[idx], true),
                mapSuit(cards[idx])}; 
        
        // case03: two pairs
        } else if (sum(handFace) == 2) { 
            int idx = search(handFace, 1);
            return new int[] {
                mapHand(""TwoPairs""),
                mapFace(cards[idx], true),
                mapSuit(cards[idx])}; 
            
        // case04: one pairs  
        } else if (sum(handFace) == 1) { 
            int idx = search(handFace, 1);
            return new int[] {
                mapHand(""OnePairs""),
                mapFace(cards[idx], true),
                mapSuit(cards[idx])}; 
        
        // case05: Flush, Straight or High Card
        } else if (sum(handFace) == 0)    { 
            // case 05-1: Flush (all the suits are the same)
            if (handSuit[4] == 4)         { 
                return new int[] {
                    mapHand(""Flush""),
                    mapFace(cards[4],true),
                    mapSuit(cards[4])};
            
            // case 05-2: Straight (with Ace be the largest card)
            } else if (isStraight(true)) { 
                return new int[] {
                    mapHand(""Straight""),
                    mapFace(cards[4], true),
                    mapSuit(cards[4])}; 
            
            // case 05-3: Straight (the smallest one: A 2 3 4 5)
            } else if (isStraight(false)) { 
                return new int[] {
                    mapHand(""Straight""),
                    5,
                    mapSuit(cards[0])}; 
                
            // case 05-4: High Card   
            } else { 
                return new int[] {
                    mapHand(""HighCard""),
                    mapFace(cards[4], true),
                    mapSuit(cards[4])}; 
            } // end inner if-else
            
        } else { 
            return new int[] {0};    
        } // end outer if-else
    } // end showCards
    
    /**
     * helper method: sum
     * sum all elements in an integer array
     * @param arr
     * @return int
     */
    private int sum(int[] arr) {
        int res = 0;
        for (int i = 0; i < arr.length; i++)
        { res += arr[i]; }
        return res;
    } // end sum
    
    /**
     * helper method: search
     * the method search the input number in the array
     * return the last match in order to get the largest cards
     * (search from the last item of array)
     * @param arr; input array
     * @param num; query number
     * @return integer 
     */
    private int search(int[] arr, int num) {
        for (int i = 4; i >= 0; i--) {
            if (arr[i] == num) { return i; }
        } // end loop
        return -1;
    } // end search
    
    /**
     * helper method: isStraight
     * determine whether the card is straight or not
     * @param isAce14
     * @return boolean; true if hand of cards is Straight, false otherwise
     */
    public boolean isStraight(boolean isAce14) {
        // initialization
        int[] numFaces = mapFaces(isAce14);
        Arrays.sort(numFaces);
        int res = 0;
        
        // check if face of cards[i] = face of cards[i-1] + 1
        for (int i = 1; i < numFaces.length; i++) {
            if (numFaces[i] - numFaces[i-1] == 1) res++;
        } // end for loop
        
        // return whether the cards is straight or not
        if (res == 4) return true;
        else          return false;
    } // end isStraight
    
    /**
     * helper method: convertFace
     * get sorted card array, convert into integer array
     * if face of cards[i] == face of cards[i-1], set a[i] = a[i-1] + 1
     * if face of cards[i] != face of cards[i-1], set a[i] = 0
     * Note: Face [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
     * @return int[]
     */
    public int[] convertFace() {
        // initialization
        int[] numFaces = mapFaces(true);
        int[] res = new int[cards.length];
        res[0] = 0;
        
        // convert the cards into the result array by face
        for (int i = 1; i < res.length; i++) {
            if (numFaces[i] == numFaces[i-1]) { res[i] = res[i-1] + 1; } 
            else                              { res[i] = 0; }
        } // end for loop
        return res;           
    } // end COnvertFace
    
    /**
     * helper method: convertSuit
     * get sorted card array, convert into integer array
     * if suit of cards[i] == suit of cards[i-1], set a[i] = a[i-1] + 1
     * if suit of cards[i] != suit of cards[i-1], set a[i] = 0
     * note:
     *   1. Spades, Hearts, Diamonds, Clubs
     *   2. the method is targeted for hand ""Flush""
     * @return int[]
     */
    public int[] convertSuit() {
        // initialization
        int[] numSuits = mapSuits();
        int[] res = new int[cards.length];
        res[0] = 0;
        
        // convert the cards into the result array by suit
        for (int i = 1; i < res.length; i++) {
            if (numSuits[i] == numSuits[i-1]) { res[i] = res[i-1] + 1; } 
            else                              { res[i] = 0; }
        } // end for loop
        
        return res;
    } // end convertSuit
    
    /**
     * helper method: mapFaces
     * extension of method mapFace; mapFaces utilize mapFace
     * to map the face of all cards
     * Note: Face [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
     * @param isAce14; should Ace be mapped to 14 or 1 (true -- 14, false -- 1
     * @return int[]
     */
    public int[] mapFaces(boolean isAce14) {
        // initialization 
        int[] face2Num = new int[cards.length];
        
        // map each cards to an integer 
        for (int i = 0; i < face2Num.length; i++) {
            face2Num[i] = mapFace(cards[i], isAce14);
        } // end for loop
        
        return face2Num;
    } // end mapCards
    
    /**
     * helper method: mapSuits
     * extension of method mapSuit; mapSuits utilize mapSuit
     * to map the suit of all cards
     * Note: Spades, Hearts, Diamonds, Clubs
     * @return int[]
     */
    public int[] mapSuits() {
        // initialization
        int[] suit2Num = new int[cards.length];
        
        // map each cards to an integer
        for (int i = 0; i < suit2Num.length; i++) {
            suit2Num[i] = mapSuit(cards[i]);
        } // end for loop
        
        return suit2Num;
    } // end mapCards
    
    
    /**
     * helper method: mapFace
     * convert the face into integer and return
     * Note: Face [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
     * A --- 14 or 1
     * K --- 13
     * Q --- 12
     * J --- 11
     * @param isAce14; should Ace be mapped to 14 or 1 (true -- 14, false -- 1
     * @return Integer
     */
    private Integer mapFace(Card card, boolean isAce14) {
        String cardFace = card.getFace();
        switch (cardFace) {
            // special cards: A K Q J
            case ""A"": if (isAce14) return 14;
                      else         return 1;
            case ""K"": return 13;
            case ""Q"": return 12;
            case ""J"": return 11;
                
            // normal cards: 2~10, convert string to Integer
            default:
                return Integer.valueOf(cardFace);
            } // end switch
    } // end func mapFace
    
    /**
     * helper method: mapSuit
     * return integer that corresponds to the suit
     * note: Spades, Hearts, Diamonds, Clubs
     * Spades   --- 4
     * Hearts   --- 3
     * Diamonds --- 2
     * Clubs    --- 1
     * @return Integer
     */
    private Integer mapSuit(Card card) {
        String cardSuit;
        cardSuit = card.getSuit();
            switch (cardSuit) {
                case ""Spades"":   return 4; // Spades
                case ""Hearts"":   return 3; // Hearts
                case ""Diamonds"": return 2; // Diamonds
                default:         return 1; // Clubs
            } // end switch
    } // end func mapSuit
    
    /**
     * helper method mapHand
     * this function decides the order of hands
     * note: full house > flush > straight > two pair > one pair > high card
     * @param strHand; the type of hand
     * @return integer 
     */
    private int mapHand(String strHand) {
        if      (strHand.equals(""fullhouse"")) { return  5; }
        else if (strHand.equals(""Flush""))     { return  4; }
        else if (strHand.equals(""Straight""))  { return  3; }
        else if (strHand.equals(""TwoPairs""))  { return  2; }
        else if (strHand.equals(""OnePairs""))  { return  1; }
        else if (strHand.equals(""HighCard""))  { return  0; }
        else                                  { return -1; }
    } // end func mapHand
    
    /**
     *  method: printCards
     *  output an array of Card
     */
    public void printCards() {
        System.out.print(cards[0].getSuit() + ""_"" + cards[0].getFace());
         for (int idx = 1; idx < cards.length; idx++) {
             System.out.print("","" + cards[idx].getSuit() + ""_"" + cards[idx].getFace());
         } // end for loop
         System.out.println();
    } // end func printCards
    
    public static void main(String[] args) throws Exception {
        // initialization
        int count  = 0;
        int target = 0;
        MinPQ<HandPQ> hands;
        Card[] cards;    
        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            // first line contain the number of hands and 
            // the kth largest hand needed to pick
            String[] header = br.readLine().split("","");
            count = Integer.parseInt(header[0]);
            target = Integer.parseInt(header[1]);
            
            // Priority Queue
            hands = new MinPQ<>(target + 1);
            
            // read in cards for each hand
            for (int idxHand = 0; idxHand < count; idxHand++){
                // read in cards and initialize cards
                header = br.readLine().split("","");
                cards = new Card[header.length];
                
                // setup each card and create hands
                for (int idxCard = 0; idxCard < header.length; idxCard++) {
                    String suit = header[idxCard].split(""_"")[0]; 
                    String face = header[idxCard].split(""_"")[1];
                    cards[idxCard] = new Card(face, suit);
                } // end inner for loop
                
                // insert into Priority Queue
                hands.insert(new HandPQ(cards));
                if (hands.size() > target) hands.delMin();
                
            } // end outer for loop
        } // end try
        
        // print out the kth largest hand
        //System.out.println(count);
        //System.out.println(target);
        hands.delMin().printCards();
    }
}
@e0517857e588e9aeba75b772b140e059@"
"r03228006","4","0.39","103520","@a9013cb9156de1224eb9022d05a47bd7@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        //""input14.txt""  args[0]
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] HandArray = new Hand[count];
            int idx = 0;
            
            for(String in = br.readLine(); in != null; in = br.readLine()) {
                Card[][] cardsArray = new Card[count][5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[idx][i] = card;
                    //System.out.println(cardsArray[idx][i].getFace());
                }
                Hand player = new Hand(cardsArray[idx]);
                HandArray[idx++] = player;
                //拿完這個人的五張牌之後               
            }
                Arrays.sort(HandArray);
                int ii = 0;
                //System.out.println(target);
                for (int i = 0; i<5; i++){
                  System.out.printf(HandArray[count-target].getCards()[i].getSuit());
                  System.out.printf(""_"");
                  System.out.printf(HandArray[count-target].getCards()[i].getFace());
                  ii++;
                  while(ii<5){
                  System.out.printf("","");
                  break;}
                }          
    }
}}

@a9013cb9156de1224eb9022d05a47bd7@"
"r03228006","6","0.99","122960","@f289119413a9c3079f59d307b9749c0d@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] HandArray = new Hand[target];
            int idx = 0;
            
            for(String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cards = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cards[i] = card;
                }
                Hand player = new Hand(cards);
                idx++;
                while(idx > target){
                   Arrays.sort(HandArray);
                   if(player.compareTo(HandArray[0])>0){
                   HandArray[0] = player;}
                   break;}
                while(idx <= target){
                   HandArray[idx-1] = player;
                   break;}

                //如果player能夠擠進target，才能夠被放到array            
            }
                Arrays.sort(HandArray);
                int ii = 0;
                //System.out.println(target);
                for (int i = 0; i<5; i++){
                  System.out.printf(HandArray[0].getCards()[i].getSuit());
                  System.out.printf(""_"");
                  System.out.printf(HandArray[0].getCards()[i].getFace());
                  ii++;
                  while(ii<5){
                  System.out.printf("","");
                  break;}
                }          
    }
}}

@f289119413a9c3079f59d307b9749c0d@"
"r03228006","6","0.98","125072","@9b54c91a44adf9ee8d0a2b2381be90ca@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        //""input14.txt""  args[0]
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] HandArray = new Hand[target];
            int idx = 0;
            
            for(String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cards = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cards[i] = card;
                    //System.out.println(cardsArray[idx][i].getFace());
                }
                Hand player = new Hand(cards);
                idx++;
                while(idx > target){
                   Arrays.sort(HandArray);
                   //System.out.println(player.compareTo(HandArray[0]));
                   if(player.compareTo(HandArray[0])>0){
                   HandArray[0] = player;}
                   break;}
                while(idx <= target){
                   //System.out.println(idx);
                   HandArray[idx-1] = player;
                   break;}
                //如果player能夠擠進target，才能夠被放到array            
            }
                Arrays.sort(HandArray);
                //System.out.println(HandArray[0].compareTo(HandArray[1]));
                //System.out.println(HandArray[0].compareTo(HandArray[2]));
                int ii = 0;
                //System.out.println(target);
                for (int i = 0; i<5; i++){
                  System.out.printf(HandArray[0].getCards()[i].getSuit());
                  System.out.printf(""_"");
                  System.out.printf(HandArray[0].getCards()[i].getFace());
                  ii++;
                  while(ii<5){
                  System.out.printf("","");
                  break;}
                }          
    }
}}

@9b54c91a44adf9ee8d0a2b2381be90ca@"
"r03228006","6","0.95","122528","@6b86fe8fa2dea1dd085b6f5a8fff2eac@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        //""input14.txt""  args[0]
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            String[] header = br.readLine().split("","");
            //int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] HandArray = new Hand[target];
            int idx = 0;
            
            for(String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cards = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cards[i] = card;
                    //System.out.println(cardsArray[idx][i].getFace());
                }
                Hand player = new Hand(cards);
                idx++;
                while(idx > target){
                   Arrays.sort(HandArray);
                   //System.out.println(player.compareTo(HandArray[0]));
                   if(player.compareTo(HandArray[0])>0){
                   HandArray[0] = player;}
                   break;}
                while(idx <= target){
                   //System.out.println(idx);
                   HandArray[idx-1] = player;
                   break;}
                //如果player能夠擠進target，才能夠被放到array            
            }
                Arrays.sort(HandArray);
                //System.out.println(HandArray[0].compareTo(HandArray[1]));
                //System.out.println(HandArray[0].compareTo(HandArray[2]));
                idx = 0;
                //System.out.println(target);
                for (int i = 0; i<5; i++){
                  System.out.printf(HandArray[0].getCards()[i].getSuit());
                  System.out.printf(""_"");
                  System.out.printf(HandArray[0].getCards()[i].getFace());
                  idx++;
                  while(idx<5){
                  System.out.printf("","");
                  break;}
                }          
    }
}}

@6b86fe8fa2dea1dd085b6f5a8fff2eac@"
"r03222054","0","0","0","@519e669e9d4776b8e6c85614848c144b@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;
public class HandPQ 
{
    private static class HandOrder implements Comparator<Hand> 
    {
        public int compare(Hand o1, Hand o2) {
            return 1*(o1.compareTo(o2));
        }
    }
    
     // public static final Comparator<Hand> SUIT_ORDER = new HandOrder();
    
    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Comparator<Hand> Hand_ORDER = new HandOrder();
            PriorityQueue<Hand> player = new PriorityQueue<Hand>(count,Hand_ORDER) ;
            int tempCount = 0;
            String line;
            while((line = br.readLine())!=null )
            {
                tempCount++;
                String[] cards =line.split("","");
                
                Card[] cardArray=new Card[5];
                for(int i= 0; i<5; i++)
                {
                    Card newCard;
                    String[] temp = cards[i].split(""_"");
                    newCard = new Card(temp[0], temp[1]);
                    cardArray[i] = newCard;
                }
                Arrays.sort(cardArray);
                Hand newHand= new Hand(cardArray);
           //     Hand.sort();
                player.offer(newHand);
            }
           // System.out.print(tempCount);
            for (int i= 1; i<4; i++)
            {
                player.remove();
            }
             Card[] temp = player.peek().getCards();
            for (int i= 4; i>0; i--)
            {
               String face = temp[i].getFace();
                String suit= temp[i].getSuit();
                System.out.print(face + ""_""+suit +"", "");
            }
          

        }
    }

   

}

@519e669e9d4776b8e6c85614848c144b@"
"r03222054","0","0","0","@f4f47bac68841ba7d871d54813d4bdda@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;
public class HandPQ 
{
    private static class HandOrder implements Comparator<Hand> 
    {
        public int compare(Hand o1, Hand o2) {
            return 1*(o1.compareTo(o2));
        }
    }
  
    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Comparator<Hand> Hand_ORDER = new HandOrder();
            PriorityQueue<Hand> player = new PriorityQueue<Hand>(count,Hand_ORDER) ;
            int tempCount = 0;
            String line;
            while((line = br.readLine())!=null )
            {
                tempCount++;
                String[] cards =line.split("","");
                
                Card[] cardArray=new Card[5];
                for(int i= 0; i<5; i++)
                {
                    Card newCard;
                    String[] temp = cards[i].split(""_"");
                    newCard = new Card(temp[0], temp[1]);
                    cardArray[i] = newCard;
                }
                Arrays.sort(cardArray);
                Hand newHand= new Hand(cardArray);
           //     Hand.sort();
                player.offer(newHand);
            }
           // System.out.print(tempCount);
            for (int i= 1; i<4; i++)
            {
                player.remove();
            }
             Card[] temp = player.peek().getCards();
            for (int i= 4; i>0; i--)
            {
               String face = temp[i].getFace();
                String suit= temp[i].getSuit();
                System.out.print(face + ""_""+suit +"", "");
            }
        }
    }

}

@f4f47bac68841ba7d871d54813d4bdda@"
"r03222054","0","0","0","@e6452a43aaedb29bd828c5a6af1f4150@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;
public class HandPQ 
{
    private static class HandOrder implements Comparator<Hand> 
    {
        public int compare(Hand o1, Hand o2) {
            return 1*(o1.compareTo(o2));
        }
    }
  
    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Comparator<Hand> Hand_ORDER = new HandOrder();
            PriorityQueue<Hand> player = new PriorityQueue<Hand>(target,Hand_ORDER) ;
            int tempCount = 0;
            String line;
            while((line = br.readLine())!=null )
            {
                tempCount++;
                String[] cards =line.split("","");
                
                Card[] cardArray=new Card[5];
                for(int i= 0; i<5; i++)
                {
                    Card newCard;
                    String[] temp = cards[i].split(""_"");
                    newCard = new Card(temp[0], temp[1]);
                    cardArray[i] = newCard;
                }
                Arrays.sort(cardArray);
                Hand newHand= new Hand(cardArray);
           //     Hand.sort();
                player.offer(newHand);
            }
           // System.out.print(tempCount);
            for (int i= 1; i<4; i++)
            {
                player.remove();
            }
             Card[] temp = player.peek().getCards();
            for (int i= 4; i>0; i--)
            {
               String face = temp[i].getFace();
                String suit= temp[i].getSuit();
                System.out.print(face + ""_""+suit +"", "");
            }
        }
    }

}

@e6452a43aaedb29bd828c5a6af1f4150@"
"r03222054","0","0","0","@f7a5c7e2f1d34689e31be9d20d0bb8ae@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;
public class HandPQ 
{
    private static class HandOrder implements Comparator<Hand> 
    {
        public int compare(Hand o1, Hand o2) {
            return -1*(o1.compareTo(o2));
        }
    }
  
    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Comparator<Hand> Hand_ORDER = new HandOrder();
            PriorityQueue<Hand> player = new PriorityQueue<Hand>(target,Hand_ORDER) ;
            int tempCount = 0;
            String line;
            while((line = br.readLine())!=null )
            {
                tempCount++;
                String[] cards =line.split("","");
                
                Card[] cardArray=new Card[5];
                for(int i= 0; i<5; i++)
                {
                    Card newCard;
                    String[] temp = cards[i].split(""_"");
                    newCard = new Card(temp[0], temp[1]);
                    cardArray[i] = newCard;
                }
                Arrays.sort(cardArray);
                Hand newHand= new Hand(cardArray);
           //     Hand.sort();
                player.offer(newHand);
            }
           // System.out.print(tempCount);

             Card[] temp = player.peek().getCards();
            for (int i= 4; i>0; i--)
            {
               String face = temp[i].getFace();
                String suit= temp[i].getSuit();
                System.out.print(face + ""_""+suit +"", "");
            }
        }
    }

}

@f7a5c7e2f1d34689e31be9d20d0bb8ae@"
"r04228002","6","0.98","120096","@40a5958328c533418752089ad6842700@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author Lenovo
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            MinPQ<Hand> HandSet = new MinPQ<Hand>(target);
            for(int i=0;i<target;i++){
                String[] row1 = br.readLine().split("","");
                //System.out.println(row1[0]);
                
                Card[] cardsArray1 = new Card[5];
                for (int j=0;j<5;j++){
                    String[] row2 = row1[j].split(""_"");
                    //Card aCard=new Card(row2[1],row2[0]);
                    //cardsArray1[j] = aCard;
                    cardsArray1[j] = new Card(row2[1],row2[0]);
                }
                
                //Hand aHand = new Hand(cardsArray1);
                //HandSet.insert(aHand); 
                HandSet.insert(new Hand(cardsArray1)); 
            }
            
            for(int i=target;i<count;i++){
                Hand TempMin = HandSet.delMin();
                
                String[] row1 = br.readLine().split("","");
                
                Card[] cardsArray1 = new Card[5];
                for (int j=0;j<5;j++){
                    String[] row2 = row1[j].split(""_"");
                    //Card aCard=new Card(row2[1],row2[0]);
                    //cardsArray1[j] = aCard;
                    cardsArray1[j] = new Card(row2[1],row2[0]);
                }
                Hand aHand = new Hand(cardsArray1);
                
                int r = aHand.compareTo(TempMin);
                if (r==1)HandSet.insert(aHand);
                else HandSet.insert(TempMin);
            }
            
            //Hand FinalMin = HandSet.delMin();
            //Card[] FinalCard = FinalMin.getCards();
            Card[] FinalCard = HandSet.delMin().getCards();
            //String[] Result = new String[5];
            /*
            for (int i=0;i<5;i++){
                System.out.println(FinalCard[i].getSuit()+""_""+FinalCard[i].getFace());
            }
            */
            
            String Result2 = """";
            for (int i=0;i<4;i++){
                //String face = FinalCard[i].getFace();
                //String suit = FinalCard[i].getSuit();
                Result2=Result2+FinalCard[i].getSuit()+""_""+FinalCard[i].getFace()+"","";
            }
            //String face = FinalCard[4].getFace();
            //String suit = FinalCard[4].getSuit();
            Result2=Result2+FinalCard[4].getSuit()+""_""+FinalCard[4].getFace();
            
            System.out.println(Result2);
                    

        }
    } 
}

@40a5958328c533418752089ad6842700@"
"r04228002","3","0.5","110336","@cbb1e29ca0f32c573eb3e93ad0d8521f@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author Lenovo
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            MinPQ<Hand> HandSet = new MinPQ<Hand>(target);
            for(int i=0;i<target;i++){
                String[] row1 = br.readLine().split("","");
                //System.out.println(row1[0]);
                
                Card[] cardsArray1 = new Card[5];
                for (int j=0;j<5;j++){
                    String[] row2 = row1[j].split(""_"");
                    //Card aCard=new Card(row2[1],row2[0]);
                    //cardsArray1[j] = aCard;
                    cardsArray1[j] = new Card(row2[1],row2[0]);
                }
                
                //Hand aHand = new Hand(cardsArray1);
                //HandSet.insert(aHand); 
                HandSet.insert(new Hand(cardsArray1)); 
            }
            
            for(int i=target;i<count;i++){
                //Hand TempMin = HandSet.delMin();
                Hand TempMin = HandSet.min();
                
                String[] row1 = br.readLine().split("","");
                
                Card[] cardsArray1 = new Card[5];
                for (int j=0;j<5;j++){
                    String[] row2 = row1[j].split(""_"");
                    //Card aCard=new Card(row2[1],row2[0]);
                    //cardsArray1[j] = aCard;
                    cardsArray1[j] = new Card(row2[1],row2[0]);
                }
                Hand aHand = new Hand(cardsArray1);
                
                int r = aHand.compareTo(TempMin);
                if (r==1){
                    HandSet.delMin();
                    HandSet.insert(aHand);
                }
                else HandSet.insert(TempMin);
            }
            
            //Hand FinalMin = HandSet.delMin();
            //Card[] FinalCard = FinalMin.getCards();
            Card[] FinalCard = HandSet.delMin().getCards();
            //String[] Result = new String[5];
            /*
            for (int i=0;i<5;i++){
                System.out.println(FinalCard[i].getSuit()+""_""+FinalCard[i].getFace());
            }
            */
            
            String Result2 = """";
            for (int i=0;i<4;i++){
                //String face = FinalCard[i].getFace();
                //String suit = FinalCard[i].getSuit();
                Result2=Result2+FinalCard[i].getSuit()+""_""+FinalCard[i].getFace()+"","";
            }
            //String face = FinalCard[4].getFace();
            //String suit = FinalCard[4].getSuit();
            Result2=Result2+FinalCard[4].getSuit()+""_""+FinalCard[4].getFace();
            
            System.out.println(Result2);
                    

        }
    } 
}

@cbb1e29ca0f32c573eb3e93ad0d8521f@"
"r03222054","0","0","0","@2ef48d773ef3dbb4c7a9e9842614808e@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.PriorityQueue;
public class HandPQ 
{
    static public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards)
    {
        this.cards = cards;
        return;
    }
    private static int faceToInt(String thatFace)
    {
         // String thatFace = that.getFace();
          int faceInt2 = 0;
        
    if(thatFace.equals(""2""))
            faceInt2 = 2;
        if(thatFace.equals(""3""))
            faceInt2 = 3;
        if(thatFace.equals(""4""))
            faceInt2 = 4;
        if(thatFace.equals(""5""))
            faceInt2 = 5;
        if(thatFace.equals(""6""))
            faceInt2 = 6;
        if(thatFace.equals(""7""))
            faceInt2 = 7;
        if(thatFace.equals(""8""))
            faceInt2 = 8;
        if(thatFace.equals(""9""))
            faceInt2 = 9;
        if(thatFace.equals(""10""))
            faceInt2 = 10;
        if(thatFace.equals(""J""))
            faceInt2 = 11;
        if(thatFace.equals(""Q""))
            faceInt2 = 12;
        if(thatFace.equals(""K""))
            faceInt2 = 13;
        if(thatFace.equals(""A""))
            faceInt2 = 14;
        return faceInt2;
    }
       private static int suitToInt(String suitStr) 
       {
        int num1 = 0;
      //  String suitStr = that.getSuit();
        if (suitStr.equals(""Spades""))
            num1=  3;
        else if (suitStr.equals(""Hearts""))
            num1 =2;
        else if (suitStr.equals(""Diamonds""))
            num1=1;
        else if(suitStr.equals(""Clubs""))
            num1 = 0;
        
        return num1;
       }
    
    
    
    public int compareTo(Hand that) 
    {
        Card[] thisCard = this.getCards();
        Card[] thatCard = that.getCards();
        
        int thisKey = checkCombination(this.cards);
        int thatKey = checkCombination(that.cards);
        // complete this function so the Player can be sorted according to the cards he/she has.
        return thisKey-thatKey;
    }
    
    public static boolean isStraight(List<List<Integer>> that)
    {
        
        //Arrays.sort(that);
        int key0=that.get(0).get(0);//
        for( int i =1; i<5; i++)
        {
           if( i==4 && that.get(0).get(0) == 2 && that.get(i).get(0) ==14)
               return true;
           else if(that.get(i).get(0)-key0 != i)
           // if(Card.faceToMap(that[i].getFace()) - key0 != i)
                return false;
        }
        return true;
    }
    
public static boolean isFlush(Card[] that)
{
    String lastSuit = that[0].getSuit();
    for(int i=1; i< 5; i++)
    {
        if(!that[i].getSuit().equals(lastSuit))
            return false;
        
    }
    return true;
    
}
    



public static Integer checkCombination(Card[] that)
    {
        Arrays.sort(that);
        String lastCardFace = that[0].getFace();
        int kind =1;//how many kind of face;
        
        for(int i =1; i<5; i++)
        {
            if(!that[i].getFace().equals(lastCardFace))
                kind++;
        }
        List<List<Integer>> count = new ArrayList<List<Integer>>() {} ;// how many 
        int index = 0;
        count.add(new ArrayList<Integer>());
        count.get(index).add(faceToInt(lastCardFace));
        int maxIndexCount =1;
        int key= 4*(faceToInt(that[4].getFace())-1) + suitToInt(that[4].getSuit()) ;
        
        for( int i =1; i<5; i++)
        {
            if(that[i].getFace().equals(lastCardFace))
            {
                count.get(index).add(faceToInt(lastCardFace));
                if(count.get(index).size() == maxIndexCount)
                {
                  //  maxIndexCount++;
                    key = 4*(faceToInt(that[i].getFace())-1) + suitToInt(that[i].getSuit()) ;
                }
                
                if(count.get(index).size() > maxIndexCount)
                {
                    maxIndexCount++;
                    key = 4*(faceToInt(that[i].getFace())-1) + suitToInt(that[i].getSuit()) ;
                }
            }
            
            else
            {
              index ++;
                lastCardFace = that[i].getFace();
                 count.add(new ArrayList<Integer>());
                count.get(index).add(faceToInt(lastCardFace));
            }         
        }       
        if (count.size() == 2 && maxIndexCount ==3)// fullhouse
            return 6*56+key;
        
        else if(count.size() ==5 )
        {
            if (isFlush(that))
                return 5*56 +key;
            
            else if(Hand.isStraight(count))
            {
                if(that[4].getFace().equals(""A"") && that[3].getFace().equals(""5""))
                {
                  // System.out.print(that[3].getFace());
                    key = 4*(faceToInt(that[3].getFace())-1) + suitToInt(that[3].getSuit()) ;
                   // return 4*56 +key
                }
                return 4*56 + key;
            }

            
            else return 1*56+key;
        }
        
        if(maxIndexCount ==2 &&count.size() == 3 )
            return 3*56+key;
        
        else if(maxIndexCount ==2 &&count.size() == 4 )
            return 2*56+key;
      
       // String one = Integer.toString(maxIndexCount);
       // String two = Integer.toString(count.size());
    //    String three = new String(one + "" ""+two);
        return 0;
        

    }
    // TODO


      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}
    private static class HandOrder implements Comparator<Hand> 
    {
        public int compare(Hand o1, Hand o2) {
            return -1*(o1.compareTo(o2));
        }
    }
  
    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Comparator<Hand> Hand_ORDER = new HandOrder();
            PriorityQueue<Hand> player = new PriorityQueue<Hand>(target,Hand_ORDER) ;
            int tempCount = 0;
            String line;
            while((line = br.readLine())!=null )
            {
                tempCount++;
                String[] cards =line.split("","");
                
                Card[] cardArray=new Card[5];
                for(int i= 0; i<5; i++)
                {
                    Card newCard;
                    String[] temp = cards[i].split(""_"");
                    newCard = new Card(temp[0], temp[1]);
                    cardArray[i] = newCard;
                }
                Arrays.sort(cardArray);
                Hand newHand= new Hand(cardArray);
           //     Hand.sort();
                player.offer(newHand);
            }
           // System.out.print(tempCount);

             Card[] temp = player.peek().getCards();
            for (int i= 4; i>0; i--)
            {
               String face = temp[i].getFace();
                String suit= temp[i].getSuit();
                System.out.print(face + ""_""+suit +"", "");
            }
        }
    }

}

@2ef48d773ef3dbb4c7a9e9842614808e@"
"r03222054","0","0","0","@2ef48d773ef3dbb4c7a9e9842614808e@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.PriorityQueue;
public class HandPQ 
{
    static public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards)
    {
        this.cards = cards;
        return;
    }
    private static int faceToInt(String thatFace)
    {
         // String thatFace = that.getFace();
          int faceInt2 = 0;
        
    if(thatFace.equals(""2""))
            faceInt2 = 2;
        if(thatFace.equals(""3""))
            faceInt2 = 3;
        if(thatFace.equals(""4""))
            faceInt2 = 4;
        if(thatFace.equals(""5""))
            faceInt2 = 5;
        if(thatFace.equals(""6""))
            faceInt2 = 6;
        if(thatFace.equals(""7""))
            faceInt2 = 7;
        if(thatFace.equals(""8""))
            faceInt2 = 8;
        if(thatFace.equals(""9""))
            faceInt2 = 9;
        if(thatFace.equals(""10""))
            faceInt2 = 10;
        if(thatFace.equals(""J""))
            faceInt2 = 11;
        if(thatFace.equals(""Q""))
            faceInt2 = 12;
        if(thatFace.equals(""K""))
            faceInt2 = 13;
        if(thatFace.equals(""A""))
            faceInt2 = 14;
        return faceInt2;
    }
       private static int suitToInt(String suitStr) 
       {
        int num1 = 0;
      //  String suitStr = that.getSuit();
        if (suitStr.equals(""Spades""))
            num1=  3;
        else if (suitStr.equals(""Hearts""))
            num1 =2;
        else if (suitStr.equals(""Diamonds""))
            num1=1;
        else if(suitStr.equals(""Clubs""))
            num1 = 0;
        
        return num1;
       }
    
    
    
    public int compareTo(Hand that) 
    {
        Card[] thisCard = this.getCards();
        Card[] thatCard = that.getCards();
        
        int thisKey = checkCombination(this.cards);
        int thatKey = checkCombination(that.cards);
        // complete this function so the Player can be sorted according to the cards he/she has.
        return thisKey-thatKey;
    }
    
    public static boolean isStraight(List<List<Integer>> that)
    {
        
        //Arrays.sort(that);
        int key0=that.get(0).get(0);//
        for( int i =1; i<5; i++)
        {
           if( i==4 && that.get(0).get(0) == 2 && that.get(i).get(0) ==14)
               return true;
           else if(that.get(i).get(0)-key0 != i)
           // if(Card.faceToMap(that[i].getFace()) - key0 != i)
                return false;
        }
        return true;
    }
    
public static boolean isFlush(Card[] that)
{
    String lastSuit = that[0].getSuit();
    for(int i=1; i< 5; i++)
    {
        if(!that[i].getSuit().equals(lastSuit))
            return false;
        
    }
    return true;
    
}
    



public static Integer checkCombination(Card[] that)
    {
        Arrays.sort(that);
        String lastCardFace = that[0].getFace();
        int kind =1;//how many kind of face;
        
        for(int i =1; i<5; i++)
        {
            if(!that[i].getFace().equals(lastCardFace))
                kind++;
        }
        List<List<Integer>> count = new ArrayList<List<Integer>>() {} ;// how many 
        int index = 0;
        count.add(new ArrayList<Integer>());
        count.get(index).add(faceToInt(lastCardFace));
        int maxIndexCount =1;
        int key= 4*(faceToInt(that[4].getFace())-1) + suitToInt(that[4].getSuit()) ;
        
        for( int i =1; i<5; i++)
        {
            if(that[i].getFace().equals(lastCardFace))
            {
                count.get(index).add(faceToInt(lastCardFace));
                if(count.get(index).size() == maxIndexCount)
                {
                  //  maxIndexCount++;
                    key = 4*(faceToInt(that[i].getFace())-1) + suitToInt(that[i].getSuit()) ;
                }
                
                if(count.get(index).size() > maxIndexCount)
                {
                    maxIndexCount++;
                    key = 4*(faceToInt(that[i].getFace())-1) + suitToInt(that[i].getSuit()) ;
                }
            }
            
            else
            {
              index ++;
                lastCardFace = that[i].getFace();
                 count.add(new ArrayList<Integer>());
                count.get(index).add(faceToInt(lastCardFace));
            }         
        }       
        if (count.size() == 2 && maxIndexCount ==3)// fullhouse
            return 6*56+key;
        
        else if(count.size() ==5 )
        {
            if (isFlush(that))
                return 5*56 +key;
            
            else if(Hand.isStraight(count))
            {
                if(that[4].getFace().equals(""A"") && that[3].getFace().equals(""5""))
                {
                  // System.out.print(that[3].getFace());
                    key = 4*(faceToInt(that[3].getFace())-1) + suitToInt(that[3].getSuit()) ;
                   // return 4*56 +key
                }
                return 4*56 + key;
            }

            
            else return 1*56+key;
        }
        
        if(maxIndexCount ==2 &&count.size() == 3 )
            return 3*56+key;
        
        else if(maxIndexCount ==2 &&count.size() == 4 )
            return 2*56+key;
      
       // String one = Integer.toString(maxIndexCount);
       // String two = Integer.toString(count.size());
    //    String three = new String(one + "" ""+two);
        return 0;
        

    }
    // TODO


      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}
    private static class HandOrder implements Comparator<Hand> 
    {
        public int compare(Hand o1, Hand o2) {
            return -1*(o1.compareTo(o2));
        }
    }
  
    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Comparator<Hand> Hand_ORDER = new HandOrder();
            PriorityQueue<Hand> player = new PriorityQueue<Hand>(target,Hand_ORDER) ;
            int tempCount = 0;
            String line;
            while((line = br.readLine())!=null )
            {
                tempCount++;
                String[] cards =line.split("","");
                
                Card[] cardArray=new Card[5];
                for(int i= 0; i<5; i++)
                {
                    Card newCard;
                    String[] temp = cards[i].split(""_"");
                    newCard = new Card(temp[0], temp[1]);
                    cardArray[i] = newCard;
                }
                Arrays.sort(cardArray);
                Hand newHand= new Hand(cardArray);
           //     Hand.sort();
                player.offer(newHand);
            }
           // System.out.print(tempCount);

             Card[] temp = player.peek().getCards();
            for (int i= 4; i>0; i--)
            {
               String face = temp[i].getFace();
                String suit= temp[i].getSuit();
                System.out.print(face + ""_""+suit +"", "");
            }
        }
    }

}

@2ef48d773ef3dbb4c7a9e9842614808e@"
"r04228002","7","0.14","119664","@d2a66c6b437bf88c2206185c0573ddd3@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author Lenovo
 */
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            MinPQ<Hand> HandSet = new MinPQ<Hand>(target);
            for(int i=0;i<target;i++){
                String[] row1 = br.readLine().split("","");
                //System.out.println(row1[0]);
                
                Card[] cardsArray1 = new Card[5];
                for (int j=0;j<5;j++){
                    String[] row2 = row1[j].split(""_"");
                    //Card aCard=new Card(row2[1],row2[0]);
                    //cardsArray1[j] = aCard;
                    cardsArray1[j] = new Card(row2[1],row2[0]);
                }
                
                //Hand aHand = new Hand(cardsArray1);
                //HandSet.insert(aHand); 
                HandSet.insert(new Hand(cardsArray1)); 
            }
            
            for(int i=target;i<count;i++){
                //Hand TempMin = HandSet.delMin();
                Hand TempMin = HandSet.min();
                
                String[] row1 = br.readLine().split("","");
                
                Card[] cardsArray1 = new Card[5];
                for (int j=0;j<5;j++){
                    String[] row2 = row1[j].split(""_"");
                    //Card aCard=new Card(row2[1],row2[0]);
                    //cardsArray1[j] = aCard;
                    cardsArray1[j] = new Card(row2[1],row2[0]);
                }
                Hand aHand = new Hand(cardsArray1);
                
                int r = aHand.compareTo(TempMin);
                if (r==1){
                    HandSet.delMin();
                    HandSet.insert(aHand);
                }
                //else HandSet.insert(TempMin);
            }
            
            //Hand FinalMin = HandSet.delMin();
            //Card[] FinalCard = FinalMin.getCards();
            Card[] FinalCard = HandSet.delMin().getCards();
            //String[] Result = new String[5];
            /*
            for (int i=0;i<5;i++){
                System.out.println(FinalCard[i].getSuit()+""_""+FinalCard[i].getFace());
            }
            */
            
            String Result2 = """";
            for (int i=0;i<4;i++){
                //String face = FinalCard[i].getFace();
                //String suit = FinalCard[i].getSuit();
                Result2=Result2+FinalCard[i].getSuit()+""_""+FinalCard[i].getFace()+"","";
            }
            //String face = FinalCard[4].getFace();
            //String suit = FinalCard[4].getSuit();
            Result2=Result2+FinalCard[4].getSuit()+""_""+FinalCard[4].getFace();
            
            System.out.println(Result2);
                    

        }
    } 
}

@d2a66c6b437bf88c2206185c0573ddd3@"
"b01502105","0","1.02","119408","@225ba574d31fb10834cdcebc090aad9a@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]); //Nth big
            MinPQ<Hand> pq = new  MinPQ<Hand>(target+1);
            
            for(int i=0; i<count; i++){
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0; j < 5; j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
//                    System.out.printf( card.suit_int +"" ""+ card.face_int + ""\n"");
                }
                Hand hand = new Hand(cardsArray);
                if(pq.size() < target){ pq.insert(hand);}
                else if(pq.size() == target){
                    pq.insert(hand);
                    Hand temp = pq.delMin();                   
                }
            }
            Hand Nth_big = pq.delMin();
            Card[] cards = Nth_big.getCards();
            System.out.print(cards[0].getSuit() + ""_"" + cards[0].getFace() + "",""
                           + cards[1].getSuit() + ""_"" + cards[1].getFace() + "",""
                           + cards[2].getSuit() + ""_"" + cards[2].getFace() + "",""
                           + cards[3].getSuit() + ""_"" + cards[3].getFace() + "",""
                           + cards[4].getSuit() + ""_"" + cards[4].getFace() + "","" + ""\n"" );
        }
    }
}

@225ba574d31fb10834cdcebc090aad9a@"
"b01502105","7","0.145714285714286","122320","@3cf6d7d05bd68593fd8491f6a31f2da1@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]); //Nth big
            MinPQ<Hand> pq = new  MinPQ<Hand>(target+1);
            
            for(int i=0; i<count; i++){
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0; j < 5; j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
//                    System.out.printf( card.suit_int +"" ""+ card.face_int + ""\n"");
                }
                Hand hand = new Hand(cardsArray);
                if(pq.size() < target){ pq.insert(hand);}
                else if(pq.size() == target){
                    pq.insert(hand);
                    Hand temp = pq.delMin();                   
                }
            }
            Hand Nth_big = pq.delMin();
            Card[] cards = Nth_big.getCards();
            System.out.print(cards[0].getSuit() + ""_"" + cards[0].getFace() + "",""
                           + cards[1].getSuit() + ""_"" + cards[1].getFace() + "",""
                           + cards[2].getSuit() + ""_"" + cards[2].getFace() + "",""
                           + cards[3].getSuit() + ""_"" + cards[3].getFace() + "",""
                           + cards[4].getSuit() + ""_"" + cards[4].getFace() + ""\n"" );
        }
    }
}

@3cf6d7d05bd68593fd8491f6a31f2da1@"
"r03228006","7","0.145714285714286","119168","@5192d05fc0535f214968767fd33253e2@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        //""input14.txt""  args[0]
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            String[] header = br.readLine().split("","");
            //int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ<Hand> KK = new MinPQ();
            int idx = 0;
            
            for(String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cards = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_""); 
                    cards[i] = new Card(sep[1], sep[0]);
                    //System.out.println(cardsArray[idx][i].getFace());
                }
                Hand player = new Hand(cards);
                KK.insert(player);
                idx++;
                if (KK.size() > target){
                  KK.delMin();
                }     
            }
                idx = 0;
                //System.out.println(target);
                for (int i = 0; i<5; i++){
                  System.out.printf(KK.min().getCards()[i].getSuit());
                  System.out.printf(""_"");
                  System.out.printf(KK.min().getCards()[i].getFace());
                  idx++;
                  while(idx<5){
                  System.out.printf("","");
                  break;}
                }          
    }
}}

@5192d05fc0535f214968767fd33253e2@"
"r02b48003","7","0.128571428571429","125296","@3a17edf2a15138b3a6d6ad6fb430a186@/**
 * 此份作業需要同學讀進一個文字檔。文字檔的第一行會利用逗點隔開，其中包含兩個數字，
 * 第一個數字代表需要處理的 Hand 個數，第二個數字代表欲求得第幾大的 Hand。
 * 第二行開始到文件的結尾則為五張牌的組合。
 * 舉例來說，第一行為 4,3，即代表第 2~5 行為需要處理的 Hand，
 * 而答案則是要找出 2~5 行這 4 個 Hand 裡面第 3 大的 Hand。
 * 最後請輸出這個 Hand 的所有 Card (依據 Card 的大小，
 * 由小到大輸出)。
 */

//import edu.princeton.cs.algs4.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Comparator;
import java.util.Arrays;

/**
 *
 * @author clint
 */
public class HandPQ implements Comparable<HandPQ> {
    
    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    /**
     * Constructor
     * @param cards 
     */
    public HandPQ(Card[] cards){
        Arrays.sort(cards);
        this.cards = cards;
    }

    /**
     * compareTo
     * @param that
     * @return int; {-1, 0, 1}
     */
    public int compareTo(HandPQ that) {
        int[] thisHand = this.hand();
        int[] thatHand = that.hand();
        for (int i = 0; i < thisHand.length; i++) {
            if      (thisHand[i] < thatHand[i]) {return -1;}
            else if (thisHand[i] > thatHand[i]) {return  1;}
            else                                {continue; }
        } // end loop
        return 0;
    } // end func compareTo

     
    // Do not modified this function
    public Card[] getCards() { return this.cards; }
    
    /**
     * method: hand
     * the main method in the class; it determine the hands of cards
     * @return int[]
     */
    public int[] hand() {
        // first 
        int[] handFace = convertFace();
        int[] handSuit = convertSuit();
        
        // case 01: four kinds (in this case, it belongs to TwoPairs)
        if (sum(handFace) == 6) { 
            int idx = search(handFace, 3);
            return new int[] {
                mapHand(""TwoPairs""),
                mapFace(cards[idx], true),
                mapSuit(cards[idx])}; 
            
        // case02: full house
        } else if (sum(handFace) == 4) { 
            int idx = search(handFace, 2);
            return new int[] {
                mapHand(""fullhouse""),
                mapFace(cards[idx], true),
                mapSuit(cards[idx])}; 
        
        // case03: three kind
        } else if (sum(handFace) == 3) { 
            int idx = search(handFace, 2);
            return new int[] {
                mapHand(""OnePairs""),
                mapFace(cards[idx], true),
                mapSuit(cards[idx])}; 
            
        // case04: two pairs
        } else if (sum(handFace) == 2) { 
            int idx = search(handFace, 1);
            return new int[] {
                mapHand(""TwoPairs""),
                mapFace(cards[idx], true),
                mapSuit(cards[idx])}; 
            
        // case05: one pairs  
        } else if (sum(handFace) == 1) { 
            int idx = search(handFace, 1);
            return new int[] {
                mapHand(""OnePairs""),
                mapFace(cards[idx], true),
                mapSuit(cards[idx])}; 
        
        // case06: Flush, Straight or High Card
        } else if (sum(handFace) == 0)    { 
            // case 06-1: Flush (all the suits are the same)
            if (handSuit[4] == 4)         { 
                return new int[] {
                    mapHand(""Flush""),
                    mapFace(cards[4],true),
                    mapSuit(cards[4])};
            
            // case 06-2: Straight (with Ace be the largest card)
            } else if (isStraight(true)) { 
                return new int[] {
                    mapHand(""Straight""),
                    mapFace(cards[4], true),
                    mapSuit(cards[4])}; 
            
            // case 06-3: Straight (the smallest one: A 2 3 4 5)
            } else if (isStraight(false)) { 
                return new int[] {
                    mapHand(""Straight""),
                    5,
                    mapSuit(cards[0])}; 
                
            // case 06-4: High Card   
            } else { 
                return new int[] {
                    mapHand(""HighCard""),
                    mapFace(cards[4], true),
                    mapSuit(cards[4])}; 
            } // end inner if-else
            
        } else { 
            return new int[] {-1,-1,-1};    
        } // end outer if-else
    } // end showCards
    
    /**
     * helper method: sum
     * sum all elements in an integer array
     * @param arr
     * @return int
     */
    private int sum(int[] arr) {
        int res = 0;
        for (int i = 0; i < arr.length; i++)
        { res += arr[i]; }
        return res;
    } // end sum
    
    /**
     * helper method: search
     * the method search the input number in the array
     * return the last match in order to get the largest cards
     * (search from the last item of array)
     * @param arr; input array
     * @param num; query number
     * @return integer 
     */
    private int search(int[] arr, int num) {
        for (int i = 4; i >= 0; i--) {
            if (arr[i] == num) { return i; }
        } // end loop
        return -1;
    } // end search
    
    /**
     * helper method: isStraight
     * determine whether the card is straight or not
     * @param isAce14
     * @return boolean; true if hand of cards is Straight, false otherwise
     */
    public boolean isStraight(boolean isAce14) {
        // initialization
        int[] numFaces = mapFaces(isAce14);
        Arrays.sort(numFaces);
        int res = 0;
        
        // check if face of cards[i] = face of cards[i-1] + 1
        for (int i = 1; i < numFaces.length; i++) {
            if (numFaces[i] - numFaces[i-1] == 1) res++;
        } // end for loop
        
        // return whether the cards is straight or not
        if (res == 4) return true;
        else          return false;
    } // end isStraight
    
    /**
     * helper method: convertFace
     * get sorted card array, convert into integer array
     * if face of cards[i] == face of cards[i-1], set a[i] = a[i-1] + 1
     * if face of cards[i] != face of cards[i-1], set a[i] = 0
     * Note: Face [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
     * @return int[]
     */
    public int[] convertFace() {
        // initialization
        int[] numFaces = mapFaces(true);
        int[] res = new int[cards.length];
        res[0] = 0;
        
        // convert the cards into the result array by face
        for (int i = 1; i < res.length; i++) {
            if (numFaces[i] == numFaces[i-1]) { res[i] = res[i-1] + 1; } 
            else                              { res[i] = 0; }
        } // end for loop
        return res;           
    } // end COnvertFace
    
    /**
     * helper method: convertSuit
     * get sorted card array, convert into integer array
     * if suit of cards[i] == suit of cards[i-1], set a[i] = a[i-1] + 1
     * if suit of cards[i] != suit of cards[i-1], set a[i] = 0
     * note:
     *   1. Spades, Hearts, Diamonds, Clubs
     *   2. the method is targeted for hand ""Flush""
     * @return int[]
     */
    public int[] convertSuit() {
        // initialization
        int[] numSuits = mapSuits();
        int[] res = new int[cards.length];
        res[0] = 0;
        
        // convert the cards into the result array by suit
        for (int i = 1; i < res.length; i++) {
            if (numSuits[i] == numSuits[i-1]) { res[i] = res[i-1] + 1; } 
            else                              { res[i] = 0; }
        } // end for loop
        
        return res;
    } // end convertSuit
    
    /**
     * helper method: mapFaces
     * extension of method mapFace; mapFaces utilize mapFace
     * to map the face of all cards
     * Note: Face [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
     * @param isAce14; should Ace be mapped to 14 or 1 (true -- 14, false -- 1
     * @return int[]
     */
    public int[] mapFaces(boolean isAce14) {
        // initialization 
        int[] face2Num = new int[cards.length];
        
        // map each cards to an integer 
        for (int i = 0; i < face2Num.length; i++) {
            face2Num[i] = mapFace(cards[i], isAce14);
        } // end for loop
        
        return face2Num;
    } // end mapCards
    
    /**
     * helper method: mapSuits
     * extension of method mapSuit; mapSuits utilize mapSuit
     * to map the suit of all cards
     * Note: Spades, Hearts, Diamonds, Clubs
     * @return int[]
     */
    public int[] mapSuits() {
        // initialization
        int[] suit2Num = new int[cards.length];
        
        // map each cards to an integer
        for (int i = 0; i < suit2Num.length; i++) {
            suit2Num[i] = mapSuit(cards[i]);
        } // end for loop
        
        return suit2Num;
    } // end mapCards
    
    
    /**
     * helper method: mapFace
     * convert the face into integer and return
     * Note: Face [A, 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K]
     * A --- 14 or 1
     * K --- 13
     * Q --- 12
     * J --- 11
     * @param isAce14; should Ace be mapped to 14 or 1 (true -- 14, false -- 1
     * @return Integer
     */
    private Integer mapFace(Card card, boolean isAce14) {
        String cardFace = card.getFace();
        switch (cardFace) {
            // special cards: A K Q J
            case ""A"": if (isAce14) return 14;
                      else         return 1;
            case ""K"": return 13;
            case ""Q"": return 12;
            case ""J"": return 11;
                
            // normal cards: 2~10, convert string to Integer
            default:
                return Integer.valueOf(cardFace);
            } // end switch
    } // end func mapFace
    
    /**
     * helper method: mapSuit
     * return integer that corresponds to the suit
     * note: Spades, Hearts, Diamonds, Clubs
     * Spades   --- 4
     * Hearts   --- 3
     * Diamonds --- 2
     * Clubs    --- 1
     * @return Integer
     */
    private Integer mapSuit(Card card) {
        String cardSuit;
        cardSuit = card.getSuit();
            switch (cardSuit) {
                case ""Spades"":   return 4; // Spades
                case ""Hearts"":   return 3; // Hearts
                case ""Diamonds"": return 2; // Diamonds
                default:         return 1; // Clubs
            } // end switch
    } // end func mapSuit
    
    /**
     * helper method mapHand
     * this function decides the order of hands
     * note: full house > flush > straight > two pair > one pair > high card
     * @param strHand; the type of hand
     * @return integer 
     */
    private int mapHand(String strHand) {
        switch (strHand) {
            case ""fullhouse"": return  5;
            case ""Flush"":     return  4;
            case ""Straight"":  return  3;
            case ""TwoPairs"":  return  2;
            case ""OnePairs"":  return  1;
            case ""HighCard"":  return  0;
            default:/*Error*/ return -1;
        }
    } // end func mapHand
    
    /**
     *  method: strtCards
     *  output an array of Card
     *  this function can be used for debugging codes
     */
    public String strCards() {
        String res = """";
        res += (cards[0].getSuit() + ""_"" + cards[0].getFace());

        for (int idx = 1; idx < cards.length; idx++) {
            res += ("","" + cards[idx].getSuit() + ""_"" + cards[idx].getFace());
        } // end for loop
         
        return res;
    } // end func printCards
    
    /**
     * method: strHand
     * output the type of hand and the compare cards of that hand
     * this function can be used for debugging codes
     */
    public String strHand() {
        int[] resHand = hand();
        String res = """";
        // first number represent the type of hand
        switch (resHand[0]) {
            case 5:  res += ""Full House ""; break;
            case 4:  res += ""Flush      ""; break; 
            case 3:  res += ""Straight   ""; break;
            case 2:  res += ""Two Pairs  ""; break;
            case 1:  res += ""One Pairs  ""; break;
            case 0:  res += ""High Card  ""; break;
            default: res += ""Error      "";
        } // end switch
        
        // second number represent the face of cards
        switch (resHand[1]) {
            case 14: res += ""A""; break;
            case 13: res += ""K""; break;
            case 12: res += ""Q""; break; 
            case 11: res += ""J""; break;
            case  1: res += ""A""; break;
            default: res += Integer.valueOf(resHand[1]);
        } // end switch
        res += "" "";
        
        // second number represent the face of cards
        switch (resHand[2]) {
            case 4:  res += ""Spades   ""; break;
            case 3:  res += ""Hearts   ""; break;
            case 2:  res += ""Diamonds ""; break; 
            case 1:  res += ""Clubs    ""; break;
            default: res += ""Error    "";
        } // end switch
        
        return res;
    } // end func printCards
    
    public static void main(String[] args) throws Exception {
        // initialization
        int count  = 0;
        int target = 0;
        MinPQ<HandPQ> hands;
        //HandPQ[] arrHands;
        Card[] cards;    
        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            // first line contain the number of hands and 
            // the kth largest hand needed to pick
            String[] header = br.readLine().split("","");
            count  = Integer.parseInt(header[0]);
            target = Integer.parseInt(header[1]);
            
            // set up array and Priority Queue
            //arrHands = new HandPQ[count];
            hands = new MinPQ<>(target + 1);
            
            // read in cards for each hand
            for (int idxHand = 0; idxHand < count; idxHand++){
                // read in cards and initialize cards
                header = br.readLine().split("","");
                cards = new Card[header.length];
                
                // setup each card and create hands
                for (int idxCard = 0; idxCard < header.length; idxCard++) {
                    String suit = header[idxCard].split(""_"")[0]; 
                    String face = header[idxCard].split(""_"")[1];
                    cards[idxCard] = new Card(face, suit);
                } // end inner for loop
                
                // store the hands
                //arrHands[idxHand] = new HandPQ(cards);
                
                // insert into Priority Queue
                hands.insert(new HandPQ(cards));
                if (hands.size() > target) hands.delMin();
                
            } // end outer for loop
        } // end try
        
        // System.out.println(count);
        // System.out.println(target);
        // print out the kth largest hand
        //for (int idx = 0; idx < count; idx++) {
        //    System.out.println(idx + "" "" + arrHands[idx].strHand() + """" + arrHands[idx].strCards());
        //} // end for loop
        
        //System.out.println(""====================="");
        System.out.println(hands.delMin().strCards());
        
        //String[] arrCard = {""Hearts_4"", ""Diamonds_8"", ""Diamonds_6"", ""Spades_6"", ""Hearts_6""};
        //cards = new Card[arrCard.length];
        //for (int idx = 0; idx < 5; idx++) {
        //    String suit = arrCard[idx].split(""_"")[0]; 
        //    String face = arrCard[idx].split(""_"")[1];
        //    cards[idx] = new Card(face, suit);
        //} // end for loop
        //HandPQ test = new HandPQ(cards);
        //System.out.println(test.strHand() + """" + test.strCards());
        
        
    }
}
@3a17edf2a15138b3a6d6ad6fb430a186@"
"b03611011","0","0.145714285714286","122320","@08e4eec4c1d7f5900612d3d54da0d5e1@import edu.princeton.cs.algs4.MaxPQ;
import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx = 0;
            Hand[] playerArray = new Hand[count];
            MaxPQ<Hand> pq = new MaxPQ<>(count);
//            Arrays.sort(playerArray);
//        while (!StdIn.isEmpty()) {
//            String item = StdIn.readString();
//            if (!item.equals(""-"")) pq.insert(item);
//            else if (!pq.isEmpty()) StdOut.print(pq.delMax() + "" "");
//        }
            for(String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                playerArray[idx++] = hand;
            }

            for (int i = 0; i < count; i++) {
                Hand[] min = new Hand[1];
                for (int j = i + 1; j < count; j++) {
                    if (playerArray[i].compareTo(playerArray[j]) == -1) {
                        min[0] = playerArray[i];
                        playerArray[i] = playerArray[j];
                        playerArray[j] = min[0];
                    }
                }
            }
 
            Arrays.sort(playerArray[target-1].getCards());          
            System.out.println(playerArray[target-1].getCards()[0].getSuit()+""_""+playerArray[target-1].getCards()[0].getFace()+"",""
                    +playerArray[target-1].getCards()[1].getSuit()+""_""+playerArray[target-1].getCards()[1].getFace()+"",""+playerArray[target-1].getCards()[2].getSuit()+""_""+playerArray[target-1].getCards()[2].getFace()
                    +"",""+playerArray[target-1].getCards()[3].getSuit()+""_""+playerArray[target-1].getCards()[3].getFace()+"",""+playerArray[target-1].getCards()[4].getSuit()+""_""+playerArray[target-1].getCards()[4].getFace());
        }
    }
}

@08e4eec4c1d7f5900612d3d54da0d5e1@"
"b03611011","0","0.145714285714286","122320","@27fe8153414537ef466b031626ddafeb@import edu.princeton.cs.algs4.MaxPQ;
import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx = 0;
            Hand[] playerArray = new Hand[count];
//            MaxPQ<Hand> pq = new MaxPQ<>(count);
//            Arrays.sort(playerArray);
//        while (!StdIn.isEmpty()) {
//            String item = StdIn.readString();
//            if (!item.equals(""-"")) pq.insert(item);
//            else if (!pq.isEmpty()) StdOut.print(pq.delMax() + "" "");
//        }
            for(String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                playerArray[idx++] = hand;
            }

            for (int i = 0; i < count; i++) {
                Hand[] min = new Hand[1];
                for (int j = i + 1; j < count; j++) {
                    if (playerArray[i].compareTo(playerArray[j]) == -1) {
                        min[0] = playerArray[i];
                        playerArray[i] = playerArray[j];
                        playerArray[j] = min[0];
                    }
                }
            }
 
            Arrays.sort(playerArray[target-1].getCards());          
            System.out.println(playerArray[target-1].getCards()[0].getSuit()+""_""+playerArray[target-1].getCards()[0].getFace()+"",""
                    +playerArray[target-1].getCards()[1].getSuit()+""_""+playerArray[target-1].getCards()[1].getFace()+"",""+playerArray[target-1].getCards()[2].getSuit()+""_""+playerArray[target-1].getCards()[2].getFace()
                    +"",""+playerArray[target-1].getCards()[3].getSuit()+""_""+playerArray[target-1].getCards()[3].getFace()+"",""+playerArray[target-1].getCards()[4].getSuit()+""_""+playerArray[target-1].getCards()[4].getFace());
        }
    }
}

@27fe8153414537ef466b031626ddafeb@"
"b03611011","4","0.39","105568","@7383a9ea3514eca5e7b2ee47deec3848@import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx = 0;
            Hand[] playerArray = new Hand[count+1];
            
            for(String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                playerArray[idx++] = hand;
            }

            for (int i = 0; i < count; i++) {
                Hand[] min = new Hand[1];
                for (int j = i + 1; j < count; j++) {
                    if (playerArray[i].compareTo(playerArray[j]) == -1) {
                        min[0] = playerArray[i];
                        playerArray[i] = playerArray[j];
                        playerArray[j] = min[0];
                    }
                }
            }
            Arrays.sort(playerArray[target-1].getCards());
            System.out.println(playerArray[target-1].getCards()[0].getSuit()+""_""+playerArray[target-1].getCards()[0].getFace()+"",""
                    +playerArray[target-1].getCards()[1].getSuit()+""_""+playerArray[target-1].getCards()[1].getFace()+"",""+playerArray[target-1].getCards()[2].getSuit()
                    +""_""+playerArray[target-1].getCards()[2].getFace()
                    +"",""+playerArray[target-1].getCards()[3].getSuit()+""_""+playerArray[target-1].getCards()[3].getFace()+"",""+playerArray[target-1].getCards()[4].getSuit()
                    +""_""+playerArray[target-1].getCards()[4].getFace());
        }
    }
}
@7383a9ea3514eca5e7b2ee47deec3848@"
"b03611011","4","0.39","105648","@ca43c20967a40e9f1f6c53488febc27d@import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx = 0;
            Hand[] playerArray = new Hand[count+1];
            
            for(String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                playerArray[idx++] = hand;
            }

            for (int i = 0; i < count; i++) {
                for (int j = i + 1; j < count; j++) {
                    if (playerArray[i].compareTo(playerArray[j]) == -1) {
                        playerArray[count] = playerArray[i];
                        playerArray[i] = playerArray[j];
                        playerArray[j] = playerArray[count];
                    }
                }
            }
            Arrays.sort(playerArray[target-1].getCards());
            System.out.println(playerArray[target-1].getCards()[0].getSuit()+""_""+playerArray[target-1].getCards()[0].getFace()+"",""
                    +playerArray[target-1].getCards()[1].getSuit()+""_""+playerArray[target-1].getCards()[1].getFace()+"",""+playerArray[target-1].getCards()[2].getSuit()
                    +""_""+playerArray[target-1].getCards()[2].getFace()
                    +"",""+playerArray[target-1].getCards()[3].getSuit()+""_""+playerArray[target-1].getCards()[3].getFace()+"",""+playerArray[target-1].getCards()[4].getSuit()
                    +""_""+playerArray[target-1].getCards()[4].getFace());
        }
    }
}
@ca43c20967a40e9f1f6c53488febc27d@"
"r04631036","0","0.67","105472","@a34f36fca4335966a88059066d351d61@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {
       
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            String out = br.readLine();
            System.out.printf(""%s"",out);
            
        }
      
    }
    
}

@a34f36fca4335966a88059066d351d61@"
"r04631036","0","0.29","102016","@610db017eade679b0272df89d1a11e7f@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {
       
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            String out = br.readLine();
            String out = br.readLine();
            System.out.printf(""%s"",out);
            
        }
      
    }
    
}

@610db017eade679b0272df89d1a11e7f@"
"r04631036","0","0.67","105472","@610db017eade679b0272df89d1a11e7f@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {
       
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            String out = br.readLine();
            String out = br.readLine();
            System.out.printf(""%s"",out);
            
        }
      
    }
    
}

@610db017eade679b0272df89d1a11e7f@"
"r04631036","0","0.67","105904","@567b98a1f8400e16d98f47c0088fd6b8@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {
       
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String out = br.readLine();
            String out1 = br.readLine();
            String out2 = br.readLine();
            System.out.printf(""%s"",out1);
            
        }
      
    }
    
}

@567b98a1f8400e16d98f47c0088fd6b8@"
"r04631036","0","0.65","105840","@93fc293165ecf796339f8b0db598bb56@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {
       
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String out = br.readLine();
            String out1 = br.readLine();
            String out2 = br.readLine();
            System.out.printf(""%s"",out2);
            
        }
      
    }
    
}

@93fc293165ecf796339f8b0db598bb56@"
"r04631036","1","0.7","105776","@b29a2ce34aed2856195fb0dc00e1d61f@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {
       
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String out = br.readLine();
            String out1 = br.readLine();
            String out2 = br.readLine();
            String out3 = br.readLine();
            System.out.printf(""%s"",out3);
            
        }
      
    }
    
}

@b29a2ce34aed2856195fb0dc00e1d61f@"
"r04631036","0","0.68","105824","@29de2650368444ccdd7e6062345150da@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {
       
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String out = br.readLine();
            String out1 = br.readLine();
            String out2 = br.readLine();
            String out3 = br.readLine();
            String out4 = br.readLine();
            System.out.printf(""%s"",out4);
            
        }
      
    }
    
}

@29de2650368444ccdd7e6062345150da@"
"b03611011","0","0.67","105904","@19437a92b908a87fc725553142805022@
import edu.princeton.cs.algs4.MaxPQ;
import edu.princeton.cs.algs4.MinPQ;
import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            MinPQ<Hand> pq = new MinPQ<>();
            for (String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for (int i = 0; i < 5; i++) {String[] sep = cardStr[i].split(""_"");Card card = new Card(sep[1], sep[0]);cardsArray[i] = card;
                }
                Hand item = new Hand(cardsArray);
                pq.insert(item);
                if (pq.size() > target) {
                    pq.delMin();
                }
            }

//            for (String in = br.readLine(); in != null; in = br.readLine()) {
//                Card[] cardsArray = new Card[5];
//                String[] cardStr = in.split("","");
//                for (int i = 0; i < 5; i++) {
//                    String[] sep = cardStr[i].split(""_"");
//                    Card card = new Card(sep[1], sep[0]);
//                    cardsArray[i] = card;
//                }
//                Hand hand = new Hand(cardsArray);
//                playerArray[idx++] = hand;
//            }
//
//            for (int i = 0; i < count; i++) {
//                for (int j = i + 1; j < count; j++) {
//                    if (playerArray[i].compareTo(playerArray[j]) == -1) {
//                        playerArray[count] = playerArray[i];
//                        playerArray[i] = playerArray[j];
//                        playerArray[j] = playerArray[count];
//                    }
//                }
//            }
            Arrays.sort(pq.min().getCards());
            System.out.println(pq.min().getCards()[0].getSuit() + ""_"" + pq.min().getCards()[0].getFace() + "",""
                    + pq.min().getCards()[1].getSuit() + ""_"" + pq.min().getCards()[1].getFace() + "","" + pq.min().getCards()[2].getSuit()
                    + ""_"" + pq.min().getCards()[2].getFace()
                    + "","" + pq.min().getCards()[3].getSuit() + ""_"" + pq.min().getCards()[3].getFace() + "","" + pq.min().getCards()[4].getSuit()
                    + ""_"" + pq.min().getCards()[4].getFace());
        }
    }
}

@19437a92b908a87fc725553142805022@"
"b03611011","0","0.67","105904","@19437a92b908a87fc725553142805022@
import edu.princeton.cs.algs4.MaxPQ;
import edu.princeton.cs.algs4.MinPQ;
import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            MinPQ<Hand> pq = new MinPQ<>();
            for (String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for (int i = 0; i < 5; i++) {String[] sep = cardStr[i].split(""_"");Card card = new Card(sep[1], sep[0]);cardsArray[i] = card;
                }
                Hand item = new Hand(cardsArray);
                pq.insert(item);
                if (pq.size() > target) {
                    pq.delMin();
                }
            }

//            for (String in = br.readLine(); in != null; in = br.readLine()) {
//                Card[] cardsArray = new Card[5];
//                String[] cardStr = in.split("","");
//                for (int i = 0; i < 5; i++) {
//                    String[] sep = cardStr[i].split(""_"");
//                    Card card = new Card(sep[1], sep[0]);
//                    cardsArray[i] = card;
//                }
//                Hand hand = new Hand(cardsArray);
//                playerArray[idx++] = hand;
//            }
//
//            for (int i = 0; i < count; i++) {
//                for (int j = i + 1; j < count; j++) {
//                    if (playerArray[i].compareTo(playerArray[j]) == -1) {
//                        playerArray[count] = playerArray[i];
//                        playerArray[i] = playerArray[j];
//                        playerArray[j] = playerArray[count];
//                    }
//                }
//            }
            Arrays.sort(pq.min().getCards());
            System.out.println(pq.min().getCards()[0].getSuit() + ""_"" + pq.min().getCards()[0].getFace() + "",""
                    + pq.min().getCards()[1].getSuit() + ""_"" + pq.min().getCards()[1].getFace() + "","" + pq.min().getCards()[2].getSuit()
                    + ""_"" + pq.min().getCards()[2].getFace()
                    + "","" + pq.min().getCards()[3].getSuit() + ""_"" + pq.min().getCards()[3].getFace() + "","" + pq.min().getCards()[4].getSuit()
                    + ""_"" + pq.min().getCards()[4].getFace());
        }
    }
}

@19437a92b908a87fc725553142805022@"
"b03611011","0","0.67","105904","@c2bbad2cc9ddb3a4c7e1aecd58629858@
import edu.princeton.cs.algs4.MinPQ;
import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            MinPQ<Hand> pq = new MinPQ<>();
            for (String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for (int i = 0; i < 5; i++) {String[] sep = cardStr[i].split(""_"");Card card = new Card(sep[1], sep[0]);cardsArray[i] = card;
                }
                Hand item = new Hand(cardsArray);
                pq.insert(item);
                if (pq.size() > target) {
                    pq.delMin();
                }
            }

//            for (String in = br.readLine(); in != null; in = br.readLine()) {
//                Card[] cardsArray = new Card[5];
//                String[] cardStr = in.split("","");
//                for (int i = 0; i < 5; i++) {
//                    String[] sep = cardStr[i].split(""_"");
//                    Card card = new Card(sep[1], sep[0]);
//                    cardsArray[i] = card;
//                }
//                Hand hand = new Hand(cardsArray);
//                playerArray[idx++] = hand;
//            }
//
//            for (int i = 0; i < count; i++) {
//                for (int j = i + 1; j < count; j++) {
//                    if (playerArray[i].compareTo(playerArray[j]) == -1) {
//                        playerArray[count] = playerArray[i];
//                        playerArray[i] = playerArray[j];
//                        playerArray[j] = playerArray[count];
//                    }
//                }
//            }
            Arrays.sort(pq.min().getCards());
            System.out.println(pq.min().getCards()[0].getSuit() + ""_"" + pq.min().getCards()[0].getFace() + "",""
                    + pq.min().getCards()[1].getSuit() + ""_"" + pq.min().getCards()[1].getFace() + "","" + pq.min().getCards()[2].getSuit()
                    + ""_"" + pq.min().getCards()[2].getFace()
                    + "","" + pq.min().getCards()[3].getSuit() + ""_"" + pq.min().getCards()[3].getFace() + "","" + pq.min().getCards()[4].getSuit()
                    + ""_"" + pq.min().getCards()[4].getFace());
        }
    }
}

@c2bbad2cc9ddb3a4c7e1aecd58629858@"
"b03611011","0","0.67","105904","@c2bbad2cc9ddb3a4c7e1aecd58629858@
import edu.princeton.cs.algs4.MinPQ;
import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            MinPQ<Hand> pq = new MinPQ<>();
            for (String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for (int i = 0; i < 5; i++) {String[] sep = cardStr[i].split(""_"");Card card = new Card(sep[1], sep[0]);cardsArray[i] = card;
                }
                Hand item = new Hand(cardsArray);
                pq.insert(item);
                if (pq.size() > target) {
                    pq.delMin();
                }
            }

//            for (String in = br.readLine(); in != null; in = br.readLine()) {
//                Card[] cardsArray = new Card[5];
//                String[] cardStr = in.split("","");
//                for (int i = 0; i < 5; i++) {
//                    String[] sep = cardStr[i].split(""_"");
//                    Card card = new Card(sep[1], sep[0]);
//                    cardsArray[i] = card;
//                }
//                Hand hand = new Hand(cardsArray);
//                playerArray[idx++] = hand;
//            }
//
//            for (int i = 0; i < count; i++) {
//                for (int j = i + 1; j < count; j++) {
//                    if (playerArray[i].compareTo(playerArray[j]) == -1) {
//                        playerArray[count] = playerArray[i];
//                        playerArray[i] = playerArray[j];
//                        playerArray[j] = playerArray[count];
//                    }
//                }
//            }
            Arrays.sort(pq.min().getCards());
            System.out.println(pq.min().getCards()[0].getSuit() + ""_"" + pq.min().getCards()[0].getFace() + "",""
                    + pq.min().getCards()[1].getSuit() + ""_"" + pq.min().getCards()[1].getFace() + "","" + pq.min().getCards()[2].getSuit()
                    + ""_"" + pq.min().getCards()[2].getFace()
                    + "","" + pq.min().getCards()[3].getSuit() + ""_"" + pq.min().getCards()[3].getFace() + "","" + pq.min().getCards()[4].getSuit()
                    + ""_"" + pq.min().getCards()[4].getFace());
        }
    }
}

@c2bbad2cc9ddb3a4c7e1aecd58629858@"
"b03611011","0","0.67","105904","@c2bbad2cc9ddb3a4c7e1aecd58629858@
import edu.princeton.cs.algs4.MinPQ;
import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            MinPQ<Hand> pq = new MinPQ<>();
            for (String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for (int i = 0; i < 5; i++) {String[] sep = cardStr[i].split(""_"");Card card = new Card(sep[1], sep[0]);cardsArray[i] = card;
                }
                Hand item = new Hand(cardsArray);
                pq.insert(item);
                if (pq.size() > target) {
                    pq.delMin();
                }
            }

//            for (String in = br.readLine(); in != null; in = br.readLine()) {
//                Card[] cardsArray = new Card[5];
//                String[] cardStr = in.split("","");
//                for (int i = 0; i < 5; i++) {
//                    String[] sep = cardStr[i].split(""_"");
//                    Card card = new Card(sep[1], sep[0]);
//                    cardsArray[i] = card;
//                }
//                Hand hand = new Hand(cardsArray);
//                playerArray[idx++] = hand;
//            }
//
//            for (int i = 0; i < count; i++) {
//                for (int j = i + 1; j < count; j++) {
//                    if (playerArray[i].compareTo(playerArray[j]) == -1) {
//                        playerArray[count] = playerArray[i];
//                        playerArray[i] = playerArray[j];
//                        playerArray[j] = playerArray[count];
//                    }
//                }
//            }
            Arrays.sort(pq.min().getCards());
            System.out.println(pq.min().getCards()[0].getSuit() + ""_"" + pq.min().getCards()[0].getFace() + "",""
                    + pq.min().getCards()[1].getSuit() + ""_"" + pq.min().getCards()[1].getFace() + "","" + pq.min().getCards()[2].getSuit()
                    + ""_"" + pq.min().getCards()[2].getFace()
                    + "","" + pq.min().getCards()[3].getSuit() + ""_"" + pq.min().getCards()[3].getFace() + "","" + pq.min().getCards()[4].getSuit()
                    + ""_"" + pq.min().getCards()[4].getFace());
        }
    }
}

@c2bbad2cc9ddb3a4c7e1aecd58629858@"
"b03611035","4","0.38","106144","@95811f75580f6c68958915c2923fa54a@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx = 0;
            Hand[] playerArray = new Hand[count];
            //construct players' hands
            for(int x=0;x<count;x++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                playerArray[x] = new Hand(cardsArray);
                //System.out.println(0);
            }
            MaxPQ <Hand>gg=new MaxPQ(playerArray);
            for(int i=0;i<target;i++){                
                if(i==target-1){
                    playerArray[0]=gg.delMax();
                    break;
                }else gg.delMax();
            }
            MinPQ<Card>haha=new MinPQ(playerArray[0].getCards());
            
            //haha.insert(playerArray[0].getCards());
            for(int i=0;i<5;i++){
                Card ff=haha.delMin();
                String face=ff.getFace();
                String suit=ff.getSuit();
                System.out.print(suit);
                System.out.print(""_"");
                System.out.print(face);
                if(i!=4) System.out.print("","");
            }
        }
    }
}

@95811f75580f6c68958915c2923fa54a@"
"r04921115","4","0.4","105648","@1381067b0fc125c1dd48d852094d85ca@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
    	MinPQ<Hand> pq = new MinPQ<Hand>();
    	
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
        	String[] header = br.readLine().split("","");
        		
        	int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
        	
            Hand[] handArray = new Hand[count];
        	
            Card card = null;
        	for(int j = 0; j < count ; j++){
        		Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Arrays.sort(cardsArray);
                Hand handtemp = new Hand(cardsArray);
                handArray[j] = handtemp;
                pq.insert(handtemp);
                if(pq.size()>target){
                	pq.delMin();
                }
//              Hand handele = new Hand(cardsArray);
//            	pq.insert(handele);
//            	Hand test = pq.min();
//            	Card[] testc = test.getCards();
//            	System.out.println(testc[4].getSuit());
//                if(pq.size() > target){
//                	Card[] mincard = pq.min().getCards();
//                    for(int i = 0 ; i < mincard.length ; i++){
//                    	System.out.print(mincard[i].getSuit() + ""_"" + mincard[i].getFace());
//                    	if(i!=(mincard.length-1)){
//                    		System.out.print("","");
//                    	}
//                    }
//                    pq.delMin();
//                	System.out.println(""last time"");
//                }
            }

        	//for(int i = 0 ; i<pq.size(); i++){
        		if(!pq.isEmpty()){
        			Hand handt = pq.min();
        			Card[] crdt = handt.getCards();
        			for(int j = 0 ; j<5; j++){
                    	System.out.print(crdt[j].getSuit()+""_""+crdt[j].getFace());
                    	if(j!=4){
                    		System.out.print("","");
                    	}
            		}
        			pq.delMin();
        		}
            	//System.out.println();
        	//}
    		//System.out.println(pq.size());
        	        	
        	
        	
//        	for(int j = 0; j < count ; j++){
//        		pq.insert(handArray[j]);
//        	}
//        	pq.delMin();
//        	for(int i = 0 ; i<pq.size(); i++){
//        		if(!pq.isEmpty()){
//        			Hand handt = pq.min();
//        			Card[] crdt = handt.getCards();
//        			for(int j = 0 ; j<5; j++){
//                    	System.out.print(crdt[j].getSuit()+""_""+crdt[j].getFace());
//                    	if(j!=4){
//                    		System.out.print("","");
//                    	}
//            		}
//        			pq.delMin();
//        		}
//            	System.out.println();
//        	}
//    		System.out.println(pq.size());
//        	System.out.println();
//
//
//        	//print all for test
//        	for(int i = 0 ; i<count; i++){
//        		Card[] crd = handArray[i].getCards();
//        		for(int j = 0 ; j<5; j++){
//                	System.out.print(crd[j].getSuit()+""_""+crd[j].getFace());
//                	if(j!=4){
//                		System.out.print("","");
//                	}
//        		}
//        		System.out.println();
//        	}
        	
//            pq.delMin();
//            Hand test = pq.min();
//            Card[] mincard = test.getCards();
//            for(int i = 0 ; i < mincard.length ; i++){
//            	System.out.print(mincard[i].getSuit() + ""_"" + mincard[i].getFace());
//            	if(i!=(mincard.length-1)){
//            		System.out.print("","");
//            	}
//            }
        }
    }
}

@1381067b0fc125c1dd48d852094d85ca@"
"f02631008","1","1.31","126176","@45d1adea4e1daa413d0723349245d644@import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.File;
import java.util.Scanner;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        
        File file = new File(args[0]);
        try{
            Scanner File_in = new Scanner(file);
            String line_1 = File_in.nextLine();
            String[] Nums = line_1.split("","");

            int count = Integer.parseInt(Nums[0]);
            int target = Integer.parseInt(Nums[1]);
//            System.out.println(count);
            
            MinPQ pq = new MinPQ();
            
            Hand[] ahand = new Hand[1];
            Card[] handcard = new Card[5];
            while (File_in.hasNextLine())
            {
                String line_2 = File_in.nextLine();
                String[] cardStr = line_2.split("","");
                
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    handcard[i] = new Card(sep[1], sep[0]);
                }
                ahand[0] = new Hand(handcard);
                
                pq.insert(ahand[0]);
                
                if (pq.size() > target){
                    pq.delMin();
                }
                
            }
            
            Hand finalans = Hand.class.cast(pq.delMin());
            Card[] fina = finalans.getCards();
            
            for(int j = 0 ; j < 5 ; j++){
                System.out.print(fina[j].getSuit()+
                        ""_""+
                        fina[j].getFace());
                if(j!=4)
                    System.out.print("","") ;

            }
//            }
            
            
//            System.out.println(fina[0].getSuit());
//            System.out.println(fina[1].getSuit());
//            System.out.println(fina[2].getSuit());
//            System.out.println(fina[3].getSuit());
//            System.out.println(fina[4].getSuit());
//            System.out.println(fina[0].getFace());
//            System.out.println(fina[1].getFace());
//            System.out.println(fina[2].getFace());
//            System.out.println(fina[3].getFace());
//            System.out.println(fina[4].getFace());

            

        }
        catch(IOException e){
            System.out.println(""error!""); 
        }
    }
}

@45d1adea4e1daa413d0723349245d644@"
"r04921115","4","0.39","103408","@0b6bf3e33c037c864d1d4e563e007b34@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
    	MinPQ<Hand> pq = new MinPQ<Hand>();
    	
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
        	String[] header = br.readLine().split("","");
        		
        	int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
        	
            Hand[] handArray = new Hand[count];
        	
            Card card = null;
        	for(int j = 0; j < count ; j++){
        		Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Arrays.sort(cardsArray);
                Hand handtemp = new Hand(cardsArray);
                handArray[j] = handtemp;
                pq.insert(handtemp);
                if(pq.size()>target){
                	pq.delMin();
                }
        	}
//              Hand handele = new Hand(cardsArray);
//            	pq.insert(handele);
//            	Hand test = pq.min();
//            	Card[] testc = test.getCards();
//            	System.out.println(testc[4].getSuit());
//                if(pq.size() > target){
//                	Card[] mincard = pq.min().getCards();
//                    for(int i = 0 ; i < mincard.length ; i++){
//                    	System.out.print(mincard[i].getSuit() + ""_"" + mincard[i].getFace());
//                    	if(i!=(mincard.length-1)){
//                    		System.out.print("","");
//                    	}
//                    }
//                    pq.delMin();
//                	System.out.println(""last time"");
//                }

        	//for(int i = 0 ; i<pq.size(); i++){
        		if(!pq.isEmpty()){
        			Hand handt = pq.min();
        			Card[] crdt = handt.getCards();
        			for(int j = 0 ; j<5; j++){
                    	System.out.print(crdt[j].getSuit()+""_""+crdt[j].getFace());
                    	if(j!=4){
                    		System.out.print("","");
                    	}
            		}
        		}
            	//System.out.println();
        	//}
    		//System.out.println(pq.size());
        	        	
        	
        	
//        	for(int j = 0; j < count ; j++){
//        		pq.insert(handArray[j]);
//        	}
//        	pq.delMin();
//        	for(int i = 0 ; i<pq.size(); i++){
//        		if(!pq.isEmpty()){
//        			Hand handt = pq.min();
//        			Card[] crdt = handt.getCards();
//        			for(int j = 0 ; j<5; j++){
//                    	System.out.print(crdt[j].getSuit()+""_""+crdt[j].getFace());
//                    	if(j!=4){
//                    		System.out.print("","");
//                    	}
//            		}
//        			pq.delMin();
//        		}
//            	System.out.println();
//        	}
//    		System.out.println(pq.size());
//        	System.out.println();
//
//
//        	//print all for test
//        	for(int i = 0 ; i<count; i++){
//        		Card[] crd = handArray[i].getCards();
//        		for(int j = 0 ; j<5; j++){
//                	System.out.print(crd[j].getSuit()+""_""+crd[j].getFace());
//                	if(j!=4){
//                		System.out.print("","");
//                	}
//        		}
//        		System.out.println();
//        	}
        	
//            pq.delMin();
//            Hand test = pq.min();
//            Card[] mincard = test.getCards();
//            for(int i = 0 ; i < mincard.length ; i++){
//            	System.out.print(mincard[i].getSuit() + ""_"" + mincard[i].getFace());
//            	if(i!=(mincard.length-1)){
//            		System.out.print("","");
//            	}
//            }
        }
    }
}

@0b6bf3e33c037c864d1d4e563e007b34@"
"r04921115","4","0.38","106400","@f85f25f67e8b9b4588e682fe7279d489@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
    	MinPQ<Hand> pq = new MinPQ<Hand>();
    	
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
        	String[] header = br.readLine().split("","");
        		
        	int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
        	
            Hand[] handArray = new Hand[count];
        	
            Card card = null;
        	for(int j = 0; j < count ; j++){
        		Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                //Arrays.sort(cardsArray);
                Hand handtemp = new Hand(cardsArray);
                handArray[j] = handtemp;
                pq.insert(handtemp);
                if(pq.size()>target){
                	pq.delMin();
                }
        	}
//              Hand handele = new Hand(cardsArray);
//            	pq.insert(handele);
//            	Hand test = pq.min();
//            	Card[] testc = test.getCards();
//            	System.out.println(testc[4].getSuit());
//                if(pq.size() > target){
//                	Card[] mincard = pq.min().getCards();
//                    for(int i = 0 ; i < mincard.length ; i++){
//                    	System.out.print(mincard[i].getSuit() + ""_"" + mincard[i].getFace());
//                    	if(i!=(mincard.length-1)){
//                    		System.out.print("","");
//                    	}
//                    }
//                    pq.delMin();
//                	System.out.println(""last time"");
//                }

        	//for(int i = 0 ; i<pq.size(); i++){
        		if(!pq.isEmpty()){
        			Hand handt = pq.min();
        			Card[] crdt = handt.getCards();
                    Arrays.sort(crdt);
        			for(int j = 0 ; j<5; j++){
                    	System.out.print(crdt[j].getSuit()+""_""+crdt[j].getFace());
                    	if(j!=4){
                    		System.out.print("","");
                    	}
            		}
        		}
            	//System.out.println();
        	//}
    		//System.out.println(pq.size());
        	        	
        	
        	
//        	for(int j = 0; j < count ; j++){
//        		pq.insert(handArray[j]);
//        	}
//        	pq.delMin();
//        	for(int i = 0 ; i<pq.size(); i++){
//        		if(!pq.isEmpty()){
//        			Hand handt = pq.min();
//        			Card[] crdt = handt.getCards();
//        			for(int j = 0 ; j<5; j++){
//                    	System.out.print(crdt[j].getSuit()+""_""+crdt[j].getFace());
//                    	if(j!=4){
//                    		System.out.print("","");
//                    	}
//            		}
//        			pq.delMin();
//        		}
//            	System.out.println();
//        	}
//    		System.out.println(pq.size());
//        	System.out.println();
//
//
//        	//print all for test
//        	for(int i = 0 ; i<count; i++){
//        		Card[] crd = handArray[i].getCards();
//        		for(int j = 0 ; j<5; j++){
//                	System.out.print(crd[j].getSuit()+""_""+crd[j].getFace());
//                	if(j!=4){
//                		System.out.print("","");
//                	}
//        		}
//        		System.out.println();
//        	}
        	
//            pq.delMin();
//            Hand test = pq.min();
//            Card[] mincard = test.getCards();
//            for(int i = 0 ; i < mincard.length ; i++){
//            	System.out.print(mincard[i].getSuit() + ""_"" + mincard[i].getFace());
//            	if(i!=(mincard.length-1)){
//            		System.out.print("","");
//            	}
//            }
        }
    }
}

@f85f25f67e8b9b4588e682fe7279d489@"
"r04921115","7","0.14","117968","@0c177545d1e6d68457f57a4dd236eede@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {
    	MinPQ<Hand> pq = new MinPQ<Hand>();
    	
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
        	String[] header = br.readLine().split("","");
        		
        	int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
        	
           // Hand[] handArray = new Hand[count];
        	
            Card card = null;
        	for(int j = 0; j < count ; j++){
        		Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                //Arrays.sort(cardsArray);
                Hand handtemp = new Hand(cardsArray);
                //handArray[j] = handtemp;
                pq.insert(handtemp);
                if(pq.size()>target){
                	pq.delMin();
                }
        	}
//              Hand handele = new Hand(cardsArray);
//            	pq.insert(handele);
//            	Hand test = pq.min();
//            	Card[] testc = test.getCards();
//            	System.out.println(testc[4].getSuit());
//                if(pq.size() > target){
//                	Card[] mincard = pq.min().getCards();
//                    for(int i = 0 ; i < mincard.length ; i++){
//                    	System.out.print(mincard[i].getSuit() + ""_"" + mincard[i].getFace());
//                    	if(i!=(mincard.length-1)){
//                    		System.out.print("","");
//                    	}
//                    }
//                    pq.delMin();
//                	System.out.println(""last time"");
//                }

        	//for(int i = 0 ; i<pq.size(); i++){
        		if(!pq.isEmpty()){
        			Hand handt = pq.min();
        			Card[] crdt = handt.getCards();
                    Arrays.sort(crdt);
        			for(int j = 0 ; j<5; j++){
                    	System.out.print(crdt[j].getSuit()+""_""+crdt[j].getFace());
                    	if(j!=4){
                    		System.out.print("","");
                    	}
            		}
        		}
            	//System.out.println();
        	//}
    		//System.out.println(pq.size());
        	        	
        	
        	
//        	for(int j = 0; j < count ; j++){
//        		pq.insert(handArray[j]);
//        	}
//        	pq.delMin();
//        	for(int i = 0 ; i<pq.size(); i++){
//        		if(!pq.isEmpty()){
//        			Hand handt = pq.min();
//        			Card[] crdt = handt.getCards();
//        			for(int j = 0 ; j<5; j++){
//                    	System.out.print(crdt[j].getSuit()+""_""+crdt[j].getFace());
//                    	if(j!=4){
//                    		System.out.print("","");
//                    	}
//            		}
//        			pq.delMin();
//        		}
//            	System.out.println();
//        	}
//    		System.out.println(pq.size());
//        	System.out.println();
//
//
//        	//print all for test
//        	for(int i = 0 ; i<count; i++){
//        		Card[] crd = handArray[i].getCards();
//        		for(int j = 0 ; j<5; j++){
//                	System.out.print(crd[j].getSuit()+""_""+crd[j].getFace());
//                	if(j!=4){
//                		System.out.print("","");
//                	}
//        		}
//        		System.out.println();
//        	}
        	
//            pq.delMin();
//            Hand test = pq.min();
//            Card[] mincard = test.getCards();
//            for(int i = 0 ; i < mincard.length ; i++){
//            	System.out.print(mincard[i].getSuit() + ""_"" + mincard[i].getFace());
//            	if(i!=(mincard.length-1)){
//            		System.out.print("","");
//            	}
//            }
        }
    }
}

@0c177545d1e6d68457f57a4dd236eede@"
"r04921065","4","0.38","105680","@db710a8aa5cc2aa79bccf442d056774f@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ{
    private Hand[] pq; // pq[i] = i th element on pq
    private int N=0;  // number of elements on pq ，N指向空的位置
    private int capacity;
    public HandPQ(int capacity){
        //pq = (Hand[]) new Comparable[N];
        pq = new Hand[capacity];
    }

    public boolean isEmpty()
    {return N==0;}
    
    public void insert(Hand h){
        pq[N++]=h;
    }
    
    public Hand delMax(){ // 刪除最大項並回傳
        Hand max = pq[0];
          int index = 0; // 最大的index
        for (int i=1;i<N;i++){
            int ans = max.compareTo(pq[i]);
            //System.out.println(ans);
            if (ans <0) {
                max = pq[i];
                index = i;
            }
        }
        //System.out.println(index);
//        // Exchange
            Hand temp = pq[N-1];
            pq[index] = temp;
            pq[N-1] = max;
        
            return pq[--N]; 
    }
    public int check(){ // 看看 N 的位置在哪
        return N;
    }
    
    public Hand getHand(int i){
        return pq[i];
    }
    
    public void swap(Hand c,int a,int b){
        Card temp = c.getCards()[a];
        c.getCards()[a] = c.getCards()[b];
        c.getCards()[b] = temp;
    }
    
    //此次作業跟HW6 PokerGame的差別為:沒有hand(5張手牌)的索引(即player的名稱)，所以重點不是找hand的player名稱，而是對 不同 hand(5張手牌)做排序
    // Goal: 找出第""三""大的5張手牌
    // 想法: 用Priority Queue實作，保留前""三""項最大的空間，每次insert就remove最大的那項，最後留下的最大項即為第三大的項
    public static void main(String[] args) throws Exception {
        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            //System.out.println(count);
            HandPQ p = new HandPQ(count);
            //MinPQ<Hand> pq= new MinPQ<Hand>(target); java作者寫的MinPQ
            
            for(String in = br.readLine(); in != null; in = br.readLine()) { 
            
            Card[] CardArray = new Card[5]; // 一個hand的5張牌中的每一張
            String[] hand = in.split("","");
            for (int i=0;i<5;i++){
                String[] cardtemp = hand[i].split(""_"");
                Card c = new Card(cardtemp[1],cardtemp[0]);
                CardArray[i] = c;
            }
            
            Hand temp = new Hand(CardArray);
            p.insert(temp);
            //System.out.println(p.check());
            }
            
            
            //Hand test = p.getHand(0);
         //System.out.println(test.getCards()[4].getSuit()+ ""_"" + test.getCards()[4].getFace());
         

            
            for (int i = 1;i<target;i++){
            p.delMax();
            }
            Hand MaxHand = p.delMax();

//            System.out.println(MaxHand.getCards()[0].getSuit()+ ""_""+ MaxHand.getCards()[0].getFace()+"",""+
//                               MaxHand.getCards()[1].getSuit()+ ""_""+ MaxHand.getCards()[1].getFace()+"",""+
//                               MaxHand.getCards()[2].getSuit()+ ""_""+ MaxHand.getCards()[2].getFace()+"",""+
//                               MaxHand.getCards()[3].getSuit()+ ""_""+ MaxHand.getCards()[3].getFace()+"",""+
//                               MaxHand.getCards()[4].getSuit()+ ""_""+ MaxHand.getCards()[4].getFace());
            
            //Card之間的排序
            for (int i =0;i<5;i++){
                for (int j=i;j>0;j--){
                    if(MaxHand.getCards()[j].compareTo(MaxHand.getCards()[j-1])<0){
                        p.swap(MaxHand,j,j-1);
                    }
                }
            }
            System.out.println(MaxHand.getCards()[0].getSuit()+ ""_""+ MaxHand.getCards()[0].getFace()+"",""+
                               MaxHand.getCards()[1].getSuit()+ ""_""+ MaxHand.getCards()[1].getFace()+"",""+
                               MaxHand.getCards()[2].getSuit()+ ""_""+ MaxHand.getCards()[2].getFace()+"",""+
                               MaxHand.getCards()[3].getSuit()+ ""_""+ MaxHand.getCards()[3].getFace()+"",""+
                               MaxHand.getCards()[4].getSuit()+ ""_""+ MaxHand.getCards()[4].getFace());
            
        }
    }
}

@db710a8aa5cc2aa79bccf442d056774f@"
"r04921065","7","0.142857142857143","119104","@c503f8ad9d0f931b0c15c31a20e66680@import java.io.BufferedReader;
import java.io.FileReader;
public class HandPQ {
    public static void main(String[] args) throws Exception {
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ<Hand> pq = new MinPQ<Hand>(target);
            Hand wei;
            
            for (int i = 0; i < count; i++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                wei = new Hand(cardsArray);
                pq.insert(wei);
                if(pq.size()>target) pq.delMin();
            }
           
            System.out.println(pq.min().getCards()[0].getSuit() + ""_"" + pq.min().getCards()[0].getFace() + "","" + pq.min().getCards()[1].getSuit() + ""_"" + pq.min().getCards()[1].getFace() + "",""
                    + pq.min().getCards()[2].getSuit() + ""_"" + pq.min().getCards()[2].getFace() + "","" + pq.min().getCards()[3].getSuit() + ""_"" + pq.min().getCards()[3].getFace() + "","" + pq.min().getCards()[4].getSuit() + ""_"" + pq.min().getCards()[4].getFace());
        }
    }
}
@c503f8ad9d0f931b0c15c31a20e66680@"
"r04631004","1","0.86","151376","@6b36f3a9801d7de249169d8b7652e0c8@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MaxPQ maxpq = new MaxPQ();

            Player[] playerArray = new Player[count];

            for (int idx = 0; idx < count; idx++) {
                Player player = new Player();
                playerArray[idx] = player;
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                player.setCards(cardsArray);
                maxpq.insert(playerArray[idx]);
                if (maxpq.size() > target) {  //當PQ的size超過target時就把多的丟出來
                    maxpq.delMax();
                }
            }
            for(int i=0;i<target-2;i++) //把PQ內的東西都丟光，剩下target
                maxpq.delMax();
            Player targetplayer = (Player) maxpq.delMax();
            targetplayer.printCards();

        }
    }

    private static class Player implements Comparable<Player> {

        private Card[] cards = new Card[5];

        public Player() {
        }

        // DO NOT MODIFY THIS
        public void setCards(Card[] cards) {
            this.cards = cards;
        }

        public void printCards() {
            for(int i=0;i<5;i++)
                if(i==4)
                    System.out.println(this.cards[4].getSuit()+""_""+this.cards[4].getFace());
            else
                    System.out.print(this.cards[i].getSuit()+""_""+this.cards[i].getFace()+"","");

        }

        // TODO 
        public int compareTo(Player that) {
            // complete this function so the Player can be sorted according to the cards he/she has.
            Player A=this;
            Player B=that;
            Arrays.sort(A.cards);
            Arrays.sort(B.cards);
            //檢查full house
            if (A.cards[0].getFace().equals(A.cards[1].getFace()) && A.cards[0].getFace().equals(A.cards[2].getFace())) { //若A是前三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[0].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[0].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[0].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            } else if (A.cards[1].getFace().equals(A.cards[2].getFace()) && A.cards[1].getFace().equals(A.cards[3].getFace())) { //若A是中間三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[1].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[1].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[1].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            } else if (A.cards[2].getFace().equals(A.cards[3].getFace()) && A.cards[2].getFace().equals(A.cards[4].getFace())) { //若A是後三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[2].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[2].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[2].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            }

            //檢查Flush
            int flush_check = 0;
            for (int i = 1; i < 5; i++) {
                if (Card.SUIT_ORDER.compare(A.cards[0], A.cards[i]) != 0) {
                    flush_check = 1;
                    break;
                }
            }
            if (flush_check == 0) {
                for (int i = 1; i < 5; i++) {  //A是flush時判斷B是不是flush
                    if (Card.SUIT_ORDER.compare(B.cards[0], B.cards[i]) != 0) {
                        flush_check = 1;
                        break;
                    }
                }
                if (flush_check == 1) { //B不是flush
                    return 1;
                } else {
                    if (Card.SUIT_ORDER.compare(A.cards[0], B.cards[0]) == 1) {
                        return 1;
                    } else if (Card.SUIT_ORDER.compare(A.cards[0], B.cards[0]) == -1) {
                        return -1;
                    } else //同花色時,比最後一張
                    {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    }
                }
            } else {  //A不是flush時判斷B是不是flush
                flush_check = 0;
                for (int i = 1; i < 5; i++) {
                    if (Card.SUIT_ORDER.compare(B.cards[0], B.cards[i]) != 0) {
                        flush_check = 1;
                        break;
                    }
                }
                if (flush_check == 0) {
                    return -1;
                }
            }

            //檢查Straight
            int A_straightcheck = 0; //A_straightcheck=1 時表示不是Straight
            int first = 0;
            int last = 0;
            Card[] A_maxcard = new Card[1];
            for (int i = 0; i < 5; i++) { //A是否是Straight
                switch (A.cards[i].getFace()) {
                    case ""A"":
                        last = 13;
                        break;
                    case ""2"":
                        last = 1;
                        break;
                    case ""3"":
                        last = 2;
                        break;
                    case ""4"":
                        last = 3;
                        break;
                    case ""5"":
                        last = 4;
                        break;
                    case ""6"":
                        last = 5;
                        break;
                    case ""7"":
                        last = 6;
                        break;
                    case ""8"":
                        last = 7;
                        break;
                    case ""9"":
                        last = 8;
                        break;
                    case ""10"":
                        last = 9;
                        break;
                    case ""J"":
                        last = 10;
                        break;
                    case ""Q"":
                        last = 11;
                        break;
                    case ""K"":
                        last = 12;
                        break;
                }
                if (i > 0) {
                    if (last - first != 1) {
                        if (i == 4 && last == 13 && first == 4) {  //A 2 3 4 5的情況
                            A_maxcard[0] = A.cards[3];
                            break;
                        }
                        A_straightcheck = 1;
                        break;
                    }
                }
                if (i == 4) {
                    A_maxcard[0] = A.cards[4];
                }
                first = last;
            }

            int B_straightcheck = 0;
            first = 0;
            last = 0;
            Card[] B_maxcard = new Card[1];
            for (int i = 0; i < 5; i++) { //B是否是Straight
                switch (B.cards[i].getFace()) {
                    case ""A"":
                        last = 13;
                        break;
                    case ""2"":
                        last = 1;
                        break;
                    case ""3"":
                        last = 2;
                        break;
                    case ""4"":
                        last = 3;
                        break;
                    case ""5"":
                        last = 4;
                        break;
                    case ""6"":
                        last = 5;
                        break;
                    case ""7"":
                        last = 6;
                        break;
                    case ""8"":
                        last = 7;
                        break;
                    case ""9"":
                        last = 8;
                        break;
                    case ""10"":
                        last = 9;
                        break;
                    case ""J"":
                        last = 10;
                        break;
                    case ""Q"":
                        last = 11;
                        break;
                    case ""K"":
                        last = 12;
                        break;
                }
                if (i > 0) {
                    if (last - first != 1) {
                        if (i == 4 && last == 13 && first == 4) {  //A 2 3 4 5的情況
                            B_maxcard[0] = B.cards[3];
                            break;
                        }
                        B_straightcheck = 1;
                        break;
                    }
                }
                if (i == 4) {
                    B_maxcard[0] = B.cards[4];
                }
                first = last;
            }

            if (A_straightcheck == 0 && B_straightcheck == 1) {
                return 1;
            } else if (A_straightcheck == 1 && B_straightcheck == 0) {
                return -1;
            } else if (A_straightcheck == 0 && B_straightcheck == 0) { //如果A與B都是straight
                if (A_maxcard[0].compareTo(B_maxcard[0]) == 1) {
                    return 1;
                } else if (A_maxcard[0].compareTo(B_maxcard[0]) == -1) {
                    return -1;
                }
            }

            //檢查 2 pair
            if (A.cards[0].getFace().equals(A.cards[1].getFace())) { //找出A第一個pair
                if (A.cards[2].getFace().equals(A.cards[3].getFace())) //A 是2 pair 且位置是0 1 2 3
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[3].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[3].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[3].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
                if (A.cards[3].getFace().equals(A.cards[4].getFace())) //A 是2 pair 且位置是0 1 3 4
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[4].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
            }
            if (A.cards[1].getFace().equals(A.cards[2].getFace())) { //找出A第一個pair
                if (A.cards[3].getFace().equals(A.cards[4].getFace())) //A 是2 pair 且位置是 1 2 3 4
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[4].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
            }

            //檢查pair
            int A_paircheck = 0;
            int temp_Aj = 0;

            for (int i = 0; i < 4; i++) {
                for (int j = i + 1; j < 5; j++) {
                    if (A.cards[i].getFace().equals(A.cards[j].getFace())) {
                        temp_Aj = j;
                        A_paircheck = 1;
                        break;
                    }
                }
            }

            int B_paircheck = 0;
            int temp_Bj = 0;
            for (int i = 0; i < 4; i++) {
                for (int j = i + 1; j < 5; j++) {
                    if (B.cards[i].getFace().equals(B.cards[j].getFace())) {
                        temp_Bj = j;
                        B_paircheck = 1;
                        break;
                    }
                }
            }

            if (A_paircheck == 1 && B_paircheck == 0) {
                return 1;
            } else if (A_paircheck == 0 && B_paircheck == 1) {
                return -1;
            } else if (A_paircheck == 1 && B_paircheck == 1) {
                if (A.cards[temp_Aj].compareTo(B.cards[temp_Bj]) == 1) {
                    return 1;
                } else {
                    return -1;
                }
            }

            //檢查High Card
            if (A.cards[4].compareTo(B.cards[4]) == 1) //比最後一張
            {
                return 1;
            } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                return -1;
            }

            return 0;
        }
    }
}

@6b36f3a9801d7de249169d8b7652e0c8@"
"b03611035","0","0.41","106160","@9edbc927f1741c1f5bc580fce48cc201@import java.io.BufferedReader;
import java.io.FileReader;
public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand playerArray;
            MaxPQ<Hand>gg=new MaxPQ();
            //construct players' hands
            for(int x=0;x<count;x++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                playerArray = new Hand(cardsArray);
                gg.insert(playerArray);
            }
            for(int i=0;i<target;i++){                
                if(i==target-1){
                    MinPQ<Card>haha=new MinPQ(gg.delMax().getCards());                    
                    for(int j=0;j<5;j++){
                Card ff=haha.delMin();
                String face=ff.getFace();
                String suit=ff.getSuit();
                System.out.print(suit);
                System.out.print(""_"");
                System.out.print(face);
                if(i!=4) System.out.print("","");
            }
                    break;
                }else gg.delMax();
            }
            //MinPQ<Card>haha=new MinPQ(playerArray.getCards());
            
        }
    }
}

@9edbc927f1741c1f5bc580fce48cc201@"
"b03611035","0","0.86","151376","@30db97cabbe15f7f2dd10cc6ed27b151@import java.io.BufferedReader;
import java.io.FileReader;
public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand playerArray;
            MaxPQ<Hand>gg=new MaxPQ();
            //construct players' hands
            for(int x=0;x<count;x++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                playerArray = new Hand(cardsArray);
                gg.insert(playerArray);
            }
            for(int i=0;i<target;i++){                
                if(i==target-1){
                    MinPQ<Card>haha=new MinPQ(gg.delMax().getCards());                    
                    for(int j=0;j<5;j++){
                Card ff=haha.delMin();
                String face=ff.getFace();
                String suit=ff.getSuit();
                System.out.print(suit);
                System.out.print(""_"");
                System.out.print(face);
                if(j!=4) System.out.print("","");
            }
                    break;
                }else gg.delMax();
            }
            //MinPQ<Card>haha=new MinPQ(playerArray.getCards());
            
        }
    }
}


back return to list
@30db97cabbe15f7f2dd10cc6ed27b151@"
"b03611035","4","0.39","103472","@e282f84ba7dc707d90291f1bfe37c437@import java.io.BufferedReader;
import java.io.FileReader;
public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand playerArray;
            MaxPQ<Hand>gg=new MaxPQ();
            //construct players' hands
            for(int x=0;x<count;x++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                playerArray = new Hand(cardsArray);
                gg.insert(playerArray);
            }
            for(int i=0;i<target;i++){                
                if(i==target-1){
                    MinPQ<Card>haha=new MinPQ(gg.delMax().getCards());                    
                    for(int j=0;j<5;j++){
                Card ff=haha.delMin();
                String face=ff.getFace();
                String suit=ff.getSuit();
                System.out.print(suit);
                System.out.print(""_"");
                System.out.print(face);
                if(j!=4) System.out.print("","");
            }
                    break;
                }else gg.delMax();
            }
            //MinPQ<Card>haha=new MinPQ(playerArray.getCards());
            
        }
    }
}
@e282f84ba7dc707d90291f1bfe37c437@"
"b03611035","4","0.39","101040","@568a5d77eb61fc313854df270da09545@import java.io.BufferedReader;
import java.io.FileReader;
public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            MaxPQ<Hand>gg=new MaxPQ();
            //construct players' hands
            for(int x=0;x<count;x++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    cardsArray[i] = new Card(sep[1], sep[0]);
                }
                Hand playerArray = new Hand(cardsArray);
                gg.insert(playerArray);
            }
            for(int i=0;i<target;i++){                
                if(i==target-1){
                    MinPQ<Card>haha=new MinPQ(gg.delMax().getCards());                    
                    for(int j=0;j<5;j++){
                        Card ff=haha.delMin();
                        String face=ff.getFace();
                        String suit=ff.getSuit();
                        System.out.print(suit);
                        System.out.print(""_"");
                        System.out.print(face);
                        if(j!=4) System.out.print("","");
            }
                    break;
                }else gg.delMax();
            }
            //MinPQ<Card>haha=new MinPQ(playerArray.getCards());
            
        }
    }
}

@568a5d77eb61fc313854df270da09545@"
"b03611035","4","0.38","104400","@2ef64ad5c922609544e782e7d910174c@import java.io.BufferedReader;
import java.io.FileReader;
public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            MaxPQ<Hand>gg=new <Hand>MaxPQ();
            //construct players' hands
            for(int x=0;x<count;x++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    cardsArray[i] = new Card(sep[1], sep[0]);
                }
                Hand playerArray = new Hand(cardsArray);
                gg.insert(playerArray);
            }
            for(int i=0;i<target;i++){                
                if(i==target-1){
                    MinPQ<Card>haha=new <Card>MinPQ(gg.delMax().getCards());                    
                    for(int j=0;j<5;j++){
                        Card ff=haha.delMin();
                        String face=ff.getFace();
                        String suit=ff.getSuit();
                        System.out.print(suit);
                        System.out.print(""_"");
                        System.out.print(face);
                        if(j!=4) System.out.print("","");
            }
                    break;
                }else gg.delMax();
            }
            //MinPQ<Card>haha=new MinPQ(playerArray.getCards());
            
        }
    }
}

@2ef64ad5c922609544e782e7d910174c@"
"r04631004","1","1.33","189152","@a494aea9f0d6f0b35c919bc422dfd599@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MaxPQ maxpq = new MaxPQ();
            MaxPQ temp_maxpq = new MaxPQ();

            Player[] playerArray = new Player[count];

            for (int idx = 0; idx < count; idx++) {
                Player player = new Player();
                playerArray[idx] = player;
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                player.setCards(cardsArray);
                maxpq.insert(playerArray[idx]);
                if (maxpq.size() > target) {  //當PQ的size超過target時就把多的丟出來
                    for (int i = 0; i < target - 2; i++) //把PQ內要的東西先暫存起來
                    {
                        Player temp=(Player) maxpq.delMax();
                        temp_maxpq.insert(temp);
                    }
                    maxpq.delMax(); //多出來的去除
                    for (int i = 0; i < target - 2; i++) //把還要的東西再存回來
                    {
                        Player temp=(Player) temp_maxpq.delMax();
                        maxpq.insert(temp);
                    }
                }
            }
            for (int i = 0; i < target - 2; i++) //把PQ內的東西都丟光，最後只要拿剩下的那一個
            {
                maxpq.delMax();
            }
            Player targetplayer = (Player) maxpq.delMax();
            targetplayer.printCards();

        }
    }

    private static class Player implements Comparable<Player> {

        private Card[] cards = new Card[5];

        public Player() {
        }

        // DO NOT MODIFY THIS
        public void setCards(Card[] cards) {
            this.cards = cards;
        }

        public void printCards() {
            for (int i = 0; i < 5; i++) {
                if (i == 4) {
                    System.out.println(this.cards[4].getSuit() + ""_"" + this.cards[4].getFace());
                } else {
                    System.out.print(this.cards[i].getSuit() + ""_"" + this.cards[i].getFace() + "","");
                }
            }

        }

        // TODO 
        public int compareTo(Player that) {
            // complete this function so the Player can be sorted according to the cards he/she has.
            Player A = this;
            Player B = that;
            Arrays.sort(A.cards);
            Arrays.sort(B.cards);
            //檢查full house
            if (A.cards[0].getFace().equals(A.cards[1].getFace()) && A.cards[0].getFace().equals(A.cards[2].getFace())) { //若A是前三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[0].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[0].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[0].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            } else if (A.cards[1].getFace().equals(A.cards[2].getFace()) && A.cards[1].getFace().equals(A.cards[3].getFace())) { //若A是中間三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[1].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[1].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[1].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            } else if (A.cards[2].getFace().equals(A.cards[3].getFace()) && A.cards[2].getFace().equals(A.cards[4].getFace())) { //若A是後三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[2].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[2].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[2].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            }

            //檢查Flush
            int flush_check = 0;
            for (int i = 1; i < 5; i++) {
                if (Card.SUIT_ORDER.compare(A.cards[0], A.cards[i]) != 0) {
                    flush_check = 1;
                    break;
                }
            }
            if (flush_check == 0) {
                for (int i = 1; i < 5; i++) {  //A是flush時判斷B是不是flush
                    if (Card.SUIT_ORDER.compare(B.cards[0], B.cards[i]) != 0) {
                        flush_check = 1;
                        break;
                    }
                }
                if (flush_check == 1) { //B不是flush
                    return 1;
                } else {
                    if (Card.SUIT_ORDER.compare(A.cards[0], B.cards[0]) == 1) {
                        return 1;
                    } else if (Card.SUIT_ORDER.compare(A.cards[0], B.cards[0]) == -1) {
                        return -1;
                    } else //同花色時,比最後一張
                    {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    }
                }
            } else {  //A不是flush時判斷B是不是flush
                flush_check = 0;
                for (int i = 1; i < 5; i++) {
                    if (Card.SUIT_ORDER.compare(B.cards[0], B.cards[i]) != 0) {
                        flush_check = 1;
                        break;
                    }
                }
                if (flush_check == 0) {
                    return -1;
                }
            }

            //檢查Straight
            int A_straightcheck = 0; //A_straightcheck=1 時表示不是Straight
            int first = 0;
            int last = 0;
            Card[] A_maxcard = new Card[1];
            for (int i = 0; i < 5; i++) { //A是否是Straight
                switch (A.cards[i].getFace()) {
                    case ""A"":
                        last = 13;
                        break;
                    case ""2"":
                        last = 1;
                        break;
                    case ""3"":
                        last = 2;
                        break;
                    case ""4"":
                        last = 3;
                        break;
                    case ""5"":
                        last = 4;
                        break;
                    case ""6"":
                        last = 5;
                        break;
                    case ""7"":
                        last = 6;
                        break;
                    case ""8"":
                        last = 7;
                        break;
                    case ""9"":
                        last = 8;
                        break;
                    case ""10"":
                        last = 9;
                        break;
                    case ""J"":
                        last = 10;
                        break;
                    case ""Q"":
                        last = 11;
                        break;
                    case ""K"":
                        last = 12;
                        break;
                }
                if (i > 0) {
                    if (last - first != 1) {
                        if (i == 4 && last == 13 && first == 4) {  //A 2 3 4 5的情況
                            A_maxcard[0] = A.cards[3];
                            break;
                        }
                        A_straightcheck = 1;
                        break;
                    }
                }
                if (i == 4) {
                    A_maxcard[0] = A.cards[4];
                }
                first = last;
            }

            int B_straightcheck = 0;
            first = 0;
            last = 0;
            Card[] B_maxcard = new Card[1];
            for (int i = 0; i < 5; i++) { //B是否是Straight
                switch (B.cards[i].getFace()) {
                    case ""A"":
                        last = 13;
                        break;
                    case ""2"":
                        last = 1;
                        break;
                    case ""3"":
                        last = 2;
                        break;
                    case ""4"":
                        last = 3;
                        break;
                    case ""5"":
                        last = 4;
                        break;
                    case ""6"":
                        last = 5;
                        break;
                    case ""7"":
                        last = 6;
                        break;
                    case ""8"":
                        last = 7;
                        break;
                    case ""9"":
                        last = 8;
                        break;
                    case ""10"":
                        last = 9;
                        break;
                    case ""J"":
                        last = 10;
                        break;
                    case ""Q"":
                        last = 11;
                        break;
                    case ""K"":
                        last = 12;
                        break;
                }
                if (i > 0) {
                    if (last - first != 1) {
                        if (i == 4 && last == 13 && first == 4) {  //A 2 3 4 5的情況
                            B_maxcard[0] = B.cards[3];
                            break;
                        }
                        B_straightcheck = 1;
                        break;
                    }
                }
                if (i == 4) {
                    B_maxcard[0] = B.cards[4];
                }
                first = last;
            }

            if (A_straightcheck == 0 && B_straightcheck == 1) {
                return 1;
            } else if (A_straightcheck == 1 && B_straightcheck == 0) {
                return -1;
            } else if (A_straightcheck == 0 && B_straightcheck == 0) { //如果A與B都是straight
                if (A_maxcard[0].compareTo(B_maxcard[0]) == 1) {
                    return 1;
                } else if (A_maxcard[0].compareTo(B_maxcard[0]) == -1) {
                    return -1;
                }
            }

            //檢查 2 pair
            if (A.cards[0].getFace().equals(A.cards[1].getFace())) { //找出A第一個pair
                if (A.cards[2].getFace().equals(A.cards[3].getFace())) //A 是2 pair 且位置是0 1 2 3
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[3].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[3].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[3].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
                if (A.cards[3].getFace().equals(A.cards[4].getFace())) //A 是2 pair 且位置是0 1 3 4
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[4].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
            }
            if (A.cards[1].getFace().equals(A.cards[2].getFace())) { //找出A第一個pair
                if (A.cards[3].getFace().equals(A.cards[4].getFace())) //A 是2 pair 且位置是 1 2 3 4
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[4].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
            }

            //檢查pair
            int A_paircheck = 0;
            int temp_Aj = 0;

            for (int i = 0; i < 4; i++) {
                for (int j = i + 1; j < 5; j++) {
                    if (A.cards[i].getFace().equals(A.cards[j].getFace())) {
                        temp_Aj = j;
                        A_paircheck = 1;
                        break;
                    }
                }
            }

            int B_paircheck = 0;
            int temp_Bj = 0;
            for (int i = 0; i < 4; i++) {
                for (int j = i + 1; j < 5; j++) {
                    if (B.cards[i].getFace().equals(B.cards[j].getFace())) {
                        temp_Bj = j;
                        B_paircheck = 1;
                        break;
                    }
                }
            }

            if (A_paircheck == 1 && B_paircheck == 0) {
                return 1;
            } else if (A_paircheck == 0 && B_paircheck == 1) {
                return -1;
            } else if (A_paircheck == 1 && B_paircheck == 1) {
                if (A.cards[temp_Aj].compareTo(B.cards[temp_Bj]) == 1) {
                    return 1;
                } else {
                    return -1;
                }
            }

            //檢查High Card
            if (A.cards[4].compareTo(B.cards[4]) == 1) //比最後一張
            {
                return 1;
            } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                return -1;
            }

            return 0;
        }
    }
}

@a494aea9f0d6f0b35c919bc422dfd599@"
"f02631008","7","0.191428571428571","122672","@2bc6ac56179d8a9d49a08ce512f43c05@import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.File;
import java.util.Scanner;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        
        File file = new File(args[0]);
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
//            String[] header = br.readLine().split("","");
//            int count = Integer.parseInt(header[0]);
//            int target = Integer.parseInt(header[1]);
            
            Scanner File_in = new Scanner(file);
            String line_1 = File_in.nextLine();
            String[] Nums = line_1.split("","");

            int count = Integer.parseInt(Nums[0]);
            int target = Integer.parseInt(Nums[1]);
//            System.out.println(count);
            
            MinPQ pq = new MinPQ();
            
            Hand[] ahand = new Hand[1];
            
            while (count != 0)
            {
//                String[] cardStr = br.readLine().split("","") ;
                Card[] handcard = new Card[5];
                String line_2 = File_in.nextLine();
                String[] cardStr = line_2.split("","");
                
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    handcard[i] = new Card(sep[1], sep[0]);
                }
                ahand[0] = new Hand(handcard);
                pq.insert(ahand[0]);
                
                if (pq.size() > target){
                    pq.delMin();
                }
                count--;
            }
            
            Hand finalans = Hand.class.cast(pq.delMin());
            Card[] fina = finalans.getCards();
            
            for(int j = 0 ; j < 5 ; j++){
                System.out.print(fina[j].getSuit()+
                        ""_""+
                        fina[j].getFace());
                if(j!=4)
                    System.out.print("","") ;

            }
//            }
            
            
//            System.out.println(fina[0].getSuit());
//            System.out.println(fina[1].getSuit());
//            System.out.println(fina[2].getSuit());
//            System.out.println(fina[3].getSuit());
//            System.out.println(fina[4].getSuit());
//            System.out.println(fina[0].getFace());
//            System.out.println(fina[1].getFace());
//            System.out.println(fina[2].getFace());
//            System.out.println(fina[3].getFace());
//            System.out.println(fina[4].getFace());

            

        }
        catch(IOException e){
            System.out.println(""error!""); 
        }
    }
}

@2bc6ac56179d8a9d49a08ce512f43c05@"
"r04631004","4","1.62","172592","@e9f8baf6a72a3bbd5031300d289b5ada@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MaxPQ maxpq = new MaxPQ();
            MaxPQ temp_maxpq = new MaxPQ();

            Player[] playerArray = new Player[count];

            for (int idx = 0; idx < count; idx++) {
                Player player = new Player();
                playerArray[idx] = player;
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                player.setCards(cardsArray);
                maxpq.insert(playerArray[idx]);
                if (maxpq.size() > target) {  //當PQ的size超過target時就把多的丟出來
                    int tempnum=maxpq.size() ;
                    for (int i = 1; i < tempnum; i++) //把PQ內要的東西先暫存起來
                    {
                        Player temp=(Player) maxpq.delMax();
                        temp_maxpq.insert(temp);
                  //      temp.printCards();
                    }
                //    System.out.println("" "");
                    Player temp1=(Player)maxpq.delMax(); //多出來的去除
                //    temp1.printCards();
              //      System.out.println("" "");
                    for (int i = 1; i < tempnum; i++) //把還要的東西再存回來
                    {
                        Player temp=(Player) temp_maxpq.delMax();
                        maxpq.insert(temp);
             //           temp.printCards();
                    }
                }
            }
            int tempnum=maxpq.size() ;
            for (int i = 1; i < tempnum; i++) //把PQ內的東西都丟光，最後只要拿剩下的那一個
            {
                maxpq.delMax();
            }
            Player targetplayer = (Player) maxpq.delMax();
            //System.out.println("" "");
            targetplayer.printCards();

        }
    }

    private static class Player implements Comparable<Player> {

        private Card[] cards = new Card[5];

        public Player() {
        }

        // DO NOT MODIFY THIS
        public void setCards(Card[] cards) {
            this.cards = cards;
        }

        public void printCards() {
            for (int i = 0; i < 5; i++) {
                if (i == 4) {
                    System.out.println(this.cards[4].getSuit() + ""_"" + this.cards[4].getFace());
                } else {
                    System.out.print(this.cards[i].getSuit() + ""_"" + this.cards[i].getFace() + "","");
                }
            }

        }

        // TODO 
        public int compareTo(Player that) {
            // complete this function so the Player can be sorted according to the cards he/she has.
            Player A = this;
            Player B = that;
            Arrays.sort(A.cards);
            Arrays.sort(B.cards);
            //檢查full house
            if (A.cards[0].getFace().equals(A.cards[1].getFace()) && A.cards[0].getFace().equals(A.cards[2].getFace())) { //若A是前三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[0].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[0].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[0].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            } else if (A.cards[1].getFace().equals(A.cards[2].getFace()) && A.cards[1].getFace().equals(A.cards[3].getFace())) { //若A是中間三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[1].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[1].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[1].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            } else if (A.cards[2].getFace().equals(A.cards[3].getFace()) && A.cards[2].getFace().equals(A.cards[4].getFace())) { //若A是後三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[2].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[2].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[2].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            }

            //檢查Flush
            int flush_check = 0;
            for (int i = 1; i < 5; i++) {
                if (Card.SUIT_ORDER.compare(A.cards[0], A.cards[i]) != 0) {
                    flush_check = 1;
                    break;
                }
            }
            if (flush_check == 0) {
                for (int i = 1; i < 5; i++) {  //A是flush時判斷B是不是flush
                    if (Card.SUIT_ORDER.compare(B.cards[0], B.cards[i]) != 0) {
                        flush_check = 1;
                        break;
                    }
                }
                if (flush_check == 1) { //B不是flush
                    return 1;
                } else {
                    if (Card.SUIT_ORDER.compare(A.cards[0], B.cards[0]) == 1) {
                        return 1;
                    } else if (Card.SUIT_ORDER.compare(A.cards[0], B.cards[0]) == -1) {
                        return -1;
                    } else //同花色時,比最後一張
                    {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    }
                }
            } else {  //A不是flush時判斷B是不是flush
                flush_check = 0;
                for (int i = 1; i < 5; i++) {
                    if (Card.SUIT_ORDER.compare(B.cards[0], B.cards[i]) != 0) {
                        flush_check = 1;
                        break;
                    }
                }
                if (flush_check == 0) {
                    return -1;
                }
            }

            //檢查Straight
            int A_straightcheck = 0; //A_straightcheck=1 時表示不是Straight
            int first = 0;
            int last = 0;
            Card[] A_maxcard = new Card[1];
            for (int i = 0; i < 5; i++) { //A是否是Straight
                switch (A.cards[i].getFace()) {
                    case ""A"":
                        last = 13;
                        break;
                    case ""2"":
                        last = 1;
                        break;
                    case ""3"":
                        last = 2;
                        break;
                    case ""4"":
                        last = 3;
                        break;
                    case ""5"":
                        last = 4;
                        break;
                    case ""6"":
                        last = 5;
                        break;
                    case ""7"":
                        last = 6;
                        break;
                    case ""8"":
                        last = 7;
                        break;
                    case ""9"":
                        last = 8;
                        break;
                    case ""10"":
                        last = 9;
                        break;
                    case ""J"":
                        last = 10;
                        break;
                    case ""Q"":
                        last = 11;
                        break;
                    case ""K"":
                        last = 12;
                        break;
                }
                if (i > 0) {
                    if (last - first != 1) {
                        if (i == 4 && last == 13 && first == 4) {  //A 2 3 4 5的情況
                            A_maxcard[0] = A.cards[3];
                            break;
                        }
                        A_straightcheck = 1;
                        break;
                    }
                }
                if (i == 4) {
                    A_maxcard[0] = A.cards[4];
                }
                first = last;
            }

            int B_straightcheck = 0;
            first = 0;
            last = 0;
            Card[] B_maxcard = new Card[1];
            for (int i = 0; i < 5; i++) { //B是否是Straight
                switch (B.cards[i].getFace()) {
                    case ""A"":
                        last = 13;
                        break;
                    case ""2"":
                        last = 1;
                        break;
                    case ""3"":
                        last = 2;
                        break;
                    case ""4"":
                        last = 3;
                        break;
                    case ""5"":
                        last = 4;
                        break;
                    case ""6"":
                        last = 5;
                        break;
                    case ""7"":
                        last = 6;
                        break;
                    case ""8"":
                        last = 7;
                        break;
                    case ""9"":
                        last = 8;
                        break;
                    case ""10"":
                        last = 9;
                        break;
                    case ""J"":
                        last = 10;
                        break;
                    case ""Q"":
                        last = 11;
                        break;
                    case ""K"":
                        last = 12;
                        break;
                }
                if (i > 0) {
                    if (last - first != 1) {
                        if (i == 4 && last == 13 && first == 4) {  //A 2 3 4 5的情況
                            B_maxcard[0] = B.cards[3];
                            break;
                        }
                        B_straightcheck = 1;
                        break;
                    }
                }
                if (i == 4) {
                    B_maxcard[0] = B.cards[4];
                }
                first = last;
            }

            if (A_straightcheck == 0 && B_straightcheck == 1) {
                return 1;
            } else if (A_straightcheck == 1 && B_straightcheck == 0) {
                return -1;
            } else if (A_straightcheck == 0 && B_straightcheck == 0) { //如果A與B都是straight
                if (A_maxcard[0].compareTo(B_maxcard[0]) == 1) {
                    return 1;
                } else if (A_maxcard[0].compareTo(B_maxcard[0]) == -1) {
                    return -1;
                }
            }

            //檢查 2 pair
            if (A.cards[0].getFace().equals(A.cards[1].getFace())) { //找出A第一個pair
                if (A.cards[2].getFace().equals(A.cards[3].getFace())) //A 是2 pair 且位置是0 1 2 3
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[3].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[3].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[3].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
                if (A.cards[3].getFace().equals(A.cards[4].getFace())) //A 是2 pair 且位置是0 1 3 4
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[4].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
            }
            if (A.cards[1].getFace().equals(A.cards[2].getFace())) { //找出A第一個pair
                if (A.cards[3].getFace().equals(A.cards[4].getFace())) //A 是2 pair 且位置是 1 2 3 4
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[4].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
            }

            //檢查pair
            int A_paircheck = 0;
            int temp_Aj = 0;

            for (int i = 0; i < 4; i++) {
                for (int j = i + 1; j < 5; j++) {
                    if (A.cards[i].getFace().equals(A.cards[j].getFace())) {
                        temp_Aj = j;
                        A_paircheck = 1;
                        break;
                    }
                }
            }

            int B_paircheck = 0;
            int temp_Bj = 0;
            for (int i = 0; i < 4; i++) {
                for (int j = i + 1; j < 5; j++) {
                    if (B.cards[i].getFace().equals(B.cards[j].getFace())) {
                        temp_Bj = j;
                        B_paircheck = 1;
                        break;
                    }
                }
            }

            if (A_paircheck == 1 && B_paircheck == 0) {
                return 1;
            } else if (A_paircheck == 0 && B_paircheck == 1) {
                return -1;
            } else if (A_paircheck == 1 && B_paircheck == 1) {
                if (A.cards[temp_Aj].compareTo(B.cards[temp_Bj]) == 1) {
                    return 1;
                } else {
                    return -1;
                }
            }

            //檢查High Card
            if (A.cards[4].compareTo(B.cards[4]) == 1) //比最後一張
            {
                return 1;
            } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                return -1;
            }

            return 0;
        }
    }
}

@e9f8baf6a72a3bbd5031300d289b5ada@"
"b03611035","7","0.152857142857143","121424","@5a47eaa6fd47e3a475cd7f46132a2c3e@import java.io.BufferedReader;
import java.io.FileReader;
public class HandPQ {
    
    public static void main(String[] args) throws Exception {
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            MinPQ<Hand>gg=new <Hand>MinPQ();
            //construct players' hands
            for(int x=0;x<count;x++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    cardsArray[i] = new Card(sep[1], sep[0]);
                }
                Hand playerArray = new Hand(cardsArray);
                 gg.insert(playerArray);
                 if(gg.size()>target)
                    gg.delMin();
            }
                    MinPQ<Card>haha=new <Card>MinPQ(gg.delMin().getCards());                    
                    for(int j=0;j<5;j++){
                        Card ff=haha.delMin();
                        String face=ff.getFace();
                        String suit=ff.getSuit();
                        System.out.print(suit);
                        System.out.print(""_"");
                        System.out.print(face);
                        if(j!=4) System.out.print("","");
                    }
            }
        }
    }

@5a47eaa6fd47e3a475cd7f46132a2c3e@"
"r04631004","4","0.85","152128","@f7eb2c751f2b03b60f56a030f98b8349@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MaxPQ maxpq = new MaxPQ();
            MaxPQ temp_maxpq = new MaxPQ();

            Player[] playerArray = new Player[count];

            for (int idx = 0; idx < count; idx++) {
                Player player = new Player();
                playerArray[idx] = player;
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                player.setCards(cardsArray);
                maxpq.insert(playerArray[idx]);
//                if (maxpq.size() > target) {  //當PQ的size超過target時就把多的丟出來
//                    int tempnum=maxpq.size() ;
//                    for (int i = 1; i < tempnum; i++) //把PQ內要的東西先暫存起來
//                    {
//                        Player temp=(Player) maxpq.delMax();
//                        temp_maxpq.insert(temp);
//                  //      temp.printCards();
//                    }
//                //    System.out.println("" "");
//                    Player temp1=(Player)maxpq.delMax(); //多出來的去除
//                //    temp1.printCards();
//              //      System.out.println("" "");
//                    for (int i = 1; i < tempnum; i++) //把還要的東西再存回來
//                    {
//                        Player temp=(Player) temp_maxpq.delMax();
//                        maxpq.insert(temp);
//             //           temp.printCards();
//                    }
//                }
            }
            int tempnum = maxpq.size();
            for (int i = 1; i < tempnum; i++) //把PQ內的東西都丟光，最後只要拿剩下的那一個
            {
                if (i == target - 1) {
                    maxpq.delMax();
                    break;
                } else {
                    maxpq.delMax();
                }
            }
            Player targetplayer = (Player) maxpq.delMax();
            //System.out.println("" "");
            targetplayer.printCards();

        }
    }

    private static class Player implements Comparable<Player> {

        private Card[] cards = new Card[5];

        public Player() {
        }

        // DO NOT MODIFY THIS
        public void setCards(Card[] cards) {
            this.cards = cards;
        }

        public void printCards() {
            for (int i = 0; i < 5; i++) {
                if (i == 4) {
                    System.out.println(this.cards[4].getSuit() + ""_"" + this.cards[4].getFace());
                } else {
                    System.out.print(this.cards[i].getSuit() + ""_"" + this.cards[i].getFace() + "","");
                }
            }

        }

        // TODO 
        public int compareTo(Player that) {
            // complete this function so the Player can be sorted according to the cards he/she has.
            Player A = this;
            Player B = that;
            Arrays.sort(A.cards);
            Arrays.sort(B.cards);
            //檢查full house
            if (A.cards[0].getFace().equals(A.cards[1].getFace()) && A.cards[0].getFace().equals(A.cards[2].getFace())) { //若A是前三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[0].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[0].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[0].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            } else if (A.cards[1].getFace().equals(A.cards[2].getFace()) && A.cards[1].getFace().equals(A.cards[3].getFace())) { //若A是中間三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[1].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[1].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[1].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            } else if (A.cards[2].getFace().equals(A.cards[3].getFace()) && A.cards[2].getFace().equals(A.cards[4].getFace())) { //若A是後三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[2].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[2].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[2].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            }

            //檢查Flush
            int flush_check = 0;
            for (int i = 1; i < 5; i++) {
                if (Card.SUIT_ORDER.compare(A.cards[0], A.cards[i]) != 0) {
                    flush_check = 1;
                    break;
                }
            }
            if (flush_check == 0) {
                for (int i = 1; i < 5; i++) {  //A是flush時判斷B是不是flush
                    if (Card.SUIT_ORDER.compare(B.cards[0], B.cards[i]) != 0) {
                        flush_check = 1;
                        break;
                    }
                }
                if (flush_check == 1) { //B不是flush
                    return 1;
                } else {
                    if (Card.SUIT_ORDER.compare(A.cards[0], B.cards[0]) == 1) {
                        return 1;
                    } else if (Card.SUIT_ORDER.compare(A.cards[0], B.cards[0]) == -1) {
                        return -1;
                    } else //同花色時,比最後一張
                    {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    }
                }
            } else {  //A不是flush時判斷B是不是flush
                flush_check = 0;
                for (int i = 1; i < 5; i++) {
                    if (Card.SUIT_ORDER.compare(B.cards[0], B.cards[i]) != 0) {
                        flush_check = 1;
                        break;
                    }
                }
                if (flush_check == 0) {
                    return -1;
                }
            }

            //檢查Straight
            int A_straightcheck = 0; //A_straightcheck=1 時表示不是Straight
            int first = 0;
            int last = 0;
            Card[] A_maxcard = new Card[1];
            for (int i = 0; i < 5; i++) { //A是否是Straight
                switch (A.cards[i].getFace()) {
                    case ""A"":
                        last = 13;
                        break;
                    case ""2"":
                        last = 1;
                        break;
                    case ""3"":
                        last = 2;
                        break;
                    case ""4"":
                        last = 3;
                        break;
                    case ""5"":
                        last = 4;
                        break;
                    case ""6"":
                        last = 5;
                        break;
                    case ""7"":
                        last = 6;
                        break;
                    case ""8"":
                        last = 7;
                        break;
                    case ""9"":
                        last = 8;
                        break;
                    case ""10"":
                        last = 9;
                        break;
                    case ""J"":
                        last = 10;
                        break;
                    case ""Q"":
                        last = 11;
                        break;
                    case ""K"":
                        last = 12;
                        break;
                }
                if (i > 0) {
                    if (last - first != 1) {
                        if (i == 4 && last == 13 && first == 4) {  //A 2 3 4 5的情況
                            A_maxcard[0] = A.cards[3];
                            break;
                        }
                        A_straightcheck = 1;
                        break;
                    }
                }
                if (i == 4) {
                    A_maxcard[0] = A.cards[4];
                }
                first = last;
            }

            int B_straightcheck = 0;
            first = 0;
            last = 0;
            Card[] B_maxcard = new Card[1];
            for (int i = 0; i < 5; i++) { //B是否是Straight
                switch (B.cards[i].getFace()) {
                    case ""A"":
                        last = 13;
                        break;
                    case ""2"":
                        last = 1;
                        break;
                    case ""3"":
                        last = 2;
                        break;
                    case ""4"":
                        last = 3;
                        break;
                    case ""5"":
                        last = 4;
                        break;
                    case ""6"":
                        last = 5;
                        break;
                    case ""7"":
                        last = 6;
                        break;
                    case ""8"":
                        last = 7;
                        break;
                    case ""9"":
                        last = 8;
                        break;
                    case ""10"":
                        last = 9;
                        break;
                    case ""J"":
                        last = 10;
                        break;
                    case ""Q"":
                        last = 11;
                        break;
                    case ""K"":
                        last = 12;
                        break;
                }
                if (i > 0) {
                    if (last - first != 1) {
                        if (i == 4 && last == 13 && first == 4) {  //A 2 3 4 5的情況
                            B_maxcard[0] = B.cards[3];
                            break;
                        }
                        B_straightcheck = 1;
                        break;
                    }
                }
                if (i == 4) {
                    B_maxcard[0] = B.cards[4];
                }
                first = last;
            }

            if (A_straightcheck == 0 && B_straightcheck == 1) {
                return 1;
            } else if (A_straightcheck == 1 && B_straightcheck == 0) {
                return -1;
            } else if (A_straightcheck == 0 && B_straightcheck == 0) { //如果A與B都是straight
                if (A_maxcard[0].compareTo(B_maxcard[0]) == 1) {
                    return 1;
                } else if (A_maxcard[0].compareTo(B_maxcard[0]) == -1) {
                    return -1;
                }
            }

            //檢查 2 pair
            if (A.cards[0].getFace().equals(A.cards[1].getFace())) { //找出A第一個pair
                if (A.cards[2].getFace().equals(A.cards[3].getFace())) //A 是2 pair 且位置是0 1 2 3
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[3].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[3].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[3].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
                if (A.cards[3].getFace().equals(A.cards[4].getFace())) //A 是2 pair 且位置是0 1 3 4
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[4].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
            }
            if (A.cards[1].getFace().equals(A.cards[2].getFace())) { //找出A第一個pair
                if (A.cards[3].getFace().equals(A.cards[4].getFace())) //A 是2 pair 且位置是 1 2 3 4
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[4].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
            }

            //檢查pair
            int A_paircheck = 0;
            int temp_Aj = 0;

            for (int i = 0; i < 4; i++) {
                for (int j = i + 1; j < 5; j++) {
                    if (A.cards[i].getFace().equals(A.cards[j].getFace())) {
                        temp_Aj = j;
                        A_paircheck = 1;
                        break;
                    }
                }
            }

            int B_paircheck = 0;
            int temp_Bj = 0;
            for (int i = 0; i < 4; i++) {
                for (int j = i + 1; j < 5; j++) {
                    if (B.cards[i].getFace().equals(B.cards[j].getFace())) {
                        temp_Bj = j;
                        B_paircheck = 1;
                        break;
                    }
                }
            }

            if (A_paircheck == 1 && B_paircheck == 0) {
                return 1;
            } else if (A_paircheck == 0 && B_paircheck == 1) {
                return -1;
            } else if (A_paircheck == 1 && B_paircheck == 1) {
                if (A.cards[temp_Aj].compareTo(B.cards[temp_Bj]) == 1) {
                    return 1;
                } else {
                    return -1;
                }
            }

            //檢查High Card
            if (A.cards[4].compareTo(B.cards[4]) == 1) //比最後一張
            {
                return 1;
            } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                return -1;
            }

            return 0;
        }
    }
}

@f7eb2c751f2b03b60f56a030f98b8349@"
"b03611015","0","0.27","105744","@4d0cb67e662e82db9e2cb621f0088fb5@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            Hand[] playerArray = new Hand[count];
           
            for (int x = 0; x < count; x++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                playerArray[x] = new Hand(cardsArray);
            }
                Arrays.sort(playerArray);
                
                    System.out.println(playerArray[count-1-target]);
                }

            }
        }
    

@4d0cb67e662e82db9e2cb621f0088fb5@"
"b03611015","0","0.28","105344","@e164fe3338c44fbdbf02064da88cbd90@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            Hand[] playerArray = new Hand[count];
           
            for (int x = 0; x < count; x++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                playerArray[x] = new Hand(cardsArray);
            }
                Arrays.sort(playerArray);
                
                    System.out.println(playerArray[count+1-target]);
                }

            }
        }
    

@e164fe3338c44fbdbf02064da88cbd90@"
"b03611015","0","0.3","105648","@aae9acde58af9d37a777afe3883c912a@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            Hand[] playerArray = new Hand[count];
           
            for (int x = 0; x < count; x++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                playerArray[x] = new Hand(cardsArray);
            }
                Arrays.sort(playerArray);
                
                    Card[] A =playerArray[count-target-1].getCards();
                    for(int i=0;i<5;i++)
                    System.out.printf(A[i].getSuit()+""_""+A[i].getFace()+"","");
                }

            }
        }
    

@aae9acde58af9d37a777afe3883c912a@"
"b03611015","0","0.3","104544","@aae9acde58af9d37a777afe3883c912a@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            Hand[] playerArray = new Hand[count];
           
            for (int x = 0; x < count; x++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                playerArray[x] = new Hand(cardsArray);
            }
                Arrays.sort(playerArray);
                
                    Card[] A =playerArray[count-target-1].getCards();
                    for(int i=0;i<5;i++)
                    System.out.printf(A[i].getSuit()+""_""+A[i].getFace()+"","");
                }

            }
        }
    

@aae9acde58af9d37a777afe3883c912a@"
"r04631004","5","0.83","148688","@60634eea5cc3d0212adb56c58a7c3b7d@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MaxPQ maxpq = new MaxPQ();
            MaxPQ temp_maxpq = new MaxPQ();

            Player[] playerArray = new Player[count];

            for (int idx = 0; idx < count; idx++) {
                Player player = new Player();
                playerArray[idx] = player;
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                player.setCards(cardsArray);
                maxpq.insert(playerArray[idx]);
//                if (maxpq.size() > target) {  //當PQ的size超過target時就把多的丟出來
//                    int tempnum=maxpq.size() ;
//                    for (int i = 1; i < tempnum; i++) //把PQ內要的東西先暫存起來
//                    {
//                        Player temp=(Player) maxpq.delMax();
//                        temp_maxpq.insert(temp);
//                  //      temp.printCards();
//                    }
//                //    System.out.println("" "");
//                    Player temp1=(Player)maxpq.delMax(); //多出來的去除
//                //    temp1.printCards();
//              //      System.out.println("" "");
//                    for (int i = 1; i < tempnum; i++) //把還要的東西再存回來
//                    {
//                        Player temp=(Player) temp_maxpq.delMax();
//                        maxpq.insert(temp);
//             //           temp.printCards();
//                    }
//                }
            }
            int tempnum = maxpq.size();
            for (int i = 1; i < tempnum; i++) //把PQ內的東西都丟光，最後只要拿剩下的那一個
            {
                if (i == target - 1) {
                    maxpq.delMax();
                    break;
                } else if (target - 1 == 0) {
                    break;
                } else {
                    maxpq.delMax();
                }
            }
            Player targetplayer = (Player) maxpq.delMax();
            //System.out.println("" "");
            targetplayer.printCards();

        }
    }

    private static class Player implements Comparable<Player> {

        private Card[] cards = new Card[5];

        public Player() {
        }

        // DO NOT MODIFY THIS
        public void setCards(Card[] cards) {
            this.cards = cards;
        }

        public void printCards() {
            for (int i = 0; i < 5; i++) {
                if (i == 4) {
                    System.out.println(this.cards[4].getSuit() + ""_"" + this.cards[4].getFace());
                } else {
                    System.out.print(this.cards[i].getSuit() + ""_"" + this.cards[i].getFace() + "","");
                }
            }

        }

        // TODO 
        public int compareTo(Player that) {
            // complete this function so the Player can be sorted according to the cards he/she has.
            Player A = this;
            Player B = that;
            Arrays.sort(A.cards);
            Arrays.sort(B.cards);
            //檢查full house
            if (A.cards[0].getFace().equals(A.cards[1].getFace()) && A.cards[0].getFace().equals(A.cards[2].getFace())) { //若A是前三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[0].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[0].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[0].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            } else if (A.cards[1].getFace().equals(A.cards[2].getFace()) && A.cards[1].getFace().equals(A.cards[3].getFace())) { //若A是中間三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[1].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[1].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[1].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            } else if (A.cards[2].getFace().equals(A.cards[3].getFace()) && A.cards[2].getFace().equals(A.cards[4].getFace())) { //若A是後三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[2].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[2].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[2].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            }

            //檢查Flush
            int flush_check = 0;
            for (int i = 1; i < 5; i++) {
                if (Card.SUIT_ORDER.compare(A.cards[0], A.cards[i]) != 0) {
                    flush_check = 1;
                    break;
                }
            }
            if (flush_check == 0) {
                for (int i = 1; i < 5; i++) {  //A是flush時判斷B是不是flush
                    if (Card.SUIT_ORDER.compare(B.cards[0], B.cards[i]) != 0) {
                        flush_check = 1;
                        break;
                    }
                }
                if (flush_check == 1) { //B不是flush
                    return 1;
                } else {
                    if (Card.SUIT_ORDER.compare(A.cards[0], B.cards[0]) == 1) {
                        return 1;
                    } else if (Card.SUIT_ORDER.compare(A.cards[0], B.cards[0]) == -1) {
                        return -1;
                    } else //同花色時,比最後一張
                    {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    }
                }
            } else {  //A不是flush時判斷B是不是flush
                flush_check = 0;
                for (int i = 1; i < 5; i++) {
                    if (Card.SUIT_ORDER.compare(B.cards[0], B.cards[i]) != 0) {
                        flush_check = 1;
                        break;
                    }
                }
                if (flush_check == 0) {
                    return -1;
                }
            }

            //檢查Straight
            int A_straightcheck = 0; //A_straightcheck=1 時表示不是Straight
            int first = 0;
            int last = 0;
            Card[] A_maxcard = new Card[1];
            for (int i = 0; i < 5; i++) { //A是否是Straight
                switch (A.cards[i].getFace()) {
                    case ""A"":
                        last = 13;
                        break;
                    case ""2"":
                        last = 1;
                        break;
                    case ""3"":
                        last = 2;
                        break;
                    case ""4"":
                        last = 3;
                        break;
                    case ""5"":
                        last = 4;
                        break;
                    case ""6"":
                        last = 5;
                        break;
                    case ""7"":
                        last = 6;
                        break;
                    case ""8"":
                        last = 7;
                        break;
                    case ""9"":
                        last = 8;
                        break;
                    case ""10"":
                        last = 9;
                        break;
                    case ""J"":
                        last = 10;
                        break;
                    case ""Q"":
                        last = 11;
                        break;
                    case ""K"":
                        last = 12;
                        break;
                }
                if (i > 0) {
                    if (last - first != 1) {
                        if (i == 4 && last == 13 && first == 4) {  //A 2 3 4 5的情況
                            A_maxcard[0] = A.cards[3];
                            break;
                        }
                        A_straightcheck = 1;
                        break;
                    }
                }
                if (i == 4) {
                    A_maxcard[0] = A.cards[4];
                }
                first = last;
            }

            int B_straightcheck = 0;
            first = 0;
            last = 0;
            Card[] B_maxcard = new Card[1];
            for (int i = 0; i < 5; i++) { //B是否是Straight
                switch (B.cards[i].getFace()) {
                    case ""A"":
                        last = 13;
                        break;
                    case ""2"":
                        last = 1;
                        break;
                    case ""3"":
                        last = 2;
                        break;
                    case ""4"":
                        last = 3;
                        break;
                    case ""5"":
                        last = 4;
                        break;
                    case ""6"":
                        last = 5;
                        break;
                    case ""7"":
                        last = 6;
                        break;
                    case ""8"":
                        last = 7;
                        break;
                    case ""9"":
                        last = 8;
                        break;
                    case ""10"":
                        last = 9;
                        break;
                    case ""J"":
                        last = 10;
                        break;
                    case ""Q"":
                        last = 11;
                        break;
                    case ""K"":
                        last = 12;
                        break;
                }
                if (i > 0) {
                    if (last - first != 1) {
                        if (i == 4 && last == 13 && first == 4) {  //A 2 3 4 5的情況
                            B_maxcard[0] = B.cards[3];
                            break;
                        }
                        B_straightcheck = 1;
                        break;
                    }
                }
                if (i == 4) {
                    B_maxcard[0] = B.cards[4];
                }
                first = last;
            }

            if (A_straightcheck == 0 && B_straightcheck == 1) {
                return 1;
            } else if (A_straightcheck == 1 && B_straightcheck == 0) {
                return -1;
            } else if (A_straightcheck == 0 && B_straightcheck == 0) { //如果A與B都是straight
                if (A_maxcard[0].compareTo(B_maxcard[0]) == 1) {
                    return 1;
                } else if (A_maxcard[0].compareTo(B_maxcard[0]) == -1) {
                    return -1;
                }
            }

            //檢查 2 pair
            if (A.cards[0].getFace().equals(A.cards[1].getFace())) { //找出A第一個pair
                if (A.cards[2].getFace().equals(A.cards[3].getFace())) //A 是2 pair 且位置是0 1 2 3
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[3].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[3].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[3].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
                if (A.cards[3].getFace().equals(A.cards[4].getFace())) //A 是2 pair 且位置是0 1 3 4
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[4].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
            }
            if (A.cards[1].getFace().equals(A.cards[2].getFace())) { //找出A第一個pair
                if (A.cards[3].getFace().equals(A.cards[4].getFace())) //A 是2 pair 且位置是 1 2 3 4
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[4].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
            }

            //檢查pair
            int A_paircheck = 0;
            int temp_Aj = 0;

            for (int i = 0; i < 4; i++) {
                for (int j = i + 1; j < 5; j++) {
                    if (A.cards[i].getFace().equals(A.cards[j].getFace())) {
                        temp_Aj = j;
                        A_paircheck = 1;
                        break;
                    }
                }
            }

            int B_paircheck = 0;
            int temp_Bj = 0;
            for (int i = 0; i < 4; i++) {
                for (int j = i + 1; j < 5; j++) {
                    if (B.cards[i].getFace().equals(B.cards[j].getFace())) {
                        temp_Bj = j;
                        B_paircheck = 1;
                        break;
                    }
                }
            }

            if (A_paircheck == 1 && B_paircheck == 0) {
                return 1;
            } else if (A_paircheck == 0 && B_paircheck == 1) {
                return -1;
            } else if (A_paircheck == 1 && B_paircheck == 1) {
                if (A.cards[temp_Aj].compareTo(B.cards[temp_Bj]) == 1) {
                    return 1;
                } else {
                    return -1;
                }
            }

            //檢查High Card
            if (A.cards[4].compareTo(B.cards[4]) == 1) //比最後一張
            {
                return 1;
            } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                return -1;
            }

            return 0;
        }
    }
}

@60634eea5cc3d0212adb56c58a7c3b7d@"
"b03611015","0","0.29","101872","@a0be36f42345eec045f365fc6520acd8@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            Hand[] playerArray = new Hand[count];
           
            for (int x = 0; x < count; x++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                playerArray[x] = new Hand(cardsArray);
            }
                Arrays.sort(playerArray);
                
                    Card[] A =playerArray[count-target-1].getCards();
                    for(int i=0;i<4;i++)
                    System.out.printf(A[i].getSuit()+""_""+A[i].getFace()+"","");
                    
                    System.out.printf(A[4].getSuit()+""_""+A[4].getFace());
                }

            }
        }
    

@a0be36f42345eec045f365fc6520acd8@"
"r04631004","4","1.31","184752","@a31d18b808573fff0e146f5dae4e6741@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MaxPQ maxpq = new MaxPQ();
            MaxPQ temp_maxpq = new MaxPQ();

            Player[] playerArray = new Player[count];

            for (int idx = 0; idx < count; idx++) {
                Player player = new Player();
                playerArray[idx] = player;
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                player.setCards(cardsArray);
                maxpq.insert(playerArray[idx]);
                if (maxpq.size() > target) {  //當PQ的size超過target時就把多的丟出來
                    int tempnum=maxpq.size() ;
                    for (int i = 1; i < tempnum; i++) //把PQ內要的東西先暫存起來
                    {
                        Player temp=(Player) maxpq.delMax();
                        temp_maxpq.insert(temp);
                  //      temp.printCards();
                    }
                //    System.out.println("" "");
                    Player temp1=(Player)maxpq.delMax(); //多出來的去除
                //    temp1.printCards();
              //      System.out.println("" "");
                    for (int i = 1; i < tempnum; i++) //把還要的東西再存回來
                    {
                        Player temp=(Player) temp_maxpq.delMax();
                        maxpq.insert(temp);
             //           temp.printCards();
                    }
                }
            }
            int tempnum = maxpq.size();
            for (int i = 1; i < tempnum; i++) //把PQ內的東西都丟光，最後只要拿剩下的那一個
            {
                if (i == target - 1) {
                    maxpq.delMax();
                    break;
                } else if (target - 1 == 0) {
                    break;
                } else {
                    maxpq.delMax();
                }
            }
            Player targetplayer = (Player) maxpq.delMax();
            //System.out.println("" "");
            targetplayer.printCards();

        }
    }

    private static class Player implements Comparable<Player> {

        private Card[] cards = new Card[5];

        public Player() {
        }

        // DO NOT MODIFY THIS
        public void setCards(Card[] cards) {
            this.cards = cards;
        }

        public void printCards() {
            for (int i = 0; i < 5; i++) {
                if (i == 4) {
                    System.out.println(this.cards[4].getSuit() + ""_"" + this.cards[4].getFace());
                } else {
                    System.out.print(this.cards[i].getSuit() + ""_"" + this.cards[i].getFace() + "","");
                }
            }

        }

        // TODO 
        public int compareTo(Player that) {
            // complete this function so the Player can be sorted according to the cards he/she has.
            Player A = this;
            Player B = that;
            Arrays.sort(A.cards);
            Arrays.sort(B.cards);
            //檢查full house
            if (A.cards[0].getFace().equals(A.cards[1].getFace()) && A.cards[0].getFace().equals(A.cards[2].getFace())) { //若A是前三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[0].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[0].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[0].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            } else if (A.cards[1].getFace().equals(A.cards[2].getFace()) && A.cards[1].getFace().equals(A.cards[3].getFace())) { //若A是中間三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[1].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[1].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[1].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            } else if (A.cards[2].getFace().equals(A.cards[3].getFace()) && A.cards[2].getFace().equals(A.cards[4].getFace())) { //若A是後三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[2].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[2].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[2].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            }

            //檢查Flush
            int flush_check = 0;
            for (int i = 1; i < 5; i++) {
                if (Card.SUIT_ORDER.compare(A.cards[0], A.cards[i]) != 0) {
                    flush_check = 1;
                    break;
                }
            }
            if (flush_check == 0) {
                for (int i = 1; i < 5; i++) {  //A是flush時判斷B是不是flush
                    if (Card.SUIT_ORDER.compare(B.cards[0], B.cards[i]) != 0) {
                        flush_check = 1;
                        break;
                    }
                }
                if (flush_check == 1) { //B不是flush
                    return 1;
                } else {
                    if (Card.SUIT_ORDER.compare(A.cards[0], B.cards[0]) == 1) {
                        return 1;
                    } else if (Card.SUIT_ORDER.compare(A.cards[0], B.cards[0]) == -1) {
                        return -1;
                    } else //同花色時,比最後一張
                    {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    }
                }
            } else {  //A不是flush時判斷B是不是flush
                flush_check = 0;
                for (int i = 1; i < 5; i++) {
                    if (Card.SUIT_ORDER.compare(B.cards[0], B.cards[i]) != 0) {
                        flush_check = 1;
                        break;
                    }
                }
                if (flush_check == 0) {
                    return -1;
                }
            }

            //檢查Straight
            int A_straightcheck = 0; //A_straightcheck=1 時表示不是Straight
            int first = 0;
            int last = 0;
            Card[] A_maxcard = new Card[1];
            for (int i = 0; i < 5; i++) { //A是否是Straight
                switch (A.cards[i].getFace()) {
                    case ""A"":
                        last = 13;
                        break;
                    case ""2"":
                        last = 1;
                        break;
                    case ""3"":
                        last = 2;
                        break;
                    case ""4"":
                        last = 3;
                        break;
                    case ""5"":
                        last = 4;
                        break;
                    case ""6"":
                        last = 5;
                        break;
                    case ""7"":
                        last = 6;
                        break;
                    case ""8"":
                        last = 7;
                        break;
                    case ""9"":
                        last = 8;
                        break;
                    case ""10"":
                        last = 9;
                        break;
                    case ""J"":
                        last = 10;
                        break;
                    case ""Q"":
                        last = 11;
                        break;
                    case ""K"":
                        last = 12;
                        break;
                }
                if (i > 0) {
                    if (last - first != 1) {
                        if (i == 4 && last == 13 && first == 4) {  //A 2 3 4 5的情況
                            A_maxcard[0] = A.cards[3];
                            break;
                        }
                        A_straightcheck = 1;
                        break;
                    }
                }
                if (i == 4) {
                    A_maxcard[0] = A.cards[4];
                }
                first = last;
            }

            int B_straightcheck = 0;
            first = 0;
            last = 0;
            Card[] B_maxcard = new Card[1];
            for (int i = 0; i < 5; i++) { //B是否是Straight
                switch (B.cards[i].getFace()) {
                    case ""A"":
                        last = 13;
                        break;
                    case ""2"":
                        last = 1;
                        break;
                    case ""3"":
                        last = 2;
                        break;
                    case ""4"":
                        last = 3;
                        break;
                    case ""5"":
                        last = 4;
                        break;
                    case ""6"":
                        last = 5;
                        break;
                    case ""7"":
                        last = 6;
                        break;
                    case ""8"":
                        last = 7;
                        break;
                    case ""9"":
                        last = 8;
                        break;
                    case ""10"":
                        last = 9;
                        break;
                    case ""J"":
                        last = 10;
                        break;
                    case ""Q"":
                        last = 11;
                        break;
                    case ""K"":
                        last = 12;
                        break;
                }
                if (i > 0) {
                    if (last - first != 1) {
                        if (i == 4 && last == 13 && first == 4) {  //A 2 3 4 5的情況
                            B_maxcard[0] = B.cards[3];
                            break;
                        }
                        B_straightcheck = 1;
                        break;
                    }
                }
                if (i == 4) {
                    B_maxcard[0] = B.cards[4];
                }
                first = last;
            }

            if (A_straightcheck == 0 && B_straightcheck == 1) {
                return 1;
            } else if (A_straightcheck == 1 && B_straightcheck == 0) {
                return -1;
            } else if (A_straightcheck == 0 && B_straightcheck == 0) { //如果A與B都是straight
                if (A_maxcard[0].compareTo(B_maxcard[0]) == 1) {
                    return 1;
                } else if (A_maxcard[0].compareTo(B_maxcard[0]) == -1) {
                    return -1;
                }
            }

            //檢查 2 pair
            if (A.cards[0].getFace().equals(A.cards[1].getFace())) { //找出A第一個pair
                if (A.cards[2].getFace().equals(A.cards[3].getFace())) //A 是2 pair 且位置是0 1 2 3
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[3].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[3].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[3].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
                if (A.cards[3].getFace().equals(A.cards[4].getFace())) //A 是2 pair 且位置是0 1 3 4
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[4].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
            }
            if (A.cards[1].getFace().equals(A.cards[2].getFace())) { //找出A第一個pair
                if (A.cards[3].getFace().equals(A.cards[4].getFace())) //A 是2 pair 且位置是 1 2 3 4
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[4].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
            }

            //檢查pair
            int A_paircheck = 0;
            int temp_Aj = 0;

            for (int i = 0; i < 4; i++) {
                for (int j = i + 1; j < 5; j++) {
                    if (A.cards[i].getFace().equals(A.cards[j].getFace())) {
                        temp_Aj = j;
                        A_paircheck = 1;
                        break;
                    }
                }
            }

            int B_paircheck = 0;
            int temp_Bj = 0;
            for (int i = 0; i < 4; i++) {
                for (int j = i + 1; j < 5; j++) {
                    if (B.cards[i].getFace().equals(B.cards[j].getFace())) {
                        temp_Bj = j;
                        B_paircheck = 1;
                        break;
                    }
                }
            }

            if (A_paircheck == 1 && B_paircheck == 0) {
                return 1;
            } else if (A_paircheck == 0 && B_paircheck == 1) {
                return -1;
            } else if (A_paircheck == 1 && B_paircheck == 1) {
                if (A.cards[temp_Aj].compareTo(B.cards[temp_Bj]) == 1) {
                    return 1;
                } else {
                    return -1;
                }
            }

            //檢查High Card
            if (A.cards[4].compareTo(B.cards[4]) == 1) //比最後一張
            {
                return 1;
            } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                return -1;
            }

            return 0;
        }
    }
}

@a31d18b808573fff0e146f5dae4e6741@"
"b03611015","4","0.38","105568","@24fb3e8b6e28ff0d10b695a4d72fd4de@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            Hand[] playerArray = new Hand[count];
           
            for (int x = 0; x < count; x++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                playerArray[x] = new Hand(cardsArray);
            }
                Arrays.sort(playerArray);
                
                    Card[] A =playerArray[count-target].getCards();
                    for(int i=0;i<4;i++)
                    System.out.printf(A[i].getSuit()+""_""+A[i].getFace()+"","");
                    
                    System.out.printf(A[4].getSuit()+""_""+A[4].getFace());
                }

            }
        }
    

@24fb3e8b6e28ff0d10b695a4d72fd4de@"
"r04631004","4","0.99","169936","@9e033915c4d1af722b990213cdf1f35a@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MaxPQ maxpq = new MaxPQ();
            MaxPQ temp_maxpq = new MaxPQ();

            Player[] playerArray = new Player[count];

            Player tempcompare = new Player();
            int n = 0;
            for (int idx = 0; idx < count; idx++) {
                Player player = new Player();
                playerArray[idx] = player;
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                player.setCards(cardsArray);
                if (n == 0) {
                    maxpq.insert(playerArray[idx]);
                } else {
                    if (playerArray[idx].compareTo(tempcompare) == 1) {
                        maxpq.insert(playerArray[idx]);
                    }
                }
                if (maxpq.size() > target) {  //當PQ的size超過target時就把多的丟出來
                    int tempnum = maxpq.size();
                    for (int i = 1; i < tempnum; i++) //把PQ內要的東西先暫存起來
                    {
                        if (i == tempnum - 1) {
                            Player temp = (Player) maxpq.delMax();
                            temp_maxpq.insert(temp);
                            tempcompare = temp;
                            n = 1;
                        } else {
                            Player temp = (Player) maxpq.delMax();
                            temp_maxpq.insert(temp);
                        }
                        //      temp.printCards();
                    }
                    //    System.out.println("" "");
                    Player temp1 = (Player) maxpq.delMax(); //多出來的去除
                    //    temp1.printCards();
                    //      System.out.println("" "");
                    for (int i = 1; i < tempnum; i++) //把還要的東西再存回來
                    {
                        Player temp = (Player) temp_maxpq.delMax();
                        maxpq.insert(temp);
                        //           temp.printCards();
                    }
                }
            }
            int tempnum = maxpq.size();
            for (int i = 1; i < tempnum; i++) //把PQ內的東西都丟光，最後只要拿剩下的那一個
            {
                if (i == target - 1) {
                    maxpq.delMax();
                    break;
                } else if (target - 1 == 0) {
                    break;
                } else {
                    maxpq.delMax();
                }
            }
            Player targetplayer = (Player) maxpq.delMax();
            //System.out.println("" "");
            targetplayer.printCards();

        }
    }

    private static class Player implements Comparable<Player> {

        private Card[] cards = new Card[5];

        public Player() {
        }

        // DO NOT MODIFY THIS
        public void setCards(Card[] cards) {
            this.cards = cards;
        }

        public void printCards() {
            for (int i = 0; i < 5; i++) {
                if (i == 4) {
                    System.out.println(this.cards[4].getSuit() + ""_"" + this.cards[4].getFace());
                } else {
                    System.out.print(this.cards[i].getSuit() + ""_"" + this.cards[i].getFace() + "","");
                }
            }

        }

        // TODO 
        public int compareTo(Player that) {
            // complete this function so the Player can be sorted according to the cards he/she has.
            Player A = this;
            Player B = that;
            Arrays.sort(A.cards);
            Arrays.sort(B.cards);
            //檢查full house
            if (A.cards[0].getFace().equals(A.cards[1].getFace()) && A.cards[0].getFace().equals(A.cards[2].getFace())) { //若A是前三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[0].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[0].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[0].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            } else if (A.cards[1].getFace().equals(A.cards[2].getFace()) && A.cards[1].getFace().equals(A.cards[3].getFace())) { //若A是中間三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[1].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[1].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[1].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            } else if (A.cards[2].getFace().equals(A.cards[3].getFace()) && A.cards[2].getFace().equals(A.cards[4].getFace())) { //若A是後三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[2].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[2].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[2].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            }

            //檢查Flush
            int flush_check = 0;
            for (int i = 1; i < 5; i++) {
                if (Card.SUIT_ORDER.compare(A.cards[0], A.cards[i]) != 0) {
                    flush_check = 1;
                    break;
                }
            }
            if (flush_check == 0) {
                for (int i = 1; i < 5; i++) {  //A是flush時判斷B是不是flush
                    if (Card.SUIT_ORDER.compare(B.cards[0], B.cards[i]) != 0) {
                        flush_check = 1;
                        break;
                    }
                }
                if (flush_check == 1) { //B不是flush
                    return 1;
                } else {
                    if (Card.SUIT_ORDER.compare(A.cards[0], B.cards[0]) == 1) {
                        return 1;
                    } else if (Card.SUIT_ORDER.compare(A.cards[0], B.cards[0]) == -1) {
                        return -1;
                    } else //同花色時,比最後一張
                    {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    }
                }
            } else {  //A不是flush時判斷B是不是flush
                flush_check = 0;
                for (int i = 1; i < 5; i++) {
                    if (Card.SUIT_ORDER.compare(B.cards[0], B.cards[i]) != 0) {
                        flush_check = 1;
                        break;
                    }
                }
                if (flush_check == 0) {
                    return -1;
                }
            }

            //檢查Straight
            int A_straightcheck = 0; //A_straightcheck=1 時表示不是Straight
            int first = 0;
            int last = 0;
            Card[] A_maxcard = new Card[1];
            for (int i = 0; i < 5; i++) { //A是否是Straight
                switch (A.cards[i].getFace()) {
                    case ""A"":
                        last = 13;
                        break;
                    case ""2"":
                        last = 1;
                        break;
                    case ""3"":
                        last = 2;
                        break;
                    case ""4"":
                        last = 3;
                        break;
                    case ""5"":
                        last = 4;
                        break;
                    case ""6"":
                        last = 5;
                        break;
                    case ""7"":
                        last = 6;
                        break;
                    case ""8"":
                        last = 7;
                        break;
                    case ""9"":
                        last = 8;
                        break;
                    case ""10"":
                        last = 9;
                        break;
                    case ""J"":
                        last = 10;
                        break;
                    case ""Q"":
                        last = 11;
                        break;
                    case ""K"":
                        last = 12;
                        break;
                }
                if (i > 0) {
                    if (last - first != 1) {
                        if (i == 4 && last == 13 && first == 4) {  //A 2 3 4 5的情況
                            A_maxcard[0] = A.cards[3];
                            break;
                        }
                        A_straightcheck = 1;
                        break;
                    }
                }
                if (i == 4) {
                    A_maxcard[0] = A.cards[4];
                }
                first = last;
            }

            int B_straightcheck = 0;
            first = 0;
            last = 0;
            Card[] B_maxcard = new Card[1];
            for (int i = 0; i < 5; i++) { //B是否是Straight
                switch (B.cards[i].getFace()) {
                    case ""A"":
                        last = 13;
                        break;
                    case ""2"":
                        last = 1;
                        break;
                    case ""3"":
                        last = 2;
                        break;
                    case ""4"":
                        last = 3;
                        break;
                    case ""5"":
                        last = 4;
                        break;
                    case ""6"":
                        last = 5;
                        break;
                    case ""7"":
                        last = 6;
                        break;
                    case ""8"":
                        last = 7;
                        break;
                    case ""9"":
                        last = 8;
                        break;
                    case ""10"":
                        last = 9;
                        break;
                    case ""J"":
                        last = 10;
                        break;
                    case ""Q"":
                        last = 11;
                        break;
                    case ""K"":
                        last = 12;
                        break;
                }
                if (i > 0) {
                    if (last - first != 1) {
                        if (i == 4 && last == 13 && first == 4) {  //A 2 3 4 5的情況
                            B_maxcard[0] = B.cards[3];
                            break;
                        }
                        B_straightcheck = 1;
                        break;
                    }
                }
                if (i == 4) {
                    B_maxcard[0] = B.cards[4];
                }
                first = last;
            }

            if (A_straightcheck == 0 && B_straightcheck == 1) {
                return 1;
            } else if (A_straightcheck == 1 && B_straightcheck == 0) {
                return -1;
            } else if (A_straightcheck == 0 && B_straightcheck == 0) { //如果A與B都是straight
                if (A_maxcard[0].compareTo(B_maxcard[0]) == 1) {
                    return 1;
                } else if (A_maxcard[0].compareTo(B_maxcard[0]) == -1) {
                    return -1;
                }
            }

            //檢查 2 pair
            if (A.cards[0].getFace().equals(A.cards[1].getFace())) { //找出A第一個pair
                if (A.cards[2].getFace().equals(A.cards[3].getFace())) //A 是2 pair 且位置是0 1 2 3
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[3].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[3].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[3].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
                if (A.cards[3].getFace().equals(A.cards[4].getFace())) //A 是2 pair 且位置是0 1 3 4
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[4].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
            }
            if (A.cards[1].getFace().equals(A.cards[2].getFace())) { //找出A第一個pair
                if (A.cards[3].getFace().equals(A.cards[4].getFace())) //A 是2 pair 且位置是 1 2 3 4
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[4].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
            }

            //檢查pair
            int A_paircheck = 0;
            int temp_Aj = 0;

            for (int i = 0; i < 4; i++) {
                for (int j = i + 1; j < 5; j++) {
                    if (A.cards[i].getFace().equals(A.cards[j].getFace())) {
                        temp_Aj = j;
                        A_paircheck = 1;
                        break;
                    }
                }
            }

            int B_paircheck = 0;
            int temp_Bj = 0;
            for (int i = 0; i < 4; i++) {
                for (int j = i + 1; j < 5; j++) {
                    if (B.cards[i].getFace().equals(B.cards[j].getFace())) {
                        temp_Bj = j;
                        B_paircheck = 1;
                        break;
                    }
                }
            }

            if (A_paircheck == 1 && B_paircheck == 0) {
                return 1;
            } else if (A_paircheck == 0 && B_paircheck == 1) {
                return -1;
            } else if (A_paircheck == 1 && B_paircheck == 1) {
                if (A.cards[temp_Aj].compareTo(B.cards[temp_Bj]) == 1) {
                    return 1;
                } else {
                    return -1;
                }
            }

            //檢查High Card
            if (A.cards[4].compareTo(B.cards[4]) == 1) //比最後一張
            {
                return 1;
            } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                return -1;
            }

            return 0;
        }
    }
}

@9e033915c4d1af722b990213cdf1f35a@"
"r04631004","5","0.86","150336","@ed720612e7271de10f44ca63f8874ad7@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ maxpq = new MinPQ();

            Player[] playerArray = new Player[count];
            for (int idx = 0; idx < count; idx++) {
                Player player = new Player();
                playerArray[idx] = player;
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                player.setCards(cardsArray);
                maxpq.insert(playerArray[idx]);

                if (maxpq.size() > target) {  //當PQ的size超過target時就把多的丟出來
                    maxpq.delMin();
                }

            }
            Player targetplayer = (Player) maxpq.delMin();
            //System.out.println("" "");
            targetplayer.printCards();

        }
    }

    private static class Player implements Comparable<Player> {

        private Card[] cards = new Card[5];

        public Player() {
        }

        // DO NOT MODIFY THIS
        public void setCards(Card[] cards) {
            this.cards = cards;
        }

        public void printCards() {
            for (int i = 0; i < 5; i++) {
                if (i == 4) {
                    System.out.println(this.cards[4].getSuit() + ""_"" + this.cards[4].getFace());
                } else {
                    System.out.print(this.cards[i].getSuit() + ""_"" + this.cards[i].getFace() + "","");
                }
            }

        }

        // TODO 
        public int compareTo(Player that) {
            // complete this function so the Player can be sorted according to the cards he/she has.
            Player A = this;
            Player B = that;
            Arrays.sort(A.cards);
            Arrays.sort(B.cards);
            //檢查full house
            if (A.cards[0].getFace().equals(A.cards[1].getFace()) && A.cards[0].getFace().equals(A.cards[2].getFace())) { //若A是前三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[0].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[0].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[0].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            } else if (A.cards[1].getFace().equals(A.cards[2].getFace()) && A.cards[1].getFace().equals(A.cards[3].getFace())) { //若A是中間三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[1].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[1].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[1].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            } else if (A.cards[2].getFace().equals(A.cards[3].getFace()) && A.cards[2].getFace().equals(A.cards[4].getFace())) { //若A是後三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[2].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[2].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[2].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            }

            //檢查Flush
            int flush_check = 0;
            for (int i = 1; i < 5; i++) {
                if (Card.SUIT_ORDER.compare(A.cards[0], A.cards[i]) != 0) {
                    flush_check = 1;
                    break;
                }
            }
            if (flush_check == 0) {
                for (int i = 1; i < 5; i++) {  //A是flush時判斷B是不是flush
                    if (Card.SUIT_ORDER.compare(B.cards[0], B.cards[i]) != 0) {
                        flush_check = 1;
                        break;
                    }
                }
                if (flush_check == 1) { //B不是flush
                    return 1;
                } else {
                    if (Card.SUIT_ORDER.compare(A.cards[0], B.cards[0]) == 1) {
                        return 1;
                    } else if (Card.SUIT_ORDER.compare(A.cards[0], B.cards[0]) == -1) {
                        return -1;
                    } else //同花色時,比最後一張
                    {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    }
                }
            } else {  //A不是flush時判斷B是不是flush
                flush_check = 0;
                for (int i = 1; i < 5; i++) {
                    if (Card.SUIT_ORDER.compare(B.cards[0], B.cards[i]) != 0) {
                        flush_check = 1;
                        break;
                    }
                }
                if (flush_check == 0) {
                    return -1;
                }
            }

            //檢查Straight
            int A_straightcheck = 0; //A_straightcheck=1 時表示不是Straight
            int first = 0;
            int last = 0;
            Card[] A_maxcard = new Card[1];
            for (int i = 0; i < 5; i++) { //A是否是Straight
                switch (A.cards[i].getFace()) {
                    case ""A"":
                        last = 13;
                        break;
                    case ""2"":
                        last = 1;
                        break;
                    case ""3"":
                        last = 2;
                        break;
                    case ""4"":
                        last = 3;
                        break;
                    case ""5"":
                        last = 4;
                        break;
                    case ""6"":
                        last = 5;
                        break;
                    case ""7"":
                        last = 6;
                        break;
                    case ""8"":
                        last = 7;
                        break;
                    case ""9"":
                        last = 8;
                        break;
                    case ""10"":
                        last = 9;
                        break;
                    case ""J"":
                        last = 10;
                        break;
                    case ""Q"":
                        last = 11;
                        break;
                    case ""K"":
                        last = 12;
                        break;
                }
                if (i > 0) {
                    if (last - first != 1) {
                        if (i == 4 && last == 13 && first == 4) {  //A 2 3 4 5的情況
                            A_maxcard[0] = A.cards[3];
                            break;
                        }
                        A_straightcheck = 1;
                        break;
                    }
                }
                if (i == 4) {
                    A_maxcard[0] = A.cards[4];
                }
                first = last;
            }

            int B_straightcheck = 0;
            first = 0;
            last = 0;
            Card[] B_maxcard = new Card[1];
            for (int i = 0; i < 5; i++) { //B是否是Straight
                switch (B.cards[i].getFace()) {
                    case ""A"":
                        last = 13;
                        break;
                    case ""2"":
                        last = 1;
                        break;
                    case ""3"":
                        last = 2;
                        break;
                    case ""4"":
                        last = 3;
                        break;
                    case ""5"":
                        last = 4;
                        break;
                    case ""6"":
                        last = 5;
                        break;
                    case ""7"":
                        last = 6;
                        break;
                    case ""8"":
                        last = 7;
                        break;
                    case ""9"":
                        last = 8;
                        break;
                    case ""10"":
                        last = 9;
                        break;
                    case ""J"":
                        last = 10;
                        break;
                    case ""Q"":
                        last = 11;
                        break;
                    case ""K"":
                        last = 12;
                        break;
                }
                if (i > 0) {
                    if (last - first != 1) {
                        if (i == 4 && last == 13 && first == 4) {  //A 2 3 4 5的情況
                            B_maxcard[0] = B.cards[3];
                            break;
                        }
                        B_straightcheck = 1;
                        break;
                    }
                }
                if (i == 4) {
                    B_maxcard[0] = B.cards[4];
                }
                first = last;
            }

            if (A_straightcheck == 0 && B_straightcheck == 1) {
                return 1;
            } else if (A_straightcheck == 1 && B_straightcheck == 0) {
                return -1;
            } else if (A_straightcheck == 0 && B_straightcheck == 0) { //如果A與B都是straight
                if (A_maxcard[0].compareTo(B_maxcard[0]) == 1) {
                    return 1;
                } else if (A_maxcard[0].compareTo(B_maxcard[0]) == -1) {
                    return -1;
                }
            }

            //檢查 2 pair
            if (A.cards[0].getFace().equals(A.cards[1].getFace())) { //找出A第一個pair
                if (A.cards[2].getFace().equals(A.cards[3].getFace())) //A 是2 pair 且位置是0 1 2 3
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[3].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[3].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[3].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
                if (A.cards[3].getFace().equals(A.cards[4].getFace())) //A 是2 pair 且位置是0 1 3 4
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[4].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
            }
            if (A.cards[1].getFace().equals(A.cards[2].getFace())) { //找出A第一個pair
                if (A.cards[3].getFace().equals(A.cards[4].getFace())) //A 是2 pair 且位置是 1 2 3 4
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[4].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
            }

            //檢查pair
            int A_paircheck = 0;
            int temp_Aj = 0;

            for (int i = 0; i < 4; i++) {
                for (int j = i + 1; j < 5; j++) {
                    if (A.cards[i].getFace().equals(A.cards[j].getFace())) {
                        temp_Aj = j;
                        A_paircheck = 1;
                        break;
                    }
                }
            }

            int B_paircheck = 0;
            int temp_Bj = 0;
            for (int i = 0; i < 4; i++) {
                for (int j = i + 1; j < 5; j++) {
                    if (B.cards[i].getFace().equals(B.cards[j].getFace())) {
                        temp_Bj = j;
                        B_paircheck = 1;
                        break;
                    }
                }
            }

            if (A_paircheck == 1 && B_paircheck == 0) {
                return 1;
            } else if (A_paircheck == 0 && B_paircheck == 1) {
                return -1;
            } else if (A_paircheck == 1 && B_paircheck == 1) {
                if (A.cards[temp_Aj].compareTo(B.cards[temp_Bj]) == 1) {
                    return 1;
                } else {
                    return -1;
                }
            }

            //檢查High Card
            if (A.cards[4].compareTo(B.cards[4]) == 1) //比最後一張
            {
                return 1;
            } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                return -1;
            }

            return 0;
        }
    }
}

@ed720612e7271de10f44ca63f8874ad7@"
"r04631004","5","0.88","143840","@c53a39589f9fc070d3d6389f1d81d095@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ maxpq = new MinPQ();

           // Player[] playerArray = new Player[count];
            for (int idx = 0; idx < count; idx++) {
                Player player = new Player();
                Player playerArray = player;
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                player.setCards(cardsArray);
                maxpq.insert(playerArray);

                if (maxpq.size() > target) {  //當PQ的size超過target時就把多的丟出來
                    maxpq.delMin();
                }

            }
            Player targetplayer = (Player) maxpq.delMin();
            //System.out.println("" "");
            targetplayer.printCards();

        }
    }

    private static class Player implements Comparable<Player> {

        private Card[] cards = new Card[5];

        public Player() {
        }

        // DO NOT MODIFY THIS
        public void setCards(Card[] cards) {
            this.cards = cards;
        }

        public void printCards() {
            for (int i = 0; i < 5; i++) {
                if (i == 4) {
                    System.out.println(this.cards[4].getSuit() + ""_"" + this.cards[4].getFace());
                } else {
                    System.out.print(this.cards[i].getSuit() + ""_"" + this.cards[i].getFace() + "","");
                }
            }

        }

        // TODO 
        public int compareTo(Player that) {
            // complete this function so the Player can be sorted according to the cards he/she has.
            Player A = this;
            Player B = that;
            Arrays.sort(A.cards);
            Arrays.sort(B.cards);
            //檢查full house
            if (A.cards[0].getFace().equals(A.cards[1].getFace()) && A.cards[0].getFace().equals(A.cards[2].getFace())) { //若A是前三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[0].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[0].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[0].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            } else if (A.cards[1].getFace().equals(A.cards[2].getFace()) && A.cards[1].getFace().equals(A.cards[3].getFace())) { //若A是中間三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[1].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[1].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[1].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            } else if (A.cards[2].getFace().equals(A.cards[3].getFace()) && A.cards[2].getFace().equals(A.cards[4].getFace())) { //若A是後三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[2].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[2].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[2].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            }

            //檢查Flush
            int flush_check = 0;
            for (int i = 1; i < 5; i++) {
                if (Card.SUIT_ORDER.compare(A.cards[0], A.cards[i]) != 0) {
                    flush_check = 1;
                    break;
                }
            }
            if (flush_check == 0) {
                for (int i = 1; i < 5; i++) {  //A是flush時判斷B是不是flush
                    if (Card.SUIT_ORDER.compare(B.cards[0], B.cards[i]) != 0) {
                        flush_check = 1;
                        break;
                    }
                }
                if (flush_check == 1) { //B不是flush
                    return 1;
                } else {
                    if (Card.SUIT_ORDER.compare(A.cards[0], B.cards[0]) == 1) {
                        return 1;
                    } else if (Card.SUIT_ORDER.compare(A.cards[0], B.cards[0]) == -1) {
                        return -1;
                    } else //同花色時,比最後一張
                    {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    }
                }
            } else {  //A不是flush時判斷B是不是flush
                flush_check = 0;
                for (int i = 1; i < 5; i++) {
                    if (Card.SUIT_ORDER.compare(B.cards[0], B.cards[i]) != 0) {
                        flush_check = 1;
                        break;
                    }
                }
                if (flush_check == 0) {
                    return -1;
                }
            }

            //檢查Straight
            int A_straightcheck = 0; //A_straightcheck=1 時表示不是Straight
            int first = 0;
            int last = 0;
            Card[] A_maxcard = new Card[1];
            for (int i = 0; i < 5; i++) { //A是否是Straight
                switch (A.cards[i].getFace()) {
                    case ""A"":
                        last = 13;
                        break;
                    case ""2"":
                        last = 1;
                        break;
                    case ""3"":
                        last = 2;
                        break;
                    case ""4"":
                        last = 3;
                        break;
                    case ""5"":
                        last = 4;
                        break;
                    case ""6"":
                        last = 5;
                        break;
                    case ""7"":
                        last = 6;
                        break;
                    case ""8"":
                        last = 7;
                        break;
                    case ""9"":
                        last = 8;
                        break;
                    case ""10"":
                        last = 9;
                        break;
                    case ""J"":
                        last = 10;
                        break;
                    case ""Q"":
                        last = 11;
                        break;
                    case ""K"":
                        last = 12;
                        break;
                }
                if (i > 0) {
                    if (last - first != 1) {
                        if (i == 4 && last == 13 && first == 4) {  //A 2 3 4 5的情況
                            A_maxcard[0] = A.cards[3];
                            break;
                        }
                        A_straightcheck = 1;
                        break;
                    }
                }
                if (i == 4) {
                    A_maxcard[0] = A.cards[4];
                }
                first = last;
            }

            int B_straightcheck = 0;
            first = 0;
            last = 0;
            Card[] B_maxcard = new Card[1];
            for (int i = 0; i < 5; i++) { //B是否是Straight
                switch (B.cards[i].getFace()) {
                    case ""A"":
                        last = 13;
                        break;
                    case ""2"":
                        last = 1;
                        break;
                    case ""3"":
                        last = 2;
                        break;
                    case ""4"":
                        last = 3;
                        break;
                    case ""5"":
                        last = 4;
                        break;
                    case ""6"":
                        last = 5;
                        break;
                    case ""7"":
                        last = 6;
                        break;
                    case ""8"":
                        last = 7;
                        break;
                    case ""9"":
                        last = 8;
                        break;
                    case ""10"":
                        last = 9;
                        break;
                    case ""J"":
                        last = 10;
                        break;
                    case ""Q"":
                        last = 11;
                        break;
                    case ""K"":
                        last = 12;
                        break;
                }
                if (i > 0) {
                    if (last - first != 1) {
                        if (i == 4 && last == 13 && first == 4) {  //A 2 3 4 5的情況
                            B_maxcard[0] = B.cards[3];
                            break;
                        }
                        B_straightcheck = 1;
                        break;
                    }
                }
                if (i == 4) {
                    B_maxcard[0] = B.cards[4];
                }
                first = last;
            }

            if (A_straightcheck == 0 && B_straightcheck == 1) {
                return 1;
            } else if (A_straightcheck == 1 && B_straightcheck == 0) {
                return -1;
            } else if (A_straightcheck == 0 && B_straightcheck == 0) { //如果A與B都是straight
                if (A_maxcard[0].compareTo(B_maxcard[0]) == 1) {
                    return 1;
                } else if (A_maxcard[0].compareTo(B_maxcard[0]) == -1) {
                    return -1;
                }
            }

            //檢查 2 pair
            if (A.cards[0].getFace().equals(A.cards[1].getFace())) { //找出A第一個pair
                if (A.cards[2].getFace().equals(A.cards[3].getFace())) //A 是2 pair 且位置是0 1 2 3
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[3].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[3].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[3].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
                if (A.cards[3].getFace().equals(A.cards[4].getFace())) //A 是2 pair 且位置是0 1 3 4
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[4].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
            }
            if (A.cards[1].getFace().equals(A.cards[2].getFace())) { //找出A第一個pair
                if (A.cards[3].getFace().equals(A.cards[4].getFace())) //A 是2 pair 且位置是 1 2 3 4
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[4].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
            }

            //檢查pair
            int A_paircheck = 0;
            int temp_Aj = 0;

            for (int i = 0; i < 4; i++) {
                for (int j = i + 1; j < 5; j++) {
                    if (A.cards[i].getFace().equals(A.cards[j].getFace())) {
                        temp_Aj = j;
                        A_paircheck = 1;
                        break;
                    }
                }
            }

            int B_paircheck = 0;
            int temp_Bj = 0;
            for (int i = 0; i < 4; i++) {
                for (int j = i + 1; j < 5; j++) {
                    if (B.cards[i].getFace().equals(B.cards[j].getFace())) {
                        temp_Bj = j;
                        B_paircheck = 1;
                        break;
                    }
                }
            }

            if (A_paircheck == 1 && B_paircheck == 0) {
                return 1;
            } else if (A_paircheck == 0 && B_paircheck == 1) {
                return -1;
            } else if (A_paircheck == 1 && B_paircheck == 1) {
                if (A.cards[temp_Aj].compareTo(B.cards[temp_Bj]) == 1) {
                    return 1;
                } else {
                    return -1;
                }
            }

            //檢查High Card
            if (A.cards[4].compareTo(B.cards[4]) == 1) //比最後一張
            {
                return 1;
            } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                return -1;
            }

            return 0;
        }
    }
}

@c53a39589f9fc070d3d6389f1d81d095@"
"r04631004","5","0.87","148992","@b68e63be50292c73ff7e35051289a12f@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ maxpq = new MinPQ();

           // Player[] playerArray = new Player[count];
            for (int idx = 0; idx < count; idx++) {
                Player player = new Player();
                //Player playerArray = player;
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                player.setCards(cardsArray);
                maxpq.insert(player);

                if (maxpq.size() > target) {  //當PQ的size超過target時就把多的丟出來
                    maxpq.delMin();
                }

            }
            Player targetplayer = (Player) maxpq.delMin();
            //System.out.println("" "");
            targetplayer.printCards();

        }
    }

    private static class Player implements Comparable<Player> {

        private Card[] cards = new Card[5];

        public Player() {
        }

        // DO NOT MODIFY THIS
        public void setCards(Card[] cards) {
            this.cards = cards;
        }

        public void printCards() {
            for (int i = 0; i < 5; i++) {
                if (i == 4) {
                    System.out.println(this.cards[4].getSuit() + ""_"" + this.cards[4].getFace());
                } else {
                    System.out.print(this.cards[i].getSuit() + ""_"" + this.cards[i].getFace() + "","");
                }
            }

        }

        // TODO 
        public int compareTo(Player that) {
            // complete this function so the Player can be sorted according to the cards he/she has.
            Player A = this;
            Player B = that;
            Arrays.sort(A.cards);
            Arrays.sort(B.cards);
            //檢查full house
            if (A.cards[0].getFace().equals(A.cards[1].getFace()) && A.cards[0].getFace().equals(A.cards[2].getFace())) { //若A是前三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[0].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[0].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[0].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            } else if (A.cards[1].getFace().equals(A.cards[2].getFace()) && A.cards[1].getFace().equals(A.cards[3].getFace())) { //若A是中間三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[1].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[1].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[1].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            } else if (A.cards[2].getFace().equals(A.cards[3].getFace()) && A.cards[2].getFace().equals(A.cards[4].getFace())) { //若A是後三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[2].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[2].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[2].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            }

            //檢查Flush
            int flush_check = 0;
            for (int i = 1; i < 5; i++) {
                if (Card.SUIT_ORDER.compare(A.cards[0], A.cards[i]) != 0) {
                    flush_check = 1;
                    break;
                }
            }
            if (flush_check == 0) {
                for (int i = 1; i < 5; i++) {  //A是flush時判斷B是不是flush
                    if (Card.SUIT_ORDER.compare(B.cards[0], B.cards[i]) != 0) {
                        flush_check = 1;
                        break;
                    }
                }
                if (flush_check == 1) { //B不是flush
                    return 1;
                } else {
                    if (Card.SUIT_ORDER.compare(A.cards[0], B.cards[0]) == 1) {
                        return 1;
                    } else if (Card.SUIT_ORDER.compare(A.cards[0], B.cards[0]) == -1) {
                        return -1;
                    } else //同花色時,比最後一張
                    {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    }
                }
            } else {  //A不是flush時判斷B是不是flush
                flush_check = 0;
                for (int i = 1; i < 5; i++) {
                    if (Card.SUIT_ORDER.compare(B.cards[0], B.cards[i]) != 0) {
                        flush_check = 1;
                        break;
                    }
                }
                if (flush_check == 0) {
                    return -1;
                }
            }

            //檢查Straight
            int A_straightcheck = 0; //A_straightcheck=1 時表示不是Straight
            int first = 0;
            int last = 0;
            Card[] A_maxcard = new Card[1];
            for (int i = 0; i < 5; i++) { //A是否是Straight
                switch (A.cards[i].getFace()) {
                    case ""A"":
                        last = 13;
                        break;
                    case ""2"":
                        last = 1;
                        break;
                    case ""3"":
                        last = 2;
                        break;
                    case ""4"":
                        last = 3;
                        break;
                    case ""5"":
                        last = 4;
                        break;
                    case ""6"":
                        last = 5;
                        break;
                    case ""7"":
                        last = 6;
                        break;
                    case ""8"":
                        last = 7;
                        break;
                    case ""9"":
                        last = 8;
                        break;
                    case ""10"":
                        last = 9;
                        break;
                    case ""J"":
                        last = 10;
                        break;
                    case ""Q"":
                        last = 11;
                        break;
                    case ""K"":
                        last = 12;
                        break;
                }
                if (i > 0) {
                    if (last - first != 1) {
                        if (i == 4 && last == 13 && first == 4) {  //A 2 3 4 5的情況
                            A_maxcard[0] = A.cards[3];
                            break;
                        }
                        A_straightcheck = 1;
                        break;
                    }
                }
                if (i == 4) {
                    A_maxcard[0] = A.cards[4];
                }
                first = last;
            }

            int B_straightcheck = 0;
            first = 0;
            last = 0;
            Card[] B_maxcard = new Card[1];
            for (int i = 0; i < 5; i++) { //B是否是Straight
                switch (B.cards[i].getFace()) {
                    case ""A"":
                        last = 13;
                        break;
                    case ""2"":
                        last = 1;
                        break;
                    case ""3"":
                        last = 2;
                        break;
                    case ""4"":
                        last = 3;
                        break;
                    case ""5"":
                        last = 4;
                        break;
                    case ""6"":
                        last = 5;
                        break;
                    case ""7"":
                        last = 6;
                        break;
                    case ""8"":
                        last = 7;
                        break;
                    case ""9"":
                        last = 8;
                        break;
                    case ""10"":
                        last = 9;
                        break;
                    case ""J"":
                        last = 10;
                        break;
                    case ""Q"":
                        last = 11;
                        break;
                    case ""K"":
                        last = 12;
                        break;
                }
                if (i > 0) {
                    if (last - first != 1) {
                        if (i == 4 && last == 13 && first == 4) {  //A 2 3 4 5的情況
                            B_maxcard[0] = B.cards[3];
                            break;
                        }
                        B_straightcheck = 1;
                        break;
                    }
                }
                if (i == 4) {
                    B_maxcard[0] = B.cards[4];
                }
                first = last;
            }

            if (A_straightcheck == 0 && B_straightcheck == 1) {
                return 1;
            } else if (A_straightcheck == 1 && B_straightcheck == 0) {
                return -1;
            } else if (A_straightcheck == 0 && B_straightcheck == 0) { //如果A與B都是straight
                if (A_maxcard[0].compareTo(B_maxcard[0]) == 1) {
                    return 1;
                } else if (A_maxcard[0].compareTo(B_maxcard[0]) == -1) {
                    return -1;
                }
            }

            //檢查 2 pair
            if (A.cards[0].getFace().equals(A.cards[1].getFace())) { //找出A第一個pair
                if (A.cards[2].getFace().equals(A.cards[3].getFace())) //A 是2 pair 且位置是0 1 2 3
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[3].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[3].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[3].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
                if (A.cards[3].getFace().equals(A.cards[4].getFace())) //A 是2 pair 且位置是0 1 3 4
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[4].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
            }
            if (A.cards[1].getFace().equals(A.cards[2].getFace())) { //找出A第一個pair
                if (A.cards[3].getFace().equals(A.cards[4].getFace())) //A 是2 pair 且位置是 1 2 3 4
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[4].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
            }

            //檢查pair
            int A_paircheck = 0;
            int temp_Aj = 0;

            for (int i = 0; i < 4; i++) {
                for (int j = i + 1; j < 5; j++) {
                    if (A.cards[i].getFace().equals(A.cards[j].getFace())) {
                        temp_Aj = j;
                        A_paircheck = 1;
                        break;
                    }
                }
            }

            int B_paircheck = 0;
            int temp_Bj = 0;
            for (int i = 0; i < 4; i++) {
                for (int j = i + 1; j < 5; j++) {
                    if (B.cards[i].getFace().equals(B.cards[j].getFace())) {
                        temp_Bj = j;
                        B_paircheck = 1;
                        break;
                    }
                }
            }

            if (A_paircheck == 1 && B_paircheck == 0) {
                return 1;
            } else if (A_paircheck == 0 && B_paircheck == 1) {
                return -1;
            } else if (A_paircheck == 1 && B_paircheck == 1) {
                if (A.cards[temp_Aj].compareTo(B.cards[temp_Bj]) == 1) {
                    return 1;
                } else {
                    return -1;
                }
            }

            //檢查High Card
            if (A.cards[4].compareTo(B.cards[4]) == 1) //比最後一張
            {
                return 1;
            } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                return -1;
            }

            return 0;
        }
    }
}

@b68e63be50292c73ff7e35051289a12f@"
"r04631004","5","0.89","149600","@93c5e5ccc4f3ef559045ef642f5cfab0@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ maxpq = new MinPQ(target);

           // Player[] playerArray = new Player[count];
            for (int idx = 0; idx < count; idx++) {
                Player player = new Player();
                //Player playerArray = player;
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                player.setCards(cardsArray);
                maxpq.insert(player);

                if (maxpq.size() > target) {  //當PQ的size超過target時就把多的丟出來
                    maxpq.delMin();
                }

            }
            Player targetplayer = (Player) maxpq.delMin();
            //System.out.println("" "");
            targetplayer.printCards();

        }
    }

    private static class Player implements Comparable<Player> {

        private Card[] cards = new Card[5];

        public Player() {
        }

        // DO NOT MODIFY THIS
        public void setCards(Card[] cards) {
            this.cards = cards;
        }

        public void printCards() {
            for (int i = 0; i < 5; i++) {
                if (i == 4) {
                    System.out.println(this.cards[4].getSuit() + ""_"" + this.cards[4].getFace());
                } else {
                    System.out.print(this.cards[i].getSuit() + ""_"" + this.cards[i].getFace() + "","");
                }
            }

        }

        // TODO 
        public int compareTo(Player that) {
            // complete this function so the Player can be sorted according to the cards he/she has.
            Player A = this;
            Player B = that;
            Arrays.sort(A.cards);
            Arrays.sort(B.cards);
            //檢查full house
            if (A.cards[0].getFace().equals(A.cards[1].getFace()) && A.cards[0].getFace().equals(A.cards[2].getFace())) { //若A是前三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[0].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[0].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[0].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            } else if (A.cards[1].getFace().equals(A.cards[2].getFace()) && A.cards[1].getFace().equals(A.cards[3].getFace())) { //若A是中間三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[1].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[1].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[1].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            } else if (A.cards[2].getFace().equals(A.cards[3].getFace()) && A.cards[2].getFace().equals(A.cards[4].getFace())) { //若A是後三張相同
                if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[0].getFace().equals(B.cards[2].getFace())) { //判斷B是否也有full house
                    if (A.cards[2].compareTo(B.cards[0]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[1].getFace().equals(B.cards[3].getFace())) {
                    if (A.cards[2].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else if (B.cards[2].getFace().equals(B.cards[3].getFace()) && B.cards[2].getFace().equals(B.cards[4].getFace())) {
                    if (A.cards[2].compareTo(B.cards[2]) == 1) {
                        return 1;
                    } else {
                        return -1;
                    }
                } else {  //表示B不是full house
                    return 1;
                }
            }

            //檢查Flush
            int flush_check = 0;
            for (int i = 1; i < 5; i++) {
                if (Card.SUIT_ORDER.compare(A.cards[0], A.cards[i]) != 0) {
                    flush_check = 1;
                    break;
                }
            }
            if (flush_check == 0) {
                for (int i = 1; i < 5; i++) {  //A是flush時判斷B是不是flush
                    if (Card.SUIT_ORDER.compare(B.cards[0], B.cards[i]) != 0) {
                        flush_check = 1;
                        break;
                    }
                }
                if (flush_check == 1) { //B不是flush
                    return 1;
                } else {
                    if (Card.SUIT_ORDER.compare(A.cards[0], B.cards[0]) == 1) {
                        return 1;
                    } else if (Card.SUIT_ORDER.compare(A.cards[0], B.cards[0]) == -1) {
                        return -1;
                    } else //同花色時,比最後一張
                    {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    }
                }
            } else {  //A不是flush時判斷B是不是flush
                flush_check = 0;
                for (int i = 1; i < 5; i++) {
                    if (Card.SUIT_ORDER.compare(B.cards[0], B.cards[i]) != 0) {
                        flush_check = 1;
                        break;
                    }
                }
                if (flush_check == 0) {
                    return -1;
                }
            }

            //檢查Straight
            int A_straightcheck = 0; //A_straightcheck=1 時表示不是Straight
            int first = 0;
            int last = 0;
            Card[] A_maxcard = new Card[1];
            for (int i = 0; i < 5; i++) { //A是否是Straight
                switch (A.cards[i].getFace()) {
                    case ""A"":
                        last = 13;
                        break;
                    case ""2"":
                        last = 1;
                        break;
                    case ""3"":
                        last = 2;
                        break;
                    case ""4"":
                        last = 3;
                        break;
                    case ""5"":
                        last = 4;
                        break;
                    case ""6"":
                        last = 5;
                        break;
                    case ""7"":
                        last = 6;
                        break;
                    case ""8"":
                        last = 7;
                        break;
                    case ""9"":
                        last = 8;
                        break;
                    case ""10"":
                        last = 9;
                        break;
                    case ""J"":
                        last = 10;
                        break;
                    case ""Q"":
                        last = 11;
                        break;
                    case ""K"":
                        last = 12;
                        break;
                }
                if (i > 0) {
                    if (last - first != 1) {
                        if (i == 4 && last == 13 && first == 4) {  //A 2 3 4 5的情況
                            A_maxcard[0] = A.cards[3];
                            break;
                        }
                        A_straightcheck = 1;
                        break;
                    }
                }
                if (i == 4) {
                    A_maxcard[0] = A.cards[4];
                }
                first = last;
            }

            int B_straightcheck = 0;
            first = 0;
            last = 0;
            Card[] B_maxcard = new Card[1];
            for (int i = 0; i < 5; i++) { //B是否是Straight
                switch (B.cards[i].getFace()) {
                    case ""A"":
                        last = 13;
                        break;
                    case ""2"":
                        last = 1;
                        break;
                    case ""3"":
                        last = 2;
                        break;
                    case ""4"":
                        last = 3;
                        break;
                    case ""5"":
                        last = 4;
                        break;
                    case ""6"":
                        last = 5;
                        break;
                    case ""7"":
                        last = 6;
                        break;
                    case ""8"":
                        last = 7;
                        break;
                    case ""9"":
                        last = 8;
                        break;
                    case ""10"":
                        last = 9;
                        break;
                    case ""J"":
                        last = 10;
                        break;
                    case ""Q"":
                        last = 11;
                        break;
                    case ""K"":
                        last = 12;
                        break;
                }
                if (i > 0) {
                    if (last - first != 1) {
                        if (i == 4 && last == 13 && first == 4) {  //A 2 3 4 5的情況
                            B_maxcard[0] = B.cards[3];
                            break;
                        }
                        B_straightcheck = 1;
                        break;
                    }
                }
                if (i == 4) {
                    B_maxcard[0] = B.cards[4];
                }
                first = last;
            }

            if (A_straightcheck == 0 && B_straightcheck == 1) {
                return 1;
            } else if (A_straightcheck == 1 && B_straightcheck == 0) {
                return -1;
            } else if (A_straightcheck == 0 && B_straightcheck == 0) { //如果A與B都是straight
                if (A_maxcard[0].compareTo(B_maxcard[0]) == 1) {
                    return 1;
                } else if (A_maxcard[0].compareTo(B_maxcard[0]) == -1) {
                    return -1;
                }
            }

            //檢查 2 pair
            if (A.cards[0].getFace().equals(A.cards[1].getFace())) { //找出A第一個pair
                if (A.cards[2].getFace().equals(A.cards[3].getFace())) //A 是2 pair 且位置是0 1 2 3
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[3].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[3].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[3].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
                if (A.cards[3].getFace().equals(A.cards[4].getFace())) //A 是2 pair 且位置是0 1 3 4
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[4].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
            }
            if (A.cards[1].getFace().equals(A.cards[2].getFace())) { //找出A第一個pair
                if (A.cards[3].getFace().equals(A.cards[4].getFace())) //A 是2 pair 且位置是 1 2 3 4
                {
                    if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[2].getFace().equals(B.cards[3].getFace())) //判斷B是否為2 pair
                    {
                        if (A.cards[4].compareTo(B.cards[3]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[3]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[0].getFace().equals(B.cards[1].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else if (B.cards[1].getFace().equals(B.cards[2].getFace()) && B.cards[3].getFace().equals(B.cards[4].getFace())) {
                        if (A.cards[4].compareTo(B.cards[4]) == 1) {
                            return 1;
                        } else if (A.cards[3].compareTo(B.cards[4]) == -1) {
                            return -1;
                        }
                    } else {  //表示B不是2 pair
                        return 1;
                    }
                }
            }

            //檢查pair
            int A_paircheck = 0;
            int temp_Aj = 0;

            for (int i = 0; i < 4; i++) {
                for (int j = i + 1; j < 5; j++) {
                    if (A.cards[i].getFace().equals(A.cards[j].getFace())) {
                        temp_Aj = j;
                        A_paircheck = 1;
                        break;
                    }
                }
            }

            int B_paircheck = 0;
            int temp_Bj = 0;
            for (int i = 0; i < 4; i++) {
                for (int j = i + 1; j < 5; j++) {
                    if (B.cards[i].getFace().equals(B.cards[j].getFace())) {
                        temp_Bj = j;
                        B_paircheck = 1;
                        break;
                    }
                }
            }

            if (A_paircheck == 1 && B_paircheck == 0) {
                return 1;
            } else if (A_paircheck == 0 && B_paircheck == 1) {
                return -1;
            } else if (A_paircheck == 1 && B_paircheck == 1) {
                if (A.cards[temp_Aj].compareTo(B.cards[temp_Bj]) == 1) {
                    return 1;
                } else {
                    return -1;
                }
            }

            //檢查High Card
            if (A.cards[4].compareTo(B.cards[4]) == 1) //比最後一張
            {
                return 1;
            } else if (A.cards[4].compareTo(B.cards[4]) == -1) {
                return -1;
            }

            return 0;
        }
    }
}

@93c5e5ccc4f3ef559045ef642f5cfab0@"
"r04631004","7","0.141428571428571","113520","@2b608934c88e11e3646b515763c9e1ea@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ maxpq = new MinPQ(target);

            // Player[] playerArray = new Player[count];
            for (int idx = 0; idx < count; idx++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand player = new Hand(cardsArray);
                maxpq.insert(player);

                if (maxpq.size() > target) {  //當PQ的size超過target時就把多的丟出來
                    maxpq.delMin();
                }

            }
            Hand targetplayer = (Hand) maxpq.delMin();
            Card[] targethand = targetplayer.getCards();
            for (int i = 0; i < 5; i++) {
                if (i == 4) {
                    System.out.println(targethand[4].getSuit() + ""_"" + targethand[4].getFace());
                } else {
                    System.out.print(targethand[i].getSuit() + ""_"" + targethand[i].getFace() + "","");
                }
            }

        }
    }

}
@2b608934c88e11e3646b515763c9e1ea@"
"r03723070","4","0.39","106208","@785666a83254e00d6f07f277c2c5fb86@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            //Hand[] playerArray = new Hand[count];
           MaxPQ<Hand> pq = new MaxPQ<Hand>(count);
           String in = br.readLine();
           while(in != null) {
                //String name = in;
                //Player player = new Player(name);
                //playerArray[idx++] = player;
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand player = new Hand(cardsArray);
                pq.insert(player);
                //else if (!pq.isEmpty()) StdOut.print(pq.delMax() + "" "");
                in = br.readLine();
            }
            

            //StdOut.println(""("" + pq.size() + "" left on pq)"");
            //StdOut.println(""("" + pq.delMax() + "" left on pq)"");
            
            Hand ans = null;
            while (target>0) {
                ans = pq.delMax();
                target-=1;
            }
            Card[] anscard = ans.getCards();
            Arrays.sort(anscard);
            for(int i = 0; i<5;i++){
                StdOut.print(anscard[i].getSuit()+""_""+anscard[i].getFace());
                if(i<4)StdOut.print("","");
            }
        }
    }
}

@785666a83254e00d6f07f277c2c5fb86@"
"r04525016","6","0.97","122176","@cb031df4d7c4c7bd4dae5c10a0293f3a@import java.io.BufferedReader;
import java.io.FileReader;
import java.lang.reflect.Array;
import java.util.Arrays;

public class HandPQ {

    private Hand[] pq;
    private int size;

    public HandPQ() {
        size = 0;
        pq = new Hand[20];
    }

    private void resize(){
        if (size == pq.length - 3) {
            Hand[] pq2 = new Hand[2 * pq.length];
            for (int i = 0; i < size; i++) {
                pq2[i] = pq[i];
            }
            pq = pq2;
        }else if (size < pq.length / 4) {
            Hand[] pq2 = new Hand[pq.length / 2];
            for (int i = 0; i < size; i++) {
                pq2[i] = pq[i];
            }
            pq = pq2;
        }
    }

    public void insert(Hand hand) {
        resize();
        pq[size] = hand;
        size++;
    }

    public Hand delMin() {
        resize();
        int temp = 0;
        for (int i = 1; i < size; i++) {
            if (pq[i].compareTo(pq[temp]) == -1) {
                temp = i;
            }

        }
        pq[size] = pq[temp];
        pq[temp] = pq[size - 1];
        return pq[size--];

    }

    public boolean isEmpty() {
        return (size == 0);
    }

    public int size() {
        return size;
    }


    public static void main(String[] args) throws Exception {
        HandPQ pq = new HandPQ();

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            for (int i = 0; i < count; i++) {
                String[] temp = br.readLine().split("","");
                Card[] cardsArray = new Card[5];
                for (int j = 0; j < 5; j++) {
                    String[] temp2 = temp[j].split(""_"");
                    Card c = new Card(temp2[1], temp2[0]);
                    cardsArray[j] = c;
                }
                Hand hand = new Hand(cardsArray);
                pq.insert(hand);
                if (pq.size() > target) {
                    pq.delMin();
                }
            }
            br.close();
        }
        Hand delHand = pq.delMin();
        Card[] delCard = delHand.getCards();
        Arrays.sort(delCard);

        String mix = """";
        String temp;
        for (int i = 0; i < 5; i++) {
            String face = delCard[i].getFace();
            String suit = delCard[i].getSuit();
            if (i == 0) {
                temp = suit + ""_"" + face;
            } else {
                temp = "","" + suit + ""_"" + face;
            }
            mix = mix + temp;
        }
        System.out.println(mix);
    }
}


@cb031df4d7c4c7bd4dae5c10a0293f3a@"
"r03723070","7","0.14","120720","@15250fbafc06e37f13ff0fe212c3003a@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            //Hand[] playerArray = new Hand[count];
           MinPQ<Hand> pq = new MinPQ<Hand>(count);
           String in = br.readLine();
           while(in != null) {
                //String name = in;
                //Player player = new Player(name);
                //playerArray[idx++] = player;
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand player = new Hand(cardsArray);
                pq.insert(player);
                //else if (!pq.isEmpty()) StdOut.print(pq.delMax() + "" "");
                if (pq.size() > target) pq.delMin();
          // top M entries are on the PQ
                in = br.readLine();
            }
            

            //StdOut.println(""("" + pq.size() + "" left on pq)"");
            //StdOut.println(""("" + pq.delMax() + "" left on pq)"");
            
            Hand ans = null;
            /*while (target>0) {
                ans = pq.delMin();
                target-=1;
            }*/
            ans = pq.delMin();
            Card[] anscard = ans.getCards();
            Arrays.sort(anscard);
            for(int i = 0; i<5;i++){
                StdOut.print(anscard[i].getSuit()+""_""+anscard[i].getFace());
                if(i<4)StdOut.print("","");
            }
        }
    }
}

@15250fbafc06e37f13ff0fe212c3003a@"
"b03611015","4","0.4","106320","@784f40887258dd43654f52cd5899a513@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            Hand[] playerArray = new Hand[count];
           MinPQ<Hand> pq = new MinPQ<Hand>();
            for (int x = 0; x < count; x++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                playerArray[x] = new Hand(cardsArray);
                pq.insert(playerArray[x]);
                if (pq.size() > target)
                    pq.delMin();
            }
                Hand hand1;
               hand1 = pq.delMin();
               
                    Card[] A =hand1.getCards();
                    for(int i=0;i<4;i++)
                    System.out.printf(A[i].getSuit()+""_""+A[i].getFace()+"","");
                    
                    System.out.printf(A[4].getSuit()+""_""+A[4].getFace());
                }

            }
        }
    

@784f40887258dd43654f52cd5899a513@"
"b03611015","0","0.42","106352","@27b51a5ba6e9bf1ef5baed6927780cbe@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            Hand[] playerArray = new Hand[count];
            MinPQ<Hand> pq = new MinPQ<Hand>();
            for (int x = 0; x < count; x++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                playerArray[x] = new Hand(cardsArray);
                pq.insert(playerArray[x]);
                if (pq.size() > target) {
                    pq.delMin();
                }
            }
           
            Card[] A = pq.delMin().getCards();
            for (int i = 0; i < 4; i++) {
                if(i!=4)
                System.out.printf(A[i].getSuit() + ""_"" + A[i].getFace() + "","");
            }

        }

    }
}

@27b51a5ba6e9bf1ef5baed6927780cbe@"
"b03611015","4","0.43","103952","@587c7df25761682817a12052e3484999@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            Hand[] playerArray = new Hand[count];
           MinPQ<Hand> pq = new MinPQ<Hand>();
            for (int x = 0; x < count; x++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                playerArray[x] = new Hand(cardsArray);
                pq.insert(playerArray[x]);
                if (pq.size() > target)
                    pq.delMin();
            }
               Hand hand1;
               hand1 = pq.delMin();
               
                    Card[] A =hand1.getCards();
                    for(int i=0;i<5;i++)
                        if(i!=4)
                    System.out.printf(A[i].getSuit()+""_""+A[i].getFace()+"","");
                        else
                    System.out.printf(A[i].getSuit()+""_""+A[i].getFace());     
                    
                }
            }
}
@587c7df25761682817a12052e3484999@"
"b03611015","7","0.141428571428571","119200","@b0d8898d909de4addfcd41c9437da45e@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

           
           MinPQ<Hand> pq = new MinPQ<Hand>();
            for (int x = 0; x < count; x++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand playerArray = new Hand(cardsArray);
                pq.insert(playerArray);
                if (pq.size() > target)
                    pq.delMin();
            }
               Hand hand1;
               hand1 = pq.delMin();
               
                    Card[] A =hand1.getCards();
                    for(int i=0;i<5;i++)
                        if(i!=4)
                    System.out.printf(A[i].getSuit()+""_""+A[i].getFace()+"","");
                        else
                    System.out.printf(A[i].getSuit()+""_""+A[i].getFace());     
                    
                }
            }
}
@b0d8898d909de4addfcd41c9437da45e@"
"r04945008","7","0.141428571428571","116336","@1e623e2d120355cf1efe69d8e1b76fda@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            String in;
            MinPQ<Hand> pq = new MinPQ<Hand>();
            while((in = br.readLine()) != null){
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                pq.insert(hand);
                if (pq.size() > target)
                    pq.delMin();
            }
            Card[] out = pq.delMin().getCards();
            for(int i=0; i<5; i++){
                System.out.print(out[i].getSuit() + ""_"" + out[i].getFace());
                if(i<4)System.out.print("","");
                else   System.out.print(""\n"");
            }
        }
    }
}

@1e623e2d120355cf1efe69d8e1b76fda@"
"b03611011","0","0.141428571428571","116336","@b106e220e4de7a4ab4efdc6a9cdeeb8a@import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;
import java.util.MinPQ;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(""input.txt""))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            MinPQ<Hand> pq = new MinPQ<>();
            for (String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for (int i = 0; i < 5; i++) {String[] sep = cardStr[i].split(""_"");Card card = new Card(sep[1], sep[0]);cardsArray[i] = card;
                }
                Hand item = new Hand(cardsArray);
                pq.insert(item);
                if (pq.size() > target) {
                    pq.delMin();
                }
            }

//            for (String in = br.readLine(); in != null; in = br.readLine()) {
//                Card[] cardsArray = new Card[5];
//                String[] cardStr = in.split("","");
//                for (int i = 0; i < 5; i++) {
//                    String[] sep = cardStr[i].split(""_"");
//                    Card card = new Card(sep[1], sep[0]);
//                    cardsArray[i] = card;
//                }
//                Hand hand = new Hand(cardsArray);
//                playerArray[idx++] = hand;
//            }
//
//            for (int i = 0; i < count; i++) {
//                for (int j = i + 1; j < count; j++) {
//                    if (playerArray[i].compareTo(playerArray[j]) == -1) {
//                        playerArray[count] = playerArray[i];
//                        playerArray[i] = playerArray[j];
//                        playerArray[j] = playerArray[count];
//                    }
//                }
//            }
            Arrays.sort(pq.min().getCards());
            System.out.println(pq.min().getCards()[0].getSuit() + ""_"" + pq.min().getCards()[0].getFace() + "",""
                    + pq.min().getCards()[1].getSuit() + ""_"" + pq.min().getCards()[1].getFace() + "","" + pq.min().getCards()[2].getSuit()
                    + ""_"" + pq.min().getCards()[2].getFace()
                    + "","" + pq.min().getCards()[3].getSuit() + ""_"" + pq.min().getCards()[3].getFace() + "","" + pq.min().getCards()[4].getSuit()
                    + ""_"" + pq.min().getCards()[4].getFace());
        }
    }
}

@b106e220e4de7a4ab4efdc6a9cdeeb8a@"
"b03611011","0","0","0","@c64090b34f88ead0e4890fcd6fd25676@import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(""input.txt""))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            MinPQ<Hand> pq = new MinPQ<>();
            for (String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for (int i = 0; i < 5; i++) {String[] sep = cardStr[i].split(""_"");Card card = new Card(sep[1], sep[0]);cardsArray[i] = card;
                }
                Hand item = new Hand(cardsArray);
                pq.insert(item);
                if (pq.size() > target) {
                    pq.delMin();
                }
            }

//            for (String in = br.readLine(); in != null; in = br.readLine()) {
//                Card[] cardsArray = new Card[5];
//                String[] cardStr = in.split("","");
//                for (int i = 0; i < 5; i++) {
//                    String[] sep = cardStr[i].split(""_"");
//                    Card card = new Card(sep[1], sep[0]);
//                    cardsArray[i] = card;
//                }
//                Hand hand = new Hand(cardsArray);
//                playerArray[idx++] = hand;
//            }
//
//            for (int i = 0; i < count; i++) {
//                for (int j = i + 1; j < count; j++) {
//                    if (playerArray[i].compareTo(playerArray[j]) == -1) {
//                        playerArray[count] = playerArray[i];
//                        playerArray[i] = playerArray[j];
//                        playerArray[j] = playerArray[count];
//                    }
//                }
//            }
            Arrays.sort(pq.min().getCards());
            System.out.println(pq.min().getCards()[0].getSuit() + ""_"" + pq.min().getCards()[0].getFace() + "",""
                    + pq.min().getCards()[1].getSuit() + ""_"" + pq.min().getCards()[1].getFace() + "","" + pq.min().getCards()[2].getSuit()
                    + ""_"" + pq.min().getCards()[2].getFace()
                    + "","" + pq.min().getCards()[3].getSuit() + ""_"" + pq.min().getCards()[3].getFace() + "","" + pq.min().getCards()[4].getSuit()
                    + ""_"" + pq.min().getCards()[4].getFace());
        }
    }
}

@c64090b34f88ead0e4890fcd6fd25676@"
"b03611011","7","0.142857142857143","122848","@7b8aee931bf0a8e8f4d1c845bb7310d5@
import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            MinPQ<Hand> pq = new MinPQ<>();
            for (String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for (int i = 0; i < 5; i++) {String[] sep = cardStr[i].split(""_"");Card card = new Card(sep[1], sep[0]);cardsArray[i] = card;
                }
                Hand item = new Hand(cardsArray);
                pq.insert(item);
                if (pq.size() > target) {
                    pq.delMin();
                }
            }

//            for (String in = br.readLine(); in != null; in = br.readLine()) {
//                Card[] cardsArray = new Card[5];
//                String[] cardStr = in.split("","");
//                for (int i = 0; i < 5; i++) {
//                    String[] sep = cardStr[i].split(""_"");
//                    Card card = new Card(sep[1], sep[0]);
//                    cardsArray[i] = card;
//                }
//                Hand hand = new Hand(cardsArray);
//                playerArray[idx++] = hand;
//            }
//
//            for (int i = 0; i < count; i++) {
//                for (int j = i + 1; j < count; j++) {
//                    if (playerArray[i].compareTo(playerArray[j]) == -1) {
//                        playerArray[count] = playerArray[i];
//                        playerArray[i] = playerArray[j];
//                        playerArray[j] = playerArray[count];
//                    }
//                }
//            }
            Arrays.sort(pq.min().getCards());
            System.out.println(pq.min().getCards()[0].getSuit() + ""_"" + pq.min().getCards()[0].getFace() + "",""
                    + pq.min().getCards()[1].getSuit() + ""_"" + pq.min().getCards()[1].getFace() + "","" + pq.min().getCards()[2].getSuit()
                    + ""_"" + pq.min().getCards()[2].getFace()
                    + "","" + pq.min().getCards()[3].getSuit() + ""_"" + pq.min().getCards()[3].getFace() + "","" + pq.min().getCards()[4].getSuit()
                    + ""_"" + pq.min().getCards()[4].getFace());
        }
    }
}

@7b8aee931bf0a8e8f4d1c845bb7310d5@"
"b03704074","4","0.38","105376","@121ac2bea4b35898a35d5402b063f71a@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ  implements Comparable<HandPQ>{
    private Hand[] pq;
    //private Card[] cards = new Card[5];
    private int N ;
    public HandPQ(int capacity)
    {   N = 0;
        pq = new Hand[capacity+1];
    }
    public boolean isEmpty(){ return N == 0; }
    private void swim(int k){
        while (k > 1 && less(k/2, k)){
            exch(k, k/2);
            k  = k/2;}}
    public void insert(Hand x){
        pq[++N] = x;
        swim(N);}
    private void sink(int k){
        while (2*k <= N){
            int j = 2*k;
            if (j < N && less(j, j+1)) j++;
            if (!less(k, j)) break;
            exch(k, j);
            k = j;}}
    public Hand delMax(){
        Hand max = pq[1];
        exch(1, N--);
        sink(1);
        pq[N+1] = null;
        return max;}
    private boolean less(int i, int j)
    { return pq[i].compareTo(pq[j]) < 0; }
    private void exch(int i, int j)
    { Hand t = pq[i]; pq[i] = pq[j]; pq[j] = t; }
    

    public static void main(String[] args) throws Exception {
        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            HandPQ handArray = new HandPQ(count);
            for(int i = 0;i < count ;i++){
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0;j < 5;j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1],sep[0]);
                    cardsArray[j] = card;}
                Hand singlehand = new Hand(cardsArray);
                handArray.insert(singlehand);}
            for(int i = 0;i<target-1;i++){
                handArray.delMax();}
            Hand ans = handArray.delMax();
            Card[] ans1 = ans.getCards();    
            
            System.out.println(ans1[0].getSuit()+""_""+ans1[0].getFace()+"",""+ans1[1].getSuit()+""_""+ans1[1].getFace()+"",""
            +ans1[2].getSuit()+""_""+ans1[2].getFace()+"","" +ans1[3].getSuit()+""_""+ans1[3].getFace()+"","" +ans1[4].getSuit()+""_""+ans1[4].getFace());
            

        }
    }

    @Override
    public int compareTo(HandPQ t) {
        throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates.
    }
}


@121ac2bea4b35898a35d5402b063f71a@"
"r04631041","4","0.38","103728","@de26c329f3f8e624663e84c622d2f6d6@import java.io.BufferedReader;
import java.io.FileReader;	
public class HandPQ {
      public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] game=new Hand[count];
            for (int i=0 ; i<count ; i++){
                String[] player=br.readLine().split("","");
                Card[] cards=new Card[5];
                for (int j=0 ; j<5 ; j++){
                    String[] temp=player[j].split(""_"");
                    cards[j]= new Card(temp[1],temp[0]);
                }
                game[i]=new Hand(cards);
            }
            MaxPQ<Hand> thisgame=new MaxPQ<Hand>(game);
            while ((count-thisgame.size())<target-1)
              thisgame.delMax();
            Card[] ans=new Card[5];
            ans=thisgame.delMax().getCards();
            for (int i=0 ; i<4 ; i++)
            System.out.print(ans[i].getSuit()+""_""+ans[i].getFace()+"","");
            System.out.print(ans[4].getSuit()+""_""+ans[4].getFace());
        }
    }
}

@de26c329f3f8e624663e84c622d2f6d6@"
"b01b01039","7","0.14","114864","@253c20ab162c182e9d2e9fa0bfb4cb07@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {
		try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            int idx = 0;
			MinPQ<Hand> pq = new MinPQ();
			
			String[] s = br.readLine().split("","");
			int handCount = Integer.parseInt(s[0]);
			int handNum   = Integer.parseInt(s[1]);
            
            for(String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
				pq.insert(new Hand(cardsArray));
				if(pq.size() > handNum){
					pq.delMin();
				}
			}
			Hand hd = pq.min();
			Card[] cd = hd.getCards();
			for(int i=0; i<5; i++){
				System.out.print(cd[i].getSuit()+""_""+cd[i].getFace());
				if(i<4)System.out.print("","");
				else System.out.println();
			}
        }
    }
}

@253c20ab162c182e9d2e9fa0bfb4cb07@"
"r04631041","4","0.4","105664","@d7e909fd1a261fc4a4d82207ef77f978@import java.io.BufferedReader;
import java.io.FileReader;	
public class HandPQ {
      public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] game=new Hand[count];
            for (int i=0 ; i<count ; i++){
                String[] player=br.readLine().split("","");
                Card[] cards=new Card[5];
                for (int j=0 ; j<5 ; j++){
                    String[] temp=player[j].split(""_"");
                    cards[j]= new Card(temp[1],temp[0]);
                }
                game[i]=new Hand(cards);
            }
            MinPQ<Hand> thisgame=new MinPQ<Hand>(game);
            while (thisgame.size()>target)
              thisgame.delMin();
            Card[] ans=new Card[5];
            ans=thisgame.delMin().getCards();
            for (int i=0 ; i<4 ; i++)
            System.out.print(ans[i].getSuit()+""_""+ans[i].getFace()+"","");
            System.out.print(ans[4].getSuit()+""_""+ans[4].getFace());
        }
    }
}
@d7e909fd1a261fc4a4d82207ef77f978@"
"r04631041","7","0.145714285714286","114832","@bdc640dfe132f6b185bc454c1317df72@import java.io.BufferedReader;
import java.io.FileReader;	
public class HandPQ {
      public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Card[] ans=new Card[5];
            MinPQ<Hand> thisgame=new MinPQ<Hand>();
            for (int i=0 ; i<count ; i++){
                String[] player=br.readLine().split("","");
                Card[] cards=new Card[5];
                for (int j=0 ; j<5 ; j++){
                    String[] temp=player[j].split(""_"");
                    cards[j]= new Card(temp[1],temp[0]);
                }
                Hand game=new Hand(cards);
                thisgame.insert(game);
                if (thisgame.size()>target)
                    thisgame.delMin();
            }
                    ans=thisgame.delMin().getCards();
            for (int i=0 ; i<4 ; i++)
                System.out.print(ans[i].getSuit()+""_""+ans[i].getFace()+"","");
                System.out.print(ans[4].getSuit()+""_""+ans[4].getFace());
         }
    }
}
@bdc640dfe132f6b185bc454c1317df72@"
"r03525006","4","0.38","104928","@4a972aba680a5d3b306bea04fad2bc00@import java.util.Arrays;
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] playerArray = new Hand[count];
            int idx = 0;
            for(String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand player = new Hand(cardsArray);
                playerArray[idx++] = player;
            }
            Arrays.sort(playerArray);
            Hand targetPlayer = playerArray[count-target];
            Card[] targetCard = targetPlayer.getCards();
            Arrays.sort(targetCard);
            String ans = """";
            for (int i = 0; i < 4; i++) {
                ans += targetCard[i].getSuit() + ""_"" + targetCard[i].getFace() + "","";
            }
            ans += targetCard[4].getSuit() + ""_"" + targetCard[4].getFace();
            System.out.println(ans);

        }
    }
}
@4a972aba680a5d3b306bea04fad2bc00@"
"r04525016","6","0.98","122992","@cb031df4d7c4c7bd4dae5c10a0293f3a@import java.io.BufferedReader;
import java.io.FileReader;
import java.lang.reflect.Array;
import java.util.Arrays;

public class HandPQ {

    private Hand[] pq;
    private int size;

    public HandPQ() {
        size = 0;
        pq = new Hand[20];
    }

    private void resize(){
        if (size == pq.length - 3) {
            Hand[] pq2 = new Hand[2 * pq.length];
            for (int i = 0; i < size; i++) {
                pq2[i] = pq[i];
            }
            pq = pq2;
        }else if (size < pq.length / 4) {
            Hand[] pq2 = new Hand[pq.length / 2];
            for (int i = 0; i < size; i++) {
                pq2[i] = pq[i];
            }
            pq = pq2;
        }
    }

    public void insert(Hand hand) {
        resize();
        pq[size] = hand;
        size++;
    }

    public Hand delMin() {
        resize();
        int temp = 0;
        for (int i = 1; i < size; i++) {
            if (pq[i].compareTo(pq[temp]) == -1) {
                temp = i;
            }

        }
        pq[size] = pq[temp];
        pq[temp] = pq[size - 1];
        return pq[size--];

    }

    public boolean isEmpty() {
        return (size == 0);
    }

    public int size() {
        return size;
    }


    public static void main(String[] args) throws Exception {
        HandPQ pq = new HandPQ();

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            for (int i = 0; i < count; i++) {
                String[] temp = br.readLine().split("","");
                Card[] cardsArray = new Card[5];
                for (int j = 0; j < 5; j++) {
                    String[] temp2 = temp[j].split(""_"");
                    Card c = new Card(temp2[1], temp2[0]);
                    cardsArray[j] = c;
                }
                Hand hand = new Hand(cardsArray);
                pq.insert(hand);
                if (pq.size() > target) {
                    pq.delMin();
                }
            }
            br.close();
        }
        Hand delHand = pq.delMin();
        Card[] delCard = delHand.getCards();
        Arrays.sort(delCard);

        String mix = """";
        String temp;
        for (int i = 0; i < 5; i++) {
            String face = delCard[i].getFace();
            String suit = delCard[i].getSuit();
            if (i == 0) {
                temp = suit + ""_"" + face;
            } else {
                temp = "","" + suit + ""_"" + face;
            }
            mix = mix + temp;
        }
        System.out.println(mix);
    }
}


@cb031df4d7c4c7bd4dae5c10a0293f3a@"
"b03704074","4","0.38","105680","@c985ddad5b6b30814a4374de0ef5d7e6@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ  implements Comparable<HandPQ>{
    private Hand[] pq;
    //private Card[] cards = new Card[5];
    private int N ;
    public HandPQ(int capacity)
    {   N = 0;
        pq = new Hand[capacity+1];
    }
    public boolean isEmpty(){ return N == 0; }
    private void swim(int k){
        while (k > 1 && less(k/2, k)){
            exch(k, k/2);
            k  = k/2;}}
    public void insert(Hand x){
        if(N>100) delMin();
        pq[++N] = x;
        swim(N);}
    private void sink(int k){
        while (2*k <= N){
            int j = 2*k;
            if (j < N && less(j, j+1)) j++;
            if (!less(k, j)) break;
            exch(k, j);
            k = j;}}
    public Hand delMax(){
        Hand max = pq[1];
        exch(1, N--);
        sink(1);
        pq[N+1] = null;
        return max;}
    public Hand delMin(){
        exch(1, N);
        Hand min = pq[N--];
        sink(1);
        pq[N+1] = null;   
        return min;
    }
    private boolean less(int i, int j)
    { return pq[i].compareTo(pq[j]) < 0; }
    private void exch(int i, int j)
    { Hand t = pq[i]; pq[i] = pq[j]; pq[j] = t; }
    

    public static void main(String[] args) throws Exception {
        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            HandPQ handArray = new HandPQ(count);
            for(int i = 0;i < count ;i++){
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0;j < 5;j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1],sep[0]);
                    cardsArray[j] = card;}
                Hand singlehand = new Hand(cardsArray);
                handArray.insert(singlehand);}
            for(int i = 0;i<target-1;i++){
                handArray.delMax();}
            Hand ans = handArray.delMax();
            Card[] ans1 = ans.getCards();    
            
            System.out.println(ans1[0].getSuit()+""_""+ans1[0].getFace()+"",""+ans1[1].getSuit()+""_""+ans1[1].getFace()+"",""
            +ans1[2].getSuit()+""_""+ans1[2].getFace()+"","" +ans1[3].getSuit()+""_""+ans1[3].getFace()+"","" +ans1[4].getSuit()+""_""+ans1[4].getFace());
            

        }
    }

    @Override
    public int compareTo(HandPQ t) {
        throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates.
    }
}


@c985ddad5b6b30814a4374de0ef5d7e6@"
"b03704074","4","1.54","116416","@4b9e8eef330d135d8b38a72e14f8ac7a@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ  implements Comparable<HandPQ>{
    private Hand[] pq;
    //private Card[] cards = new Card[5];
    private int N ;
    public HandPQ(int capacity)
    {   N = 0;
        pq = new Hand[capacity+1];
    }
    public boolean isEmpty(){ return N == 0; }
    private void swim(int k){
        while (k > 1 && less(k/2, k)){
            exch(k, k/2);
            k  = k/2;}}
    public void insert(Hand x){
        if(N>50) delMin();
        pq[++N] = x;
        swim(N);}
    private void sink(int k){
        while (2*k <= N){
            int j = 2*k;
            if (j < N && less(j, j+1)) j++;
            if (!less(k, j)) break;
            exch(k, j);
            k = j;}}
    public Hand delMax(){
        Hand max = pq[1];
        exch(1, N--);
        sink(1);
        pq[N+1] = null;
        return max;}
    public Hand delMin(){
        exch(1, N);
        Hand min = pq[N--];
        sink(1);
        pq[N+1] = null;   
        return min;
    }
    private boolean less(int i, int j)
    { return pq[i].compareTo(pq[j]) < 0; }
    private void exch(int i, int j)
    { Hand t = pq[i]; pq[i] = pq[j]; pq[j] = t; }
    

    public static void main(String[] args) throws Exception {
        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            HandPQ handArray = new HandPQ(count);
            for(int i = 0;i < count ;i++){
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0;j < 5;j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1],sep[0]);
                    cardsArray[j] = card;}
                Hand singlehand = new Hand(cardsArray);
                handArray.insert(singlehand);}
            for(int i = 0;i<target-1;i++){
                handArray.delMax();}
            Hand ans = handArray.delMax();
            Card[] ans1 = ans.getCards();    
            
            System.out.println(ans1[0].getSuit()+""_""+ans1[0].getFace()+"",""+ans1[1].getSuit()+""_""+ans1[1].getFace()+"",""
            +ans1[2].getSuit()+""_""+ans1[2].getFace()+"","" +ans1[3].getSuit()+""_""+ans1[3].getFace()+"","" +ans1[4].getSuit()+""_""+ans1[4].getFace());
            

        }
    }

    @Override
    public int compareTo(HandPQ t) {
        throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates.
    }
}


@4b9e8eef330d135d8b38a72e14f8ac7a@"
"r04525016","7","0.14","117488","@a25ac309734224c786ebcbf5ffc41ec8@import java.io.BufferedReader;
import java.io.FileReader;
import java.lang.reflect.Array;
import java.util.Arrays;

public class HandPQ {

    private Hand[] pq;
    private int size;

    public HandPQ() {
        size = 0;
        pq = new Hand[20];
    }

    private void resize(){
        if (size == pq.length - 3) {
            Hand[] pq2 = new Hand[2 * pq.length];
            for (int i = 0; i < size; i++) {
                pq2[i] = pq[i];
            }
            pq = pq2;
        }else if (size < pq.length / 4) {
            Hand[] pq2 = new Hand[pq.length / 2];
            for (int i = 0; i < size; i++) {
                pq2[i] = pq[i];
            }
            pq = pq2;
        }
    }

    public void insert(Hand hand) {
        resize();
        pq[size] = hand;
        size++;
    }

    public Hand delMin() {
        resize();
        int temp = 0;
        for (int i = 1; i < size; i++) {
            if (pq[i].compareTo(pq[temp]) == -1) {
                temp = i;
            }

        }
        pq[size] = pq[temp];
        pq[temp] = pq[size - 1];
        return pq[size--];

    }

    public boolean isEmpty() {
        return (size == 0);
    }

    public int size() {
        return size;
    }


    public static void main(String[] args) throws Exception {
        MinPQ<Hand> pq = new MinPQ();

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            for (int i = 0; i < count; i++) {
                String[] temp = br.readLine().split("","");
                Card[] cardsArray = new Card[5];
                for (int j = 0; j < 5; j++) {
                    String[] temp2 = temp[j].split(""_"");
                    Card c = new Card(temp2[1], temp2[0]);
                    cardsArray[j] = c;
                }
                Hand hand = new Hand(cardsArray);
                pq.insert(hand);
                if (pq.size() > target) {
                    pq.delMin();
                }
            }
            br.close();
        }
        Hand delHand = pq.delMin();
        Card[] delCard = delHand.getCards();
        Arrays.sort(delCard);

        String mix = """";
        String temp;
        for (int i = 0; i < 5; i++) {
            String face = delCard[i].getFace();
            String suit = delCard[i].getSuit();
            if (i == 0) {
                temp = suit + ""_"" + face;
            } else {
                temp = "","" + suit + ""_"" + face;
            }
            mix = mix + temp;
        }
        System.out.println(mix);
    }
}


@a25ac309734224c786ebcbf5ffc41ec8@"
"b03704074","4","1.39","123968","@fbc3c60ea1d6ca499107a229c6bcfa0b@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ  implements Comparable<HandPQ>{
    private Hand[] pq;
    //private Card[] cards = new Card[5];
    private int N ;
    public HandPQ(int capacity)
    {   N = 0;
        pq = new Hand[capacity+1];
    }
    public boolean isEmpty(){ return N == 0; }
    private void swim(int k){
        while (k > 1 && less(k/2, k)){
            exch(k, k/2);
            k  = k/2;}}
    public void insert(Hand x){
        if(N>50) delMin();
        pq[++N] = x;
        swim(N);}
    private void sink(int k){
        while (2*k <= N){
            int j = 2*k;
            if (j < N && less(j, j+1)) j++;
            if (!less(k, j)) break;
            exch(k, j);
            k = j;}}
    public Hand delMax(){
        Hand max = pq[1];
        exch(1, N--);
        sink(1);
        pq[N+1] = null;
        return max;}
    public Hand delMin(){
        Hand min = pq[N--];
        pq[N+1] = null; 
        return min;
    }
    private boolean less(int i, int j)
    { return pq[i].compareTo(pq[j]) < 0; }
    private void exch(int i, int j)
    { Hand t = pq[i]; pq[i] = pq[j]; pq[j] = t; }
    

    public static void main(String[] args) throws Exception {
        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            HandPQ handArray = new HandPQ(count);
            for(int i = 0;i < count ;i++){
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0;j < 5;j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1],sep[0]);
                    cardsArray[j] = card;}
                Hand singlehand = new Hand(cardsArray);
                handArray.insert(singlehand);}
            for(int i = 0;i<target-1;i++){
                handArray.delMax();}
            Hand ans = handArray.delMax();
            Card[] ans1 = ans.getCards();    
            
            System.out.println(ans1[0].getSuit()+""_""+ans1[0].getFace()+"",""+ans1[1].getSuit()+""_""+ans1[1].getFace()+"",""
            +ans1[2].getSuit()+""_""+ans1[2].getFace()+"","" +ans1[3].getSuit()+""_""+ans1[3].getFace()+"","" +ans1[4].getSuit()+""_""+ans1[4].getFace());
            

        }
    }

    @Override
    public int compareTo(HandPQ t) {
        throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates.
    }
}


@fbc3c60ea1d6ca499107a229c6bcfa0b@"
"b03704074","4","0.71","112752","@6d54c0058a50a57c9e0f92822f030ab4@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ  implements Comparable<HandPQ>{
    private Hand[] pq;
    //private Card[] cards = new Card[5];
    private int N ;
    public HandPQ(int capacity)
    {   N = 0;
        pq = new Hand[capacity+1];
    }
    public boolean isEmpty(){ return N == 0; }
    private void swim(int k){
        while (k > 1 && less(k/2, k)){
            exch(k, k/2);
            k  = k/2;}}
    public void insert(Hand x){
        if(N>20) delMin();
        pq[++N] = x;
        swim(N);}
    private void sink(int k){
        while (2*k <= N){
            int j = 2*k;
            if (j < N && less(j, j+1)) j++;
            if (!less(k, j)) break;
            exch(k, j);
            k = j;}}
    public Hand delMax(){
        Hand max = pq[1];
        exch(1, N--);
        sink(1);
        pq[N+1] = null;
        return max;}
    public Hand delMin(){
        Hand min = pq[N--];
        pq[N+1] = null; 
        return min;
    }
    private boolean less(int i, int j)
    { return pq[i].compareTo(pq[j]) < 0; }
    private void exch(int i, int j)
    { Hand t = pq[i]; pq[i] = pq[j]; pq[j] = t; }
    

    public static void main(String[] args) throws Exception {
        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            HandPQ handArray = new HandPQ(count);
            for(int i = 0;i < count ;i++){
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0;j < 5;j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1],sep[0]);
                    cardsArray[j] = card;}
                Hand singlehand = new Hand(cardsArray);
                handArray.insert(singlehand);}
            for(int i = 0;i<target-1;i++){
                handArray.delMax();}
            Hand ans = handArray.delMax();
            Card[] ans1 = ans.getCards();    
            
            System.out.println(ans1[0].getSuit()+""_""+ans1[0].getFace()+"",""+ans1[1].getSuit()+""_""+ans1[1].getFace()+"",""
            +ans1[2].getSuit()+""_""+ans1[2].getFace()+"","" +ans1[3].getSuit()+""_""+ans1[3].getFace()+"","" +ans1[4].getSuit()+""_""+ans1[4].getFace());
            

        }
    }

    @Override
    public int compareTo(HandPQ t) {
        throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates.
    }
}


@6d54c0058a50a57c9e0f92822f030ab4@"
"b03704074","4","0.91","116624","@04a6c8c539369d39cd7140beee56cd38@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ  implements Comparable<HandPQ>{
    private Hand[] pq;
    //private Card[] cards = new Card[5];
    private int N ;
    public HandPQ(int capacity)
    {   N = 0;
        pq = new Hand[capacity+1];
    }
    public boolean isEmpty(){ return N == 0; }
    private void swim(int k){
        while (k > 1 && less(k/2, k)){
            exch(k, k/2);
            k  = k/2;}}
    public void insert(Hand x){
        if(N>30) delMin();
        pq[++N] = x;
        swim(N);}
    private void sink(int k){
        while (2*k <= N){
            int j = 2*k;
            if (j < N && less(j, j+1)) j++;
            if (!less(k, j)) break;
            exch(k, j);
            k = j;}}
    public Hand delMax(){
        Hand max = pq[1];
        exch(1, N--);
        sink(1);
        pq[N+1] = null;
        return max;}
    public Hand delMin(){
        Hand min = pq[N--];
        pq[N+1] = null; 
        return min;
    }
    private boolean less(int i, int j)
    { return pq[i].compareTo(pq[j]) < 0; }
    private void exch(int i, int j)
    { Hand t = pq[i]; pq[i] = pq[j]; pq[j] = t; }
    

    public static void main(String[] args) throws Exception {
        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            HandPQ handArray = new HandPQ(count);
            for(int i = 0;i < count ;i++){
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0;j < 5;j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1],sep[0]);
                    cardsArray[j] = card;}
                Hand singlehand = new Hand(cardsArray);
                handArray.insert(singlehand);}
            for(int i = 0;i<target-1;i++){
                handArray.delMax();}
            Hand ans = handArray.delMax();
            Card[] ans1 = ans.getCards();    
            
            System.out.println(ans1[0].getSuit()+""_""+ans1[0].getFace()+"",""+ans1[1].getSuit()+""_""+ans1[1].getFace()+"",""
            +ans1[2].getSuit()+""_""+ans1[2].getFace()+"","" +ans1[3].getSuit()+""_""+ans1[3].getFace()+"","" +ans1[4].getSuit()+""_""+ans1[4].getFace());
            

        }
    }

    @Override
    public int compareTo(HandPQ t) {
        throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates.
    }
}


@04a6c8c539369d39cd7140beee56cd38@"
"b03704074","4","1.34","121888","@fbc3c60ea1d6ca499107a229c6bcfa0b@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ  implements Comparable<HandPQ>{
    private Hand[] pq;
    //private Card[] cards = new Card[5];
    private int N ;
    public HandPQ(int capacity)
    {   N = 0;
        pq = new Hand[capacity+1];
    }
    public boolean isEmpty(){ return N == 0; }
    private void swim(int k){
        while (k > 1 && less(k/2, k)){
            exch(k, k/2);
            k  = k/2;}}
    public void insert(Hand x){
        if(N>50) delMin();
        pq[++N] = x;
        swim(N);}
    private void sink(int k){
        while (2*k <= N){
            int j = 2*k;
            if (j < N && less(j, j+1)) j++;
            if (!less(k, j)) break;
            exch(k, j);
            k = j;}}
    public Hand delMax(){
        Hand max = pq[1];
        exch(1, N--);
        sink(1);
        pq[N+1] = null;
        return max;}
    public Hand delMin(){
        Hand min = pq[N--];
        pq[N+1] = null; 
        return min;
    }
    private boolean less(int i, int j)
    { return pq[i].compareTo(pq[j]) < 0; }
    private void exch(int i, int j)
    { Hand t = pq[i]; pq[i] = pq[j]; pq[j] = t; }
    

    public static void main(String[] args) throws Exception {
        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            HandPQ handArray = new HandPQ(count);
            for(int i = 0;i < count ;i++){
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0;j < 5;j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1],sep[0]);
                    cardsArray[j] = card;}
                Hand singlehand = new Hand(cardsArray);
                handArray.insert(singlehand);}
            for(int i = 0;i<target-1;i++){
                handArray.delMax();}
            Hand ans = handArray.delMax();
            Card[] ans1 = ans.getCards();    
            
            System.out.println(ans1[0].getSuit()+""_""+ans1[0].getFace()+"",""+ans1[1].getSuit()+""_""+ans1[1].getFace()+"",""
            +ans1[2].getSuit()+""_""+ans1[2].getFace()+"","" +ans1[3].getSuit()+""_""+ans1[3].getFace()+"","" +ans1[4].getSuit()+""_""+ans1[4].getFace());
            

        }
    }

    @Override
    public int compareTo(HandPQ t) {
        throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates.
    }
}


@fbc3c60ea1d6ca499107a229c6bcfa0b@"
"b03704074","4","1.35","122624","@eee4ef7037b94b1ae37fe966c0b01645@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ  implements Comparable<HandPQ>{
    private Hand[] pq;
    //private Card[] cards = new Card[5];
    private int N ;
    public HandPQ(int capacity)
    {   N = 0;
        pq = new Hand[capacity+1];
    }
    public boolean isEmpty(){ return N == 0; }
    private void swim(int k){
        while (k > 1 && less(k/2, k)){
            exch(k, k/2);
            k  = k/2;}}
    public void insert(Hand x){
        pq[++N] = x;
        swim(N);
        if(N>50) delMin();}
    private void sink(int k){
        while (2*k <= N){
            int j = 2*k;
            if (j < N && less(j, j+1)) j++;
            if (!less(k, j)) break;
            exch(k, j);
            k = j;}}
    public Hand delMax(){
        Hand max = pq[1];
        exch(1, N--);
        sink(1);
        pq[N+1] = null;
        return max;}
    public Hand delMin(){
        Hand min = pq[N--];
        pq[N+1] = null; 
        return min;
    }
    private boolean less(int i, int j)
    { return pq[i].compareTo(pq[j]) < 0; }
    private void exch(int i, int j)
    { Hand t = pq[i]; pq[i] = pq[j]; pq[j] = t; }
    

    public static void main(String[] args) throws Exception {
        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            HandPQ handArray = new HandPQ(count);
            for(int i = 0;i < count ;i++){
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0;j < 5;j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1],sep[0]);
                    cardsArray[j] = card;}
                Hand singlehand = new Hand(cardsArray);
                handArray.insert(singlehand);}
            for(int i = 0;i<target-1;i++){
                handArray.delMax();}
            Hand ans = handArray.delMax();
            Card[] ans1 = ans.getCards();    
            
            System.out.println(ans1[0].getSuit()+""_""+ans1[0].getFace()+"",""+ans1[1].getSuit()+""_""+ans1[1].getFace()+"",""
            +ans1[2].getSuit()+""_""+ans1[2].getFace()+"","" +ans1[3].getSuit()+""_""+ans1[3].getFace()+"","" +ans1[4].getSuit()+""_""+ans1[4].getFace());
            

        }
    }

    @Override
    public int compareTo(HandPQ t) {
        throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates.
    }
}


@eee4ef7037b94b1ae37fe966c0b01645@"
"r04525016","6","0.98","116800","@3d093d0155a13e79af06b5473c4cbdcc@import java.io.BufferedReader;
import java.io.FileReader;
import java.lang.reflect.Array;
import java.util.Arrays;
import java.util.NoSuchElementException;

public class HandPQ {

    private Hand[] pq;
    private int size;

    public HandPQ() {
        size = 0;
        pq = new Hand[20];
    }

    private void resize(){
        if (size == pq.length - 3) {
            Hand[] pq2 = new Hand[2 * pq.length];
            for (int i = 0; i < size; i++) {
                pq2[i] = pq[i];
            }
            pq = pq2;
        }else if (size < pq.length / 4) {
            Hand[] pq2 = new Hand[pq.length / 2];
            for (int i = 0; i < size; i++) {
                pq2[i] = pq[i];
            }
            pq = pq2;
        }
    }

    public void insert(Hand hand) {
        resize();
        pq[size] = hand;
        size++;
    }

    public Hand delMin() {
        if (isEmpty()) throw new NoSuchElementException(""Priority queue underflow"");
        resize();
        int temp = 0;
        for (int i = 1; i < size; i++) {
            if (pq[i].compareTo(pq[temp]) == -1) {
                temp = i;
            }

        }
        pq[size] = pq[temp];
        pq[temp] = pq[size - 1];
        return pq[size--];

    }

    public boolean isEmpty() {
        return (size == 0);
    }

    public int size() {
        return size;
    }


    public static void main(String[] args) throws Exception {
        HandPQ pq = new HandPQ();

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            for (int i = 0; i < count; i++) {
                String[] temp = br.readLine().split("","");
                Card[] cardsArray = new Card[5];
                for (int j = 0; j < 5; j++) {
                    String[] temp2 = temp[j].split(""_"");
                    Card c = new Card(temp2[1], temp2[0]);
                    cardsArray[j] = c;
                }
                Hand hand = new Hand(cardsArray);
                pq.insert(hand);
                if (pq.size() > target) {
                    pq.delMin();
                }
            }
            br.close();
        }
        Hand delHand = pq.delMin();
        Card[] delCard = delHand.getCards();
        Arrays.sort(delCard);

        String mix = """";
        String temp;
        for (int i = 0; i < 5; i++) {
            String face = delCard[i].getFace();
            String suit = delCard[i].getSuit();
            if (i == 0) {
                temp = suit + ""_"" + face;
            } else {
                temp = "","" + suit + ""_"" + face;
            }
            mix = mix + temp;
        }
        System.out.println(mix);
    }
}


@3d093d0155a13e79af06b5473c4cbdcc@"
"r04921105","0","0.41","105952","@945a5817e33303cf4e671a33d5f9907c@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){           
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx=0; 
                //System.out.printf(""count=""+count+"","");
                //System.out.println(""target=""+target);
            Hand[] hands = new Hand[count];            
            MaxPQ<Hand> pq = new MaxPQ<Hand>() ;            
                //read file
              for(String in = br.readLine(); in != null; in = br.readLine()) {
                String[] cardStr = in.split("","");
                Card[] cardsArray = new Card[5];
                //file to card               
                for(int i = 0; i < 5
                        ; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;                      
                    //System.out.printf(""_""+cardsArray.length); 
                }//end of loading 5 cards                  
                //System.out.printf(""=====""+cardsArray[1].getFace()+"",""+cardsArray[1].getSuit()+""====="");
                //print card
                /*印card
                for(int i =0;i<cardsArray.length;i++){
                    System.out.printf(""(""+cardsArray[i].getSuit()+"",""+cardsArray[i].getFace()+"")"");
                }
                    System.out.print(""\n"");                   
                 //
                */
               Hand hand=new Hand(cardsArray);
                hands[idx]=hand;
                idx++;
                }//end of reading a in
              //print hands
              Card[] check = new Card[5];
              //System.out.println(pq.size());
              for(int i=0;i<hands.length;i++){
                  check=hands[i].getCards();
                  for(int x =0;x<check.length;x++){
                    //System.out.printf(""[""+check[x].getSuit()+"",""+check[x].getFace()+""]"");
                }
                   // System.out.print(""\n"");
                }
              //print hands^
              //insert hand into pq
              
              Card[] checkcard = new Card[5];
              for (int i=0;i<hands.length;i++){
                  pq.insert(hands[i]);
                  checkcard=hands[i].getCards();
                  Arrays.sort(checkcard);
                  for(int x=0;x<checkcard.length;x++){
                  //System.out.printf(""insert:(""+checkcard[x].getSuit()+"",""+checkcard[x].getFace()+"")"");
                 
                  }
                  //System.out.print(""*******"");
                  //System.out.print(""\n"");                  
              }
                                         
              
             //Card[] mincard = new Card[5]; 
             /*
              for(int i=0;i<pq.size();i++){
                  System.out.println(pq.size()); 
                  mincard = pq.max().getCards();                                
                    for(int j =0;j<mincard.length;j++){
                        System.out.printf(""<<""+mincard[j].getSuit()+"",""+mincard[j].getFace()+"">>"");
                     }
                     System.out.print(""\n"");
                     pq.delMax();
                    if(pq.size()==2){
                      mincard = pq.max().getCards();                                
                         for(int j =0;j<mincard.length;j++){
                            System.out.printf(""<<""+mincard[j].getSuit()+"",""+mincard[j].getFace()+"">>"");
                        }
                    }                     
              }
              */
              for(int i=0;i<target-1;i++){
                  pq.delMax();                 
              }
              
              Card[] anscard = new Card[5]; 
              anscard=pq.max().getCards();
              for(int i=0;i<anscard.length;i++){
                  
                  System.out.printf(anscard[i].getSuit()+""_""+anscard[i].getFace()+"","");
              }
              
              
          
              
              
                
              
              
              
                    
               
                
                
              
              
                
                
//            MinPQ pq = new MinPQ(playerArray);
            //////讀取input,把hand排序好,存入pq,del min(target),output the target////// 
          
           
            
             
            
        }
    }
}

@945a5817e33303cf4e671a33d5f9907c@"
"r04945022","0","1.02","120640","@36d4fc9a5270cb239b71880175c6166d@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {
    
        int p;
        Hand[] pq;
    HandPQ (){
        p = 0;
        pq = new Hand[10];
    }
    
    public static String Printcard(Card[] c1){
        String total="""";
        String comma="","";
        for(Card card:c1){
            total+= comma+card.getSuit()+""_""+card.getFace();
        }
        return total;
    }
    

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ<Hand> pq = new MinPQ<Hand>();
            for(int in=0;in<count;in++){
                Card[] Cardinput = new Card[5];
                String[] Cardeach = br.readLine().split("","");
                for(int i=0; i<5;i++){
                    String[] temp = Cardeach[i].split(""_"");
                    Card c = new Card(temp[1],temp[0]);
                    Cardinput[i] = c;
                }
                Hand h = new Hand(Cardinput);
                pq.insert(h);
                if(pq.size()>target){
                    pq.delMin();
                }
            }
                br.close();
                Card[] clast = pq.delMin().getCards();
                Arrays.sort(clast);
                System.out.println(Printcard(clast));
        }
    }
}

@36d4fc9a5270cb239b71880175c6166d@"
"r03522826","0","0.99","118256","@ea3b2d594aca0515eb4bd7affa0ce93b@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ<Hand> pq = new MinPQ<Hand>();
            
           for (String in = br.readLine(); in != null; in = br.readLine())
           {
               String[] cardstr = in.split("","");
               Card[] cardsArray = new Card[5];
               for(int i = 0; i < 5; i++){
                    String[] sep = cardstr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
               Hand hand = new Hand(cardsArray);
               pq.insert(hand);
               if(pq.size() > target)
                   pq.delMin();
           }
           Card[] Ans = pq.delMin().getCards();
           for(int i = 0; i < 5; i++)
               System.out.print(Ans[i].getSuit()+""_""+Ans[i].getFace()+"","");
               
        }
    }
}

@ea3b2d594aca0515eb4bd7affa0ce93b@"
"r04921105","0","0.4","106336","@6a6ef9f9dc836ed0f1241064b26c2efa@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){           
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx=0; 
                //System.out.printf(""count=""+count+"","");
                //System.out.println(""target=""+target);
            Hand[] hands = new Hand[count];            
            MaxPQ<Hand> pq = new MaxPQ<Hand>() ;            
                //read file
              for(String in = br.readLine(); in != null; in = br.readLine()) {
                String[] cardStr = in.split("","");
                Card[] cardsArray = new Card[5];
                //file to card               
                for(int i = 0; i < 5
                        ; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;                      
                    //System.out.printf(""_""+cardsArray.length); 
                }//end of loading 5 cards                  
                //System.out.printf(""=====""+cardsArray[1].getFace()+"",""+cardsArray[1].getSuit()+""====="");
                //print card
                /*印card
                for(int i =0;i<cardsArray.length;i++){
                    System.out.printf(""(""+cardsArray[i].getSuit()+"",""+cardsArray[i].getFace()+"")"");
                }
                    System.out.print(""\n"");                   
                 //
                */
               Hand hand=new Hand(cardsArray);
                hands[idx]=hand;
                idx++;
                }//end of reading a in
              //print hands
              Card[] check = new Card[5];
              //System.out.println(pq.size());
              for(int i=0;i<hands.length;i++){
                  check=hands[i].getCards();
                  for(int x =0;x<check.length;x++){
                    //System.out.printf(""[""+check[x].getSuit()+"",""+check[x].getFace()+""]"");
                }
                   // System.out.print(""\n"");
                }
              //print hands^
              //insert hand into pq
              
              Card[] insertcard = new Card[5];
              
              for (int i=0;i<hands.length;i++){
                  pq.insert(hands[i]);
                  insertcard=hands[i].getCards();
                  Arrays.sort(insertcard);/*
                  for(int x=0;x<target;x++){
                  System.out.printf(""insert:(""+checkcard[x].getSuit()+"",""+checkcard[x].getFace()+"")"");
                 
                  }
                  System.out.print(""*******"");
                  System.out.print(""\n"");  */                
              }
                                         
              
             //Card[] mincard = new Card[5]; 
             /*
              for(int i=0;i<pq.size();i++){
                  System.out.println(pq.size()); 
                  mincard = pq.max().getCards();                                
                    for(int j =0;j<mincard.length;j++){
                        System.out.printf(""<<""+mincard[j].getSuit()+"",""+mincard[j].getFace()+"">>"");
                     }
                     System.out.print(""\n"");
                     pq.delMax();
                    if(pq.size()==2){
                      mincard = pq.max().getCards();                                
                         for(int j =0;j<mincard.length;j++){
                            System.out.printf(""<<""+mincard[j].getSuit()+"",""+mincard[j].getFace()+"">>"");
                        }
                    }                     
              }
              */
              
            
              
              Card[] anscard = new Card[5];
              for(int i =0;i<target-1;i++){
                  pq.delMax();
              }
              anscard=pq.max().getCards();
              for(int i=0;i<anscard.length;i++){
                  
                  System.out.printf(anscard[i].getSuit()+""_""+anscard[i].getFace()+"","");
              }
              
              
          
              
              
                
              
              
              
                    
               
                
                
              
              
                
                
//            MinPQ pq = new MinPQ(playerArray);
            //////讀取input,把hand排序好,存入pq,del min(target),output the target////// 
          
           
            
             
            
        }
    }
}

@6a6ef9f9dc836ed0f1241064b26c2efa@"
"r04945022","7","0.142857142857143","117168","@05adff28112febf1960766c3bad65576@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {
    
        int p;
        Hand[] pq;
    HandPQ (){
        p = 0;
        pq = new Hand[10];
    }
    
    
    public static String Printcard(Card[] c1){
        String total="""";
        String comma="""";
        for(Card card:c1){
            total+= comma+card.getSuit()+""_""+card.getFace();
            comma ="","";
        }
        return total;
    }
    

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ<Hand> pq = new MinPQ<Hand>();
            for(int in=0;in<count;in++){
                Card[] Cardinput = new Card[5];
                String[] Cardeach = br.readLine().split("","");
                for(int i=0; i<5;i++){
                    String[] temp = Cardeach[i].split(""_"");
                    Card c = new Card(temp[1],temp[0]);
                    Cardinput[i] = c;
                }
                Hand h = new Hand(Cardinput);
                pq.insert(h);
                if(pq.size()>target){
                    pq.delMin();
                }
            }
                br.close();
                Card[] clast = pq.delMin().getCards();
                Arrays.sort(clast);
                System.out.println(Printcard(clast));
        }
    }
}

@05adff28112febf1960766c3bad65576@"
"r03522826","7","0.144285714285714","120816","@a2372ce50a38dc2da323239f76b4d269@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ<Hand> pq = new MinPQ<Hand>();
            
           for (String in = br.readLine(); in != null; in = br.readLine())
           {
               String[] cardstr = in.split("","");
               Card[] cardsArray = new Card[5];
               for(int i = 0; i < 5; i++){
                    String[] sep = cardstr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
               Hand hand = new Hand(cardsArray);
               pq.insert(hand);
               if(pq.size() > target)
                   pq.delMin();
           }
           Card[] Ans = pq.delMin().getCards();
           for(int i = 0; i < 5; i++){
               if(i != 4)
                   System.out.print(Ans[i].getSuit()+""_""+Ans[i].getFace()+"","");
               else
                   System.out.print(Ans[i].getSuit()+""_""+Ans[i].getFace());
           }
        }
    }
}

@a2372ce50a38dc2da323239f76b4d269@"
"b03704074","4","0.38","102784","@649a55913ad01df55f0d51f4f63ae0fa@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ  implements Comparable<HandPQ>{
    private Hand[] pq;
    //private Card[] cards = new Card[5];
    private int N ;
    public HandPQ(int capacity)
    {   N = 0;
        pq = new Hand[capacity+1];
    }
    public boolean isEmpty(){ return N == 0; }
    private void swim(int k){
        while (k > 1 && less(k/2, k)){
            exch(k, k/2);
            k  = k/2;}}
    public void insert(Hand x){
        pq[++N] = x;
        swim(N);
        if(N>50) delMin();}
    private void sink(int k){
        while (2*k <= N){
            int j = 2*k;
            if (j < N && less(j, j+1)) j++;
            if (!less(k, j)) break;
            exch(k, j);
            k = j;}}
    public Hand delMax(){
        Hand max = pq[1];
        exch(1, N--);
        sink(1);
        pq[N+1] = null;
        return max;}
    public void delMin(){
        int min = N;
        for(int i = N;i > N/2;i--)
            if(less(min,i)) min = i;
        exch(min,N);
        pq[N] = null; 
    }
    private boolean less(int i, int j)
    { return pq[i].compareTo(pq[j]) < 0; }
    private void exch(int i, int j)
    { Hand t = pq[i]; pq[i] = pq[j]; pq[j] = t; }
    

    public static void main(String[] args) throws Exception {
        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            HandPQ handArray = new HandPQ(count);
            for(int i = 0;i < count ;i++){
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0;j < 5;j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1],sep[0]);
                    cardsArray[j] = card;}
                Hand singlehand = new Hand(cardsArray);
                handArray.insert(singlehand);}
            for(int i = 0;i<target-1;i++){
                handArray.delMax();}
            Hand ans = handArray.delMax();
            Card[] ans1 = ans.getCards();    
            
            System.out.println(ans1[0].getSuit()+""_""+ans1[0].getFace()+"",""+ans1[1].getSuit()+""_""+ans1[1].getFace()+"",""
            +ans1[2].getSuit()+""_""+ans1[2].getFace()+"","" +ans1[3].getSuit()+""_""+ans1[3].getFace()+"","" +ans1[4].getSuit()+""_""+ans1[4].getFace());
            

        }
    }

    @Override
    public int compareTo(HandPQ t) {
        throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates.
    }
}


@649a55913ad01df55f0d51f4f63ae0fa@"
"b03704074","4","1.49","123728","@b85d430592314ef0b751ea870e02b92a@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ  implements Comparable<HandPQ>{
    private Hand[] pq;
    //private Card[] cards = new Card[5];
    private int N ;
    public HandPQ(int capacity)
    {   N = 0;
        pq = new Hand[capacity+1];
    }
    public boolean isEmpty(){ return N == 0; }
    private void swim(int k){
        while (k > 1 && less(k/2, k)){
            exch(k, k/2);
            k  = k/2;}}
    public void insert(Hand x){
        pq[++N] = x;
        swim(N);
        if(N>50) delMin();}
    private void sink(int k){
        while (2*k <= N){
            int j = 2*k;
            if (j < N && less(j, j+1)) j++;
            if (!less(k, j)) break;
            exch(k, j);
            k = j;}}
    public Hand delMax(){
        Hand max = pq[1];
        exch(1, N--);
        sink(1);
        pq[N+1] = null;
        return max;}
    public void delMin(){
        int min = N;
        for(int i = N;i > N/2;i--)
            if(less(min,i)) min = i;
        exch(min,N);
        pq[N--] = null; 
    }
    private boolean less(int i, int j)
    { return pq[i].compareTo(pq[j]) < 0; }
    private void exch(int i, int j)
    { Hand t = pq[i]; pq[i] = pq[j]; pq[j] = t; }
    

    public static void main(String[] args) throws Exception {
        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            HandPQ handArray = new HandPQ(count);
            for(int i = 0;i < count ;i++){
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0;j < 5;j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1],sep[0]);
                    cardsArray[j] = card;}
                Hand singlehand = new Hand(cardsArray);
                handArray.insert(singlehand);}
            for(int i = 0;i<target-1;i++){
                handArray.delMax();}
            Hand ans = handArray.delMax();
            Card[] ans1 = ans.getCards();    
            
            System.out.println(ans1[0].getSuit()+""_""+ans1[0].getFace()+"",""+ans1[1].getSuit()+""_""+ans1[1].getFace()+"",""
            +ans1[2].getSuit()+""_""+ans1[2].getFace()+"","" +ans1[3].getSuit()+""_""+ans1[3].getFace()+"","" +ans1[4].getSuit()+""_""+ans1[4].getFace());
            

        }
    }

    @Override
    public int compareTo(HandPQ t) {
        throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates.
    }
}


@b85d430592314ef0b751ea870e02b92a@"
"b03704074","4","1.57","134848","@06992df54b3f822741623afe31d11ddf@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ  implements Comparable<HandPQ>{
    private Hand[] pq;
    //private Card[] cards = new Card[5];
    private int N ;
    public HandPQ(int capacity)
    {   N = 0;
        pq = new Hand[capacity+1];
    }
    public boolean isEmpty(){ return N == 0; }
    private void swim(int k){
        while (k > 1 && less(k/2, k)){
            exch(k, k/2);
            k  = k/2;}}
    public void insert(Hand x){
        pq[++N] = x;
        swim(N);
        if(N>50) delMin();}
    private void sink(int k){
        while (2*k <= N){
            int j = 2*k;
            if (j < N && less(j, j+1)) j++;
            if (!less(k, j)) break;
            exch(k, j);
            k = j;}}
    public Hand delMax(){
        Hand max = pq[1];
        exch(1, N--);
        sink(1);
        pq[N+1] = null;
        return max;}
    public void delMin(){
        int min = N;
        for(int i = N;i > 0;i--)
            if(less(min,i)) min = i;
        exch(min,N);
        pq[N--] = null; 
    }
    private boolean less(int i, int j)
    { return pq[i].compareTo(pq[j]) < 0; }
    private void exch(int i, int j)
    { Hand t = pq[i]; pq[i] = pq[j]; pq[j] = t; }
    

    public static void main(String[] args) throws Exception {
        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            HandPQ handArray = new HandPQ(count);
            for(int i = 0;i < count ;i++){
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0;j < 5;j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1],sep[0]);
                    cardsArray[j] = card;}
                Hand singlehand = new Hand(cardsArray);
                handArray.insert(singlehand);}
            for(int i = 0;i<target-1;i++){
                handArray.delMax();}
            Hand ans = handArray.delMax();
            Card[] ans1 = ans.getCards();    
            
            System.out.println(ans1[0].getSuit()+""_""+ans1[0].getFace()+"",""+ans1[1].getSuit()+""_""+ans1[1].getFace()+"",""
            +ans1[2].getSuit()+""_""+ans1[2].getFace()+"","" +ans1[3].getSuit()+""_""+ans1[3].getFace()+"","" +ans1[4].getSuit()+""_""+ans1[4].getFace());
            

        }
    }

    @Override
    public int compareTo(HandPQ t) {
        throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates.
    }
}


@06992df54b3f822741623afe31d11ddf@"
"b03704074","4","1.53","131648","@51b051febf1c4fc14d0c66a77f3fe5d4@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ  implements Comparable<HandPQ>{
    private Hand[] pq;
    //private Card[] cards = new Card[5];
    private int N ;
    public HandPQ(int capacity)
    {   N = 0;
        pq = new Hand[capacity+1];
    }
    public boolean isEmpty(){ return N == 0; }
    private void swim(int k){
        while (k > 1 && less(k/2, k)){
            exch(k, k/2);
            k  = k/2;}}
    public void insert(Hand x){
        pq[++N] = x;
        swim(N);
        if(N>50) delMin();}
    private void sink(int k){
        while (2*k <= N){
            int j = 2*k;
            if (j < N && less(j, j+1)) j++;
            if (!less(k, j)) break;
            exch(k, j);
            k = j;}}
    public Hand delMax(){
        Hand max = pq[1];
        exch(1, N--);
        sink(1);
        pq[N+1] = null;
        return max;}
    public void delMin(){
        int min = 1;
        for(int i = 1;i < N;i++)
            if(less(min,i)) min = i;
                exch(min,N);
        pq[N] = null; N--;
    }
    private boolean less(int i, int j)
    { return pq[i].compareTo(pq[j]) < 0; }
    private void exch(int i, int j)
    { Hand t = pq[i]; pq[i] = pq[j]; pq[j] = t; }
    

    public static void main(String[] args) throws Exception {
        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            HandPQ handArray = new HandPQ(count);
            for(int i = 0;i < count ;i++){
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0;j < 5;j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1],sep[0]);
                    cardsArray[j] = card;}
                Hand singlehand = new Hand(cardsArray);
                handArray.insert(singlehand);}
            for(int i = 0;i<target-1;i++){
                handArray.delMax();}
            Hand ans = handArray.delMax();
            Card[] ans1 = ans.getCards();    
            
            System.out.println(ans1[0].getSuit()+""_""+ans1[0].getFace()+"",""+ans1[1].getSuit()+""_""+ans1[1].getFace()+"",""
            +ans1[2].getSuit()+""_""+ans1[2].getFace()+"","" +ans1[3].getSuit()+""_""+ans1[3].getFace()+"","" +ans1[4].getSuit()+""_""+ans1[4].getFace());
            

        }
    }

    @Override
    public int compareTo(HandPQ t) {
        throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates.
    }
}


@51b051febf1c4fc14d0c66a77f3fe5d4@"
"b03704074","4","1.37","115344","@05eb99c432486c22dc3c9ca998d5113c@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ  implements Comparable<HandPQ>{
    private Hand[] pq;
    //private Card[] cards = new Card[5];
    private int N ;
    public HandPQ(int capacity)
    {   N = 0;
        pq = new Hand[capacity+1];
    }
    public boolean isEmpty(){ return N == 0; }
    private void swim(int k){
        while (k > 1 && less(k/2, k)){
            exch(k, k/2);
            k  = k/2;}}
    public void insert(Hand x){
        pq[++N] = x;
        swim(N);
        if(N>50) delMin();}
    private void sink(int k){
        while (2*k <= N){
            int j = 2*k;
            if (j < N && less(j, j+1)) j++;
            if (!less(k, j)) break;
            exch(k, j);
            k = j;}}
    public Hand delMax(){
        Hand max = pq[1];
        exch(1, N--);
        sink(1);
        pq[N+1] = null;
        return max;}
    public void delMin(){
        int min = 1;
        for(int i = 1;i < N;i++){
            if(less(min,i)){
                min = i;}
           exch(min,N);
           swim(min);
           pq[N] = null; 
           N--;}}
    private boolean less(int i, int j)
    { return pq[i].compareTo(pq[j]) < 0; }
    private void exch(int i, int j)
    { Hand t = pq[i]; pq[i] = pq[j]; pq[j] = t; }
    

    public static void main(String[] args) throws Exception {
        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            HandPQ handArray = new HandPQ(count);
            for(int i = 0;i < count ;i++){
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0;j < 5;j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1],sep[0]);
                    cardsArray[j] = card;}
                Hand singlehand = new Hand(cardsArray);
                handArray.insert(singlehand);}
            for(int i = 0;i<target-1;i++){
                handArray.delMax();}
            Hand ans = handArray.delMax();
            Card[] ans1 = ans.getCards();    
            
            System.out.println(ans1[0].getSuit()+""_""+ans1[0].getFace()+"",""+ans1[1].getSuit()+""_""+ans1[1].getFace()+"",""
            +ans1[2].getSuit()+""_""+ans1[2].getFace()+"","" +ans1[3].getSuit()+""_""+ans1[3].getFace()+"","" +ans1[4].getSuit()+""_""+ans1[4].getFace());
            

        }
    }

    @Override
    public int compareTo(HandPQ t) {
        throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates.
    }
}


@05eb99c432486c22dc3c9ca998d5113c@"
"b99611017","0","1.37","115344","@8013256f098ea09799e28d8c081d9852@
import edu.princeton.cs.algs4.MinPQ;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;

public class HandPQ {
    
    public static void main(String[] args) throws Exception {
        
        MinPQ<Hand> pq = new MinPQ<Hand>();
        
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int limit=target;
            for (int i=0;i<count;i++) {                
                Card[] cardsArray = new Card[5];
                String[] test1 = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    String[] sep = test1[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                Hand aa = new Hand(cardsArray);
                pq.insert(aa);
                if(pq.size()>target)
                {
                    pq.delMin();
                }
                
            }
            Card[] ans=pq.min().getCards();
            String[] suit=new String[ans.length];
            String[] face=new String[ans.length];
            for(int i=0;i<ans.length;i++)
            {
                suit[i]=ans[i].getSuit();
            }
            for(int i=0;i<ans.length;i++)
            {
                face[i]=ans[i].getFace();
            }
            String fin="""";
            for(int i=0;i<ans.length-1;i++)
            {
                fin=fin+suit[i]+""_""+face[i]+"","";
            }
            fin=fin+suit[suit.length-1]+""_""+face[face.length-1];
            String fpath=""D:\\PDSA\\Hand\\out.txt"";
            BufferedWriter fout=new BufferedWriter(new FileWriter(fpath));
            fout.write(fin);
            fout.newLine();
            fout.close();
        }
    }
}

@8013256f098ea09799e28d8c081d9852@"
"b03704074","4","1.54","130336","@a08a197054df40f4d25bd769b1b6818a@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ  implements Comparable<HandPQ>{
    private Hand[] pq;
    //private Card[] cards = new Card[5];
    private int N ;
    public HandPQ(int capacity)
    {   N = 0;
        pq = new Hand[capacity+1];
    }
    public boolean isEmpty(){ return N == 0; }
    private void swim(int k){
        while (k > 1 && less(k/2, k)){
            exch(k, k/2);
            k  = k/2;}}
    public void insert(Hand x){
        pq[++N] = x;
        swim(N);
        if(N>50) delMin();}
    private void sink(int k){
        while (2*k <= N){
            int j = 2*k;
            if (j < N && less(j, j+1)) j++;
            if (!less(k, j)) break;
            exch(k, j);
            k = j;}}
    public Hand delMax(){
        Hand max = pq[1];
        exch(1, N--);
        sink(1);
        pq[N+1] = null;
        return max;}
    public void delMin(){
        int min = 1;
        for(int i = 2;i < N+1;i++){
            if(less(min,i))
                min = i;}
           exch(min,N);
           swim(min);
           pq[N] = null; 
           N--;}
    private boolean less(int i, int j)
    { return pq[i].compareTo(pq[j]) < 0; }
    private void exch(int i, int j)
    { Hand t = pq[i]; pq[i] = pq[j]; pq[j] = t; }
    

    public static void main(String[] args) throws Exception {
        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            HandPQ handArray = new HandPQ(count);
            for(int i = 0;i < count ;i++){
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0;j < 5;j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1],sep[0]);
                    cardsArray[j] = card;}
                Hand singlehand = new Hand(cardsArray);
                handArray.insert(singlehand);}
            for(int i = 0;i<target-1;i++){
                handArray.delMax();}
            Hand ans = handArray.delMax();
            Card[] ans1 = ans.getCards();    
            
            System.out.println(ans1[0].getSuit()+""_""+ans1[0].getFace()+"",""+ans1[1].getSuit()+""_""+ans1[1].getFace()+"",""
            +ans1[2].getSuit()+""_""+ans1[2].getFace()+"","" +ans1[3].getSuit()+""_""+ans1[3].getFace()+"","" +ans1[4].getSuit()+""_""+ans1[4].getFace());
            

        }
    }

    @Override
    public int compareTo(HandPQ t) {
        throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates.
    }
}


@a08a197054df40f4d25bd769b1b6818a@"
"r03522809","0","1.13","124368","@6ee09114b3771ddd689175e75d86eaba@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Dennis
 */
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int id=0;
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ<Hand> pqueue =new MinPQ<Hand>();
            for(int j=0;j<count;j++) {

            String[] cardStr = br.readLine().split("","");
            Card[] cardsArray = new Card[5];
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
//                    System.out.println(cardsArray[i].getSuit()+""\t""+cardsArray[i].getFace());
                }
                
            Hand handcard =new Hand(cardsArray);
            System.out.println(cardsArray[0].getFace());
            
            pqueue.insert(handcard);
                if(pqueue.size()>target){
                    pqueue.delMin();
                }
                
            }
            Card[] showcardsArray = new Card[5];
            showcardsArray=pqueue.min().getCards();
            System.out.println(showcardsArray[0].getSuit()+""_""+showcardsArray[0].getFace()+"",""+showcardsArray[1].getSuit()+""_""+showcardsArray[1].getFace()+"",""
                              +showcardsArray[2].getSuit()+""_""+showcardsArray[2].getFace()+"",""+showcardsArray[3].getSuit()+""_""+showcardsArray[3].getFace()+"",""
                              +showcardsArray[4].getSuit()+""_""+showcardsArray[4].getFace());
            
        }
    }
}

@6ee09114b3771ddd689175e75d86eaba@"
"r03522809","7","0.144285714285714","122912","@109f665fdbd73e426b23f7702c0d2bc8@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Dennis
 */
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int id=0;
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ<Hand> pqueue =new MinPQ<Hand>();
            for(int j=0;j<count;j++) {

            String[] cardStr = br.readLine().split("","");
            Card[] cardsArray = new Card[5];
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
//                    System.out.println(cardsArray[i].getSuit()+""\t""+cardsArray[i].getFace());
                }
                
            Hand handcard =new Hand(cardsArray);
//            System.out.println(cardsArray[0].getFace());
            
            pqueue.insert(handcard);
                if(pqueue.size()>target){
                    pqueue.delMin();
                }
                
            }
            Card[] showcardsArray = new Card[5];
            showcardsArray=pqueue.min().getCards();
            System.out.println(showcardsArray[0].getSuit()+""_""+showcardsArray[0].getFace()+"",""+showcardsArray[1].getSuit()+""_""+showcardsArray[1].getFace()+"",""
                              +showcardsArray[2].getSuit()+""_""+showcardsArray[2].getFace()+"",""+showcardsArray[3].getSuit()+""_""+showcardsArray[3].getFace()+"",""
                              +showcardsArray[4].getSuit()+""_""+showcardsArray[4].getFace());
            
        }
    }
}

@109f665fdbd73e426b23f7702c0d2bc8@"
"b03704074","7","0.221428571428571","122528","@d94a80cdc9e5bd17022600e6b8a81de4@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ  implements Comparable<HandPQ>{
    private Hand[] pq;
    //private Card[] cards = new Card[5];
    private int N ;
    public HandPQ(int capacity)
    {   N = 0;
        pq = new Hand[capacity+1];
    }
    public boolean isEmpty(){ return N == 0; }
    private void swim(int k){
        while (k > 1 && less(k/2, k)){
            exch(k, k/2);
            k  = k/2;}}
    public void insert(Hand x){
        pq[++N] = x;
        swim(N);
        if(N>50) delMin();}
    private void sink(int k){
        while (2*k <= N){
            int j = 2*k;
            if (j < N && less(j, j+1)) j++;
            if (!less(k, j)) break;
            exch(k, j);
            k = j;}}
    public Hand delMax(){
        Hand max = pq[1];
        exch(1, N--);
        sink(1);
        pq[N+1] = null;
        return max;}
    public void delMin(){
        int min = 1;
        for(int i = 2;i < N+1;i++){
            if(less(i,min))
                min = i;}
           exch(min,N);
           swim(min);
           pq[N] = null; 
           N--;}
    private boolean less(int i, int j)
    { return pq[i].compareTo(pq[j]) < 0; }
    private void exch(int i, int j)
    { Hand t = pq[i]; pq[i] = pq[j]; pq[j] = t; }
    

    public static void main(String[] args) throws Exception {
        
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            HandPQ handArray = new HandPQ(count);
            for(int i = 0;i < count ;i++){
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0;j < 5;j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1],sep[0]);
                    cardsArray[j] = card;}
                Hand singlehand = new Hand(cardsArray);
                handArray.insert(singlehand);}
            for(int i = 0;i<target-1;i++){
                handArray.delMax();}
            Hand ans = handArray.delMax();
            Card[] ans1 = ans.getCards();    
            
            System.out.println(ans1[0].getSuit()+""_""+ans1[0].getFace()+"",""+ans1[1].getSuit()+""_""+ans1[1].getFace()+"",""
            +ans1[2].getSuit()+""_""+ans1[2].getFace()+"","" +ans1[3].getSuit()+""_""+ans1[3].getFace()+"","" +ans1[4].getSuit()+""_""+ans1[4].getFace());
            

        }
    }

    @Override
    public int compareTo(HandPQ t) {
        throw new UnsupportedOperationException(""Not supported yet.""); //To change body of generated methods, choose Tools | Templates.
    }
}


@d94a80cdc9e5bd17022600e6b8a81de4@"
"r04631013","0","1.13","124368","@826bae2bc1f5a2bb421dad18818785c5@public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ<Hand> pq = new MinPQ<Hand>();
            for (String in = br.readLine(); in != null; in = br.readLine()) {
               

                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
               Hand haha =  new Hand(cardsArray);
               pq.insert(haha);
               if (pq.size() > target){
               pq.delMin();
               }
             
            }
           Card[] a = new Card[5];
              a  = pq.delMin().getCards(); 
System.out.print(a[0].getSuit()+""_""+a[0].getFace()+"","");
System.out.print(a[1].getSuit()+""_""+a[1].getFace()+"","");
System.out.print(a[2].getSuit()+""_""+a[2].getFace()+"","");
System.out.print(a[3].getSuit()+""_""+a[3].getFace()+"","");
System.out.print(a[4].getSuit()+""_""+a[4].getFace());
            

        }
    }
}
@826bae2bc1f5a2bb421dad18818785c5@"
"r04631013","7","0.142857142857143","118784","@353c30f4651b103c60f6b26d3e2535bf@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ<Hand> pq = new MinPQ<Hand>();
            for (String in = br.readLine(); in != null; in = br.readLine()) {
               

                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
               Hand haha =  new Hand(cardsArray);
               pq.insert(haha);
               if (pq.size() > target){
               pq.delMin();
               }
             
            }
           Card[] a = new Card[5];
              a  = pq.delMin().getCards(); 
System.out.print(a[0].getSuit()+""_""+a[0].getFace()+"","");
System.out.print(a[1].getSuit()+""_""+a[1].getFace()+"","");
System.out.print(a[2].getSuit()+""_""+a[2].getFace()+"","");
System.out.print(a[3].getSuit()+""_""+a[3].getFace()+"","");
System.out.print(a[4].getSuit()+""_""+a[4].getFace());
            

        }
    }
}

@353c30f4651b103c60f6b26d3e2535bf@"
"b99611017","0","1.01","119808","@cd61b2a456c230aa3e9561d3d53c781b@


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;

public class HandPQ {
    
    public static void main(String[] args) throws Exception {
        
        MinPQ<Hand> pq = new MinPQ<Hand>();
        
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int limit=target;
            for (int i=0;i<count;i++) {                
                Card[] cardsArray = new Card[5];
                String[] test1 = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    String[] sep = test1[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                Hand aa = new Hand(cardsArray);
                pq.insert(aa);
                if(pq.size()>target)
                {
                    pq.delMin();
                }
                
            }
            Card[] ans=pq.min().getCards();
            String[] suit=new String[ans.length];
            String[] face=new String[ans.length];
            for(int i=0;i<ans.length;i++)
            {
                suit[i]=ans[i].getSuit();
            }
            for(int i=0;i<ans.length;i++)
            {
                face[i]=ans[i].getFace();
            }
            String fin="""";
            for(int i=0;i<ans.length-1;i++)
            {
                fin=fin+suit[i]+""_""+face[i]+"","";
            }
            fin=fin+suit[suit.length-1]+""_""+face[face.length-1];
            String fpath=""D:\\PDSA\\Hand\\out.txt"";
            BufferedWriter fout=new BufferedWriter(new FileWriter(fpath));
            fout.write(fin);
            fout.newLine();
            fout.close();
        }
    }
}

@cd61b2a456c230aa3e9561d3d53c781b@"
"b99611017","7","0.144285714285714","116768","@3dd5f183d0e56db2a0c3392ada4b0386@


import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;

public class HandPQ {
    
    public static void main(String[] args) throws Exception {
        
        MinPQ<Hand> pq = new MinPQ<Hand>();
        
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int limit=target;
            for (int i=0;i<count;i++) {                
                Card[] cardsArray = new Card[5];
                String[] test1 = br.readLine().split("","");
                for (int j = 0; j < 5; j++) {
                    String[] sep = test1[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                Hand aa = new Hand(cardsArray);
                pq.insert(aa);
                if(pq.size()>target)
                {
                    pq.delMin();
                }
                
            }
            Card[] ans=pq.min().getCards();
            String[] suit=new String[ans.length];
            String[] face=new String[ans.length];
            for(int i=0;i<ans.length;i++)
            {
                suit[i]=ans[i].getSuit();
            }
            for(int i=0;i<ans.length;i++)
            {
                face[i]=ans[i].getFace();
            }
            String fin="""";
            for(int i=0;i<ans.length-1;i++)
            {
                fin=fin+suit[i]+""_""+face[i]+"","";
            }
            fin=fin+suit[suit.length-1]+""_""+face[face.length-1];
            System.out.print(fin);
            String fpath=""D:\\PDSA\\Hand\\out.txt"";
            BufferedWriter fout=new BufferedWriter(new FileWriter(fpath));
            fout.write(fin);
            fout.newLine();
            fout.close();
        }
    }
}

@3dd5f183d0e56db2a0c3392ada4b0386@"
"r03525006","4","0.39","105648","@4c3726ee55a3851ca479a71e1f0a742a@import java.util.Arrays;
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Hand[] playerArray = new Hand[count];
            int idx = 0;
            for(String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand player = new Hand(cardsArray);
                playerArray[idx++] = player;
            }
            Arrays.sort(playerArray);
            Hand targetPlayer = playerArray[count-target];
            Card[] targetCard = targetPlayer.getCards();
            Arrays.sort(targetCard);
            String ans = """";
            for (int i = 0; i < 4; i++) {
                ans += targetCard[i].getSuit() + ""_"" + targetCard[i].getFace() + "","";
            }
            ans += targetCard[4].getSuit() + ""_"" + targetCard[4].getFace();
            System.out.println(ans);

        }
    }
}

@4c3726ee55a3851ca479a71e1f0a742a@"
"r04631025","0","0","0","@807d3f436e9274fd4f6ff8c7c87bfe07@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ implements Comparable<HandPQ>{
        
    public HandPQ(Card[] cards) {
        return;
    }
    
    public int compareTo(HandPQ that) {
        return 0;
    }
    
    
    public static void main(String[] args) throws Exception {
        MaxPQ<String> pq = new MaxPQ<String>();

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            while(true){
                String[] hand=br.readLine().split("","");
                
            }
            

        }
    }
}
@807d3f436e9274fd4f6ff8c7c87bfe07@"
"r04631025","7","0.145714285714286","121344","@748e5be693f7ea1b9d79f4099e2847f5@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int count1 = count ;

            MinPQ show1 = new MinPQ() ;
            Hand[] players = new Hand[1] ;
            int counter = 0 ;
            while(count != 0){
                String[] owncard = br.readLine().split("","") ;
                Card[] cards = new Card[5] ;
                for(int i = 0 ; i < 5 ; i++ ){
                    String[] eachcard = owncard[i].split(""_"");
                    cards[i] = new Card( eachcard[1] , eachcard[0] ) ;                    

                }
                players[0] = new Hand(cards) ;
                show1.insert(players[0]);
                if(show1.size()>target)
                    show1.delMin();

                count -- ;
                counter ++ ;
            }

            Hand finalans = Hand.class.cast(show1.delMin());
            Card[] fina = finalans.getCards() ;

                    for(int j = 0 ; j < 5 ; j++){
                    System.out.print(fina[j].getSuit()+
                            ""_""+
                            fina[j].getFace());
                    if(j!=4)
                        System.out.print("","") ;
                    
                    }

        }
    }
}

@748e5be693f7ea1b9d79f4099e2847f5@"
"r04631025","7","0.144285714285714","116848","@748e5be693f7ea1b9d79f4099e2847f5@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int count1 = count ;

            MinPQ show1 = new MinPQ() ;
            Hand[] players = new Hand[1] ;
            int counter = 0 ;
            while(count != 0){
                String[] owncard = br.readLine().split("","") ;
                Card[] cards = new Card[5] ;
                for(int i = 0 ; i < 5 ; i++ ){
                    String[] eachcard = owncard[i].split(""_"");
                    cards[i] = new Card( eachcard[1] , eachcard[0] ) ;                    

                }
                players[0] = new Hand(cards) ;
                show1.insert(players[0]);
                if(show1.size()>target)
                    show1.delMin();

                count -- ;
                counter ++ ;
            }

            Hand finalans = Hand.class.cast(show1.delMin());
            Card[] fina = finalans.getCards() ;

                    for(int j = 0 ; j < 5 ; j++){
                    System.out.print(fina[j].getSuit()+
                            ""_""+
                            fina[j].getFace());
                    if(j!=4)
                        System.out.print("","") ;
                    
                    }

        }
    }
}

@748e5be693f7ea1b9d79f4099e2847f5@"
"r04921012","0","0.3","101264","@20e5362002674f5c42cd1bd02f18e1b0@//package handpq;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.PriorityQueue;
import java.util.Queue;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        Queue<Hand> maxPQ;
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            maxPQ = new PriorityQueue<>();
            for (int i=0;i<count;i++){
                //br.readLine()
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0; j < 5; j++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand=new Hand(cardsArray);
                if (maxPQ.size()<=target)
                    maxPQ.add(hand);
                else{
                    Hand temp=maxPQ.peek();
                    if(Hand.compareTo(temp)>0){
                        maxPQ.poll();
                        maxPQ.add(hand);
                    }
                }
            }
        }
        Hand result=maxPQ.poll();
        for (Card cards:result.getCards())
            System.out.println(cards);
    }
}

@20e5362002674f5c42cd1bd02f18e1b0@"
"r04921012","0","0","0","@de4667e8b5aad98e73d947d135aaae3e@//package handpq;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.PriorityQueue;
import java.util.Queue;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        Queue<Hand> maxPQ;
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            maxPQ = new PriorityQueue<>();
            for (int i=0;i<count;i++){
                //br.readLine()
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0; j < 5; j++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand=new Hand(cardsArray);
                if (maxPQ.size()<=target)
                    maxPQ.add(hand);
                else{
                    Hand temp=maxPQ.peek();
                    if(hand.compareTo(temp)>0){
                        maxPQ.poll();
                        maxPQ.add(hand);
                    }
                }
            }
        }
        Hand result=maxPQ.poll();
        for (Card cards:result.getCards())
            System.out.println(cards);
    }
}

@de4667e8b5aad98e73d947d135aaae3e@"
"r04921012","0","0","0","@7e9202d9bc3e0be74699a9ccbc678374@//package handpq;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.PriorityQueue;
import java.util.Queue;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        Queue<Hand> maxPQ;
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            maxPQ = new PriorityQueue<>(1);
            for (int i=0;i<count;i++){
                //br.readLine()
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0; j < 5; j++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand=new Hand(cardsArray);
                if (maxPQ.size()<=target)
                    maxPQ.add(hand);
                else{
                    Hand temp=maxPQ.peek();
                    if(hand.compareTo(temp)>0){
                        maxPQ.poll();
                        maxPQ.add(hand);
                    }
                }
            }
        }
        Hand result=maxPQ.poll();
        for (Card cards:result.getCards())
            System.out.println(cards);
    }
}

@7e9202d9bc3e0be74699a9ccbc678374@"
"r04921012","0","0.99","114384","@3efc29466045f9b1f4ac04b077f90ac0@//package handpq;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.PriorityQueue;
import java.util.Queue;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        PriorityQueue<Hand> maxPQ;
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            maxPQ = new PriorityQueue<>(1);
            for (int i=0;i<count;i++){
                //br.readLine()
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0; j < 5; j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                Hand hand=new Hand(cardsArray);
                if (maxPQ.size()<=target)
                    maxPQ.add(hand);
                else{
                    Hand temp=maxPQ.peek();
                    if(hand.compareTo(temp)>0){
                        maxPQ.poll();
                        maxPQ.add(hand);
                    }
                }
            }
        }
        Hand result=maxPQ.poll();
        for (Card cards:result.getCards())
            System.out.println(cards);
    }
}

@3efc29466045f9b1f4ac04b077f90ac0@"
"r04921012","0","0","0","@13088c33669a2d64fb1fdd35c0a532a0@//package handpq;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.Queue;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        PriorityQueue<Hand> maxPQ;
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            maxPQ = new PriorityQueue<>(1);
            for (int i=0;i<count;i++){
                //br.readLine()
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0; j < 5; j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                Hand hand=new Hand(cardsArray);
                if (maxPQ.size()<=target)
                    maxPQ.add(hand);
                else{
                    Hand temp=maxPQ.peek();
                    if(hand.compareTo(temp)>0){
                        maxPQ.poll();
                        maxPQ.add(hand);
                    }
                }
            }
        }
        Hand result=maxPQ.poll();
        Arrays.sort(result);
        for (Card cards:result.getCards())
            System.out.println(cards);
    }
}

@13088c33669a2d64fb1fdd35c0a532a0@"
"r04921012","0","1.03","119616","@22142a4b7405ac7cae01e3a6de7fb8fb@//package handpq;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.Queue;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        PriorityQueue<Hand> maxPQ;
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            maxPQ = new PriorityQueue<>(1);
            for (int i=0;i<count;i++){
                //br.readLine()
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0; j < 5; j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                Hand hand=new Hand(cardsArray);
                if (maxPQ.size()<=target)
                    maxPQ.add(hand);
                else{
                    Hand temp=maxPQ.peek();
                    if(hand.compareTo(temp)>0){
                        maxPQ.poll();
                        maxPQ.add(hand);
                    }
                }
            }
        }
        Card[] result=maxPQ.poll().getCards();
        Arrays.sort(result);
        for (Card cards:result)
            System.out.println(cards);
    }
}

@22142a4b7405ac7cae01e3a6de7fb8fb@"
"r04921012","0","0.97","118384","@22142a4b7405ac7cae01e3a6de7fb8fb@//package handpq;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.Queue;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        PriorityQueue<Hand> maxPQ;
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            maxPQ = new PriorityQueue<>(1);
            for (int i=0;i<count;i++){
                //br.readLine()
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0; j < 5; j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                Hand hand=new Hand(cardsArray);
                if (maxPQ.size()<=target)
                    maxPQ.add(hand);
                else{
                    Hand temp=maxPQ.peek();
                    if(hand.compareTo(temp)>0){
                        maxPQ.poll();
                        maxPQ.add(hand);
                    }
                }
            }
        }
        Card[] result=maxPQ.poll().getCards();
        Arrays.sort(result);
        for (Card cards:result)
            System.out.println(cards);
    }
}

@22142a4b7405ac7cae01e3a6de7fb8fb@"
"r03525006","7","0.144285714285714","119408","@b528d6dab96485a7ad23078e71f01f5b@import java.util.Arrays;
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {
    int N;
    Hand[] pq;

    HandPQ (){
        N = 0;
        pq = new Hand[10];
    }

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ<Hand> pq = new MinPQ<Hand>();
            for (int line = 0 ; line < count ; line++ ){
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand hand = new Hand(cardsArray);
                pq.insert(hand);
                if (pq.size() > target){
                    pq.delMin();
                }
            }
            Card[] targetCard = pq.delMin().getCards();
            Arrays.sort(targetCard);
            String ans = """";
            for (int i = 0; i < 4; i++) {
                ans += targetCard[i].getSuit() + ""_"" + targetCard[i].getFace() + "","";
            }
            ans += targetCard[4].getSuit() + ""_"" + targetCard[4].getFace();
            System.out.println(ans);
        }
    }
}

@b528d6dab96485a7ad23078e71f01f5b@"
"r04921012","1","0.98","119168","@dc49bf380c3f2de16e7128c4705ae9de@//package handpq;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.Queue;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        PriorityQueue<Hand> maxPQ;
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            maxPQ = new PriorityQueue<>(1);
            for (int i=0;i<count;i++){
                //br.readLine()
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0; j < 5; j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                Hand hand=new Hand(cardsArray);
                if (maxPQ.size()<=target)
                    maxPQ.add(hand);
                else{
                    Hand temp=maxPQ.peek();
                    if(hand.compareTo(temp)>0){
                        maxPQ.poll();
                        maxPQ.add(hand);
                    }
                }
            }
        }
        Card[] result=maxPQ.poll().getCards();
        Arrays.sort(result);
        
        System.out.println(result[0].getSuit()+""_""+result[0].getFace()+"",""+result[1].getSuit()+""_""+result[1].getFace()+"",""+result[2].getSuit()+""_""+result[2].getFace()+"",""+result[3].getSuit()+""_""+result[3].getFace()+"",""+result[4].getSuit()+""_""+result[4].getFace());
    }
}

@dc49bf380c3f2de16e7128c4705ae9de@"
"r04921105","0","0.4","106304","@73487bf0831b02d10a7149a12f281b08@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){           
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx=0; 
                //System.out.printf(""count=""+count+"","");
                //System.out.println(""target=""+target);
            Hand[] hands = new Hand[count];            
            MaxPQ<Hand> pq = new MaxPQ<Hand>() ;            
                //read file
              for(String in = br.readLine(); in != null; in = br.readLine()) {
                String[] cardStr = in.split("","");
                Card[] cardsArray = new Card[5];
                //file to card               
                for(int i = 0; i < 5
                        ; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;                      
                    //System.out.printf(""_""+cardsArray.length); 
                }//end of loading 5 cards                  
                //System.out.printf(""=====""+cardsArray[1].getFace()+"",""+cardsArray[1].getSuit()+""====="");
                //print card
                /*印card
                for(int i =0;i<cardsArray.length;i++){
                    System.out.printf(""(""+cardsArray[i].getSuit()+"",""+cardsArray[i].getFace()+"")"");
                }
                    System.out.print(""\n"");                   
                 //
                */
               Hand hand=new Hand(cardsArray);
                hands[idx]=hand;
                idx++;
                }//end of reading a in
              //print hands
              Card[] check = new Card[5];
              //System.out.println(pq.size());
              for(int i=0;i<hands.length;i++){
                  check=hands[i].getCards();
                  for(int x =0;x<check.length;x++){
                    //System.out.printf(""[""+check[x].getSuit()+"",""+check[x].getFace()+""]"");
                }
                   // System.out.print(""\n"");
                }
              //print hands^
              //insert hand into pq
              
              Card[] insertcard = new Card[5];
              
              for (int i=0;i<hands.length;i++){
                  pq.insert(hands[i]);/*
                  insertcard=hands[i].getCards();
                  Arrays.sort(insertcard);
                  for(int x=0;x<target;x++){
                  System.out.printf(""insert:(""+checkcard[x].getSuit()+"",""+checkcard[x].getFace()+"")"");
                 
                  }
                  System.out.print(""*******"");
                  System.out.print(""\n"");  */                
              }
                                         
              
             //Card[] mincard = new Card[5]; 
             /*
              for(int i=0;i<pq.size();i++){
                  System.out.println(pq.size()); 
                  mincard = pq.max().getCards();                                
                    for(int j =0;j<mincard.length;j++){
                        System.out.printf(""<<""+mincard[j].getSuit()+"",""+mincard[j].getFace()+"">>"");
                     }
                     System.out.print(""\n"");
                     pq.delMax();
                    if(pq.size()==2){
                      mincard = pq.max().getCards();                                
                         for(int j =0;j<mincard.length;j++){
                            System.out.printf(""<<""+mincard[j].getSuit()+"",""+mincard[j].getFace()+"">>"");
                        }
                    }                     
              }
              */
              
            
              
              Card[] anscard = new Card[5];
              for(int i =0;i<target-1;i++){
                  pq.delMax();
              }
              anscard=pq.max().getCards();
              for(int i=0;i<anscard.length;i++){
                  
                  System.out.printf(anscard[i].getSuit()+""_""+anscard[i].getFace()+"","");
              }
              
              
          
              
              
                
              
              
              
                    
               
                
                
              
              
                
                
//            MinPQ pq = new MinPQ(playerArray);
            //////讀取input,把hand排序好,存入pq,del min(target),output the target////// 
          
           
            
             
            
        }
    }
}

@73487bf0831b02d10a7149a12f281b08@"
"r04921105","0","0.42","106304","@2d2c7377a6a231de51a5e663862329f6@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){           
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx=0; 
                //System.out.printf(""count=""+count+"","");
                //System.out.println(""target=""+target);
            Hand[] hands = new Hand[count];            
            MinPQ<Hand> pq = new MinPQ<Hand>() ;            
                //read file
              for(String in = br.readLine(); in != null; in = br.readLine()) {
                String[] cardStr = in.split("","");
                Card[] cardsArray = new Card[5];
                //file to card               
                for(int i = 0; i < 5
                        ; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;                      
                    //System.out.printf(""_""+cardsArray.length); 
                }//end of loading 5 cards                  
                //System.out.printf(""=====""+cardsArray[1].getFace()+"",""+cardsArray[1].getSuit()+""====="");
                //print card
                /*印card
                for(int i =0;i<cardsArray.length;i++){
                    System.out.printf(""(""+cardsArray[i].getSuit()+"",""+cardsArray[i].getFace()+"")"");
                }
                    System.out.print(""\n"");                   
                 //
                */
               Hand hand=new Hand(cardsArray);
                hands[idx]=hand;
                idx++;
                }//end of reading a in
              //print hands
              Card[] check = new Card[5];
              //System.out.println(pq.size());
              for(int i=0;i<hands.length;i++){
                  check=hands[i].getCards();
                  for(int x =0;x<check.length;x++){
                    //System.out.printf(""[""+check[x].getSuit()+"",""+check[x].getFace()+""]"");
                }
                   // System.out.print(""\n"");
                }
              //print hands^
              //insert hand into pq
              
              Card[] insertcard = new Card[5];
              
              for (int i=0;i<hands.length;i++){
                  pq.insert(hands[i]);
                  if(pq.size()>target)
                        pq.delMin();/*
                  insertcard=hands[i].getCards();
                  Arrays.sort(insertcard);
                  for(int x=0;x<target;x++){
                  System.out.printf(""insert:(""+checkcard[x].getSuit()+"",""+checkcard[x].getFace()+"")"");
                 
                  }
                  System.out.print(""*******"");
                  System.out.print(""\n"");  */                
              }
                                         
              
             //Card[] mincard = new Card[5]; 
             /*
              for(int i=0;i<pq.size();i++){
                  System.out.println(pq.size()); 
                  mincard = pq.max().getCards();                                
                    for(int j =0;j<mincard.length;j++){
                        System.out.printf(""<<""+mincard[j].getSuit()+"",""+mincard[j].getFace()+"">>"");
                     }
                     System.out.print(""\n"");
                     pq.delMax();
                    if(pq.size()==2){
                      mincard = pq.max().getCards();                                
                         for(int j =0;j<mincard.length;j++){
                            System.out.printf(""<<""+mincard[j].getSuit()+"",""+mincard[j].getFace()+"">>"");
                        }
                    }                     
              }
              */
              
            
              
              Card[] anscard = new Card[5];
              
             
              
              anscard=pq.min().getCards();
              for(int i=0;i<anscard.length;i++){
                  
                  System.out.printf(anscard[i].getSuit()+""_""+anscard[i].getFace()+"","");
              }
              
              
          
              
              
                
              
              
              
                    
               
                
                
              
              
                
                
//            MinPQ pq = new MinPQ(playerArray);
            //////讀取input,把hand排序好,存入pq,del min(target),output the target////// 
          
           
            
             
            
        }
    }
}

@2d2c7377a6a231de51a5e663862329f6@"
"r04631036","7","0.147142857142857","117664","@c9fb9617b41e03a93990aeab2fc38fa4@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int count1 = count ;
            MaxPQ show = new MaxPQ() ;
            MinPQ show1 = new MinPQ() ;
            Hand[] players = new Hand[1] ;
            int counter = 0 ;
            while(count != 0){
                String[] owncard = br.readLine().split("","") ;
                Card[] cards = new Card[5] ;
                for(int i = 0 ; i < 5 ; i++ ){
                    String[] eachcard = owncard[i].split(""_"");
                    cards[i] = new Card( eachcard[1] , eachcard[0] ) ;                    
//                    System.out.println(cards[i].getFace() + """" +cards[i].getSuit());
                }
                players[0] = new Hand(cards) ;
                show1.insert(players[0]);
                if(show1.size()>target)
                    show1.delMin();
//                owncard[count].split(""_"") ;
//                System.out.println(owncard) ;
                count -- ;
                counter ++ ;
            }

            Hand finalans = Hand.class.cast(show1.delMin()) ;
            Card[] fina = finalans.getCards() ;
//            Class clax = show1.delMin().getClass().asSubclass(null);
////            Hand[] finalshow = clax.cast(show1.delMin()) ;
//            Hand ff = clax.cast(show1.delMin()) ;
//            System.out.println( finalans) ;
            
//            for(int i = 0 ; i <count1 ; i++){
//                if(answer1.equals(players[i]))
                    for(int j = 0 ; j < 5 ; j++){
                    System.out.print(fina[j].getSuit()+
                            ""_""+
                            fina[j].getFace());
                    if(j!=4)
                        System.out.print("","") ;
                    
                    }
//            }
//            
//            while(target!=1){
//                show.delMax();
//                target-- ;
//            }
//         Object answer = show.delMax();
//         for(int i= 0 ; i < count1 ; i++){
//            if(answer.equals(players[i]))
//              for(int j = 0 ; j < 5 ; j++){
//                    System.out.print(players[i].getCards()[j].getSuit()+
//                            ""_""+
//                            players[i].getCards()[j].getFace()) ;
//                    if(j!=4)
//                        System.out.print("","") ;
//                }
//        }
        }
    }
}
@c9fb9617b41e03a93990aeab2fc38fa4@"
"r04921012","7","0.14","116496","@3a7367612952affa963ba219f4698e74@//package handpq;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.Queue;

public class HandPQ {

    public static void main(String[] args) throws Exception {
        PriorityQueue<Hand> maxPQ;
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            maxPQ = new PriorityQueue<>(1);
            for (int i=0;i<count;i++){
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for(int j = 0; j < 5; j++){
                    String[] sep = cardStr[j].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[j] = card;
                }
                Hand hand=new Hand(cardsArray);
                if (maxPQ.size()<target)
                    maxPQ.add(hand);
                else{
                    Hand temp=maxPQ.peek();
                    if(hand.compareTo(temp)>0){
                        maxPQ.poll();
                        maxPQ.add(hand);
                    }
                }
            }
        }
        Card[] result=maxPQ.poll().getCards();
        Arrays.sort(result);
        
        System.out.println(result[0].getSuit()+""_""+result[0].getFace()+"",""+result[1].getSuit()+""_""+result[1].getFace()+"",""+result[2].getSuit()+""_""+result[2].getFace()+"",""+result[3].getSuit()+""_""+result[3].getFace()+"",""+result[4].getSuit()+""_""+result[4].getFace());
    }
}

@3a7367612952affa963ba219f4698e74@"
"r04921105","0","0.4","106352","@93a022b0884256cd4980110bd06a71e2@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){           
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx=0; 
                //System.out.printf(""count=""+count+"","");
                //System.out.println(""target=""+target);
            Hand[] hands = new Hand[count];            
            MinPQ<Hand> pq = new MinPQ<Hand>() ;            
                //read file
              for(String in = br.readLine(); in != null; in = br.readLine()) {
                String[] cardStr = in.split("","");
                Card[] cardsArray = new Card[5];
                //file to card               
                for(int i = 0; i < 5
                        ; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;                      
                    //System.out.printf(""_""+cardsArray.length); 
                }//end of loading 5 cards                  
                //System.out.printf(""=====""+cardsArray[1].getFace()+"",""+cardsArray[1].getSuit()+""====="");
                //print card
                /*印card
                for(int i =0;i<cardsArray.length;i++){
                    System.out.printf(""(""+cardsArray[i].getSuit()+"",""+cardsArray[i].getFace()+"")"");
                }
                    System.out.print(""\n"");                   
                 //
                */
               Hand hand=new Hand(cardsArray);
                hands[idx]=hand;
                idx++;
                }//end of reading a in
              //print hands
              Card[] checkhand = new Card[5];
              //System.out.println(pq.size());
              for(int i=0;i<hands.length;i++){
                  checkhand=hands[i].getCards();
                  for(int x =0;x<checkhand.length;x++){
                    //System.out.printf(""[""+checkhand[x].getSuit()+"",""+checkhand[x].getFace()+""]"");
                }
                   //System.out.print(""\n"");
                }
              //print hands^
              //insert hand into pq
              
              Card[] insertcard = new Card[5];
              
              for (int i=0;i<hands.length;i++){
                  pq.insert(hands[i]);
                  if(pq.size()>target)
                        pq.delMin();/*
                  insertcard=hands[i].getCards();
                  Arrays.sort(insertcard);
                  for(int x=0;x<target;x++){
                  System.out.printf(""insert:(""+checkcard[x].getSuit()+"",""+checkcard[x].getFace()+"")"");                
                  }
                  System.out.print(""*******"");
                  System.out.print(""\n"");  */                
              }
                                         
              
             //Card[] mincard = new Card[5]; 
             /*
              for(int i=0;i<pq.size();i++){
                  System.out.println(pq.size()); 
                  mincard = pq.max().getCards();                                
                    for(int j =0;j<mincard.length;j++){
                        System.out.printf(""<<""+mincard[j].getSuit()+"",""+mincard[j].getFace()+"">>"");
                     }
                     System.out.print(""\n"");
                     pq.delMax();
                    if(pq.size()==2){
                      mincard = pq.max().getCards();                                
                         for(int j =0;j<mincard.length;j++){
                            System.out.printf(""<<""+mincard[j].getSuit()+"",""+mincard[j].getFace()+"">>"");
                        }
                    }                     
              }
              */
              
                          
              Card[] anscard = new Card[5];             
              anscard=pq.min().getCards();
              Arrays.sort(anscard);
              for(int i=0;i<anscard.length;i++){                 
                  System.out.printf(anscard[i].getSuit()+""_""+anscard[i].getFace()+"","");
              }
              
              
          
              
              
                
              
              
              
                    
               
                
                
              
              
                
                
//            MinPQ pq = new MinPQ(playerArray);
            //////讀取input,把hand排序好,存入pq,del min(target),output the target////// 
          
           
            
             
            
        }
    }
}

@93a022b0884256cd4980110bd06a71e2@"
"r04921105","4","0.39","104016","@67bcd7d2acb6e27479a7ad959e0d39b2@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){           
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx=0; 
                //System.out.printf(""count=""+count+"","");
                //System.out.println(""target=""+target);
            Hand[] hands = new Hand[count];            
            MinPQ<Hand> pq = new MinPQ<Hand>() ;            
                //read file
              for(String in = br.readLine(); in != null; in = br.readLine()) {
                String[] cardStr = in.split("","");
                Card[] cardsArray = new Card[5];
                //file to card               
                for(int i = 0; i < 5
                        ; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;                      
                    //System.out.printf(""_""+cardsArray.length); 
                }//end of loading 5 cards                  
                //System.out.printf(""=====""+cardsArray[1].getFace()+"",""+cardsArray[1].getSuit()+""====="");
                //print card
                /*印card
                for(int i =0;i<cardsArray.length;i++){
                    System.out.printf(""(""+cardsArray[i].getSuit()+"",""+cardsArray[i].getFace()+"")"");
                }
                    System.out.print(""\n"");                   
                 //
                */
               Hand hand=new Hand(cardsArray);
                hands[idx]=hand;
                idx++;
                }//end of reading a in
              //print hands
              Card[] checkhand = new Card[5];
              //System.out.println(pq.size());
              for(int i=0;i<hands.length;i++){
                  checkhand=hands[i].getCards();
                  Arrays.sort(checkhand);
                  for(int x =0;x<checkhand.length;x++){
                   //System.out.printf(""[""+checkhand[x].getSuit()+"",""+checkhand[x].getFace()+""]"");
                }
                   //System.out.print(""\n"");
                }
              //print hands^
              //insert hand into pq
              
              Card[] insertcard = new Card[5];
              
              for (int i=0;i<hands.length;i++){
                  pq.insert(hands[i]);
                  if(pq.size()>target)
                        pq.delMin();/*
                  insertcard=hands[i].getCards();
                  Arrays.sort(insertcard);
                  for(int x=0;x<target;x++){
                  System.out.printf(""insert:(""+checkcard[x].getSuit()+"",""+checkcard[x].getFace()+"")"");                
                  }
                  System.out.print(""*******"");
                  System.out.print(""\n"");  */                
              }
                                         
              
             //Card[] mincard = new Card[5]; 
             /*
              for(int i=0;i<pq.size();i++){
                  System.out.println(pq.size()); 
                  mincard = pq.max().getCards();                                
                    for(int j =0;j<mincard.length;j++){
                        System.out.printf(""<<""+mincard[j].getSuit()+"",""+mincard[j].getFace()+"">>"");
                     }
                     System.out.print(""\n"");
                     pq.delMax();
                    if(pq.size()==2){
                      mincard = pq.max().getCards();                                
                         for(int j =0;j<mincard.length;j++){
                            System.out.printf(""<<""+mincard[j].getSuit()+"",""+mincard[j].getFace()+"">>"");
                        }
                    }                     
              }
              */
              
                          
              Card[] anscard = new Card[5];             
              anscard=pq.min().getCards();
              Arrays.sort(anscard);
              int x =anscard.length;
              for(int i=0;i<x-1;i++){                 
                  System.out.printf(anscard[i].getSuit()+""_""+anscard[i].getFace()+"","");           
              }
              System.out.printf(anscard[x-1].getSuit()+""_""+anscard[x-1].getFace());
 
        }
    }
}

@67bcd7d2acb6e27479a7ad959e0d39b2@"
"r04921105","4","0.4","106272","@ce0d60fc8eefb91b89a60699f99587a7@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){           
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx=0; 
                //System.out.printf(""count=""+count+"","");
                //System.out.println(""target=""+target);
            Hand[] hands = new Hand[count];            
            MinPQ<Hand> pq = new MinPQ<Hand>() ;            
                //read file
              for(String in = br.readLine(); in != null; in = br.readLine()) {
                String[] cardStr = in.split("","");
                Card[] cardsArray = new Card[5];
                //file to card               
                for(int i = 0; i < 5
                        ; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;                      
                    //System.out.printf(""_""+cardsArray.length); 
                }//end of loading 5 cards                  
                //System.out.printf(""=====""+cardsArray[1].getFace()+"",""+cardsArray[1].getSuit()+""====="");
                //print card
                /*印card
                for(int i =0;i<cardsArray.length;i++){
                    System.out.printf(""(""+cardsArray[i].getSuit()+"",""+cardsArray[i].getFace()+"")"");
                }
                    System.out.print(""\n"");                   
                 //
                */
               Hand hand=new Hand(cardsArray);
                hands[idx]=hand;
                idx++;
                }//end of reading a in
              //print hands
              Card[] checkhand = new Card[5];
              //System.out.println(pq.size());
              for(int i=0;i<hands.length;i++){
                  checkhand=hands[i].getCards();
                  Arrays.sort(checkhand);
                  for(int x =0;x<checkhand.length;x++){
                   //System.out.printf(""[""+checkhand[x].getSuit()+"",""+checkhand[x].getFace()+""]"");
                }
                   //System.out.print(""\n"");
                }
              //print hands^
              //insert hand into pq
              
              Card[] insertcard = new Card[5];
              
              for (int i=0;i<hands.length;i++){
                  pq.insert(hands[i]);
                  //insertcard=hands[i].getCards();
                  //Arrays.sort(insertcard);
                  
                  //for(int x=0;x<insertcard.length;x++){
                  //System.out.printf(""insert:(""+insertcard[x].getSuit()+"",""+insertcard[x].getFace()+"")"");                
                  //}//end of print insert card
                  //System.out.print(""*******"");
                  //System.out.print(""\n"");
                  //System.out.printf(""pqsize:""+pq.size());
                  //System.out.print(""\n"");
                  if(pq.size()>target){
                      //Card[] mincard=new Card[5];
                      //mincard = pq.min().getCards();
                      /*
                      System.out.println(""刪除min hand:"");
                      for(int j=0;j<mincard.length;j++){                 
                  System.out.printf(mincard[j].getSuit()+""_""+mincard[j].getFace()+"","");           
                } 
                 */     
                        pq.delMin();
                        //System.out.printf(""刪除後pqsize:""+pq.size());
                        //System.out.print(""\n"");
                        
                        
                    }//end of keep pq size =3                   
              }// end of insert hand
               //System.out.printf(""pqsize:""+pq.size());                          
              
             //Card[] mincard = new Card[5]; 
             /*
              for(int i=0;i<pq.size();i++){
                  System.out.println(pq.size()); 
                  mincard = pq.max().getCards();                                
                    for(int j =0;j<mincard.length;j++){
                        System.out.printf(""<<""+mincard[j].getSuit()+"",""+mincard[j].getFace()+"">>"");
                     }
                     System.out.print(""\n"");
                     pq.delMax();
                    if(pq.size()==2){
                      mincard = pq.max().getCards();                                
                         for(int j =0;j<mincard.length;j++){
                            System.out.printf(""<<""+mincard[j].getSuit()+"",""+mincard[j].getFace()+"">>"");
                        }
                    }                     
              }
              */
              
              //System.out.print(""\n"");            
              Card[] anscard = new Card[5];             
              anscard=pq.min().getCards();
              Arrays.sort(anscard);
              int x =anscard.length;
              for(int i=0;i<x-1;i++){                 
                  System.out.printf(anscard[i].getSuit()+""_""+anscard[i].getFace()+"","");           
              }
              System.out.printf(anscard[x-1].getSuit()+""_""+anscard[x-1].getFace());
 
        }
    }
}

@ce0d60fc8eefb91b89a60699f99587a7@"
"r04631009","7","0.147142857142857","114272","@bdc640dfe132f6b185bc454c1317df72@import java.io.BufferedReader;
import java.io.FileReader;	
public class HandPQ {
      public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Card[] ans=new Card[5];
            MinPQ<Hand> thisgame=new MinPQ<Hand>();
            for (int i=0 ; i<count ; i++){
                String[] player=br.readLine().split("","");
                Card[] cards=new Card[5];
                for (int j=0 ; j<5 ; j++){
                    String[] temp=player[j].split(""_"");
                    cards[j]= new Card(temp[1],temp[0]);
                }
                Hand game=new Hand(cards);
                thisgame.insert(game);
                if (thisgame.size()>target)
                    thisgame.delMin();
            }
                    ans=thisgame.delMin().getCards();
            for (int i=0 ; i<4 ; i++)
                System.out.print(ans[i].getSuit()+""_""+ans[i].getFace()+"","");
                System.out.print(ans[4].getSuit()+""_""+ans[4].getFace());
         }
    }
}
@bdc640dfe132f6b185bc454c1317df72@"
"d04631001","7","0.141428571428571","119056","@2fa51f10c8ae4ccfba949bde40243ce3@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ<Hand> pq = new MinPQ<Hand>();
            for (int j = 0; j < count; j++) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                Hand test = new Hand(cardsArray);

                pq.insert(test);
                if (pq.size() > target) {
                    pq.delMin();
                }
            }
            Hand target_hand = pq.delMin();
            Card[] to = target_hand.getCards();
            System.out.println(to[0].getSuit() + ""_"" + to[0].getFace() + "","" + to[1].getSuit() + ""_"" + to[1].getFace() + "","" + to[2].getSuit() + ""_"" + to[2].getFace() + "","" + to[3].getSuit() + ""_"" + to[3].getFace() + "","" + to[4].getSuit() + ""_"" + to[4].getFace());

        }
    }
}

@2fa51f10c8ae4ccfba949bde40243ce3@"
"r04921105","4","0.4","106336","@acb484d13066533114176ae5cb5d4e22@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){           
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx=0; 
                //System.out.printf(""count=""+count+"","");
                //System.out.println(""target=""+target);
            Hand[] hands = new Hand[count];            
            MinPQ<Hand> pq = new MinPQ<Hand>() ;            
                //read file
              for(String in = br.readLine(); in != null; in = br.readLine()) {
                String[] cardStr = in.split("","");
                Card[] cardsArray = new Card[5];
                //file to card               
                for(int i = 0; i < 5
                        ; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;                      
                    //System.out.printf(""_""+cardsArray.length); 
                }//end of loading 5 cards                  
                //System.out.printf(""=====""+cardsArray[1].getFace()+"",""+cardsArray[1].getSuit()+""====="");
                //print card
                /*印card
                for(int i =0;i<cardsArray.length;i++){
                    System.out.printf(""(""+cardsArray[i].getSuit()+"",""+cardsArray[i].getFace()+"")"");
                }
                    System.out.print(""\n"");                   
                 //
                */
               Hand hand=new Hand(cardsArray);
                hands[idx]=hand;
                idx++;
                }//end of reading a in
              //print hands
              Card[] checkhand = new Card[5];
              //System.out.println(pq.size());
              for(int i=0;i<hands.length;i++){
                  checkhand=hands[i].getCards();
                  Arrays.sort(checkhand);
                  for(int x =0;x<checkhand.length;x++){
                   //System.out.printf(""[""+checkhand[x].getSuit()+"",""+checkhand[x].getFace()+""]"");
                }
                   //System.out.print(""\n"");
                }
              //print hands^
              //insert hand into pq
              
              Card[] insertcard = new Card[5];
              //insert hand to pq
              for (int i=0;i<hands.length;i++){
                  //System.out.println(""pqsize:""+pq.size());
                  pq.insert(hands[i]);
                   
                  //insertcard=hands[i].getCards();
                  //Arrays.sort(insertcard);
                  
                  //for(int x=0;x<insertcard.length;x++){
                  //System.out.printf(""insert:(""+insertcard[x].getSuit()+"",""+insertcard[x].getFace()+"")"");                
                  //}//end of print insert card
                  //System.out.print(""*******"");
                  //System.out.print(""\n"");
                  //System.out.printf(""pqsize:""+pq.size());
                  //System.out.print(""\n"");
                  if(pq.size()>target){
                      //Card[] mincard=new Card[5];
                      //mincard = pq.min().getCards();
                      
                      //System.out.println(""刪除min hand:"");
                      //for(int j=0;j<mincard.length;j++){                 
                        //System.out.printf(mincard[j].getSuit()+""_""+mincard[j].getFace()+"","");           
                       //} 
                      
                        pq.delMin();//System.out.println(""delmin,size to""+pq.size()); 
                        //System.out.printf(""刪除後pqsize:""+pq.size());
                        //System.out.print(""\n"");
                        
                        
                    }//end of keep pq size =3                   
              }// end of insert hand
               //System.out.printf(""pqsize:""+pq.size());                          
              
             //Card[] mincard = new Card[5]; 
             /*
              for(int i=0;i<pq.size();i++){
                  System.out.println(pq.size()); 
                  mincard = pq.max().getCards();                                
                    for(int j =0;j<mincard.length;j++){
                        System.out.printf(""<<""+mincard[j].getSuit()+"",""+mincard[j].getFace()+"">>"");
                     }
                     System.out.print(""\n"");
                     pq.delMax();
                    if(pq.size()==2){
                      mincard = pq.max().getCards();                                
                         for(int j =0;j<mincard.length;j++){
                            System.out.printf(""<<""+mincard[j].getSuit()+"",""+mincard[j].getFace()+"">>"");
                        }
                    }                     
              }
              */
              
                //System.out.print(""\n"");            
              Card[] anscard = new Card[5];             
              anscard=pq.min().getCards();
              Arrays.sort(anscard);
              int x =anscard.length;
              for(int i=0;i<x-1;i++){                 
                  System.out.printf(anscard[i].getSuit()+""_""+anscard[i].getFace()+"","");           
              }
              System.out.printf(anscard[x-1].getSuit()+""_""+anscard[x-1].getFace()+""\n"");
 
        }
    }
}

@acb484d13066533114176ae5cb5d4e22@"
"r04921105","7","0.145714285714286","119744","@ece92ea3f9509dc7c204ae353b442f8b@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){           
            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            int idx=0; 
                //System.out.printf(""count=""+count+"","");
                //System.out.println(""target=""+target);
            Hand[] hands = new Hand[1];            
            MinPQ<Hand> pq = new MinPQ<Hand>() ;            
                //read file
              for(String in = br.readLine(); in != null; in = br.readLine()) {
                String[] cardStr = in.split("","");
                Card[] cardsArray = new Card[5];
                //file to card               
                for(int i = 0; i < 5
                        ; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;                      
                    //System.out.printf(""_""+cardsArray.length); 
                }//end of loading 5 cards                  
                //System.out.printf(""=====""+cardsArray[1].getFace()+"",""+cardsArray[1].getSuit()+""====="");
                //print card
                /*印card
                for(int i =0;i<cardsArray.length;i++){
                    System.out.printf(""(""+cardsArray[i].getSuit()+"",""+cardsArray[i].getFace()+"")"");
                }
                    System.out.print(""\n"");                   
                 //
                */
               hands[0] =new Hand(cardsArray);

                //end of reading a in
              //print hands
              //Card[] checkhand = new Card[5];
              //System.out.println(pq.size());
              /*
              for(int i=0;i<hands.length;i++){
                  checkhand=hands[i].getCards();
                  Arrays.sort(checkhand);
                  for(int x =0;x<checkhand.length;x++){
                   //System.out.printf(""[""+checkhand[x].getSuit()+"",""+checkhand[x].getFace()+""]"");
                }
                   //System.out.print(""\n"");
                }
              */
              //print hands^
              //insert hand into pq
              
              //Card[] insertcard = new Card[5];
              //insert hand to pq
              
                  //System.out.println(""pqsize:""+pq.size());
                  pq.insert(hands[0]);
                   
                  //insertcard=hands[i].getCards();
                  //Arrays.sort(insertcard);
                  
                  //for(int x=0;x<insertcard.length;x++){
                  //System.out.printf(""insert:(""+insertcard[x].getSuit()+"",""+insertcard[x].getFace()+"")"");                
                  //}//end of print insert card
                  //System.out.print(""*******"");
                  //System.out.print(""\n"");
                  //System.out.printf(""pqsize:""+pq.size());
                  //System.out.print(""\n"");
                  if(pq.size()>target){
                      //Card[] mincard=new Card[5];
                      //mincard = pq.min().getCards();
                      
                      //System.out.println(""刪除min hand:"");
                      //for(int j=0;j<mincard.length;j++){                 
                        //System.out.printf(mincard[j].getSuit()+""_""+mincard[j].getFace()+"","");           
                       //} 
                      
                        pq.delMin();//System.out.println(""delmin,size to""+pq.size()); 
                        //System.out.printf(""刪除後pqsize:""+pq.size());
                        //System.out.print(""\n"");
                        
                        
                    }//end of keep pq size =3                   
              }// end of insert hand
               //System.out.printf(""pqsize:""+pq.size());                          
              
             //Card[] mincard = new Card[5]; 
             /*
              for(int i=0;i<pq.size();i++){
                  System.out.println(pq.size()); 
                  mincard = pq.max().getCards();                                
                    for(int j =0;j<mincard.length;j++){
                        System.out.printf(""<<""+mincard[j].getSuit()+"",""+mincard[j].getFace()+"">>"");
                     }
                     System.out.print(""\n"");
                     pq.delMax();
                    if(pq.size()==2){
                      mincard = pq.max().getCards();                                
                         for(int j =0;j<mincard.length;j++){
                            System.out.printf(""<<""+mincard[j].getSuit()+"",""+mincard[j].getFace()+"">>"");
                        }
                    }                     
              }
              */
              
                //System.out.print(""\n"");            
              Card[] anscard = new Card[5];             
              anscard=pq.min().getCards();
              Arrays.sort(anscard);
              int x =anscard.length;
              for(int i=0;i<x-1;i++){                 
                  System.out.printf(anscard[i].getSuit()+""_""+anscard[i].getFace()+"","");           
              }
              System.out.printf(anscard[x-1].getSuit()+""_""+anscard[x-1].getFace()+""\n"");
 
        }
    }
}

@ece92ea3f9509dc7c204ae353b442f8b@"
"r04631026","7","0.141428571428571","122048","@bdc640dfe132f6b185bc454c1317df72@import java.io.BufferedReader;
import java.io.FileReader;	
public class HandPQ {
      public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Card[] ans=new Card[5];
            MinPQ<Hand> thisgame=new MinPQ<Hand>();
            for (int i=0 ; i<count ; i++){
                String[] player=br.readLine().split("","");
                Card[] cards=new Card[5];
                for (int j=0 ; j<5 ; j++){
                    String[] temp=player[j].split(""_"");
                    cards[j]= new Card(temp[1],temp[0]);
                }
                Hand game=new Hand(cards);
                thisgame.insert(game);
                if (thisgame.size()>target)
                    thisgame.delMin();
            }
                    ans=thisgame.delMin().getCards();
            for (int i=0 ; i<4 ; i++)
                System.out.print(ans[i].getSuit()+""_""+ans[i].getFace()+"","");
                System.out.print(ans[4].getSuit()+""_""+ans[4].getFace());
         }
    }
}
@bdc640dfe132f6b185bc454c1317df72@"
"b02611002","0","1.03","124480","@916257a7ac210a8c3834ef925e5e1db9@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.PriorityQueue;


public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            //TODO
            MinPQ<Hand> MHPQ = new MinPQ<>();
            Card Clubs1 = new Card(""A"",""Clubs"");
            Card[] minHand = new Card[5];
            for(int i=0;i<5;i++) minHand[i]=Clubs1; // create minimun hand

            for(String in=br.readLine(); in!=null; in=br.readLine()){ // read input hands

                Card[] readCards = new Card[5];
                String[] cardStr = in.split("","");
                for(int i=0;i<5;i++){   // read 5 cards in current hand(readCards)
                    String[] sep=cardStr[i].split(""_"");
                    Card card = new Card(sep[1],sep[0]);
                    readCards[i]=card;
                }

                Hand readHand = new Hand(readCards);

                MHPQ.insert(readHand);
                while (MHPQ.size()>target) MHPQ.delMin();



            }

//            //TODO disp MHPQ
//            for(Hand h:MHPQ){
//                Card[] cs=h.getCards();
//                for(Card c:cs){
//                    System.out.println(c.getFace()+c.getSuit());
//                }
//                System.out.println(""\n-----"");
//            }

            Card[] returnVal = MHPQ.delMin().getCards();
            //Clubs_4,Diamonds_4,Hearts_10,Hearts_K,Spades_A
            for(Card c:returnVal) {

                System.out.printf(""%s_%s,"",c.getSuit(),c.getFace());

            }


        }
    }
}

@916257a7ac210a8c3834ef925e5e1db9@"
"r04631046","7","0.145714285714286","121776","@bdc640dfe132f6b185bc454c1317df72@import java.io.BufferedReader;
import java.io.FileReader;	
public class HandPQ {
      public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Card[] ans=new Card[5];
            MinPQ<Hand> thisgame=new MinPQ<Hand>();
            for (int i=0 ; i<count ; i++){
                String[] player=br.readLine().split("","");
                Card[] cards=new Card[5];
                for (int j=0 ; j<5 ; j++){
                    String[] temp=player[j].split(""_"");
                    cards[j]= new Card(temp[1],temp[0]);
                }
                Hand game=new Hand(cards);
                thisgame.insert(game);
                if (thisgame.size()>target)
                    thisgame.delMin();
            }
                    ans=thisgame.delMin().getCards();
            for (int i=0 ; i<4 ; i++)
                System.out.print(ans[i].getSuit()+""_""+ans[i].getFace()+"","");
                System.out.print(ans[4].getSuit()+""_""+ans[4].getFace());
         }
    }
}
@bdc640dfe132f6b185bc454c1317df72@"
"b02611002","0","1.04","122160","@33f675e5a79cb264c21fcb45b8fcbf81@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.PriorityQueue;


public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            //TODO
            MinPQ<Hand> MHPQ = new MinPQ<>();
            Card Clubs1 = new Card(""A"",""Clubs"");
            Card[] minHand = new Card[5];
            for(int i=0;i<5;i++) minHand[i]=Clubs1; // create minimun hand

            for(String in=br.readLine(); in!=null; in=br.readLine()){ // read input hands

                Card[] readCards = new Card[5];
                String[] cardStr = in.split("","");
                for(int i=0;i<5;i++){   // read 5 cards in current hand(readCards)
                    String[] sep=cardStr[i].split(""_"");
                    Card card = new Card(sep[1],sep[0]);
                    readCards[i]=card;
                }

                Hand readHand = new Hand(readCards);

                MHPQ.insert(readHand);
                while (MHPQ.size()>target) MHPQ.delMin();



            }

//            //TODO disp MHPQ
//            for(Hand h:MHPQ){
//                Card[] cs=h.getCards();
//                for(Card c:cs){
//                    System.out.println(c.getFace()+c.getSuit());
//                }
//                System.out.println(""\n-----"");
//            }

            Card[] returnVal = MHPQ.delMin().getCards();
            String[] returnValS = new String[10];
            //Clubs_4,Diamonds_4,Hearts_10,Hearts_K,Spades_A
            int i=0;
            for(Card c:returnVal) {
                returnValS[i]=c.getSuit();
                returnValS[i+1]=c.getFace();
                i+=2;
            }
            for(int j=10;j>0;j-=2){
                System.out.printf(""%s_%s,"",returnValS[j-2],returnValS[j-1]);
            }
        }
    }
}

@33f675e5a79cb264c21fcb45b8fcbf81@"
"b02611002","0","1.02","124704","@93d95ec69a4bde0d829010bb0091d663@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.PriorityQueue;


public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            //TODO
            MinPQ<Hand> MHPQ = new MinPQ<>();
            Card Clubs1 = new Card(""A"",""Clubs"");
            Card[] minHand = new Card[5];
            for(int i=0;i<5;i++) minHand[i]=Clubs1; // create minimun hand

            for(String in=br.readLine(); in!=null; in=br.readLine()){ // read input hands

                Card[] readCards = new Card[5];
                String[] cardStr = in.split("","");
                for(int i=0;i<5;i++){   // read 5 cards in current hand(readCards)
                    String[] sep=cardStr[i].split(""_"");
                    Card card = new Card(sep[1],sep[0]);
                    readCards[i]=card;
                }

                Hand readHand = new Hand(readCards);

                MHPQ.insert(readHand);
                while (MHPQ.size()>target) MHPQ.delMin();



            }

//            //TODO disp MHPQ
//            for(Hand h:MHPQ){
//                Card[] cs=h.getCards();
//                for(Card c:cs){
//                    System.out.println(c.getFace()+c.getSuit());
//                }
//                System.out.println(""\n-----"");
//            }

            Card[] returnVal = MHPQ.delMin().getCards();
            String[] returnValS = new String[10];
            //Clubs_4,Diamonds_4,Hearts_10,Hearts_K,Spades_A
            int i=0;
            for(Card c:returnVal) {
                returnValS[i]=c.getSuit();
                returnValS[i+1]=c.getFace();
                i+=2;
            }
            for(int j=10;j>0;j-=2){
                System.out.printf(""%s_%s"",returnValS[j-2],returnValS[j-1]);
                if(j!=2) System.out.printf("","");
            }
        }
    }
}

@93d95ec69a4bde0d829010bb0091d663@"
"b02611002","7","0.152857142857143","119040","@29d85a81aaa23182a98f21bdf4397c06@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.PriorityQueue;


public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            //TODO
            MinPQ<Hand> MHPQ = new MinPQ<>();
            Card Clubs1 = new Card(""A"",""Clubs"");
            Card[] minHand = new Card[5];
            for(int i=0;i<5;i++) minHand[i]=Clubs1; // create minimun hand

            for(String in=br.readLine(); in!=null; in=br.readLine()){ // read input hands

                Card[] readCards = new Card[5];
                String[] cardStr = in.split("","");
                for(int i=0;i<5;i++){   // read 5 cards in current hand(readCards)
                    String[] sep=cardStr[i].split(""_"");
                    Card card = new Card(sep[1],sep[0]);
                    readCards[i]=card;
                }

                Hand readHand = new Hand(readCards);

                MHPQ.insert(readHand);
                while (MHPQ.size()>target) MHPQ.delMin();



            }

//            //TODO disp MHPQ
//            for(Hand h:MHPQ){
//                Card[] cs=h.getCards();
//                for(Card c:cs){
//                    System.out.println(c.getFace()+c.getSuit());
//                }
//                System.out.println(""\n-----"");
//            }

            Card[] returnVal = MHPQ.delMin().getCards();
            Arrays.sort(returnVal);
            String[] returnValS = new String[10];
            //Clubs_4,Diamonds_4,Hearts_10,Hearts_K,Spades_A
            int i=0;
            for(Card c:returnVal) {
                System.out.printf(""%s_%s"",c.getSuit(),c.getFace());
                returnValS[i]=c.getSuit();
                returnValS[i+1]=c.getFace();
                i+=2;
                if(i!=10) System.out.printf("","");
            }
//            for(int j=10;j>0;j-=2){
//                System.out.printf(""%s_%s"",returnValS[j-2],returnValS[j-1]);
//                if(j!=2) System.out.printf("","");
//            }
            //Clubs_4,Diamonds_4,Hearts_10,Hearts_K,Spades_A
        }
    }
}

@29d85a81aaa23182a98f21bdf4397c06@"
"b02611002","7","0.144285714285714","126080","@29d85a81aaa23182a98f21bdf4397c06@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;
import java.util.PriorityQueue;


public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            //TODO
            MinPQ<Hand> MHPQ = new MinPQ<>();
            Card Clubs1 = new Card(""A"",""Clubs"");
            Card[] minHand = new Card[5];
            for(int i=0;i<5;i++) minHand[i]=Clubs1; // create minimun hand

            for(String in=br.readLine(); in!=null; in=br.readLine()){ // read input hands

                Card[] readCards = new Card[5];
                String[] cardStr = in.split("","");
                for(int i=0;i<5;i++){   // read 5 cards in current hand(readCards)
                    String[] sep=cardStr[i].split(""_"");
                    Card card = new Card(sep[1],sep[0]);
                    readCards[i]=card;
                }

                Hand readHand = new Hand(readCards);

                MHPQ.insert(readHand);
                while (MHPQ.size()>target) MHPQ.delMin();



            }

//            //TODO disp MHPQ
//            for(Hand h:MHPQ){
//                Card[] cs=h.getCards();
//                for(Card c:cs){
//                    System.out.println(c.getFace()+c.getSuit());
//                }
//                System.out.println(""\n-----"");
//            }

            Card[] returnVal = MHPQ.delMin().getCards();
            Arrays.sort(returnVal);
            String[] returnValS = new String[10];
            //Clubs_4,Diamonds_4,Hearts_10,Hearts_K,Spades_A
            int i=0;
            for(Card c:returnVal) {
                System.out.printf(""%s_%s"",c.getSuit(),c.getFace());
                returnValS[i]=c.getSuit();
                returnValS[i+1]=c.getFace();
                i+=2;
                if(i!=10) System.out.printf("","");
            }
//            for(int j=10;j>0;j-=2){
//                System.out.printf(""%s_%s"",returnValS[j-2],returnValS[j-1]);
//                if(j!=2) System.out.printf("","");
//            }
            //Clubs_4,Diamonds_4,Hearts_10,Hearts_K,Spades_A
        }
    }
}

@29d85a81aaa23182a98f21bdf4397c06@"
"r03222054","0","0","0","@89d2713a34a59b7a019ebc826139587a@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.PriorityQueue;
//import edu.princeton.cs.algs4.MaxPQ;
public class HandPQ 
{
    static public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards)
    {
        this.cards = cards;
        return;
    }
    private static int faceToInt(String thatFace)
    {
         // String thatFace = that.getFace();
          int faceInt2 = 0;
        
    if(thatFace.equals(""2""))
            faceInt2 = 2;
        if(thatFace.equals(""3""))
            faceInt2 = 3;
        if(thatFace.equals(""4""))
            faceInt2 = 4;
        if(thatFace.equals(""5""))
            faceInt2 = 5;
        if(thatFace.equals(""6""))
            faceInt2 = 6;
        if(thatFace.equals(""7""))
            faceInt2 = 7;
        if(thatFace.equals(""8""))
            faceInt2 = 8;
        if(thatFace.equals(""9""))
            faceInt2 = 9;
        if(thatFace.equals(""10""))
            faceInt2 = 10;
        if(thatFace.equals(""J""))
            faceInt2 = 11;
        if(thatFace.equals(""Q""))
            faceInt2 = 12;
        if(thatFace.equals(""K""))
            faceInt2 = 13;
        if(thatFace.equals(""A""))
            faceInt2 = 14;
        return faceInt2;
    }
       private static int suitToInt(String suitStr) 
       {
        int num1 = 0;
      //  String suitStr = that.getSuit();
        if (suitStr.equals(""Spades""))
            num1=  3;
        else if (suitStr.equals(""Hearts""))
            num1 =2;
        else if (suitStr.equals(""Diamonds""))
            num1=1;
        else if(suitStr.equals(""Clubs""))
            num1 = 0;
        
        return num1;
       }
    
    
    
    public int compareTo(Hand that) 
    {
        Card[] thisCard = this.getCards();
        Card[] thatCard = that.getCards();
        
        int thisKey = checkCombination(this.cards);
        int thatKey = checkCombination(that.cards);
        // complete this function so the Player can be sorted according to the cards he/she has.
        return thisKey-thatKey;
    }
    
    public static boolean isStraight(List<List<Integer>> that)
    {
        
        //Arrays.sort(that);
        int key0=that.get(0).get(0);//
        for( int i =1; i<5; i++)
        {
           if( i==4 && that.get(0).get(0) == 2 && that.get(i).get(0) ==14)
               return true;
           else if(that.get(i).get(0)-key0 != i)
           // if(Card.faceToMap(that[i].getFace()) - key0 != i)
                return false;
        }
        return true;
    }
    
public static boolean isFlush(Card[] that)
{
    String lastSuit = that[0].getSuit();
    for(int i=1; i< 5; i++)
    {
        if(!that[i].getSuit().equals(lastSuit))
            return false;
        
    }
    return true;
    
}
    



public static Integer checkCombination(Card[] that)
    {
        Arrays.sort(that);
        String lastCardFace = that[0].getFace();
        int kind =1;//how many kind of face;
        
        for(int i =1; i<5; i++)
        {
            if(!that[i].getFace().equals(lastCardFace))
                kind++;
        }
        List<List<Integer>> count = new ArrayList<List<Integer>>() {} ;// how many 
        int index = 0;
        count.add(new ArrayList<Integer>());
        count.get(index).add(faceToInt(lastCardFace));
        int maxIndexCount =1;
        int key= 4*(faceToInt(that[4].getFace())-1) + suitToInt(that[4].getSuit()) ;
        
        for( int i =1; i<5; i++)
        {
            if(that[i].getFace().equals(lastCardFace))
            {
                count.get(index).add(faceToInt(lastCardFace));
                if(count.get(index).size() == maxIndexCount)
                {
                  //  maxIndexCount++;
                    key = 4*(faceToInt(that[i].getFace())-1) + suitToInt(that[i].getSuit()) ;
                }
                
                if(count.get(index).size() > maxIndexCount)
                {
                    maxIndexCount++;
                    key = 4*(faceToInt(that[i].getFace())-1) + suitToInt(that[i].getSuit()) ;
                }
            }
            
            else
            {
              index ++;
                lastCardFace = that[i].getFace();
                 count.add(new ArrayList<Integer>());
                count.get(index).add(faceToInt(lastCardFace));
            }         
        }       
        if (count.size() == 2 && maxIndexCount ==3)// fullhouse
            return 6*56+key;
        
        else if(count.size() ==5 )
        {
            if (isFlush(that))
                return 5*56 +key;
            
            else if(Hand.isStraight(count))
            {
                if(that[4].getFace().equals(""A"") && that[3].getFace().equals(""5""))
                {
                  // System.out.print(that[3].getFace());
                    key = 4*(faceToInt(that[3].getFace())-1) + suitToInt(that[3].getSuit()) ;
                   // return 4*56 +key
                }
                return 4*56 + key;
            }

            
            else return 1*56+key;
        }
        
        if(maxIndexCount ==2 &&count.size() == 3 )
            return 3*56+key;
        
        else if(maxIndexCount ==2 &&count.size() == 4 )
            return 2*56+key;
      
       // String one = Integer.toString(maxIndexCount);
       // String two = Integer.toString(count.size());
    //    String three = new String(one + "" ""+two);
        return 0;
        

    }
    // TODO


      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}
    private static class HandOrder implements Comparator<Hand> 
    {
        public int compare(Hand o1, Hand o2) {
            return -1*(o1.compareTo(o2));
        }
    }
  
    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Comparator<Hand> Hand_ORDER = new HandOrder();
            MaxPQ player= new MaxPQ(target,Hand_ORDER);
            
            
           // PriorityQueue<Hand> player = new PriorityQueue<Hand>(target,Hand_ORDER) ;
            int tempCount = 0;
            String line;
            while((line = br.readLine())!=null )
            {
                tempCount++;
                String[] cards =line.split("","");
                
                Card[] cardArray=new Card[5];
                for(int i= 0; i<5; i++)
                {
                    Card newCard;
                    String[] temp = cards[i].split(""_"");
                    newCard = new Card(temp[0], temp[1]);
                    cardArray[i] = newCard;
                }
                Arrays.sort(cardArray);
                Hand newHand= new Hand(cardArray);
           //     Hand.sort();
                player.insert(newHand);
            }
           // System.out.print(tempCount);
                Hand handCard = null;
            for(int i=0; i<target ;i++)
            {
                handCard=(Hand) player.delMax();
            }
             Card[] temp = handCard.getCards();
            for (int i= 4; i>0; i--)
            {
               String face = temp[i].getFace();
                String suit= temp[i].getSuit();
                System.out.print(face + ""_""+suit +"", "");
            }
        }
    }

}

@89d2713a34a59b7a019ebc826139587a@"
"r03222054","0","0","0","@10a1a1b724996b076c80df61710ed6a1@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.PriorityQueue;
import edu.princeton.cs.algs4.MaxPQ;
public class HandPQ 
{
    static public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards)
    {
        this.cards = cards;
        return;
    }
    private static int faceToInt(String thatFace)
    {
         // String thatFace = that.getFace();
          int faceInt2 = 0;
        
    if(thatFace.equals(""2""))
            faceInt2 = 2;
        if(thatFace.equals(""3""))
            faceInt2 = 3;
        if(thatFace.equals(""4""))
            faceInt2 = 4;
        if(thatFace.equals(""5""))
            faceInt2 = 5;
        if(thatFace.equals(""6""))
            faceInt2 = 6;
        if(thatFace.equals(""7""))
            faceInt2 = 7;
        if(thatFace.equals(""8""))
            faceInt2 = 8;
        if(thatFace.equals(""9""))
            faceInt2 = 9;
        if(thatFace.equals(""10""))
            faceInt2 = 10;
        if(thatFace.equals(""J""))
            faceInt2 = 11;
        if(thatFace.equals(""Q""))
            faceInt2 = 12;
        if(thatFace.equals(""K""))
            faceInt2 = 13;
        if(thatFace.equals(""A""))
            faceInt2 = 14;
        return faceInt2;
    }
       private static int suitToInt(String suitStr) 
       {
        int num1 = 0;
      //  String suitStr = that.getSuit();
        if (suitStr.equals(""Spades""))
            num1=  3;
        else if (suitStr.equals(""Hearts""))
            num1 =2;
        else if (suitStr.equals(""Diamonds""))
            num1=1;
        else if(suitStr.equals(""Clubs""))
            num1 = 0;
        
        return num1;
       }
    
    
    
    public int compareTo(Hand that) 
    {
        Card[] thisCard = this.getCards();
        Card[] thatCard = that.getCards();
        
        int thisKey = checkCombination(this.cards);
        int thatKey = checkCombination(that.cards);
        // complete this function so the Player can be sorted according to the cards he/she has.
        return thisKey-thatKey;
    }
    
    public static boolean isStraight(List<List<Integer>> that)
    {
        
        //Arrays.sort(that);
        int key0=that.get(0).get(0);//
        for( int i =1; i<5; i++)
        {
           if( i==4 && that.get(0).get(0) == 2 && that.get(i).get(0) ==14)
               return true;
           else if(that.get(i).get(0)-key0 != i)
           // if(Card.faceToMap(that[i].getFace()) - key0 != i)
                return false;
        }
        return true;
    }
    
public static boolean isFlush(Card[] that)
{
    String lastSuit = that[0].getSuit();
    for(int i=1; i< 5; i++)
    {
        if(!that[i].getSuit().equals(lastSuit))
            return false;
        
    }
    return true;
    
}
    



public static Integer checkCombination(Card[] that)
    {
        Arrays.sort(that);
        String lastCardFace = that[0].getFace();
        int kind =1;//how many kind of face;
        
        for(int i =1; i<5; i++)
        {
            if(!that[i].getFace().equals(lastCardFace))
                kind++;
        }
        List<List<Integer>> count = new ArrayList<List<Integer>>() {} ;// how many 
        int index = 0;
        count.add(new ArrayList<Integer>());
        count.get(index).add(faceToInt(lastCardFace));
        int maxIndexCount =1;
        int key= 4*(faceToInt(that[4].getFace())-1) + suitToInt(that[4].getSuit()) ;
        
        for( int i =1; i<5; i++)
        {
            if(that[i].getFace().equals(lastCardFace))
            {
                count.get(index).add(faceToInt(lastCardFace));
                if(count.get(index).size() == maxIndexCount)
                {
                  //  maxIndexCount++;
                    key = 4*(faceToInt(that[i].getFace())-1) + suitToInt(that[i].getSuit()) ;
                }
                
                if(count.get(index).size() > maxIndexCount)
                {
                    maxIndexCount++;
                    key = 4*(faceToInt(that[i].getFace())-1) + suitToInt(that[i].getSuit()) ;
                }
            }
            
            else
            {
              index ++;
                lastCardFace = that[i].getFace();
                 count.add(new ArrayList<Integer>());
                count.get(index).add(faceToInt(lastCardFace));
            }         
        }       
        if (count.size() == 2 && maxIndexCount ==3)// fullhouse
            return 6*56+key;
        
        else if(count.size() ==5 )
        {
            if (isFlush(that))
                return 5*56 +key;
            
            else if(Hand.isStraight(count))
            {
                if(that[4].getFace().equals(""A"") && that[3].getFace().equals(""5""))
                {
                  // System.out.print(that[3].getFace());
                    key = 4*(faceToInt(that[3].getFace())-1) + suitToInt(that[3].getSuit()) ;
                   // return 4*56 +key
                }
                return 4*56 + key;
            }

            
            else return 1*56+key;
        }
        
        if(maxIndexCount ==2 &&count.size() == 3 )
            return 3*56+key;
        
        else if(maxIndexCount ==2 &&count.size() == 4 )
            return 2*56+key;
      
       // String one = Integer.toString(maxIndexCount);
       // String two = Integer.toString(count.size());
    //    String three = new String(one + "" ""+two);
        return 0;
        

    }
    // TODO


      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}
    private static class HandOrder implements Comparator<Hand> 
    {
        public int compare(Hand o1, Hand o2) {
            return -1*(o1.compareTo(o2));
        }
    }
  
    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Comparator<Hand> Hand_ORDER = new HandOrder();
            MaxPQ player= new MaxPQ(target,Hand_ORDER);
            
            
           // PriorityQueue<Hand> player = new PriorityQueue<Hand>(target,Hand_ORDER) ;
            int tempCount = 0;
            String line;
            while((line = br.readLine())!=null )
            {
                tempCount++;
                String[] cards =line.split("","");
                
                Card[] cardArray=new Card[5];
                for(int i= 0; i<5; i++)
                {
                    Card newCard;
                    String[] temp = cards[i].split(""_"");
                    newCard = new Card(temp[0], temp[1]);
                    cardArray[i] = newCard;
                }
                Arrays.sort(cardArray);
                Hand newHand= new Hand(cardArray);
           //     Hand.sort();
                player.insert(newHand);
            }
           // System.out.print(tempCount);
                Hand handCard = null;
            for(int i=0; i<target ;i++)
            {
                handCard=(Hand) player.delMax();
            }
             Card[] temp = handCard.getCards();
             Arrays.sort(temp);
            for (int i= 4; i>-1; i--)
            {
               String face = temp[i].getFace();
                String suit= temp[i].getSuit();
                System.out.print(face + ""_""+suit +"", "");
            }
        }
    }

}

@10a1a1b724996b076c80df61710ed6a1@"
"r03222054","0","0","0","@57fbcb0c313c7bedc934d1dac14ac009@import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.PriorityQueue;

public class HandPQ 
{
    static public class Hand implements Comparable<Hand> {

    // sorted by Card value are recommended but not necessary
    private Card[] cards; 

    // TODO, Judge System will call this constructor once for each hand
    public Hand(Card[] cards)
    {
        this.cards = cards;
        return;
    }
    private static int faceToInt(String thatFace)
    {
         // String thatFace = that.getFace();
          int faceInt2 = 0;
        
    if(thatFace.equals(""2""))
            faceInt2 = 2;
        if(thatFace.equals(""3""))
            faceInt2 = 3;
        if(thatFace.equals(""4""))
            faceInt2 = 4;
        if(thatFace.equals(""5""))
            faceInt2 = 5;
        if(thatFace.equals(""6""))
            faceInt2 = 6;
        if(thatFace.equals(""7""))
            faceInt2 = 7;
        if(thatFace.equals(""8""))
            faceInt2 = 8;
        if(thatFace.equals(""9""))
            faceInt2 = 9;
        if(thatFace.equals(""10""))
            faceInt2 = 10;
        if(thatFace.equals(""J""))
            faceInt2 = 11;
        if(thatFace.equals(""Q""))
            faceInt2 = 12;
        if(thatFace.equals(""K""))
            faceInt2 = 13;
        if(thatFace.equals(""A""))
            faceInt2 = 14;
        return faceInt2;
    }
       private static int suitToInt(String suitStr) 
       {
        int num1 = 0;
      //  String suitStr = that.getSuit();
        if (suitStr.equals(""Spades""))
            num1=  3;
        else if (suitStr.equals(""Hearts""))
            num1 =2;
        else if (suitStr.equals(""Diamonds""))
            num1=1;
        else if(suitStr.equals(""Clubs""))
            num1 = 0;
        
        return num1;
       }
    
    
    
    public int compareTo(Hand that) 
    {
        Card[] thisCard = this.getCards();
        Card[] thatCard = that.getCards();
        
        int thisKey = checkCombination(this.cards);
        int thatKey = checkCombination(that.cards);
        // complete this function so the Player can be sorted according to the cards he/she has.
        return thisKey-thatKey;
    }
    
    public static boolean isStraight(List<List<Integer>> that)
    {
        
        //Arrays.sort(that);
        int key0=that.get(0).get(0);//
        for( int i =1; i<5; i++)
        {
           if( i==4 && that.get(0).get(0) == 2 && that.get(i).get(0) ==14)
               return true;
           else if(that.get(i).get(0)-key0 != i)
           // if(Card.faceToMap(that[i].getFace()) - key0 != i)
                return false;
        }
        return true;
    }
    
public static boolean isFlush(Card[] that)
{
    String lastSuit = that[0].getSuit();
    for(int i=1; i< 5; i++)
    {
        if(!that[i].getSuit().equals(lastSuit))
            return false;
        
    }
    return true;
    
}
    



public static Integer checkCombination(Card[] that)
    {
        Arrays.sort(that);
        String lastCardFace = that[0].getFace();
        int kind =1;//how many kind of face;
        
        for(int i =1; i<5; i++)
        {
            if(!that[i].getFace().equals(lastCardFace))
                kind++;
        }
        List<List<Integer>> count = new ArrayList<List<Integer>>() {} ;// how many 
        int index = 0;
        count.add(new ArrayList<Integer>());
        count.get(index).add(faceToInt(lastCardFace));
        int maxIndexCount =1;
        int key= 4*(faceToInt(that[4].getFace())-1) + suitToInt(that[4].getSuit()) ;
        
        for( int i =1; i<5; i++)
        {
            if(that[i].getFace().equals(lastCardFace))
            {
                count.get(index).add(faceToInt(lastCardFace));
                if(count.get(index).size() == maxIndexCount)
                {
                  //  maxIndexCount++;
                    key = 4*(faceToInt(that[i].getFace())-1) + suitToInt(that[i].getSuit()) ;
                }
                
                if(count.get(index).size() > maxIndexCount)
                {
                    maxIndexCount++;
                    key = 4*(faceToInt(that[i].getFace())-1) + suitToInt(that[i].getSuit()) ;
                }
            }
            
            else
            {
              index ++;
                lastCardFace = that[i].getFace();
                 count.add(new ArrayList<Integer>());
                count.get(index).add(faceToInt(lastCardFace));
            }         
        }       
        if (count.size() == 2 && maxIndexCount ==3)// fullhouse
            return 6*56+key;
        
        else if(count.size() ==5 )
        {
            if (isFlush(that))
                return 5*56 +key;
            
            else if(Hand.isStraight(count))
            {
                if(that[4].getFace().equals(""A"") && that[3].getFace().equals(""5""))
                {
                  // System.out.print(that[3].getFace());
                    key = 4*(faceToInt(that[3].getFace())-1) + suitToInt(that[3].getSuit()) ;
                   // return 4*56 +key
                }
                return 4*56 + key;
            }

            
            else return 1*56+key;
        }
        
        if(maxIndexCount ==2 &&count.size() == 3 )
            return 3*56+key;
        
        else if(maxIndexCount ==2 &&count.size() == 4 )
            return 2*56+key;
      
       // String one = Integer.toString(maxIndexCount);
       // String two = Integer.toString(count.size());
    //    String three = new String(one + "" ""+two);
        return 0;
        

    }
    // TODO


      // Do not modified this function
    public Card[] getCards() { return this.cards; }
}
    private static class HandOrder implements Comparator<Hand> 
    {
        public int compare(Hand o1, Hand o2) {
            return -1*(o1.compareTo(o2));
        }
    }
  
    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Comparator<Hand> Hand_ORDER = new HandOrder();
            MaxPQ player= new MaxPQ(target,Hand_ORDER);
            
            
           // PriorityQueue<Hand> player = new PriorityQueue<Hand>(target,Hand_ORDER) ;
            int tempCount = 0;
            String line;
            while((line = br.readLine())!=null )
            {
                tempCount++;
                String[] cards =line.split("","");
                
                Card[] cardArray=new Card[5];
                for(int i= 0; i<5; i++)
                {
                    Card newCard;
                    String[] temp = cards[i].split(""_"");
                    newCard = new Card(temp[0], temp[1]);
                    cardArray[i] = newCard;
                }
                Arrays.sort(cardArray);
                Hand newHand= new Hand(cardArray);
           //     Hand.sort();
                player.insert(newHand);
            }
           // System.out.print(tempCount);
                Hand handCard = null;
            for(int i=0; i<target ;i++)
            {
                handCard=(Hand) player.delMax();
            }
             Card[] temp = handCard.getCards();
             Arrays.sort(temp);
            for (int i= 4; i>-1; i--)
            {
               String face = temp[i].getFace();
                String suit= temp[i].getSuit();
                System.out.print(face + ""_""+suit +"", "");
            }
        }
    }

}

@57fbcb0c313c7bedc934d1dac14ac009@"
"r04631031","7","0.144285714285714","116416","@bdc640dfe132f6b185bc454c1317df72@import java.io.BufferedReader;
import java.io.FileReader;	
public class HandPQ {
      public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Card[] ans=new Card[5];
            MinPQ<Hand> thisgame=new MinPQ<Hand>();
            for (int i=0 ; i<count ; i++){
                String[] player=br.readLine().split("","");
                Card[] cards=new Card[5];
                for (int j=0 ; j<5 ; j++){
                    String[] temp=player[j].split(""_"");
                    cards[j]= new Card(temp[1],temp[0]);
                }
                Hand game=new Hand(cards);
                thisgame.insert(game);
                if (thisgame.size()>target)
                    thisgame.delMin();
            }
                    ans=thisgame.delMin().getCards();
            for (int i=0 ; i<4 ; i++)
                System.out.print(ans[i].getSuit()+""_""+ans[i].getFace()+"","");
                System.out.print(ans[4].getSuit()+""_""+ans[4].getFace());
         }
    }
}
@bdc640dfe132f6b185bc454c1317df72@"
"r04522616","7","0.145714285714286","121680","@6337b64ae8488077d1d2301f0e5f7b3f@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {
    
   

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            
            MinPQ<Hand> pq = new MinPQ<Hand>();
            
            for(String in = br.readLine(); in != null; in = br.readLine()) {
                Card[] cardsArray = new Card[5];
                String[] cardStr = in.split("","");
                for(int i = 0; i < 5; i++){
                    String[] sep = cardStr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
                pq.insert(new Hand(cardsArray));
                if(pq.size() > target)
                {
                    pq.delMin();
                }
            }
            
            Hand target_hand = pq.min();
            Card[] target_cards = target_hand.getCards();
            StdOut.println(target_cards[0].getSuit() + ""_"" + target_cards[0].getFace()
            + "","" + target_cards[1].getSuit() + ""_"" + target_cards[1].getFace()
            + "","" + target_cards[2].getSuit() + ""_"" + target_cards[2].getFace()
            + "","" + target_cards[3].getSuit() + ""_"" + target_cards[3].getFace()
            + "","" + target_cards[4].getSuit() + ""_"" + target_cards[4].getFace());
            
            
            
            

        }
    }
}

@6337b64ae8488077d1d2301f0e5f7b3f@"
"r03522831","7","0.141428571428571","120464","@a2372ce50a38dc2da323239f76b4d269@import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            MinPQ<Hand> pq = new MinPQ<Hand>();
            
           for (String in = br.readLine(); in != null; in = br.readLine())
           {
               String[] cardstr = in.split("","");
               Card[] cardsArray = new Card[5];
               for(int i = 0; i < 5; i++){
                    String[] sep = cardstr[i].split(""_"");
                    Card card = new Card(sep[1], sep[0]);
                    cardsArray[i] = card;
                }
               Hand hand = new Hand(cardsArray);
               pq.insert(hand);
               if(pq.size() > target)
                   pq.delMin();
           }
           Card[] Ans = pq.delMin().getCards();
           for(int i = 0; i < 5; i++){
               if(i != 4)
                   System.out.print(Ans[i].getSuit()+""_""+Ans[i].getFace()+"","");
               else
                   System.out.print(Ans[i].getSuit()+""_""+Ans[i].getFace());
           }
        }
    }
}

@a2372ce50a38dc2da323239f76b4d269@"
"r03631015","7","0.147142857142857","115664","@bdc640dfe132f6b185bc454c1317df72@import java.io.BufferedReader;
import java.io.FileReader;	
public class HandPQ {
      public static void main(String[] args) throws Exception {

        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);
            Card[] ans=new Card[5];
            MinPQ<Hand> thisgame=new MinPQ<Hand>();
            for (int i=0 ; i<count ; i++){
                String[] player=br.readLine().split("","");
                Card[] cards=new Card[5];
                for (int j=0 ; j<5 ; j++){
                    String[] temp=player[j].split(""_"");
                    cards[j]= new Card(temp[1],temp[0]);
                }
                Hand game=new Hand(cards);
                thisgame.insert(game);
                if (thisgame.size()>target)
                    thisgame.delMin();
            }
                    ans=thisgame.delMin().getCards();
            for (int i=0 ; i<4 ; i++)
                System.out.print(ans[i].getSuit()+""_""+ans[i].getFace()+"","");
                System.out.print(ans[4].getSuit()+""_""+ans[4].getFace());
         }
    }
}
@bdc640dfe132f6b185bc454c1317df72@"
"b02611026","0","0","0","@9734502abd807586bd7b3fdbbd3beb55@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(""in.txt""))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

//            System.out.println(count);
//            System.out.println(target);

            HandPQ PQ = new HandPQ();
            MinPQ<Hand> pq = new MinPQ<Hand>(target);


            for (int j = 0; j < count; j++) {
                Card[] cards = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");

                    cards[i] = new Card(sep[1], sep[0]);

//                    System.out.println(cards[i].getFace());
//                    System.out.println(cards[i].getSuit());
                }
                Hand input = new Hand(cards);
                pq.insert(input);
                if (pq.size() > target) {
                    pq.delMin();
                }

            }
            //System.out.println(input[2].compareTo(input[1]));

//            for (int i = 0; i < target; i++) {
//
//                pq.insert(input[0]);
//
//                
//            }
            Hand[] output = new Hand[1];
            output[0] = pq.delMin();
            Card[] outputs = output[0].getCards();

            System.out.print(outputs[0].getSuit());
            System.out.print(""_"");
            System.out.print(outputs[0].getFace());
            System.out.print("","");
            System.out.print(outputs[1].getSuit());
            System.out.print(""_"");
            System.out.print(outputs[1].getFace());
            System.out.print("","");
            System.out.print(outputs[2].getSuit());
            System.out.print(""_"");
            System.out.print(outputs[2].getFace());
            System.out.print("","");
            System.out.print(outputs[3].getSuit());
            System.out.print(""_"");
            System.out.print(outputs[3].getFace());
            System.out.print("","");
            System.out.print(outputs[4].getSuit());
            System.out.print(""_"");
            System.out.print(outputs[4].getFace());
            
            
        }
    }
}

@9734502abd807586bd7b3fdbbd3beb55@"
"b02611026","7","0.142857142857143","120096","@92bd1a31d8851daae29092926905eb13@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

//            System.out.println(count);
//            System.out.println(target);

            HandPQ PQ = new HandPQ();
            MinPQ<Hand> pq = new MinPQ<Hand>(target);


            for (int j = 0; j < count; j++) {
                Card[] cards = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");

                    cards[i] = new Card(sep[1], sep[0]);

//                    System.out.println(cards[i].getFace());
//                    System.out.println(cards[i].getSuit());
                }
                Hand input = new Hand(cards);
                pq.insert(input);
                if (pq.size() > target) {
                    pq.delMin();
                }

            }

            Hand output = pq.delMin();
            //output[0] = ;
            Card[] outputs = output.getCards();

            System.out.print(outputs[0].getSuit());
            System.out.print(""_"");
            System.out.print(outputs[0].getFace());
            System.out.print("","");
            System.out.print(outputs[1].getSuit());
            System.out.print(""_"");
            System.out.print(outputs[1].getFace());
            System.out.print("","");
            System.out.print(outputs[2].getSuit());
            System.out.print(""_"");
            System.out.print(outputs[2].getFace());
            System.out.print("","");
            System.out.print(outputs[3].getSuit());
            System.out.print(""_"");
            System.out.print(outputs[3].getFace());
            System.out.print("","");
            System.out.print(outputs[4].getSuit());
            System.out.print(""_"");
            System.out.print(outputs[4].getFace());
            
            
        }
    }
}

@92bd1a31d8851daae29092926905eb13@"
"b02611026","7","0.144285714285714","113968","@278b9e4240bae709b88a521b17f91b9e@
import java.io.BufferedReader;
import java.io.FileReader;

public class HandPQ {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] header = br.readLine().split("","");
            int count = Integer.parseInt(header[0]);
            int target = Integer.parseInt(header[1]);

            MinPQ<Hand> pq = new MinPQ<Hand>(target);

            for (int j = 0; j < count; j++) {
                Card[] cards = new Card[5];
                String[] cardStr = br.readLine().split("","");
                for (int i = 0; i < 5; i++) {
                    String[] sep = cardStr[i].split(""_"");
                    cards[i] = new Card(sep[1], sep[0]);
                }
                Hand input = new Hand(cards);
                pq.insert(input);
                if (pq.size() > target) {
                    pq.delMin();
                }
            }

            Hand output = pq.delMin();
            Card[] outputs = output.getCards();

            System.out.print(outputs[0].getSuit());
            System.out.print(""_"");
            System.out.print(outputs[0].getFace());
            System.out.print("","");
            System.out.print(outputs[1].getSuit());
            System.out.print(""_"");
            System.out.print(outputs[1].getFace());
            System.out.print("","");
            System.out.print(outputs[2].getSuit());
            System.out.print(""_"");
            System.out.print(outputs[2].getFace());
            System.out.print("","");
            System.out.print(outputs[3].getSuit());
            System.out.print(""_"");
            System.out.print(outputs[3].getFace());
            System.out.print("","");
            System.out.print(outputs[4].getSuit());
            System.out.print(""_"");
            System.out.print(outputs[4].getFace());
        }
    }
}

@278b9e4240bae709b88a521b17f91b9e@"
