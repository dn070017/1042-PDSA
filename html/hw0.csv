"r04945025","@549328fb7690e435c7ee9616358721b6@import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;
import java.util.HashSet;

public class Bingo {

    public static void main(String[] args) throws Exception {
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            HashSet<String> hash = new HashSet<String>();
            String[] data = br.readLine().split("","");
            int count = 0;
            int set = Integer.parseInt(data[0]);
            int num = Integer.parseInt(data[1]);
            boolean[][] bingo = new boolean[num][num];
            boolean[][] result = new boolean[2 * num + 2][num];
            boolean[] cmp = new boolean[num];

            data = br.readLine().split("","");
            for(int i = 0; i < set; i++){
                if(!hash.contains(data[i])) hash.add(data[i]);
            }

            for(int i = 0; i < num; i++){
                data = br.readLine().split("","");
                for(int j = 0; j < num; j++){
                    if(hash.contains(data[j])) bingo[i][j] = true;
                }
            }

            for(int i = 0; i < num; i++){
                result[i] = bingo[i];
                for(int j = 0; j < num; j++) {
                    result[num + j][i] = bingo[i][j];
                    if(i == j){
                        result[2 * num][i] = bingo[i][i];
                    }
                    if(i + j == num - 1){
                        result[2 * num + 1][j] = bingo[i][j];
                    }
                }
            }

            /*for(int i = 0; i < 2 * num + 2; i++){
                if(i == num || i == 2*num){
                    System.err.printf(""-----------------------------------\n"");
                }
                for(int j = 0; j < num; j++){
                    System.err.printf(""%b\t"", result[i][j]);
                }
                System.err.printf(""\n"");
            }*/

            for(int i = 0; i < num; i++){
                cmp[i] = true;
            }

            for(int i = 0; i < num * 2 + 2; i++){
                if(Arrays.equals(cmp, result[i])) count++;
            }
            System.out.printf(""%d\n"", count);
        }
    }
}

@549328fb7690e435c7ee9616358721b6@","10"
"r04447001","@2f410230769f5f019a77b77fe04d76a8@import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            int[][] resultmatrix = new int[num][num];
            // printf in Java (you should comment out or delete this in your final submission)
            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);
            String[] data2 = br.readLine().split("","");
            for(int i =0; i < stringCount; i++){
            announce[i] = data2[i];
            }//build the announce
            int current = 0;
            for(int i = 0; i < num; i++){
                String[] data3 = br.readLine().split("","");
                for(int j = 0; j < num; j++){
                resultmatrix[i][j] = compareString(data3[j],announce);
                current++;
                }
            }//build the countmatrix
            
            int result = 0;
            result = Matchedline(resultmatrix,num);
            System.out.println(result);
            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
            
        }
    }
    private static int compareString(String sub,String[] obj){
        int result = 0;
        for(int i = 0; i < obj.length; i++){
            if(obj[i].equalsIgnoreCase(sub)){
                result = 1;
                break;
            }
        }
        return result;
    }
    private static int Matchedline(int[][] matrix, int num){
        int finalcount = 0;
        for (int i = 0; i < num; i++) {
            int totalcount = 0;
            for (int j = 0; j < num; j++) {
                totalcount += matrix[i][j];
            }
            if (totalcount == num) {
                finalcount++;
            }
        }// row count
        for (int i = 0; i < num; i++) {
            int totalcount = 0;
            for (int j = 0; j < num; j++) {
                totalcount += matrix[j][i];
            }
            if (totalcount == num) {
                finalcount++;
            }
        }//column count
            int diagcount = 0;
        for (int i = 0; i < num; i++) {
                diagcount += matrix[i][i];
            if (diagcount == num) {
                finalcount++;
            }//diagonal site
        }
            diagcount = 0;//re-initialize
        for (int i = 0; i < num ; i++) {
                diagcount += matrix[(num-1-i)][i];
            if (diagcount == num) {
                finalcount++;
            }//another diagonal site
        }
        return finalcount;
    }
}

@2f410230769f5f019a77b77fe04d76a8@","10"
"r04921115","@12675c855f36bf4d6d1db36f57f4c738@package hw0;
import java.io.FileReader;
import java.io.BufferedReader;
import java.util.*;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(""C:\\Users\\Wen\\Desktop\\hw0\\input.txt""))){
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];

            // printf in Java (you should comment out or delete this in your final submission)
            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);
            
            announce = br.readLine().split("","");
//            matrix = br.readLine().split("","");            
            int i,j;
            String[] temp = new String[num];
            for(i=0; i<num; i++){
            	temp = br.readLine().split("","");
            	for(j=0; j<num; j++){
            		matrix[i][j] = temp[j];
            		if(j!=num && j!=0){
            			//System.out.printf("", "");
            		}
            		//System.out.printf(""%s"", matrix[i][j]);
            	}
            	//System.out.printf(""\n"");
            }
            //System.out.printf(""ann: %s %s\n"", announce[0], announce[1]);
           
            //System.out.printf(""hahhaha %s %s %s\n"", matrix[0][0], matrix[0][1], matrix[0][2]);
            
            int straight_line = 0;
            int flag;
            for(i=0; i<num; i++){
            	flag = 0;
            	for(j=0; j<num; j++){
            		if ( matrix[i][j].equals(announce[0]) || matrix[i][j].equals(announce[1])){
            			flag ++;
            		}else{
            			break;
            		}
            	}
            	if(flag==num){
            		straight_line++;
            	}
            }
            
            for(j=0; j<num; j++){
            	flag = 0;
            	for(i=0; i<num; i++){
            		if ( matrix[i][j].equals(announce[0]) || matrix[i][j].equals(announce[1])){
            			flag ++;
            		}else{
            			break;
            		}
            	}
            	if(flag==num){
            		straight_line++;
            	}
            }
            
            for(i=0; i<num; i++){
            	flag = 0;
        		if ( matrix[i][i].equals(announce[0]) || matrix[i][i].equals(announce[1])){
        			flag ++;
        		}else{
        			break;
        		}
            	if(flag==num){
            		straight_line++;
            	}
            }
            
            for(i=0; i<num; i++){
            	flag = 0;
        		if ( matrix[i][num-1-i].equals(announce[0]) || matrix[i][num-1-i].equals(announce[1])){
        			flag ++;
        		}else{
        			break;
        		}
            	if(flag==num){
            		straight_line++;
            	}
            }
            System.out.printf(""%d\n"", straight_line);
            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
        }
    }
}

@12675c855f36bf4d6d1db36f57f4c738@","10"
"b02611023","@655ba47c4666b0c5ece44e2b884fd6f9@import java.io.*;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(""input.txt""))){

            // read a line and split by ','
            String [] data = br.readLine().split("","");

            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            announce = br.readLine().split("","");

            String[][] matrix = new String[num][num];
            for(int i = 0; i < num; i ++){
            	matrix[i] = br.readLine().split("","");
            }

            int dot = 0;
            int dot1 = 0;
            int dot2 = 0;
            int dot3 = 0;
            int line = 0;

            for(int j = 0; j < num; j ++){
            	if(matrix[j][j].equals(announce[0]) | matrix[j][j].equals(announce[1])){
            		dot = dot + 1;
            	}
            	if(matrix[num-j-1][j].equals(announce[0]) | matrix[num-j-1][j].equals(announce[1])){
            		dot1 = dot1 + 1;
            	}
            	for(int k = 0; k < num; k ++){
            		if(matrix[j][k].equals(announce[0]) | matrix[j][k].equals(announce[1])){
            			dot2 = dot2 + 1;
            		}
            		if(matrix[k][j].equals(announce[0]) | matrix[k][j].equals(announce[1])){
            			dot3 = dot3 + 1;
            		}
            	}
            	if(dot == num){
            		line = line + 1;
            	}
            	if(dot1 == num){
            		line = line + 1;
            	}
            	if(dot2 == num){
            		line = line + 1;
            		dot2 = 0;
            	}
            	else{
            		dot2 = 0;
            	}
            	if(dot3 == num){
            		line = line + 1;
            		dot3 = 0;
            	}
            	else{
            		dot3 = 0;
            	}
            }

            System.out.println(line);
        }
    }
}

@655ba47c4666b0c5ece44e2b884fd6f9@","10"
"r04921094","@3298344207af76434338b2314da92ced@package homework0;

import java.io.BufferedReader;
import java.io.FileReader;

public class Bingo {

	public static void main(String[] args) throws Exception {					// exception for BufferedReader
		// TODO Auto-generated method stub
		String[] numberData;				// register for number data
		String[] bingoString;			// bingo input string
		String[][] bingoMapString;		// bingo map string
		int numOfString;					// for bingo input string size 
		int sizeOfMatrix;				// for bingo map string size
		BingoMap bingoMap;
		
		BufferedReader br = new BufferedReader(new FileReader(args[0]));		// get the filename from args
		numberData = br.readLine().split("","");
		numOfString = Integer.valueOf(numberData[0]);
		sizeOfMatrix = Integer.valueOf(numberData[1]);
		bingoString = new String[numOfString];
		bingoString = br.readLine().split("","");
		/*for(int i = 0; i < numOfString; i++){
			System.out.print(bingoString[i] + "" "");
		}*/
		bingoMapString = new String[sizeOfMatrix][sizeOfMatrix];
		
		// TODO BingoMapString input format check
		for(int i = 0; i < sizeOfMatrix; i++){
			bingoMapString[i] = br.readLine().split("","");
			/*for(int j = 0; j < sizeOfMatrix; j++){
				System.out.print(bingoMapString[i][j] + "" "");
			}
			System.out.println();*/
		}
		
		bingoMap = new BingoMap(bingoMapString, sizeOfMatrix);
		bingoMap.inputString(bingoString, numOfString);
		System.out.println(bingoMap.result());
	}
}

class BingoMap{
	String[][] mapString;
	String[] inputString;
	int numOfString;
	int sizeOfMap;
	
	public BingoMap(String[][] mapString, int sizeOfMap){
		this.mapString = mapString;
		this.sizeOfMap = sizeOfMap;
	}
	
	void inputString(String[] inputString, int numOfString){
		this.inputString = inputString;
		this.numOfString = numOfString;
	}
	
	int result(){
		// TODO algorithm for output right answer
		return this.bingoAlg(digitallize());
	}
	
	boolean[][] digitallize (){
		boolean[][] booleanMap = new boolean[sizeOfMap][sizeOfMap];
		
		for(int i=0; i < sizeOfMap; i++){
			for(int j=0; j < sizeOfMap; j++){
				for(int k=0; k< numOfString; k++){
					if(booleanMap[i][j] == false)
						booleanMap[i][j] = mapString[i][j].equals(inputString[k]);
				}
			}
		}
		/*
		for(int i = 0; i<sizeOfMap; i++){
			for(int j = 0; j<sizeOfMap; j++)
				System.out.print(booleanMap[i][j]);
			System.out.println();
		}*/
		
		return booleanMap;
	}
	
	int bingoAlg(boolean[][] booleanMap){	
		int result = 0;
		boolean[][] resultMapFlag = new boolean[3][];		// flags for all map
		resultMapFlag[0] = new boolean[sizeOfMap];			// flags for column
		resultMapFlag[1] = new boolean[sizeOfMap];			// flags for row
		resultMapFlag[2] = new boolean[2];					// flags for diagonal
		
		for(int i=0; i<sizeOfMap; i++){
			for(int j=0; j<sizeOfMap; j++){
				if(booleanMap[i][j] == false){
					resultMapFlag[0][i] = true;
					resultMapFlag[1][j] = true;
					if(i == j){
						resultMapFlag[2][0] = true;
					}
					else if(i == sizeOfMap - j){
						resultMapFlag[2][1] = true;
					}
				}
			}
		}
		
		for(boolean[] resultMapFlagRow: resultMapFlag){
			for(boolean resultFlag: resultMapFlagRow){
				if(resultFlag == false){
					result++;
				}
			}
		}
		
		return result;
	}
}

@3298344207af76434338b2314da92ced@","10"
"b03106003","@e79996290f839527d75a8e7d5c5db3b0@public class Bingo {

 
    public static void main(String[] args) {
        // TODO code application logic here
        int sum = 0;
        String tmp[] = args[0].split("","");
        int m = Integer.valueOf(tmp[0]);
        int n = Integer.valueOf(tmp[1]);
        
        String ans[] = new String[m];
        ans = args[1].split("","");
        
        String map [][] = new String[n][n];
        int flag[][] = new int [n][n];
        
        
        for(int i = 0; i<n; i++){
            map[i] =  args[i+2].split("","");                   
        }
        
        for(int i =0 ; i<flag.length; i++){
            for(int j = 0; j < flag[i].length; j++){
                flag[i][j] = 0;            
            }
        }
        
        for(int q = 0; q < ans.length ; q++){
            for(int i = 0 ; i< flag.length; i++){
                for(int j = 0; j < flag[i].length; j++){
                    if (map[i][j].equals(ans[q])){
                        flag[i][j] = 1; 
                    }
                }
            }
        }
        int temp = 0;
        int temp2 = 0;
        int temp3 = 0;
        for(int i = 0; i < flag.length ; i++){
            if (flag[i][i] != 0){
                for(int j = 0; j < flag[i].length; j++){
                    temp2 = temp2 + flag[i][j];
                    
                    temp3 = temp3 + flag[j][i];
                    
                    }
                    
                if (temp2 == n){
                        sum = sum + 1;
                    }
                 temp2 = 0;    
                if (temp3 == n){
                        sum = sum + 1;
                    }
                 temp3 = 0;    
                
            }
            temp = temp + flag[n-1-i][i];
        }
            if (temp == n){
                sum = sum + 1;
            }
            temp = 0;
        
            System.out.println(sum);
        
        
        
    }
    
}

@e79996290f839527d75a8e7d5c5db3b0@","10"
"b02611019","@0a7bd1e8a2121da3322a52207991e370@import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        BufferedReader br = new BufferedReader(new FileReader(args[0]));
            
        // read a line and split by ','
        
        String[] data = br.readLine().split("","");

        // store the first integer in variable stringCount (number of announced strings)
        int stringCount = Integer.parseInt(data[0]);

        // store the second integer in variable num (dimension of matrix: num * num)            
        int num = Integer.parseInt(data[1]);

        // initilization of a String array in Java
        String[] announce = new String[stringCount];
        String[][] matrix = new String[num][num];
        

        // printf in Java (you should comment out or delete this in your final submission)
//        System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);

        
        announce = br.readLine().split("","");
        for (int i=0;i<num;i++){
            String[] content = br.readLine().split("","");
            
            for (int j=0;j<num;j++){
//                StdOut.print(content[j]);
                matrix[i][j]=content[j];
            }
//            System.out.print(""\n"");
        }
        int answer=0;
        int[] x=new int[num];
        int[] y=new int[num];
        int[] z=new int[2];
        for (int i=0;i<num;i++){
            x[i]=y[i]=0;
            for (int j=0;j<num;j++){
                if ((Arrays.binarySearch(announce, matrix[i][j]))<0){
                    x[i]++;
                    y[j]++;
                    
                }
                if (i==j&&(Arrays.binarySearch(announce, matrix[i][j]))<0)
                    z[0]++;
                if (i+j==num&&(Arrays.binarySearch(announce, matrix[i][j]))<0)
                    z[1]++;
            }
            
        }
        for(int i=0;i<num;i++){
            if(x[i]==0)
                answer++;
            if(y[i]==0)
                answer++;
            if(z[0]==0)
                answer++;
            if(z[1]==0)
                answer++;
                
        }            
        System.out.print(answer);
            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
        
    }
}

@0a7bd1e8a2121da3322a52207991e370@","10"
"b03611035","@26ec41a2fb8347cd0f6d116185b63a65@import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {

    @SuppressWarnings(""empty-statement"")
    public static void main(String[] args) throws Exception {
 // read file from args[0] in Java 7 style
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            //讀要殺的國家(第二行)存入killcountry
            String[] killcountry;
            killcountry = br.readLine().split("","");
            //要殺的國家數(字元)存成整數
            int stringCount = Integer.parseInt(data[0]);
            //幾階的國家(字元)存成整數      
            int num = Integer.parseInt(data[1]);
            
            //做出存賓果的二維陣列(ccr為currentcountry的縮寫)
            String[][] ccr=new String[num][num];
            int i;
            for (i=0; i<num;i++){
            ccr[i] = br.readLine().split("","");
            }

            //死去的國家都存0
            for (i=0; i<num;i++){
                for(int j=0;j<num;j++){
                    for(int k=0;k<stringCount;k++){                        
                         if(ccr[i][j].equals(killcountry[k]))
                             ccr[i][j]=""0"";
                         }                 
                  }
            }
            
            //開始檢查，設計數器
            int count;
            count = 0;
            
            //檢查橫排        
            for(i=0;i<num;i++){ 
                    for(int j=0;j<num;j++){
                        if(!ccr[i][j].equals(""0"")){
                                break;
                            }
                        else if(j==num-1)
                            count++;
                     }
                }            
            
            //檢查直排            
            for(int j=0;j<num;j++){
                for(i=0;i<num;i++){
                    if(!ccr[i][j].equals(""0"")){
                        break;
                    }
                    else if(i==num-1)
                        count++;
                }                               
             }
            
             //檢查對角線 1
              for(i=0;i<num;i++){
                  if(!ccr[i][i].equals(""0"")){
                      break;
                  }
                  else if(i==num-1)
                      count++;                  
              }
              
              //檢查對角線 2
              for(i=num-1;i>0;i--){
                  if(!ccr[i][i].equals(""0"")){
                      break;
                  }
                  else if(i==0)
                      count++;                  
              }
              
              System.out.println(count);
        }          
    }                      
}
@26ec41a2fb8347cd0f6d116185b63a65@","10"
"r03222054","@1db31da25a805607f8d31993b4cae1ad@import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {
    
    public static int count =0;
    
    
    public static int calculate(boolean[][] check, int num)
    {
        
        //calculate the colum
        for(int i = 0; i<num ; i++)
        {

                boolean key = check[0][i];
                for (int j =1; j<num; j++)
                {
                   key = (check[j][i] && key);
                }
                
                 if(key)
                 count++;
        }
        
        //calculate the row
        
              for(int i = 0; i<num ; i++)
        {

                boolean key = check[i][0];
                for (int j =1; j<num; j++)
                {
                   key = (check[i][j] && key);
                }
             if(key)
                 count++;
        }
              
       
//calculate the diagonal
       {
            boolean key = check[0][0];
            for (int i = 1; i < num; i++) 
            {
                key = (check[i][i] && key);
            }
            
            if (key) 
            {
                count++;
            }
        }

        {
            boolean key = check[num - 1][0];
            for (int i = 1; i < num; i++) 
            {
                key = (check[num - 1 - i][i] && key);
            }
            if (key) 
            {
                count++;
            }
        }
        
        return count;  
        
        
    }

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];

            // printf in Java (you should comment out or delete this in your final submission)
            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);
            
            
         //   System.out.print(announce.length+""\n"");
            announce= br.readLine().split("","");
            boolean[][] check = new boolean [num][num];

            for (int i =0 ; i<num; i++)
            {
               data = br.readLine().split("","");
               for( int j=0 ; j<num; j++ )
               {
                   matrix[i][j]= data[j];    
                   check[i][j] = false;
                   for (int k=0; k<announce.length; k++)
                   {
                       if (matrix[i][j].equals(announce[k]))
                       {
                           check[i][j] = true;
                           //System.out.print(check[i][j]+""\t"");
                       }             
                   }
                   
                   System.out.print(check[i][j]+""\t"");            
               }
                System.out.print(""\n"");
            }
            
            System.out.print( calculate(check, num)+""\n"");
            
            
 
            
            
            
            
            

            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
            
            
            
            
        }
    }
}

@1db31da25a805607f8d31993b4cae1ad@","10"
"r04942099","@75e7849b4fd3b5e48e310ad3a5a108b0@import java.io.FileReader;
import java.io.BufferedReader;


public class Bingo  {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);
           

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];
            int[][] match = new int[num][num];
            int temp1 = 0;
            int temp2 = 0;
            int count = 0;
            // printf in Java (you should comment out or delete this in your final submission)
            //System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);
            String[] m = br.readLine().split("" "");
           
            String[] bg = m[0].split("","");
            
            for(int i=0; i<num; i++){
                String[] bg2 = m[i+1].split("","");
                for(int j=0;j<num;j++){
                    matrix[i][j] = bg2[j];
                    //System.out.println(matrix[i][j]);
                }
            }
            for(int i=0; i<stringCount; i++){
                announce[i] = bg[i];
                //System.out.println(announce[i]);
            }

            for(int i=0; i<num; i++){
                for(int j=0; j<num; j++){
                    match[i][j] = 0;
                    for(int k=0; k<stringCount; k++){
                        if(matrix[i][j].equals(announce[k])) match[i][j]=1;
                    }
                   // System.out.println(match[i][j]);
                }
            }
            for(int i=0; i<num; i++){
                temp1 = 1;
                temp2 = 1;
                for(int j=0; j<num;j++){
                    if(match[i][j]==0) temp1 =0;
                    if(match[j][i]==0) temp2 =0;
                }
                count = count + temp1 + temp2;
            }
            temp1 = 1;
            temp2 = 1;
            for(int i=0; i<num; i++){
                if(match[i][i]==0) temp1 = 0;
                if(match[i][num-1-i]==0) temp2 = 0;
            }
            count = count  + temp1 + temp2;
            
            System.out.println(count);
            
            
            
            
            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
        }
    }
}

@75e7849b4fd3b5e48e310ad3a5a108b0@","10"
"r04228002","@71dd88f17409902ef766abc746e60611@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bingo;
import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;
/**
 *
 * @author Lenovo
 */
public class Bingo {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws Exception{
        // TODO code application logic here
        FileReader fr = new FileReader(args[0]);
        BufferedReader br = new BufferedReader(fr);
        String[] data = br.readLine().split("","");
        
        int stringCount = Integer.parseInt(data[0]);
        int num = Integer.parseInt(data[1]);
        String[] announce = new String[stringCount];
        String[][] matrix = new String[num][num];
        System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);
        
        //System.out.println(Arrays.deepToString(matrix));
        System.out.println(Arrays.toString(data));
        announce[0]=data[2];
        announce[1]=data[3];
        for (int i = 0; i < 3; i++){
            for (int j = 0; j < 3; j++){
            matrix[i][j] = data[i*3+j+4];
        }
        }
        System.out.println(Arrays.toString(announce));
        System.out.println(Arrays.deepToString(matrix));
        
        int OutNum = 0;
        for (int i = 0; i < 3; i++){
            String S0 = matrix[i][0];
            String S1 = matrix[i][1];
            String S2 = matrix[i][2];
            if (Arrays.asList(announce).contains(S0) & Arrays.asList(announce).contains(S1) & Arrays.asList(announce).contains(S2)){
                  OutNum=OutNum+1;
                    }
            else {
                continue;
                }
        }
        for (int i = 0; i < 3; i++){
            String S0 = matrix[0][i];
            String S1 = matrix[1][i];
            String S2 = matrix[2][i];
            if (Arrays.asList(announce).contains(S0) & Arrays.asList(announce).contains(S1) & Arrays.asList(announce).contains(S2)){
                  OutNum=OutNum+1;
                    }
            else {
                continue;
                }
        }
        String S00 = matrix[0][0];
        String S11 = matrix[1][1];
        String S22 = matrix[2][2];
        if (Arrays.asList(announce).contains(S00) & Arrays.asList(announce).contains(S11) & Arrays.asList(announce).contains(S22)){
            OutNum = OutNum+1;
        }
        String S0 = matrix[0][2];
        String S1 = matrix[1][1];
        String S2 = matrix[2][0];
        if (Arrays.asList(announce).contains(S0) & Arrays.asList(announce).contains(S1) & Arrays.asList(announce).contains(S2)){
            OutNum = OutNum+1;
        }
        System.out.println(OutNum);
} 
}
        
    
    




@71dd88f17409902ef766abc746e60611@","10"
"r03849033","@b90e7c3088651f8a5e9cdf6c050b03dd@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author user
 */
import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(""input1.txt""))){
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
        
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];
            announce = br.readLine().split("","");
            for (int i = 0; i < num; i++){
            matrix[i] = br.readLine().split("","");
            }
            
            boolean[][] mat = new boolean[num][num];
            for (int col = 0; col < num; col++){
                for (int row = 0; row < num; row++){
                    mat[row][col]=false;
                    for (int ann = 0; ann < stringCount; ann++){
                       if(matrix[row][col].equals(announce[ann]))
                       mat[row][col]=true;
                    }
                } 
            }            
            
            
            int count=0;
            //check col
            for (int col = 0; col < num; col++){
                int mark = 0;
                for (int row = 0; row < num; row++){
                    if(mat[row][col]==true){ 
                    mark++;}
                }
                if(mark == num)
                count++;
            }
            
            //check row
            for (int row = 0; row < num; row++){
                int mark = 0;
                for (int col = 0; col < num; col++){
                    if(mat[row][col]==true){ 
                    mark++;}
                }
                if(mark == num)
                count++;
            }

             //check dig
            int mark = 0;
            int mark2 = 0;            
            for (int x = 0; x < num; x++){
                if(mat[x][x]==true)
                    mark++;      
                if(mat[x][num-x-1]==true)
                    mark2++;                 
            }
            if(mark == num)
            count++;
            if(mark2 == num)
            count++;   
 
            System.out.println(count);
            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
        }
    }
}

@b90e7c3088651f8a5e9cdf6c050b03dd@","10"
"r04921104","@84772a9934f5b970a72c1c2b4bc37f51@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hw0;

/**
 *
 * @author daf
 */
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.List;
import java.util.ArrayList;

public class Bingo {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) { // TODO code application logic here

        //Read input and pre-proccess all attribute
        BufferedReader br = null;
        String sCurrentLine;
        List<String[]> info = new ArrayList<String[]>();

        int numAnnounced, size;
        String[] keyName;
        String[][] binngoMtx;

        try {
            br = new BufferedReader(new FileReader(args[0]));

            while ((sCurrentLine = br.readLine()) != null) {
                String[] Line = sCurrentLine.split("","");
                info.add(sCurrentLine.split("",""));
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        numAnnounced = Integer.valueOf(info.get(0)[0]);
        size = Integer.valueOf(info.get(0)[1]);
        keyName = info.get(1);
        binngoMtx = new String[size][size];
        for (int i = 0; i < size; i++) {
            binngoMtx[i] = info.get(i + 2);
        }

        //System.out.println();
        //Start game
        boolean[][] correctMap = new boolean[size][size];
        int[] straightlineIdx = new int[size * 2 + 2];
        int numstraightLine = 0;
        
        for (int row = 0; row < size; row++) {
            for (int col = 0; col < size; col++) {
                for (int k = 0; k < keyName.length; k++) {
                    if (binngoMtx[row][col].equals(keyName[k])) {
                        correctMap[row][col] = true;
                        break;
                    }
                }
                if (!correctMap[row][col]) {
                    straightlineIdx[row] = -1;
                    straightlineIdx[size+col] = -1;
                    if(row == col){
                        straightlineIdx[size*2-1] = -1;
                    }
                    if(row+col == 2){
                        straightlineIdx[size*2] = -1;
                    }
                }
            }
        }
        
        for (int c = 0;c < straightlineIdx.length;c++){
            if(straightlineIdx[c] != -1){
                numstraightLine++;
            }
        }
        System.out.println(numstraightLine);
        

    }

}

@84772a9934f5b970a72c1c2b4bc37f51@","10"
"r04631034","@7a114e3f090ee2f140294cfa7c3853e1@import java.io.FileReader;
import java.io.BufferedReader;
import java.util.*;

public class Bingo {

     public static void main(String[] args) throws Exception {

          // read file from args[0] in Java 7 style
//          try (BufferedReader br = new BufferedReader(new FileReader(""C:/Users/user/Desktop/hw0/input.txt""))) {
          try (BufferedReader br = new BufferedReader(new FileReader(""C:/Users/user/Desktop/hw0/input1.txt""))) {
//                         try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

               String[] data = br.readLine().split("","");

               String line;
               String target = """";
    
               while ((line = br.readLine()) != null) {
                    target += "" "" + line;
               }

               String[] numbersArray = target.split("" "");


//            // store the first integer in variable stringCount (number of announced strings)
               int stringCount = Integer.parseInt(data[0]);
//            System.out.println(data.length);
//            // store the second integer in variable num (dimension of matrix: num * num)            
               int num = Integer.parseInt(data[1]);

               String[] announce = new String[stringCount];
               String[][] matrix = new String[num][num];

               String test1 = numbersArray[1];
               String[] test2 = test1.split("","");
               for (int j = 0; j < test2.length; j++) {
                    announce[j] = test2[j];                
               }

               for (int i = 2; i < numbersArray.length; i++) {
                    String test3 = numbersArray[i];
                    String[] test4 = test3.split("","");
                    for (int j = 0; j < test4.length; j++) {
                         matrix[i - 2][j] = test4[j];                        
                    }
               }

               ArrayList<Integer> Column = new ArrayList();
               ArrayList<Integer> Row = new ArrayList();

               for (int i = 0; i < num; i++) {
                    for (int j = 0; j < num; j++) {
                         for (int k = 0; k < announce.length; k++) {
                              if (matrix[i][j].equals(announce[k]) == true) {
                                   Column.add(i + 1);
                                   Row.add(j + 1);
                              }
                         }
                    }
               }

               int output = 0;

               for (int j = 0; j < num; j++) {
                    int storage = 0;
                    for (int i = 0; i < Row.size(); i++) {
                         if (Column.get(i) == j + 1) {
                              storage++;
                         }
                    }
                    if (storage == num) {
                         output++;
                    }
               }

               for (int j = 0; j < num; j++) {
                    int storage = 0;
                    for (int i = 0; i < Row.size(); i++) {
                         if (Row.get(i) == j + 1) {
                              storage++;
                         }
                    }
                    if (storage == num) {
                         output++;
                    }
               }
               int storage = 0;
               for (int i = 0; i < Row.size(); i++) {
                    if (Row.get(i) == Column.get(i)) {
                         storage++;
                    }
                    if (storage == num) {
                         output++;
                    }
               }
               storage = 0;
               for (int i = 0; i < Row.size(); i++) {
                    if (Row.get(i) + Column.get(i) == num + 1) {
                         storage++;
                    }
                    if (storage == num) {
                         output++;
                         storage = 0;
                    }
               }
               System.out.println(output);
          }
     }
}




@7a114e3f090ee2f140294cfa7c3853e1@","10"
"r04921044","@fb3bc96c9241e6757061077dcbfcb09a@import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;

public class Bingo {
    public static void main(String[] args) throws Exception {
        try (BufferedReader buffer = new BufferedReader(new FileReader(args[0]))) {
            String[] numbersString = buffer.readLine().split("","");
            int crossCount = Integer.parseInt(numbersString[0]);
            int mapLength = Integer.parseInt(numbersString[1]);

            String[] crossNames = buffer.readLine().split("","");

            Boolean[][] map = new Boolean[mapLength][mapLength];

            for (int i=0; i<mapLength; ++i) {
                String[] mapNames = buffer.readLine().split("","");
                for (int j=0; j<mapLength; ++j) {
                    if (Arrays.asList(crossNames).contains(mapNames[j])) {
                        map[i][j] = true;
                    }
                    else {
                        map[i][j] = false;
                    }
                }
            }

            Bingo bingo = new Bingo();
            System.out.println(bingo.checkLineCount(map, mapLength));
        }
    }

    public int checkLineCount(Boolean[][] map, int mapLength) {
        int count = 0;

        // count row
        for (int i=0; i<mapLength; ++i) {
            Boolean shouldIncrement = true;
            for (int j=0; j<mapLength; ++j) {
                if (!map[i][j]) {
                    shouldIncrement = false;
                    break;
                }
            }
            if (shouldIncrement) {
                count++;
            }
        }

        // count column
        for (int i=0; i<mapLength; ++i) {
            Boolean shouldIncrement = true;
            for (int j=0; j<mapLength; ++j) {
                if (!map[j][i]) {
                    shouldIncrement = false;
                    break;
                }
            }
            if (shouldIncrement) {
                count++;
            }
        }

        // count diagonal
        Boolean shouldIncrement = true;
        for (int i=0; i<mapLength; ++i) {
            if (!map[i][i]) {
                shouldIncrement = false;
                break;
            }
        }
        if (shouldIncrement) {
            count++;
        }

        shouldIncrement = true;
        for (int i=0; i<mapLength; ++i) {
            if (!map[i][mapLength - i - 1]) {
                shouldIncrement = false;
                break;
            }
        }
        if (shouldIncrement) {
            count++;
        }

        return count;
    }
}
@fb3bc96c9241e6757061077dcbfcb09a@","10"
"r04631004","@c5b0d31f1a313dc77869df11c353fd9a@package javaapplication2;

import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;

public class JavaApplication2 {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];

            // printf in Java (you should comment out or delete this in your final submission)
            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);
                                 
            data = br.readLine().split("",""); //read second line
            
            int i,j,k;
            for(i=0;i<data.length;i++)  //bingo announce
                announce[i]=data[i];    
            
            int[][] bingocheck = new int[num][num];
            
            int tempcount=1;
            for(i=0;i<num;i++)   //bingo element
                for(j=0;j<num;j++)
                {
                    if(i!=tempcount)
                    {
                        data = br.readLine().split("","");  //read bingo element
                        tempcount=i;
                    }
                    matrix[i][j]=data[j];
                    //System.out.println(data.length);
                    for(k=0;k<stringCount;k++)
                        if(matrix[i][j].equals(announce[k])==true)
                        {
                            bingocheck[i][j]=1;
                            break;
                        }
                            
                    if(j==num-1)
                        System.out.println(bingocheck[i][j]);
                    else
                        System.out.print(bingocheck[i][j]+"" "");
                }
            
            int tempnum=num;
            int bingoline=2*num+2;
            int rowlinecheck=0,collinecheck=0,rightdialinecheck=0,leftdialinecheck=0;
            for(i=0;i<num;i++)   //check num of bingoline
                for(j=0;j<num;j++)
                {
                    if(bingocheck[i][j]!=1 && rowlinecheck==0)  //check rowline
                    {
                        bingoline=bingoline-1;
                        rowlinecheck=1;
                    }
                    if(bingocheck[j][i]!=1 && collinecheck==0)  //check colline
                    {
                        bingoline=bingoline-1;
                        collinecheck=1;
                    }
                    if(i==j && bingocheck[j][i]!=1 && rightdialinecheck==0)  //check right-dialine
                    {
                        bingoline=bingoline-1;
                        rightdialinecheck=1;
                    }
                    if(i+j==num-1 && (bingocheck[j][i]!=1 || bingocheck[i][j]!=1) && leftdialinecheck==0)  //check left-dialine
                    {
                        bingoline=bingoline-1;
                        leftdialinecheck=1;
                    }
                    if(j==num-1)
                    {
                        rowlinecheck=0;
                        collinecheck=0;
                    }
                }
            System.out.printf(""Number of straight line: %d%n"",bingoline);
           
            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
        }
    }
}
@c5b0d31f1a313dc77869df11c353fd9a@","10"
"r04631026","@eb357d97c48aeba68fe88adfd0b624d0@import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];

            // printf in Java (you should comment out or delete this in your final submission)
            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);
            announce = br.readLine().split("","");
            announce[stringCount-1] = announce[stringCount-1].trim();
            //store matrix parameters
            String[] Temp = {"""","""",""""};
            for (int i=0;i<num;i++){
                Temp = br.readLine().split("","");
                for(int j=0;j<num;j++){
                    matrix[i][j] = Temp[j].trim();
                }                
            }
            //count the bingo line
            int BingoNumber = 0;
            //check bingo or not
            int BingoTemp = 0;
            //bingo meet the announce
            boolean BingoCheck = false;
            //check column bingo
            for (int i = 0;i<num;i++){
                for (int j = 0;j<num;j++){
                    for (int k=0;k<stringCount;k++){
                        if ((matrix[i][j]).equals((announce[k].trim()))){
                            BingoCheck = true;
                        }
                    }
                    if (BingoCheck){
                        BingoTemp++;
                        BingoCheck=false;
                    }
                    else{BingoCheck=false;}
                }
                if(BingoTemp==num){BingoNumber +=1 ;BingoTemp = 0;}
                else {BingoTemp = 0;}
            }
            //check row bingo            
            for (int i = 0;i<num;i++){
                for (int j = 0;j<num;j++){
                    for (int k=0;k<stringCount;k++){
                        if ((matrix[j][i]).equals((announce[k].trim()))){
                            BingoCheck = true;
                        }
                    }
                    if (BingoCheck){
                        BingoTemp++;
                        BingoCheck=false;
                    }
                    else{BingoCheck=false;}
                }
                if(BingoTemp==num){BingoNumber +=1 ;BingoTemp = 0;}
                else {BingoTemp = 0;}
            }
            //check Main diagonal
            for (int i=0;i<num;i++){
                for(int j=0;j<stringCount;j++){
                    if ((matrix[i][i]).equals(announce[j].trim())){
                        BingoCheck = true;
                    }
                }
                if (BingoCheck){
                    BingoTemp++;
                    BingoCheck = false;
                }
                else{BingoCheck = false;}
            }
            if(BingoTemp==num){BingoNumber +=1 ;BingoTemp = 0;}
            else {BingoTemp = 0;}
            //check Secondary diagonal
            for (int i=0;i<num;i++){
                for(int j=0;j<stringCount;j++){
                    if ((matrix[i][num-i-1]).equals(announce[j].trim())){
                        BingoCheck = true;
                    }
                }
                if (BingoCheck){
                    BingoTemp++;
                    BingoCheck = false;
                }
                else{BingoCheck = false;}
            }
            if(BingoTemp==num){BingoNumber +=1 ;BingoTemp = 0;}
            else {BingoTemp = 0;}
            StdOut.println(BingoNumber);
            BingoTemp = 0;
            
//            StdOut.println(BingoTemp);
//            for (int i=0; i<num; i++){
//                for (int j=0; j<num;j++){
//                    System.out.print(matrix[i][j] + "" "");                  
//                }
//            }
//            StdOut.println(matrix);
//            String[] test = br.readLine().split("","");
//            StdOut.println(test);
            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
        }
    }
}

@eb357d97c48aeba68fe88adfd0b624d0@","10"
"r04945021","@dcf06123a306c4239c4ee3fc60a335d5@
import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            // read a line and split by ','
            String[] data = br.readLine().split("","");

            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];

            // printf in Java (you should comment out or delete this in your final submission)
//            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);

            // strings announced for Bingo game         
            String[] announcedata = br.readLine().split("","");
            announce=Arrays.copyOf(announcedata,stringCount);

            for (int n = 0; n < num; n++) {
                String[] matrixdata = br.readLine().split("","");
                matrix[n]=Arrays.copyOf(matrixdata,num);
            }
            int StraightLine = 0;
            int SameCountrow = 0;
            int SameCountcol = 0;
           

            for (int n = 0; n < num; n++) {
                for (int m = 0; m < num; m++) {
                    for (int i = 0; i < stringCount; i++) {
                        if (matrix[n][m].equals(announce[i])) {
                            SameCountrow++;
                           
                        }
                        if (matrix[m][n].equals(announce[i])) {
                            SameCountcol++;
                            
           
                        }
                        
                    }
                }
                if (SameCountrow == num) {
                    StraightLine++;
                    SameCountrow = 0;
                }
                if (SameCountcol == num) {
                    StraightLine++;
                    SameCountcol = 0;
                }
   
            }
           int SameCountdia1 = 0;
           int SameCountdia2 = 0;
            int Num = num-1;
            for (int n = 0; n < num; n++) {
                for (int i = 0; i < stringCount; i++) {
                    if (matrix[n][Num].equals(announce[i])) {
                        SameCountdia2++;
                    }
                    if (matrix[n][n].equals(announce[i])) {
                        SameCountdia1++;
                    }
                }
                Num--;
  
            }
            if (SameCountdia1 == num) {
                StraightLine++;
            }
              if (SameCountdia2== num) {
                StraightLine++;
            }
 
            System.out.printf(""%d"", StraightLine);
        }

        /*  now you can write your own solution to hw0
         *  you can follow the instruction described below:
         * 
         *  1. read the rest content of the file
         *  2. store the announce strings (2nd line of the file) in variable announce
         *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
         *  4. compare the matrix and announce strings (this is the tricky part)
         *  5. output how many 'straight line' are there in the matrix
         * 
         *  [note]
         *  you can use every data structure in standard Java packages (Java 8 supported)
         *  the packages in stdlib.jar and algs4.jar are also available for you to use
         *
         *  [hint]
         *  1. you should check whether Java pass the variable by references or by values.
         *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
         *     useful for solving problems. 
         */
    }
}
    


@dcf06123a306c4239c4ee3fc60a335d5@","10"
"r04921051","@d8fc9362624d3f468eeedc6da56d201b@import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];
            
            //matrix for bingo
            int[][] matrix_int = new int[num][num];
            
            //read the rest content of the file
            String[] country = br.readLine().split("","");
            
            for(int i = 0; i < num; i++){
                matrix[i] = br.readLine().split("","");
            }

            for(int w = 0; w < stringCount; w++){                           
                for(int i = 0;i < num; i++){
                    for(int j = 0;j < num; j++){
                        if(country[w].equals(matrix[i][j]))
                            matrix_int[i][j] = 1;
                    }
                }
            }
            
            int line = 0;
            
            //row  
            for(int i = 0; i < num; i++){
                int temp = matrix_int[i][0];
                for(int j = 1; j < num; j ++){
                    temp = temp + matrix_int[i][j];
                    }
                if(temp == 3)
                    line++;
            }    

            //column  
            for(int i = 0; i < num; i++){
                int temp = matrix_int[0][i];
                for(int j = 1; j < num; j ++){
                    temp = temp + matrix_int[j][i];
                    }
                if(temp == 3)
                    line++;
            }  
            
            // ""\""  
            int temp = matrix_int[0][0];
            for(int i = 1; i < num; i++){
                temp = temp + matrix_int[i][i];
            }                         
            if(temp == 3)
            line++;
            
            // ""/""  
            int temp2 = matrix_int[num - 1][0];
            for(int i = 1; i < num; i++){
                temp2 = temp2 + matrix_int[num-1-i][i];
            }                         
            if(temp2 == 3)
            line++;
            
                
            System.out.println(line);
            
        }
    }
}

@d8fc9362624d3f468eeedc6da56d201b@","10"
"b03611023","@cce923d378751a1a24bec430fa22a7a0@
import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {

    public static void main(String[] args) throws Exception {

        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] data = br.readLine().split("","");

            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            String[] cont = new String[stringCount];
            String[][] matrix = new String[num][num];

            cont = br.readLine().split("","");
            int i;
            int j;
            for (i = 0; i < stringCount; i++) {
            }
            i = 0;
            while (i < num) {
                matrix[i] = br.readLine().split("","");
                i++;
            }
            int[][] one = new int[num][num];

            for (i = 0; i < num; i++) {
                for (j = 0; j < num; j++) {
                    int bin;
                    for (bin = 0; bin < stringCount; bin++) {
                        if (matrix[i][j].compareTo(cont[bin]) == 0) {
                            one[i][j] = 1;
                            break;
                        } else {
                            one[i][j] = 0;
                        }
                    }
                }
            }
            
            int count = 0;
            int k;
            for (i = 0; i < num; i++) {
                k = 0;
                for (j = 0; j < num; j++) {
                    k += one[i][j];
                }
                if (k == 3) {
                    count++;
                }
            }
            for (j = 0; j < num; j++) {
                k = 0;
                for (i = 0; i < num; i++) {
                    k += one[i][j];
                }
                if (k == 3) {
                    count++;
                }
            }
            k = 0;
            for (i = 0; i < num; i++) {
                k += one[i][i];
            }
            if (k == 3) {
                count++;
            }
            k = 0;
            for (i = 0; i < num; i++) {
                k += one[num -1- i][i];
            }
            if (k == 3) {
                count++;
            }
System.out.print(count);
            
               
               
            
            
            

            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
        }
    }
}

@cce923d378751a1a24bec430fa22a7a0@","10"
"r04546014","@45910f008cfe5ddd7459fefd7d01e927@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.io.FileReader;
import java.io.BufferedReader;

/**
 *
 * @author Jayden
 */
public class Bingo {

    public static void main(String[] args) throws Exception {
        //讀檔(利用args[0]為檔名input)
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            String[] data;
            data = br.readLine().split("","");
            //城市數量為第一個數
            int countryCount = Integer.valueOf(data[0]);
            //矩陣大小為第二個數
            int matrixSize = Integer.valueOf(data[1]);

            String[] announce = new String[countryCount];
            String[][] matrix = new String[matrixSize][matrixSize];
            //定義好兩個陣列用來存儲檔案資料
            announce = br.readLine().split("","");
            //第二行為宣告的國家
            for (int i = 0; i < matrixSize; i++) {
                matrix[i] = br.readLine().split("","");
            }
            //第三行以後為Bingo內容

            int count = 0;
            byte[][] checkMatrix = new byte[matrixSize][matrixSize];
            for (int i = 0; i < matrixSize; i++) {
                int a = 0;
                for (int j = 0; j < matrixSize; j++) {
                    for (int k = 0; k < countryCount; k++) {
                        if (matrix[i][j].equals(announce[k])) {
                            checkMatrix[i][j] = 1;
                            a++;
                            break;
                        }
                    }
                }
                if (a == matrixSize) {
                    count++;
                }
            }
            //將所有的字檢查一次看有沒有可以圈起來的(圈起來設為1)
            //順便檢查是否有橫線可以畫(一條線count就++)

            for (int i = 0; i < matrixSize; i++) {
                int b = 0;
                for (int j = 0; j < matrixSize; j++) {
                    if (checkMatrix[j][i] == 1) {
                        b++;
                    }
                }
                if (b == matrixSize) {
                    count++;
                }
            }
            //檢查是否有直線可以畫

            int c = 0;
            int d = 0;
            for (int i = 0; i < matrixSize; i++) {
                if (checkMatrix[i][i] == 1) {
                    c++;
                }
                if (checkMatrix[i][matrixSize - 1 - i] == 1) {
                    d++;
                }
            }
            if (c == matrixSize) {
                count++;
            }
            if (d == matrixSize) {
                count++;
            }
            //檢查是否有協線可以畫
            System.out.println(count);

        }
    }

}

@45910f008cfe5ddd7459fefd7d01e927@","10"
"r04921012","@f0f325b2dffe255462c9ae4a511dd4cc@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bingo;

import java.io.BufferedReader;
import java.io.FileReader;

/**
 *
 * @author steven
 */
public class Bingo {

    /**
     * @param args the command line arguments
     */
     public static void main(String[] args) throws Exception {
        // TODO code application logic here
        
        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
        //try(BufferedReader br = new BufferedReader(new FileReader(""test.txt""))){
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];
            boolean[][] bool=new boolean[num][num];

            // printf in Java (you should comment out or delete this in your final submission)
            //System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);
            
            announce = br.readLine().split("","");

            String[] line= new String[num];
            int counter=0;
            //while ((line=br.readLine().split("",""))!=null){
                
            for (int i=0; i<num;i++){
                line=br.readLine().split("","");
                matrix[counter]=line;
                counter++;
                
            }
            //System.out.println(matrix[0][2].equals(announce[0]));
            for (int y=0;y<num;y++){
                for (int x=0;x<num;x++){
                    for (int i=0;i<stringCount;i++){
                        //System.out.println(announce[0]);
                        //System.out.println(matrix[0][2]);
                        //System.out.println(announce[i]);
                        if (!bool[y][x]){
                            bool[y][x] = matrix[y][x].equals(announce[i]);
                        }
                    }
                    //System.out.println(bool[y][x]);
                }
            }
            int straightLine=0;
            
            for (int y =0;y<num;y++){
                for (int x = 0; x< num ;x++){
                    if (bool[y][x]==false){
                        break;
                    }else{
                    }
                    if (x==num-1){
                        straightLine++;
                    }
                }
            } 
            boolean[][] newbool=new boolean[num][num];
            
            for (int y=0; y<num;y++){
                for (int x = 0; x< num ;x++){
                    newbool[x][y]=bool[y][x];
                }
            }
            
            for (int y =0;y<num;y++){
                for (int x = 0; x< num ;x++){
                    if (newbool[y][x]==false){
                        break;
                    }else{
                    }
                    if (x==num-1){
                        straightLine++;
                    }
                }
            } 
            
            for (int i=0;i<num;i++){
                if (bool[i][i]==false){
                    break;
                }else{
                    
                }
                if (i==num-1){
                    straightLine++;
                }
            }
            for (int i=0;i<num;i++){
                if (newbool[i][i]==false){
                    break;
                }else{
                    
                }
                if (i==num-1){
                    straightLine++;
                }
            }
            //System.out.println(bool[2][2]);
            System.out.printf(""number of straight line : "",straightLine);
            
            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
        }
     }
}

@f0f325b2dffe255462c9ae4a511dd4cc@","10"
"b03611033","@15ddc20d06368aa846612da843b8d94d@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bingo;

import java.io.FileReader;
import java.io.BufferedReader;
//import.java.util.Arrays;

/**
 *
 * @author user
 */
public class Bingo {

    /**
     * @param args the command line arguments
     */
     
    
    public static void main(String[] args) throws Exception 
    {
            // read file from args[0] in Java 7 style
            try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);
            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];

            //String str = null;
            // if((str = br.readLine()) != null){
            String[] data2 = br.readLine().split("","");
                for (int i=0;i<stringCount;i++)
                {
                    announce[i]=data2[i];
                    //System.out.println(announce[i]);
                }
 
                for(int j=0;j<num;j++)
                {
                    data2 = br.readLine().split("","");
                    
                    for(int k=0;k<num;k++)
                    {
                        matrix[j][k]=data2[k];
                        //System.out.println(matrix[j][k]);
                    }
                }
              
                int[][]  aftercom = new int[num][num];
                                
                for(int j=0;j<num;j++)
                {
                    for(int k=0;k<num;k++)
                    {
                        aftercom[j][k]=0;
                        for(int i=0;i<stringCount;i++)
                        {
                            if(matrix[j][k].equals(announce[i]))
                            {
                                aftercom[j][k]=1;
                                break;
                            }
                        }
                        //System.out.println(aftercom[j][k]);
                    }
                }
            
                int bingoline=0;
            
            for(int j=0;j<num;j++)
            {
                for(int k=0;k<num;k++)
                {
                    if(aftercom[j][k]==0)
                    {
                        break;
                    }
                    if(k==num-1)
                    {
                        bingoline++;
                    }
                }  
            }
            for(int j=0;j<num;j++)
            {
                for(int k=0;k<num;k++)
                {
                    if(aftercom[k][j]==0)
                    {
                        break;
                    }
                    if(k==num-1)
                    {
                        bingoline++;
                    }
                }
            }
            
            for(int j=0; j<num;j++)
            {
                if(aftercom[j][j]==0)
                {
                    break;
                }
                if(j==num-1)
                {
                    bingoline++;
                }
            }
            for(int j=0; j<num;j++)
            {
                if(aftercom[j][num-1-j]==0)
                {
                    break;
                }
                if(j==num-1)
                {
                    bingoline++;
                }
            }
            
            System.out.println(bingoline);
        }
    }
}

@15ddc20d06368aa846612da843b8d94d@","10"
"r04921028","@1b001450402161b352d6980c82ad9d1a@package bingo;

import java.io.FileReader;
import java.io.BufferedReader;
import java.io.IOException;
/**
 *
 * @author DANNY
 */
public class Bingo {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws Exception {
        // TODO code application logic here
        int line;
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String buf[] = br.readLine().split("","");
            line = 0;
            int line1 = 0;
            int line2 = 0;
            int line3 = 0;
            int line4 = 0;
            int num = Integer.valueOf(buf[0]);
            int size = Integer.valueOf(buf[1]);
            String[][] data;
            data = new String[size][size];   
            String buf2[] = br.readLine().split("","");
            for(int i=0;i<size;i++){
                String buf3[] = br.readLine().split("","");
                for(int j=0;j<size;j++){
                    data[i][j] = buf3[j];               
                }
            }
            int   numbeango = 2*(size+1);
            for(int i=0;i<size;i++){
                for(int j=0;j<size;j++){
                    for(int k=0;k<num;k++){
                        if(data[i][j].equals(buf2[k])){
                            data[i][j] = buf2[0];
                        }  
                    }
                }
            }
            for(int i=0;i<size;i++){
                for(int j=0;j<size;j++){
                    if(data[i][0].equals(data[i][j])){
                        line1++;
                    }
                    if(data[0][i].equals(data[j][i])){
                        line2++;
                    }
                    if(data[0][0].equals(data[j][j])){
                        line3++;
                    }
                    if(data[0][size-1].equals(data[j][size-1-j])){
                        line4++;
                    }
                }
                if(line1== size||line2==size||line3==size||line4==size){
                    line++;
                }
                line1=0;
                line2=0;
                line3=0;
                line4=0;
            }
        }
/*----------------------------------------------------------------------------*/       
       System.out.println(line); 
    }
    
}
@1b001450402161b352d6980c82ad9d1a@","10"
"r03723070","@5634afb9d8fa7245c3c5f2faae2f9281@package hw0;

import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {

    public static void main(String[] args) throws Exception {
        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];
            int [][] matrix_match = new int[num][num];
            for(int i = 0;i<num;i++)
                for(int j = 0;j<num;j++)
                    matrix_match[i][j] = 0;
            // printf in Java (you should comment out or delete this in your final submission)
            //System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);

            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
             int ans=0;
             announce = br.readLine().split("","");
             for(int i = 0;i<num;i++){
                matrix[i]  = br.readLine().split("","");
             }
             for(int i = 0;i<num;i++){
                for(int j = 0;j<num;j++){
                 //System.out.printf(""%s "",matrix[i][j]);
                    for(int k = 0; k<stringCount;k++){ 
                        if  (matrix[i][j].equals(announce [k]) ){
                              matrix_match[i][j]=1;
                        }
                    }
                }
            }
             
             
             
                for(int i = 0;i<num;i++){
                    int row = 0;
                    int column = 0;
                    for(int j = 0;j<num;j++){
                        if(matrix_match[i][j] == 1){
                            row++;
                        }
                        if(matrix_match[j][i] == 1){
                            column++;
                        }
                    } 
                    if(row==num)
                        ans++;
                    if(column==num)
                        ans++;    
                }
                 int diag = 0;
                 int invers_diag = 0;
                 for(int i = 0;i<num;i++){
                    
                     if(matrix_match[i][i]==1)
                         diag ++;
                     if(matrix_match[i][num-i-1]==1)
                         invers_diag ++;
                 }
                 if(diag==num)
                    ans++;
                if(invers_diag==num)
                    ans++;   
                
                
             System.out.printf(""%d\n"",ans);
        }
    }
}

@5634afb9d8fa7245c3c5f2faae2f9281@","10"
"r03228006","@1141d00802ad14064fc75e766b657fb7@
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.Arrays;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


/**
 *
 * @author user
 */
public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(""input.txt""))){
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);
            
            // store the second integer in variable num (dimension of matrix: num * num)            
            //char coun1 = coun[1];
                    
                 

            // initilization of a String array in Java(declares an array of integers and allocates memory)
            String[] announce = new String[stringCount];
            announce = br.readLine().split("","");
            String[][] matrix = new String[num][num];
            for (int i = 0; i < num; i++) {
                String[] temp = br.readLine().split("","");
                for (int j = 0; j < num; j++){
                 matrix[i][j] = temp[j];
                }}
            
            // Select stringCount announced countries
            String[][] selected = new String[num][num];
            for (int i = 0; i < num; i++) {
                for (int j = 1; j < num; j++){
                    for (int k = 0; k < stringCount; k++){
                      if(matrix[i][j].equals(announce[k])) {
                      selected[i][j] = ""1"" ;} 
                }}}

            //* check how many straight lines in the bingo matrix
            int straight = 0;
            String[] bingo = new String[num];
            Arrays.fill(bingo, ""1"");
            //int [][] selected1 = new int[][] {{1,1,1},{1,0,1},{1,1,0}};
            //String selected2 = selected.toString();
            //*check by row
            for (String[] row : selected){
                //System.out.println(Arrays.toString(row));
                if (row.equals(bingo)) {
                     straight ++ ;
                     //System.out.println(""T"");
                } 
                else if (Arrays.equals(row,bingo)) {
                     straight ++ ; 
                     //System.out.println(""True"");
                }
                //else { System.out.println(""FALSE"");}
            }
            //*check by coloum
            String one = ""1"";
            for (int col=0; col<num; col++){
                int tempc = 0;
                for(int i=0; i<num; i++){
                   String sel=selected[i][col];
                   if (!one.equals(sel)) {
                     tempc ++ ;} 
                }
                //System.out.println(tempc);
                if(tempc==0){
                     straight ++;}
            }
             //*check by diagonal
            String[] dl=new String[num];
            String[] dr=new String[num];
            for (int i=0; i<num; i++){
                   dl[i]= selected[i][i];
                   dr[i]= selected[i][num-i-1];
                   if (Arrays.equals(dl,bingo)) {
                     straight ++;}
                   if (Arrays.equals(dr,bingo)) {
                     straight ++;}
            }         
        
            //matrix[0][0] = br.readLine().split("","")[0];    
            //float[] values = new float[] {0.1f, 0.2f, 0.3f};
           
            // String read = null;
            //while ((read = br.readLine()) != null) {

            // allocate data to String array in Java
            //announce[] = {""1"",""2""};
            //matrix[][] = {{""1"",""2"",""3""},{""1"",""2"",""3""}};

            
            // printf in Java (you should comment out or delete this in your final submission)
            //System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);
            //System.out.println(announce[0]+"",""+announce[1]);
            //System.out.println(br.readLine());   
            //System.out.println(br.readLine().split("","")); 
            //for (int i = 0; i < num; i++) {
                //for (int j = 0; j < num; j++){
                 //System.out.printf(matrix[i][j]);  
                //}
            //System.out.println();
            //}
            //System.out.println(Integer.toString(selected[0][0]));
            //for (String[] row : selected) {
                 //System.out.println(Arrays.toString(row));  
                //}
             //System.out.println(Arrays.toString(bingo));
             System.out.println(straight);
            }
        }
}

            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
@1141d00802ad14064fc75e766b657fb7@","10"
"b03704074","@6d016d2526e32f66fc735bd4e8e76edb@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test1;

/**
 *
 * @author US
 */
import java.util.Scanner;
import java.util.Arrays;
public class Bingo {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        //System.out.println(""Hello!World!"");
        int num1, num2;
        Scanner sc = new Scanner(System.in);
        System.out.println(""請輸入字串數目與陣列大小(不一定以逗號分開)："");
        num1 = sc.nextInt();
        num2 = sc.nextInt();
        System.out.println(""字串數目為："" + num1 );
        System.out.println(""陣列大小為："" + num2 +""乘"" + num2  );
        
        String[][] matrix;
        matrix=new String[num2][num2];
        String str1;
        String str2;
        System.out.println(""請輸入目標國家(以逗號分開)："");
        str1 = sc.next();
        String[]AfterSplit1 = str1.split("","");
        for (int i = 0; i < AfterSplit1.length; i++)
            System.out.println(AfterSplit1[i]);
        
        
        
            for (int i = 0; i < num2; i++)
            {   System.out.println(""請輸入第""+(i+1)+""排"");
                str2=sc.next();
                String[]AfterSplit2 = str2.split("","");
                
                for(int j=0;j< num2;j++)
                {
                    matrix[i][j]=AfterSplit2[j];
                    
            
                }
            }
            
            for (int i = 0; i < num2; i++)
            {
                for(int j=0;j< num2;j++)
                {
                    System.out.println(matrix[i][j]);
                }
            
            }
            
                int count=0;
                for (int i = 0; i < num2; i++)
                {
                back:
                {
                    for(int j=0;j< num2;j++)
                    {
                        for (int m = 0; m < AfterSplit1.length; m++)
                        {
                            if(matrix[i][j]==AfterSplit1[m]) 
                                continue;
                            if(m==AfterSplit1.length && matrix[i][j]!=AfterSplit1[m])
                                break back;
                         } 
                    }
                }
                
                count++;
                }
                
                
                for (int i=0; i < num2; i++)
                {
                back:
                {
                    for(int j=0;j< num2;j++)
                    {
                        for (int m = 0; m < AfterSplit1.length; m++)
                        {
                            if(matrix[j][i]==AfterSplit1[m]) 
                                continue;
                            if(m==AfterSplit1.length && matrix[j][i]!=AfterSplit1[m])
                                break back;
                         } 
                    }
                }
                
                count++;
                }
                back:
                {
                for (int i=0; i < num2; i++)
                {   
                    for (int m = 0; m < AfterSplit1.length; m++)
                        {
                            if(matrix[i][i]==AfterSplit1[m]) 
                                continue;
                            if(m==AfterSplit1.length && matrix[i][i]!=AfterSplit1[m])
                                break back;
                        }
                count++;
                
                }
                }
                
                back:
                {
                for (int i=0; i < num2; i++)
                {   
                    for (int m = 0; m < AfterSplit1.length; m++)
                        {
                            if(matrix[i][num2-i-1]==AfterSplit1[m]) 
                                continue;
                            if(m==AfterSplit1.length && matrix[i][num2-i-1]!=AfterSplit1[m])
                                break back;
                        }
                count++;
                
                }
                }
                
                System.out.println(""有""+count+""條線"");
                
            
        }
}    


@6d016d2526e32f66fc735bd4e8e76edb@","10"
"r04945008","@7946e271f41dd7103cede3a45522c825@import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {
    public static void main(String[] args) throws Exception {
        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);
            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);
            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            int[][] matrix = new int[num][num];
            
            String[] data1 = br.readLine().split("","");
            for(int i=0; i<stringCount; i++) announce[i] = data1[i];
            for (int i=0; i<num; i++){
                String[] data2 = br.readLine().split("","");
                for(int j=0; j<num; j++){
                    for (int a=0; a<stringCount; a++){
                        if(data2[j].compareTo(announce[a]) == 0) matrix[i][j] = 1;
                    }
                }
            }
            
            int line=0;
            int count=0;
            //row major
            for (int i=0; i<num; i++){
                count=0;
                for (int j=0; j<num; j++){
                    //System.out.printf(""%d"",count);
                    if(matrix[i][j] == 0) break;
                    else count += 1;
                }
                line += count/stringCount;
            }
            //column major
            for (int j=0; j<num; j++){
                count=0;
                for (int i=0; i<num; i++){
                    if(matrix[i][j] == 0) break;
                    else count += 1;
                }
                line += count/stringCount;
            }
            //diagnoal
            count=0;
            for (int i=0; i<num; i++){ 
                int j=i;    
                count += matrix[i][j];
            }
            line += count/stringCount;
            //sub diagnoal
            count=0;
            int j=0;
            for (int i=num-1;i>=0;i--){
                count += matrix[i][j];   //sub diagnoal
                j++;
            }
             
            line += count/stringCount;
            System.out.printf(""%d\n"",line);
        }
    }
}

@7946e271f41dd7103cede3a45522c825@","10"
"b03611011","@d639149967613123c439b9551c294c26@
import java.io.FileReader;
import java.io.BufferedReader;
import java.sql.Array;
import java.util.Arrays;

public class Bingo {

    public static int amount = 0;

    private static void sumrow(int[][] d) {
        int order = 0;
        int column = 0;
        int sumrow = 0;
        int sumcolumn = 0;
        int l = d.length;

        while (order < l) {
            //sum of row
            while (column < l) {
                sumrow = d[order][column] + sumrow;
                sumcolumn = d[column][order] + sumcolumn;

                column++;
            }
            if (sumrow == l || sumcolumn == l) {
                amount++;
            }
            sumrow = 0;
            sumcolumn = 0;
            column = 0;
            order++;
        }
        order=0;
        sumrow=0;
        sumcolumn=0;
        while (order < (l + 1) / 2) {
            sumrow = d[(l - 1) / 2 + order][(l - 1) / 2 - order]+d[(l - 1) / 2 - order][(l - 1) / 2 + order] + sumrow;
            sumcolumn = d[(l - 1) / 2 + order][(l - 1) / 2 + order] +d[(l - 1) / 2 - order][(l - 1) / 2 - order]+ sumcolumn;
            order++;
        }
        if(d[(l - 1) / 2][(l - 1) / 2]==1){
        sumrow--;
        sumcolumn--;
        }
            if (sumrow == l) {
                amount++;
            }
            if ( sumcolumn == l) {
                amount++;
            }

    }

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try (BufferedReader br = new BufferedReader(new FileReader(""input.txt""))) {

            //read a line and split by ','
            String[] data = br.readLine().split("","");

            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];

            // printf in Java (you should comment out or delete this in your final submission)
            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);

            String[] data1 = br.readLine().split("","");
            int i = 0;
            while (i < stringCount) {
                announce[i] = data1[i];
                i++;
            }
            int k = 0;
            int x = 0;

            while (k < num) {
                String[] data2 = br.readLine().split("","");
                while (x < num) {
                    matrix[k][x] = data2[x];
                    x++;
                }
                x = 0;
                k++;
            }
            int[][] judge = new int[num][num];
            int y = 0;
            int z = 0;
            x = 0;
            y = 0;
            z = 0;
            search:

            while (y < num) {
                z = 0;
                while (z < num) {
                    x = 0;
                    while (x < stringCount) {
                        if (matrix[y][z].equals(announce[x])) {
                            judge[y][z] = 1;
                        }
                        x++;
                        if (x > stringCount) {
                            x = 0;
                        }
                    }
                    z++;
                }
                y++;
            }

            sumrow(judge);
        }

        System.out.println(""there are ""+amount+""lines in the matrix"");
    }

    /*  now you can write your own solution to hw0
     *  you can follow the instruction described below:
     * 
     *  1. read the rest content of the file
     *  2. store the announce strings (2nd line of the file) in variable announce
     *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
     *  4. compare the matrix and announce strings (this is the tricky part)
     *  5. output how many 'straight line' are there in the matrix
     * 
     *  [note]
     *  you can use every data structure in standard Java packages (Java 8 supported)
     *  the packages in stdlib.jar and algs4.jar are also available for you to use
     *
     *  [hint]
     *  1. you should check whether Java pass the variable by references or by values.
     *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
     *     useful for solving problems. 
     */
}

@d639149967613123c439b9551c294c26@","10"
"r04631033","@cba8d1585c7033406c5ef71c58f9afa8@import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;
//import java.util.ArrayList;
import java.util.Vector;
public class Class1 {
public static void main(String[] args) throws Exception {

            // read file from args[0] in Java 7 style
try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            // read a line and split by ','
    String[] data = br.readLine().split("","");
    String[] data2 = br.readLine().split("","");
            // store the first integer in variable stringCount (number of announced strings)
    int stringCount = Integer.parseInt(data[0]);
            // store the second integer in variable num (dimension of matrix: num * num)            
    int num = Integer.parseInt(data[1]);
    String[] announce = new String[stringCount];
    String[][] matrix = new String[num][num];         
 for(int i=0;i<stringCount;i++){
         announce[i] = data2[i];
                 }     
Vector<String []> str_vec = new Vector<String []>();
    int j = 0;
    int i = 0;
    String line;
    while ((line = br.readLine()) != null) { //每次讀一行 
           str_vec.add(line.split("",""));
             }            
for(i = 0; i < num; i++) {
matrix[i] = str_vec.elementAt(i);
}
for( i=0;i<num;i++){
    for(j=0;j<num;j++){
        int k;
        for(k=0;k<stringCount;k++){
            String d = announce[k];
            if (matrix[i][j].equals(d))break;
        }//System.out.print(matrix[i][j]);
        if(k==stringCount)matrix[i][j]=""0"";
        else matrix[i][j]=""1"";
    }
}
System.out.print(Arrays.deepToString(matrix));
String x =  Integer.toString(1);
String y =  Integer.toString(0);
int ab = 0; 
 for(i=0;i<num;i++){
     int count = 0;
     int count1 = 0;
     for(j=0;j<num;j++){
         if (matrix[i][j].equals(x)){
             count++;         
         }
         if (matrix[j][i].equals(x)){
             count1++;
         }
    }
     if(count == num){
         ab += 1;
         }
     if(count1 == num){
         ab += 1;
     }
 }     
for(i=0;i<num;i++){
    int count2 = 0;
    if (matrix[i][i].equals(x)){
       count2++;         
          }
    if(count2 == num){
         ab += 1;
         } 
}
for(i=0;i<num;i++){
    int count3 = 0;
    if (matrix[i][num-1-i].equals(x)){
       count3++;         
          }
    if(count3 == num){
         ab += 1;
          } 
}
System.out.print(ab);
}
}
}
@cba8d1585c7033406c5ef71c58f9afa8@","10"
"r04631041","@304550e60d9a4284ef1cd4b8c8597501@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bingo;
import java.io.FileReader;
import java.io.BufferedReader;
/**
 *
 * @author USER
 */
public class Bingo {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws Exception {
        // TODO code application logic here
        try(BufferedReader br = new BufferedReader(new FileReader(""Bingo.txt""))){
           
            String[] data = br.readLine().split("","");// read a line and split by ','
            int stringCount = Integer.parseInt(data[0]);// store the first integer in variable stringCount (number of announced strings)

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);
            
            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];
            
            // printf in Java (you should comment out or delete this in your final submission)
            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);
            String[] data2=br.readLine().split("","");
            for (int i=0 ; i<stringCount ; i++){
                announce[i]= data2[i];
                System.out.print(announce[i]+""\t"");
            }
                System.out.println("""");
            for (int i=0 ; i<num ; i++){
                String[] data_temp=br.readLine().split("","");
                for (int j=0 ; j<num ; j++){
                    matrix[i][j]=data_temp[j];
                    System.out.print(matrix[i][j]+""\t"");
                    }
                System.out.println("""");
                }
             int [][] checking = new int[num][num];
             for (int i=0 ; i<num ; i++){
                 for (int j=0 ; j<num ; j++)
                     checking[i][j]=0;
             }
             for (int p=0 ; p<stringCount ; p++){
             for (int i=0 ; i<num ; i++){
               for (int j=0 ; j<num ; j++){
               if (matrix[i][j].equals(announce[p]))
                   checking[i][j]=1;
               }
           }
                 }
             //for (int i=0 ; i<num ; i++){
             //    for (int j=0 ; j<num ; j++)
             //        System.out.print(checking[i][j]+""\t"");
             //    System.out.println("""");
             //}
             //---------------------------Find Bingo line---------------------//
            int counter=0,counter_diagonal1=0,counter_diagonal2=0;
            for (int i=0 ; i<num ; i++){
            if (checking[i][i]==1)
                counter_diagonal1++;
            }
            for (int i=0 ; i<num ; i++){
            if (checking[i][(num-1)-i]==1)
                counter_diagonal2++;
            }
            if (counter_diagonal1==num)
                counter++;
            if (counter_diagonal2==num)
                counter++;
            
                for (int i=0 ; i<num ; i++){
                    int temp=0,temp2=0;
                    for (int j=0 ; j<num ; j++){
                        temp+=checking[i][j];
                        temp2+=checking[j][i];
                    }
                    if (temp==num)
                        counter++;
                    if (temp2==num)
                        counter++;
            }
                System.out.println(""Bingo line equals to ""+counter+"" ."");
             }
}
}
            
               
                
        

    
    


@304550e60d9a4284ef1cd4b8c8597501@","10"
"r04631027","@2e13b8cf955da6e4f8b4c8ca6f1f9fbd@ public static void main(String[] args) {
        try {
      FileReader fr=new FileReader(""input.txt"");
      BufferedReader br=new BufferedReader(fr);
      String line;
      int count = 0;
      line = br.readLine();    
      String[] metrix_D = line.split("","");
      int country_n = Integer.parseInt(metrix_D[0]);
      int metrix_D_m = Integer.parseInt(metrix_D[1]);
      //System.out.println(metrix_D_m);
      line = br.readLine();      
      String[] country =  line.split("","");
      int[][] Bingoohya;
        Bingoohya = new int[metrix_D_m][metrix_D_m];
      int bingo_line = 0;
      int test = 0;

      while ((line=br.readLine()) != null) 
      {
          String[] buffer = line.split("","");
          for(int i=0;i<metrix_D_m;i++)
          {
              for(int j=0;j<country_n;j++)
            {
                if(buffer[i].equals(country[j]) )
                    Bingoohya[count][i] = 1;
            }      
          }
          count = count +1;
        }
      for(int p =0;p<metrix_D_m;p++){            //cols
          for(int o =0;o<metrix_D_m;o++){
              test = Bingoohya[p][o];
              if (test==0)
                  break;
  
          }
          if(test==1)
          {
           //   System.out.println(""ohya"");
              bingo_line++;
          }
      }
       for(int p =0;p<metrix_D_m;p++){                  //rows
          for(int o =0;o<metrix_D_m;o++){
              test = Bingoohya[o][p];
              if (test==0)
                  break;  
          }
          if(test==1)
          {     
              bingo_line++;
          }
      }
       for(int p =0;p<metrix_D_m;p++){                 //dia1
          
              test = Bingoohya[p][p];
              if (test==0)
                  break;            
          
      }
       if(test==1)
          {     
              bingo_line++;
          }
       int dia = metrix_D_m-1;
       for(int p =0;p<metrix_D_m;p++){             //dia2
          
              test = Bingoohya[p][dia];
              if (test==0)
                  break;  
          
          dia--;
      }
       if(test==1)
          {     
              bingo_line++;
          }
      System.out.println(bingo_line);
      }       
    catch (IOException e) {System.out.println(e);}        
    }    
@2e13b8cf955da6e4f8b4c8ca6f1f9fbd@","10"
"r03525008","@841968214ea1c698a0d9030592bbc76d@import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){


        // 先用指定路徑來讀檔案，上傳作業前要改回用args[0]來指定檔案名稱
        // 也就是以下兩行要刪掉，上面那一行要被註解掉的要加回來，最後面的catch要拿掉
//        try {
//            BufferedReader br = new BufferedReader(new FileReader(""src/input2.txt""));
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];

            // printf in Java (you should comment out or delete this in your final submission)
//             System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);

            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */

            // store the announce strings (2nd line of the file) in variable announce
            announce = br.readLine().split("","");

            // store the matrix (from the 3rd line to the end of the file) in variable matrix
            for(int i = 0 ; i < num ; i++){
                matrix[i] = br.readLine().split("","");
            }

            // compare the matrix and announce strings (this is the tricky part)
            int straightLines = 0;
            // check for rows
            for(int i = 0 ; i < num ; i++){
                boolean bingo = true;
                for(int j = 0 ; j < num ; j++){
                    boolean equal = false;
                    for(String eachAnnounce:announce){
                        if(matrix[i][j].equals(eachAnnounce)){
                            equal = true;
                        }
                    }
                    if(!equal) bingo = false;
                }
                if(bingo) straightLines++;
            }

            // check for columns
            for(int j = 0 ; j < num ; j++){
                boolean bingo = true;
                for(int i = 0 ; i < num ; i++){
                    boolean equal = false;
                    for(String eachAnnounce:announce){
                        if(matrix[i][j].equals(eachAnnounce)){
                            equal = true;
                        }
                    }
                    if(!equal) bingo = false;
                }
                if(bingo) straightLines++;
            }

            // check for left-up to right-down diagonals
            boolean bingo1 = true;
            for(int i = 0 ; i < num ; i++){
                boolean equal = false;
                for(String eachAnnounce:announce){
                    if(matrix[i][i].equals(eachAnnounce)){
                        equal = true;
                    }
                }
                if(!equal) bingo1 = false;
            }
            if(bingo1) straightLines++;

            // check for right-up to left-down diagonals
            boolean bingo2 = true;
            for(int i = 0 ; i < num ; i++){
                boolean equal = false;
                for(String eachAnnounce:announce){
                    if(matrix[i][2-i].equals(eachAnnounce)){
                        equal = true;
                    }
                }
                if(!equal) bingo2 = false;
            }
            if(bingo2) straightLines++;

            // output how many 'straight line' are there in the matrix
            System.out.print(straightLines);


        }
        // ""catch""這部分在上傳前要刪除
//        catch (Exception e) {
//            System.out.println(e.getMessage());
//        }
    }
}

@841968214ea1c698a0d9030592bbc76d@","10"
"r04945039","@0c29686ce2fd00ffdcb95940fd6bf8ac@package bingo;


import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {
    
    
    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];
            int[][] checkmatrix = new int[num][num];
            // printf in Java (you should comment out or delete this in your final submission)
            // System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);
            

            announce = br.readLine().split("","");
            
            for (int layer=0;layer<=num-1;layer++){
                String[] temp=(br.readLine().split("",""));
                for (int co=0;co<=num-1;co++){
                    
            matrix[layer][co]=temp[co];
            }
            }
          
            for (int f1 = 0;f1<num;f1++){
                for (int f2=0;f2<num;f2++){
                    for (int condition=0;condition<stringCount;condition++){
                        if ((announce[condition]).equals(matrix[f1][f2])) {
                           checkmatrix[f1][f2]=1;
                        } 
                        else 
                        if (checkmatrix[f1][f2]!=0){
                        checkmatrix[f1][f2]=1;}                    
                }              
            }             
            }
            int line=0;           
            //rowlines
            for(int linecheck=0;linecheck<num;linecheck++){
                int summary=0;
                for(int columncheck=0;columncheck<num;columncheck++){
                        if( checkmatrix[linecheck][columncheck]!=0){
                            summary+=1;
                        } 
                }
                if (summary==num){
                    line=line+1;
                }                             
                
            }
            
            //columnlines
             for(int linecheck=0;linecheck<num;linecheck++){
                int summary=0;
                for(int columncheck=0;columncheck<num;columncheck++){
                        if( checkmatrix[columncheck][linecheck]!=0){
                            summary+=1;
                        } 
                }
                if (summary==num){
                    line=line+1;
                }                             
                
            }
             
             
             //Cross
             int summaryc1 =0;
             for(int linecheck=0;linecheck<num;linecheck++){
                    if(checkmatrix[linecheck][linecheck]!=0){
                            summaryc1+=1;
                        }             
             }
              if (summaryc1==num){
                    line=line+1;
                }           
             
             int summaryc2=0;
             for(int linecheck=0;linecheck<num;linecheck++){          
                    if(checkmatrix[linecheck][num-1-linecheck] !=0){
                            summaryc2+=1;
                        } 
             }
              if (summaryc2==num){
                    line=line+1;}                                  
            
                            System.out.println(line);
           
           
       
        }
            
    
        }
        
        }
           

@0c29686ce2fd00ffdcb95940fd6bf8ac@","10"
"r03522826","@712382656b308f818e4d3d8aeb4482be@import java.io.FileReader;
import java.io.BufferedReader;
//import java.io.FileNotFoundException;
//import java.io.IOException;
/**
 *
 * @author LAB104
 */
public class Bingo {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws Exception{
        int MAX = 50;
        String str1;
        String [] data = new String[MAX];
        FileReader fr = new FileReader(args[0]);
        BufferedReader bfr = new BufferedReader(fr);
        
        data = bfr.readLine().split("","");
        
        int stringCount = Integer.parseInt(data[0]);
        int num = Integer.parseInt(data[1]);
        
        try
        {
            if((stringCount<2)||(num < 2))
                throw new ArithmeticException();
            
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];
            int [][] Check = new int[num][num];
            //String[] str2 = new String[num];
        
            announce = bfr.readLine().split("","");
        
            for(int i = 0; i < num; i++)
            {
                matrix[i]= bfr.readLine().split("","");
            }
            for (int i =0; i < num; i++)
            {
                for (int j = 0; j < num; j++)
                {
                    for (int k =0; k < stringCount; k++)
                    {
                        if(matrix[i][j].equals(announce[k]))
                          Check[i][j] += 1;
                    }
                }
            }
            int counter = 0;
            int [] r1 = new int [num];
            int [] c1 = new int [num];
            int [] d1 = new int [2];
            for(int i =0; i < num; i++)
            {
                for (int j = 0; j < num; j++)
                {
                    r1[i] += Check[i][j];
                    c1[i] += Check[j][i];
                    if(i==j)
                    {
                        d1[0]+=Check[i][j];
                        d1[1]+=Check[i][num-1-j];
                    }
                }
            }
            
            for (int i = 0; i < num; i++)
            {
                if(r1[i]==num)
                    counter++;
                if(c1[i]==num)
                    counter++;
                if(i < 2)
                {
                   if(d1[i]==num)
                       counter++;
                }
            }
           
            /**System.out.println(r1[0]);
              *System.out.println(r1[1]);
              *System.out.println(r1[2]);
              *
              *System.out.println(c1[0]);
              *System.out.println(c1[1]);
              *System.out.println(c1[2]);
              *
              *
              *System.out.println(d1[0]);
              *System.out.println(d1[1]); **/
         
            
            System.out.println(counter);
        }
        catch(ArithmeticException e)
        {
            System.out.println(e+"" throwed!"");
        }
       
        
        
        
    }
    
}
@712382656b308f818e4d3d8aeb4482be@","10"
"b99611017","@c7960a8d6a64e227fb6e4d00d7489dd6@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bingo;
import java.io.*;
import java.util.Scanner;
import java.lang.String;
import java.util.Arrays;
import java.util.*;
/**
 *
 * @author 閮勗?曀?
 */
public class Bingo 
{
    public static void main(String[] args)throws IOException 
    {
        /*try{
            FileInputStream fstream = new FileInputStream(""input.txt"");
            DataInputStream in = new DataInputStream(fstream);
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            String strLine;
  //Read File Line By Line
            while ((strLine = br.readLine()) != null)  {

                System.out.println (strLine);
            }
            in.close();
        }
        catch (Exception e){//Catch exception if any
   
            System.err.println(""Error: "" + e.getMessage());
  
        }*/
        File Data=new File(""input.txt""); //霈?交?獢?
        int len=(int)Data.length();      //??獢摨?
        FileReader ReadData=new FileReader(Data); 
        char buffer[];
        buffer=new char[len];
        ReadData.read(buffer);
        String str = new String(buffer);
        
        String[] token = str.split(""\n""); //?摮葡
        String[] row1=token[0].split("",""); 
        String[] row2=token[1].split("","");
        String[] row3=token[2].split("","");
        String[] row4=token[3].split("","");
        String[] row5=token[4].split("","");
        int announcedNum = Integer.valueOf(row1[0]);
        int matrixLen = Integer.valueOf(row1[1]);
        int lineCounter=0;

        int [][]matrix=new int[matrixLen][matrixLen];//摰?????摮?憿
        for(int i=0;i<matrixLen;i++)//撠?飛??
        {
            for(int j=0;j<matrixLen;j++)
            {
                matrix[i][j]=0;
            }
        }
        for(int i=0;i<2;i++) //???怨????
        {
            for(int j=0;j<3;j++)
            {
               if(row2[i].equals(row3[j]))
               {
                   matrix[0][j]++;
               }
                    
                
            }
        }
        for(int i=0;i<2;i++)
        {
            for(int j=0;j<3;j++)
            {
               if(row2[i].equals(row4[j]))
               {
                   matrix[1][j]++;
               }
                    
                
            }
        }
        for(int i=0;i<2;i++)
        {
            for(int j=0;j<3;j++)
            {
               if(row2[i].equals(row5[j]))
               {
                   matrix[2][j]++;
               }
                    
                
            }
        }
        if(matrix[0][0]+matrix[0][1]+matrix[0][2]==3)
        {
            lineCounter++;
        }
        if(matrix[1][0]+matrix[1][1]+matrix[1][2]==3)
        {
            lineCounter++;
        }
        if(matrix[2][0]+matrix[2][1]+matrix[2][2]==3)
        {
            lineCounter++;
        }
        if(matrix[0][0]+matrix[1][0]+matrix[2][0]==3)
        {
            lineCounter++;
        }
        if(matrix[0][1]+matrix[1][1]+matrix[2][1]==3)
        {
            lineCounter++;
        }
        if(matrix[0][2]+matrix[1][2]+matrix[2][2]==3)
        {
            lineCounter++;
        }
        if(matrix[0][0]+matrix[1][1]+matrix[2][2]==3)
        {
            lineCounter++;
        }
        if(matrix[2][0]+matrix[1][1]+matrix[0][2]==3)
        {
            lineCounter++;
        }
        System.out.println(""甇斗?摮???""+str);
        System.out.println(""撌脣撣?""+row2[0]+""隞亙?""+row2[1]+""??+announcedNum+""??獢?);
        System.out.println(""???憭批?:""+matrixLen+""X""+matrixLen);
        System.out.println(""蝮賢??+lineCounter+""璇??"");
   
        

 
    }
    
}

@c7960a8d6a64e227fb6e4d00d7489dd6@","10"
"b02611026","@b2f2349bdedf6de58bf8ef82dc536913@import java.io.FileReader;
import java.io.BufferedReader;

//package bingo;
public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try (BufferedReader br = new BufferedReader(new FileReader(""input.txt""))) {

            // read a line and split by ','
            String[] data = br.readLine().split("","");

            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];
            
            announce = br.readLine().split("","");
            
            int count = 0;

            for (int i = 0; i < num; i++) {
                String[] inputmatrix = br.readLine().split("","");
                for (int j = 0; j < num; j++) {
                    matrix[i][j] = inputmatrix[j];
                }
            }
              
            for (int i = 0; i < num; i++) {
                for (int j = 0; j < num; j++) {
                    for (int k = 0; k < stringCount; k++) {
                        if (matrix[i][j].equals(announce[k])) {
                            matrix[i][j] = ""0"";
                        }
                    }
                }
            }

            for (int i = 0; i < num; i++) {
                for (int j = 0; j < num; j++) {
                    if (matrix[i][j] == ""0"") {
                        if (j == num - 1) {
                            count++;
                        }
                    } else {
                        break;
                    }
                }
            }

            for (int j = 0; j < num; j++) {
                for (int i = 0; i < num; i++) {
                    if (matrix[i][j] == ""0"") {
                        if (i == num - 1) {
                            count++;
                        }
                    } else {
                        break;
                    }
                }
            }

            for (int i = 0; i < num; i++) {
                if (matrix[i][i] == ""0"") {
                    if (i == num - 1) {
                        count++;
                    }
                } else {
                    break;
                }
            }

            for (int i = 0; i < num; i++) {
                if (matrix[i][num - 1 - i] == ""0"") {
                    if (i == 0) {
                        count++;
                    }
                } else {
                    break;
                }
            }

            System.out.printf(""%d"", count);
            System.out.printf(""\n"");
        }        
    }
}
@b2f2349bdedf6de58bf8ef82dc536913@","10"
"r04631021","@a14de6f9926c58ca7bdd2c681e79c895@import java.io.*;
import java.util.Scanner;
/**
 *
 * @author 林康維
 */
public class Bingo {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        File file = new File(args[0]);
        try{
            Scanner File_in = new Scanner(file);
            String data = File_in.nextLine();
            String[] Nums = data.split("","");
            System.out.println( Nums[0]+Nums[1] );
        //Scanner sc = new Scanner(new File(""input.txt""));
		// read a line and split by ','
            
            
            
            String data2 = File_in.nextLine();
            String[] announce = data2.split("","");
            System.out.println( announce[0]+announce[1]);
            
            int LineIndex = 0 ;
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(Nums[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(Nums[1]);
            
            int [][] jumbo = new int[num][num];
            
            while(File_in.hasNextLine()){
                String data3 = File_in.nextLine();
                String[] mat = data3.split("","");
                for(int i=0 ; i<num  ; i++){
                    for(int j = 0 ; j < stringCount  ;j++){
                    if(mat[i].equalsIgnoreCase(announce[j])){
                        jumbo[LineIndex][i] = 1 ;
                    }
                }
            }
                LineIndex +=1 ;
            }
            // initilization of a String array in Java

for(int i=0;i<num;i++){
    for(int j=0;j<num;j++){
        System.out.println(jumbo[i][j]);
    }
}

			int line = 0 ;
			

            // for(int x = 0 ; x < num ; x++){
				// for(int y = 0 ; y <num ; y++){
					// System.out.println(jumbo[x][y]) ;
				// }
			// }
			for (int k = 0 ; k < num ; k++){
				int count = 0 ;
				for (int l = 0 ; l < num ; l++){
					count += jumbo [k][l] ;					
				}
				if (count == num){
					line += 1 ;
				}
			}
			for (int m = 0 ; m < num ; m++){
				int count = 0 ;
				for (int n = 0 ; n < num ; n++){
					count += jumbo [n][m] ;					
				}
				if (count == num){
					line += 1 ;
				}
			}
			int count1 = 0 ;
			int count2 = 0 ;
			int p = 0 ;
			int q = num - 1  ;
			while (p < num){
				count1 += jumbo[p][p] ;
				p += 1 ;
			}
			if (count1 == num){
				line += 1 ;
			}
			while (q >= 0){
				count2 += jumbo[q][q] ;
				q -= 1 ;
			}
			if (count2 == num){
				line += 1;
			}	
        
                        		    System.out.println(line);
        }
                        
        catch(IOException e){
            System.out.println(""error!""); 
        }
    }
}
    


@a14de6f9926c58ca7bdd2c681e79c895@","10"
"r03945012","@b8012191e16596996be5ea7f65b22b12@
import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Scanner;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            // read a line and split by ','
            String[] data = br.readLine().split("","");
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];

            // printf in Java (you should comment out or delete this in your final submission)
            System.out.printf(""number of announced strings: %d\n""
                    + ""dimension of matrix: %d x %d\n"", stringCount, num, num);

            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
            // using Scanner (Step.1)
            Scanner inputdata = new Scanner(br);
            // read announce data by nextLine (Step.2)
            announce = inputdata.nextLine().split("","");

            // read dimension of matrix (Step.3)
            for (int i = 0; i < num; i++) {
                matrix[i] = inputdata.nextLine().split("","");
            }
            // label zeros(3*3)
            int[][] label = new int[num][num];
            for (int[] row : label) {
                java.util.Arrays.fill(row, 0);
            }
            // if match 0 being 1
            for (int i = 0; i < matrix.length; i++) {
                for (int j = 0; j < matrix[0].length; j++) {
                    for (String announce1 : announce) {
                        if (matrix[i][j].equals(announce1)) {
                            label[i][j] = 1;
                        }
                    }
                }
            }

            // caculate the number of bingo line
            int countline = 0;
            int diag_sum = 0;
            int antidiag_sum = 0;
            // bingo count total line
            for (int i = 0; i < num; i++) {
                // diag bingo
                diag_sum += label[i][i];
                antidiag_sum += label[i][2 - i];
                // row_col bingo
                int row_sum = 0;
                int col_sum = 0;
                for (int j = 0; j < num; j++) {
                    row_sum += label[i][j];
                    col_sum += label[j][i];
                }
                if (row_sum == 3)
                    countline++;
                if (col_sum == 3)
                    countline++;
            }
            if (diag_sum == 3)
                countline++;
            if (antidiag_sum == 3)
                countline++;
            System.out.printf(""outputline: %d\n"", countline);
        }

    }
}

@b8012191e16596996be5ea7f65b22b12@","10"
"r04525016","@f21a11b66a6c78d5be7660438dd1ff75@import java.io.BufferedReader;
import java.io.FileReader;


public class bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){

            // read a line and split by ','
            String[] data = br.readLine().split("","");

            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)
            int num = Integer.parseInt(data[1]);

            // initialization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];

            // printf in Java (you should comment out or delete this in your final submission)
            // System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);

            // read the rest content of the file
            String[] temp = br.readLine().split("","");

            // store the announce strings (2nd line of the file) in variable announce
            for(int i = 0; i < stringCount; i++){
                announce[i] = temp[i];
            }

            // store the matrix (from the 3rd line to the end of the file) in variable matrix
            for(int i = 0; i < num; i++){
                String[] temp2 = br.readLine().split("","");
                for(int j = 0; j < num; j++){
                    matrix[i][j] = temp2[j];
                }
            }

            // compare the matrix and announce strings (this is the tricky part)

            int count = 0;
            int count2 = 0;
            int count3 = 0;
            int count4 = 0;
            int straightLines = 0;

            for(String Announce:announce){
                for(int i = 0; i < num; i++){
                    for(int j = 0; j < num; j++){

                        if(matrix[i][j].equals(Announce)) count++;
                        if(matrix[j][i].equals(Announce)) count2++;

                        if(matrix[0][0].equals(Announce)){
                            if(matrix[j+1][j+1].equals(Announce)) count3++;
                        }
                        if(matrix[num-1][0].equals(Announce)){
                            if(matrix[j][num-1-j].equals(Announce)) count4++;
                        }
                    }
                    if(count == num) straightLines++;
                    if(count2 == num) straightLines++;

                    count = 0;
                    count2 = 0;

                }
                if(count3 == num)straightLines++;
                if(count4 == num)straightLines++;
            }

            if(count3 == num) straightLines++;
            if(count4 == num) straightLines++;

            //output how many 'straight line' are there in the matrix
            System.out.println(straightLines);

        }
    }
}
@f21a11b66a6c78d5be7660438dd1ff75@","10"
"b01b01039","@f5c5b31dcffd66cc86ba6e8ea4325dbf@import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {
    public static void main(String[] args) throws Exception {
        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];
            boolean[][] board = new boolean[num][num];

            // printf in Java (you should comment out or delete this in your final submission)
            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);
            // read cross conuntry
            data = br.readLine().split("","");
            for(int idx = 0; idx < stringCount; idx++){
                announce[idx] = data[idx];
            }       
                        
            // read board
            for(int row = 0; row < num; row++) {
                data = br.readLine().split("","");
                for(int col = 0; col < num; col++){
                    matrix[row][col] = data[col];
                    board[row][col] = false;
                    //System.out.printf(""%s "",data[col]);
                }
                //System.out.printf(""\n"");
            }
            // answer reading
            //int ans = Integer.parseInt(br.readLine());
            // checking announce
            for(String s : announce){
                //System.out.println(s);
                for(int row = 0; row < num; row++){
                    for(int col = 0; col < num; col++){
                        board[row][col] = board[row][col] | s.equals(matrix[row][col]);
                        //System.out.printf(""%b "",board[row][col]);
                    }
                    //System.out.printf(""\n"");
                }
            }
            int count = game_check(board);
            System.out.println(count);
            //System.out.println(game_check(board) == ans);
            //return count;
        }
    }
    // for checking rows
    public static int row_check(boolean[][] board){
        int count = 0;// how many rows are straight lines
        boolean out =true; // Is the country be announced in the Bingo game
        int num = board[0].length;
        for(int row = 0; row < num; row++){
            int col = 0;
            out = true;
            do{
                out = out & board[row][col];
                col++;
            }while(out && col < num);
            if(out)count++;
            //System.out.println(out);
        }
        return count;
    }
    // for checking columns
    public static int col_check(boolean[][] board){
        return row_check(matrix_trans(board));
    }
    // for checking diagonals
    public static int cross_check(boolean[][] board){
        int count = 0;
        int num = board[0].length;
        boolean out_l2r = true;
        boolean out_r2l = true;
        // left to right diagonal check
        for(int idx = 0; idx < num; idx++){
            out_l2r = out_l2r & board[idx][idx];
            if(!out_l2r) break;
        }
        // right to left diagonal check
        for(int idx = 0; idx < num; idx++){
            out_r2l = out_r2l & board[idx][-idx-1+num];
            if(!out_r2l) break;
        }
        if(out_l2r)count++;
        //System.out.println(out_l2r);
        if(out_r2l)count++;
        //System.out.println(out_r2l);
        return count;
    }
    // Suming lines
    public static int game_check(boolean[][] board){
        return row_check(board) + col_check(board) + cross_check(board);
    }
    // For martrx transform row -> col; col -> row
    public static boolean[][] matrix_trans(boolean[][] matrix){
        int num = matrix[0].length;
        boolean[][] t_matrix = new boolean[num][num];
        for(int row = 0; row < num; row++){
            for(int col = 0; col < num; col++){
                t_matrix[row][col] = matrix[col][row];
            }
        }
        return t_matrix;
    }
}

@f5c5b31dcffd66cc86ba6e8ea4325dbf@","10"
"b02611012","@917744ca59b549c83fc23d276e02a62a@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.io.FileReader;
import java.io.BufferedReader;


/**
 *
 * @author user
 */
public class Bingo {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];
            
            announce = br.readLine().split("","");
            
            for (int i = 0; i < num; i++) {
                String[] mattemp = br.readLine().split("","");
                for (int j = 0; j < num; j++) {
                    matrix[i][j] = mattemp[j];
                }  
            }
            
            for (int i = 0; i < num; i++) {
                for (int j = 0; j < num; j++) {
                    for (int k = 0; k < stringCount; k++) {
                        if (matrix[i][j].equals(announce[k])==true) {
                            matrix[i][j]=(""1"");
                        }
                    }
                }
            }
            int bingocount=0;
            for (int i = 0; i < num; i++) {
                for (int j = 0; j < num; j++) {
                    if (matrix[i][j].equals(""1"")==true) {
                        if (j==num-1) {
                            bingocount++;
                        }
                    }
                    else
                        break;
                }
                for (int j = 0; j < num; j++) {
                    if (matrix[j][i].equals(""1"")==true) {
                        if (j==num-1) {
                            bingocount++;
                        }
                    }
                    else
                        break;
                }
            }
            for (int i = 0; i < num; i++) {
                if (matrix[i][i].equals(""1"")==true) {
                        if (i==num-1) {
                            bingocount++;
                        }
                    }
                    else
                        break;
            }
            for (int i = 0; i < num; i++) {
                if (matrix[i][num-1-i].equals(""1"")==true) {
                        if (i==num-1) {
                            bingocount++;
                        }
                    }
                    else
                        break;
            }
            
            

            // printf in Java (you should comment out or delete this in your final submission)
            System.out.printf(""""+bingocount);

            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
        }
    }
}

@917744ca59b549c83fc23d276e02a62a@","10"
"r04631036","@9c808f60cc0632725515780edc2feefb@
import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            // read a line and split by ','
            String[] data = br.readLine().split("","");

            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[] temp = new String[stringCount];
            String[][] matrix = new String[num][num];
            int[][] check = new int[num][num];

            // printf in Java (you should comment out or delete this in your final submission)
//            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);

            announce = br.readLine().split("","");
//            System.out.printf(""announce[0]=%s\n"", announce[0]);
//            System.out.printf(""announce[1]=%s\n"", announce[1]);

            for (int i = 0; i < num; i++) {
                temp = br.readLine().split("","");
                for (int j = 0; j < num; j++) {
                    matrix[i][j] = temp[j];
//                    System.out.printf(""matrix[%d][%d]=%s\n"", i, j, matrix[i][j]);
                }
            }
            for (int i = 0; i < num; i++) {
                for (int j = 0; j < num; j++) {
                    check[i][j] = 0;
//                    System.out.printf(""check[%d][%d]=%s\n"",i,j,check[i][j]);
                }
            }
            int count = 0;
            int output = 0;
//            System.out.printf("" %s , %s \n"", announce[0], announce[1]);
            for (int i = 0; i < num; i++) {
                for (int j = 0; j < num; j++) {
//                    System.out.printf(""matrix[%d][%d]=%s\n"",i,j,matrix[i][j]);
                    if (matrix[i][j].equals(announce[0]) || matrix[i][j].equals(announce[1])) {
                        check[i][j] = 1;
                    }
//                    System.out.printf(""check[%d][%d]=%s\n"", i, j, check[i][j]);
                }
            }
            int row = 0;
            for (int i = 0; i < num; i++) {
                row = 0;
                for (int j = 0; j < num; j++) {
                    row += check[i][j];
                    if (row == num) {
                        output++;
                    }
                }
                //System.out.printf(""%s\n"", row);
            }
            int col = 0;
            for (int i = 0; i < num; i++) {
                col = 0;
                for (int j = 0; j < num; j++) {
                    col += check[j][i];
                    if (col == num) {
                        output++;
                    }
                }
                //System.out.printf(""%s\n"", col);
            }
            int dia = 0;
            int invdia = 0;
            for (int i = 0; i < num; i++) {
                dia += check[i][i];
                if (dia == 3) {
                    output++;
                }
            }
            for (int i = 0; i < num; i++) {
                invdia += check[num-1-i][i];
                if (invdia == 3) {
                    output++;
                }
            }
//            System.out.printf(""output=%s\n"", output);
            System.out.printf(""%d\n"", output);
            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
        }
    }
}

@9c808f60cc0632725515780edc2feefb@","10"
"b01703032","@bc87db8e3932236599f537287ffe3afb@import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];
            String[] array=new String[num]; 
            String temp=null;
            int count=0;
            int line=0;

            String[] data1 = br.readLine().split("","");
            {
                for(int i=0; i< stringCount ; i++)
                {
                announce[i]= data1[i];

                }
            }
            
           while((temp=br.readLine())!=null){
            array=temp.split("","");//从文件中读到的行数据转换为一维数组。
            for(int i=0;i<num;i++){
               matrix[count][i]=array[i];
                 }
             count++;
              }
           
           for(int i=0;i<stringCount;i++)
           {
             for(int j=0;j<num;j++)
             {
             for(int k=0;k<num;k++)
             {
             if (matrix[j][k].equals(announce[i]))
             {
             matrix[j][k]=""0"";
             }
             else
             {
             continue;
             }
             }
             }
                            }
          for(int j=0;j<num;j++)
           {
               int count1=0;
               for(int k=0;k<num;k++)
               {
                   if(matrix[j][k]==""0"")  
                     count1++; 
                   else
                     break;          
               }   
               if(count1==num)
                line++;     
            } 
                      
          for(int j=0;j<num;j++)
           {
               int count1=0;
               for(int k=0;k<num;k++)
               {
                   if(matrix[k][j]==""0"")
                   {  count1++;}
                   else
                   { break;}
               }
               if(count1==num)
               line++;
            }           

          int count1=0;
           for(int j=0;j<num;j++)
           {
               if(matrix[j][j]==""0"")
                 count1++;
               else if(matrix[j][num-j-1]==""0"")
                 count1++;          
               break;
            }
               if(count1==num)
                   line++;
               
            
           System.out.println(line);
           
            /* printf in Java (you should comment out or delete this in your final submission)
            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num); */
            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
        }
    }
        
    }

@bc87db8e3932236599f537287ffe3afb@","10"
"r04631025","@caf4396a65e9d0cad74ac73fc1016144@/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.io.FileReader;
import java.io.BufferedReader;

/**
 *
 * @author Tim
 */
public class Bingo {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws Exception {
        // TODO code application logic here
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            String[] data = br.readLine().split("","");

            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];
            int[][] matrixCheck = new int[num][num];

            // printf in Java (you should comment out or delete this in your final submission)
            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);

            announce = br.readLine().split("","");
            

            for (int i = 0; i < num; i++) {
                matrix[i] = br.readLine().split("","");
            }
            
            for (int i = 0; i < num; i++) {
                for (int j = 0; j < num; j++) {
                    for (int k = 0; k < stringCount; k++) {
                        if (matrix[i][j].equals(announce[k])) {
                            matrixCheck[i][j] = 1;
                        } else {
                            matrixCheck[i][j] = 0;
                        }
                    
                    }
                }
            }
           
            int sum;
            int straightline=0;
            //count the row
            for (int i = 0; i < num; i++) {
                sum = 0;
                for (int j = 0; j < num; j++) {
                    sum = matrixCheck[i][j]++;
                }
                if(sum==num){
                    straightline++;
                }
            }
            //count the column
            for (int j = 0; j < num; j++) {
                sum = 0;
                for (int i = 0; i < num; i++) {
                    sum = matrixCheck[i][j]++;
                }
                if(sum==num){
                    straightline++;
                }
            }
            //count the diagonal
            sum=0;
            for(int i=0;i<num;i++){
                sum=matrixCheck[i][i]++;
            }
            if(sum==num){
                straightline++;
            }
            
            sum=0;
            for(int i=0;i<num;i++){                
                sum=matrixCheck[i][num-1]++;
                num--;
            }
            if(sum==num){
                straightline++;
            }
            
            System.out.printf(""Total straight line :%d\n"", straightline);

                /*  now you can write your own solution to hw0
                 *  you can follow the instruction described below:
                 * 
                 *  1. read the rest content of the file
                 *  2. store the announce strings (2nd line of the file) in variable announce
                 *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
                 *  4. compare the matrix and announce strings (this is the tricky part)
                 *  5. output how many 'straight line' are there in the matrix
                 * 
                 *  [note]
                 *  you can use every data structure in standard Java packages (Java 8 supported)
                 *  the packages in stdlib.jar and algs4.jar are also available for you to use
                 *
                 *  [hint]
                 *  1. you should check whether Java pass the variable by references or by values.
                 *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
                 *     useful for solving problems. 
                 */
            }

        }
    
}

@caf4396a65e9d0cad74ac73fc1016144@","10"
"b03611041","@3cf46a9dc8f225bb52a33704d1df4d6a@import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];
            boolean[][] mp = new boolean[num][num];
            String CurrentLine;

            // printf in Java (you should comment out or delete this in your final submission)
            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);

            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
            announce=br.readLine().split("","");
            int lines=0;

            for(int i=0;i<num;i++){
                matrix[i]=br.readLine().split("","");
            }
//            System.out.printf(""%s\n "",announce[0]);

            for(int i=0;i<num;i++){
                for(int j=0;j<num;j++){
                    for(int k=0;k<announce.length;k++) {
                        if(announce[k].equals(matrix[i][j])){
                            mp[i][j]=true;
                            break;
                        }
                        else mp[i][j]=false;
                    }
                }
            }

//            boolean a=mp[0][0]&mp[0][1];
//            System.out.printf(a);
            boolean diag=true,rdiag=true;
            for(int i=0;i<num;i++){
                boolean row=true,col=true;
                diag&=mp[i][i];
                rdiag&=mp[num-i-1][i];
                for(int j=0;j<num;j++) {
                    row&=mp[i][j];
                    col&=mp[j][i];
                }
                if(row==true)lines++;
                if(col==true)lines++;
            }
            if(diag==true)lines++;
            if(rdiag==true)lines++;
//
//
//            for(int i=0;i<num;i++){
//                for(int j=0;j<num;j++){
//                    System.out.printf(""%s "",matrix[i][j]);
//                }
//                System.out.printf(""\n"");
//            }
//
//            for(int i=0;i<num;i++){
//                for(int j=0;j<num;j++){
//                    System.out.printf(""%b "",mp[i][j]);
//                }
//                System.out.printf(""\n"");
//            }

            System.out.printf(""%d"",lines);
        }
        catch (Exception e){
            e.printStackTrace();
        }
    }
}

@3cf46a9dc8f225bb52a33704d1df4d6a@","10"
"b03611003","@401c9d7be772dee4a132e9682c29e4c1@package bingo;

import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            // read a line and split by ','
            String[] data = br.readLine().split("","");

            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];

            // printf in Java (you should comment out or delete this in your final submission)
//            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);

            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
//            ========================================================================================
            announce = br.readLine().split("","");
            for (int i = 0; i < num; i++) {
                matrix[i] = br.readLine().split("","");
            }
            int[][] crossedout = new int[num][num];

//            store to-be-crossedout into String[] announce, bingo into String[][] matrix. creat a counter int[][] crossedout
//            System.out.print(matrix[2][0]);
            for (int j = 0; j < stringCount; j++) {

//                check every announce
                for (int row = 0; row < num; row++) {
                    for (int col = 0; col < num; col++) {
                        if (matrix[row][col].equals(announce[j])) {
                            crossedout[row][col] = 1;
                        }
                    }
                }
            }

//            for (int row = 0; row < matrix.length; row++) {
//                for (int column = 0; column < matrix[row].length; column++) {
//                    System.out.println(crossedout[row][column] + "" "");
//                }
//                System.out.println();
//            }
//       
//              show the crossedout counter      
            int counter = 0;

            for (int row = 0; row < num; row++) {
                int thisrow = 0;
                for (int col = 0; col < num; col++) {
                    thisrow += crossedout[row][col];
                }
                if (thisrow == num) {
                    counter++;
                }
            }
//            check rows

            for (int col = 0; col < num; col++) {
                int thiscol = 0;
                for (int row = 0; row < num; row++) {
                    thiscol += crossedout[row][col];
                }
                if (thiscol == num) {
                    counter++;
                }
            }
//            check cols
            int cross1 = 0;
            int cross2 = 0;

            for (int i = 0; i < num; i++) {
                cross1 += crossedout[i][i];   
                cross2 += crossedout[i][num - 1 - i];
            }
            
            if(cross1 == num){
                counter++;
            }
            if(cross2 == num){
                counter++;
            }
//            check cross
            
            
            System.out.print(counter);
            

        }
    }
}

@401c9d7be772dee4a132e9682c29e4c1@","10"
"r04522627","@a5de26ccc45db648416bdf7ba210d694@import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {

    public static void main(String[] args) throws Exception {
       
        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];
            int[][] matrix_bingo = new int[num][num];

            // printf in Java (you should comment out or delete this in your final submission)
//            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);

            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
            data = br.readLine().split("","");
            System.out.printf(""announced strings:\n"");
            for(int i = 0; i < stringCount; i++)
            {
                announce[i] = data[i];
                System.out.printf(announce[i] + "" "");
            }
            
            System.out.printf(""\nmatrix:\n"");
            for(int i = 0; i < num; i++)
            {
                data = br.readLine().split("","");
                for(int j = 0; j < num; j++)
                {
                    matrix[i][j] = data[j];
                    //標記與announce相同的
                    for(int n = 0; n < announce.length; n++)
                    {
                        if(matrix[i][j].equals(announce[n]))
                        {
                             matrix_bingo[i][j] = 1;
                             break;
                        }
                        else
                        {
                             matrix_bingo[i][j] = 0;
                        }
                    }
                    System.out.printf(matrix[i][j] + "" "");
                }
                System.out.printf(""\n"");
            }
            
            
            //算出直線數
            int numberOfLines = 0;
            //直線與橫線
            int[] temp = new int[3];
            for(int i = 0; i < num; i++)
            {
                temp[0] = temp[1] = 1;
                for(int j = 0; j < num; j++)
                {
                    temp[0] = temp[0] * matrix_bingo[i][j];
                    temp[1] = temp[1] * matrix_bingo[j][i];
                }
                if(temp[0] == 1)
                {
                    numberOfLines++;
                }
                if(temp[1] == 1)
                {
                    numberOfLines++;
                }
            }
            
            //對角線
            for(int n = 0; n < 2; n++)
            {
                temp[2] = 1;
                for(int i = 0; i < num; i++)
                {
                    temp[2] = temp[2] * matrix_bingo[(num - 1 - 2*i) * n + i][i];
                }
            }
            
            
            numberOfLines = temp[0] + temp[1] + temp[2];
            
            System.out.printf(""number of straight lines: %d\n"",numberOfLines);
             
        }
    }
}

@a5de26ccc45db648416bdf7ba210d694@","10"
"b02611028","@11af4380b1abace54850c21bf2b6ed91@import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            // read a line and split by ','
            String[] data = br.readLine().split("","");

            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];

            //printf in Java (you should comment out or delete this in your final submission)
            //System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);

            announce = br.readLine().split("","");

            String[] buffer = new String[num];
            for (int i = 0; i < num; i++) {
                buffer = br.readLine().split("","");
                for (int j = 0; j < num; j++) {
                    matrix[i][j] = buffer[j];
                    //System.out.print(matrix[i][j] + "" "");
                }
                //System.out.printf(""%n"");
            }
            
           int[][] maps = new int[num][num];
            for (int i = 0; i < num; i++) {
                for (int j = 0; j < num; j++) {
                    for (int k = 0; k < stringCount; k++) {
                        if ((matrix[i][j]).equals(announce[k])) {
                            maps[i][j] = 1;
                        }

                    }
                    //System.out.print(maps[i][j] + "" "");
                }
                //System.out.printf(""%n"");
            }

            int count = 0;
            int realcount = 0;
            for (int i = 0; i < num; i++) {

                if (maps[i][1] == 1) {
                    for (int k = 0; k < num; k++) {
                        if (maps[i][k] == 1) {
                            count++;
                        }
                    }
                    if (count % num == 0) {
                        realcount++;
                    } else {
                        count = 0;
                    }
                }
                if (maps[1][i] == 1) {
                    for (int k = 0; k < num; k++) {
                        if (maps[k][i] == 1) {
                            count++;
                        }
                    }
                    if (count % num == 0) {
                        realcount++;
                    } else {
                        count = 0;
                    }
                }
            }
            if (maps[0][0] == 1) {
                    for (int k = 0; k < num; k++) {
                        if (maps[k][k] == 1) {
                            count++;
                        }
                    }
                    if (count % num == 0) {
                        realcount++;
                    } else {
                        count = 0;
                    }
                }
                if (maps[num-1][0] == 1) {
                    for (int k = 0; k < num; k++) {
                        if (maps[num-1-k][k] == 1) {
                            count++;
                        }
                    }
                    if (count % num == 0) {
                        realcount++;
                    } else {
                        count = 0;
                    }
                }
            System.out.print(realcount);
            
            /*for (int i=0;i<num;i++){
             for (int j=0;j<num;j++){
             System.out.print(matrix[i][j]+"" "");
             }
             System.out.print(""\n"");
             }
             //System.out.println(Arrays.toString(announce));

             /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
        }
    }
}

@11af4380b1abace54850c21bf2b6ed91@","10"
"b02611016","@d4c07c666c150a5d64ac43f76f2fd1dc@import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            // read a line and split by ','
            String[] data1 = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data1[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data1[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];

            // printf in Java (you should comment out or delete this in your final submission)
           // System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);
            int[][] match=new int[num][num];
            int we=0;
            int bingoline=0;
            String[] data2 = br.readLine().split("","");
           for(int i=0;i<stringCount;i++)
           {
            announce[i]=data2[i];
                    }
           for(int i=0;i<num;i++)
           {   String[] data3 = br.readLine().split("","");
               for(int j=0;j<num;j++)
              {matrix[i][j]=data3[j];
                  
              }
               
           }
         for(int k=0;k<stringCount;k++)
         {
           for(int i=0;i<num;i++)
           { for(int j=0;j<num;j++)
             { if(matrix[i][j].equals(announce[k]))
                { match[i][j]=1;
                }
               
                  
             }
           }
         }
         for(int i=0;i<num;i++)
         {for(int j=0;j<num;j++)
           { if( match[i][j]!=1)
             {break;
             }
            we=we+1;
            if(we==3)
             {we=0;
              bingoline=bingoline+1;
             }
           }
             we=0;
         }
         
         for(int i=0;i<num;i++)
         {for(int j=0;j<num;j++)
           { if( match[j][i]!=1)
             {break;
             }
            we=we+1;
            if(we==3)
             {we=0;
              bingoline=bingoline+1;
             }
            
           }
          we=0;
         }
         
         for(int i=0;i<num;i++)
         {  if( match[i][i]!=1)
             {break;
             }
             we=we+1;
             if(we==3)
             {we=0;
              bingoline=bingoline+1;
             }
           we=0;
         }
           for(int i=0;i<num;i++)
         {  if( match[num-i-1][i]!=1)
             {break;
             }
             we=we+1;
             if(we==3)
             {we=0;
              bingoline=bingoline+1;
             }
           we=0;
         }
           
          //     System.out.printf(announce[0]);
         //          System.out.printf(""\n"");
           //        System.out.printf(matrix[0][2]);
            //       System.out.printf(""\n"");
          //         System.out.printf(matrix[1][2]);
          //         System.out.printf(""\n"");
          //         System.out.printf(matrix[2][2]);
         //          System.out.printf(""\n"");
         //          System.out.printf(""%d"",we);
         //          System.out.printf(""\n"");
                      System.out.printf(""%d"",bingoline);
             //      System.out.printf(""\n"");
            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
        }
    }
}


@d4c07c666c150a5d64ac43f76f2fd1dc@","10"
"r04522616","@9d9b6219f0d591c3dcaccffcaba3ad8f@
import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];
            int[][] bingoCircle=new int[num][num];
            

            // printf in Java (you should comment out or delete this in your final submission)
            //System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);

            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
            data = br.readLine().split("","");
            for(int i=0;i<stringCount;i++)
            {
                announce[i]= data[i];
                //System.out.printf(announce[i]+""\n"");  
            }
            for(int i=0;i<num;i++)
            {
                data = br.readLine().split("","");
                for(int j=0;j<num;j++)
                {
                    matrix[i][j]=data[j];
                    bingoCircle[i][j]=0;
                    
                    for(int k=0;k<stringCount;k++)
                    {
                        if(matrix[i][j].equals(announce[k]))
                        {
                            bingoCircle[i][j]=1;
                        }
                    }
                    //System.out.printf(matrix[i][j]+"" ""+bingoCircle[i][j]+""\n""); 
                }
            }
            int circleCountRow=0;
            int circleCountColumn=0;
            int circleCountLeft=0;
            int circleCountRight=0;
            int lineCount=0;
            int numR=num;
            for(int i=0;i<num;i++)
            {                
                for(int j=0;j<num;j++)
                {                    
                    circleCountRow+=bingoCircle[i][j];
                    circleCountColumn+=bingoCircle[j][i];                    
                    if(j==num-1)
                    {
                        if(circleCountRow==num)
                        {
                            lineCount++;
                        }
                        if(circleCountColumn==num)
                        {
                            lineCount++;
                        }                        
                        circleCountRow=0;
                        circleCountColumn=0;                         
                    }
                }                  
            }
            for(int j=0;j<num;j++)
            {
                    numR--;                    
                    circleCountLeft+=bingoCircle[j][j];
                    circleCountRight+=bingoCircle[j][numR];
                    if(j==num-1)
                    {                        
                        if(circleCountLeft==num)
                        {
                            lineCount++;
                        }
                        if(circleCountRight==num)
                        {
                            lineCount++;
                        }                        
                        circleCountLeft=0;
                        circleCountRight=0;
                        numR=num;
                    }
            }
            System.out.printf(""%d"",lineCount);
            
            
        }
    }
}

@9d9b6219f0d591c3dcaccffcaba3ad8f@","10"
"r04631039","@a854444aed645b710b19edc4c9cfda5d@
import java.io.BufferedReader;
import java.io.FileReader;

/**
 *
 * @author Eric
 */
public class Bingo1 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws Exception {
        
        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            // read 1st line and split by ','
            String[] data = br.readLine().split("","");
            // read 2nd line and split by ','
            String[] data2 = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);
            
            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];
                      
//            String[] data3 = br.readLine().split("","");
//            String[] data4 = br.readLine().split("","");
//            String[] data5 = br.readLine().split("","");
//            for(int i=0;i<num;i++){
//                matrix[0][i] = data3[i];
//                matrix[1][i] = data4[i];
//                matrix[2][i] = data5[i];
//            }
            
            // read 3rd matrix and split by ','
            for (int i=0 ; i<num ; i++){
                String[] data3 = br.readLine().split("","");
                for (int j=0 ; j<num ; j++)
                    matrix[i][j]=data3[j];
            }   
            
            // check if alements matches announce string
            Integer[][] judge = new Integer[num][num];
            for(int i=0;i<num;i++){
                for(int j=0;j<num;j++){
                    if(matrix[i][j].equals(data2[0]))
                        judge[i][j] = 1;
                    else if(matrix[i][j].equals(data2[1]))
                        judge[i][j] = 1;
                    else
                        judge[i][j] = 0;
                }
            }

            int[] col = new int[num];
            for(int i=0;i<num;i++)
                for(int j=0;j<num;j++)
                    col[i] += judge[i][j];
            
            int[] row = new int[num];
            for(int i=0;i<num;i++)
                for(int j=0;j<num;j++)
                    row[i] += judge[j][i];
            
            int dia1 = 0;            
            for(int i=0;i<num;i++)
                dia1 += judge[i][i];
            
            int dia2 = 0;            
            for(int i=0;i<num;i++)
                dia2 += judge[i][num-1-i];
            
            
            int line = 0;
            for(int i=0;i<num;i++){
                if(col[i]==num)
                    line++;
                else if(row[i]==num)
                    line++;
                else if(dia1==num)
                    line++;
                else if(dia2==num)
                    line++;
            }
            
            // printf in Java (you should comment out or delete this in your final submission)
//            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);
//            System.out.printf(""%d\n"", line);
        }
    }
}

@a854444aed645b710b19edc4c9cfda5d@","10"
"r04921105","@8b8449656f84c482282817f5bf64dbaf@import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];
            String[][] check = new String[num][num];
            // printf in Java (you should comment out or delete this in your final submission)
            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);
            // read the rest content of the file
            String[] country = br.readLine().split("","");
            /*
            String[] row1 = br.readLine().split("","");
            String[] row2 = br.readLine().split("","");
            String[] row3 = br.readLine().split("","");
           */
            //store the announce strings (2nd line of the file) in variable announce
           for(int i=0; i < stringCount; i++)
           {announce [i]= country[i];
        //   System.out.print(announce[i]);
        //  System.out.print(""\n"");
            }
          //store the matrix (from the 3rd line to the end of the file) in variable matrix

          for(int i=0;i<num;i++)
          { matrix[i] = br.readLine().split("",""); 
              }
            // print stored matrix
            for (String[] matrix1 : matrix) {
                for (int j = 0; j<matrix[0].length; j++) {
                    System.out.print(matrix1[j]);
                }
                System.out.print(""\n"");
            }
          //compare the matrix and announce strings (this is the tricky part)
          //1)creat a same size matrix
          for (int i = 0 ;i<matrix.length;i++){
              for(int j=0;j<matrix[0].length;j++){
              check[i][j]=null;    
            }
          }
         //2)check matrix[][].equal(accounce[])
         for(int x = 0;x<stringCount;x++){
                for (int i=0;i<matrix.length;i++) {
                    for (int j = 0; j<matrix[0].length; j++) {
                        if(announce[x].equals(matrix[i][j])){
                            check[i][j]=""bingo"";
                        }
                    }
                    
                }
         }   
         //3)print new check
         for (String[] matrix2 : check) {
                for (int j = 0; j<check[0].length; j++) {
                    System.out.print(matrix2[j]);
                }
                System.out.print(""\n"");
            }
         //4)check straight
         int straight =0;
         //rightdown
         for (int i=0;i<check[0].length;i++){
             int counter=0;
             for(int j=0;j<check[0].length;j++){
                 if(i==j&&check[i][j]==""bingo""){
                     counter++;
                     System.out.print(counter);
                     System.out.print(""\n"");
                     
                     }
                      
                 }
                 if(counter==check[0].length){
                         straight++;
             
             }
             
         }
System.out.print(""\n"");
        //row
         for (int i=0;i<check[0].length;i++){
             int counter=0;
             for(int j=0;j<check[0].length;j++){
             
                 if(check[i][j]==""bingo""){
                     counter++;
                     System.out.print(counter);
                     System.out.print(""\n"");
                     
                     }
                  if(counter==check[0].length){
                         straight++;    
                    }
             
             
             }
         }
        
 System.out.print(""\n"");        
         //col
         for (int i=0;i<check[0].length;i++){
             int counter=0;
             for(int j=0;j<check[0].length;j++){
                 if(check[j][i]==""bingo""){
                     counter++;
                     System.out.print(counter);
                     System.out.print(""\n"");
                     
                     }
                  if(counter==check[0].length){
                         straight++;    
                 }
             
             }
             
         }
    System.out.print(""\n"");     
         //leftdown
         
         for (int i=0;i<check[0].length;i++){
             int counter=0;
             for(int j=0;j<check[0].length;j++){
                 if(i+j==num&&check[i][j]==""bingo""){
                     counter++;
                     System.out.print(counter);
                     System.out.print(""\n"");
                     
                     }
                      
                 }
                 if(counter==check[0].length){
                         straight++;
             
             }
             
         }
         
         System.out.print(""\n"");
         
         //print out answer
          System.out.print(straight);
            /*  now you can write yur own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
        }
    }
}

@8b8449656f84c482282817f5bf64dbaf@","10"
"b01502105","@660e172a5aa2d894d26c652e7f43a3fe@
import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            // read a line and split by ','
            String[] data = br.readLine().split("","");

            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];

            announce = br.readLine().split("","");

            for (int i = 0; i < num; i++) {
                matrix[i] = br.readLine().split("","");
            }

            // printf in Java (you should comment out or delete this in your final submission)
//            System.out.printf(data[0]+"" ""+data[1]+""\n"");
//            System.out.printf(announce[0]+"" ""+announce[1]+""\n"");
//            System.out.println(matrix[0][0]+"" ""+matrix[0][1]+"" ""+matrix[0][2]);
//            System.out.println(matrix[1][0]+"" ""+matrix[1][1]+"" ""+matrix[1][2]);
//            System.out.println(matrix[2][0]+"" ""+matrix[2][1]+"" ""+matrix[2][2]);
//            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);
            //fill in compare matrix
            int[][] mat_compare = new int[num][num];
            for (int y = 0; y < num; y++) {
                for (int x = 0; x < num; x++) {
                    for (int j = 0; j < stringCount; j++) {
                        if (matrix[x][y].equals(announce[j])) {
                            mat_compare[x][y] = 1;
                        }
                    }
                }
            }
//            System.out.println(mat_compare[0][0]+"" ""+mat_compare[0][1]+"" ""+mat_compare[0][2]);
//            System.out.println(mat_compare[1][0]+"" ""+mat_compare[1][1]+"" ""+mat_compare[1][2]);
//            System.out.println(mat_compare[2][0]+"" ""+mat_compare[2][1]+"" ""+mat_compare[2][2]);
            int[] row = new int[num];
            int[] column = new int[num];
            int[] diagonal = new int[2];
            int line_count = 0;
            for (int i = 0; i < num; i++) {
                for (int j = 0; j < num; j++) {
                    row[i] += mat_compare[i][j];
                    column[i] += mat_compare[j][i];
                }
                //check diagonal
                diagonal[0] += mat_compare[i][i];
                diagonal[1] += mat_compare[i][num - i - 1];
                if (row[i] == num) {
                    line_count++;
                }
                if (column[i] == num) {
                    line_count++;
                }
            }
            if (diagonal[0] == num) {
                line_count++;
            }
            if (diagonal[1] == num) {
                line_count++;
            }
//            System.out.println(row[0]+"" ""+row[1]+"" ""+row[2]);
//            System.out.println(column[0]+"" ""+column[1]+"" ""+column[2]);
            System.out.println(line_count);
            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
        }
    }

}

@660e172a5aa2d894d26c652e7f43a3fe@","10"
"r04921065","@80d48e33535cf885e3574fb3d9ccf95f@//package Bingo;

import java.io.FileReader;
import java.io.BufferedReader;
import java.io.IOException;
import java.util.Arrays;


public class Bingo {

    public static void main(String[] args) throws IOException {

        // read file from args[0] in Java 7 style
        FileReader fr = new FileReader(""C:\\Users\\余軒\\Documents\\algs4\\Bingo\\src\\Bingo\\input.txt"");
        BufferedReader br = new BufferedReader(fr);
            
            // read a line and split by ','
            String[] data= new String[2];
            data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];
            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);
            
            
            String[] va = new String[2]; //pointer
            
            va = br.readLine().split("","");
            System.out.println(va[0]+"",""+va[1]);
           
           String[] country ;
            country= new String[num];
            String rd=null;
            int ct=0;
            while ((rd = br.readLine())!=null)
            {
                country = rd.split("","");
                matrix[ct]=country;
                for (int i=0;i<num;i++)
                System.out.print(matrix[ct][i]+"","");  //depointer
                System.out.println(); //換行
                
                ct++;
            }
        //  System.out.println(matrix[0][1]); 
     
          boolean[][] b = new boolean[num][num];
          for (int i=0;i<num;i++){
              for (int j=0;j<num;j++)
              {
                  if (va[0].equals(matrix[i][j]))
                  {
                      b[i][j] = true;
                  }
                  else b[i][j] = va[1].equals(matrix[i][j]);  //若是為true,不是為false
                  }
              }
         
       //   System.out.println(b[2][2]);
          
          int count = 0;
          //horizatal
          for (int i=0;i<num;i++){
          if (b[i][0]==b[i][1]&&b[i][1]==b[i][2]&&b[i][2]==true)
          {
          count++;
          }   
              }
          //vertical
          for(int j=0;j<num;j++){
          if (b[0][j]==b[1][j]&&b[1][j]==b[2][j]&&b[2][j]==true)
          {
              count++;
          }
          }
          //diaonal
          if (b[0][0]==b[1][1]&&b[1][1]==b[2][2]&&b[2][2]==true)
          {
              count++;
          }
          if(!(b[2][0]==b[1][1]&&b[1][1]==b[0][2]&&b[0][2]==true))
          {
          } else {
              count++;
        }
          System.out.println(count); 
          
          
              
            // printf in Java (you should comment out or delete this in your final submission)
            

            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
            
        
    }

}
@80d48e33535cf885e3574fb3d9ccf95f@","10"
"r04228027","@ad6ff1d30bdc42e032099c32195603cc@import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {
    
    public static boolean find(String x, String[] anno){
        for (String item : anno) {
            if (x.equals(item))
                return true;
        }
        return false;
    }
    
    public static void printResult(String[][] thematrix){
                for (int i = 0; i < thematrix.length; i++) {
                    for (int j = 0; j < thematrix.length; j++)
                        System.out.printf(thematrix[i][j]+"" "");
                    System.out.printf(""\n"");
                }
            }

    public static void main(String[] args) throws Exception {
        
        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];

            // printf in Java (you should comment out or delete this in your final submission)
            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);
            
            // 1. read the rest content of the file
            // 2. store the announce strings (2nd line of the file) in variable announce
            announce = br.readLine().split("","");
            // 3. store the matrix (from the 3rd line to the end of the file) in variable matrix
            for (int i = 0; i < num; i++) {
               String[] temp = br.readLine().split("","");
                for (int j = 0; j < num; j++) {
                    matrix[i][j] = temp[j];                   
                }
            }
            //printResult(matrix);
            // 4. compare the matrix and announce strings (this is the tricky part)
            for (int i = 0; i < num; i++) {
                for (int j = 0; j < num; j++) {
                    if(find(matrix[i][j], announce))
                        matrix[i][j] = ""cross"";
                }
            }
            //printResult(matrix);
            //  5. output how many 'straight line' are there in the matrix
            int lines = 0;
            //check row and colunm
            for (int i = 0; i < num; i++) {
                int temp1 = 0;
                int temp2 = 0;
                for (int j = 0; j < num; j++) {
                    if(matrix[i][j].equals(""cross""))
                        temp1+=1;
                    if(matrix[j][i].equals(""cross""))
                        temp2+=1;
                }
                if(temp1 == num && temp2 == num )
                    lines += 2;
                else if(temp1 == num || temp2 == num)
                    lines += 1;
            }
            //check diagonal
            int temp1 = 0;
            int temp2 = 0;
            for (int i = 0; i < num; i++) {
                if(matrix[i][i].equals(""cross"")){
                    temp1 += 1;
                }
                if(matrix[i][num-1-i].equals(""cross"")){
                    temp2 += 1;
                }
            }
            if(temp1 == num && temp2 == num )
                    lines += 2;
            else if(temp1 == num || temp2 == num)
                    lines += 1;
            
            System.out.printf(""%d\n"",lines);
            /*  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
            
            
        }
    }
}
@ad6ff1d30bdc42e032099c32195603cc@","10"
"r03525006","@bfcc005f3c9951e66f8b9b49cccca589@import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];
            int[][] bingoMatrix = new int[num][num];

            // printf in Java (you should comment out or delete this in your final submission)
            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);

            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
            String readLine;
            int announceLine = 1, matrixLineStart = 2 , matrixCount = 0;
            while ((readLine = br.readLine()) != null)
            {
                if (announceLine++ < matrixLineStart) {
                    for (int i = 0; i < stringCount; i++) {
                        String[] bingoTarget = readLine.split("","");
                        announce[i] = bingoTarget[i];
                    }
                }
                else if (announceLine++ >= matrixLineStart) {
                    for (int j  = 0; j < num; j ++) {
                        String[] matrixTarget = readLine.split("","");
                        matrix[matrixCount][j] = matrixTarget[j];
                    }
                    matrixCount++;
                }
            }

            for (int k = 0; k < announce.length; k++){
                for (int i = 0; i < num ; i++) {
                    for (int j = 0 ; j < num ; j++) {
                        if (matrix[i][j].equals(announce[k])) {
                            bingoMatrix[i][j] = 1;
                        }
                    }
                }
            }

            int straightLines = 0 , diag1 = 0, diag2 = 0, rowCount = 0, colCount = 0;
            for (int i = 0; i < num; i++) {
                diag1 = diag1 + bingoMatrix[i][i];
                diag2 = diag2 + bingoMatrix[num-i-1][num-i-1];
                for (int j = 0; j < num; j++){
                    rowCount = rowCount + bingoMatrix[i][j];
                    colCount = colCount + bingoMatrix[j][i];
                }
                if (rowCount == num) {
                    straightLines++;
                }
                if (colCount == num) {
                    straightLines++;
                }
                if (diag1 == num) {
                    straightLines++;
                }
                if (diag2 == num) {
                    straightLines++;
                }
            }
            br.close();
            System.out.println(straightLines);
        }
    }
}

@bfcc005f3c9951e66f8b9b49cccca589@","10"
"b03611015","@22aa13fe78205fe163faaf6a1d78ff82@import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

/**
 *
 * @author Steven
 */
public class Bingo {

    /**
     * @param args the command line arguments
     * @throws java.io.IOException
     */
    public static void main(String[] args) throws IOException {
     // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
          
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);
            
            
            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];
            
            announce = br.readLine().split("","");
            
            for(int i=0;i<num;i++){
            matrix[i] = br.readLine().split("","");
            }
            
            for(int j=0;j<stringCount;j++){
                for(int x=0;x<num;x++){
                    for(int y=0;y<num;y++){
                        if(matrix[x][y].equals(announce[j])){
                            matrix[x][y] = ""0"";
                        }
                   }    
                }
            }
            int count=0;
            for(int i=0;i<num;i++){
                if(""0"".equals(matrix[i][0]))
                    count++;
            }
            for(int i=0;i<num;i++){
                if(""0"".equals(matrix[0][i]))
                    count++;
            }
            for(int i=0;i<num;i++){
                if(""0"".equals(matrix[i][i]))
                    count++;
            }
            for(int i=0;i<num;i++)
            {
                if(""0"".equals(matrix[num-i][i]))
                    count++;
            }
            
            // printf in Java (you should comment out or delete this in your final submission)
            System.out.println(count);
            
        
            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
        }
    }
}
@22aa13fe78205fe163faaf6a1d78ff82@","10"
"r04631009","@fb5167ae1814c4f8d695193241338b68@import java.io.FileReader;


import java.io.BufferedReader;
/**
 *
 * @author USER
 */
public class Bingo {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws Exception {
        // TODO code application logic here
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            String[] data = br.readLine().split("","");// read a line and split by ','
            int stringCount = Integer.parseInt(data[0]);// store the first integer in variable stringCount (number of announced strings)

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];

            // printf in Java (you should comment out or delete this in your final submission)
            //System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);
            String[] data2 = br.readLine().split("","");
            for (int i = 0; i < stringCount; i++) {
                announce[i] = data2[i];
//                System.out.print(announce[i]+""\t"");
            }
//                System.out.println("""");
            for (int i = 0; i < num; i++) {
                String[] data_temp = br.readLine().split("","");
                for (int j = 0; j < num; j++) {
                    matrix[i][j] = data_temp[j];
//                    System.out.print(matrix[i][j]+""\t"");
                }
//                System.out.println("""");
            }
            int[][] checking = new int[num][num];
            for (int i = 0; i < num; i++) {
                for (int j = 0; j < num; j++) {
                    checking[i][j] = 0;
                }
            }
            for (int p = 0; p < stringCount; p++) {
                for (int i = 0; i < num; i++) {
                    for (int j = 0; j < num; j++) {
                        if (matrix[i][j].equals(announce[p])) {
                            checking[i][j] = 1;
                        }
                    }
                }
            }
             //for (int i=0 ; i<num ; i++){
            //    for (int j=0 ; j<num ; j++)
            //        System.out.print(checking[i][j]+""\t"");
            //    System.out.println("""");
            //}
            //---------------------------Find Bingo line---------------------//
            int counter = 0, counter_diagonal1 = 0, counter_diagonal2 = 0;
            for (int i = 0; i < num; i++) {
                if (checking[i][i] == 1) {
                    counter_diagonal1++;
                }
            }
            for (int i = 0; i < num; i++) {
                if (checking[i][(num - 1) - i] == 1) {
                    counter_diagonal2++;
                }
            }
            if (counter_diagonal1 == num) {
                counter++;
            }
            if (counter_diagonal2 == num) {
                counter++;
            }

            for (int i = 0; i < num; i++) {
                int temp = 0, temp2 = 0;
                for (int j = 0; j < num; j++) {
                    temp += checking[i][j];
                    temp2 += checking[j][i];
                }
                if (temp == num) {
                    counter++;
                }
                if (temp2 == num) {
                    counter++;
                }
            }
            System.out.println(counter);
        }
    }
}
@fb5167ae1814c4f8d695193241338b68@","10"
"r04945009","@6c2c76a03b4aeda21cb33926ae0615c3@import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0])))
        {
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];

            // printf in Java (you should comment out or delete this in your final submission)
//            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);
            
            announce = br.readLine().split("","");
            
            for(int i=0; i<num; i++){
                 matrix[i] = br.readLine().split("","");
            }
            
            boolean[][] tableTF = new boolean[num][num];
            for(int i=0; i<num; i++){
                for(int j=0; j<num; j++){
                    for(int a=0; a<stringCount; a++){
                        if(tableTF[i][j] == true)
                            continue;
                        tableTF[i][j] = announce[a].equals(matrix[i][j]);
                    }
                }
            }
            
            int Countline = 0;
            for (int i=0; i<num; i++){
                for (int j=0; j<num; j++){
                   if (!tableTF[i][j])
                       break;
                   if (j == num-1)
                       Countline ++; 
                }
            } 
            for (int j=0; j<num; j++){
                for (int i=0; i<num; i++){
                   if (!tableTF[i][j])
                       break;
                   if (i == num-1)
                       Countline ++; 
                }
            }
            for (int i=0; i<num; i++){
                   if (!tableTF[i][i])
                       break;
                   if (i == num-1)
                       Countline ++; 
                }
            for (int i=0; i<num; i++){
                   if (!tableTF[i][num-1-i])
                       break;
                   if (i == num-1)
                       Countline ++; 
                }
            
            System.out.println(Countline);


            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
        }
    }
}

@6c2c76a03b4aeda21cb33926ae0615c3@","10"
"r04921074","@eaaa68d78a92ac6baf48ec32bd848c07@import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintStream;
/**
 *
 * @author LAB228
 */
public class JavaApplication1 {

    /**
     * @param args the command line arguments
     */
    
    
    public static void main(String[] args) throws IOException {
        // TODO code application logic here
        
        //System.out.println(""阿里布達的東西"");
        
    try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){           
         

            // read a line and split by ','    Line 1
            String[] data0 = br.readLine().split("","");
             // read a line and split by ','    Line 2
            String[] data1 = br.readLine().split("","");
     /*       
            // read a line and split by ','    Line 3
            String[] data2 = br.readLine().split("","");
            // read a line and split by ','    Line 4
            String[] data3 = br.readLine().split("","");
            // read a line and split by ','    Line 5
            String[] data4 = br.readLine().split("","");   */
            
                // store the first integer in variable stringCount (number of announced strings)
                int stringCount0 = Integer.parseInt(data0[0]);
                // store the second integer in variable num (dimension of matrix: num * num)
                int num = Integer.parseInt(data0[1]);
            
             // printf in Java (you should comment out or delete this in your final submission)
     //       System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount0, num, num);

     //       System.out.printf(""\n%s\n"",data1[0]);      
            
            
            // initilization of a String array in Java
            String[] announce = new String[stringCount0];
            String[][] matrix = new String[num][num];
            
            int[][] plate = new int[num][num];
           
            // input announce contry
            for (int i=0 ; i<stringCount0 ; i++){
                announce[i] = data1[i];
            }
            
            //input bingo metrix         &     counting plate              
            
            for (int colume = 0; colume < num ; colume ++ ){
                
                // read a line and split by ','    Line 3~5
                String[] dataM = br.readLine().split("","");  
                
                for(int row = 0; row < num ; row ++ ){
                    
                    matrix[colume][row] = dataM[row] ;                    
                  
            //    System.out.printf(""%s "",announce[0]); 
            //    System.out.printf(matrix[colume][row]);                    
                
                    for(int a=0 ; a<stringCount0 ; a++){
                    if(matrix[colume][row].equals(announce[a])){
                        plate[colume][row] = 1;}
                    }
                          
                //    System.out.println(plate[colume][row]+""\n"");
                
                
                } //end of for-row
            }//end of for-colume
        
        int totalbingo = 0 ; 
        
        //row check
        
        int[] rowcheck = new int[num];
        
        for(int x=0 ; x < num ; x++){ 
            for(int y=0 ; y < num ; y++){
                
                rowcheck[x] = rowcheck[x] +  plate[x][y] ;           
             
            }//end of for-y
                if(rowcheck[x] == num){
                totalbingo ++;
                }//end of if    
        }//end of for-x   
        
                //colume check
        
        int[] columecheck = new int[num];
        
        for(int x=0 ; x < num ; x++){ 
            for(int y=0 ; y < num ; y++){
                
                columecheck[x] = columecheck[x] +  plate[y][x] ; //the differece between row/colume check is plate[y][x]      
             
            }//end of for-y
                if(columecheck[x] == num){
                totalbingo ++;
                }//end of if    
        }//end of for-x       

                  //diagonal check
        
        int[] diagonalcheck = new int[2];
        
        for(int x=0 ; x < num ; x++){
            
            diagonalcheck[0] = diagonalcheck[0] + plate[x][x];
            diagonalcheck[1] = diagonalcheck[1] + plate[x][num-1-x];
            
        }
        
        if(diagonalcheck[0] == num){
                totalbingo ++;
                }
        if(diagonalcheck[1] == num){
                totalbingo ++;
                }
           
        
        System.out.println(totalbingo+""\n"");

        }

        
    }
    
}

@eaaa68d78a92ac6baf48ec32bd848c07@","10"
"f02631008","@3eb1a8e7dd2eca6cd0edf4a0111f8c66@import java.io.*;
import java.io.IOException;
import java.util.Scanner;

/**
 *
 * @author philip
 */
public class Bingo {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        
        File file = new File(args[0]);
        try{
            Scanner File_in = new Scanner(file);
            String line_1 = File_in.nextLine();
            String[] Nums = line_1.split("","");
            
            int AnsNum = Integer.parseInt(Nums[0]);
            int ArrNum = Integer.parseInt(Nums[1]);
            int LineIndex=0;
            int[][] Mat = new int[ArrNum][ArrNum];
            int sum = 0;
            int bingoline = 0;
            
            String line_2 = File_in.nextLine();
            String[] Ans = line_2.split("","");
            
            while (File_in.hasNextLine())
            {
                
                String line_3 = File_in.nextLine();
                String[] mypart = line_3.split("","");
                
                for (int i = 0; i < ArrNum; i++) {
                    //System.out.println(part_C1[i]);
                    for(int j = 0; j < AnsNum; j++){
                        
                        if(mypart[i].equalsIgnoreCase(Ans[j])){
                            //System.out.println(""1"");
                            Mat[LineIndex][i] = 1;
                        }
                        
                    }
                }
                
                

                /*for (int i = 0; i < ArrNum; i++){
                    for (int j = 0; j < LineIndex; j++){
                        sum = sum + Mat[LineIndex][i];
                        if(sum == ArrNum){
                            System.out.println(""ininder"");
                        }
                    }
                }*/
                
         
                /*for (int i = 0; i < ArrNum; i++) {
                    //System.out.println(Mat[LineIndex][i]);
                }*/
                
                LineIndex++;
            }
            
            
            for (int i = 0; i < ArrNum; i++){
                sum = 0;
                for (int j = 0; j < ArrNum; j++){
                    sum = sum + Mat[j][i];
                    if(sum == ArrNum){
                        //System.out.println(""Bingo"");
                        bingoline = bingoline+1;
                    }
                }
            }
            
            for (int i = 0; i < ArrNum; i++){
                sum = 0;
                for (int j = 0; j < ArrNum; j++){
                    sum = sum + Mat[i][j];
                    if(sum == ArrNum){
                        //System.out.println(""Bingo1"");
                        bingoline = bingoline+1;
                    }
                }
            }
            
            for (int i = 0; i < 1; i++){
                sum = 0;
                for (int j = 0; j < ArrNum; j++){
                    sum = sum + Mat[i+j][i+j];
                    if(sum == ArrNum){
                        //System.out.println(""Bingo2"");
                        bingoline = bingoline+1;
                    }
                }
            }
            for (int i = ArrNum-1; i > ArrNum-2; i--){
                sum = 0;
                for (int j = 0; j < ArrNum; j++){
                    sum = sum + Mat[i-j][j];
                    if(sum == ArrNum){
                        //System.out.println(""Bingo3"");
                        bingoline = bingoline+1;
                    }
                }
            }
            System.out.println(bingoline);
            
        }
        catch(IOException e){
            System.out.println(""error!""); 
        }
        // TODO code application logic here
    }
    
}

@3eb1a8e7dd2eca6cd0edf4a0111f8c66@","10"
"r03522809","@8b3d061b64c8132218f9604d710f3efe@import edu.princeton.cs.algs4.StdOut;
import java.io.*;

/**
 *
 * @author Dennis
 */
public class Bingo {

    /**
     * @param args the command line arguments
     */

  public static void main(String[] args)throws Exception  {

  try {
      FileReader fr=new FileReader(args[0]);
      BufferedReader br=new BufferedReader(fr);
      String[] data = br.readLine().split("","");
      
      int stringCount = Integer.parseInt(data[0]);
      int num = Integer.parseInt(data[1]);    
      int count=0;
      int countc=0;
      int output=0;
      
      String[] announce = new String[stringCount];
      String[][] matrix = new String[num][num];
      int[][] table = new int[num][num] ;
//      StdOut.println(data[1]);

       announce = br.readLine().split("","");
        
    for( int i=0; i<num ;i++ )
    {
        matrix[i]= br.readLine().split("","");
    }
    
    
        for( int i=0; i<stringCount ;i++ )
    {
            for( int j=0; j<num ;j++ )
        {           
                for( int k=0; k<num ;k++ )
            {

                if(announce[i].equals(matrix[j][k]))
                {
                    table[j][k]=1;
//                    StdOut.println(table[j][k]);
                }
                else 
                {
                    if(  table[j][k] != 1)
                    {
                        table[j][k]=0;
//                    StdOut.println(table[j][k]);
                    }
                }
            }
        }
    }
 
             for( int j=0; j<num ;j++ )
        {           
                 count=0;
                for( int k=0; k<num ;k++ )
            {
                  if(table[j][k]==1)
                  {
                      count=count+1;
                  }
                  if(count==num)   
                  {
                      output=output+1;
                      
                  }
            } 
        }
             
             for( int k=0; k<num ;k++ )
        {    
                count=0;           
                for( int j=0; j<num ;j++ )
            {
                  if(table[j][k]==1)
                  {
                      count=count+1;
                  }
                  if(count==num)   
                  {
                      output=output+1;
                      
                  }
            } 
        }
             
                    count=0;
                 for( int k=0; k<num ;k++ )
                   {
                    if(table[k][k]==1)
                  {
                      count=count+1;
                  }
                  if(count==num)   
                  {
                      output=output+1; 
                   }
                   }
                 
                    count=0;                 
                  for( int k=0; k<num ;k++ )
                  {
                    if(table[k][num-k-1]==1)
                  {
                      count=count+1;
                  }
                  if(count==num)   
                  {
                      output=output+1;   
                   }
                  }
                
             
             System.out.println(output);

            }
     catch (FileNotFoundException e) 
      {
         e.printStackTrace();
      }

        }
    }
@8b3d061b64c8132218f9604d710f3efe@","10"
"r04631046","@3bb1a4f82e745f8606cd3de431702b2f@
import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {

    public static void main(String[] args) throws Exception {
        // read file from args[0] in Java 7 style
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);
            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);
            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];
            // printf in Java (you should comment out or delete this in your final submission)
            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n\n"", stringCount, num, num);

            announce = br.readLine().split("","");

            int[][] matrixTF = new int[num][num];
            int bingoCount = 0;
            for (int i = 0; i < num; i++) {
                String[] row = br.readLine().split("","");
                for (int j = 0; j < num; j++) {
                    matrix[i][j] = row[j];
                    for (int k = 0; k < stringCount; k++) {
                        if (announce[k].equals(matrix[i][j])) {
                            if (matrixTF[i][j] != 1) {
                                matrixTF[i][j] = 1;
                            }
                        }

                    }
                    System.out.printf(""%d"", matrixTF[i][j]);
                }
            }
            int bingoLine = 0;
//            check rows
            int rowCount = 0;
            for (int i = 0; i < num; i++) {
                for (int j = 0; j < num; j++) {
                    if (matrixTF[i][j] == 1) {
                        rowCount++;
                    }
                    if (rowCount == num) {
                        bingoLine++;
                    }
                }
                rowCount = 0;
            }
//            check columns
            int columnCount = 0;
            for (int i = 0; i < num; i++) {
                for (int j = 0; j < num; j++) {
                    if (matrixTF[j][i] == 1) {
                        columnCount++;
                    }
                    if (columnCount == num) {
                        bingoLine++;
                    }
                }
                columnCount = 0;
            }
//            check positive diagonal
            int pdglCount=0;
            for (int i = 0; i < num; i++) {
                if (matrixTF[i][i] == 1) {
                    pdglCount++;
                }                
            }
            if (pdglCount == num) {
                        bingoLine++;
                    }
            pdglCount = 0;
//            check negative diagonal
            int ndglCount=0;
            for (int i = 0; i < num; i++) {
                if (matrixTF[i][num-i-1] == 1) {
                    ndglCount++;
                }                
            }
            if (ndglCount == num) {
                bingoLine++;
            }
            ndglCount = 0;
            
            System.out.printf(""\n%d\n"",bingoLine);
        }
        
    }
}

@3bb1a4f82e745f8606cd3de431702b2f@","10"
"b02611002","@6a183b2c586bf91b6445c6f4d6818b98@import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // record how many straight lines are in the matrix
            int lines = 0;
            
            // matrix01中用來計數的變數，累加到num時lines++
            int matrix01counter=0;
            
            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];
            int[][] matrix01 = new int[num][num];            
            String[] matrixLine = new String[num];


            // printf in Java (you should comment out or delete this in your final submission)
            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);

            // br.readLine()讀一行，寫入announce震烈
            announce = br.readLine().split("","");
            for (int i = 0; i<stringCount; i++){
                System.out.printf(""announce[%s] : %s\n"", i, announce[i]);
            }

//            for (int i = 0; i < num; i++){
//                for (int j = 0; j < num; j++){
//
//                    matrixLine = br.readLine().split("","");
////                    matrix[i][j] = ""x"";//br.readLIne().split("","");
//                    System.out.printf(""%s"", Arrays.toString(matrixLine)); 
//                    System.out.printf(""%s"",matrix[i][j]);
//                    
////                    System.out.printf(""[%s][%s]: %s \n"", i, j, matrix[i]][j]);
//                };
//            };

            // br.readLine()讀檔，一行行寫入 matrix 矩陣
            int lineCount = 0;
            String matrixLine2;
            while ((matrixLine2 = br.readLine()) != null) {
                String[] countries = matrixLine2.split("","");
                System.arraycopy(countries, 0, matrix[lineCount], 0, 3);
                lineCount++;
            }
            
            // matrix01 原為3x3的靈矩陣，若subset與announce相同則設為1
             for (int i = 0; i < num; i++){
                for (int j = 0; j < num; j++){
                    for (int announceNo=0; announceNo<stringCount; announceNo++){
                        if (announce[announceNo].equals(matrix[i][j])){
                            matrix01[i][j]=1;
                            System.out.printf("" [%d][%d] -> %d: %s \n"",i,j, matrix01[i][j], matrix[i][j]);
                            break;
                        }
                    }
                }
            }
            
             // 橫排一排一排累加subset，加到3(num)的話lines++
            for (int i=0;i<num;i++){
                for (int j=0;j<num;j++){
                    matrix01counter += matrix01[i][j];
                    System.out.print(matrix01counter);
                }
                if (matrix01counter==3){lines++;}
                matrix01counter=0;
            }

            // check直排
            for (int j=0;j<num;j++){
                for (int i=0;i<num;i++){
                    matrix01counter += matrix01[i][j];
                    System.out.print(matrix01counter);
                }
                if (matrix01counter==3){lines++;}
                matrix01counter=0;
            }
            
            // check斜線（左上右下）
            for (int k=0;k<num;k++){
                matrix01counter += matrix01[k][k];
            }
            if (matrix01counter==3){lines++;}
            matrix01counter=0;
            
            // check斜線（左下右上）
            for (int k = 0; k < num; k++) {
                matrix01counter += matrix01[num-k-1][k];
            }
            if (matrix01counter == 3) {lines++;}
            matrix01counter = 0;
            
            System.out.printf(""\nanswer: %d"",lines);
            
            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
        }
    }
}

@6a183b2c586bf91b6445c6f4d6818b98@","10"
"d04631001","@bc64ede09b1733ba176360a34746e6a4@
import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try (BufferedReader br = new BufferedReader(new FileReader(""input.txt""))) {

            // read a line and split by ','
            String[] data = br.readLine().split("","");

            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];

            // printf in Java (you should comment out or delete this in your final submission)
            //System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);

            announce = br.readLine().split("","");
            //System.out.printf(""announced: %s %s \n"", announce[0], announce[1]);

            String[] temp = new String[num];
            for (int i = 0; i < matrix[0].length; i++) {
                temp = br.readLine().split("","");
                for (int j = 0; j < matrix.length; j++) {
                    matrix[i][j] = temp[j];
                }
            }
            //System.out.printf(""matrix:\n%s %s %s\n%s %s %s\n%s %s %s\n"", matrix[0][0], matrix[0][1], matrix[0][2], matrix[1][0], matrix[1][1], matrix[1][2], matrix[2][0], matrix[2][1], matrix[2][2]);

            int[][] matrix_a = new int[matrix[0].length][matrix.length];
            int[][] matrix_s = new int[matrix[0].length][matrix.length];
            for (int i = 0; i < matrix[0].length; i++) {
                for (int j = 0; j < matrix.length; j++) {
                    for (int k = 0; k < announce.length; k++) {
                        if (matrix[i][j].equals(announce[k])) {
                            matrix_a[i][j] = 1;
                        } //else if (announce[1].equals(matrix[i][j])) matrix_a[i][j]=""1"";                    
                        else {
                            matrix_a[i][j] = 0;
                        }
                        matrix_s[i][j] = matrix_s[i][j] + matrix_a[i][j];
                    }
                    //System.out.print(matrix_s[i][j] + ""\t"");
                }
                //System.out.println();
            }
            int[] sum_h = new int[matrix.length]; int bingo_h = 0;
            int[] sum_v = new int[matrix.length]; int bingo_v = 0;
            int[] sum_l = new int[matrix.length]; int bingo_l = 0;
            int[] sum_r = new int[matrix.length]; int bingo_r = 0;
            
            // horizontal addition
            for (int i = 0; i < matrix_s[0].length; i++) {
                for (int j = 0; j < matrix_s.length; j++) {
                    sum_h[i] = sum_h[i] + matrix_s[i][j];
                    {
                        if (sum_h[i]==matrix_s[0].length)
                            bingo_h = bingo_h + 1;
                    }
                }
            }
            // vertical addition
            for (int i = 0; i < matrix_s[0].length; i++) {
                for (int j = 0; j < matrix_s.length; j++) {
                    sum_v[i] = sum_v[i] + matrix_s[j][i];
                    {
                        if (sum_v[i]==matrix_s[0].length)
                            bingo_v = bingo_v + 1;
                    }
                }
            }
            // 45 degree-cross addition
            for (int i = 0; i < matrix_s[0].length; i++) {
                for (int j = 0; j<matrix_s.length ; j++) {
                    sum_l[i] = sum_l[i] + matrix_s[i][matrix_s.length-j-1];
                    {
                        if (sum_l[i]==matrix_s[0].length)
                            bingo_l = bingo_l + 1;
                    }
                }
            }
            // -45 degree-cross addition
            for (int i = 0; i < matrix_s[0].length; i++) {
                sum_r[i] = sum_r[i] + matrix_s[i][i];
                {
                    if (sum_r[i]==matrix_s[0].length)
                            bingo_l = bingo_l + 1;
                }
            }
            int bingo = 0;
            bingo = bingo_h + bingo_v + bingo_l + bingo_r;
            //System.out.printf(""bingo h:\n%d\n"", bingo_h);
            //System.out.printf(""bingo v:\n%d\n"", bingo_v);
            //System.out.printf(""bingo l:\n%d\n"", bingo_l);
            //System.out.printf(""bingo r:\n%d\n"", bingo_r);
            //System.out.printf(""bingo:\n%d\n"", bingo);
            System.out.printf(""%d\n"", bingo);
            //System.out.printf(""matrix hit:\n%d %d %d\n%d %d %d\n%d %d %d\n"", matrix_s[0][0], matrix_s[0][1], matrix_s[0][2], matrix_s[1][0],matrix_s[1][1],matrix_s[1][2], matrix_s[2][0],matrix_s[2][1], matrix_s[2][2]);

            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
        }
    }
}

@bc64ede09b1733ba176360a34746e6a4@","10"
"r04631013","@fab6060cca3e5f6a517a8eca8b89975c@import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(""args[0]""))){
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];

            // printf in Java (you should comment out or delete this in your final submission)
            //System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);
 
            String[] called = br.readLine().split("",""); //called countries
            for (int i = 0; i < num; i++) {      //matrix countries depends on the given size
            String[] row = br.readLine().split("","");
            matrix[i] = row;
            }
            for (int i = 0; i < stringCount ; i++){
                for (int j = 0; j < num ; j++){
                    for (int k = 0; k < num ; k++){
                        if  (called[i].compareTo(matrix[j][k])==0) {
                          matrix[j][k] = ""check"";
                        } 
                    }
                }
            }
            String z = ""check"";
            int line = 0;
            for (int i = 0; i < num ; i++){
                int count = 0;
                for (int j = 0; j < num ; j++){
                  if (z.compareTo(matrix[i][j])!=0)  {
                      break;}
                  else{
                      count = count + 1;
                  }
                }
                if (count == num){
                    line = line + 1;    
                }
            }
            
            for (int i = 0; i < num ; i++){
                int count = 0;
                for (int j = 0; j < num ; j++){
                  if (z.compareTo(matrix[j][i])!=0)  {
                      break;}
                  else{
                      count = count + 1;
                  }
                }
                if (count == num){
                    line = line + 1;    
                }
            }
               
                int count = 0;
                for (int j = 0; j < num ; j++){
                  if (z.compareTo(matrix[j][j])!=0)  {
                      break;}
                  else{
                      count = count + 1;
                  }
                }
                if (count == num){
                    line = line + 1;    
                }
                
                count = 0;
                for (int j = 0; j < num ; j++){
                    int k = num - 1 - j; 
                  if (z.compareTo(matrix[j][k])!=0)  {
                      break;}
                  else{
                      count = count + 1;
                  }
                }
                if (count == num){
                    line = line + 1;    
                }
            
         System.out.printf(""%d\n"",line);
            
    

//         for (int i = 0; i < matrix.length; i++) {
//         for (int j = 0; j < matrix[0].length; j++) {
//                System.out.print(matrix[i][j] + "" "");
//            }
//                System.out.print(""\n"");
//         }

              
              
              
              
              
              
              
           //System.out.printf(""lalala %s %s %s\n"",matrix[2]);
            
           
            
            
         
            
     
        
            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
        }
    }


}

@fab6060cca3e5f6a517a8eca8b89975c@","10"
"r04631031","@7b7aa14c77d6f35ffc8a28fe29c6df5b@import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];

            // printf in Java (you should comment out or delete this in your final submission)
//            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);
            
            announce = br.readLine().split("","");
            //store Bingo announcement
            
            String[] temp = new String[num];
            for(int i = 0; i < num; i++){
                temp = br.readLine().split("","");
                for(int j = 0; j < num; j++){
                    matrix[i][j] = temp[j];
//                    System.out.printf(matrix[i][j]);
                }
            }
            //build Bingo matrix
            
            boolean[][] checkmatrix = new boolean[num][num];
            for(int i = 0; i < num; i++){
                for(int j = 0; j < num; j++){
                   for(int k = 0; k < stringCount; k++){
                       if(matrix[i][j].equals(announce[k])){
                           checkmatrix[i][j] = true;
                       }
                   }
                }
            }
            //build boolean checkmatrix
            
            int Countline = 0;
            int Countelement = 0;
            
            for(int i = 0; i < num; i++){
                for(int j = 0; j < num; j++){
                    if(checkmatrix[i][j]){
                        Countelement++;
                    }
                }
                if(Countelement == num){
                    Countline++;
                }            
                Countelement = 0;
            }
            //count the row line
            
            for(int j = 0; j < num; j++){
                for(int i = 0; i < num; i++){
                    if(checkmatrix[i][j]){
                        Countelement++;
                    }
                }
                if(Countelement == num){
                    Countline++;
                }
                Countelement = 0;
            }
            //count the column line
            
            int i = 0, j = 0;
            for(int c = 0; c < num; c++){
                if(checkmatrix[i][j]){
                    Countelement++;
                }
                i++;
                j++;
            }
            if(Countelement == num){
                    Countline++;
                }
            Countelement = 0;
            //count diagonal line (from left to right)
            
            i = 0; 
            j = num - 1;
            for(int c = 0; c < num; c++){
                if(checkmatrix[i][j]){
                    Countelement++;
                }    
                i++;
                j--;
            }
            if(Countelement == num){
                    Countline++;
                }
            Countelement = 0;
            //count diagonal line (from right to left)
            System.out.printf(""%d"", Countline);
        }
    }
}

@7b7aa14c77d6f35ffc8a28fe29c6df5b@","10"
"r03631015","@bfacf21157880f7d99e99f7730d9efe8@import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];

            // printf in Java (you should comment out or delete this in your final submission)
            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);
            
            // read in tatrix
            announce = br.readLine().split("","");
            int i,j,k;
            for (i=0;i<num;i++){
                    matrix[i]=br.readLine().split("","");
            }
            //circle the target
            for (k=0;k<stringCount;k++){
                for (i=0;i<num;i++){
                    for (j=0;j<num;j++){
//                        System.out.printf(""(%s,%s)"",matrix[i][j],announce[k]);
                        if (matrix[i][j].equals(announce[k])){
                            matrix[i][j]=""true"";
                            System.out.printf(""(%d,%d)"",i,j);
                        }
                    }
                }
            }
            
            //count lines
            System.out.printf(""\n"");
            int times;
            int lines=0;
            for (i=0;i<num;i++){
                    times=0;
                    for (j=0;j<num;j++){
                        if(matrix[i][j] !=""true"")
                            break;
                        else
                            times++;
                        if(matrix[i][j]==""true"" && j==num-1)
                            lines ++;
                    }
            }
            for (i=0;i<num;i++){
                    times=0;
                    for (j=0;j<num;j++){
                        if(matrix[j][i] !=""true"")
                            break;
                        else
                            times++;
                        if(matrix[j][i]==""true"" && j==num-1)
                            lines ++;
                    }
            }
            times=0;
            for (i=0;i<num;i++){
                j=i;
                if(matrix[i][j] !=""true"")
                    break;
                else
                    times++;
                if(matrix[i][j]==""true"" && i==num-1)
                    lines ++;
            }
            times=0;
            for (i=0;i<num;i++){
                j=num-i-2;
                if(matrix[i][j] !=""true"")
                    break;
                else
                    times++;
                if(matrix[i][j]==""true"" && i==num-1)
                    lines ++;
            }
            
            System.out.printf(""%d"",lines);
                        
                               
                            
                    
             
            
            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
        }
    }
}

@bfacf21157880f7d99e99f7730d9efe8@","10"
"b03611038","@bbbc1529e98db8c37cfe5bf844dfaf2d@import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
            try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
          //try(BufferedReader br = new BufferedReader(new FileReader(""input.txt""))){
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);
        
        
            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];
            int[][]matrix2= new int[num][num];
            
           announce = br.readLine().split("","");
           int i = 0;
           while(i<num){
           matrix[i] = br.readLine().split("","");
           i++;
           }
           int z=0;
           int j;
           int count=0;
           for(int x=0;x<num;x++)
           {
               for(int y=0;y<num;y++)
               {
                   z=0;
                   while(z<stringCount)
                   {
                   j = matrix[x][y].compareTo(announce[z]);
                   if(j==0)
                   {
                       matrix2[x][y]=1;
                       break;
                   }
                   else
                   {
                       matrix2[x][y]=0;
                   }
                   z++;
                   }
               }
           }
           
           int sum=0;
           for(int x=0;x<num;x++)
           {
                for(int y=0;y<num;y++)
               {
                 sum=sum+ matrix2[x][y];
               }
                if(sum==num)
                {
                    count++;
                }
                sum=0;
           }
            for(int y=0;y<num;y++)
           {
                for(int x=0;x<num;x++)
               {
                 sum=sum+ matrix2[x][y];
               }
                if(sum==num)
                {
                    count++;
                }
                sum=0;
           }
            int sum2=0;
            for(int x=0;x<num;x++)
            {
                sum=sum+ matrix2[x][num-x-1];
                sum2=sum2+matrix2[num-x-1][x];
            }
            if(sum==num)
            {
                count++;
            }
            if(sum2==num)
            {
                count++;
            }
            // printf in Java (you should comment out or delete this in your final submission)
            //System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);
System.out.println(count);
            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
        }
    }
}

@bbbc1529e98db8c37cfe5bf844dfaf2d@","10"
"r03522831","@383f0d0fc0298ba4c324341a877be341@import java.io.FileReader;
import java.io.BufferedReader;
//import java.io.FileNotFoundException;
//import java.io.IOException;
/**
 *
 * @author LAB104
 */
public class Bingo {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws Exception{
        int MAX = 50;
        //String str1;
        String [] data = new String[MAX];
        FileReader fr = new FileReader(args[0]);
        BufferedReader bfr = new BufferedReader(fr);
        
        data = bfr.readLine().split("","");
        
        int stringCount = Integer.parseInt(data[0]);
        int num = Integer.parseInt(data[1]);
        
        try
        {
            if((stringCount<2)||(num < 2))
                throw new ArithmeticException();
            
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];
            int [][] Check = new int[num][num];
            String[] str2 = new String[num];
        
            announce = bfr.readLine().split("","");
        
            for(int i = 0; i < num; i++)
            {
                str2 = bfr.readLine().split("","");
                matrix[i]= str2;
            }
            
            for (int i =0; i < num; i++)
            {
                for (int j = 0; j < num; j++)
                {
                    for (int k =0; k < stringCount; k++)
                    {
                        if(matrix[i][j].equals(announce[k]))
                          Check[i][j] += 1;
                    }
                }
            }
            int counter = 0;
            int [] r1 = new int [num];
            int [] c1 = new int [num];
            int [] d1 = new int [2];
            for(int i =0; i < num; i++)
            {
                for (int j = 0; j < num; j++)
                {
                    r1[i] += Check[i][j];
                    c1[i] += Check[j][i];
                    if(i==j)
                    {
                        d1[0]+=Check[i][j];
                        d1[1]+=Check[i][num-1-j];
                    }
                }
            }
            
            for (int i = 0; i < num; i++)
            {
                if(r1[i]==num)
                    counter++;
                if(c1[i]==num)
                    counter++;
                if(i < 2)
                {
                   if(d1[i]==num)
                       counter++;
                }
            }
           
            /**System.out.println(r1[0]);
              *System.out.println(r1[1]);
              *System.out.println(r1[2]);
              *
              *System.out.println(c1[0]);
              *System.out.println(c1[1]);
              *System.out.println(c1[2]);
              *
              *
              *System.out.println(d1[0]);
              *System.out.println(d1[1]); **/
         
            
            System.out.println(counter);
        }
        catch(ArithmeticException e)
        {
            System.out.println(e+"" throwed!"");
        }
       
    }
    
}
@383f0d0fc0298ba4c324341a877be341@","10"
"r04631023","@ad6eacacb5746f7b4bdee04df3f33f3f@import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];

            // printf in Java (you should comment out or delete this in your final submission)
            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);
            
            
            
            String[] hit = br.readLine().split("","") ;
            for (int i = 0; i < num; i++)
            {
                String[] row = br.readLine().split("","") ;
                matrix[i] = row ;
            }
            
            int rightslash = 0 ;
            int leftslash = 0 ;
            int horizental = 0 ;
            int vertical = 0 ;
            int end = num - 1 ;
            int count = 0 ;
            int[][] bingo = new int[num][num] ;
            int[] HorLoc = new int[num] ;
            int[] VerLoc = new int[num] ;
            
            int a = 0 ;
            int b = 0 ;
            for(int i = 0; i < num; i++)
            {
                for(int j = 0; j < num; j++)
                {
                    for(int k = 0; k < stringCount; k++)
                    {
                        int check = hit[k].compareTo(matrix[i][j]) ;
                        if(i == 0 && j == 0 && check==0 )
                        {
                            rightslash++ ;
                            HorLoc[horizental] = i ;
                            horizental++ ;
                            VerLoc[vertical] = j ;
                            vertical++ ;
                            bingo[i][j] = 1 ;
                        }
                        else if(i == 0 && check==0)
                        {
                            VerLoc[vertical] = j ;
                            vertical++ ;
                            bingo[i][j] = 1 ;
                            //System.out.printf(""%d\n"", bingo[i][j]) ;
                        }
                        else if(j == 0 && check==0) 
                        {
                            HorLoc[horizental] = i ;
                            horizental++ ;
                            bingo[i][j] = 1 ;
                        }
                        else if(i == end && check==0)
                        {
                            leftslash++ ;
                            bingo[i][j] = 1 ;
                        }
                        else if(check==0)
                        {
                            bingo[i][j] = 1 ;
                        }
                    }
                }
            }
            
            if(rightslash > 0)
            {
                int Cal = 0 ;
                for(int i = 0 ; i < num; i++ )
                {
                    Cal = Cal + bingo[i][i] ;
                }
                if(Cal == num)
                {
                    count++ ;
                }
            }
            if(horizental > 0)
            {
                for(int i = 0 ; i < horizental ; i++ )
                {
                    int Cal = 0 ;
                    for(int j = 0 ; j < num ; j++)
                    {
                        Cal = Cal + bingo[HorLoc[i]][j] ;
                    }
                    if(Cal == num)
                    {
                        count++ ;
                    }
                }
            }
            if(vertical > 0)
            {
                for(int i = 0 ; i < vertical ; i++ )
                {
                    int Cal = 0 ;
                    for(int j = 0 ; j < num ; j++)
                    {
                        Cal = Cal + bingo[j][VerLoc[i]] ;
                    }
                    if(Cal == num)
                    {
                        count++ ;
                    }
                }
            }
            if(leftslash > 0)
            {
                int Cal = 0 ;
                for(int i = 0 ; i < num ; i++)
                {
                    Cal = Cal + bingo[end-i][i] ;
                }
                if(Cal == num)
                    {
                        count++ ;
                    }
            }
            

            int check = hit[0].compareTo(matrix[0][2]) ;
            if(a == 0 && check==0)
            {
          
            }
            
            
            System.out.printf(""%d\n"", count) ;
            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
        }
    }
}

@ad6eacacb5746f7b4bdee04df3f33f3f@","10"
"r04546032","@038230b456eda684c4cb8d4d76353af7@import java.io.FileReader;
import java.io.BufferedReader;
import java.util.Arrays;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(""C:\\Users\\user\\Desktop\\Java hw\\hw0\\input.txt""))){
           
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];
            int [][] bingo = new int[num][num];
            // printf in Java (you should comment out or delete this in your final submission)
            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);
            String[] line2 = br.readLine().split("","");
           
          
            for(int i = 0 ; i < stringCount ; i++)
            {
                announce[i] = line2[i];
            }
            
            for(int a = 0;a < num ;a++)
            {
                String[] line = br.readLine().split("","");
                for(int b = 0; b < num ; b++)
                {                    
                    matrix[a][b] = line[b];
                    bingo[a][b] = 1;
                }
            }
            
            for(int i = 0; i < stringCount;i++)
            {
                for(int j =0; j < num;j++)
                {
                    for(int k = 0; k < num;k++)
                    {
                        if(announce[i].compareTo(matrix[j][k])==0)
                        {
                            bingo[j][k] = -1;
                        }
                       
                    }
                }
            }
            int count = 0;
            int win = 0;
            for(int a =0;a<num;a++)
            {
                for(int b =0; b<num;b++)
                {
                    if(bingo[a][b] == -1)
                    {
                        count++;
                    }
                    else 
                    {
                        count = count;
                    }
                }
                if(count == num)
                {
                    win++;
                }
                else
                {
                    count = 0;
                }
            }
            
            
            for(int c = 0; c< num;c++)
            {
                for(int r = 0; r < num;r++)
                {
                     if(bingo[r][c] == -1)
                    {
                        count++;
                    }
                    else 
                    {
                        count = count;
                    }
                }
                 if(count == num)
                {
                    win++;
                }
                else
                {
                    count = 0;
                }
            }
            
             count = 0;
            for(int a =0;a<num;a++)
            {
                for(int b = 0; b < num;b++)
                {
                    if(a == b && bingo[a][b] == -1)
                    {
                        count++;
                    }
                    
                    else 
                    {
                        count = count;
                    }
                }
            
                 if(count == num)
                {
                    win++;
                }
                else
                {
                    count = 0;
                }
            }
            
            
             count = 0;
             for(int a =0;a<num;a++)
            {
                for(int b = 0; b < num;b++)
                {
                    if((a+b) == num)
                   {
                         if(bingo[a][b] == -1)
                    {
                        count++;
                    }
                    else 
                    {
                        count = count;
                    }
                   }
                }
                 if(count == num)
                {
                    win++;
                }
                else
                {
                    count = 0;
                }
            }
            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
             System.out.println(""total line is""+""  ""+win);
        }
    }
}

@038230b456eda684c4cb8d4d76353af7@","9"
"r04631006","@98c082cc3266651763aefd17cb224a36@import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {

    public static void main(String[] args) throws Exception {

        // read file from args[0] in Java 7 style
        try (BufferedReader br = new BufferedReader(new FileReader(args[0]))) {

            // read a line and split by ','
            String[] data = br.readLine().split("","");

            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];
            int[][] bin = new int[num][num];

            // printf in Java (you should comment out or delete this in your final submission)

            announce = br.readLine().split("","");

            int k = 0;
            for (int i = 0; i < num; i++) {
                String[] coun = br.readLine().split("","");
                for (int j = 0; j < num; j++) {
                    matrix[i][j] = coun[j];
                    if (matrix[i][j].equals(announce[0]) || matrix[i][j].equals(announce[1])) {
                        bin[i][j] = 1;

                        k = k + 1;
                    }
                }
            }
            
            k = 0;
            int a = 0;
            for (int i = 0; i < num; i++) {
                if (i == 0 && bin[0][0] == 1) {
                    for (int j = 0; j < (num - 1); j++) {
                        if (bin[j][j] == bin[j + 1][j + 1] ) {
                            k = k + 1;
                        }
                        if (k == num - 1) {
                            a = a + 1;
                        }
                    }
                    k = 0;
                } else if (i == 0 && bin[0][num - 1] == 1) {
                    for (int j = 0; j < (num - 1); j++) {
                        if (bin[j][num - 1 - j] == bin[j + 1][num - 2 - j]) {
                            k = k + 1;
                        }
                        if (k == num - 1) {
                            a = a + 1;
                        }
                        
                    }
                    k = 0;
                }
                for (int j = 0; j < (num - 1); j++) {
                    if (bin[i][j] == bin[i][j + 1] && bin[i][j] == 1) {
                        k = k + 1;
                    }
                    if (k == num - 1) {
                        a = a + 1;
                    }  
                }
                k = 0;

                for (int j = 0; j < (num - 1); j++) {
                    if (bin[j][i] == bin[j+1][i] && bin[j][i] == 1) {
                        k = k + 1;          
                    }
                    if (k == num - 1) {
                        a = a + 1; 
                    }
                }
                k = 0;
            }
            System.out.printf(""%d "", a);
        }

        /*  now you can write your own solution to hw0
         *  you can follow the instruction described below:
         * 
         *  1. read the rest content of the file
         *  2. store the announce strings (2nd line of the file) in variable announce
         *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
         *  4. compare the matrix and announce strings (this is the tricky part)
         *  5. output how many 'straight line' are there in the matrix
         * 
         *  [note]
         *  you can use every data structure in standard Java packages (Java 8 supported)
         *  the packages in stdlib.jar and algs4.jar are also available for you to use
         *
         *  [hint]
         *  1. you should check whether Java pass the variable by references or by values.
         *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
         *     useful for solving problems. 
         */
    }
}

@98c082cc3266651763aefd17cb224a36@","9"
"b01705003","@82579940d6e62c92192bb1648f6a357f@import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {

    public static void main(String[] args) throws Exception {
        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);

            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];

            // printf in Java (you should comment out or delete this in your final submission)
            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);

            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
            
            
             *  2. store the announce strings (2nd line of the file) in variable announce
            
            
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
            
            
             *  4. compare the matrix and announce strings (this is the tricky part)
            
            
             *  5. output how many 'straight line' are there in the matrix
            
            
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
        }
    }
}

@82579940d6e62c92192bb1648f6a357f@","4"
"r04945022","@a382e9fab4da76e8fafa56d38245052e@package bingo;

import java.io.FileReader;
import java.lang.Integer;
import java.io.BufferedReader;
import java.util.Arrays;
import java.lang.Exception;


/**
 * @author Daniel r04945022
 */
public class Bingo {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws Exception{
        
        try(BufferedReader br = new BufferedReader(new FileReader(""src/input.txt""))){
            String[] data = br.readLine().split("" "");
            for(int i=0; data[i]!=null;){
                int j =0;
            }
            String[] firstline = data[0].split("","");
            String[] secline = data[1].split("","");
            String[] thrline = data[2].split("","");
            String[] forthline = data[2].split("","");
            int announced_numbers = Integer.parseInt(firstline[0]);
            int a = Integer.parseInt(firstline[1]);
            String[][] matrix;
            matrix = new String [a][a] ;
                       
            
        }
        // TODO code application logic here
    }
    public static void creat_matrix(){
    
    
}
}
    


@a382e9fab4da76e8fafa56d38245052e@","0"
"r04631035","@d52108d48ddbb50c087f8065a0ed3f7d@import java.io.FileReader;
import java.io.BufferedReader;
import java.io.*;
import java.util.Scanner;
import java.util.*; 
import java.lang.String;
import java.util.Arrays;

public class Bingo {

    public static void main(String[] args) throws Exception {

            //讀取Input字串
            int i = 0;
            int j = 0;
            String[] strs = new String[100];
            Scanner sc = null;
            try {
              sc = new Scanner(new File(""C:\\Users\\Pan\\Desktop\\Data_structure\\project\\Test2\\src\\input.txt""));
            } catch (FileNotFoundException e) {
              e.printStackTrace();
              System.exit(0);
            }
            while (sc.hasNext()) {
              strs[i] = sc.next();  
              i++;
            }
            sc.close();
            
            String[] data1 = strs[0].split("","");
            String[] row1 = strs[1].split("","");
                                   
            int stringCount = Integer.parseInt(data1[0]);    //讓Bingo連成線的物件    
            int num = Integer.parseInt(data1[1]);  //幾成幾的矩陣
            
            //處理連線物件
           String[] Count =  new String[20];
           for(i = 1; i <= stringCount; i++){
              Count = strs[1].split("","");
           }
           //處理Bingo表格
           String[][] row = new String[20][20];
           for(i = 1; i <= num; i++){
                   row[i] = (strs[i+1].split("",""));          
           }
           
           //strs[2].split("","");
           
           
             //System.out.println(Count[0]);
             System.out.println(Count[0]);
             System.out.println(row[2]);
            
            //System.out.println(data1[0]);
            //System.out.println(row1[1]);
            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);
            
            
            
            
            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  1. read the rest content of the file
             *  2. store the announce strings (2nd line of the file) in variable announce
             *  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
             *  4. compare the matrix and announce strings (this is the tricky part)
             *  5. output how many 'straight line' are there in the matrix
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
             */
        }
    }

@d52108d48ddbb50c087f8065a0ed3f7d@","0"
"r03849034","@586aafa4a7275e9b2317aec43171be77@import java.io.FileReader;
import java.io.BufferedReader;

public class Bingo {

    public static void main(String[] args) throws Exception {

        //*  1. read the rest content of the file
        // read file from args[0] in Java 7 style
        try(BufferedReader br = new BufferedReader(new FileReader(args[0]))){
            
            // read a line and split by ','
            String[] data = br.readLine().split("","");
            
           
            // store the first integer in variable stringCount (number of announced strings)
            int stringCount = Integer.parseInt(data[0]);
            
            // store the second integer in variable num (dimension of matrix: num * num)            
            int num = Integer.parseInt(data[1]);

            // initilization of a String array in Java
            String[] announce = new String[stringCount];
            String[][] matrix = new String[num][num];
            
            //*  2. store the announce strings (2nd line of the file) in variable announce
            announce[1] = data[2];
            announce[2] = data[3];
            
            //*  3. store the matrix (from the 3rd line to the end of the file) in variable matrix
            for(int i = 4; i < num*num; i++){
                for(int j = 1; j < 4; j++){
                    matrix[i-3][j] = data[i+(j-1)];
                }
            }
            
            
            boolean[][] card = new boolean [num] [num];
            for(int row = 0; row < num; row++){
                for(int col = 0; col < num; col++){
                    card[row][col] = false;
                    for(int line = 0; line < stringCount; line++){
                        if(matrix[row][col].equals(announce[line])){
                            card[row][col] = true;
                        }
                    }
                    
                }
            }
            
            //*  4. compare the matrix and announce strings (this is the tricky part)
            // Number of straight lines
            int count = 0;
            
            //* Check rows
            for(int row = 0; row < num; row++){
                int c = 0;
                for(int col = 0; col < num; col++){
                    if(card[row][col] = true){
                    c++;
                    }
                }
                if(c == num){
                    count++;
                }
            }
            
            //* Check columns
            for(int col = 0; col < num; col++){
                int c = 0;
                for(int row = 0; row < num; row++){
                    if(card[row][col] = true){
                    c++;
                    }
                }
                if(c == num){
                    count++;
                }
            }
            
            //* Check diagonals
            for(int row = 0; row < num; row++){
                int c = 0;
                if(card[row][row] = true){
                c++;
                }
                if(c == num){
                    count++;
                }
            }
            
            //*  5. output how many 'straight line' are there in the matrix
            // printf in Java (you should comment out or delete this in your final submission)

            /*  now you can write your own solution to hw0
             *  you can follow the instruction described below:
             * 
             *  [note]
             *  you can use every data structure in standard Java packages (Java 8 supported)
             *  the packages in stdlib.jar and algs4.jar are also available for you to use
             *
             *  [hint]
             *  1. you should check whether Java pass the variable by references or by values.
             *  2. some data structure such as HashSet, HashMap, Arrays, ArrayList, Vector are very
             *     useful for solving problems. 
*/
            System.out.printf(""number of announced strings: %d\ndimension of matrix: %d x %d\n"", stringCount, num, num);
            System.out.println(count);
        }
    }
}

@586aafa4a7275e9b2317aec43171be77@","0"
